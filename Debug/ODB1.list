
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  080081c0  080081c0  000091c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b4c  08008b4c  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b54  08008b54  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b54  08008b54  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b58  08008b58  00009b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008b5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001418  200001e8  08008d44  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001600  08008d44  0000a600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3a1  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8f  00000000  00000000  000145b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000ea0  00000000  00000000  00016541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000600  00000000  00000000  000173e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000487  00000000  00000000  000179e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba46  00000000  00000000  00017e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd5d  00000000  00000000  000338ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095eba  00000000  00000000  0004160b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d74c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002480  00000000  00000000  000d7508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080081a8 	.word	0x080081a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080081a8 	.word	0x080081a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <BMP280_ReadRegister>:

    float altitude = (T0 / alpha) * (1 - pow((pressure / P0), (1 / beta)));
    return altitude;
}

uint8_t BMP280_ReadRegister(uint8_t reg) {
 8000a88:	b500      	push	{lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	f88d 0007 	strb.w	r0, [sp, #7]

    uint8_t received_data;
    Write_GPIO(PA, 8, LOW); // Disable CS
 8000a90:	2200      	movs	r2, #0
 8000a92:	2108      	movs	r1, #8
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fbc7 	bl	8001228 <Write_GPIO>
    SPI2_TX(&reg, 1);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f10d 0007 	add.w	r0, sp, #7
 8000aa0:	f000 fc46 	bl	8001330 <SPI2_TX>
    SPI2_RX(&received_data, 1);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	f10d 000f 	add.w	r0, sp, #15
 8000aaa:	f000 fc5f 	bl	800136c <SPI2_RX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	f000 fbb8 	bl	8001228 <Write_GPIO>
    return received_data;
}
 8000ab8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000abc:	b005      	add	sp, #20
 8000abe:	f85d fb04 	ldr.w	pc, [sp], #4

08000ac2 <BMP280_ReadCalibrationData>:
void BMP280_ReadCalibrationData(BMP280 *devBMP) {
 8000ac2:	b530      	push	{r4, r5, lr}
 8000ac4:	b089      	sub	sp, #36	@ 0x24
 8000ac6:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 8000ac8:	20f3      	movs	r0, #243	@ 0xf3
 8000aca:	f7ff ffdd 	bl	8000a88 <BMP280_ReadRegister>
 8000ace:	f010 0f04 	tst.w	r0, #4
 8000ad2:	d1f9      	bne.n	8000ac8 <BMP280_ReadCalibrationData+0x6>
    for (int i = 0; i < 26; i++) {
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e00a      	b.n	8000aee <BMP280_ReadCalibrationData+0x2c>
        calib[i] = BMP280_ReadRegister(BMP280_REG_CALIB_00 + i);
 8000ad8:	f1a4 0078 	sub.w	r0, r4, #120	@ 0x78
 8000adc:	b2c0      	uxtb	r0, r0
 8000ade:	f7ff ffd3 	bl	8000a88 <BMP280_ReadRegister>
 8000ae2:	f104 0320 	add.w	r3, r4, #32
 8000ae6:	446b      	add	r3, sp
 8000ae8:	f803 0c1c 	strb.w	r0, [r3, #-28]
    for (int i = 0; i < 26; i++) {
 8000aec:	3401      	adds	r4, #1
 8000aee:	2c19      	cmp	r4, #25
 8000af0:	ddf2      	ble.n	8000ad8 <BMP280_ReadCalibrationData+0x16>
    devBMP->calib_data.dig_T1 = (calib[1] << 8) | calib[0];
 8000af2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000af6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000afa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000afe:	812b      	strh	r3, [r5, #8]
    devBMP->calib_data.dig_T2 = (calib[3] << 8) | calib[2];
 8000b00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000b04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000b08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b0c:	816b      	strh	r3, [r5, #10]
    devBMP->calib_data.dig_T3 = (calib[5] << 8) | calib[4];
 8000b0e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8000b12:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000b16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b1a:	81ab      	strh	r3, [r5, #12]
    devBMP->calib_data.dig_P1 = (calib[7] << 8) | calib[6];
 8000b1c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000b20:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b28:	81eb      	strh	r3, [r5, #14]
    devBMP->calib_data.dig_P2 = (calib[9] << 8) | calib[8];
 8000b2a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000b2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b36:	822b      	strh	r3, [r5, #16]
    devBMP->calib_data.dig_P3 = (calib[11] << 8) | calib[10];
 8000b38:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000b3c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000b40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b44:	826b      	strh	r3, [r5, #18]
    devBMP->calib_data.dig_P4 = (calib[13] << 8) | calib[12];
 8000b46:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8000b4a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000b4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b52:	82ab      	strh	r3, [r5, #20]
    devBMP->calib_data.dig_P5 = (calib[15] << 8) | calib[14];
 8000b54:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8000b58:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000b5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b60:	82eb      	strh	r3, [r5, #22]
    devBMP->calib_data.dig_P6 = (calib[17] << 8) | calib[16];
 8000b62:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8000b66:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b6e:	832b      	strh	r3, [r5, #24]
    devBMP->calib_data.dig_P7 = (calib[19] << 8) | calib[18];
 8000b70:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8000b74:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b7c:	836b      	strh	r3, [r5, #26]
    devBMP->calib_data.dig_P8 = (calib[21] << 8) | calib[20];
 8000b7e:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8000b82:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000b86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b8a:	83ab      	strh	r3, [r5, #28]
    devBMP->calib_data.dig_P9 = (calib[23] << 8) | calib[22];
 8000b8c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8000b90:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b98:	83eb      	strh	r3, [r5, #30]
}
 8000b9a:	b009      	add	sp, #36	@ 0x24
 8000b9c:	bd30      	pop	{r4, r5, pc}

08000b9e <BMP280_WriteRegister>:

uint8_t BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8000b9e:	b500      	push	{lr}
 8000ba0:	b083      	sub	sp, #12

    uint8_t data[2] = {reg, value};
 8000ba2:	f88d 0004 	strb.w	r0, [sp, #4]
 8000ba6:	f88d 1005 	strb.w	r1, [sp, #5]
    Write_GPIO(PA, 8, LOW); // Disable CS
 8000baa:	2200      	movs	r2, #0
 8000bac:	2108      	movs	r1, #8
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f000 fb3a 	bl	8001228 <Write_GPIO>
    SPI2_TX(data, 2);
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	a801      	add	r0, sp, #4
 8000bb8:	f000 fbba 	bl	8001330 <SPI2_TX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f000 fb31 	bl	8001228 <Write_GPIO>
    return 1; // OK
}
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	b003      	add	sp, #12
 8000bca:	f85d fb04 	ldr.w	pc, [sp], #4

08000bce <BMP280_Init>:
uint8_t BMP280_Init(BMP280 *devBMP) {
 8000bce:	b510      	push	{r4, lr}
 8000bd0:	4604      	mov	r4, r0
	SPI_Init(2);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f000 fb48 	bl	8001268 <SPI_Init>
    BMP280_WriteRegister(BMP280_REG_RESET, BMP280_RESET_WORD); // Reset
 8000bd8:	21b6      	movs	r1, #182	@ 0xb6
 8000bda:	20e0      	movs	r0, #224	@ 0xe0
 8000bdc:	f7ff ffdf 	bl	8000b9e <BMP280_WriteRegister>
    if (BMP280_ReadRegister(BMP280_REG_ID) != BMP280_DEVICE_ID) {
 8000be0:	20d0      	movs	r0, #208	@ 0xd0
 8000be2:	f7ff ff51 	bl	8000a88 <BMP280_ReadRegister>
 8000be6:	2858      	cmp	r0, #88	@ 0x58
 8000be8:	d001      	beq.n	8000bee <BMP280_Init+0x20>
        return 0; // Error
 8000bea:	2000      	movs	r0, #0
}
 8000bec:	bd10      	pop	{r4, pc}
    BMP280_ReadCalibrationData(devBMP);
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ff67 	bl	8000ac2 <BMP280_ReadCalibrationData>
    BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, BMP280_SETTING_CTRL_MEAS_NORMAL);
 8000bf4:	2157      	movs	r1, #87	@ 0x57
 8000bf6:	20f4      	movs	r0, #244	@ 0xf4
 8000bf8:	f7ff ffd1 	bl	8000b9e <BMP280_WriteRegister>
    BMP280_WriteRegister(BMP280_REG_CONFIG, BMP280_SETTING_CONFIG);
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	20f5      	movs	r0, #245	@ 0xf5
 8000c00:	f7ff ffcd 	bl	8000b9e <BMP280_WriteRegister>
    return 1;
 8000c04:	2001      	movs	r0, #1
 8000c06:	e7f1      	b.n	8000bec <BMP280_Init+0x1e>

08000c08 <CD74HC4051_Init>:

#include "GAUL_Drivers/CD74HC4051.h"
#include "GAUL_Drivers/Pyros.h"
#include "GAUL_Drivers/Low_Level_Drivers/ADC_driver.h"

uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0

	// Read pin
	Init_GPIO(PA, 0, IN, I_AN); // MUL_AN
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 fabe 	bl	8001194 <Init_GPIO>
	// Batteries
	Init_GPIO(PC, 13, OUT2, O_GP_PP); // MUL_S0
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	210d      	movs	r1, #13
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 fab8 	bl	8001194 <Init_GPIO>
	Init_GPIO(PC, 14, OUT2, O_GP_PP); // MUL_S1
 8000c24:	2300      	movs	r3, #0
 8000c26:	2202      	movs	r2, #2
 8000c28:	210e      	movs	r1, #14
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 fab2 	bl	8001194 <Init_GPIO>
	Init_GPIO(PC, 15, OUT2, O_GP_PP); // MUL_S2
 8000c30:	2300      	movs	r3, #0
 8000c32:	2202      	movs	r2, #2
 8000c34:	210f      	movs	r1, #15
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 faac 	bl	8001194 <Init_GPIO>
	Init_GPIO(PB, 8, OUT2, O_GP_PP); // MUL_E~
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2202      	movs	r2, #2
 8000c40:	2108      	movs	r1, #8
 8000c42:	4610      	mov	r0, r2
 8000c44:	f000 faa6 	bl	8001194 <Init_GPIO>
	// Set MUL_E~ (inverse)
	Write_GPIO(PB, 8, HIGH);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f000 faeb 	bl	8001228 <Write_GPIO>
	// Pyros
	Pyro_Init();
 8000c52:	f000 fa07 	bl	8001064 <Pyro_Init>

	//ADC calibration
	ADC_Stop(hadc);
 8000c56:	4620      	mov	r0, r4
 8000c58:	f000 fa97 	bl	800118a <ADC_Stop>
	ADC_Calibration(hadc);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f000 fa8f 	bl	8001180 <ADC_Calibration>

	return 1; // OK
}
 8000c62:	2001      	movs	r0, #1
 8000c64:	bd10      	pop	{r4, pc}

08000c66 <ICM20602_Read>:
{
	return Read_GPIO(PA, 10);
}

void ICM20602_Read(uint8_t address, uint8_t rxData[], uint8_t size)
{
 8000c66:	b530      	push	{r4, r5, lr}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	f88d 0007 	strb.w	r0, [sp, #7]
	address |= 0x80;  // read operation
 8000c72:	b2c3      	uxtb	r3, r0
 8000c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c78:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(PB, 12, LOW);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	210c      	movs	r1, #12
 8000c80:	2002      	movs	r0, #2
 8000c82:	f000 fad1 	bl	8001228 <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8000c86:	2101      	movs	r1, #1
 8000c88:	f10d 0007 	add.w	r0, sp, #7
 8000c8c:	f000 fb50 	bl	8001330 <SPI2_TX>
	SPI2_RX(rxData, size);  // receive 6 bytes data
 8000c90:	4629      	mov	r1, r5
 8000c92:	4620      	mov	r0, r4
 8000c94:	f000 fb6a 	bl	800136c <SPI2_RX>
	Write_GPIO(PB, 12, HIGH);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	210c      	movs	r1, #12
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fac3 	bl	8001228 <Write_GPIO>
}
 8000ca2:	b003      	add	sp, #12
 8000ca4:	bd30      	pop	{r4, r5, pc}

08000ca6 <ICM20602_Write>:

void ICM20602_Write(uint8_t address, uint8_t value)
{
 8000ca6:	b500      	push	{lr}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	f88d 0007 	strb.w	r0, [sp, #7]
 8000cae:	f88d 1006 	strb.w	r1, [sp, #6]
	Write_GPIO(PB, 12, LOW);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f000 fab6 	bl	8001228 <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	f10d 0007 	add.w	r0, sp, #7
 8000cc2:	f000 fb35 	bl	8001330 <SPI2_TX>
	SPI2_TX(&value, 1);  // send value
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	f10d 0006 	add.w	r0, sp, #6
 8000ccc:	f000 fb30 	bl	8001330 <SPI2_TX>
	Write_GPIO(PB, 12, HIGH);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	210c      	movs	r1, #12
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f000 faa7 	bl	8001228 <Write_GPIO>
	HAL_Delay(20);
 8000cda:	2014      	movs	r0, #20
 8000cdc:	f001 f8a8 	bl	8001e30 <HAL_Delay>
}
 8000ce0:	b003      	add	sp, #12
 8000ce2:	f85d fb04 	ldr.w	pc, [sp], #4

08000ce6 <ICM20602_Remove_DC_Offset>:
{
 8000ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	460d      	mov	r5, r1
	int16_t offset[3] = {0,0,0};
 8000cee:	2400      	movs	r4, #0
 8000cf0:	f8ad 4008 	strh.w	r4, [sp, #8]
 8000cf4:	f8ad 400a 	strh.w	r4, [sp, #10]
 8000cf8:	f8ad 400c 	strh.w	r4, [sp, #12]
	for(i = 0; i < mean; i++)
 8000cfc:	e027      	b.n	8000d4e <ICM20602_Remove_DC_Offset+0x68>
		ICM20602_Read(ICM20602_REG_GYRO_XOUT_H, rxData, 6);
 8000cfe:	2206      	movs	r2, #6
 8000d00:	4669      	mov	r1, sp
 8000d02:	2043      	movs	r0, #67	@ 0x43
 8000d04:	f7ff ffaf 	bl	8000c66 <ICM20602_Read>
		offset[0] += (rxData[0] << 8) | rxData[1];
 8000d08:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8000d0c:	f89d 1000 	ldrb.w	r1, [sp]
 8000d10:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000d14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d18:	4413      	add	r3, r2
 8000d1a:	f8ad 3008 	strh.w	r3, [sp, #8]
		offset[1] += (rxData[2] << 8) | rxData[3];
 8000d1e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000d22:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8000d26:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000d2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d2e:	4413      	add	r3, r2
 8000d30:	f8ad 300a 	strh.w	r3, [sp, #10]
		offset[2] += (rxData[4] << 8) | rxData[5];
 8000d34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8000d38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000d3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000d40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d44:	4413      	add	r3, r2
 8000d46:	f8ad 300c 	strh.w	r3, [sp, #12]
	for(i = 0; i < mean; i++)
 8000d4a:	3401      	adds	r4, #1
 8000d4c:	b264      	sxtb	r4, r4
 8000d4e:	42ac      	cmp	r4, r5
 8000d50:	dbd5      	blt.n	8000cfe <ICM20602_Remove_DC_Offset+0x18>
	offset[0] /= mean;
 8000d52:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 8000d56:	fb97 f7f5 	sdiv	r7, r7, r5
 8000d5a:	b239      	sxth	r1, r7
 8000d5c:	f8ad 1008 	strh.w	r1, [sp, #8]
	offset[1] /= mean;
 8000d60:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8000d64:	fb96 f6f5 	sdiv	r6, r6, r5
 8000d68:	fa0f f886 	sxth.w	r8, r6
 8000d6c:	f8ad 800a 	strh.w	r8, [sp, #10]
	offset[2] /= mean;
 8000d70:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 8000d74:	fb94 f4f5 	sdiv	r4, r4, r5
 8000d78:	b225      	sxth	r5, r4
 8000d7a:	f8ad 500c 	strh.w	r5, [sp, #12]
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRH, (offset[0]*-2)>>8);
 8000d7e:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
 8000d82:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000d86:	2013      	movs	r0, #19
 8000d88:	f7ff ff8d 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRL, offset[0]*-2);
 8000d8c:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
 8000d90:	0079      	lsls	r1, r7, #1
 8000d92:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8000d96:	2014      	movs	r0, #20
 8000d98:	f7ff ff85 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRH, (offset[1]*-2)>>8);
 8000d9c:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8000da0:	f3c8 11c7 	ubfx	r1, r8, #7, #8
 8000da4:	2015      	movs	r0, #21
 8000da6:	f7ff ff7e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRL, offset[1]*-2);
 8000daa:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
 8000dae:	0071      	lsls	r1, r6, #1
 8000db0:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8000db4:	2016      	movs	r0, #22
 8000db6:	f7ff ff76 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRH, (offset[2]*-2)>>8);
 8000dba:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8000dbe:	f3c5 11c7 	ubfx	r1, r5, #7, #8
 8000dc2:	2017      	movs	r0, #23
 8000dc4:	f7ff ff6f 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRL, offset[2]*-2);
 8000dc8:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 8000dcc:	0061      	lsls	r1, r4, #1
 8000dce:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8000dd2:	2018      	movs	r0, #24
 8000dd4:	f7ff ff67 	bl	8000ca6 <ICM20602_Write>
}
 8000dd8:	b004      	add	sp, #16
 8000dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000dde <ICM20602_Init>:
{
 8000dde:	b530      	push	{r4, r5, lr}
 8000de0:	b083      	sub	sp, #12
 8000de2:	4604      	mov	r4, r0
	dev->gyroXRaw = 	0.0f;
 8000de4:	2500      	movs	r5, #0
 8000de6:	8005      	strh	r5, [r0, #0]
	dev->gyroYRaw = 	0.0f;
 8000de8:	8045      	strh	r5, [r0, #2]
	dev->gyroZRaw = 	0.0f;
 8000dea:	8085      	strh	r5, [r0, #4]
	dev->accXRaw = 		0.0f;
 8000dec:	80c5      	strh	r5, [r0, #6]
	dev->accYRaw = 		0.0f;
 8000dee:	8105      	strh	r5, [r0, #8]
	dev->accZRaw = 		0.0f;
 8000df0:	8145      	strh	r5, [r0, #10]
	dev->temperatureC = 0.0f;
 8000df2:	2300      	movs	r3, #0
 8000df4:	6243      	str	r3, [r0, #36]	@ 0x24
	Init_GPIO(PA,  10, IN, I_PP); // Init GPIO for the interrupt
 8000df6:	2302      	movs	r3, #2
 8000df8:	462a      	mov	r2, r5
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 f9c9 	bl	8001194 <Init_GPIO>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x80);
 8000e02:	2180      	movs	r1, #128	@ 0x80
 8000e04:	206b      	movs	r0, #107	@ 0x6b
 8000e06:	f7ff ff4e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_I2C_IF, 0x40);
 8000e0a:	2140      	movs	r1, #64	@ 0x40
 8000e0c:	2070      	movs	r0, #112	@ 0x70
 8000e0e:	f7ff ff4a 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x01);
 8000e12:	2101      	movs	r1, #1
 8000e14:	206b      	movs	r0, #107	@ 0x6b
 8000e16:	f7ff ff46 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_SMPLRT_DIV, 0x00);
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	2019      	movs	r0, #25
 8000e1e:	f7ff ff42 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_CONFIG, 0x05);
 8000e22:	2105      	movs	r1, #5
 8000e24:	201a      	movs	r0, #26
 8000e26:	f7ff ff3e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_GYRO_CONFIG, 0x018);
 8000e2a:	2118      	movs	r1, #24
 8000e2c:	201b      	movs	r0, #27
 8000e2e:	f7ff ff3a 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG, 0x18);
 8000e32:	2118      	movs	r1, #24
 8000e34:	201c      	movs	r0, #28
 8000e36:	f7ff ff36 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	201d      	movs	r0, #29
 8000e3e:	f7ff ff32 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_INT_ENABLE, 0x01);
 8000e42:	2101      	movs	r1, #1
 8000e44:	2038      	movs	r0, #56	@ 0x38
 8000e46:	f7ff ff2e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Read(ICM20602_REG_WHO_AM_I, rxData, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	a901      	add	r1, sp, #4
 8000e4e:	2075      	movs	r0, #117	@ 0x75
 8000e50:	f7ff ff09 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_I2C_IF, rxData, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	a901      	add	r1, sp, #4
 8000e58:	2070      	movs	r0, #112	@ 0x70
 8000e5a:	f7ff ff04 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_PWR_MGMT_1, rxData, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	a901      	add	r1, sp, #4
 8000e62:	206b      	movs	r0, #107	@ 0x6b
 8000e64:	f7ff feff 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_SMPLRT_DIV, rxData, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	a901      	add	r1, sp, #4
 8000e6c:	2019      	movs	r0, #25
 8000e6e:	f7ff fefa 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_CONFIG, rxData, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	a901      	add	r1, sp, #4
 8000e76:	201a      	movs	r0, #26
 8000e78:	f7ff fef5 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG, rxData, 1);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	a901      	add	r1, sp, #4
 8000e80:	201c      	movs	r0, #28
 8000e82:	f7ff fef0 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG2, rxData, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	a901      	add	r1, sp, #4
 8000e8a:	201d      	movs	r0, #29
 8000e8c:	f7ff feeb 	bl	8000c66 <ICM20602_Read>
	ICM20602_Remove_DC_Offset(dev,2);
 8000e90:	2102      	movs	r1, #2
 8000e92:	4620      	mov	r0, r4
 8000e94:	f7ff ff27 	bl	8000ce6 <ICM20602_Remove_DC_Offset>
}
 8000e98:	4628      	mov	r0, r5
 8000e9a:	b003      	add	sp, #12
 8000e9c:	bd30      	pop	{r4, r5, pc}

08000e9e <L76LM33_SendCommand>:
	L76LM33_SendCommand(PROTOCOL_NAVMODE);

	return 1; // OK
}

uint8_t L76LM33_SendCommand(char *command) {
 8000e9e:	b510      	push	{r4, lr}
 8000ea0:	4604      	mov	r4, r0

	USART_TX(GPS_USART_PORT, (uint8_t*)command, strlen(command));
 8000ea2:	f7ff f955 	bl	8000150 <strlen>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f000 faee 	bl	800148c <USART_TX>
	return 1; // OK
}
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	bd10      	pop	{r4, pc}

08000eb4 <L76LM33_Init>:
uint8_t L76LM33_Init (void) {
 8000eb4:	b530      	push	{r4, r5, lr}
 8000eb6:	b09b      	sub	sp, #108	@ 0x6c
	char PROTOCOL_SETRMS[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*35\r\n";
 8000eb8:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8000ebc:	4c15      	ldr	r4, [pc, #84]	@ (8000f14 <L76LM33_Init+0x60>)
 8000ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ecc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ed0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ed4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8000ed8:	f8ac 2000 	strh.w	r2, [ip]
	char PROTOCOL_GPSSEARCHONLY[] = "$PMTK353,1,0,0,0,0*2A\r\n";
 8000edc:	ac05      	add	r4, sp, #20
 8000ede:	4d0e      	ldr	r5, [pc, #56]	@ (8000f18 <L76LM33_Init+0x64>)
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ee8:	e884 0003 	stmia.w	r4, {r0, r1}
	char PROTOCOL_NAVMODE[] = "PMTK886,2*2A\r\n";
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <L76LM33_Init+0x68>)
 8000eee:	ac01      	add	r4, sp, #4
 8000ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef2:	c407      	stmia	r4!, {r0, r1, r2}
 8000ef4:	f824 3b02 	strh.w	r3, [r4], #2
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	7023      	strb	r3, [r4, #0]
	L76LM33_SendCommand(PROTOCOL_SETRMS);
 8000efc:	a80b      	add	r0, sp, #44	@ 0x2c
 8000efe:	f7ff ffce 	bl	8000e9e <L76LM33_SendCommand>
	L76LM33_SendCommand(PROTOCOL_GPSSEARCHONLY);
 8000f02:	a805      	add	r0, sp, #20
 8000f04:	f7ff ffcb 	bl	8000e9e <L76LM33_SendCommand>
	L76LM33_SendCommand(PROTOCOL_NAVMODE);
 8000f08:	a801      	add	r0, sp, #4
 8000f0a:	f7ff ffc8 	bl	8000e9e <L76LM33_SendCommand>
}
 8000f0e:	2001      	movs	r0, #1
 8000f10:	b01b      	add	sp, #108	@ 0x6c
 8000f12:	bd30      	pop	{r4, r5, pc}
 8000f14:	080081c0 	.word	0x080081c0
 8000f18:	080081fc 	.word	0x080081fc
 8000f1c:	08008214 	.word	0x08008214

08000f20 <FATFS_ErrorToString>:
extern char USERPath[4];

// Dedebugging
const char* FATFS_ErrorToString(FRESULT result) {

    switch (result) {
 8000f20:	2813      	cmp	r0, #19
 8000f22:	d831      	bhi.n	8000f88 <FATFS_ErrorToString+0x68>
 8000f24:	e8df f000 	tbb	[pc, r0]
 8000f28:	0e0c320a 	.word	0x0e0c320a
 8000f2c:	16141210 	.word	0x16141210
 8000f30:	1e1c1a18 	.word	0x1e1c1a18
 8000f34:	26242220 	.word	0x26242220
 8000f38:	2e2c2a28 	.word	0x2e2c2a28
 8000f3c:	4814      	ldr	r0, [pc, #80]	@ (8000f90 <FATFS_ErrorToString+0x70>)
 8000f3e:	4770      	bx	lr
        case FR_OK: return "Succeeded";
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer";
        case FR_INT_ERR: return "Assertion failed";
 8000f40:	4814      	ldr	r0, [pc, #80]	@ (8000f94 <FATFS_ErrorToString+0x74>)
 8000f42:	4770      	bx	lr
        case FR_NOT_READY: return "The physical drive cannot work";
 8000f44:	4814      	ldr	r0, [pc, #80]	@ (8000f98 <FATFS_ErrorToString+0x78>)
 8000f46:	4770      	bx	lr
        case FR_NO_FILE: return "Could not find the file";
 8000f48:	4814      	ldr	r0, [pc, #80]	@ (8000f9c <FATFS_ErrorToString+0x7c>)
 8000f4a:	4770      	bx	lr
        case FR_NO_PATH: return "Could not find the path";
 8000f4c:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <FATFS_ErrorToString+0x80>)
 8000f4e:	4770      	bx	lr
        case FR_INVALID_NAME: return "The path name format is invalid";
 8000f50:	4814      	ldr	r0, [pc, #80]	@ (8000fa4 <FATFS_ErrorToString+0x84>)
 8000f52:	4770      	bx	lr
        case FR_DENIED: return "Access denied due to prohibited access or directory full";
 8000f54:	4814      	ldr	r0, [pc, #80]	@ (8000fa8 <FATFS_ErrorToString+0x88>)
 8000f56:	4770      	bx	lr
        case FR_EXIST: return "Access denied due to prohibited access";
 8000f58:	4814      	ldr	r0, [pc, #80]	@ (8000fac <FATFS_ErrorToString+0x8c>)
 8000f5a:	4770      	bx	lr
        case FR_INVALID_OBJECT: return "The file/directory object is invalid";
 8000f5c:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <FATFS_ErrorToString+0x90>)
 8000f5e:	4770      	bx	lr
        case FR_WRITE_PROTECTED: return "The physical drive is write protected";
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <FATFS_ErrorToString+0x94>)
 8000f62:	4770      	bx	lr
        case FR_INVALID_DRIVE: return "The logical drive number is invalid";
 8000f64:	4814      	ldr	r0, [pc, #80]	@ (8000fb8 <FATFS_ErrorToString+0x98>)
 8000f66:	4770      	bx	lr
        case FR_NOT_ENABLED: return "The volume has no work area";
 8000f68:	4814      	ldr	r0, [pc, #80]	@ (8000fbc <FATFS_ErrorToString+0x9c>)
 8000f6a:	4770      	bx	lr
        case FR_NO_FILESYSTEM: return "There is no valid FAT volume";
 8000f6c:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <FATFS_ErrorToString+0xa0>)
 8000f6e:	4770      	bx	lr
        case FR_MKFS_ABORTED: return "The f_mkfs() aborted due to any parameter error";
 8000f70:	4814      	ldr	r0, [pc, #80]	@ (8000fc4 <FATFS_ErrorToString+0xa4>)
 8000f72:	4770      	bx	lr
        case FR_TIMEOUT: return "Could not get a grant to access the volume within defined period";
 8000f74:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <FATFS_ErrorToString+0xa8>)
 8000f76:	4770      	bx	lr
        case FR_LOCKED: return "The operation is rejected according to the file sharing policy";
 8000f78:	4814      	ldr	r0, [pc, #80]	@ (8000fcc <FATFS_ErrorToString+0xac>)
 8000f7a:	4770      	bx	lr
        case FR_NOT_ENOUGH_CORE: return "LFN working buffer could not be allocated";
 8000f7c:	4814      	ldr	r0, [pc, #80]	@ (8000fd0 <FATFS_ErrorToString+0xb0>)
 8000f7e:	4770      	bx	lr
        case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_SHARE";
 8000f80:	4814      	ldr	r0, [pc, #80]	@ (8000fd4 <FATFS_ErrorToString+0xb4>)
 8000f82:	4770      	bx	lr
        case FR_INVALID_PARAMETER: return "Given parameter is invalid";
 8000f84:	4814      	ldr	r0, [pc, #80]	@ (8000fd8 <FATFS_ErrorToString+0xb8>)
 8000f86:	4770      	bx	lr
        default: return "Unknown error";
 8000f88:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <FATFS_ErrorToString+0xbc>)
 8000f8a:	4770      	bx	lr
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer";
 8000f8c:	4814      	ldr	r0, [pc, #80]	@ (8000fe0 <FATFS_ErrorToString+0xc0>)
    }
}
 8000f8e:	4770      	bx	lr
 8000f90:	08008224 	.word	0x08008224
 8000f94:	08008268 	.word	0x08008268
 8000f98:	0800827c 	.word	0x0800827c
 8000f9c:	0800829c 	.word	0x0800829c
 8000fa0:	080082b4 	.word	0x080082b4
 8000fa4:	080082cc 	.word	0x080082cc
 8000fa8:	080082ec 	.word	0x080082ec
 8000fac:	08008328 	.word	0x08008328
 8000fb0:	08008350 	.word	0x08008350
 8000fb4:	08008378 	.word	0x08008378
 8000fb8:	080083a0 	.word	0x080083a0
 8000fbc:	080083c4 	.word	0x080083c4
 8000fc0:	080083e0 	.word	0x080083e0
 8000fc4:	08008400 	.word	0x08008400
 8000fc8:	08008430 	.word	0x08008430
 8000fcc:	08008474 	.word	0x08008474
 8000fd0:	080084b4 	.word	0x080084b4
 8000fd4:	080084e0 	.word	0x080084e0
 8000fd8:	08008504 	.word	0x08008504
 8000fdc:	08008520 	.word	0x08008520
 8000fe0:	08008230 	.word	0x08008230

08000fe4 <MEM2067_SDCardDetection>:
    Write_GPIO(PA, 4, HIGH);

    return 1; // OK
}

uint8_t MEM2067_SDCardDetection(void) {
 8000fe4:	b510      	push	{r4, lr}

    Write_GPIO(PA, 4, LOW);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2104      	movs	r1, #4
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f91c 	bl	8001228 <Write_GPIO>

    memset(&USERFatFS, 0, sizeof(USERFatFS));
 8000ff0:	4c17      	ldr	r4, [pc, #92]	@ (8001050 <MEM2067_SDCardDetection+0x6c>)
 8000ff2:	f241 0230 	movw	r2, #4144	@ 0x1030
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f005 faf5 	bl	80065e8 <memset>
    memset(USERPath, 0, sizeof(USERPath));
 8000ffe:	4915      	ldr	r1, [pc, #84]	@ (8001054 <MEM2067_SDCardDetection+0x70>)
 8001000:	2300      	movs	r3, #0
 8001002:	600b      	str	r3, [r1, #0]

    FRESULT res = f_mount(&USERFatFS, USERPath, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	4620      	mov	r0, r4
 8001008:	f004 fb2e 	bl	8005668 <f_mount>
 800100c:	4604      	mov	r4, r0
    printf(" -> SD card error, result: %s\n", FATFS_ErrorToString(res));
 800100e:	f7ff ff87 	bl	8000f20 <FATFS_ErrorToString>
 8001012:	4601      	mov	r1, r0
 8001014:	4810      	ldr	r0, [pc, #64]	@ (8001058 <MEM2067_SDCardDetection+0x74>)
 8001016:	f005 f99f 	bl	8006358 <iprintf>

    if (res == FR_OK) {
 800101a:	b974      	cbnz	r4, 800103a <MEM2067_SDCardDetection+0x56>
        f_mount(NULL, USERPath, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <MEM2067_SDCardDetection+0x70>)
 8001020:	2000      	movs	r0, #0
 8001022:	f004 fb21 	bl	8005668 <f_mount>
        Write_GPIO(PA, 4, HIGH);
 8001026:	2201      	movs	r2, #1
 8001028:	2104      	movs	r1, #4
 800102a:	4610      	mov	r0, r2
 800102c:	f000 f8fc 	bl	8001228 <Write_GPIO>
        printf(" -> SD card detected\r\n");
 8001030:	480a      	ldr	r0, [pc, #40]	@ (800105c <MEM2067_SDCardDetection+0x78>)
 8001032:	f005 f9f9 	bl	8006428 <puts>
        return 1; // OK
 8001036:	2001      	movs	r0, #1
    } else {
        printf(" -> No SD card detected\r\n");
        Write_GPIO(PA, 4, HIGH);
        return 0;
    }
}
 8001038:	bd10      	pop	{r4, pc}
        printf(" -> No SD card detected\r\n");
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <MEM2067_SDCardDetection+0x7c>)
 800103c:	f005 f9f4 	bl	8006428 <puts>
        Write_GPIO(PA, 4, HIGH);
 8001040:	2201      	movs	r2, #1
 8001042:	2104      	movs	r1, #4
 8001044:	4610      	mov	r0, r2
 8001046:	f000 f8ef 	bl	8001228 <Write_GPIO>
        return 0;
 800104a:	2000      	movs	r0, #0
 800104c:	e7f4      	b.n	8001038 <MEM2067_SDCardDetection+0x54>
 800104e:	bf00      	nop
 8001050:	20000458 	.word	0x20000458
 8001054:	20000454 	.word	0x20000454
 8001058:	08008530 	.word	0x08008530
 800105c:	08008550 	.word	0x08008550
 8001060:	08008568 	.word	0x08008568

08001064 <Pyro_Init>:
 *      Author: gagno
 */

#include "GAUL_Drivers/Pyros.h"

void Pyro_Init(void) {
 8001064:	b508      	push	{r3, lr}

	// Pyros
	Init_GPIO(PB, 4, OUT2, O_GP_PP); // PyroON0
 8001066:	2300      	movs	r3, #0
 8001068:	2202      	movs	r2, #2
 800106a:	2104      	movs	r1, #4
 800106c:	4610      	mov	r0, r2
 800106e:	f000 f891 	bl	8001194 <Init_GPIO>
	Init_GPIO(PB, 5, OUT2, O_GP_PP); // PyroON1
 8001072:	2300      	movs	r3, #0
 8001074:	2202      	movs	r2, #2
 8001076:	2105      	movs	r1, #5
 8001078:	4610      	mov	r0, r2
 800107a:	f000 f88b 	bl	8001194 <Init_GPIO>
	Init_GPIO(PA, 15, OUT2, O_GP_PP); // Pyro_Test~
 800107e:	2300      	movs	r3, #0
 8001080:	2202      	movs	r2, #2
 8001082:	210f      	movs	r1, #15
 8001084:	2001      	movs	r0, #1
 8001086:	f000 f885 	bl	8001194 <Init_GPIO>
	// Set Pyro_Test~ (inverse) et Pyros_ON LOW
	Write_GPIO(PA, 15, HIGH);
 800108a:	2201      	movs	r2, #1
 800108c:	210f      	movs	r1, #15
 800108e:	4610      	mov	r0, r2
 8001090:	f000 f8ca 	bl	8001228 <Write_GPIO>
	Write_GPIO(PB, 4, LOW);
 8001094:	2200      	movs	r2, #0
 8001096:	2104      	movs	r1, #4
 8001098:	2002      	movs	r0, #2
 800109a:	f000 f8c5 	bl	8001228 <Write_GPIO>
	Write_GPIO(PB, 5, LOW);
 800109e:	2200      	movs	r2, #0
 80010a0:	2105      	movs	r1, #5
 80010a2:	2002      	movs	r0, #2
 80010a4:	f000 f8c0 	bl	8001228 <Write_GPIO>
}
 80010a8:	bd08      	pop	{r3, pc}
	...

080010ac <ws2812_timer2_init>:
static uint16_t ws2812_gpio_set_bits = 0;
static uint16_t dma_buffer[DMA_BUFFER_SIZE];


static void ws2812_timer2_init(void)
{
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b0:	2400      	movs	r4, #0
 80010b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80010b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80010b6:	940c      	str	r4, [sp, #48]	@ 0x30
 80010b8:	940d      	str	r4, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	9408      	str	r4, [sp, #32]
 80010bc:	9409      	str	r4, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 80010be:	9401      	str	r4, [sp, #4]
 80010c0:	9402      	str	r4, [sp, #8]
 80010c2:	9403      	str	r4, [sp, #12]
 80010c4:	9404      	str	r4, [sp, #16]
 80010c6:	9405      	str	r4, [sp, #20]
 80010c8:	9406      	str	r4, [sp, #24]
 80010ca:	9407      	str	r4, [sp, #28]

    htimer2.Instance = TIM2;
 80010cc:	4d1a      	ldr	r5, [pc, #104]	@ (8001138 <ws2812_timer2_init+0x8c>)
 80010ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d2:	602b      	str	r3, [r5, #0]
    htimer2.Init.Prescaler = 0;
 80010d4:	606c      	str	r4, [r5, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	60ac      	str	r4, [r5, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 80010d8:	235a      	movs	r3, #90	@ 0x5a
 80010da:	60eb      	str	r3, [r5, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	612c      	str	r4, [r5, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htimer2);
 80010e0:	4628      	mov	r0, r5
 80010e2:	f002 faed 	bl	80036c0 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ea:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 80010ec:	a90a      	add	r1, sp, #40	@ 0x28
 80010ee:	4628      	mov	r0, r5
 80010f0:	f002 fc50 	bl	8003994 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 80010f4:	4628      	mov	r0, r5
 80010f6:	f002 fb32 	bl	800375e <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	9408      	str	r4, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 80010fe:	a908      	add	r1, sp, #32
 8001100:	4628      	mov	r0, r5
 8001102:	f002 ff8f 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2660      	movs	r6, #96	@ 0x60
 8001108:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 800110a:	231c      	movs	r3, #28
 800110c:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110e:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001110:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001112:	4622      	mov	r2, r4
 8001114:	a901      	add	r1, sp, #4
 8001116:	4628      	mov	r0, r5
 8001118:	f002 fb7a 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 800111e:	2339      	movs	r3, #57	@ 0x39
 8001120:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001122:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001126:	2204      	movs	r2, #4
 8001128:	eb0d 0102 	add.w	r1, sp, r2
 800112c:	4628      	mov	r0, r5
 800112e:	f002 fb6f 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
}
 8001132:	b00e      	add	sp, #56	@ 0x38
 8001134:	bd70      	pop	{r4, r5, r6, pc}
 8001136:	bf00      	nop
 8001138:	20000204 	.word	0x20000204

0800113c <WS2812_Init>:
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
}

void WS2812_Init()
{
 800113c:	b500      	push	{lr}
 800113e:	b083      	sub	sp, #12
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <WS2812_Init+0x40>)
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	f042 0201 	orr.w	r2, r2, #1
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	9b01      	ldr	r3, [sp, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	4611      	mov	r1, r2
 8001158:	200c      	movs	r0, #12
 800115a:	f001 faaa 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	4611      	mov	r1, r2
 8001162:	200f      	movs	r0, #15
 8001164:	f001 faa5 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	4611      	mov	r1, r2
 800116c:	2011      	movs	r0, #17
 800116e:	f001 faa0 	bl	80026b2 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001172:	f7ff ff9b 	bl	80010ac <ws2812_timer2_init>
}
 8001176:	b003      	add	sp, #12
 8001178:	f85d fb04 	ldr.w	pc, [sp], #4
 800117c:	40021000 	.word	0x40021000

08001180 <ADC_Calibration>:
	HAL_ADC_Start(hadc);

	return 0;
}

uint8_t ADC_Calibration(ADC_HandleTypeDef *hadc) {
 8001180:	b508      	push	{r3, lr}

	HAL_ADCEx_Calibration_Start(hadc);
 8001182:	f001 f911 	bl	80023a8 <HAL_ADCEx_Calibration_Start>

	return 0;
}
 8001186:	2000      	movs	r0, #0
 8001188:	bd08      	pop	{r3, pc}

0800118a <ADC_Stop>:

uint8_t ADC_Stop(ADC_HandleTypeDef *hadc) {
 800118a:	b508      	push	{r3, lr}

	HAL_ADC_Stop(hadc);
 800118c:	f000 ff4c 	bl	8002028 <HAL_ADC_Stop>

	return 0;
}
 8001190:	2000      	movs	r0, #0
 8001192:	bd08      	pop	{r3, pc}

08001194 <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8001194:	b510      	push	{r4, lr}
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 unsigned short offset = 0x00;

	if(pin > 7)
 8001196:	2907      	cmp	r1, #7
 8001198:	d904      	bls.n	80011a4 <Init_GPIO+0x10>
		{
			tPIN -= 8;
 800119a:	3908      	subs	r1, #8
 800119c:	b289      	uxth	r1, r1
			offset = 0x01;
 800119e:	f04f 0e01 	mov.w	lr, #1
 80011a2:	e001      	b.n	80011a8 <Init_GPIO+0x14>
 unsigned short offset = 0x00;
 80011a4:	f04f 0e00 	mov.w	lr, #0
		}

	if(port == 1)
 80011a8:	2801      	cmp	r0, #1
 80011aa:	d00f      	beq.n	80011cc <Init_GPIO+0x38>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 80011ac:	2802      	cmp	r0, #2
 80011ae:	d02d      	beq.n	800120c <Init_GPIO+0x78>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 80011b0:	2803      	cmp	r0, #3
 80011b2:	d116      	bne.n	80011e2 <Init_GPIO+0x4e>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 80011b4:	4c1b      	ldr	r4, [pc, #108]	@ (8001224 <Init_GPIO+0x90>)
 80011b6:	69a0      	ldr	r0, [r4, #24]
 80011b8:	f040 0010 	orr.w	r0, r0, #16
 80011bc:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 80011be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011c2:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 80011c6:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 80011ca:	e00a      	b.n	80011e2 <Init_GPIO+0x4e>
			RCC_APB2ENR |= 4; //// Enabling PORT A
 80011cc:	4c15      	ldr	r4, [pc, #84]	@ (8001224 <Init_GPIO+0x90>)
 80011ce:	69a0      	ldr	r0, [r4, #24]
 80011d0:	f040 0004 	orr.w	r0, r0, #4
 80011d4:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 80011d6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011da:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 80011de:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 80011e2:	f8dc 0000 	ldr.w	r0, [ip]
 80011e6:	0089      	lsls	r1, r1, #2
 80011e8:	f04f 0e0f 	mov.w	lr, #15
 80011ec:	fa0e fe01 	lsl.w	lr, lr, r1
 80011f0:	ea20 000e 	bic.w	r0, r0, lr
 80011f4:	f8cc 0000 	str.w	r0, [ip]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 80011f8:	f8dc 0000 	ldr.w	r0, [ip]
 80011fc:	408a      	lsls	r2, r1
 80011fe:	3102      	adds	r1, #2
 8001200:	408b      	lsls	r3, r1
 8001202:	431a      	orrs	r2, r3
 8001204:	4302      	orrs	r2, r0
 8001206:	f8cc 2000 	str.w	r2, [ip]
}
 800120a:	bd10      	pop	{r4, pc}
			RCC_APB2ENR |= 8; //// Enabling PORT A
 800120c:	4c05      	ldr	r4, [pc, #20]	@ (8001224 <Init_GPIO+0x90>)
 800120e:	69a0      	ldr	r0, [r4, #24]
 8001210:	f040 0008 	orr.w	r0, r0, #8
 8001214:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 8001216:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800121a:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 800121e:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 8001222:	e7de      	b.n	80011e2 <Init_GPIO+0x4e>
 8001224:	40021000 	.word	0x40021000

08001228 <Write_GPIO>:
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
 8001228:	2801      	cmp	r0, #1
 800122a:	d005      	beq.n	8001238 <Write_GPIO+0x10>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 800122c:	2802      	cmp	r0, #2
 800122e:	d00a      	beq.n	8001246 <Write_GPIO+0x1e>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001230:	2803      	cmp	r0, #3
 8001232:	d102      	bne.n	800123a <Write_GPIO+0x12>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <Write_GPIO+0x34>)
 8001236:	e000      	b.n	800123a <Write_GPIO+0x12>
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <Write_GPIO+0x38>)
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 800123a:	b132      	cbz	r2, 800124a <Write_GPIO+0x22>
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	408a      	lsls	r2, r1
 8001240:	4302      	orrs	r2, r0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	4770      	bx	lr
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <Write_GPIO+0x3c>)
 8001248:	e7f7      	b.n	800123a <Write_GPIO+0x12>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f101 	lsl.w	r1, r0, r1
 8001252:	ea22 0201 	bic.w	r2, r2, r1
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	4001100c 	.word	0x4001100c
 8001260:	4001080c 	.word	0x4001080c
 8001264:	40010c0c 	.word	0x40010c0c

08001268 <SPI_Init>:

#include "main.h"
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"
#include "GAUL_Drivers/Low_Level_Drivers/SPI_driver.h"

void SPI_Init(unsigned short spi) {
 8001268:	b508      	push	{r3, lr}
    if(spi == 1) {
 800126a:	2801      	cmp	r0, #1
 800126c:	d002      	beq.n	8001274 <SPI_Init+0xc>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1

        Write_GPIO(PA, 4, HIGH);

        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    } else if(spi == 2) {
 800126e:	2802      	cmp	r0, #2
 8001270:	d026      	beq.n	80012c0 <SPI_Init+0x58>
        Write_GPIO(PA, 8, HIGH);
        Write_GPIO(PB, 12, HIGH);

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}
 8001272:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001274:	4a2b      	ldr	r2, [pc, #172]	@ (8001324 <SPI_Init+0xbc>)
 8001276:	6993      	ldr	r3, [r2, #24]
 8001278:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800127c:	6193      	str	r3, [r2, #24]
        Init_GPIO(PA, 4, OUT50, O_GP_PP); // CS
 800127e:	2300      	movs	r3, #0
 8001280:	2203      	movs	r2, #3
 8001282:	2104      	movs	r1, #4
 8001284:	f7ff ff86 	bl	8001194 <Init_GPIO>
        Init_GPIO(PA, 5, OUT50, O_AF_PP); // CLK
 8001288:	2302      	movs	r3, #2
 800128a:	2203      	movs	r2, #3
 800128c:	2105      	movs	r1, #5
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ff80 	bl	8001194 <Init_GPIO>
        Init_GPIO(PA, 6, IN, I_PP);    // MISO SPI1
 8001294:	2302      	movs	r3, #2
 8001296:	2200      	movs	r2, #0
 8001298:	2106      	movs	r1, #6
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff ff7a 	bl	8001194 <Init_GPIO>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1
 80012a0:	2302      	movs	r3, #2
 80012a2:	2203      	movs	r2, #3
 80012a4:	2107      	movs	r1, #7
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff ff74 	bl	8001194 <Init_GPIO>
        Write_GPIO(PA, 4, HIGH);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2104      	movs	r1, #4
 80012b0:	4610      	mov	r0, r2
 80012b2:	f7ff ffb9 	bl	8001228 <Write_GPIO>
        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <SPI_Init+0xc0>)
 80012b8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e7d8      	b.n	8001272 <SPI_Init+0xa>
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80012c0:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <SPI_Init+0xbc>)
 80012c2:	69d3      	ldr	r3, [r2, #28]
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c8:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 8, OUT50, O_GP_PP); // CS (optionnel)
 80012ca:	2300      	movs	r3, #0
 80012cc:	2203      	movs	r2, #3
 80012ce:	2108      	movs	r1, #8
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff ff5f 	bl	8001194 <Init_GPIO>
        Init_GPIO(PB, 12, OUT50, O_GP_PP); // CS
 80012d6:	2300      	movs	r3, #0
 80012d8:	2203      	movs	r2, #3
 80012da:	210c      	movs	r1, #12
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff ff59 	bl	8001194 <Init_GPIO>
        Init_GPIO(PB, 13, OUT50, O_AF_PP); // CLK
 80012e2:	2302      	movs	r3, #2
 80012e4:	2203      	movs	r2, #3
 80012e6:	210d      	movs	r1, #13
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff53 	bl	8001194 <Init_GPIO>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
 80012ee:	2302      	movs	r3, #2
 80012f0:	2200      	movs	r2, #0
 80012f2:	210e      	movs	r1, #14
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff4d 	bl	8001194 <Init_GPIO>
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2
 80012fa:	2302      	movs	r3, #2
 80012fc:	2203      	movs	r2, #3
 80012fe:	210f      	movs	r1, #15
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff47 	bl	8001194 <Init_GPIO>
        Write_GPIO(PA, 8, HIGH);
 8001306:	2201      	movs	r2, #1
 8001308:	2108      	movs	r1, #8
 800130a:	4610      	mov	r0, r2
 800130c:	f7ff ff8c 	bl	8001228 <Write_GPIO>
        Write_GPIO(PB, 12, HIGH);
 8001310:	2201      	movs	r2, #1
 8001312:	210c      	movs	r1, #12
 8001314:	2002      	movs	r0, #2
 8001316:	f7ff ff87 	bl	8001228 <Write_GPIO>
        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SPI_Init+0xc4>)
 800131c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	e7a6      	b.n	8001272 <SPI_Init+0xa>
 8001324:	40021000 	.word	0x40021000
 8001328:	40013000 	.word	0x40013000
 800132c:	40003800 	.word	0x40003800

08001330 <SPI2_TX>:

    uint8_t temp = SPI1->DR;
    temp = SPI1->SR;
}

void SPI2_TX(uint8_t *data, int size) {
 8001330:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 8001332:	2200      	movs	r2, #0
 8001334:	e008      	b.n	8001348 <SPI2_TX+0x18>
        while (!(SPI2->SR & SPI_SR_TXE)) {}
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <SPI2_TX+0x38>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f013 0f02 	tst.w	r3, #2
 800133e:	d0fa      	beq.n	8001336 <SPI2_TX+0x6>
        SPI2->DR = data[i];
 8001340:	5c81      	ldrb	r1, [r0, r2]
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <SPI2_TX+0x38>)
 8001344:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 8001346:	3201      	adds	r2, #1
 8001348:	4562      	cmp	r2, ip
 800134a:	dbf4      	blt.n	8001336 <SPI2_TX+0x6>
    }

    while (!(SPI2->SR & SPI_SR_TXE)) {}
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <SPI2_TX+0x38>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f013 0f02 	tst.w	r3, #2
 8001354:	d0fa      	beq.n	800134c <SPI2_TX+0x1c>
    while (SPI2->SR & SPI_SR_BSY) {}
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <SPI2_TX+0x38>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800135e:	d1fa      	bne.n	8001356 <SPI2_TX+0x26>

    uint8_t temp = SPI2->DR;
 8001360:	4b01      	ldr	r3, [pc, #4]	@ (8001368 <SPI2_TX+0x38>)
 8001362:	68da      	ldr	r2, [r3, #12]
    temp = SPI2->SR;
 8001364:	689b      	ldr	r3, [r3, #8]
}
 8001366:	4770      	bx	lr
 8001368:	40003800 	.word	0x40003800

0800136c <SPI2_RX>:
    }
}

void SPI2_RX(uint8_t *data, int size) {

    while (size) {
 800136c:	e011      	b.n	8001392 <SPI2_RX+0x26>
        while (SPI2->SR & SPI_SR_BSY) {}
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <SPI2_RX+0x2c>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001376:	d1fa      	bne.n	800136e <SPI2_RX+0x2>
        SPI2->DR = 0;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <SPI2_RX+0x2c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
        while (!(SPI2->SR & SPI_SR_RXNE)) {}
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <SPI2_RX+0x2c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f013 0f01 	tst.w	r3, #1
 8001386:	d0fa      	beq.n	800137e <SPI2_RX+0x12>
        *data++ = SPI2->DR;
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <SPI2_RX+0x2c>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 8001390:	3901      	subs	r1, #1
    while (size) {
 8001392:	2900      	cmp	r1, #0
 8001394:	d1eb      	bne.n	800136e <SPI2_RX+0x2>
    }
}
 8001396:	4770      	bx	lr
 8001398:	40003800 	.word	0x40003800

0800139c <USART_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/USART_driver.h"
#include "main.h"


void USART_Init(unsigned short usart)
{
 800139c:	b508      	push	{r3, lr}
    if(usart == 1) {
 800139e:	2801      	cmp	r0, #1
 80013a0:	d004      	beq.n	80013ac <USART_Init+0x10>
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART1
        NVIC_EnableIRQ(USART1_IRQn);
    }
    else if(usart == 2) {
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d024      	beq.n	80013f0 <USART_Init+0x54>
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART2
        NVIC_EnableIRQ(USART2_IRQn);
    }
    else if(usart == 3) {
 80013a6:	2803      	cmp	r0, #3
 80013a8:	d044      	beq.n	8001434 <USART_Init+0x98>
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART3
        NVIC_EnableIRQ(USART3_IRQn);
    }
}
 80013aa:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80013ac:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <USART_Init+0xdc>)
 80013ae:	6993      	ldr	r3, [r2, #24]
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b4:	6193      	str	r3, [r2, #24]
        Init_GPIO(PB, 6, OUT50, O_AF_PP); // TX
 80013b6:	2302      	movs	r3, #2
 80013b8:	2203      	movs	r2, #3
 80013ba:	2106      	movs	r1, #6
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fee9 	bl	8001194 <Init_GPIO>
        Init_GPIO(PB, 7, IN, I_PP); // RX
 80013c2:	2302      	movs	r3, #2
 80013c4:	2200      	movs	r2, #0
 80013c6:	2107      	movs	r1, #7
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fee3 	bl	8001194 <Init_GPIO>
        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <USART_Init+0xe0>)
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013d6:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	f042 0208 	orr.w	r2, r2, #8
 80013de:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	60da      	str	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e8:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <USART_Init+0xe4>)
 80013ea:	2220      	movs	r2, #32
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	e7dc      	b.n	80013aa <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80013f0:	4a21      	ldr	r2, [pc, #132]	@ (8001478 <USART_Init+0xdc>)
 80013f2:	69d3      	ldr	r3, [r2, #28]
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 2, OUT50, O_AF_PP); // TX
 80013fa:	2302      	movs	r3, #2
 80013fc:	2203      	movs	r2, #3
 80013fe:	4619      	mov	r1, r3
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fec7 	bl	8001194 <Init_GPIO>
        Init_GPIO(PA, 3, IN, I_PP); // RX
 8001406:	2302      	movs	r3, #2
 8001408:	2200      	movs	r2, #0
 800140a:	2103      	movs	r1, #3
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff fec1 	bl	8001194 <Init_GPIO>
        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <USART_Init+0xe8>)
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800141a:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	f042 0208 	orr.w	r2, r2, #8
 8001422:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	f042 0204 	orr.w	r2, r2, #4
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <USART_Init+0xe4>)
 800142e:	2240      	movs	r2, #64	@ 0x40
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	e7ba      	b.n	80013aa <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART3EN ;
 8001434:	4a10      	ldr	r2, [pc, #64]	@ (8001478 <USART_Init+0xdc>)
 8001436:	69d3      	ldr	r3, [r2, #28]
 8001438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143c:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 10, OUT50, O_AF_PP); // TX
 800143e:	2302      	movs	r3, #2
 8001440:	2203      	movs	r2, #3
 8001442:	210a      	movs	r1, #10
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fea5 	bl	8001194 <Init_GPIO>
        Init_GPIO(PB, 11, IN, I_PP); // RX
 800144a:	2302      	movs	r3, #2
 800144c:	2200      	movs	r2, #0
 800144e:	210b      	movs	r1, #11
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe9f 	bl	8001194 <Init_GPIO>
        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <USART_Init+0xec>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800145e:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	f042 0204 	orr.w	r2, r2, #4
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <USART_Init+0xe4>)
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	605a      	str	r2, [r3, #4]
}
 8001476:	e798      	b.n	80013aa <USART_Init+0xe>
 8001478:	40021000 	.word	0x40021000
 800147c:	40013800 	.word	0x40013800
 8001480:	e000e100 	.word	0xe000e100
 8001484:	40004400 	.word	0x40004400
 8001488:	40004800 	.word	0x40004800

0800148c <USART_TX>:

void USART_TX(unsigned short usart, const uint8_t *data, int size) {
 800148c:	b410      	push	{r4}

    if (usart == 1) {
 800148e:	2801      	cmp	r0, #1
 8001490:	d027      	beq.n	80014e2 <USART_TX+0x56>
        for (int i = 0; i < size; i++) {
            while (!(USART1->SR & USART_SR_TXE));
            USART1->DR = data[i];
            while (!(USART1->SR & USART_SR_TC));
        }
    } else if (usart == 2) {
 8001492:	2802      	cmp	r0, #2
 8001494:	d038      	beq.n	8001508 <USART_TX+0x7c>
        for (int i = 0; i < size; i++) {
            while (!(USART2->SR & USART_SR_TXE));
            USART2->DR = data[i];
            while (!(USART2->SR & USART_SR_TC));
        }
    } else if (usart == 3) {
 8001496:	2803      	cmp	r0, #3
 8001498:	d121      	bne.n	80014de <USART_TX+0x52>
        for (int i = 0; i < size; i++) {
 800149a:	2000      	movs	r0, #0
 800149c:	4290      	cmp	r0, r2
 800149e:	da1e      	bge.n	80014de <USART_TX+0x52>
            while (!(USART3->SR & USART_SR_TXE));
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <USART_TX+0x80>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014a8:	d0fa      	beq.n	80014a0 <USART_TX+0x14>
            USART3->DR = data[i];
 80014aa:	5c0c      	ldrb	r4, [r1, r0]
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <USART_TX+0x80>)
 80014ae:	605c      	str	r4, [r3, #4]
            while (!(USART3->SR & USART_SR_TC));
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <USART_TX+0x80>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80014b8:	d0fa      	beq.n	80014b0 <USART_TX+0x24>
        for (int i = 0; i < size; i++) {
 80014ba:	3001      	adds	r0, #1
 80014bc:	e7ee      	b.n	800149c <USART_TX+0x10>
            while (!(USART1->SR & USART_SR_TXE));
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <USART_TX+0x84>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014c6:	d0fa      	beq.n	80014be <USART_TX+0x32>
            USART1->DR = data[i];
 80014c8:	5c0c      	ldrb	r4, [r1, r0]
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <USART_TX+0x84>)
 80014cc:	605c      	str	r4, [r3, #4]
            while (!(USART1->SR & USART_SR_TC));
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <USART_TX+0x84>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80014d6:	d0fa      	beq.n	80014ce <USART_TX+0x42>
        for (int i = 0; i < size; i++) {
 80014d8:	3001      	adds	r0, #1
 80014da:	4290      	cmp	r0, r2
 80014dc:	dbef      	blt.n	80014be <USART_TX+0x32>
        }
    }
}
 80014de:	bc10      	pop	{r4}
 80014e0:	4770      	bx	lr
        for (int i = 0; i < size; i++) {
 80014e2:	2000      	movs	r0, #0
 80014e4:	e7f9      	b.n	80014da <USART_TX+0x4e>
            while (!(USART2->SR & USART_SR_TXE));
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <USART_TX+0x88>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014ee:	d0fa      	beq.n	80014e6 <USART_TX+0x5a>
            USART2->DR = data[i];
 80014f0:	5c0c      	ldrb	r4, [r1, r0]
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <USART_TX+0x88>)
 80014f4:	605c      	str	r4, [r3, #4]
            while (!(USART2->SR & USART_SR_TC));
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <USART_TX+0x88>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80014fe:	d0fa      	beq.n	80014f6 <USART_TX+0x6a>
        for (int i = 0; i < size; i++) {
 8001500:	3001      	adds	r0, #1
 8001502:	4290      	cmp	r0, r2
 8001504:	dbef      	blt.n	80014e6 <USART_TX+0x5a>
 8001506:	e7ea      	b.n	80014de <USART_TX+0x52>
 8001508:	2000      	movs	r0, #0
 800150a:	e7fa      	b.n	8001502 <USART_TX+0x76>
 800150c:	40004800 	.word	0x40004800
 8001510:	40013800 	.word	0x40013800
 8001514:	40004400 	.word	0x40004400

08001518 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001518:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800151c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001520:	f013 0f01 	tst.w	r3, #1
 8001524:	d011      	beq.n	800154a <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001526:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800152a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800152e:	f013 0f01 	tst.w	r3, #1
 8001532:	d101      	bne.n	8001538 <ITM_SendChar+0x20>
 8001534:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8001536:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001538:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f9      	beq.n	8001536 <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001542:	b2c3      	uxtb	r3, r0
 8001544:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001548:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 800154a:	4770      	bx	lr

0800154c <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 800154c:	b570      	push	{r4, r5, r6, lr}
 800154e:	460c      	mov	r4, r1
 8001550:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	2500      	movs	r5, #0
 8001554:	e004      	b.n	8001560 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 8001556:	f814 0b01 	ldrb.w	r0, [r4], #1
 800155a:	f7ff ffdd 	bl	8001518 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	3501      	adds	r5, #1
 8001560:	42b5      	cmp	r5, r6
 8001562:	dbf8      	blt.n	8001556 <_write+0xa>
	}
	return len;
}
 8001564:	4630      	mov	r0, r6
 8001566:	bd70      	pop	{r4, r5, r6, pc}

08001568 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156a:	e7fe      	b.n	800156a <Error_Handler+0x2>

0800156c <MX_USART1_UART_Init>:
{
 800156c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800156e:	480a      	ldr	r0, [pc, #40]	@ (8001598 <MX_USART1_UART_Init+0x2c>)
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <MX_USART1_UART_Init+0x30>)
 8001572:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001574:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001578:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	2300      	movs	r3, #0
 800157c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800157e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001580:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001582:	220c      	movs	r2, #12
 8001584:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158a:	f002 fda9 	bl	80040e0 <HAL_UART_Init>
 800158e:	b900      	cbnz	r0, 8001592 <MX_USART1_UART_Init+0x26>
}
 8001590:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001592:	f7ff ffe9 	bl	8001568 <Error_Handler>
 8001596:	bf00      	nop
 8001598:	20000338 	.word	0x20000338
 800159c:	40013800 	.word	0x40013800

080015a0 <MX_USART2_UART_Init>:
{
 80015a0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80015a2:	480a      	ldr	r0, [pc, #40]	@ (80015cc <MX_USART2_UART_Init+0x2c>)
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <MX_USART2_UART_Init+0x30>)
 80015a6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80015a8:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80015ac:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	2300      	movs	r3, #0
 80015b0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b6:	220c      	movs	r2, #12
 80015b8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015be:	f002 fd8f 	bl	80040e0 <HAL_UART_Init>
 80015c2:	b900      	cbnz	r0, 80015c6 <MX_USART2_UART_Init+0x26>
}
 80015c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015c6:	f7ff ffcf 	bl	8001568 <Error_Handler>
 80015ca:	bf00      	nop
 80015cc:	200002f0 	.word	0x200002f0
 80015d0:	40004400 	.word	0x40004400

080015d4 <MX_USART3_UART_Init>:
{
 80015d4:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80015d6:	480a      	ldr	r0, [pc, #40]	@ (8001600 <MX_USART3_UART_Init+0x2c>)
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <MX_USART3_UART_Init+0x30>)
 80015da:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 80015dc:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80015e0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	2300      	movs	r3, #0
 80015e4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015e8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015ea:	220c      	movs	r2, #12
 80015ec:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f2:	f002 fd75 	bl	80040e0 <HAL_UART_Init>
 80015f6:	b900      	cbnz	r0, 80015fa <MX_USART3_UART_Init+0x26>
}
 80015f8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015fa:	f7ff ffb5 	bl	8001568 <Error_Handler>
 80015fe:	bf00      	nop
 8001600:	200002a8 	.word	0x200002a8
 8001604:	40004800 	.word	0x40004800

08001608 <MX_TIM3_Init>:
{
 8001608:	b500      	push	{lr}
 800160a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160c:	2300      	movs	r3, #0
 800160e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001612:	930c      	str	r3, [sp, #48]	@ 0x30
 8001614:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001616:	9308      	str	r3, [sp, #32]
 8001618:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	9304      	str	r3, [sp, #16]
 8001622:	9305      	str	r3, [sp, #20]
 8001624:	9306      	str	r3, [sp, #24]
 8001626:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8001628:	481e      	ldr	r0, [pc, #120]	@ (80016a4 <MX_TIM3_Init+0x9c>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <MX_TIM3_Init+0xa0>)
 800162c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 800162e:	227f      	movs	r2, #127	@ 0x7f
 8001630:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 8001634:	2214      	movs	r2, #20
 8001636:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163c:	f002 f840 	bl	80036c0 <HAL_TIM_Base_Init>
 8001640:	bb28      	cbnz	r0, 800168e <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001648:	a90a      	add	r1, sp, #40	@ 0x28
 800164a:	4816      	ldr	r0, [pc, #88]	@ (80016a4 <MX_TIM3_Init+0x9c>)
 800164c:	f002 f9a2 	bl	8003994 <HAL_TIM_ConfigClockSource>
 8001650:	b9f8      	cbnz	r0, 8001692 <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001652:	4814      	ldr	r0, [pc, #80]	@ (80016a4 <MX_TIM3_Init+0x9c>)
 8001654:	f002 f883 	bl	800375e <HAL_TIM_PWM_Init>
 8001658:	b9e8      	cbnz	r0, 8001696 <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001660:	a908      	add	r1, sp, #32
 8001662:	4810      	ldr	r0, [pc, #64]	@ (80016a4 <MX_TIM3_Init+0x9c>)
 8001664:	f002 fcde 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 8001668:	b9b8      	cbnz	r0, 800169a <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2360      	movs	r3, #96	@ 0x60
 800166c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001676:	220c      	movs	r2, #12
 8001678:	a901      	add	r1, sp, #4
 800167a:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <MX_TIM3_Init+0x9c>)
 800167c:	f002 f8c8 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 8001680:	b968      	cbnz	r0, 800169e <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8001682:	4808      	ldr	r0, [pc, #32]	@ (80016a4 <MX_TIM3_Init+0x9c>)
 8001684:	f000 f9f6 	bl	8001a74 <HAL_TIM_MspPostInit>
}
 8001688:	b00f      	add	sp, #60	@ 0x3c
 800168a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800168e:	f7ff ff6b 	bl	8001568 <Error_Handler>
    Error_Handler();
 8001692:	f7ff ff69 	bl	8001568 <Error_Handler>
    Error_Handler();
 8001696:	f7ff ff67 	bl	8001568 <Error_Handler>
    Error_Handler();
 800169a:	f7ff ff65 	bl	8001568 <Error_Handler>
    Error_Handler();
 800169e:	f7ff ff63 	bl	8001568 <Error_Handler>
 80016a2:	bf00      	nop
 80016a4:	20000380 	.word	0x20000380
 80016a8:	40000400 	.word	0x40000400

080016ac <MX_TIM2_Init>:
{
 80016ac:	b500      	push	{lr}
 80016ae:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b0:	2300      	movs	r3, #0
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	9303      	str	r3, [sp, #12]
 80016b6:	9304      	str	r3, [sp, #16]
 80016b8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 80016be:	4814      	ldr	r0, [pc, #80]	@ (8001710 <MX_TIM2_Init+0x64>)
 80016c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016c4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 80016c6:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 80016ca:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80016ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d8:	f001 fff2 	bl	80036c0 <HAL_TIM_Base_Init>
 80016dc:	b990      	cbnz	r0, 8001704 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e4:	a902      	add	r1, sp, #8
 80016e6:	480a      	ldr	r0, [pc, #40]	@ (8001710 <MX_TIM2_Init+0x64>)
 80016e8:	f002 f954 	bl	8003994 <HAL_TIM_ConfigClockSource>
 80016ec:	b960      	cbnz	r0, 8001708 <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f4:	4669      	mov	r1, sp
 80016f6:	4806      	ldr	r0, [pc, #24]	@ (8001710 <MX_TIM2_Init+0x64>)
 80016f8:	f002 fc94 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	b930      	cbnz	r0, 800170c <MX_TIM2_Init+0x60>
}
 80016fe:	b007      	add	sp, #28
 8001700:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001704:	f7ff ff30 	bl	8001568 <Error_Handler>
    Error_Handler();
 8001708:	f7ff ff2e 	bl	8001568 <Error_Handler>
    Error_Handler();
 800170c:	f7ff ff2c 	bl	8001568 <Error_Handler>
 8001710:	200003c8 	.word	0x200003c8

08001714 <MX_ADC1_Init>:
{
 8001714:	b500      	push	{lr}
 8001716:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8001720:	480f      	ldr	r0, [pc, #60]	@ (8001760 <MX_ADC1_Init+0x4c>)
 8001722:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <MX_ADC1_Init+0x50>)
 8001724:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001726:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001728:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172a:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800172c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001730:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001732:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001738:	f000 fb9e 	bl	8001e78 <HAL_ADC_Init>
 800173c:	b960      	cbnz	r0, 8001758 <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 800173e:	2300      	movs	r3, #0
 8001740:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001742:	2201      	movs	r2, #1
 8001744:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001746:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001748:	a901      	add	r1, sp, #4
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_ADC1_Init+0x4c>)
 800174c:	f000 fc98 	bl	8002080 <HAL_ADC_ConfigChannel>
 8001750:	b920      	cbnz	r0, 800175c <MX_ADC1_Init+0x48>
}
 8001752:	b005      	add	sp, #20
 8001754:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001758:	f7ff ff06 	bl	8001568 <Error_Handler>
    Error_Handler();
 800175c:	f7ff ff04 	bl	8001568 <Error_Handler>
 8001760:	20000418 	.word	0x20000418
 8001764:	40012400 	.word	0x40012400

08001768 <MX_CRC_Init>:
{
 8001768:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800176a:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_CRC_Init+0x14>)
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MX_CRC_Init+0x18>)
 800176e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001770:	f000 ffd5 	bl	800271e <HAL_CRC_Init>
 8001774:	b900      	cbnz	r0, 8001778 <MX_CRC_Init+0x10>
}
 8001776:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001778:	f7ff fef6 	bl	8001568 <Error_Handler>
 800177c:	20000410 	.word	0x20000410
 8001780:	40023000 	.word	0x40023000

08001784 <SystemClock_Config>:
{
 8001784:	b500      	push	{lr}
 8001786:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001788:	2228      	movs	r2, #40	@ 0x28
 800178a:	2100      	movs	r1, #0
 800178c:	eb0d 0002 	add.w	r0, sp, r2
 8001790:	f004 ff2a 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	2300      	movs	r3, #0
 8001796:	9305      	str	r3, [sp, #20]
 8001798:	9306      	str	r3, [sp, #24]
 800179a:	9307      	str	r3, [sp, #28]
 800179c:	9308      	str	r3, [sp, #32]
 800179e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	9303      	str	r3, [sp, #12]
 80017a6:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a8:	2201      	movs	r2, #1
 80017aa:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b0:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80017b2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80017b6:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b8:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ba:	2202      	movs	r2, #2
 80017bc:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017be:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017c4:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c6:	a80a      	add	r0, sp, #40	@ 0x28
 80017c8:	f001 f9fc 	bl	8002bc4 <HAL_RCC_OscConfig>
 80017cc:	b9c8      	cbnz	r0, 8001802 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ce:	230f      	movs	r3, #15
 80017d0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d2:	2102      	movs	r1, #2
 80017d4:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017de:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e2:	a805      	add	r0, sp, #20
 80017e4:	f001 fc70 	bl	80030c8 <HAL_RCC_ClockConfig>
 80017e8:	b968      	cbnz	r0, 8001806 <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ea:	2302      	movs	r3, #2
 80017ec:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017f2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	a801      	add	r0, sp, #4
 80017f6:	f001 fdf7 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	b930      	cbnz	r0, 800180a <SystemClock_Config+0x86>
}
 80017fc:	b015      	add	sp, #84	@ 0x54
 80017fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001802:	f7ff feb1 	bl	8001568 <Error_Handler>
    Error_Handler();
 8001806:	f7ff feaf 	bl	8001568 <Error_Handler>
    Error_Handler();
 800180a:	f7ff fead 	bl	8001568 <Error_Handler>
	...

08001810 <STM32_InitRoutine>:
void STM32_InitRoutine(void) {
 8001810:	b508      	push	{r3, lr}
	HAL_Init();
 8001812:	f000 faab 	bl	8001d6c <HAL_Init>
	SystemClock_Config();
 8001816:	f7ff ffb5 	bl	8001784 <SystemClock_Config>
	MX_USART1_UART_Init();
 800181a:	f7ff fea7 	bl	800156c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800181e:	f7ff febf 	bl	80015a0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001822:	f7ff fed7 	bl	80015d4 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8001826:	f7ff feef 	bl	8001608 <MX_TIM3_Init>
	MX_TIM2_Init();
 800182a:	f7ff ff3f 	bl	80016ac <MX_TIM2_Init>
	MX_ADC1_Init();
 800182e:	f7ff ff71 	bl	8001714 <MX_ADC1_Init>
	MX_CRC_Init();
 8001832:	f7ff ff99 	bl	8001768 <MX_CRC_Init>
	MX_FATFS_Init();
 8001836:	f003 f985 	bl	8004b44 <MX_FATFS_Init>
	printf("|----------Starting----------|\r\n");
 800183a:	4830      	ldr	r0, [pc, #192]	@ (80018fc <STM32_InitRoutine+0xec>)
 800183c:	f004 fdf4 	bl	8006428 <puts>
	SPI_Init(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff fd11 	bl	8001268 <SPI_Init>
	printf("(+) SPI1 succeeded...\r\n");
 8001846:	482e      	ldr	r0, [pc, #184]	@ (8001900 <STM32_InitRoutine+0xf0>)
 8001848:	f004 fdee 	bl	8006428 <puts>
	SPI_Init(2);
 800184c:	2002      	movs	r0, #2
 800184e:	f7ff fd0b 	bl	8001268 <SPI_Init>
	printf("(+) SPI2 succeeded...\r\n");
 8001852:	482c      	ldr	r0, [pc, #176]	@ (8001904 <STM32_InitRoutine+0xf4>)
 8001854:	f004 fde8 	bl	8006428 <puts>
	USART_Init(1);
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff fd9f 	bl	800139c <USART_Init>
	printf("(+) USART1 succeeded...\r\n");
 800185e:	482a      	ldr	r0, [pc, #168]	@ (8001908 <STM32_InitRoutine+0xf8>)
 8001860:	f004 fde2 	bl	8006428 <puts>
	USART_Init(2);
 8001864:	2002      	movs	r0, #2
 8001866:	f7ff fd99 	bl	800139c <USART_Init>
	printf("(+) USART2 succeeded...\r\n");
 800186a:	4828      	ldr	r0, [pc, #160]	@ (800190c <STM32_InitRoutine+0xfc>)
 800186c:	f004 fddc 	bl	8006428 <puts>
	USART_Init(3);
 8001870:	2003      	movs	r0, #3
 8001872:	f7ff fd93 	bl	800139c <USART_Init>
	printf("(+) USART3 succeeded...\r\n");
 8001876:	4826      	ldr	r0, [pc, #152]	@ (8001910 <STM32_InitRoutine+0x100>)
 8001878:	f004 fdd6 	bl	8006428 <puts>
	printf("|----------Components initialization----------|\r\n");
 800187c:	4825      	ldr	r0, [pc, #148]	@ (8001914 <STM32_InitRoutine+0x104>)
 800187e:	f004 fdd3 	bl	8006428 <puts>
	WS2812_Init();
 8001882:	f7ff fc5b 	bl	800113c <WS2812_Init>
	printf("(+) WS2812 succeeded...\r\n");
 8001886:	4824      	ldr	r0, [pc, #144]	@ (8001918 <STM32_InitRoutine+0x108>)
 8001888:	f004 fdce 	bl	8006428 <puts>
	if (CD74HC4051_Init(&hadc1) != 0) {
 800188c:	4823      	ldr	r0, [pc, #140]	@ (800191c <STM32_InitRoutine+0x10c>)
 800188e:	f7ff f9bb 	bl	8000c08 <CD74HC4051_Init>
 8001892:	b1f8      	cbz	r0, 80018d4 <STM32_InitRoutine+0xc4>
	  printf("(-) CD74HC4051 failed...\r\n");
 8001894:	4822      	ldr	r0, [pc, #136]	@ (8001920 <STM32_InitRoutine+0x110>)
 8001896:	f004 fdc7 	bl	8006428 <puts>
	if (BMP280_Init(&bmp_data) != 0) {
 800189a:	4822      	ldr	r0, [pc, #136]	@ (8001924 <STM32_InitRoutine+0x114>)
 800189c:	f7ff f997 	bl	8000bce <BMP280_Init>
 80018a0:	b1e0      	cbz	r0, 80018dc <STM32_InitRoutine+0xcc>
	  printf("(-) BMP280 failed...\r\n");
 80018a2:	4821      	ldr	r0, [pc, #132]	@ (8001928 <STM32_InitRoutine+0x118>)
 80018a4:	f004 fdc0 	bl	8006428 <puts>
	if (ICM20602_Init(&icm_data) != 0) {
 80018a8:	4820      	ldr	r0, [pc, #128]	@ (800192c <STM32_InitRoutine+0x11c>)
 80018aa:	f7ff fa98 	bl	8000dde <ICM20602_Init>
 80018ae:	b1c8      	cbz	r0, 80018e4 <STM32_InitRoutine+0xd4>
	  printf("(-) ICM20602 failed...\r\n");
 80018b0:	481f      	ldr	r0, [pc, #124]	@ (8001930 <STM32_InitRoutine+0x120>)
 80018b2:	f004 fdb9 	bl	8006428 <puts>
	if(L76LM33_Init() == 1) {
 80018b6:	f7ff fafd 	bl	8000eb4 <L76LM33_Init>
 80018ba:	2801      	cmp	r0, #1
 80018bc:	d016      	beq.n	80018ec <STM32_InitRoutine+0xdc>
	  printf("(+) L76LM33 succeeded...\r\n");
 80018be:	481d      	ldr	r0, [pc, #116]	@ (8001934 <STM32_InitRoutine+0x124>)
 80018c0:	f004 fdb2 	bl	8006428 <puts>
	if (MEM2067_SDCardDetection() == 1) {
 80018c4:	f7ff fb8e 	bl	8000fe4 <MEM2067_SDCardDetection>
 80018c8:	2801      	cmp	r0, #1
 80018ca:	d013      	beq.n	80018f4 <STM32_InitRoutine+0xe4>
	  printf("(+) SD card detected in MEM2067...\r\n");
 80018cc:	481a      	ldr	r0, [pc, #104]	@ (8001938 <STM32_InitRoutine+0x128>)
 80018ce:	f004 fdab 	bl	8006428 <puts>
}
 80018d2:	bd08      	pop	{r3, pc}
	  printf("(+) CD74HC4051 succeeded...\r\n");
 80018d4:	4819      	ldr	r0, [pc, #100]	@ (800193c <STM32_InitRoutine+0x12c>)
 80018d6:	f004 fda7 	bl	8006428 <puts>
 80018da:	e7de      	b.n	800189a <STM32_InitRoutine+0x8a>
	  printf("(+) BMP280 succeeded...\r\n");
 80018dc:	4818      	ldr	r0, [pc, #96]	@ (8001940 <STM32_InitRoutine+0x130>)
 80018de:	f004 fda3 	bl	8006428 <puts>
 80018e2:	e7e1      	b.n	80018a8 <STM32_InitRoutine+0x98>
	  printf("(+) ICM20602 succeeded...\r\n");
 80018e4:	4817      	ldr	r0, [pc, #92]	@ (8001944 <STM32_InitRoutine+0x134>)
 80018e6:	f004 fd9f 	bl	8006428 <puts>
 80018ea:	e7e4      	b.n	80018b6 <STM32_InitRoutine+0xa6>
	  printf("(-) L76LM33 failed...\r\n");
 80018ec:	4816      	ldr	r0, [pc, #88]	@ (8001948 <STM32_InitRoutine+0x138>)
 80018ee:	f004 fd9b 	bl	8006428 <puts>
 80018f2:	e7e7      	b.n	80018c4 <STM32_InitRoutine+0xb4>
	  printf("(-) No SD card detected in MEM2067...\r\n");
 80018f4:	4815      	ldr	r0, [pc, #84]	@ (800194c <STM32_InitRoutine+0x13c>)
 80018f6:	f004 fd97 	bl	8006428 <puts>
 80018fa:	e7ea      	b.n	80018d2 <STM32_InitRoutine+0xc2>
 80018fc:	08008584 	.word	0x08008584
 8001900:	080085a4 	.word	0x080085a4
 8001904:	080085bc 	.word	0x080085bc
 8001908:	080085d4 	.word	0x080085d4
 800190c:	080085f0 	.word	0x080085f0
 8001910:	0800860c 	.word	0x0800860c
 8001914:	08008628 	.word	0x08008628
 8001918:	0800865c 	.word	0x0800865c
 800191c:	20000418 	.word	0x20000418
 8001920:	08008678 	.word	0x08008678
 8001924:	20000284 	.word	0x20000284
 8001928:	080086b4 	.word	0x080086b4
 800192c:	2000024c 	.word	0x2000024c
 8001930:	080086e8 	.word	0x080086e8
 8001934:	08008734 	.word	0x08008734
 8001938:	08008778 	.word	0x08008778
 800193c:	08008694 	.word	0x08008694
 8001940:	080086cc 	.word	0x080086cc
 8001944:	08008700 	.word	0x08008700
 8001948:	0800871c 	.word	0x0800871c
 800194c:	08008750 	.word	0x08008750

08001950 <main>:
{
 8001950:	b508      	push	{r3, lr}
	STM32_InitRoutine();
 8001952:	f7ff ff5d 	bl	8001810 <STM32_InitRoutine>
  while (1)
 8001956:	e7fe      	b.n	8001956 <main+0x6>

08001958 <HAL_MspInit>:
 8001958:	b082      	sub	sp, #8
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_MspInit+0x3c>)
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	619a      	str	r2, [r3, #24]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	f002 0201 	and.w	r2, r2, #1
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	9a00      	ldr	r2, [sp, #0]
 800196e:	69da      	ldr	r2, [r3, #28]
 8001970:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001974:	61da      	str	r2, [r3, #28]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	4a05      	ldr	r2, [pc, #20]	@ (8001998 <HAL_MspInit+0x40>)
 8001982:	6853      	ldr	r3, [r2, #4]
 8001984:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001988:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800198c:	6053      	str	r3, [r2, #4]
 800198e:	b002      	add	sp, #8
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000

0800199c <HAL_ADC_MspInit>:
 800199c:	b500      	push	{lr}
 800199e:	b087      	sub	sp, #28
 80019a0:	2300      	movs	r3, #0
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	9303      	str	r3, [sp, #12]
 80019a6:	9304      	str	r3, [sp, #16]
 80019a8:	9305      	str	r3, [sp, #20]
 80019aa:	6802      	ldr	r2, [r0, #0]
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_ADC_MspInit+0x58>)
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d002      	beq.n	80019b8 <HAL_ADC_MspInit+0x1c>
 80019b2:	b007      	add	sp, #28
 80019b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b8:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c2:	619a      	str	r2, [r3, #24]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80019ca:	9200      	str	r2, [sp, #0]
 80019cc:	9a00      	ldr	r2, [sp, #0]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	f042 0204 	orr.w	r2, r2, #4
 80019d4:	619a      	str	r2, [r3, #24]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	9b01      	ldr	r3, [sp, #4]
 80019e0:	2301      	movs	r3, #1
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	2303      	movs	r3, #3
 80019e6:	9303      	str	r3, [sp, #12]
 80019e8:	a902      	add	r1, sp, #8
 80019ea:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <HAL_ADC_MspInit+0x5c>)
 80019ec:	f000 ff66 	bl	80028bc <HAL_GPIO_Init>
 80019f0:	e7df      	b.n	80019b2 <HAL_ADC_MspInit+0x16>
 80019f2:	bf00      	nop
 80019f4:	40012400 	.word	0x40012400
 80019f8:	40010800 	.word	0x40010800

080019fc <HAL_CRC_MspInit>:
 80019fc:	6802      	ldr	r2, [r0, #0]
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_CRC_MspInit+0x28>)
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d000      	beq.n	8001a06 <HAL_CRC_MspInit+0xa>
 8001a04:	4770      	bx	lr
 8001a06:	b082      	sub	sp, #8
 8001a08:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	9b01      	ldr	r3, [sp, #4]
 8001a1e:	b002      	add	sp, #8
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023000 	.word	0x40023000

08001a28 <HAL_TIM_Base_MspInit>:
 8001a28:	b082      	sub	sp, #8
 8001a2a:	6803      	ldr	r3, [r0, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a30:	d004      	beq.n	8001a3c <HAL_TIM_Base_MspInit+0x14>
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_TIM_Base_MspInit+0x44>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_TIM_Base_MspInit+0x2c>
 8001a38:	b002      	add	sp, #8
 8001a3a:	4770      	bx	lr
 8001a3c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001a40:	69da      	ldr	r2, [r3, #28]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	61da      	str	r2, [r3, #28]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	9b00      	ldr	r3, [sp, #0]
 8001a52:	e7f1      	b.n	8001a38 <HAL_TIM_Base_MspInit+0x10>
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_TIM_Base_MspInit+0x48>)
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	f042 0202 	orr.w	r2, r2, #2
 8001a5c:	61da      	str	r2, [r3, #28]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9b01      	ldr	r3, [sp, #4]
 8001a68:	e7e6      	b.n	8001a38 <HAL_TIM_Base_MspInit+0x10>
 8001a6a:	bf00      	nop
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_TIM_MspPostInit>:
 8001a74:	b500      	push	{lr}
 8001a76:	b087      	sub	sp, #28
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	9303      	str	r3, [sp, #12]
 8001a7e:	9304      	str	r3, [sp, #16]
 8001a80:	9305      	str	r3, [sp, #20]
 8001a82:	6802      	ldr	r2, [r0, #0]
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_TIM_MspPostInit+0x44>)
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d002      	beq.n	8001a90 <HAL_TIM_MspPostInit+0x1c>
 8001a8a:	b007      	add	sp, #28
 8001a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a90:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	f042 0208 	orr.w	r2, r2, #8
 8001a9a:	619a      	str	r2, [r3, #24]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	9303      	str	r3, [sp, #12]
 8001aac:	9305      	str	r3, [sp, #20]
 8001aae:	a902      	add	r1, sp, #8
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <HAL_TIM_MspPostInit+0x48>)
 8001ab2:	f000 ff03 	bl	80028bc <HAL_GPIO_Init>
 8001ab6:	e7e8      	b.n	8001a8a <HAL_TIM_MspPostInit+0x16>
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40010c00 	.word	0x40010c00

08001ac0 <HAL_UART_MspInit>:
 8001ac0:	b530      	push	{r4, r5, lr}
 8001ac2:	b08b      	sub	sp, #44	@ 0x2c
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9306      	str	r3, [sp, #24]
 8001ac8:	9307      	str	r3, [sp, #28]
 8001aca:	9308      	str	r3, [sp, #32]
 8001acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ace:	6803      	ldr	r3, [r0, #0]
 8001ad0:	4a51      	ldr	r2, [pc, #324]	@ (8001c18 <HAL_UART_MspInit+0x158>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_UART_MspInit+0x26>
 8001ad6:	4a51      	ldr	r2, [pc, #324]	@ (8001c1c <HAL_UART_MspInit+0x15c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d03b      	beq.n	8001b54 <HAL_UART_MspInit+0x94>
 8001adc:	4a50      	ldr	r2, [pc, #320]	@ (8001c20 <HAL_UART_MspInit+0x160>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d068      	beq.n	8001bb4 <HAL_UART_MspInit+0xf4>
 8001ae2:	b00b      	add	sp, #44	@ 0x2c
 8001ae4:	bd30      	pop	{r4, r5, pc}
 8001ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <HAL_UART_MspInit+0x164>)
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001af6:	9200      	str	r2, [sp, #0]
 8001af8:	9a00      	ldr	r2, [sp, #0]
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	f042 0208 	orr.w	r2, r2, #8
 8001b00:	619a      	str	r2, [r3, #24]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	9b01      	ldr	r3, [sp, #4]
 8001b0c:	2340      	movs	r3, #64	@ 0x40
 8001b0e:	9306      	str	r3, [sp, #24]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9307      	str	r3, [sp, #28]
 8001b14:	2303      	movs	r3, #3
 8001b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b18:	4d43      	ldr	r5, [pc, #268]	@ (8001c28 <HAL_UART_MspInit+0x168>)
 8001b1a:	a906      	add	r1, sp, #24
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f000 fecd 	bl	80028bc <HAL_GPIO_Init>
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	9306      	str	r3, [sp, #24]
 8001b26:	2400      	movs	r4, #0
 8001b28:	9407      	str	r4, [sp, #28]
 8001b2a:	9408      	str	r4, [sp, #32]
 8001b2c:	a906      	add	r1, sp, #24
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f000 fec4 	bl	80028bc <HAL_GPIO_Init>
 8001b34:	4a3d      	ldr	r2, [pc, #244]	@ (8001c2c <HAL_UART_MspInit+0x16c>)
 8001b36:	6853      	ldr	r3, [r2, #4]
 8001b38:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6053      	str	r3, [r2, #4]
 8001b42:	4622      	mov	r2, r4
 8001b44:	4621      	mov	r1, r4
 8001b46:	2025      	movs	r0, #37	@ 0x25
 8001b48:	f000 fdb3 	bl	80026b2 <HAL_NVIC_SetPriority>
 8001b4c:	2025      	movs	r0, #37	@ 0x25
 8001b4e:	f000 fdcc 	bl	80026ea <HAL_NVIC_EnableIRQ>
 8001b52:	e7c6      	b.n	8001ae2 <HAL_UART_MspInit+0x22>
 8001b54:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <HAL_UART_MspInit+0x164>)
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b5c:	61da      	str	r2, [r3, #28]
 8001b5e:	69da      	ldr	r2, [r3, #28]
 8001b60:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001b64:	9202      	str	r2, [sp, #8]
 8001b66:	9a02      	ldr	r2, [sp, #8]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	f042 0204 	orr.w	r2, r2, #4
 8001b6e:	619a      	str	r2, [r3, #24]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	9b03      	ldr	r3, [sp, #12]
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	9306      	str	r3, [sp, #24]
 8001b7e:	2302      	movs	r3, #2
 8001b80:	9307      	str	r3, [sp, #28]
 8001b82:	2303      	movs	r3, #3
 8001b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b86:	4d2a      	ldr	r5, [pc, #168]	@ (8001c30 <HAL_UART_MspInit+0x170>)
 8001b88:	a906      	add	r1, sp, #24
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f000 fe96 	bl	80028bc <HAL_GPIO_Init>
 8001b90:	2308      	movs	r3, #8
 8001b92:	9306      	str	r3, [sp, #24]
 8001b94:	2400      	movs	r4, #0
 8001b96:	9407      	str	r4, [sp, #28]
 8001b98:	9408      	str	r4, [sp, #32]
 8001b9a:	a906      	add	r1, sp, #24
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f000 fe8d 	bl	80028bc <HAL_GPIO_Init>
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	2026      	movs	r0, #38	@ 0x26
 8001ba8:	f000 fd83 	bl	80026b2 <HAL_NVIC_SetPriority>
 8001bac:	2026      	movs	r0, #38	@ 0x26
 8001bae:	f000 fd9c 	bl	80026ea <HAL_NVIC_EnableIRQ>
 8001bb2:	e796      	b.n	8001ae2 <HAL_UART_MspInit+0x22>
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_UART_MspInit+0x164>)
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001bbc:	61da      	str	r2, [r3, #28]
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001bc4:	9204      	str	r2, [sp, #16]
 8001bc6:	9a04      	ldr	r2, [sp, #16]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	f042 0208 	orr.w	r2, r2, #8
 8001bce:	619a      	str	r2, [r3, #24]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	9305      	str	r3, [sp, #20]
 8001bd8:	9b05      	ldr	r3, [sp, #20]
 8001bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bde:	9306      	str	r3, [sp, #24]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9307      	str	r3, [sp, #28]
 8001be4:	2303      	movs	r3, #3
 8001be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001be8:	4d0f      	ldr	r5, [pc, #60]	@ (8001c28 <HAL_UART_MspInit+0x168>)
 8001bea:	a906      	add	r1, sp, #24
 8001bec:	4628      	mov	r0, r5
 8001bee:	f000 fe65 	bl	80028bc <HAL_GPIO_Init>
 8001bf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bf6:	9306      	str	r3, [sp, #24]
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	9407      	str	r4, [sp, #28]
 8001bfc:	9408      	str	r4, [sp, #32]
 8001bfe:	a906      	add	r1, sp, #24
 8001c00:	4628      	mov	r0, r5
 8001c02:	f000 fe5b 	bl	80028bc <HAL_GPIO_Init>
 8001c06:	4622      	mov	r2, r4
 8001c08:	4621      	mov	r1, r4
 8001c0a:	2027      	movs	r0, #39	@ 0x27
 8001c0c:	f000 fd51 	bl	80026b2 <HAL_NVIC_SetPriority>
 8001c10:	2027      	movs	r0, #39	@ 0x27
 8001c12:	f000 fd6a 	bl	80026ea <HAL_NVIC_EnableIRQ>
 8001c16:	e764      	b.n	8001ae2 <HAL_UART_MspInit+0x22>
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40004800 	.word	0x40004800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40010800 	.word	0x40010800

08001c34 <NMI_Handler>:
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler>

08001c36 <HardFault_Handler>:
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler>

08001c38 <MemManage_Handler>:
 8001c38:	e7fe      	b.n	8001c38 <MemManage_Handler>

08001c3a <BusFault_Handler>:
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler>

08001c3c <UsageFault_Handler>:
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler>

08001c3e <SVC_Handler>:
 8001c3e:	4770      	bx	lr

08001c40 <DebugMon_Handler>:
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:
 8001c44:	b508      	push	{r3, lr}
 8001c46:	f000 f8d7 	bl	8001df8 <HAL_IncTick>
 8001c4a:	bd08      	pop	{r3, pc}

08001c4c <USART1_IRQHandler>:
 8001c4c:	b508      	push	{r3, lr}
 8001c4e:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <USART1_IRQHandler+0xc>)
 8001c50:	f002 fa96 	bl	8004180 <HAL_UART_IRQHandler>
 8001c54:	bd08      	pop	{r3, pc}
 8001c56:	bf00      	nop
 8001c58:	20000338 	.word	0x20000338

08001c5c <USART2_IRQHandler>:
 8001c5c:	b508      	push	{r3, lr}
 8001c5e:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <USART2_IRQHandler+0xc>)
 8001c60:	f002 fa8e 	bl	8004180 <HAL_UART_IRQHandler>
 8001c64:	bd08      	pop	{r3, pc}
 8001c66:	bf00      	nop
 8001c68:	200002f0 	.word	0x200002f0

08001c6c <USART3_IRQHandler>:
 8001c6c:	b508      	push	{r3, lr}
 8001c6e:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <USART3_IRQHandler+0xc>)
 8001c70:	f002 fa86 	bl	8004180 <HAL_UART_IRQHandler>
 8001c74:	bd08      	pop	{r3, pc}
 8001c76:	bf00      	nop
 8001c78:	200002a8 	.word	0x200002a8

08001c7c <_getpid>:
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	4770      	bx	lr

08001c80 <_kill>:
 8001c80:	b508      	push	{r3, lr}
 8001c82:	f004 fd13 	bl	80066ac <__errno>
 8001c86:	2316      	movs	r3, #22
 8001c88:	6003      	str	r3, [r0, #0]
 8001c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8e:	bd08      	pop	{r3, pc}

08001c90 <_exit>:
 8001c90:	b508      	push	{r3, lr}
 8001c92:	f04f 31ff 	mov.w	r1, #4294967295
 8001c96:	f7ff fff3 	bl	8001c80 <_kill>
 8001c9a:	e7fe      	b.n	8001c9a <_exit+0xa>

08001c9c <_read>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	4616      	mov	r6, r2
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	e006      	b.n	8001cb4 <_read+0x18>
 8001ca6:	f3af 8000 	nop.w
 8001caa:	4621      	mov	r1, r4
 8001cac:	f801 0b01 	strb.w	r0, [r1], #1
 8001cb0:	3501      	adds	r5, #1
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	42b5      	cmp	r5, r6
 8001cb6:	dbf6      	blt.n	8001ca6 <_read+0xa>
 8001cb8:	4630      	mov	r0, r6
 8001cba:	bd70      	pop	{r4, r5, r6, pc}

08001cbc <_close>:
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:
 8001cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	2000      	movs	r0, #0
 8001cca:	4770      	bx	lr

08001ccc <_isatty>:
 8001ccc:	2001      	movs	r0, #1
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr

08001cd4 <_sbrk>:
 8001cd4:	b510      	push	{r4, lr}
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <_sbrk+0x38>)
 8001cda:	490d      	ldr	r1, [pc, #52]	@ (8001d10 <_sbrk+0x3c>)
 8001cdc:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <_sbrk+0x40>)
 8001cde:	6800      	ldr	r0, [r0, #0]
 8001ce0:	b140      	cbz	r0, 8001cf4 <_sbrk+0x20>
 8001ce2:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <_sbrk+0x40>)
 8001ce4:	6800      	ldr	r0, [r0, #0]
 8001ce6:	4403      	add	r3, r0
 8001ce8:	1a52      	subs	r2, r2, r1
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d806      	bhi.n	8001cfc <_sbrk+0x28>
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <_sbrk+0x40>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <_sbrk+0x40>)
 8001cf6:	4c08      	ldr	r4, [pc, #32]	@ (8001d18 <_sbrk+0x44>)
 8001cf8:	6004      	str	r4, [r0, #0]
 8001cfa:	e7f2      	b.n	8001ce2 <_sbrk+0xe>
 8001cfc:	f004 fcd6 	bl	80066ac <__errno>
 8001d00:	230c      	movs	r3, #12
 8001d02:	6003      	str	r3, [r0, #0]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	e7f3      	b.n	8001cf2 <_sbrk+0x1e>
 8001d0a:	bf00      	nop
 8001d0c:	20005000 	.word	0x20005000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000448 	.word	0x20000448
 8001d18:	20001600 	.word	0x20001600

08001d1c <SystemInit>:
 8001d1c:	4770      	bx	lr
	...

08001d20 <Reset_Handler>:
 8001d20:	f7ff fffc 	bl	8001d1c <SystemInit>
 8001d24:	480b      	ldr	r0, [pc, #44]	@ (8001d54 <LoopFillZerobss+0xe>)
 8001d26:	490c      	ldr	r1, [pc, #48]	@ (8001d58 <LoopFillZerobss+0x12>)
 8001d28:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <LoopFillZerobss+0x16>)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:
 8001d2e:	58d4      	ldr	r4, [r2, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:
 8001d34:	18c4      	adds	r4, r0, r3
 8001d36:	428c      	cmp	r4, r1
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
 8001d3a:	4a09      	ldr	r2, [pc, #36]	@ (8001d60 <LoopFillZerobss+0x1a>)
 8001d3c:	4c09      	ldr	r4, [pc, #36]	@ (8001d64 <LoopFillZerobss+0x1e>)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:
 8001d46:	42a2      	cmp	r2, r4
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>
 8001d4a:	f004 fcb5 	bl	80066b8 <__libc_init_array>
 8001d4e:	f7ff fdff 	bl	8001950 <main>
 8001d52:	4770      	bx	lr
 8001d54:	20000000 	.word	0x20000000
 8001d58:	200001e8 	.word	0x200001e8
 8001d5c:	08008b5c 	.word	0x08008b5c
 8001d60:	200001e8 	.word	0x200001e8
 8001d64:	20001600 	.word	0x20001600

08001d68 <ADC1_2_IRQHandler>:
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <HAL_Init>:
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 fc8d 	bl	800269c <HAL_NVIC_SetPriorityGrouping>
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>
 8001d88:	f7ff fde6 	bl	8001958 <HAL_MspInit>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fca5 	bl	8002706 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 fc6d 	bl	80026b2 <HAL_NVIC_SetPriority>
 8001dd8:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
 8001de2:	2301      	movs	r3, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_IncTick>:
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a03      	ldr	r2, [pc, #12]	@ (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000008 	.word	0x20000008
 8001e18:	2000044c 	.word	0x2000044c

08001e1c <HAL_GetTick>:
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4b02      	ldr	r3, [pc, #8]	@ (8001e2c <HAL_GetTick+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	2000044c 	.word	0x2000044c

08001e30 <HAL_Delay>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	bf00      	nop
 8001e58:	f7ff ffe0 	bl	8001e1c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008

08001e78 <HAL_ADC_Init>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	2300      	movs	r3, #0
 8001e82:	75fb      	strb	r3, [r7, #23]
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Init+0x22>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0be      	b.n	8002018 <HAL_ADC_Init+0x1a0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_ADC_Init+0x44>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fd70 	bl	800199c <HAL_ADC_MspInit>
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fa31 	bl	8002324 <ADC_ConversionStop_Disable>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 8099 	bne.w	8002006 <HAL_ADC_Init+0x18e>
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 8095 	bne.w	8002006 <HAL_ADC_Init+0x18e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ee4:	f023 0302 	bic.w	r3, r3, #2
 8001ee8:	f043 0202 	orr.w	r2, r3, #2
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7b1b      	ldrb	r3, [r3, #12]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4313      	orrs	r3, r2
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f10:	d003      	beq.n	8001f1a <HAL_ADC_Init+0xa2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_ADC_Init+0xa8>
 8001f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f1e:	e000      	b.n	8001f22 <HAL_ADC_Init+0xaa>
 8001f20:	2300      	movs	r3, #0
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7d1b      	ldrb	r3, [r3, #20]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d119      	bne.n	8001f64 <HAL_ADC_Init+0xec>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7b1b      	ldrb	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_ADC_Init+0xd4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	035a      	lsls	r2, r3, #13
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	e00b      	b.n	8001f64 <HAL_ADC_Init+0xec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <HAL_ADC_Init+0x1a8>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6093      	str	r3, [r2, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f94:	d003      	beq.n	8001f9e <HAL_ADC_Init+0x126>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d104      	bne.n	8001fa8 <HAL_ADC_Init+0x130>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	051b      	lsls	r3, r3, #20
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_ADC_Init+0x1ac>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_Init+0x16c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fe2:	e018      	b.n	8002016 <HAL_ADC_Init+0x19e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	f023 0312 	bic.w	r3, r3, #18
 8001fec:	f043 0210 	orr.w	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002000:	2301      	movs	r3, #1
 8002002:	75fb      	strb	r3, [r7, #23]
 8002004:	e007      	b.n	8002016 <HAL_ADC_Init+0x19e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	f043 0210 	orr.w	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	@ 0x28
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	ffe1f7fd 	.word	0xffe1f7fd
 8002024:	ff1f0efe 	.word	0xff1f0efe

08002028 <HAL_ADC_Stop>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Stop+0x1a>
 800203e:	2302      	movs	r3, #2
 8002040:	e01a      	b.n	8002078 <HAL_ADC_Stop+0x50>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f96a 	bl	8002324 <ADC_ConversionStop_Disable>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_Stop+0x46>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_ADC_ConfigChannel>:
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x20>
 800209c:	2302      	movs	r3, #2
 800209e:	e0dc      	b.n	800225a <HAL_ADC_ConfigChannel+0x1da>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d81c      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0x6a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b05      	subs	r3, #5
 80020c2:	221f      	movs	r2, #31
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4019      	ands	r1, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b05      	subs	r3, #5
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e8:	e03c      	b.n	8002164 <HAL_ADC_ConfigChannel+0xe4>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d81c      	bhi.n	800212c <HAL_ADC_ConfigChannel+0xac>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	3b23      	subs	r3, #35	@ 0x23
 8002104:	221f      	movs	r2, #31
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	4019      	ands	r1, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b23      	subs	r3, #35	@ 0x23
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30
 800212a:	e01b      	b.n	8002164 <HAL_ADC_ConfigChannel+0xe4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	3b41      	subs	r3, #65	@ 0x41
 800213e:	221f      	movs	r2, #31
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	4019      	ands	r1, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b41      	subs	r3, #65	@ 0x41
 8002158:	fa00 f203 	lsl.w	r2, r0, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b09      	cmp	r3, #9
 800216a:	d91c      	bls.n	80021a6 <HAL_ADC_ConfigChannel+0x126>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68d9      	ldr	r1, [r3, #12]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	3b1e      	subs	r3, #30
 800217e:	2207      	movs	r2, #7
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	4019      	ands	r1, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6898      	ldr	r0, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	3b1e      	subs	r3, #30
 8002198:	fa00 f203 	lsl.w	r2, r0, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	e019      	b.n	80021da <HAL_ADC_ConfigChannel+0x15a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6919      	ldr	r1, [r3, #16]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	2207      	movs	r2, #7
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	4019      	ands	r1, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6898      	ldr	r0, [r3, #8]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	fa00 f203 	lsl.w	r2, r0, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d003      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x16a>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b11      	cmp	r3, #17
 80021e8:	d132      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1d0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002264 <HAL_ADC_ConfigChannel+0x1e4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d125      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x1c0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d126      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1d0>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d11a      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1d0>
 800221a:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <HAL_ADC_ConfigChannel+0x1e8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	@ (800226c <HAL_ADC_ConfigChannel+0x1ec>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	0c9a      	lsrs	r2, r3, #18
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	e002      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1b8>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x1b2>
 800223e:	e007      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1d0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40012400 	.word	0x40012400
 8002268:	20000000 	.word	0x20000000
 800226c:	431bde83 	.word	0x431bde83

08002270 <ADC_Enable>:
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d040      	beq.n	8002310 <ADC_Enable+0xa0>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <ADC_Enable+0xac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <ADC_Enable+0xb0>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	e002      	b.n	80022b4 <ADC_Enable+0x44>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f9      	bne.n	80022ae <ADC_Enable+0x3e>
 80022ba:	f7ff fdaf 	bl	8001e1c <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	e01f      	b.n	8002302 <ADC_Enable+0x92>
 80022c2:	f7ff fdab 	bl	8001e1c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d918      	bls.n	8002302 <ADC_Enable+0x92>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d011      	beq.n	8002302 <ADC_Enable+0x92>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <ADC_Enable+0xa2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d1d8      	bne.n	80022c2 <ADC_Enable+0x52>
 8002310:	2300      	movs	r3, #0
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000
 8002320:	431bde83 	.word	0x431bde83

08002324 <ADC_ConversionStop_Disable>:
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d12e      	bne.n	800239c <ADC_ConversionStop_Disable+0x78>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0201 	bic.w	r2, r2, #1
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	f7ff fd65 	bl	8001e1c <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	e01b      	b.n	800238e <ADC_ConversionStop_Disable+0x6a>
 8002356:	f7ff fd61 	bl	8001e1c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d914      	bls.n	800238e <ADC_ConversionStop_Disable+0x6a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10d      	bne.n	800238e <ADC_ConversionStop_Disable+0x6a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	629a      	str	r2, [r3, #40]	@ 0x28
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800238a:	2301      	movs	r3, #1
 800238c:	e007      	b.n	800239e <ADC_ConversionStop_Disable+0x7a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d0dc      	beq.n	8002356 <ADC_ConversionStop_Disable+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_ADCEx_Calibration_Start>:
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	2300      	movs	r3, #0
 80023b2:	75fb      	strb	r3, [r7, #23]
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e097      	b.n	80024f6 <HAL_ADCEx_Calibration_Start+0x14e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffa8 	bl	8002324 <ADC_ConversionStop_Disable>
 80023d4:	4603      	mov	r3, r0
 80023d6:	75fb      	strb	r3, [r7, #23]
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff49 	bl	8002270 <ADC_Enable>
 80023de:	4603      	mov	r3, r0
 80023e0:	75fb      	strb	r3, [r7, #23]
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 8081 	bne.w	80024ec <HAL_ADCEx_Calibration_Start+0x144>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023f2:	f023 0302 	bic.w	r3, r3, #2
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80023fe:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_ADCEx_Calibration_Start+0x158>)
 8002400:	681c      	ldr	r4, [r3, #0]
 8002402:	2002      	movs	r0, #2
 8002404:	f001 f8a6 	bl	8003554 <HAL_RCCEx_GetPeriphCLKFreq>
 8002408:	4603      	mov	r3, r0
 800240a:	fbb4 f3f3 	udiv	r3, r4, r3
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e002      	b.n	800241a <HAL_ADCEx_Calibration_Start+0x72>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3b01      	subs	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f9      	bne.n	8002414 <HAL_ADCEx_Calibration_Start+0x6c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	f7ff fcf4 	bl	8001e1c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]
 8002436:	e01b      	b.n	8002470 <HAL_ADCEx_Calibration_Start+0xc8>
 8002438:	f7ff fcf0 	bl	8001e1c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d914      	bls.n	8002470 <HAL_ADCEx_Calibration_Start+0xc8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <HAL_ADCEx_Calibration_Start+0xc8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	f023 0312 	bic.w	r3, r3, #18
 800245c:	f043 0210 	orr.w	r2, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800246c:	2301      	movs	r3, #1
 800246e:	e042      	b.n	80024f6 <HAL_ADCEx_Calibration_Start+0x14e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1dc      	bne.n	8002438 <HAL_ADCEx_Calibration_Start+0x90>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0204 	orr.w	r2, r2, #4
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	f7ff fcc5 	bl	8001e1c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]
 8002494:	e01b      	b.n	80024ce <HAL_ADCEx_Calibration_Start+0x126>
 8002496:	f7ff fcc1 	bl	8001e1c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b0a      	cmp	r3, #10
 80024a2:	d914      	bls.n	80024ce <HAL_ADCEx_Calibration_Start+0x126>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_ADCEx_Calibration_Start+0x126>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	f023 0312 	bic.w	r3, r3, #18
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024ca:	2301      	movs	r3, #1
 80024cc:	e013      	b.n	80024f6 <HAL_ADCEx_Calibration_Start+0x14e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1dc      	bne.n	8002496 <HAL_ADCEx_Calibration_Start+0xee>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	f023 0303 	bic.w	r3, r3, #3
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	4618      	mov	r0, r3
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000

08002504 <__NVIC_SetPriorityGrouping>:
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4906      	ldr	r1, [pc, #24]	@ (800259c <__NVIC_EnableIRQ+0x34>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	@ (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
 800264c:	4313      	orrs	r3, r2
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <SysTick_Config>:
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff90 	bl	80025a0 <__NVIC_SetPriority>
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	2300      	movs	r3, #0
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff2d 	bl	8002504 <__NVIC_SetPriorityGrouping>
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	f7ff ff42 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff90 	bl	80025f4 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5f 	bl	80025a0 <__NVIC_SetPriority>
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff35 	bl	8002568 <__NVIC_EnableIRQ>
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa2 	bl	8002658 <SysTick_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_CRC_Init>:
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_CRC_Init+0x12>
 800272c:	2301      	movs	r3, #1
 800272e:	e00e      	b.n	800274e <HAL_CRC_Init+0x30>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	795b      	ldrb	r3, [r3, #5]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_CRC_Init+0x28>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	711a      	strb	r2, [r3, #4]
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff f95b 	bl	80019fc <HAL_CRC_MspInit>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	715a      	strb	r2, [r3, #5]
 800274c:	2300      	movs	r3, #0
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_DMA_Abort>:
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d008      	beq.n	8002780 <HAL_DMA_Abort+0x2a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	639a      	str	r2, [r3, #56]	@ 0x38
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2020 	strb.w	r2, [r3, #32]
 800277c:	2301      	movs	r3, #1
 800277e:	e020      	b.n	80027c2 <HAL_DMA_Abort+0x6c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 020e 	bic.w	r2, r2, #14
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2020 	strb.w	r2, [r3, #32]
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_DMA_Abort_IT>:
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d005      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x24>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2204      	movs	r2, #4
 80027e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e051      	b.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 020e 	bic.w	r2, r2, #14
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	@ (80028a0 <HAL_DMA_Abort_IT+0xd4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d029      	beq.n	800286e <HAL_DMA_Abort_IT+0xa2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a21      	ldr	r2, [pc, #132]	@ (80028a4 <HAL_DMA_Abort_IT+0xd8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_DMA_Abort_IT+0x9e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	@ (80028a8 <HAL_DMA_Abort_IT+0xdc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01a      	beq.n	8002864 <HAL_DMA_Abort_IT+0x98>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	@ (80028ac <HAL_DMA_Abort_IT+0xe0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d012      	beq.n	800285e <HAL_DMA_Abort_IT+0x92>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1c      	ldr	r2, [pc, #112]	@ (80028b0 <HAL_DMA_Abort_IT+0xe4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00a      	beq.n	8002858 <HAL_DMA_Abort_IT+0x8c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	@ (80028b4 <HAL_DMA_Abort_IT+0xe8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d102      	bne.n	8002852 <HAL_DMA_Abort_IT+0x86>
 800284c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002850:	e00e      	b.n	8002870 <HAL_DMA_Abort_IT+0xa4>
 8002852:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002856:	e00b      	b.n	8002870 <HAL_DMA_Abort_IT+0xa4>
 8002858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800285c:	e008      	b.n	8002870 <HAL_DMA_Abort_IT+0xa4>
 800285e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002862:	e005      	b.n	8002870 <HAL_DMA_Abort_IT+0xa4>
 8002864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002868:	e002      	b.n	8002870 <HAL_DMA_Abort_IT+0xa4>
 800286a:	2310      	movs	r3, #16
 800286c:	e000      	b.n	8002870 <HAL_DMA_Abort_IT+0xa4>
 800286e:	2301      	movs	r3, #1
 8002870:	4a11      	ldr	r2, [pc, #68]	@ (80028b8 <HAL_DMA_Abort_IT+0xec>)
 8002872:	6053      	str	r3, [r2, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2020 	strb.w	r2, [r3, #32]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_DMA_Abort_IT+0xc8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40020008 	.word	0x40020008
 80028a4:	4002001c 	.word	0x4002001c
 80028a8:	40020030 	.word	0x40020030
 80028ac:	40020044 	.word	0x40020044
 80028b0:	40020058 	.word	0x40020058
 80028b4:	4002006c 	.word	0x4002006c
 80028b8:	40020000 	.word	0x40020000

080028bc <HAL_GPIO_Init>:
 80028bc:	b480      	push	{r7}
 80028be:	b08b      	sub	sp, #44	@ 0x2c
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	e169      	b.n	8002ba4 <HAL_GPIO_Init+0x2e8>
 80028d0:	2201      	movs	r2, #1
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f040 8158 	bne.w	8002b9e <HAL_GPIO_Init+0x2e2>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a9a      	ldr	r2, [pc, #616]	@ (8002b5c <HAL_GPIO_Init+0x2a0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d05e      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 80028f8:	4a98      	ldr	r2, [pc, #608]	@ (8002b5c <HAL_GPIO_Init+0x2a0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d875      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 80028fe:	4a98      	ldr	r2, [pc, #608]	@ (8002b60 <HAL_GPIO_Init+0x2a4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d058      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 8002904:	4a96      	ldr	r2, [pc, #600]	@ (8002b60 <HAL_GPIO_Init+0x2a4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d86f      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 800290a:	4a96      	ldr	r2, [pc, #600]	@ (8002b64 <HAL_GPIO_Init+0x2a8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d052      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 8002910:	4a94      	ldr	r2, [pc, #592]	@ (8002b64 <HAL_GPIO_Init+0x2a8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d869      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 8002916:	4a94      	ldr	r2, [pc, #592]	@ (8002b68 <HAL_GPIO_Init+0x2ac>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04c      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 800291c:	4a92      	ldr	r2, [pc, #584]	@ (8002b68 <HAL_GPIO_Init+0x2ac>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d863      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 8002922:	4a92      	ldr	r2, [pc, #584]	@ (8002b6c <HAL_GPIO_Init+0x2b0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d046      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 8002928:	4a90      	ldr	r2, [pc, #576]	@ (8002b6c <HAL_GPIO_Init+0x2b0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d85d      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 800292e:	2b12      	cmp	r3, #18
 8002930:	d82a      	bhi.n	8002988 <HAL_GPIO_Init+0xcc>
 8002932:	2b12      	cmp	r3, #18
 8002934:	d859      	bhi.n	80029ea <HAL_GPIO_Init+0x12e>
 8002936:	a201      	add	r2, pc, #4	@ (adr r2, 800293c <HAL_GPIO_Init+0x80>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	080029b7 	.word	0x080029b7
 8002940:	08002991 	.word	0x08002991
 8002944:	080029a3 	.word	0x080029a3
 8002948:	080029e5 	.word	0x080029e5
 800294c:	080029eb 	.word	0x080029eb
 8002950:	080029eb 	.word	0x080029eb
 8002954:	080029eb 	.word	0x080029eb
 8002958:	080029eb 	.word	0x080029eb
 800295c:	080029eb 	.word	0x080029eb
 8002960:	080029eb 	.word	0x080029eb
 8002964:	080029eb 	.word	0x080029eb
 8002968:	080029eb 	.word	0x080029eb
 800296c:	080029eb 	.word	0x080029eb
 8002970:	080029eb 	.word	0x080029eb
 8002974:	080029eb 	.word	0x080029eb
 8002978:	080029eb 	.word	0x080029eb
 800297c:	080029eb 	.word	0x080029eb
 8002980:	08002999 	.word	0x08002999
 8002984:	080029ad 	.word	0x080029ad
 8002988:	4a79      	ldr	r2, [pc, #484]	@ (8002b70 <HAL_GPIO_Init+0x2b4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0xfa>
 800298e:	e02c      	b.n	80029ea <HAL_GPIO_Init+0x12e>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	e029      	b.n	80029ec <HAL_GPIO_Init+0x130>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	3304      	adds	r3, #4
 800299e:	623b      	str	r3, [r7, #32]
 80029a0:	e024      	b.n	80029ec <HAL_GPIO_Init+0x130>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	3308      	adds	r3, #8
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	e01f      	b.n	80029ec <HAL_GPIO_Init+0x130>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	330c      	adds	r3, #12
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	e01a      	b.n	80029ec <HAL_GPIO_Init+0x130>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <HAL_GPIO_Init+0x108>
 80029be:	2304      	movs	r3, #4
 80029c0:	623b      	str	r3, [r7, #32]
 80029c2:	e013      	b.n	80029ec <HAL_GPIO_Init+0x130>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_GPIO_Init+0x11c>
 80029cc:	2308      	movs	r3, #8
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	611a      	str	r2, [r3, #16]
 80029d6:	e009      	b.n	80029ec <HAL_GPIO_Init+0x130>
 80029d8:	2308      	movs	r3, #8
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	615a      	str	r2, [r3, #20]
 80029e2:	e003      	b.n	80029ec <HAL_GPIO_Init+0x130>
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	e000      	b.n	80029ec <HAL_GPIO_Init+0x130>
 80029ea:	bf00      	nop
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2bff      	cmp	r3, #255	@ 0xff
 80029f0:	d801      	bhi.n	80029f6 <HAL_GPIO_Init+0x13a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	e001      	b.n	80029fa <HAL_GPIO_Init+0x13e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2bff      	cmp	r3, #255	@ 0xff
 8002a00:	d802      	bhi.n	8002a08 <HAL_GPIO_Init+0x14c>
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0x152>
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	3b08      	subs	r3, #8
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	210f      	movs	r1, #15
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	401a      	ands	r2, r3
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80b1 	beq.w	8002b9e <HAL_GPIO_Init+0x2e2>
 8002a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b74 <HAL_GPIO_Init+0x2b8>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a4c      	ldr	r2, [pc, #304]	@ (8002b74 <HAL_GPIO_Init+0x2b8>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6193      	str	r3, [r2, #24]
 8002a48:	4b4a      	ldr	r3, [pc, #296]	@ (8002b74 <HAL_GPIO_Init+0x2b8>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4a48      	ldr	r2, [pc, #288]	@ (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a40      	ldr	r2, [pc, #256]	@ (8002b7c <HAL_GPIO_Init+0x2c0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_GPIO_Init+0x1ec>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3f      	ldr	r2, [pc, #252]	@ (8002b80 <HAL_GPIO_Init+0x2c4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00d      	beq.n	8002aa4 <HAL_GPIO_Init+0x1e8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b84 <HAL_GPIO_Init+0x2c8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <HAL_GPIO_Init+0x1e4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3d      	ldr	r2, [pc, #244]	@ (8002b88 <HAL_GPIO_Init+0x2cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_GPIO_Init+0x1e0>
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e006      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e004      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e002      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_GPIO_Init+0x1ee>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	f002 0203 	and.w	r2, r2, #3
 8002ab0:	0092      	lsls	r2, r2, #2
 8002ab2:	4093      	lsls	r3, r2
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	492f      	ldr	r1, [pc, #188]	@ (8002b78 <HAL_GPIO_Init+0x2bc>)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x226>
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	492c      	ldr	r1, [pc, #176]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x234>
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	4928      	ldr	r1, [pc, #160]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_GPIO_Init+0x24e>
 8002afc:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	4922      	ldr	r1, [pc, #136]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x25c>
 8002b0a:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	491e      	ldr	r1, [pc, #120]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_GPIO_Init+0x276>
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4918      	ldr	r1, [pc, #96]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x284>
 8002b32:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	4914      	ldr	r1, [pc, #80]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <HAL_GPIO_Init+0x2d4>
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	490e      	ldr	r1, [pc, #56]	@ (8002b8c <HAL_GPIO_Init+0x2d0>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e021      	b.n	8002b9e <HAL_GPIO_Init+0x2e2>
 8002b5a:	bf00      	nop
 8002b5c:	10320000 	.word	0x10320000
 8002b60:	10310000 	.word	0x10310000
 8002b64:	10220000 	.word	0x10220000
 8002b68:	10210000 	.word	0x10210000
 8002b6c:	10120000 	.word	0x10120000
 8002b70:	10110000 	.word	0x10110000
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	40010c00 	.word	0x40010c00
 8002b84:	40011000 	.word	0x40011000
 8002b88:	40011400 	.word	0x40011400
 8002b8c:	40010400 	.word	0x40010400
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	4909      	ldr	r1, [pc, #36]	@ (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f47f ae8e 	bne.w	80028d0 <HAL_GPIO_Init+0x14>
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	372c      	adds	r7, #44	@ 0x2c
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <HAL_RCC_OscConfig>:
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e272      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8087 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x12e>
 8002be4:	4b92      	ldr	r3, [pc, #584]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d00c      	beq.n	8002c0a <HAL_RCC_OscConfig+0x46>
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d112      	bne.n	8002c22 <HAL_RCC_OscConfig+0x5e>
 8002bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c08:	d10b      	bne.n	8002c22 <HAL_RCC_OscConfig+0x5e>
 8002c0a:	4b89      	ldr	r3, [pc, #548]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d06c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x12c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d168      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x12c>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e24c      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x76>
 8002c2c:	4b80      	ldr	r3, [pc, #512]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7f      	ldr	r2, [pc, #508]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e02e      	b.n	8002c98 <HAL_RCC_OscConfig+0xd4>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x98>
 8002c42:	4b7b      	ldr	r3, [pc, #492]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7a      	ldr	r2, [pc, #488]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b78      	ldr	r3, [pc, #480]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a77      	ldr	r2, [pc, #476]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCC_OscConfig+0xd4>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0xbc>
 8002c66:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a71      	ldr	r2, [pc, #452]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6e      	ldr	r2, [pc, #440]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xd4>
 8002c80:	4b6b      	ldr	r3, [pc, #428]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6a      	ldr	r2, [pc, #424]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b68      	ldr	r3, [pc, #416]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a67      	ldr	r2, [pc, #412]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x104>
 8002ca0:	f7ff f8bc 	bl	8001e1c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xf6>
 8002ca8:	f7ff f8b8 	bl	8001e1c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	@ 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xf6>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e200      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002cba:	4b5d      	ldr	r3, [pc, #372]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe4>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x12e>
 8002cc8:	f7ff f8a8 	bl	8001e1c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x11e>
 8002cd0:	f7ff f8a4 	bl	8001e1c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x11e>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1ec      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002ce2:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x10c>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x12e>
 8002cf0:	bf00      	nop
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d063      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x202>
 8002cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x15e>
 8002d0a:	4b49      	ldr	r3, [pc, #292]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x18c>
 8002d16:	4b46      	ldr	r3, [pc, #280]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x18c>
 8002d22:	4b43      	ldr	r3, [pc, #268]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x176>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x176>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1c0      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4939      	ldr	r1, [pc, #228]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1d6>
 8002d58:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f7ff f85d 	bl	8001e1c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x1b4>
 8002d66:	f7ff f859 	bl	8001e1c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x1b4>
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1a1      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002d78:	4b2d      	ldr	r3, [pc, #180]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1a2>
 8002d84:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4927      	ldr	r1, [pc, #156]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
 8002d9a:	4b26      	ldr	r3, [pc, #152]	@ (8002e34 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f7ff f83c 	bl	8001e1c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x1f6>
 8002da8:	f7ff f838 	bl	8001e1c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x1f6>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e180      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002dba:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1e4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d03a      	beq.n	8002e48 <HAL_RCC_OscConfig+0x284>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <HAL_RCC_OscConfig+0x24a>
 8002dda:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f7ff f81c 	bl	8001e1c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x236>
 8002de8:	f7ff f818 	bl	8001e1c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x236>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e160      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x224>
 8002e06:	2001      	movs	r0, #1
 8002e08:	f000 fad0 	bl	80033ac <RCC_Delay>
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCC_OscConfig+0x284>
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f7ff f802 	bl	8001e1c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]
 8002e1a:	e00f      	b.n	8002e3c <HAL_RCC_OscConfig+0x278>
 8002e1c:	f7fe fffe 	bl	8001e1c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d908      	bls.n	8002e3c <HAL_RCC_OscConfig+0x278>
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e146      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	42420000 	.word	0x42420000
 8002e38:	42420480 	.word	0x42420480
 8002e3c:	4b92      	ldr	r3, [pc, #584]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e9      	bne.n	8002e1c <HAL_RCC_OscConfig+0x258>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a6 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x3de>
 8002e56:	2300      	movs	r3, #0
 8002e58:	75fb      	strb	r3, [r7, #23]
 8002e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10d      	bne.n	8002e82 <HAL_RCC_OscConfig+0x2be>
 8002e66:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4a87      	ldr	r2, [pc, #540]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	61d3      	str	r3, [r2, #28]
 8002e72:	4b85      	ldr	r3, [pc, #532]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
 8002e82:	4b82      	ldr	r3, [pc, #520]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2fc>
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7e      	ldr	r2, [pc, #504]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	f7fe ffbf 	bl	8001e1c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2f0>
 8002ea2:	f7fe ffbb 	bl	8001e1c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b64      	cmp	r3, #100	@ 0x64
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2f0>
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e103      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002eb4:	4b75      	ldr	r3, [pc, #468]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2de>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x312>
 8002ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	e02d      	b.n	8002f32 <HAL_RCC_OscConfig+0x36e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x334>
 8002ede:	4b6a      	ldr	r3, [pc, #424]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a69      	ldr	r2, [pc, #420]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b67      	ldr	r3, [pc, #412]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a66      	ldr	r2, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	e01c      	b.n	8002f32 <HAL_RCC_OscConfig+0x36e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x356>
 8002f00:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a5d      	ldr	r2, [pc, #372]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x36e>
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a57      	ldr	r2, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3a2>
 8002f3a:	f7fe ff6f 	bl	8001e1c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x394>
 8002f42:	f7fe ff6b 	bl	8001e1c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x394>
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0b1      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002f58:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCC_OscConfig+0x37e>
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x3cc>
 8002f66:	f7fe ff59 	bl	8001e1c <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
 8002f6e:	f7fe ff55 	bl	8001e1c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
 8002f80:	2303      	movs	r3, #3
 8002f82:	e09b      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002f84:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3aa>
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3de>
 8002f96:	4b3c      	ldr	r3, [pc, #240]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8087 	beq.w	80030ba <HAL_RCC_OscConfig+0x4f6>
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d061      	beq.n	800307c <HAL_RCC_OscConfig+0x4b8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d146      	bne.n	800304e <HAL_RCC_OscConfig+0x48a>
 8002fc0:	4b33      	ldr	r3, [pc, #204]	@ (8003090 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f7fe ff29 	bl	8001e1c <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x41c>
 8002fce:	f7fe ff25 	bl	8001e1c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x41c>
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e06d      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002fe0:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x40a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d108      	bne.n	8003008 <HAL_RCC_OscConfig+0x444>
 8002ff6:	4b24      	ldr	r3, [pc, #144]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4921      	ldr	r1, [pc, #132]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	4b1f      	ldr	r3, [pc, #124]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a19      	ldr	r1, [r3, #32]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	430b      	orrs	r3, r1
 800301a:	491b      	ldr	r1, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4cc>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f7fe fef9 	bl	8001e1c <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x47c>
 800302e:	f7fe fef5 	bl	8001e1c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x47c>
 800303c:	2303      	movs	r3, #3
 800303e:	e03d      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8003040:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x46a>
 800304c:	e035      	b.n	80030ba <HAL_RCC_OscConfig+0x4f6>
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCC_OscConfig+0x4cc>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f7fe fee2 	bl	8001e1c <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x4aa>
 800305c:	f7fe fede 	bl	8001e1c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x4aa>
 800306a:	2303      	movs	r3, #3
 800306c:	e026      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x498>
 800307a:	e01e      	b.n	80030ba <HAL_RCC_OscConfig+0x4f6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x4d0>
 8003084:	2301      	movs	r3, #1
 8003086:	e019      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8003088:	40021000 	.word	0x40021000
 800308c:	40007000 	.word	0x40007000
 8003090:	42420060 	.word	0x42420060
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_RCC_OscConfig+0x500>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x4f2>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x4f6>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 80030ba:	2300      	movs	r3, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_RCC_ClockConfig>:
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
 80030d8:	2301      	movs	r3, #1
 80030da:	e0d0      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
 80030dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
 80030ea:	4b67      	ldr	r3, [pc, #412]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4965      	ldr	r1, [pc, #404]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x92>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x68>
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a58      	ldr	r2, [pc, #352]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800312e:	6053      	str	r3, [r2, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x80>
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003146:	6053      	str	r3, [r2, #4]
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d040      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x120>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xb6>
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xce>
 8003186:	4b41      	ldr	r3, [pc, #260]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
 8003192:	2301      	movs	r3, #1
 8003194:	e073      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
 8003196:	4b3d      	ldr	r3, [pc, #244]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06b      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
 80031a6:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4936      	ldr	r1, [pc, #216]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
 80031b8:	f7fe fe30 	bl	8001e1c <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
 80031c0:	f7fe fe2c 	bl	8001e1c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e053      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
 80031d6:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf8>
 80031e8:	4b27      	ldr	r3, [pc, #156]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d210      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x150>
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4922      	ldr	r1, [pc, #136]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x150>
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x16e>
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x18e>
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	@ (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_ClockConfig+0x1cc>)
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_ClockConfig+0x1d0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fd8e 	bl	8001d98 <HAL_InitTick>
 800327c:	2300      	movs	r3, #0
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40022000 	.word	0x40022000
 800328c:	40021000 	.word	0x40021000
 8003290:	080087a4 	.word	0x080087a4
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x94>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d002      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x30>
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x36>
 80032ca:	e027      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x80>
 80032cc:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	e027      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x86>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	0c9b      	lsrs	r3, r3, #18
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d010      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x70>
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x94>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0c5b      	lsrs	r3, r3, #17
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	4a11      	ldr	r2, [pc, #68]	@ (800333c <HAL_RCC_GetSysClockFreq+0xa0>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x98>)
 80032fe:	fb03 f202 	mul.w	r2, r3, r2
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e004      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x7a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0c      	ldr	r2, [pc, #48]	@ (8003340 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x86>
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <HAL_RCC_GetSysClockFreq+0xa8>)
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	bf00      	nop
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4618      	mov	r0, r3
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	00f42400 	.word	0x00f42400
 8003338:	080087b4 	.word	0x080087b4
 800333c:	080087c4 	.word	0x080087c4
 8003340:	003d0900 	.word	0x003d0900
 8003344:	007a1200 	.word	0x007a1200

08003348 <HAL_RCC_GetHCLKFreq>:
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
 800334c:	4b02      	ldr	r3, [pc, #8]	@ (8003358 <HAL_RCC_GetHCLKFreq+0x10>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	20000000 	.word	0x20000000

0800335c <HAL_RCC_GetPCLK1Freq>:
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
 8003360:	f7ff fff2 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	@ (8003380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	0800879c 	.word	0x0800879c

08003384 <HAL_RCC_GetPCLK2Freq>:
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
 8003388:	f7ff ffde 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	0adb      	lsrs	r3, r3, #11
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4903      	ldr	r1, [pc, #12]	@ (80033a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000
 80033a8:	0800879c 	.word	0x0800879c

080033ac <RCC_Delay>:
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <RCC_Delay+0x34>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <RCC_Delay+0x38>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0a5b      	lsrs	r3, r3, #9
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	bf00      	nop
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e5a      	subs	r2, r3, #1
 80033ce:	60fa      	str	r2, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f9      	bne.n	80033c8 <RCC_Delay+0x1c>
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	20000000 	.word	0x20000000
 80033e4:	10624dd3 	.word	0x10624dd3

080033e8 <HAL_RCCEx_PeriphCLKConfig>:
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d07d      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]
 8003408:	4b4f      	ldr	r3, [pc, #316]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003414:	4b4c      	ldr	r3, [pc, #304]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a4b      	ldr	r2, [pc, #300]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
 8003420:	4b49      	ldr	r3, [pc, #292]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
 8003430:	4b46      	ldr	r3, [pc, #280]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d118      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x86>
 800343c:	4b43      	ldr	r3, [pc, #268]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a42      	ldr	r2, [pc, #264]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	f7fe fce8 	bl	8001e1c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]
 800344e:	e008      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003450:	f7fe fce4 	bl	8001e1c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	@ 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800345e:	2303      	movs	r3, #3
 8003460:	e06d      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003462:	4b3a      	ldr	r3, [pc, #232]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800346e:	4b36      	ldr	r3, [pc, #216]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02e      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	429a      	cmp	r2, r3
 800348a:	d027      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800348c:	4b2e      	ldr	r3, [pc, #184]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	4b2e      	ldr	r3, [pc, #184]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	4b2c      	ldr	r3, [pc, #176]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	4a29      	ldr	r2, [pc, #164]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034b2:	f7fe fcb3 	bl	8001e1c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]
 80034b8:	e00a      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80034ba:	f7fe fcaf 	bl	8001e1c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80034cc:	2303      	movs	r3, #3
 80034ce:	e036      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x156>
 80034d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ee      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4917      	ldr	r1, [pc, #92]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	620b      	str	r3, [r1, #32]
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80034f4:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	4a13      	ldr	r2, [pc, #76]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	61d3      	str	r3, [r2, #28]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800350c:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	490b      	ldr	r1, [pc, #44]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800352a:	4b07      	ldr	r3, [pc, #28]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4904      	ldr	r1, [pc, #16]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
 800353c:	2300      	movs	r3, #0
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
 8003550:	42420440 	.word	0x42420440

08003554 <HAL_RCCEx_GetPeriphCLKFreq>:
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b10      	cmp	r3, #16
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b10      	cmp	r3, #16
 800357a:	f200 8089 	bhi.w	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d045      	beq.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d074      	beq.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800358a:	e081      	b.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800358c:	4b45      	ldr	r3, [pc, #276]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b44      	ldr	r3, [pc, #272]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d07a      	beq.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	0c9b      	lsrs	r3, r3, #18
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	4a40      	ldr	r2, [pc, #256]	@ (80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035a8:	5cd3      	ldrb	r3, [r2, r3]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 80035b6:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	0c5b      	lsrs	r3, r3, #17
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	4a3a      	ldr	r2, [pc, #232]	@ (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80035d0:	4a37      	ldr	r2, [pc, #220]	@ (80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e004      	b.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4a33      	ldr	r2, [pc, #204]	@ (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	4b2d      	ldr	r3, [pc, #180]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f8:	d102      	bne.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e049      	b.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4a2c      	ldr	r2, [pc, #176]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	e041      	b.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8003610:	4b24      	ldr	r3, [pc, #144]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003620:	d108      	bne.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800362c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e01e      	b.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800363e:	d109      	bne.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003640:	4b18      	ldr	r3, [pc, #96]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800364c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	e00e      	b.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800365e:	d11b      	bne.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003660:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800366c:	4b13      	ldr	r3, [pc, #76]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e012      	b.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003672:	e011      	b.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003674:	f7ff fe86 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	0b9b      	lsrs	r3, r3, #14
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	3301      	adds	r3, #1
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e004      	b.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003690:	bf00      	nop
 8003692:	e002      	b.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003698:	bf00      	nop
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	080087c8 	.word	0x080087c8
 80036ac:	080087d8 	.word	0x080087d8
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	003d0900 	.word	0x003d0900
 80036b8:	aaaaaaab 	.word	0xaaaaaaab
 80036bc:	0001e848 	.word	0x0001e848

080036c0 <HAL_TIM_Base_Init>:
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_Base_Init+0x12>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e041      	b.n	8003756 <HAL_TIM_Base_Init+0x96>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_TIM_Base_Init+0x2c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe f99e 	bl	8001a28 <HAL_TIM_Base_MspInit>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f000 fa10 	bl	8003b24 <TIM_Base_SetConfig>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003754:	2300      	movs	r3, #0
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_TIM_PWM_Init>:
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_TIM_PWM_Init+0x12>
 800376c:	2301      	movs	r3, #1
 800376e:	e041      	b.n	80037f4 <HAL_TIM_PWM_Init+0x96>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <HAL_TIM_PWM_Init+0x2c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f839 	bl	80037fc <HAL_TIM_PWM_MspInit>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f000 f9c1 	bl	8003b24 <TIM_Base_SetConfig>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037f2:	2300      	movs	r3, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_PWM_MspInit>:
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
	...

08003810 <HAL_TIM_PWM_ConfigChannel>:
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800382a:	2302      	movs	r3, #2
 800382c:	e0ae      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	f200 809f 	bhi.w	800397c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800383e:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003879 	.word	0x08003879
 8003848:	0800397d 	.word	0x0800397d
 800384c:	0800397d 	.word	0x0800397d
 8003850:	0800397d 	.word	0x0800397d
 8003854:	080038b9 	.word	0x080038b9
 8003858:	0800397d 	.word	0x0800397d
 800385c:	0800397d 	.word	0x0800397d
 8003860:	0800397d 	.word	0x0800397d
 8003864:	080038fb 	.word	0x080038fb
 8003868:	0800397d 	.word	0x0800397d
 800386c:	0800397d 	.word	0x0800397d
 8003870:	0800397d 	.word	0x0800397d
 8003874:	0800393b 	.word	0x0800393b
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f9b2 	bl	8003be8 <TIM_OC1_SetConfig>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	619a      	str	r2, [r3, #24]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	619a      	str	r2, [r3, #24]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
 80038b6:	e064      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f9f8 	bl	8003cb4 <TIM_OC2_SetConfig>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d2:	619a      	str	r2, [r3, #24]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e2:	619a      	str	r2, [r3, #24]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6999      	ldr	r1, [r3, #24]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	619a      	str	r2, [r3, #24]
 80038f8:	e043      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fa41 	bl	8003d88 <TIM_OC3_SetConfig>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0208 	orr.w	r2, r2, #8
 8003914:	61da      	str	r2, [r3, #28]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0204 	bic.w	r2, r2, #4
 8003924:	61da      	str	r2, [r3, #28]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	61da      	str	r2, [r3, #28]
 8003938:	e023      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fa8b 	bl	8003e5c <TIM_OC4_SetConfig>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003954:	61da      	str	r2, [r3, #28]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003964:	61da      	str	r2, [r3, #28]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69d9      	ldr	r1, [r3, #28]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	61da      	str	r2, [r3, #28]
 800397a:	e002      	b.n	8003982 <HAL_TIM_PWM_ConfigChannel+0x172>
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
 8003980:	bf00      	nop
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_TIM_ConfigClockSource>:
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIM_ConfigClockSource+0x1c>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e0b4      	b.n	8003b1a <HAL_TIM_ConfigClockSource+0x186>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e8:	d03e      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0xd4>
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ee:	f200 8087 	bhi.w	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f6:	f000 8086 	beq.w	8003b06 <HAL_TIM_ConfigClockSource+0x172>
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fe:	d87f      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a00:	2b70      	cmp	r3, #112	@ 0x70
 8003a02:	d01a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0xa6>
 8003a04:	2b70      	cmp	r3, #112	@ 0x70
 8003a06:	d87b      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a08:	2b60      	cmp	r3, #96	@ 0x60
 8003a0a:	d050      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x11a>
 8003a0c:	2b60      	cmp	r3, #96	@ 0x60
 8003a0e:	d877      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b50      	cmp	r3, #80	@ 0x50
 8003a12:	d03c      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0xfa>
 8003a14:	2b50      	cmp	r3, #80	@ 0x50
 8003a16:	d873      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b40      	cmp	r3, #64	@ 0x40
 8003a1a:	d058      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x13a>
 8003a1c:	2b40      	cmp	r3, #64	@ 0x40
 8003a1e:	d86f      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b30      	cmp	r3, #48	@ 0x30
 8003a22:	d064      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a24:	2b30      	cmp	r3, #48	@ 0x30
 8003a26:	d86b      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d060      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d867      	bhi.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05c      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d05a      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x15a>
 8003a38:	e062      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f000 facc 	bl	8003fe6 <TIM_ETR_SetConfig>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	e04f      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6899      	ldr	r1, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f000 fab5 	bl	8003fe6 <TIM_ETR_SetConfig>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	e03c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 fa2c 	bl	8003ef8 <TIM_TI1_ConfigInputStage>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2150      	movs	r1, #80	@ 0x50
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fa83 	bl	8003fb2 <TIM_ITRx_SetConfig>
 8003aac:	e02c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 fa4a 	bl	8003f54 <TIM_TI2_ConfigInputStage>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2160      	movs	r1, #96	@ 0x60
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa73 	bl	8003fb2 <TIM_ITRx_SetConfig>
 8003acc:	e01c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 fa0c 	bl	8003ef8 <TIM_TI1_ConfigInputStage>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2140      	movs	r1, #64	@ 0x40
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fa63 	bl	8003fb2 <TIM_ITRx_SetConfig>
 8003aec:	e00c      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f000 fa5a 	bl	8003fb2 <TIM_ITRx_SetConfig>
 8003afe:	e003      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e000      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x174>
 8003b06:	bf00      	nop
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <TIM_Base_SetConfig>:
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a29      	ldr	r2, [pc, #164]	@ (8003bdc <TIM_Base_SetConfig+0xb8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <TIM_Base_SetConfig+0x30>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b42:	d007      	beq.n	8003b54 <TIM_Base_SetConfig+0x30>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a26      	ldr	r2, [pc, #152]	@ (8003be0 <TIM_Base_SetConfig+0xbc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_Base_SetConfig+0x30>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a25      	ldr	r2, [pc, #148]	@ (8003be4 <TIM_Base_SetConfig+0xc0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d108      	bne.n	8003b66 <TIM_Base_SetConfig+0x42>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <TIM_Base_SetConfig+0xb8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a19      	ldr	r2, [pc, #100]	@ (8003be0 <TIM_Base_SetConfig+0xbc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <TIM_Base_SetConfig+0xc0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0x74>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a07      	ldr	r2, [pc, #28]	@ (8003bdc <TIM_Base_SetConfig+0xb8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d103      	bne.n	8003bcc <TIM_Base_SetConfig+0xa8>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	615a      	str	r2, [r3, #20]
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800

08003be8 <TIM_OC1_SetConfig>:
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 0201 	bic.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 0302 	bic.w	r3, r3, #2
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb0 <TIM_OC1_SetConfig+0xc8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10c      	bne.n	8003c5e <TIM_OC1_SetConfig+0x76>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0308 	bic.w	r3, r3, #8
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a13      	ldr	r2, [pc, #76]	@ (8003cb0 <TIM_OC1_SetConfig+0xc8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <TIM_OC1_SetConfig+0xa2>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	619a      	str	r2, [r3, #24]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	621a      	str	r2, [r3, #32]
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40012c00 	.word	0x40012c00

08003cb4 <TIM_OC2_SetConfig>:
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f023 0210 	bic.w	r2, r3, #16
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	621a      	str	r2, [r3, #32]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0320 	bic.w	r3, r3, #32
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <TIM_OC2_SetConfig+0xd0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10d      	bne.n	8003d30 <TIM_OC2_SetConfig+0x7c>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a14      	ldr	r2, [pc, #80]	@ (8003d84 <TIM_OC2_SetConfig+0xd0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d113      	bne.n	8003d60 <TIM_OC2_SetConfig+0xac>
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	619a      	str	r2, [r3, #24]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	40012c00 	.word	0x40012c00

08003d88 <TIM_OC3_SetConfig>:
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	621a      	str	r2, [r3, #32]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0303 	bic.w	r3, r3, #3
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e58 <TIM_OC3_SetConfig+0xd0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10d      	bne.n	8003e02 <TIM_OC3_SetConfig+0x7a>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <TIM_OC3_SetConfig+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d113      	bne.n	8003e32 <TIM_OC3_SetConfig+0xaa>
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	61da      	str	r2, [r3, #28]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	621a      	str	r2, [r3, #32]
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00

08003e5c <TIM_OC4_SetConfig>:
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	621a      	str	r2, [r3, #32]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	031b      	lsls	r3, r3, #12
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8003ef4 <TIM_OC4_SetConfig+0x98>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d109      	bne.n	8003ed0 <TIM_OC4_SetConfig+0x74>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	61da      	str	r2, [r3, #28]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	621a      	str	r2, [r3, #32]
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00

08003ef8 <TIM_TI1_ConfigInputStage>:
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0201 	bic.w	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 030a 	bic.w	r3, r3, #10
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	619a      	str	r2, [r3, #24]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <TIM_TI2_ConfigInputStage>:
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0210 	bic.w	r2, r3, #16
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	619a      	str	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	621a      	str	r2, [r3, #32]
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <TIM_ITRx_SetConfig>:
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f043 0307 	orr.w	r3, r3, #7
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <TIM_ETR_SetConfig>:
 8003fe6:	b480      	push	{r7}
 8003fe8:	b087      	sub	sp, #28
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	021a      	lsls	r2, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	431a      	orrs	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <HAL_TIMEx_MasterConfigSynchronization>:
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004038:	2302      	movs	r3, #2
 800403a:	e046      	b.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004088:	d009      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a12      	ldr	r2, [pc, #72]	@ (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a10      	ldr	r2, [pc, #64]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10c      	bne.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80040c8:	2300      	movs	r3, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800

080040e0 <HAL_UART_Init>:
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x12>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e042      	b.n	8004178 <HAL_UART_Init+0x98>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x2c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fcda 	bl	8001ac0 <HAL_UART_MspInit>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fc7f 	bl	8004a28 <UART_SetConfig>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004148:	615a      	str	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	635a      	str	r2, [r3, #52]	@ 0x34
 8004176:	2300      	movs	r3, #0
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_IRQHandler>:
 8004180:	b580      	push	{r7, lr}
 8004182:	b0ba      	sub	sp, #232	@ 0xe8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_UART_IRQHandler+0x66>
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_UART_IRQHandler+0x66>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_UART_IRQHandler+0x66>
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb63 	bl	80048aa <UART_Receive_IT>
 80041e4:	e25b      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
 80041e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80de 	beq.w	80043ac <HAL_UART_IRQHandler+0x22c>
 80041f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_UART_IRQHandler+0x8a>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004200:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80d1 	beq.w	80043ac <HAL_UART_IRQHandler+0x22c>
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_UART_IRQHandler+0xae>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0xae>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_UART_IRQHandler+0xd2>
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_UART_IRQHandler+0xd2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_UART_IRQHandler+0xf6>
 800425e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_IRQHandler+0xf6>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d011      	beq.n	80042a6 <HAL_UART_IRQHandler+0x126>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_UART_IRQHandler+0x11a>
 800428e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_UART_IRQHandler+0x126>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f043 0208 	orr.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 81f2 	beq.w	8004694 <HAL_UART_IRQHandler+0x514>
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_UART_IRQHandler+0x14e>
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_IRQHandler+0x14e>
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 faee 	bl	80048aa <UART_Receive_IT>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <HAL_UART_IRQHandler+0x17a>
 80042f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d04f      	beq.n	800439a <HAL_UART_IRQHandler+0x21a>
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9f8 	bl	80046f0 <UART_EndRxTransfer>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d041      	beq.n	8004392 <HAL_UART_IRQHandler+0x212>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800433a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800433e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1d9      	bne.n	800430e <HAL_UART_IRQHandler+0x18e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d013      	beq.n	800438a <HAL_UART_IRQHandler+0x20a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	4a7e      	ldr	r2, [pc, #504]	@ (8004560 <HAL_UART_IRQHandler+0x3e0>)
 8004368:	635a      	str	r2, [r3, #52]	@ 0x34
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fa2c 	bl	80027cc <HAL_DMA_Abort_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_UART_IRQHandler+0x228>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004384:	4610      	mov	r0, r2
 8004386:	4798      	blx	r3
 8004388:	e00e      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f99c 	bl	80046c8 <HAL_UART_ErrorCallback>
 8004390:	e00a      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f998 	bl	80046c8 <HAL_UART_ErrorCallback>
 8004398:	e006      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f994 	bl	80046c8 <HAL_UART_ErrorCallback>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80043a6:	e175      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
 80043a8:	bf00      	nop
 80043aa:	e173      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 814f 	bne.w	8004654 <HAL_UART_IRQHandler+0x4d4>
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8148 	beq.w	8004654 <HAL_UART_IRQHandler+0x4d4>
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8141 	beq.w	8004654 <HAL_UART_IRQHandler+0x4d4>
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80b6 	beq.w	8004564 <HAL_UART_IRQHandler+0x3e4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8004404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8145 	beq.w	8004698 <HAL_UART_IRQHandler+0x518>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004416:	429a      	cmp	r2, r3
 8004418:	f080 813e 	bcs.w	8004698 <HAL_UART_IRQHandler+0x518>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004422:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b20      	cmp	r3, #32
 800442c:	f000 8088 	beq.w	8004540 <HAL_UART_IRQHandler+0x3c0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800443a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004446:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800444a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800444e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800445c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004464:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004468:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1d9      	bne.n	8004430 <HAL_UART_IRQHandler+0x2b0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	677b      	str	r3, [r7, #116]	@ 0x74
 8004484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	673b      	str	r3, [r7, #112]	@ 0x70
 800448c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3314      	adds	r3, #20
 800449c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e1      	bne.n	800447c <HAL_UART_IRQHandler+0x2fc>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	663b      	str	r3, [r7, #96]	@ 0x60
 80044c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80044ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e3      	bne.n	80044b8 <HAL_UART_IRQHandler+0x338>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800450e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004522:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004524:	657b      	str	r3, [r7, #84]	@ 0x54
 8004526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e3      	bne.n	80044fe <HAL_UART_IRQHandler+0x37e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe f90b 	bl	8002756 <HAL_DMA_Abort>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	635a      	str	r2, [r3, #52]	@ 0x34
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800454e:	b29b      	uxth	r3, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	b29b      	uxth	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8bf 	bl	80046da <HAL_UARTEx_RxEventCallback>
 800455c:	e09c      	b.n	8004698 <HAL_UART_IRQHandler+0x518>
 800455e:	bf00      	nop
 8004560:	080047b5 	.word	0x080047b5
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800456c:	b29b      	uxth	r3, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 808e 	beq.w	800469c <HAL_UART_IRQHandler+0x51c>
 8004580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8089 	beq.w	800469c <HAL_UART_IRQHandler+0x51c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
 800459a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80045b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e3      	bne.n	800458a <HAL_UART_IRQHandler+0x40a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80045e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e3      	bne.n	80045c2 <HAL_UART_IRQHandler+0x442>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0310 	bic.w	r3, r3, #16
 800461e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800462c:	61fa      	str	r2, [r7, #28]
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69b9      	ldr	r1, [r7, #24]
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e3      	bne.n	8004608 <HAL_UART_IRQHandler+0x488>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	635a      	str	r2, [r3, #52]	@ 0x34
 8004646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f844 	bl	80046da <HAL_UARTEx_RxEventCallback>
 8004652:	e023      	b.n	800469c <HAL_UART_IRQHandler+0x51c>
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_UART_IRQHandler+0x4f4>
 8004660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_UART_IRQHandler+0x4f4>
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8b5 	bl	80047dc <UART_Transmit_IT>
 8004672:	e014      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00e      	beq.n	800469e <HAL_UART_IRQHandler+0x51e>
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_UART_IRQHandler+0x51e>
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f8f4 	bl	800487a <UART_EndTransmit_IT>
 8004692:	e004      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_UART_IRQHandler+0x51e>
 800469c:	bf00      	nop
 800469e:	37e8      	adds	r7, #232	@ 0xe8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_UART_TxCpltCallback>:
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_UART_RxCpltCallback>:
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_ErrorCallback>:
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_UARTEx_RxEventCallback>:
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	807b      	strh	r3, [r7, #2]
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <UART_EndRxTransfer>:
 80046f0:	b480      	push	{r7}
 80046f2:	b095      	sub	sp, #84	@ 0x54
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	633b      	str	r3, [r7, #48]	@ 0x30
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004718:	643a      	str	r2, [r7, #64]	@ 0x40
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800471e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndRxTransfer+0x8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800474c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <UART_EndRxTransfer+0x3c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	2b01      	cmp	r3, #1
 8004766:	d119      	bne.n	800479c <UART_EndRxTransfer+0xac>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004788:	61ba      	str	r2, [r7, #24]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_EndRxTransfer+0x78>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80047aa:	bf00      	nop
 80047ac:	3754      	adds	r7, #84	@ 0x54
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <UART_DMAAbortOnError>:
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	84da      	strh	r2, [r3, #38]	@ 0x26
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff ff7a 	bl	80046c8 <HAL_UART_ErrorCallback>
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_Transmit_IT>:
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b21      	cmp	r3, #33	@ 0x21
 80047ee:	d13e      	bne.n	800486e <UART_Transmit_IT+0x92>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f8:	d114      	bne.n	8004824 <UART_Transmit_IT+0x48>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d110      	bne.n	8004824 <UART_Transmit_IT+0x48>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]
 8004822:	e008      	b.n	8004836 <UART_Transmit_IT+0x5a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	1c59      	adds	r1, r3, #1
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6211      	str	r1, [r2, #32]
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29b      	uxth	r3, r3
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	4619      	mov	r1, r3
 8004844:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <UART_Transmit_IT+0x8e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	2300      	movs	r3, #0
 800486c:	e000      	b.n	8004870 <UART_Transmit_IT+0x94>
 800486e:	2302      	movs	r3, #2
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <UART_EndTransmit_IT>:
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff ff02 	bl	80046a4 <HAL_UART_TxCpltCallback>
 80048a0:	2300      	movs	r3, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <UART_Receive_IT>:
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b08c      	sub	sp, #48	@ 0x30
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b22      	cmp	r3, #34	@ 0x22
 80048bc:	f040 80ae 	bne.w	8004a1c <UART_Receive_IT+0x172>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c8:	d117      	bne.n	80048fa <UART_Receive_IT+0x50>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d113      	bne.n	80048fa <UART_Receive_IT+0x50>
 80048d2:	2300      	movs	r3, #0
 80048d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	1c9a      	adds	r2, r3, #2
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048f8:	e026      	b.n	8004948 <UART_Receive_IT+0x9e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004900:	2300      	movs	r3, #0
 8004902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490c:	d007      	beq.n	800491e <UART_Receive_IT+0x74>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <UART_Receive_IT+0x82>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <UART_Receive_IT+0x82>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e008      	b.n	800493e <UART_Receive_IT+0x94>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004938:	b2da      	uxtb	r2, r3
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	@ 0x28
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29b      	uxth	r3, r3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4619      	mov	r1, r3
 8004956:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004958:	2b00      	cmp	r3, #0
 800495a:	d15d      	bne.n	8004a18 <UART_Receive_IT+0x16e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0220 	bic.w	r2, r2, #32
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	615a      	str	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	635a      	str	r2, [r3, #52]	@ 0x34
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d135      	bne.n	8004a0e <UART_Receive_IT+0x164>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c8:	623a      	str	r2, [r7, #32]
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	69f9      	ldr	r1, [r7, #28]
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_Receive_IT+0xfe>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d10a      	bne.n	8004a00 <UART_Receive_IT+0x156>
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fe67 	bl	80046da <HAL_UARTEx_RxEventCallback>
 8004a0c:	e002      	b.n	8004a14 <UART_Receive_IT+0x16a>
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fe51 	bl	80046b6 <HAL_UART_RxCpltCallback>
 8004a14:	2300      	movs	r3, #0
 8004a16:	e002      	b.n	8004a1e <UART_Receive_IT+0x174>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <UART_Receive_IT+0x174>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3730      	adds	r7, #48	@ 0x30
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <UART_SetConfig>:
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	611a      	str	r2, [r3, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a62:	f023 030c 	bic.w	r3, r3, #12
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	60d3      	str	r3, [r2, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	615a      	str	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b3c <UART_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d103      	bne.n	8004a98 <UART_SetConfig+0x70>
 8004a90:	f7fe fc78 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	e002      	b.n	8004a9e <UART_SetConfig+0x76>
 8004a98:	f7fe fc60 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009a      	lsls	r2, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	4a22      	ldr	r2, [pc, #136]	@ (8004b40 <UART_SetConfig+0x118>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	0119      	lsls	r1, r3, #4
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009a      	lsls	r2, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b40 <UART_SetConfig+0x118>)
 8004ad6:	fba3 0302 	umull	r0, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2064      	movs	r0, #100	@ 0x64
 8004ade:	fb00 f303 	mul.w	r3, r0, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	3332      	adds	r3, #50	@ 0x32
 8004ae8:	4a15      	ldr	r2, [pc, #84]	@ (8004b40 <UART_SetConfig+0x118>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004af4:	4419      	add	r1, r3
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <UART_SetConfig+0x118>)
 8004b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2064      	movs	r0, #100	@ 0x64
 8004b16:	fb00 f303 	mul.w	r3, r0, r3
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	3332      	adds	r3, #50	@ 0x32
 8004b20:	4a07      	ldr	r2, [pc, #28]	@ (8004b40 <UART_SetConfig+0x118>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 020f 	and.w	r2, r3, #15
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	440a      	add	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40013800 	.word	0x40013800
 8004b40:	51eb851f 	.word	0x51eb851f

08004b44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004b48:	4904      	ldr	r1, [pc, #16]	@ (8004b5c <MX_FATFS_Init+0x18>)
 8004b4a:	4805      	ldr	r0, [pc, #20]	@ (8004b60 <MX_FATFS_Init+0x1c>)
 8004b4c:	f000 fe20 	bl	8005790 <FATFS_LinkDriver>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <MX_FATFS_Init+0x20>)
 8004b56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004b58:	bf00      	nop
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000454 	.word	0x20000454
 8004b60:	2000000c 	.word	0x2000000c
 8004b64:	20000450 	.word	0x20000450

08004b68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004b72:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <USER_initialize+0x20>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004b78:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <USER_initialize+0x20>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	20000009 	.word	0x20000009

08004b8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004b96:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <USER_status+0x20>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	@ (8004bac <USER_status+0x20>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000009 	.word	0x20000009

08004bb0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004bc0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004bdc:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	603a      	str	r2, [r7, #0]
 8004bf2:	71fb      	strb	r3, [r7, #7]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
    return res;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	4a08      	ldr	r2, [pc, #32]	@ (8004c38 <disk_status+0x30>)
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	79fa      	ldrb	r2, [r7, #7]
 8004c20:	4905      	ldr	r1, [pc, #20]	@ (8004c38 <disk_status+0x30>)
 8004c22:	440a      	add	r2, r1
 8004c24:	7a12      	ldrb	r2, [r2, #8]
 8004c26:	4610      	mov	r0, r2
 8004c28:	4798      	blx	r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	200014a8 	.word	0x200014a8

08004c3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c84 <disk_initialize+0x48>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d111      	bne.n	8004c78 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	4a0b      	ldr	r2, [pc, #44]	@ (8004c84 <disk_initialize+0x48>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <disk_initialize+0x48>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	4906      	ldr	r1, [pc, #24]	@ (8004c84 <disk_initialize+0x48>)
 8004c6c:	440a      	add	r2, r1
 8004c6e:	7a12      	ldrb	r2, [r2, #8]
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200014a8 	.word	0x200014a8

08004c88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <disk_read+0x3c>)
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	689c      	ldr	r4, [r3, #8]
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	4a07      	ldr	r2, [pc, #28]	@ (8004cc4 <disk_read+0x3c>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	7a18      	ldrb	r0, [r3, #8]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	47a0      	blx	r4
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200014a8 	.word	0x200014a8

08004cc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <disk_write+0x3c>)
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68dc      	ldr	r4, [r3, #12]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4a07      	ldr	r2, [pc, #28]	@ (8004d04 <disk_write+0x3c>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	7a18      	ldrb	r0, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	47a0      	blx	r4
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200014a8 	.word	0x200014a8

08004d08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	603a      	str	r2, [r7, #0]
 8004d12:	71fb      	strb	r3, [r7, #7]
 8004d14:	460b      	mov	r3, r1
 8004d16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <disk_ioctl+0x38>)
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	79fa      	ldrb	r2, [r7, #7]
 8004d26:	4906      	ldr	r1, [pc, #24]	@ (8004d40 <disk_ioctl+0x38>)
 8004d28:	440a      	add	r2, r1
 8004d2a:	7a10      	ldrb	r0, [r2, #8]
 8004d2c:	79b9      	ldrb	r1, [r7, #6]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	4798      	blx	r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200014a8 	.word	0x200014a8

08004d44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e016      	b.n	8004d80 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d52:	4910      	ldr	r1, [pc, #64]	@ (8004d94 <clear_lock+0x50>)
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d108      	bne.n	8004d7a <clear_lock+0x36>
 8004d68:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <clear_lock+0x50>)
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d9e5      	bls.n	8004d52 <clear_lock+0xe>
	}
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20001490 	.word	0x20001490

08004d98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004daa:	791b      	ldrb	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d040      	beq.n	8004e32 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dc0:	7858      	ldrb	r0, [r3, #1]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	f7ff ff7e 	bl	8004cc8 <disk_write>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <sync_window+0x40>
			res = FR_DISK_ERR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
 8004dd6:	e02c      	b.n	8004e32 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dde:	2200      	movs	r2, #0
 8004de0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	1ad2      	subs	r2, r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d21b      	bcs.n	8004e32 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e00:	78db      	ldrb	r3, [r3, #3]
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e012      	b.n	8004e2c <sync_window+0x94>
					wsect += fs->fsize;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4413      	add	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e1a:	7858      	ldrb	r0, [r3, #1]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	f7ff ff51 	bl	8004cc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d8e9      	bhi.n	8004e06 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d01e      	beq.n	8004e96 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff9d 	bl	8004d98 <sync_window>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d116      	bne.n	8004e96 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e6e:	7858      	ldrb	r0, [r3, #1]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	2301      	movs	r3, #1
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	f7ff ff07 	bl	8004c88 <disk_read>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295
 8004e84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e90:	461a      	mov	r2, r3
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d031      	beq.n	8004f1a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e002      	b.n	8004ec4 <get_ldnumber+0x24>
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b1f      	cmp	r3, #31
 8004eca:	d903      	bls.n	8004ed4 <get_ldnumber+0x34>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b3a      	cmp	r3, #58	@ 0x3a
 8004ed2:	d1f4      	bne.n	8004ebe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b3a      	cmp	r3, #58	@ 0x3a
 8004eda:	d11c      	bne.n	8004f16 <get_ldnumber+0x76>
			tp = *path;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	60fa      	str	r2, [r7, #12]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	3b30      	subs	r3, #48	@ 0x30
 8004eec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d80e      	bhi.n	8004f12 <get_ldnumber+0x72>
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d10a      	bne.n	8004f12 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <get_ldnumber+0x72>
					vol = (int)i;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	e002      	b.n	8004f1c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004f1a:	693b      	ldr	r3, [r7, #16]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
	...

08004f28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f38:	2200      	movs	r2, #0
 8004f3a:	711a      	strb	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f42:	461a      	mov	r2, r3
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff75 	bl	8004e3c <move_window>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <check_fs+0x34>
		return 3;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e04a      	b.n	8004ff2 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004f62:	3301      	adds	r3, #1
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	b21a      	sxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8004f70:	b21b      	sxth	r3, r3
 8004f72:	4313      	orrs	r3, r2
 8004f74:	b21b      	sxth	r3, r3
 8004f76:	4a21      	ldr	r2, [pc, #132]	@ (8004ffc <check_fs+0xd4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d001      	beq.n	8004f80 <check_fs+0x58>
		return 2;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e038      	b.n	8004ff2 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3336      	adds	r3, #54	@ 0x36
 8004f84:	3303      	adds	r3, #3
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	061a      	lsls	r2, r3, #24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3336      	adds	r3, #54	@ 0x36
 8004f8e:	3302      	adds	r3, #2
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3336      	adds	r3, #54	@ 0x36
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fae:	4a14      	ldr	r2, [pc, #80]	@ (8005000 <check_fs+0xd8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <check_fs+0x90>
		return 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e01c      	b.n	8004ff2 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3352      	adds	r3, #82	@ 0x52
 8004fbc:	3303      	adds	r3, #3
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	061a      	lsls	r2, r3, #24
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3352      	adds	r3, #82	@ 0x52
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3352      	adds	r3, #82	@ 0x52
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fe6:	4a06      	ldr	r2, [pc, #24]	@ (8005000 <check_fs+0xd8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <check_fs+0xc8>
		return 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <check_fs+0xca>

	return 1;
 8004ff0:	2301      	movs	r3, #1
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	ffffaa55 	.word	0xffffaa55
 8005000:	00544146 	.word	0x00544146

08005004 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b096      	sub	sp, #88	@ 0x58
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005018:	68b8      	ldr	r0, [r7, #8]
 800501a:	f7ff ff41 	bl	8004ea0 <get_ldnumber>
 800501e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	da01      	bge.n	800502a <find_volume+0x26>
 8005026:	230b      	movs	r3, #11
 8005028:	e311      	b.n	800564e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800502a:	4a98      	ldr	r2, [pc, #608]	@ (800528c <find_volume+0x288>)
 800502c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005032:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <find_volume+0x3a>
 800503a:	230c      	movs	r3, #12
 800503c:	e307      	b.n	800564e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005042:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01c      	beq.n	800508a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fdd5 	bl	8004c08 <disk_status>
 800505e:	4603      	mov	r3, r0
 8005060:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005064:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10c      	bne.n	800508a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <find_volume+0x82>
 8005076:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005082:	230a      	movs	r3, #10
 8005084:	e2e3      	b.n	800564e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8005086:	2300      	movs	r3, #0
 8005088:	e2e1      	b.n	800564e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005096:	b2da      	uxtb	r2, r3
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800509e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fdc7 	bl	8004c3c <disk_initialize>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80050b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80050c0:	2303      	movs	r3, #3
 80050c2:	e2c4      	b.n	800564e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <find_volume+0xd6>
 80050ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80050d6:	230a      	movs	r3, #10
 80050d8:	e2b9      	b.n	800564e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e0:	7858      	ldrb	r0, [r3, #1]
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e8:	330a      	adds	r3, #10
 80050ea:	461a      	mov	r2, r3
 80050ec:	2102      	movs	r1, #2
 80050ee:	f7ff fe0b 	bl	8004d08 <disk_ioctl>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10d      	bne.n	8005114 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050fe:	895b      	ldrh	r3, [r3, #10]
 8005100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005104:	d306      	bcc.n	8005114 <find_volume+0x110>
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800510c:	895b      	ldrh	r3, [r3, #10]
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005112:	d901      	bls.n	8005118 <find_volume+0x114>
 8005114:	2301      	movs	r3, #1
 8005116:	e29a      	b.n	800564e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800511c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800511e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005120:	f7ff ff02 	bl	8004f28 <check_fs>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800512a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800512e:	2b01      	cmp	r3, #1
 8005130:	d153      	bne.n	80051da <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005132:	2300      	movs	r3, #0
 8005134:	643b      	str	r3, [r7, #64]	@ 0x40
 8005136:	e028      	b.n	800518a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005138:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800513a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005142:	4413      	add	r3, r2
 8005144:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	3304      	adds	r3, #4
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <find_volume+0x172>
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	330b      	adds	r3, #11
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	061a      	lsls	r2, r3, #24
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	330a      	adds	r3, #10
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	431a      	orrs	r2, r3
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	3309      	adds	r3, #9
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	4313      	orrs	r3, r2
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	3208      	adds	r2, #8
 8005170:	7812      	ldrb	r2, [r2, #0]
 8005172:	431a      	orrs	r2, r3
 8005174:	e000      	b.n	8005178 <find_volume+0x174>
 8005176:	2200      	movs	r2, #0
 8005178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	3358      	adds	r3, #88	@ 0x58
 800517e:	443b      	add	r3, r7
 8005180:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005186:	3301      	adds	r3, #1
 8005188:	643b      	str	r3, [r7, #64]	@ 0x40
 800518a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800518c:	2b03      	cmp	r3, #3
 800518e:	d9d3      	bls.n	8005138 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005190:	2300      	movs	r3, #0
 8005192:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <find_volume+0x19c>
 800519a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800519c:	3b01      	subs	r3, #1
 800519e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80051a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	3358      	adds	r3, #88	@ 0x58
 80051a6:	443b      	add	r3, r7
 80051a8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80051ac:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80051ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <find_volume+0x1bc>
 80051b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80051b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80051b8:	f7ff feb6 	bl	8004f28 <check_fs>
 80051bc:	4603      	mov	r3, r0
 80051be:	e000      	b.n	80051c2 <find_volume+0x1be>
 80051c0:	2302      	movs	r3, #2
 80051c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80051c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <find_volume+0x1d6>
 80051ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d0:	3301      	adds	r3, #1
 80051d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80051d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d9e2      	bls.n	80051a0 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80051da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d101      	bne.n	80051e6 <find_volume+0x1e2>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e233      	b.n	800564e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80051e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <find_volume+0x1ee>
 80051ee:	230d      	movs	r3, #13
 80051f0:	e22d      	b.n	800564e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	7b1b      	ldrb	r3, [r3, #12]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	b21a      	sxth	r2, r3
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	7adb      	ldrb	r3, [r3, #11]
 80051fe:	b21b      	sxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b21a      	sxth	r2, r3
 8005204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800520a:	895b      	ldrh	r3, [r3, #10]
 800520c:	b21b      	sxth	r3, r3
 800520e:	429a      	cmp	r2, r3
 8005210:	d001      	beq.n	8005216 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8005212:	230d      	movs	r3, #13
 8005214:	e21b      	b.n	800564e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	7ddb      	ldrb	r3, [r3, #23]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	b21a      	sxth	r2, r3
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	7d9b      	ldrb	r3, [r3, #22]
 8005222:	b21b      	sxth	r3, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	b21b      	sxth	r3, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800522c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d112      	bne.n	8005258 <find_volume+0x254>
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005238:	061a      	lsls	r2, r3, #24
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	431a      	orrs	r2, r3
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	4313      	orrs	r3, r2
 800524e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005250:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8005254:	4313      	orrs	r3, r2
 8005256:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8005258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800525e:	461a      	mov	r2, r3
 8005260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005262:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	7c1a      	ldrb	r2, [r3, #16]
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005276:	78db      	ldrb	r3, [r3, #3]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d009      	beq.n	8005290 <find_volume+0x28c>
 800527c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d003      	beq.n	8005290 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8005288:	230d      	movs	r3, #13
 800528a:	e1e0      	b.n	800564e <find_volume+0x64a>
 800528c:	20001488 	.word	0x20001488
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005296:	78db      	ldrb	r3, [r3, #3]
 8005298:	461a      	mov	r2, r3
 800529a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80052a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a4:	7b5a      	ldrb	r2, [r3, #13]
 80052a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ac:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b4:	789b      	ldrb	r3, [r3, #2]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <find_volume+0x2d0>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052c0:	789b      	ldrb	r3, [r3, #2]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ca:	789b      	ldrb	r3, [r3, #2]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80052d4:	230d      	movs	r3, #13
 80052d6:	e1ba      	b.n	800564e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80052d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052da:	7c9b      	ldrb	r3, [r3, #18]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	b21a      	sxth	r2, r3
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	7c5b      	ldrb	r3, [r3, #17]
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b21b      	sxth	r3, r3
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80052f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052fa:	891b      	ldrh	r3, [r3, #8]
 80052fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005302:	8952      	ldrh	r2, [r2, #10]
 8005304:	0952      	lsrs	r2, r2, #5
 8005306:	b292      	uxth	r2, r2
 8005308:	fbb3 f1f2 	udiv	r1, r3, r2
 800530c:	fb01 f202 	mul.w	r2, r1, r2
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8005318:	230d      	movs	r3, #13
 800531a:	e198      	b.n	800564e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	7d1b      	ldrb	r3, [r3, #20]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	b21a      	sxth	r2, r3
 8005324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005326:	7cdb      	ldrb	r3, [r3, #19]
 8005328:	b21b      	sxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	b21b      	sxth	r3, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005334:	2b00      	cmp	r3, #0
 8005336:	d112      	bne.n	800535e <find_volume+0x35a>
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800533e:	061a      	lsls	r2, r3, #24
 8005340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005342:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	431a      	orrs	r2, r3
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	4313      	orrs	r3, r2
 8005354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005356:	f892 2020 	ldrb.w	r2, [r2, #32]
 800535a:	4313      	orrs	r3, r2
 800535c:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	7bdb      	ldrb	r3, [r3, #15]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	b21a      	sxth	r2, r3
 8005366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005368:	7b9b      	ldrb	r3, [r3, #14]
 800536a:	b21b      	sxth	r3, r3
 800536c:	4313      	orrs	r3, r2
 800536e:	b21b      	sxth	r3, r3
 8005370:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005372:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <find_volume+0x378>
 8005378:	230d      	movs	r3, #13
 800537a:	e168      	b.n	800564e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800537c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800537e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005380:	4413      	add	r3, r2
 8005382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005384:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005388:	8911      	ldrh	r1, [r2, #8]
 800538a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800538c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005390:	8952      	ldrh	r2, [r2, #10]
 8005392:	0952      	lsrs	r2, r2, #5
 8005394:	b292      	uxth	r2, r2
 8005396:	fbb1 f2f2 	udiv	r2, r1, r2
 800539a:	b292      	uxth	r2, r2
 800539c:	4413      	add	r3, r2
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80053a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d201      	bcs.n	80053ac <find_volume+0x3a8>
 80053a8:	230d      	movs	r3, #13
 80053aa:	e150      	b.n	800564e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80053ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053b8:	7892      	ldrb	r2, [r2, #2]
 80053ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <find_volume+0x3c6>
 80053c6:	230d      	movs	r3, #13
 80053c8:	e141      	b.n	800564e <find_volume+0x64a>
	fmt = FS_FAT12;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d902      	bls.n	80053e0 <find_volume+0x3dc>
 80053da:	2302      	movs	r3, #2
 80053dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d902      	bls.n	80053f0 <find_volume+0x3ec>
 80053ea:	2303      	movs	r3, #3
 80053ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	3302      	adds	r3, #2
 80053f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053fa:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005402:	461a      	mov	r2, r3
 8005404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005406:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005408:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800540a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800540c:	4413      	add	r3, r2
 800540e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005410:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005414:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8005416:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	4413      	add	r3, r2
 800541c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800541e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005422:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8005424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005428:	2b03      	cmp	r3, #3
 800542a:	d124      	bne.n	8005476 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800542c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005432:	891b      	ldrh	r3, [r3, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <find_volume+0x438>
 8005438:	230d      	movs	r3, #13
 800543a:	e108      	b.n	800564e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800543c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005442:	061a      	lsls	r2, r3, #24
 8005444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005446:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	431a      	orrs	r2, r3
 800544e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005450:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	4313      	orrs	r3, r2
 8005458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800545a:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800545e:	4313      	orrs	r3, r2
 8005460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005462:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005466:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	647b      	str	r3, [r7, #68]	@ 0x44
 8005474:	e02b      	b.n	80054ce <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800547c:	891b      	ldrh	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <find_volume+0x482>
 8005482:	230d      	movs	r3, #13
 8005484:	e0e3      	b.n	800564e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800548c:	6a1a      	ldr	r2, [r3, #32]
 800548e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005490:	4413      	add	r3, r2
 8005492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005494:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005498:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800549a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d105      	bne.n	80054ae <find_volume+0x4aa>
 80054a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	e00e      	b.n	80054cc <find_volume+0x4c8>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	085a      	lsrs	r2, r3, #1
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80054cc:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80054ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054dc:	895b      	ldrh	r3, [r3, #10]
 80054de:	4619      	mov	r1, r3
 80054e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e2:	440b      	add	r3, r1
 80054e4:	3b01      	subs	r3, #1
 80054e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054e8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80054ec:	8949      	ldrh	r1, [r1, #10]
 80054ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d201      	bcs.n	80054fa <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80054f6:	230d      	movs	r3, #13
 80054f8:	e0a9      	b.n	800564e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005500:	461a      	mov	r2, r3
 8005502:	f04f 33ff 	mov.w	r3, #4294967295
 8005506:	6113      	str	r3, [r2, #16]
 8005508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005516:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800551e:	2280      	movs	r2, #128	@ 0x80
 8005520:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005522:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005526:	2b03      	cmp	r3, #3
 8005528:	d17a      	bne.n	8005620 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	b21a      	sxth	r2, r3
 8005534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800553a:	b21b      	sxth	r3, r3
 800553c:	4313      	orrs	r3, r2
 800553e:	b21b      	sxth	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d16d      	bne.n	8005620 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005546:	3301      	adds	r3, #1
 8005548:	4619      	mov	r1, r3
 800554a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800554c:	f7ff fc76 	bl	8004e3c <move_window>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d164      	bne.n	8005620 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800555c:	2200      	movs	r2, #0
 800555e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005562:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	b21a      	sxth	r2, r3
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005570:	b21b      	sxth	r3, r3
 8005572:	4313      	orrs	r3, r2
 8005574:	b21b      	sxth	r3, r3
 8005576:	4a38      	ldr	r2, [pc, #224]	@ (8005658 <find_volume+0x654>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d151      	bne.n	8005620 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800557c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557e:	78db      	ldrb	r3, [r3, #3]
 8005580:	061a      	lsls	r2, r3, #24
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	789b      	ldrb	r3, [r3, #2]
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	431a      	orrs	r2, r3
 800558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	4313      	orrs	r3, r2
 8005592:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	4313      	orrs	r3, r2
 8005598:	4a30      	ldr	r2, [pc, #192]	@ (800565c <find_volume+0x658>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d140      	bne.n	8005620 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80055a4:	061a      	lsls	r2, r3, #24
 80055a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a8:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	431a      	orrs	r2, r3
 80055b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b2:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	4313      	orrs	r3, r2
 80055ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055bc:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 80055c0:	4313      	orrs	r3, r2
 80055c2:	4a27      	ldr	r2, [pc, #156]	@ (8005660 <find_volume+0x65c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d12b      	bne.n	8005620 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 80055ce:	061a      	lsls	r2, r3, #24
 80055d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d2:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	431a      	orrs	r2, r3
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	4313      	orrs	r3, r2
 80055e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055e6:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 80055ea:	4313      	orrs	r3, r2
 80055ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055f2:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 80055fa:	061a      	lsls	r2, r3, #24
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	431a      	orrs	r2, r3
 8005606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005608:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	4313      	orrs	r3, r2
 8005610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005612:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8005616:	4313      	orrs	r3, r2
 8005618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800561a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800561e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005626:	461a      	mov	r2, r3
 8005628:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800562c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <find_volume+0x660>)
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <find_volume+0x660>)
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <find_volume+0x660>)
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005644:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005648:	f7ff fb7c 	bl	8004d44 <clear_lock>
#endif

	return FR_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3758      	adds	r7, #88	@ 0x58
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	ffffaa55 	.word	0xffffaa55
 800565c:	41615252 	.word	0x41615252
 8005660:	61417272 	.word	0x61417272
 8005664:	2000148c 	.word	0x2000148c

08005668 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800567a:	f107 0310 	add.w	r3, r7, #16
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fc0e 	bl	8004ea0 <get_ldnumber>
 8005684:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	da01      	bge.n	8005690 <f_mount+0x28>
 800568c:	230b      	movs	r3, #11
 800568e:	e02f      	b.n	80056f0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005690:	4a19      	ldr	r2, [pc, #100]	@ (80056f8 <f_mount+0x90>)
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005698:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80056a0:	69b8      	ldr	r0, [r7, #24]
 80056a2:	f7ff fb4f 	bl	8004d44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	490d      	ldr	r1, [pc, #52]	@ (80056f8 <f_mount+0x90>)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <f_mount+0x6e>
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d001      	beq.n	80056da <f_mount+0x72>
 80056d6:	2300      	movs	r3, #0
 80056d8:	e00a      	b.n	80056f0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80056da:	f107 0108 	add.w	r1, r7, #8
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	2200      	movs	r2, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fc8d 	bl	8005004 <find_volume>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20001488 	.word	0x20001488

080056fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005712:	4b1e      	ldr	r3, [pc, #120]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 8005714:	7a5b      	ldrb	r3, [r3, #9]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d831      	bhi.n	8005780 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800571c:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 800571e:	7a5b      	ldrb	r3, [r3, #9]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	4b19      	ldr	r3, [pc, #100]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 8005726:	2100      	movs	r1, #0
 8005728:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800572a:	4b18      	ldr	r3, [pc, #96]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 800572c:	7a5b      	ldrb	r3, [r3, #9]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	4a16      	ldr	r2, [pc, #88]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800573a:	4b14      	ldr	r3, [pc, #80]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 800573c:	7a5b      	ldrb	r3, [r3, #9]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	4b12      	ldr	r3, [pc, #72]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 8005744:	4413      	add	r3, r2
 8005746:	79fa      	ldrb	r2, [r7, #7]
 8005748:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800574a:	4b10      	ldr	r3, [pc, #64]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 800574c:	7a5b      	ldrb	r3, [r3, #9]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	b2d1      	uxtb	r1, r2
 8005754:	4a0d      	ldr	r2, [pc, #52]	@ (800578c <FATFS_LinkDriverEx+0x90>)
 8005756:	7251      	strb	r1, [r2, #9]
 8005758:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800575a:	7dbb      	ldrb	r3, [r7, #22]
 800575c:	3330      	adds	r3, #48	@ 0x30
 800575e:	b2da      	uxtb	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	3301      	adds	r3, #1
 8005768:	223a      	movs	r2, #58	@ 0x3a
 800576a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3302      	adds	r3, #2
 8005770:	222f      	movs	r2, #47	@ 0x2f
 8005772:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3303      	adds	r3, #3
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	200014a8 	.word	0x200014a8

08005790 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff ffac 	bl	80056fc <FATFS_LinkDriverEx>
 80057a4:	4603      	mov	r3, r0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <malloc>:
 80057b0:	4b02      	ldr	r3, [pc, #8]	@ (80057bc <malloc+0xc>)
 80057b2:	4601      	mov	r1, r0
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	f000 b825 	b.w	8005804 <_malloc_r>
 80057ba:	bf00      	nop
 80057bc:	2000002c 	.word	0x2000002c

080057c0 <sbrk_aligned>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005800 <sbrk_aligned+0x40>)
 80057c4:	460c      	mov	r4, r1
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	4605      	mov	r5, r0
 80057ca:	b911      	cbnz	r1, 80057d2 <sbrk_aligned+0x12>
 80057cc:	f000 ff4c 	bl	8006668 <_sbrk_r>
 80057d0:	6030      	str	r0, [r6, #0]
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 ff47 	bl	8006668 <_sbrk_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d103      	bne.n	80057e6 <sbrk_aligned+0x26>
 80057de:	f04f 34ff 	mov.w	r4, #4294967295
 80057e2:	4620      	mov	r0, r4
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d0f8      	beq.n	80057e2 <sbrk_aligned+0x22>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 ff38 	bl	8006668 <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d1f2      	bne.n	80057e2 <sbrk_aligned+0x22>
 80057fc:	e7ef      	b.n	80057de <sbrk_aligned+0x1e>
 80057fe:	bf00      	nop
 8005800:	200014b4 	.word	0x200014b4

08005804 <_malloc_r>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	1ccd      	adds	r5, r1, #3
 800580a:	f025 0503 	bic.w	r5, r5, #3
 800580e:	3508      	adds	r5, #8
 8005810:	2d0c      	cmp	r5, #12
 8005812:	bf38      	it	cc
 8005814:	250c      	movcc	r5, #12
 8005816:	2d00      	cmp	r5, #0
 8005818:	4606      	mov	r6, r0
 800581a:	db01      	blt.n	8005820 <_malloc_r+0x1c>
 800581c:	42a9      	cmp	r1, r5
 800581e:	d904      	bls.n	800582a <_malloc_r+0x26>
 8005820:	230c      	movs	r3, #12
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005900 <_malloc_r+0xfc>
 800582e:	f000 f869 	bl	8005904 <__malloc_lock>
 8005832:	f8d8 3000 	ldr.w	r3, [r8]
 8005836:	461c      	mov	r4, r3
 8005838:	bb44      	cbnz	r4, 800588c <_malloc_r+0x88>
 800583a:	4629      	mov	r1, r5
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff ffbf 	bl	80057c0 <sbrk_aligned>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	4604      	mov	r4, r0
 8005846:	d158      	bne.n	80058fa <_malloc_r+0xf6>
 8005848:	f8d8 4000 	ldr.w	r4, [r8]
 800584c:	4627      	mov	r7, r4
 800584e:	2f00      	cmp	r7, #0
 8005850:	d143      	bne.n	80058da <_malloc_r+0xd6>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d04b      	beq.n	80058ee <_malloc_r+0xea>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	eb04 0903 	add.w	r9, r4, r3
 8005860:	f000 ff02 	bl	8006668 <_sbrk_r>
 8005864:	4581      	cmp	r9, r0
 8005866:	d142      	bne.n	80058ee <_malloc_r+0xea>
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	4630      	mov	r0, r6
 800586c:	1a6d      	subs	r5, r5, r1
 800586e:	4629      	mov	r1, r5
 8005870:	f7ff ffa6 	bl	80057c0 <sbrk_aligned>
 8005874:	3001      	adds	r0, #1
 8005876:	d03a      	beq.n	80058ee <_malloc_r+0xea>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	442b      	add	r3, r5
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	f8d8 3000 	ldr.w	r3, [r8]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	bb62      	cbnz	r2, 80058e0 <_malloc_r+0xdc>
 8005886:	f8c8 7000 	str.w	r7, [r8]
 800588a:	e00f      	b.n	80058ac <_malloc_r+0xa8>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	1b52      	subs	r2, r2, r5
 8005890:	d420      	bmi.n	80058d4 <_malloc_r+0xd0>
 8005892:	2a0b      	cmp	r2, #11
 8005894:	d917      	bls.n	80058c6 <_malloc_r+0xc2>
 8005896:	1961      	adds	r1, r4, r5
 8005898:	42a3      	cmp	r3, r4
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	6059      	strne	r1, [r3, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	bf08      	it	eq
 80058a4:	f8c8 1000 	streq.w	r1, [r8]
 80058a8:	5162      	str	r2, [r4, r5]
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f82f 	bl	8005910 <__malloc_unlock>
 80058b2:	f104 000b 	add.w	r0, r4, #11
 80058b6:	1d23      	adds	r3, r4, #4
 80058b8:	f020 0007 	bic.w	r0, r0, #7
 80058bc:	1ac2      	subs	r2, r0, r3
 80058be:	bf1c      	itt	ne
 80058c0:	1a1b      	subne	r3, r3, r0
 80058c2:	50a3      	strne	r3, [r4, r2]
 80058c4:	e7af      	b.n	8005826 <_malloc_r+0x22>
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	bf0c      	ite	eq
 80058cc:	f8c8 2000 	streq.w	r2, [r8]
 80058d0:	605a      	strne	r2, [r3, #4]
 80058d2:	e7eb      	b.n	80058ac <_malloc_r+0xa8>
 80058d4:	4623      	mov	r3, r4
 80058d6:	6864      	ldr	r4, [r4, #4]
 80058d8:	e7ae      	b.n	8005838 <_malloc_r+0x34>
 80058da:	463c      	mov	r4, r7
 80058dc:	687f      	ldr	r7, [r7, #4]
 80058de:	e7b6      	b.n	800584e <_malloc_r+0x4a>
 80058e0:	461a      	mov	r2, r3
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d1fb      	bne.n	80058e0 <_malloc_r+0xdc>
 80058e8:	2300      	movs	r3, #0
 80058ea:	6053      	str	r3, [r2, #4]
 80058ec:	e7de      	b.n	80058ac <_malloc_r+0xa8>
 80058ee:	230c      	movs	r3, #12
 80058f0:	4630      	mov	r0, r6
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f000 f80c 	bl	8005910 <__malloc_unlock>
 80058f8:	e794      	b.n	8005824 <_malloc_r+0x20>
 80058fa:	6005      	str	r5, [r0, #0]
 80058fc:	e7d6      	b.n	80058ac <_malloc_r+0xa8>
 80058fe:	bf00      	nop
 8005900:	200014b8 	.word	0x200014b8

08005904 <__malloc_lock>:
 8005904:	4801      	ldr	r0, [pc, #4]	@ (800590c <__malloc_lock+0x8>)
 8005906:	f000 befc 	b.w	8006702 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	200015fc 	.word	0x200015fc

08005910 <__malloc_unlock>:
 8005910:	4801      	ldr	r0, [pc, #4]	@ (8005918 <__malloc_unlock+0x8>)
 8005912:	f000 bef7 	b.w	8006704 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	200015fc 	.word	0x200015fc

0800591c <__cvt>:
 800591c:	2b00      	cmp	r3, #0
 800591e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005922:	461d      	mov	r5, r3
 8005924:	bfbb      	ittet	lt
 8005926:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800592a:	461d      	movlt	r5, r3
 800592c:	2300      	movge	r3, #0
 800592e:	232d      	movlt	r3, #45	@ 0x2d
 8005930:	b088      	sub	sp, #32
 8005932:	4614      	mov	r4, r2
 8005934:	bfb8      	it	lt
 8005936:	4614      	movlt	r4, r2
 8005938:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800593a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800593c:	7013      	strb	r3, [r2, #0]
 800593e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005940:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005944:	f023 0820 	bic.w	r8, r3, #32
 8005948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800594c:	d005      	beq.n	800595a <__cvt+0x3e>
 800594e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005952:	d100      	bne.n	8005956 <__cvt+0x3a>
 8005954:	3601      	adds	r6, #1
 8005956:	2302      	movs	r3, #2
 8005958:	e000      	b.n	800595c <__cvt+0x40>
 800595a:	2303      	movs	r3, #3
 800595c:	aa07      	add	r2, sp, #28
 800595e:	9204      	str	r2, [sp, #16]
 8005960:	aa06      	add	r2, sp, #24
 8005962:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005966:	e9cd 3600 	strd	r3, r6, [sp]
 800596a:	4622      	mov	r2, r4
 800596c:	462b      	mov	r3, r5
 800596e:	f000 ff8f 	bl	8006890 <_dtoa_r>
 8005972:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005976:	4607      	mov	r7, r0
 8005978:	d119      	bne.n	80059ae <__cvt+0x92>
 800597a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800597c:	07db      	lsls	r3, r3, #31
 800597e:	d50e      	bpl.n	800599e <__cvt+0x82>
 8005980:	eb00 0906 	add.w	r9, r0, r6
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	4620      	mov	r0, r4
 800598a:	4629      	mov	r1, r5
 800598c:	f7fb f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8005990:	b108      	cbz	r0, 8005996 <__cvt+0x7a>
 8005992:	f8cd 901c 	str.w	r9, [sp, #28]
 8005996:	2230      	movs	r2, #48	@ 0x30
 8005998:	9b07      	ldr	r3, [sp, #28]
 800599a:	454b      	cmp	r3, r9
 800599c:	d31e      	bcc.n	80059dc <__cvt+0xc0>
 800599e:	4638      	mov	r0, r7
 80059a0:	9b07      	ldr	r3, [sp, #28]
 80059a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059a4:	1bdb      	subs	r3, r3, r7
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	b008      	add	sp, #32
 80059aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059b2:	eb00 0906 	add.w	r9, r0, r6
 80059b6:	d1e5      	bne.n	8005984 <__cvt+0x68>
 80059b8:	7803      	ldrb	r3, [r0, #0]
 80059ba:	2b30      	cmp	r3, #48	@ 0x30
 80059bc:	d10a      	bne.n	80059d4 <__cvt+0xb8>
 80059be:	2200      	movs	r2, #0
 80059c0:	2300      	movs	r3, #0
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7fa ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80059ca:	b918      	cbnz	r0, 80059d4 <__cvt+0xb8>
 80059cc:	f1c6 0601 	rsb	r6, r6, #1
 80059d0:	f8ca 6000 	str.w	r6, [sl]
 80059d4:	f8da 3000 	ldr.w	r3, [sl]
 80059d8:	4499      	add	r9, r3
 80059da:	e7d3      	b.n	8005984 <__cvt+0x68>
 80059dc:	1c59      	adds	r1, r3, #1
 80059de:	9107      	str	r1, [sp, #28]
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e7d9      	b.n	8005998 <__cvt+0x7c>

080059e4 <__exponent>:
 80059e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e6:	2900      	cmp	r1, #0
 80059e8:	bfb6      	itet	lt
 80059ea:	232d      	movlt	r3, #45	@ 0x2d
 80059ec:	232b      	movge	r3, #43	@ 0x2b
 80059ee:	4249      	neglt	r1, r1
 80059f0:	2909      	cmp	r1, #9
 80059f2:	7002      	strb	r2, [r0, #0]
 80059f4:	7043      	strb	r3, [r0, #1]
 80059f6:	dd29      	ble.n	8005a4c <__exponent+0x68>
 80059f8:	f10d 0307 	add.w	r3, sp, #7
 80059fc:	461d      	mov	r5, r3
 80059fe:	270a      	movs	r7, #10
 8005a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a04:	461a      	mov	r2, r3
 8005a06:	fb07 1416 	mls	r4, r7, r6, r1
 8005a0a:	3430      	adds	r4, #48	@ 0x30
 8005a0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a10:	460c      	mov	r4, r1
 8005a12:	2c63      	cmp	r4, #99	@ 0x63
 8005a14:	4631      	mov	r1, r6
 8005a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a1a:	dcf1      	bgt.n	8005a00 <__exponent+0x1c>
 8005a1c:	3130      	adds	r1, #48	@ 0x30
 8005a1e:	1e94      	subs	r4, r2, #2
 8005a20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a24:	4623      	mov	r3, r4
 8005a26:	1c41      	adds	r1, r0, #1
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	d30a      	bcc.n	8005a42 <__exponent+0x5e>
 8005a2c:	f10d 0309 	add.w	r3, sp, #9
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	42ac      	cmp	r4, r5
 8005a34:	bf88      	it	hi
 8005a36:	2300      	movhi	r3, #0
 8005a38:	3302      	adds	r3, #2
 8005a3a:	4403      	add	r3, r0
 8005a3c:	1a18      	subs	r0, r3, r0
 8005a3e:	b003      	add	sp, #12
 8005a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a4a:	e7ed      	b.n	8005a28 <__exponent+0x44>
 8005a4c:	2330      	movs	r3, #48	@ 0x30
 8005a4e:	3130      	adds	r1, #48	@ 0x30
 8005a50:	7083      	strb	r3, [r0, #2]
 8005a52:	70c1      	strb	r1, [r0, #3]
 8005a54:	1d03      	adds	r3, r0, #4
 8005a56:	e7f1      	b.n	8005a3c <__exponent+0x58>

08005a58 <_printf_float>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	b091      	sub	sp, #68	@ 0x44
 8005a5e:	460c      	mov	r4, r1
 8005a60:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005a64:	4616      	mov	r6, r2
 8005a66:	461f      	mov	r7, r3
 8005a68:	4605      	mov	r5, r0
 8005a6a:	f000 fdc5 	bl	80065f8 <_localeconv_r>
 8005a6e:	6803      	ldr	r3, [r0, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	9308      	str	r3, [sp, #32]
 8005a74:	f7fa fb6c 	bl	8000150 <strlen>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a80:	9009      	str	r0, [sp, #36]	@ 0x24
 8005a82:	3307      	adds	r3, #7
 8005a84:	f023 0307 	bic.w	r3, r3, #7
 8005a88:	f103 0208 	add.w	r2, r3, #8
 8005a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a90:	f8d4 b000 	ldr.w	fp, [r4]
 8005a94:	f8c8 2000 	str.w	r2, [r8]
 8005a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aa2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d24 <_printf_float+0x2cc>)
 8005ab4:	f7fa ffaa 	bl	8000a0c <__aeabi_dcmpun>
 8005ab8:	bb70      	cbnz	r0, 8005b18 <_printf_float+0xc0>
 8005aba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005abe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac2:	4b98      	ldr	r3, [pc, #608]	@ (8005d24 <_printf_float+0x2cc>)
 8005ac4:	f7fa ff84 	bl	80009d0 <__aeabi_dcmple>
 8005ac8:	bb30      	cbnz	r0, 8005b18 <_printf_float+0xc0>
 8005aca:	2200      	movs	r2, #0
 8005acc:	2300      	movs	r3, #0
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fa ff73 	bl	80009bc <__aeabi_dcmplt>
 8005ad6:	b110      	cbz	r0, 8005ade <_printf_float+0x86>
 8005ad8:	232d      	movs	r3, #45	@ 0x2d
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ade:	4a92      	ldr	r2, [pc, #584]	@ (8005d28 <_printf_float+0x2d0>)
 8005ae0:	4b92      	ldr	r3, [pc, #584]	@ (8005d2c <_printf_float+0x2d4>)
 8005ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ae6:	bf94      	ite	ls
 8005ae8:	4690      	movls	r8, r2
 8005aea:	4698      	movhi	r8, r3
 8005aec:	2303      	movs	r3, #3
 8005aee:	f04f 0900 	mov.w	r9, #0
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	f02b 0304 	bic.w	r3, fp, #4
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	4633      	mov	r3, r6
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	9700      	str	r7, [sp, #0]
 8005b02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b04:	f000 f9d4 	bl	8005eb0 <_printf_common>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f040 8090 	bne.w	8005c2e <_printf_float+0x1d6>
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	b011      	add	sp, #68	@ 0x44
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fa ff74 	bl	8000a0c <__aeabi_dcmpun>
 8005b24:	b148      	cbz	r0, 8005b3a <_printf_float+0xe2>
 8005b26:	464b      	mov	r3, r9
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bfb8      	it	lt
 8005b2c:	232d      	movlt	r3, #45	@ 0x2d
 8005b2e:	4a80      	ldr	r2, [pc, #512]	@ (8005d30 <_printf_float+0x2d8>)
 8005b30:	bfb8      	it	lt
 8005b32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b36:	4b7f      	ldr	r3, [pc, #508]	@ (8005d34 <_printf_float+0x2dc>)
 8005b38:	e7d3      	b.n	8005ae2 <_printf_float+0x8a>
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	d13f      	bne.n	8005bc4 <_printf_float+0x16c>
 8005b44:	2306      	movs	r3, #6
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	9206      	str	r2, [sp, #24]
 8005b52:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b54:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005b58:	aa0d      	add	r2, sp, #52	@ 0x34
 8005b5a:	9203      	str	r2, [sp, #12]
 8005b5c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005b60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	4642      	mov	r2, r8
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005b70:	f7ff fed4 	bl	800591c <__cvt>
 8005b74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b76:	4680      	mov	r8, r0
 8005b78:	2947      	cmp	r1, #71	@ 0x47
 8005b7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005b7c:	d128      	bne.n	8005bd0 <_printf_float+0x178>
 8005b7e:	1cc8      	adds	r0, r1, #3
 8005b80:	db02      	blt.n	8005b88 <_printf_float+0x130>
 8005b82:	6863      	ldr	r3, [r4, #4]
 8005b84:	4299      	cmp	r1, r3
 8005b86:	dd40      	ble.n	8005c0a <_printf_float+0x1b2>
 8005b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8005b90:	4652      	mov	r2, sl
 8005b92:	3901      	subs	r1, #1
 8005b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b98:	910d      	str	r1, [sp, #52]	@ 0x34
 8005b9a:	f7ff ff23 	bl	80059e4 <__exponent>
 8005b9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ba0:	4681      	mov	r9, r0
 8005ba2:	1813      	adds	r3, r2, r0
 8005ba4:	2a01      	cmp	r2, #1
 8005ba6:	6123      	str	r3, [r4, #16]
 8005ba8:	dc02      	bgt.n	8005bb0 <_printf_float+0x158>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	07d2      	lsls	r2, r2, #31
 8005bae:	d501      	bpl.n	8005bb4 <_printf_float+0x15c>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d09e      	beq.n	8005afa <_printf_float+0xa2>
 8005bbc:	232d      	movs	r3, #45	@ 0x2d
 8005bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bc2:	e79a      	b.n	8005afa <_printf_float+0xa2>
 8005bc4:	2947      	cmp	r1, #71	@ 0x47
 8005bc6:	d1bf      	bne.n	8005b48 <_printf_float+0xf0>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1bd      	bne.n	8005b48 <_printf_float+0xf0>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e7ba      	b.n	8005b46 <_printf_float+0xee>
 8005bd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bd4:	d9dc      	bls.n	8005b90 <_printf_float+0x138>
 8005bd6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005bda:	d118      	bne.n	8005c0e <_printf_float+0x1b6>
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	6863      	ldr	r3, [r4, #4]
 8005be0:	dd0b      	ble.n	8005bfa <_printf_float+0x1a2>
 8005be2:	6121      	str	r1, [r4, #16]
 8005be4:	b913      	cbnz	r3, 8005bec <_printf_float+0x194>
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	07d0      	lsls	r0, r2, #31
 8005bea:	d502      	bpl.n	8005bf2 <_printf_float+0x19a>
 8005bec:	3301      	adds	r3, #1
 8005bee:	440b      	add	r3, r1
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	f04f 0900 	mov.w	r9, #0
 8005bf6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005bf8:	e7dc      	b.n	8005bb4 <_printf_float+0x15c>
 8005bfa:	b913      	cbnz	r3, 8005c02 <_printf_float+0x1aa>
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	07d2      	lsls	r2, r2, #31
 8005c00:	d501      	bpl.n	8005c06 <_printf_float+0x1ae>
 8005c02:	3302      	adds	r3, #2
 8005c04:	e7f4      	b.n	8005bf0 <_printf_float+0x198>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7f2      	b.n	8005bf0 <_printf_float+0x198>
 8005c0a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c10:	4299      	cmp	r1, r3
 8005c12:	db05      	blt.n	8005c20 <_printf_float+0x1c8>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	6121      	str	r1, [r4, #16]
 8005c18:	07d8      	lsls	r0, r3, #31
 8005c1a:	d5ea      	bpl.n	8005bf2 <_printf_float+0x19a>
 8005c1c:	1c4b      	adds	r3, r1, #1
 8005c1e:	e7e7      	b.n	8005bf0 <_printf_float+0x198>
 8005c20:	2900      	cmp	r1, #0
 8005c22:	bfcc      	ite	gt
 8005c24:	2201      	movgt	r2, #1
 8005c26:	f1c1 0202 	rsble	r2, r1, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	e7e0      	b.n	8005bf0 <_printf_float+0x198>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	055a      	lsls	r2, r3, #21
 8005c32:	d407      	bmi.n	8005c44 <_printf_float+0x1ec>
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	4642      	mov	r2, r8
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d12b      	bne.n	8005c9a <_printf_float+0x242>
 8005c42:	e764      	b.n	8005b0e <_printf_float+0xb6>
 8005c44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c48:	f240 80dc 	bls.w	8005e04 <_printf_float+0x3ac>
 8005c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c50:	2200      	movs	r2, #0
 8005c52:	2300      	movs	r3, #0
 8005c54:	f7fa fea8 	bl	80009a8 <__aeabi_dcmpeq>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d033      	beq.n	8005cc4 <_printf_float+0x26c>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	4a35      	ldr	r2, [pc, #212]	@ (8005d38 <_printf_float+0x2e0>)
 8005c64:	47b8      	blx	r7
 8005c66:	3001      	adds	r0, #1
 8005c68:	f43f af51 	beq.w	8005b0e <_printf_float+0xb6>
 8005c6c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005c70:	4543      	cmp	r3, r8
 8005c72:	db02      	blt.n	8005c7a <_printf_float+0x222>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	07d8      	lsls	r0, r3, #31
 8005c78:	d50f      	bpl.n	8005c9a <_printf_float+0x242>
 8005c7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	f43f af42 	beq.w	8005b0e <_printf_float+0xb6>
 8005c8a:	f04f 0900 	mov.w	r9, #0
 8005c8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c92:	f104 0a1a 	add.w	sl, r4, #26
 8005c96:	45c8      	cmp	r8, r9
 8005c98:	dc09      	bgt.n	8005cae <_printf_float+0x256>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	079b      	lsls	r3, r3, #30
 8005c9e:	f100 8102 	bmi.w	8005ea6 <_printf_float+0x44e>
 8005ca2:	68e0      	ldr	r0, [r4, #12]
 8005ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ca6:	4298      	cmp	r0, r3
 8005ca8:	bfb8      	it	lt
 8005caa:	4618      	movlt	r0, r3
 8005cac:	e731      	b.n	8005b12 <_printf_float+0xba>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f af28 	beq.w	8005b0e <_printf_float+0xb6>
 8005cbe:	f109 0901 	add.w	r9, r9, #1
 8005cc2:	e7e8      	b.n	8005c96 <_printf_float+0x23e>
 8005cc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	dc38      	bgt.n	8005d3c <_printf_float+0x2e4>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	4a19      	ldr	r2, [pc, #100]	@ (8005d38 <_printf_float+0x2e0>)
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f af1a 	beq.w	8005b0e <_printf_float+0xb6>
 8005cda:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005cde:	ea59 0303 	orrs.w	r3, r9, r3
 8005ce2:	d102      	bne.n	8005cea <_printf_float+0x292>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	07d9      	lsls	r1, r3, #31
 8005ce8:	d5d7      	bpl.n	8005c9a <_printf_float+0x242>
 8005cea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f af0a 	beq.w	8005b0e <_printf_float+0xb6>
 8005cfa:	f04f 0a00 	mov.w	sl, #0
 8005cfe:	f104 0b1a 	add.w	fp, r4, #26
 8005d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d04:	425b      	negs	r3, r3
 8005d06:	4553      	cmp	r3, sl
 8005d08:	dc01      	bgt.n	8005d0e <_printf_float+0x2b6>
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	e793      	b.n	8005c36 <_printf_float+0x1de>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	465a      	mov	r2, fp
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f aef8 	beq.w	8005b0e <_printf_float+0xb6>
 8005d1e:	f10a 0a01 	add.w	sl, sl, #1
 8005d22:	e7ee      	b.n	8005d02 <_printf_float+0x2aa>
 8005d24:	7fefffff 	.word	0x7fefffff
 8005d28:	080087da 	.word	0x080087da
 8005d2c:	080087de 	.word	0x080087de
 8005d30:	080087e2 	.word	0x080087e2
 8005d34:	080087e6 	.word	0x080087e6
 8005d38:	080087ea 	.word	0x080087ea
 8005d3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d3e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d42:	4553      	cmp	r3, sl
 8005d44:	bfa8      	it	ge
 8005d46:	4653      	movge	r3, sl
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	4699      	mov	r9, r3
 8005d4c:	dc36      	bgt.n	8005dbc <_printf_float+0x364>
 8005d4e:	f04f 0b00 	mov.w	fp, #0
 8005d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d56:	f104 021a 	add.w	r2, r4, #26
 8005d5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d5e:	eba3 0309 	sub.w	r3, r3, r9
 8005d62:	455b      	cmp	r3, fp
 8005d64:	dc31      	bgt.n	8005dca <_printf_float+0x372>
 8005d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d68:	459a      	cmp	sl, r3
 8005d6a:	dc3a      	bgt.n	8005de2 <_printf_float+0x38a>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	07da      	lsls	r2, r3, #31
 8005d70:	d437      	bmi.n	8005de2 <_printf_float+0x38a>
 8005d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d74:	ebaa 0903 	sub.w	r9, sl, r3
 8005d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d7a:	ebaa 0303 	sub.w	r3, sl, r3
 8005d7e:	4599      	cmp	r9, r3
 8005d80:	bfa8      	it	ge
 8005d82:	4699      	movge	r9, r3
 8005d84:	f1b9 0f00 	cmp.w	r9, #0
 8005d88:	dc33      	bgt.n	8005df2 <_printf_float+0x39a>
 8005d8a:	f04f 0800 	mov.w	r8, #0
 8005d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d92:	f104 0b1a 	add.w	fp, r4, #26
 8005d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d98:	ebaa 0303 	sub.w	r3, sl, r3
 8005d9c:	eba3 0309 	sub.w	r3, r3, r9
 8005da0:	4543      	cmp	r3, r8
 8005da2:	f77f af7a 	ble.w	8005c9a <_printf_float+0x242>
 8005da6:	2301      	movs	r3, #1
 8005da8:	465a      	mov	r2, fp
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	f43f aeac 	beq.w	8005b0e <_printf_float+0xb6>
 8005db6:	f108 0801 	add.w	r8, r8, #1
 8005dba:	e7ec      	b.n	8005d96 <_printf_float+0x33e>
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d1c2      	bne.n	8005d4e <_printf_float+0x2f6>
 8005dc8:	e6a1      	b.n	8005b0e <_printf_float+0xb6>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	920a      	str	r2, [sp, #40]	@ 0x28
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	f43f ae9a 	beq.w	8005b0e <_printf_float+0xb6>
 8005dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ddc:	f10b 0b01 	add.w	fp, fp, #1
 8005de0:	e7bb      	b.n	8005d5a <_printf_float+0x302>
 8005de2:	4631      	mov	r1, r6
 8005de4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	d1c0      	bne.n	8005d72 <_printf_float+0x31a>
 8005df0:	e68d      	b.n	8005b0e <_printf_float+0xb6>
 8005df2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005df4:	464b      	mov	r3, r9
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	4442      	add	r2, r8
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d1c3      	bne.n	8005d8a <_printf_float+0x332>
 8005e02:	e684      	b.n	8005b0e <_printf_float+0xb6>
 8005e04:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e08:	f1ba 0f01 	cmp.w	sl, #1
 8005e0c:	dc01      	bgt.n	8005e12 <_printf_float+0x3ba>
 8005e0e:	07db      	lsls	r3, r3, #31
 8005e10:	d536      	bpl.n	8005e80 <_printf_float+0x428>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4642      	mov	r2, r8
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f43f ae76 	beq.w	8005b0e <_printf_float+0xb6>
 8005e22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f43f ae6e 	beq.w	8005b0e <_printf_float+0xb6>
 8005e32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e36:	2200      	movs	r2, #0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e3e:	f7fa fdb3 	bl	80009a8 <__aeabi_dcmpeq>
 8005e42:	b9c0      	cbnz	r0, 8005e76 <_printf_float+0x41e>
 8005e44:	4653      	mov	r3, sl
 8005e46:	f108 0201 	add.w	r2, r8, #1
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	d10c      	bne.n	8005e6e <_printf_float+0x416>
 8005e54:	e65b      	b.n	8005b0e <_printf_float+0xb6>
 8005e56:	2301      	movs	r3, #1
 8005e58:	465a      	mov	r2, fp
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f ae54 	beq.w	8005b0e <_printf_float+0xb6>
 8005e66:	f108 0801 	add.w	r8, r8, #1
 8005e6a:	45d0      	cmp	r8, sl
 8005e6c:	dbf3      	blt.n	8005e56 <_printf_float+0x3fe>
 8005e6e:	464b      	mov	r3, r9
 8005e70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e74:	e6e0      	b.n	8005c38 <_printf_float+0x1e0>
 8005e76:	f04f 0800 	mov.w	r8, #0
 8005e7a:	f104 0b1a 	add.w	fp, r4, #26
 8005e7e:	e7f4      	b.n	8005e6a <_printf_float+0x412>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4642      	mov	r2, r8
 8005e84:	e7e1      	b.n	8005e4a <_printf_float+0x3f2>
 8005e86:	2301      	movs	r3, #1
 8005e88:	464a      	mov	r2, r9
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	f43f ae3c 	beq.w	8005b0e <_printf_float+0xb6>
 8005e96:	f108 0801 	add.w	r8, r8, #1
 8005e9a:	68e3      	ldr	r3, [r4, #12]
 8005e9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005e9e:	1a5b      	subs	r3, r3, r1
 8005ea0:	4543      	cmp	r3, r8
 8005ea2:	dcf0      	bgt.n	8005e86 <_printf_float+0x42e>
 8005ea4:	e6fd      	b.n	8005ca2 <_printf_float+0x24a>
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	f104 0919 	add.w	r9, r4, #25
 8005eae:	e7f4      	b.n	8005e9a <_printf_float+0x442>

08005eb0 <_printf_common>:
 8005eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	4698      	mov	r8, r3
 8005eb8:	688a      	ldr	r2, [r1, #8]
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	bfb8      	it	lt
 8005ec2:	4613      	movlt	r3, r2
 8005ec4:	6033      	str	r3, [r6, #0]
 8005ec6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005eca:	460c      	mov	r4, r1
 8005ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ed0:	b10a      	cbz	r2, 8005ed6 <_printf_common+0x26>
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	6033      	str	r3, [r6, #0]
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	0699      	lsls	r1, r3, #26
 8005eda:	bf42      	ittt	mi
 8005edc:	6833      	ldrmi	r3, [r6, #0]
 8005ede:	3302      	addmi	r3, #2
 8005ee0:	6033      	strmi	r3, [r6, #0]
 8005ee2:	6825      	ldr	r5, [r4, #0]
 8005ee4:	f015 0506 	ands.w	r5, r5, #6
 8005ee8:	d106      	bne.n	8005ef8 <_printf_common+0x48>
 8005eea:	f104 0a19 	add.w	sl, r4, #25
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	6832      	ldr	r2, [r6, #0]
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dc2b      	bgt.n	8005f50 <_printf_common+0xa0>
 8005ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	3b00      	subs	r3, #0
 8005f00:	bf18      	it	ne
 8005f02:	2301      	movne	r3, #1
 8005f04:	0692      	lsls	r2, r2, #26
 8005f06:	d430      	bmi.n	8005f6a <_printf_common+0xba>
 8005f08:	4641      	mov	r1, r8
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f10:	47c8      	blx	r9
 8005f12:	3001      	adds	r0, #1
 8005f14:	d023      	beq.n	8005f5e <_printf_common+0xae>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	6922      	ldr	r2, [r4, #16]
 8005f1a:	f003 0306 	and.w	r3, r3, #6
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	bf14      	ite	ne
 8005f22:	2500      	movne	r5, #0
 8005f24:	6833      	ldreq	r3, [r6, #0]
 8005f26:	f04f 0600 	mov.w	r6, #0
 8005f2a:	bf08      	it	eq
 8005f2c:	68e5      	ldreq	r5, [r4, #12]
 8005f2e:	f104 041a 	add.w	r4, r4, #26
 8005f32:	bf08      	it	eq
 8005f34:	1aed      	subeq	r5, r5, r3
 8005f36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f3a:	bf08      	it	eq
 8005f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bfc4      	itt	gt
 8005f44:	1a9b      	subgt	r3, r3, r2
 8005f46:	18ed      	addgt	r5, r5, r3
 8005f48:	42b5      	cmp	r5, r6
 8005f4a:	d11a      	bne.n	8005f82 <_printf_common+0xd2>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e008      	b.n	8005f62 <_printf_common+0xb2>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4652      	mov	r2, sl
 8005f54:	4641      	mov	r1, r8
 8005f56:	4638      	mov	r0, r7
 8005f58:	47c8      	blx	r9
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d103      	bne.n	8005f66 <_printf_common+0xb6>
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	3501      	adds	r5, #1
 8005f68:	e7c1      	b.n	8005eee <_printf_common+0x3e>
 8005f6a:	2030      	movs	r0, #48	@ 0x30
 8005f6c:	18e1      	adds	r1, r4, r3
 8005f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f78:	4422      	add	r2, r4
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f80:	e7c2      	b.n	8005f08 <_printf_common+0x58>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4622      	mov	r2, r4
 8005f86:	4641      	mov	r1, r8
 8005f88:	4638      	mov	r0, r7
 8005f8a:	47c8      	blx	r9
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d0e6      	beq.n	8005f5e <_printf_common+0xae>
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7d9      	b.n	8005f48 <_printf_common+0x98>

08005f94 <_printf_i>:
 8005f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	7e0f      	ldrb	r7, [r1, #24]
 8005f9a:	4691      	mov	r9, r2
 8005f9c:	2f78      	cmp	r7, #120	@ 0x78
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	469a      	mov	sl, r3
 8005fa4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005faa:	d807      	bhi.n	8005fbc <_printf_i+0x28>
 8005fac:	2f62      	cmp	r7, #98	@ 0x62
 8005fae:	d80a      	bhi.n	8005fc6 <_printf_i+0x32>
 8005fb0:	2f00      	cmp	r7, #0
 8005fb2:	f000 80d3 	beq.w	800615c <_printf_i+0x1c8>
 8005fb6:	2f58      	cmp	r7, #88	@ 0x58
 8005fb8:	f000 80ba 	beq.w	8006130 <_printf_i+0x19c>
 8005fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fc4:	e03a      	b.n	800603c <_printf_i+0xa8>
 8005fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fca:	2b15      	cmp	r3, #21
 8005fcc:	d8f6      	bhi.n	8005fbc <_printf_i+0x28>
 8005fce:	a101      	add	r1, pc, #4	@ (adr r1, 8005fd4 <_printf_i+0x40>)
 8005fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fd4:	0800602d 	.word	0x0800602d
 8005fd8:	08006041 	.word	0x08006041
 8005fdc:	08005fbd 	.word	0x08005fbd
 8005fe0:	08005fbd 	.word	0x08005fbd
 8005fe4:	08005fbd 	.word	0x08005fbd
 8005fe8:	08005fbd 	.word	0x08005fbd
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08005fbd 	.word	0x08005fbd
 8005ff4:	08005fbd 	.word	0x08005fbd
 8005ff8:	08005fbd 	.word	0x08005fbd
 8005ffc:	08005fbd 	.word	0x08005fbd
 8006000:	08006143 	.word	0x08006143
 8006004:	0800606b 	.word	0x0800606b
 8006008:	080060fd 	.word	0x080060fd
 800600c:	08005fbd 	.word	0x08005fbd
 8006010:	08005fbd 	.word	0x08005fbd
 8006014:	08006165 	.word	0x08006165
 8006018:	08005fbd 	.word	0x08005fbd
 800601c:	0800606b 	.word	0x0800606b
 8006020:	08005fbd 	.word	0x08005fbd
 8006024:	08005fbd 	.word	0x08005fbd
 8006028:	08006105 	.word	0x08006105
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	1d1a      	adds	r2, r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6032      	str	r2, [r6, #0]
 8006034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800603c:	2301      	movs	r3, #1
 800603e:	e09e      	b.n	800617e <_printf_i+0x1ea>
 8006040:	6833      	ldr	r3, [r6, #0]
 8006042:	6820      	ldr	r0, [r4, #0]
 8006044:	1d19      	adds	r1, r3, #4
 8006046:	6031      	str	r1, [r6, #0]
 8006048:	0606      	lsls	r6, r0, #24
 800604a:	d501      	bpl.n	8006050 <_printf_i+0xbc>
 800604c:	681d      	ldr	r5, [r3, #0]
 800604e:	e003      	b.n	8006058 <_printf_i+0xc4>
 8006050:	0645      	lsls	r5, r0, #25
 8006052:	d5fb      	bpl.n	800604c <_printf_i+0xb8>
 8006054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006058:	2d00      	cmp	r5, #0
 800605a:	da03      	bge.n	8006064 <_printf_i+0xd0>
 800605c:	232d      	movs	r3, #45	@ 0x2d
 800605e:	426d      	negs	r5, r5
 8006060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006064:	230a      	movs	r3, #10
 8006066:	4859      	ldr	r0, [pc, #356]	@ (80061cc <_printf_i+0x238>)
 8006068:	e011      	b.n	800608e <_printf_i+0xfa>
 800606a:	6821      	ldr	r1, [r4, #0]
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	0608      	lsls	r0, r1, #24
 8006070:	f853 5b04 	ldr.w	r5, [r3], #4
 8006074:	d402      	bmi.n	800607c <_printf_i+0xe8>
 8006076:	0649      	lsls	r1, r1, #25
 8006078:	bf48      	it	mi
 800607a:	b2ad      	uxthmi	r5, r5
 800607c:	2f6f      	cmp	r7, #111	@ 0x6f
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	bf14      	ite	ne
 8006082:	230a      	movne	r3, #10
 8006084:	2308      	moveq	r3, #8
 8006086:	4851      	ldr	r0, [pc, #324]	@ (80061cc <_printf_i+0x238>)
 8006088:	2100      	movs	r1, #0
 800608a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800608e:	6866      	ldr	r6, [r4, #4]
 8006090:	2e00      	cmp	r6, #0
 8006092:	bfa8      	it	ge
 8006094:	6821      	ldrge	r1, [r4, #0]
 8006096:	60a6      	str	r6, [r4, #8]
 8006098:	bfa4      	itt	ge
 800609a:	f021 0104 	bicge.w	r1, r1, #4
 800609e:	6021      	strge	r1, [r4, #0]
 80060a0:	b90d      	cbnz	r5, 80060a6 <_printf_i+0x112>
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d04b      	beq.n	800613e <_printf_i+0x1aa>
 80060a6:	4616      	mov	r6, r2
 80060a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80060ac:	fb03 5711 	mls	r7, r3, r1, r5
 80060b0:	5dc7      	ldrb	r7, [r0, r7]
 80060b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060b6:	462f      	mov	r7, r5
 80060b8:	42bb      	cmp	r3, r7
 80060ba:	460d      	mov	r5, r1
 80060bc:	d9f4      	bls.n	80060a8 <_printf_i+0x114>
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d10b      	bne.n	80060da <_printf_i+0x146>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	07df      	lsls	r7, r3, #31
 80060c6:	d508      	bpl.n	80060da <_printf_i+0x146>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	6861      	ldr	r1, [r4, #4]
 80060cc:	4299      	cmp	r1, r3
 80060ce:	bfde      	ittt	le
 80060d0:	2330      	movle	r3, #48	@ 0x30
 80060d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060da:	1b92      	subs	r2, r2, r6
 80060dc:	6122      	str	r2, [r4, #16]
 80060de:	464b      	mov	r3, r9
 80060e0:	4621      	mov	r1, r4
 80060e2:	4640      	mov	r0, r8
 80060e4:	f8cd a000 	str.w	sl, [sp]
 80060e8:	aa03      	add	r2, sp, #12
 80060ea:	f7ff fee1 	bl	8005eb0 <_printf_common>
 80060ee:	3001      	adds	r0, #1
 80060f0:	d14a      	bne.n	8006188 <_printf_i+0x1f4>
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295
 80060f6:	b004      	add	sp, #16
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	f043 0320 	orr.w	r3, r3, #32
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	2778      	movs	r7, #120	@ 0x78
 8006106:	4832      	ldr	r0, [pc, #200]	@ (80061d0 <_printf_i+0x23c>)
 8006108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	6831      	ldr	r1, [r6, #0]
 8006110:	061f      	lsls	r7, r3, #24
 8006112:	f851 5b04 	ldr.w	r5, [r1], #4
 8006116:	d402      	bmi.n	800611e <_printf_i+0x18a>
 8006118:	065f      	lsls	r7, r3, #25
 800611a:	bf48      	it	mi
 800611c:	b2ad      	uxthmi	r5, r5
 800611e:	6031      	str	r1, [r6, #0]
 8006120:	07d9      	lsls	r1, r3, #31
 8006122:	bf44      	itt	mi
 8006124:	f043 0320 	orrmi.w	r3, r3, #32
 8006128:	6023      	strmi	r3, [r4, #0]
 800612a:	b11d      	cbz	r5, 8006134 <_printf_i+0x1a0>
 800612c:	2310      	movs	r3, #16
 800612e:	e7ab      	b.n	8006088 <_printf_i+0xf4>
 8006130:	4826      	ldr	r0, [pc, #152]	@ (80061cc <_printf_i+0x238>)
 8006132:	e7e9      	b.n	8006108 <_printf_i+0x174>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	f023 0320 	bic.w	r3, r3, #32
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	e7f6      	b.n	800612c <_printf_i+0x198>
 800613e:	4616      	mov	r6, r2
 8006140:	e7bd      	b.n	80060be <_printf_i+0x12a>
 8006142:	6833      	ldr	r3, [r6, #0]
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	1d18      	adds	r0, r3, #4
 8006148:	6961      	ldr	r1, [r4, #20]
 800614a:	6030      	str	r0, [r6, #0]
 800614c:	062e      	lsls	r6, r5, #24
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	d501      	bpl.n	8006156 <_printf_i+0x1c2>
 8006152:	6019      	str	r1, [r3, #0]
 8006154:	e002      	b.n	800615c <_printf_i+0x1c8>
 8006156:	0668      	lsls	r0, r5, #25
 8006158:	d5fb      	bpl.n	8006152 <_printf_i+0x1be>
 800615a:	8019      	strh	r1, [r3, #0]
 800615c:	2300      	movs	r3, #0
 800615e:	4616      	mov	r6, r2
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	e7bc      	b.n	80060de <_printf_i+0x14a>
 8006164:	6833      	ldr	r3, [r6, #0]
 8006166:	2100      	movs	r1, #0
 8006168:	1d1a      	adds	r2, r3, #4
 800616a:	6032      	str	r2, [r6, #0]
 800616c:	681e      	ldr	r6, [r3, #0]
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	4630      	mov	r0, r6
 8006172:	f000 fac8 	bl	8006706 <memchr>
 8006176:	b108      	cbz	r0, 800617c <_printf_i+0x1e8>
 8006178:	1b80      	subs	r0, r0, r6
 800617a:	6060      	str	r0, [r4, #4]
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	2300      	movs	r3, #0
 8006182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006186:	e7aa      	b.n	80060de <_printf_i+0x14a>
 8006188:	4632      	mov	r2, r6
 800618a:	4649      	mov	r1, r9
 800618c:	4640      	mov	r0, r8
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	47d0      	blx	sl
 8006192:	3001      	adds	r0, #1
 8006194:	d0ad      	beq.n	80060f2 <_printf_i+0x15e>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	079b      	lsls	r3, r3, #30
 800619a:	d413      	bmi.n	80061c4 <_printf_i+0x230>
 800619c:	68e0      	ldr	r0, [r4, #12]
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	4298      	cmp	r0, r3
 80061a2:	bfb8      	it	lt
 80061a4:	4618      	movlt	r0, r3
 80061a6:	e7a6      	b.n	80060f6 <_printf_i+0x162>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4632      	mov	r2, r6
 80061ac:	4649      	mov	r1, r9
 80061ae:	4640      	mov	r0, r8
 80061b0:	47d0      	blx	sl
 80061b2:	3001      	adds	r0, #1
 80061b4:	d09d      	beq.n	80060f2 <_printf_i+0x15e>
 80061b6:	3501      	adds	r5, #1
 80061b8:	68e3      	ldr	r3, [r4, #12]
 80061ba:	9903      	ldr	r1, [sp, #12]
 80061bc:	1a5b      	subs	r3, r3, r1
 80061be:	42ab      	cmp	r3, r5
 80061c0:	dcf2      	bgt.n	80061a8 <_printf_i+0x214>
 80061c2:	e7eb      	b.n	800619c <_printf_i+0x208>
 80061c4:	2500      	movs	r5, #0
 80061c6:	f104 0619 	add.w	r6, r4, #25
 80061ca:	e7f5      	b.n	80061b8 <_printf_i+0x224>
 80061cc:	080087ec 	.word	0x080087ec
 80061d0:	080087fd 	.word	0x080087fd

080061d4 <std>:
 80061d4:	2300      	movs	r3, #0
 80061d6:	b510      	push	{r4, lr}
 80061d8:	4604      	mov	r4, r0
 80061da:	e9c0 3300 	strd	r3, r3, [r0]
 80061de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061e2:	6083      	str	r3, [r0, #8]
 80061e4:	8181      	strh	r1, [r0, #12]
 80061e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80061e8:	81c2      	strh	r2, [r0, #14]
 80061ea:	6183      	str	r3, [r0, #24]
 80061ec:	4619      	mov	r1, r3
 80061ee:	2208      	movs	r2, #8
 80061f0:	305c      	adds	r0, #92	@ 0x5c
 80061f2:	f000 f9f9 	bl	80065e8 <memset>
 80061f6:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <std+0x58>)
 80061f8:	6224      	str	r4, [r4, #32]
 80061fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80061fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006230 <std+0x5c>)
 80061fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006200:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <std+0x60>)
 8006202:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006204:	4b0c      	ldr	r3, [pc, #48]	@ (8006238 <std+0x64>)
 8006206:	6323      	str	r3, [r4, #48]	@ 0x30
 8006208:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <std+0x68>)
 800620a:	429c      	cmp	r4, r3
 800620c:	d006      	beq.n	800621c <std+0x48>
 800620e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006212:	4294      	cmp	r4, r2
 8006214:	d002      	beq.n	800621c <std+0x48>
 8006216:	33d0      	adds	r3, #208	@ 0xd0
 8006218:	429c      	cmp	r4, r3
 800621a:	d105      	bne.n	8006228 <std+0x54>
 800621c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006224:	f000 ba6c 	b.w	8006700 <__retarget_lock_init_recursive>
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop
 800622c:	08006439 	.word	0x08006439
 8006230:	0800645b 	.word	0x0800645b
 8006234:	08006493 	.word	0x08006493
 8006238:	080064b7 	.word	0x080064b7
 800623c:	200014bc 	.word	0x200014bc

08006240 <stdio_exit_handler>:
 8006240:	4a02      	ldr	r2, [pc, #8]	@ (800624c <stdio_exit_handler+0xc>)
 8006242:	4903      	ldr	r1, [pc, #12]	@ (8006250 <stdio_exit_handler+0x10>)
 8006244:	4803      	ldr	r0, [pc, #12]	@ (8006254 <stdio_exit_handler+0x14>)
 8006246:	f000 b869 	b.w	800631c <_fwalk_sglue>
 800624a:	bf00      	nop
 800624c:	20000020 	.word	0x20000020
 8006250:	08007f31 	.word	0x08007f31
 8006254:	20000030 	.word	0x20000030

08006258 <cleanup_stdio>:
 8006258:	6841      	ldr	r1, [r0, #4]
 800625a:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <cleanup_stdio+0x34>)
 800625c:	b510      	push	{r4, lr}
 800625e:	4299      	cmp	r1, r3
 8006260:	4604      	mov	r4, r0
 8006262:	d001      	beq.n	8006268 <cleanup_stdio+0x10>
 8006264:	f001 fe64 	bl	8007f30 <_fflush_r>
 8006268:	68a1      	ldr	r1, [r4, #8]
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <cleanup_stdio+0x38>)
 800626c:	4299      	cmp	r1, r3
 800626e:	d002      	beq.n	8006276 <cleanup_stdio+0x1e>
 8006270:	4620      	mov	r0, r4
 8006272:	f001 fe5d 	bl	8007f30 <_fflush_r>
 8006276:	68e1      	ldr	r1, [r4, #12]
 8006278:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <cleanup_stdio+0x3c>)
 800627a:	4299      	cmp	r1, r3
 800627c:	d004      	beq.n	8006288 <cleanup_stdio+0x30>
 800627e:	4620      	mov	r0, r4
 8006280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006284:	f001 be54 	b.w	8007f30 <_fflush_r>
 8006288:	bd10      	pop	{r4, pc}
 800628a:	bf00      	nop
 800628c:	200014bc 	.word	0x200014bc
 8006290:	20001524 	.word	0x20001524
 8006294:	2000158c 	.word	0x2000158c

08006298 <global_stdio_init.part.0>:
 8006298:	b510      	push	{r4, lr}
 800629a:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <global_stdio_init.part.0+0x30>)
 800629c:	4c0b      	ldr	r4, [pc, #44]	@ (80062cc <global_stdio_init.part.0+0x34>)
 800629e:	4a0c      	ldr	r2, [pc, #48]	@ (80062d0 <global_stdio_init.part.0+0x38>)
 80062a0:	4620      	mov	r0, r4
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	2104      	movs	r1, #4
 80062a6:	2200      	movs	r2, #0
 80062a8:	f7ff ff94 	bl	80061d4 <std>
 80062ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062b0:	2201      	movs	r2, #1
 80062b2:	2109      	movs	r1, #9
 80062b4:	f7ff ff8e 	bl	80061d4 <std>
 80062b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062bc:	2202      	movs	r2, #2
 80062be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c2:	2112      	movs	r1, #18
 80062c4:	f7ff bf86 	b.w	80061d4 <std>
 80062c8:	200015f4 	.word	0x200015f4
 80062cc:	200014bc 	.word	0x200014bc
 80062d0:	08006241 	.word	0x08006241

080062d4 <__sfp_lock_acquire>:
 80062d4:	4801      	ldr	r0, [pc, #4]	@ (80062dc <__sfp_lock_acquire+0x8>)
 80062d6:	f000 ba14 	b.w	8006702 <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	200015fd 	.word	0x200015fd

080062e0 <__sfp_lock_release>:
 80062e0:	4801      	ldr	r0, [pc, #4]	@ (80062e8 <__sfp_lock_release+0x8>)
 80062e2:	f000 ba0f 	b.w	8006704 <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	200015fd 	.word	0x200015fd

080062ec <__sinit>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	4604      	mov	r4, r0
 80062f0:	f7ff fff0 	bl	80062d4 <__sfp_lock_acquire>
 80062f4:	6a23      	ldr	r3, [r4, #32]
 80062f6:	b11b      	cbz	r3, 8006300 <__sinit+0x14>
 80062f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fc:	f7ff bff0 	b.w	80062e0 <__sfp_lock_release>
 8006300:	4b04      	ldr	r3, [pc, #16]	@ (8006314 <__sinit+0x28>)
 8006302:	6223      	str	r3, [r4, #32]
 8006304:	4b04      	ldr	r3, [pc, #16]	@ (8006318 <__sinit+0x2c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f5      	bne.n	80062f8 <__sinit+0xc>
 800630c:	f7ff ffc4 	bl	8006298 <global_stdio_init.part.0>
 8006310:	e7f2      	b.n	80062f8 <__sinit+0xc>
 8006312:	bf00      	nop
 8006314:	08006259 	.word	0x08006259
 8006318:	200015f4 	.word	0x200015f4

0800631c <_fwalk_sglue>:
 800631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006320:	4607      	mov	r7, r0
 8006322:	4688      	mov	r8, r1
 8006324:	4614      	mov	r4, r2
 8006326:	2600      	movs	r6, #0
 8006328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800632c:	f1b9 0901 	subs.w	r9, r9, #1
 8006330:	d505      	bpl.n	800633e <_fwalk_sglue+0x22>
 8006332:	6824      	ldr	r4, [r4, #0]
 8006334:	2c00      	cmp	r4, #0
 8006336:	d1f7      	bne.n	8006328 <_fwalk_sglue+0xc>
 8006338:	4630      	mov	r0, r6
 800633a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d907      	bls.n	8006354 <_fwalk_sglue+0x38>
 8006344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006348:	3301      	adds	r3, #1
 800634a:	d003      	beq.n	8006354 <_fwalk_sglue+0x38>
 800634c:	4629      	mov	r1, r5
 800634e:	4638      	mov	r0, r7
 8006350:	47c0      	blx	r8
 8006352:	4306      	orrs	r6, r0
 8006354:	3568      	adds	r5, #104	@ 0x68
 8006356:	e7e9      	b.n	800632c <_fwalk_sglue+0x10>

08006358 <iprintf>:
 8006358:	b40f      	push	{r0, r1, r2, r3}
 800635a:	b507      	push	{r0, r1, r2, lr}
 800635c:	4906      	ldr	r1, [pc, #24]	@ (8006378 <iprintf+0x20>)
 800635e:	ab04      	add	r3, sp, #16
 8006360:	6808      	ldr	r0, [r1, #0]
 8006362:	f853 2b04 	ldr.w	r2, [r3], #4
 8006366:	6881      	ldr	r1, [r0, #8]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	f001 fc49 	bl	8007c00 <_vfiprintf_r>
 800636e:	b003      	add	sp, #12
 8006370:	f85d eb04 	ldr.w	lr, [sp], #4
 8006374:	b004      	add	sp, #16
 8006376:	4770      	bx	lr
 8006378:	2000002c 	.word	0x2000002c

0800637c <_puts_r>:
 800637c:	6a03      	ldr	r3, [r0, #32]
 800637e:	b570      	push	{r4, r5, r6, lr}
 8006380:	4605      	mov	r5, r0
 8006382:	460e      	mov	r6, r1
 8006384:	6884      	ldr	r4, [r0, #8]
 8006386:	b90b      	cbnz	r3, 800638c <_puts_r+0x10>
 8006388:	f7ff ffb0 	bl	80062ec <__sinit>
 800638c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800638e:	07db      	lsls	r3, r3, #31
 8006390:	d405      	bmi.n	800639e <_puts_r+0x22>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	0598      	lsls	r0, r3, #22
 8006396:	d402      	bmi.n	800639e <_puts_r+0x22>
 8006398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800639a:	f000 f9b2 	bl	8006702 <__retarget_lock_acquire_recursive>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	0719      	lsls	r1, r3, #28
 80063a2:	d502      	bpl.n	80063aa <_puts_r+0x2e>
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d135      	bne.n	8006416 <_puts_r+0x9a>
 80063aa:	4621      	mov	r1, r4
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 f8c5 	bl	800653c <__swsetup_r>
 80063b2:	b380      	cbz	r0, 8006416 <_puts_r+0x9a>
 80063b4:	f04f 35ff 	mov.w	r5, #4294967295
 80063b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063ba:	07da      	lsls	r2, r3, #31
 80063bc:	d405      	bmi.n	80063ca <_puts_r+0x4e>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	059b      	lsls	r3, r3, #22
 80063c2:	d402      	bmi.n	80063ca <_puts_r+0x4e>
 80063c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c6:	f000 f99d 	bl	8006704 <__retarget_lock_release_recursive>
 80063ca:	4628      	mov	r0, r5
 80063cc:	bd70      	pop	{r4, r5, r6, pc}
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	da04      	bge.n	80063dc <_puts_r+0x60>
 80063d2:	69a2      	ldr	r2, [r4, #24]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	dc17      	bgt.n	8006408 <_puts_r+0x8c>
 80063d8:	290a      	cmp	r1, #10
 80063da:	d015      	beq.n	8006408 <_puts_r+0x8c>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	6022      	str	r2, [r4, #0]
 80063e2:	7019      	strb	r1, [r3, #0]
 80063e4:	68a3      	ldr	r3, [r4, #8]
 80063e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063ea:	3b01      	subs	r3, #1
 80063ec:	60a3      	str	r3, [r4, #8]
 80063ee:	2900      	cmp	r1, #0
 80063f0:	d1ed      	bne.n	80063ce <_puts_r+0x52>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da11      	bge.n	800641a <_puts_r+0x9e>
 80063f6:	4622      	mov	r2, r4
 80063f8:	210a      	movs	r1, #10
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 f85f 	bl	80064be <__swbuf_r>
 8006400:	3001      	adds	r0, #1
 8006402:	d0d7      	beq.n	80063b4 <_puts_r+0x38>
 8006404:	250a      	movs	r5, #10
 8006406:	e7d7      	b.n	80063b8 <_puts_r+0x3c>
 8006408:	4622      	mov	r2, r4
 800640a:	4628      	mov	r0, r5
 800640c:	f000 f857 	bl	80064be <__swbuf_r>
 8006410:	3001      	adds	r0, #1
 8006412:	d1e7      	bne.n	80063e4 <_puts_r+0x68>
 8006414:	e7ce      	b.n	80063b4 <_puts_r+0x38>
 8006416:	3e01      	subs	r6, #1
 8006418:	e7e4      	b.n	80063e4 <_puts_r+0x68>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	6022      	str	r2, [r4, #0]
 8006420:	220a      	movs	r2, #10
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	e7ee      	b.n	8006404 <_puts_r+0x88>
	...

08006428 <puts>:
 8006428:	4b02      	ldr	r3, [pc, #8]	@ (8006434 <puts+0xc>)
 800642a:	4601      	mov	r1, r0
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	f7ff bfa5 	b.w	800637c <_puts_r>
 8006432:	bf00      	nop
 8006434:	2000002c 	.word	0x2000002c

08006438 <__sread>:
 8006438:	b510      	push	{r4, lr}
 800643a:	460c      	mov	r4, r1
 800643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006440:	f000 f900 	bl	8006644 <_read_r>
 8006444:	2800      	cmp	r0, #0
 8006446:	bfab      	itete	ge
 8006448:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800644a:	89a3      	ldrhlt	r3, [r4, #12]
 800644c:	181b      	addge	r3, r3, r0
 800644e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006452:	bfac      	ite	ge
 8006454:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006456:	81a3      	strhlt	r3, [r4, #12]
 8006458:	bd10      	pop	{r4, pc}

0800645a <__swrite>:
 800645a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645e:	461f      	mov	r7, r3
 8006460:	898b      	ldrh	r3, [r1, #12]
 8006462:	4605      	mov	r5, r0
 8006464:	05db      	lsls	r3, r3, #23
 8006466:	460c      	mov	r4, r1
 8006468:	4616      	mov	r6, r2
 800646a:	d505      	bpl.n	8006478 <__swrite+0x1e>
 800646c:	2302      	movs	r3, #2
 800646e:	2200      	movs	r2, #0
 8006470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006474:	f000 f8d4 	bl	8006620 <_lseek_r>
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	4632      	mov	r2, r6
 800647c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	4628      	mov	r0, r5
 8006484:	463b      	mov	r3, r7
 8006486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800648a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800648e:	f000 b8fb 	b.w	8006688 <_write_r>

08006492 <__sseek>:
 8006492:	b510      	push	{r4, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649a:	f000 f8c1 	bl	8006620 <_lseek_r>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	bf15      	itete	ne
 80064a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064ae:	81a3      	strheq	r3, [r4, #12]
 80064b0:	bf18      	it	ne
 80064b2:	81a3      	strhne	r3, [r4, #12]
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <__sclose>:
 80064b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ba:	f000 b8a1 	b.w	8006600 <_close_r>

080064be <__swbuf_r>:
 80064be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c0:	460e      	mov	r6, r1
 80064c2:	4614      	mov	r4, r2
 80064c4:	4605      	mov	r5, r0
 80064c6:	b118      	cbz	r0, 80064d0 <__swbuf_r+0x12>
 80064c8:	6a03      	ldr	r3, [r0, #32]
 80064ca:	b90b      	cbnz	r3, 80064d0 <__swbuf_r+0x12>
 80064cc:	f7ff ff0e 	bl	80062ec <__sinit>
 80064d0:	69a3      	ldr	r3, [r4, #24]
 80064d2:	60a3      	str	r3, [r4, #8]
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	071a      	lsls	r2, r3, #28
 80064d8:	d501      	bpl.n	80064de <__swbuf_r+0x20>
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	b943      	cbnz	r3, 80064f0 <__swbuf_r+0x32>
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 f82b 	bl	800653c <__swsetup_r>
 80064e6:	b118      	cbz	r0, 80064f0 <__swbuf_r+0x32>
 80064e8:	f04f 37ff 	mov.w	r7, #4294967295
 80064ec:	4638      	mov	r0, r7
 80064ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	6922      	ldr	r2, [r4, #16]
 80064f4:	b2f6      	uxtb	r6, r6
 80064f6:	1a98      	subs	r0, r3, r2
 80064f8:	6963      	ldr	r3, [r4, #20]
 80064fa:	4637      	mov	r7, r6
 80064fc:	4283      	cmp	r3, r0
 80064fe:	dc05      	bgt.n	800650c <__swbuf_r+0x4e>
 8006500:	4621      	mov	r1, r4
 8006502:	4628      	mov	r0, r5
 8006504:	f001 fd14 	bl	8007f30 <_fflush_r>
 8006508:	2800      	cmp	r0, #0
 800650a:	d1ed      	bne.n	80064e8 <__swbuf_r+0x2a>
 800650c:	68a3      	ldr	r3, [r4, #8]
 800650e:	3b01      	subs	r3, #1
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	701e      	strb	r6, [r3, #0]
 800651a:	6962      	ldr	r2, [r4, #20]
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	429a      	cmp	r2, r3
 8006520:	d004      	beq.n	800652c <__swbuf_r+0x6e>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	07db      	lsls	r3, r3, #31
 8006526:	d5e1      	bpl.n	80064ec <__swbuf_r+0x2e>
 8006528:	2e0a      	cmp	r6, #10
 800652a:	d1df      	bne.n	80064ec <__swbuf_r+0x2e>
 800652c:	4621      	mov	r1, r4
 800652e:	4628      	mov	r0, r5
 8006530:	f001 fcfe 	bl	8007f30 <_fflush_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	d0d9      	beq.n	80064ec <__swbuf_r+0x2e>
 8006538:	e7d6      	b.n	80064e8 <__swbuf_r+0x2a>
	...

0800653c <__swsetup_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4b29      	ldr	r3, [pc, #164]	@ (80065e4 <__swsetup_r+0xa8>)
 8006540:	4605      	mov	r5, r0
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	460c      	mov	r4, r1
 8006546:	b118      	cbz	r0, 8006550 <__swsetup_r+0x14>
 8006548:	6a03      	ldr	r3, [r0, #32]
 800654a:	b90b      	cbnz	r3, 8006550 <__swsetup_r+0x14>
 800654c:	f7ff fece 	bl	80062ec <__sinit>
 8006550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006554:	0719      	lsls	r1, r3, #28
 8006556:	d422      	bmi.n	800659e <__swsetup_r+0x62>
 8006558:	06da      	lsls	r2, r3, #27
 800655a:	d407      	bmi.n	800656c <__swsetup_r+0x30>
 800655c:	2209      	movs	r2, #9
 800655e:	602a      	str	r2, [r5, #0]
 8006560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	e033      	b.n	80065d4 <__swsetup_r+0x98>
 800656c:	0758      	lsls	r0, r3, #29
 800656e:	d512      	bpl.n	8006596 <__swsetup_r+0x5a>
 8006570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006572:	b141      	cbz	r1, 8006586 <__swsetup_r+0x4a>
 8006574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006578:	4299      	cmp	r1, r3
 800657a:	d002      	beq.n	8006582 <__swsetup_r+0x46>
 800657c:	4628      	mov	r0, r5
 800657e:	f000 ff4f 	bl	8007420 <_free_r>
 8006582:	2300      	movs	r3, #0
 8006584:	6363      	str	r3, [r4, #52]	@ 0x34
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	2300      	movs	r3, #0
 8006590:	6063      	str	r3, [r4, #4]
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	f043 0308 	orr.w	r3, r3, #8
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	b94b      	cbnz	r3, 80065b6 <__swsetup_r+0x7a>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ac:	d003      	beq.n	80065b6 <__swsetup_r+0x7a>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	f001 fd1c 	bl	8007fee <__smakebuf_r>
 80065b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ba:	f013 0201 	ands.w	r2, r3, #1
 80065be:	d00a      	beq.n	80065d6 <__swsetup_r+0x9a>
 80065c0:	2200      	movs	r2, #0
 80065c2:	60a2      	str	r2, [r4, #8]
 80065c4:	6962      	ldr	r2, [r4, #20]
 80065c6:	4252      	negs	r2, r2
 80065c8:	61a2      	str	r2, [r4, #24]
 80065ca:	6922      	ldr	r2, [r4, #16]
 80065cc:	b942      	cbnz	r2, 80065e0 <__swsetup_r+0xa4>
 80065ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065d2:	d1c5      	bne.n	8006560 <__swsetup_r+0x24>
 80065d4:	bd38      	pop	{r3, r4, r5, pc}
 80065d6:	0799      	lsls	r1, r3, #30
 80065d8:	bf58      	it	pl
 80065da:	6962      	ldrpl	r2, [r4, #20]
 80065dc:	60a2      	str	r2, [r4, #8]
 80065de:	e7f4      	b.n	80065ca <__swsetup_r+0x8e>
 80065e0:	2000      	movs	r0, #0
 80065e2:	e7f7      	b.n	80065d4 <__swsetup_r+0x98>
 80065e4:	2000002c 	.word	0x2000002c

080065e8 <memset>:
 80065e8:	4603      	mov	r3, r0
 80065ea:	4402      	add	r2, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <_localeconv_r>:
 80065f8:	4800      	ldr	r0, [pc, #0]	@ (80065fc <_localeconv_r+0x4>)
 80065fa:	4770      	bx	lr
 80065fc:	2000016c 	.word	0x2000016c

08006600 <_close_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	2300      	movs	r3, #0
 8006604:	4d05      	ldr	r5, [pc, #20]	@ (800661c <_close_r+0x1c>)
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fb fb56 	bl	8001cbc <_close>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_close_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_close_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	200015f8 	.word	0x200015f8

08006620 <_lseek_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4604      	mov	r4, r0
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	2200      	movs	r2, #0
 800662a:	4d05      	ldr	r5, [pc, #20]	@ (8006640 <_lseek_r+0x20>)
 800662c:	602a      	str	r2, [r5, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f7fb fb4e 	bl	8001cd0 <_lseek>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_lseek_r+0x1e>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_lseek_r+0x1e>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	200015f8 	.word	0x200015f8

08006644 <_read_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	4611      	mov	r1, r2
 800664c:	2200      	movs	r2, #0
 800664e:	4d05      	ldr	r5, [pc, #20]	@ (8006664 <_read_r+0x20>)
 8006650:	602a      	str	r2, [r5, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f7fb fb22 	bl	8001c9c <_read>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_read_r+0x1e>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_read_r+0x1e>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200015f8 	.word	0x200015f8

08006668 <_sbrk_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	2300      	movs	r3, #0
 800666c:	4d05      	ldr	r5, [pc, #20]	@ (8006684 <_sbrk_r+0x1c>)
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fb fb2e 	bl	8001cd4 <_sbrk>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_sbrk_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_sbrk_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	200015f8 	.word	0x200015f8

08006688 <_write_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	2200      	movs	r2, #0
 8006692:	4d05      	ldr	r5, [pc, #20]	@ (80066a8 <_write_r+0x20>)
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f7fa ff58 	bl	800154c <_write>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_write_r+0x1e>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_write_r+0x1e>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	200015f8 	.word	0x200015f8

080066ac <__errno>:
 80066ac:	4b01      	ldr	r3, [pc, #4]	@ (80066b4 <__errno+0x8>)
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	2000002c 	.word	0x2000002c

080066b8 <__libc_init_array>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	2600      	movs	r6, #0
 80066bc:	4d0c      	ldr	r5, [pc, #48]	@ (80066f0 <__libc_init_array+0x38>)
 80066be:	4c0d      	ldr	r4, [pc, #52]	@ (80066f4 <__libc_init_array+0x3c>)
 80066c0:	1b64      	subs	r4, r4, r5
 80066c2:	10a4      	asrs	r4, r4, #2
 80066c4:	42a6      	cmp	r6, r4
 80066c6:	d109      	bne.n	80066dc <__libc_init_array+0x24>
 80066c8:	f001 fd6e 	bl	80081a8 <_init>
 80066cc:	2600      	movs	r6, #0
 80066ce:	4d0a      	ldr	r5, [pc, #40]	@ (80066f8 <__libc_init_array+0x40>)
 80066d0:	4c0a      	ldr	r4, [pc, #40]	@ (80066fc <__libc_init_array+0x44>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	d105      	bne.n	80066e6 <__libc_init_array+0x2e>
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e0:	4798      	blx	r3
 80066e2:	3601      	adds	r6, #1
 80066e4:	e7ee      	b.n	80066c4 <__libc_init_array+0xc>
 80066e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ea:	4798      	blx	r3
 80066ec:	3601      	adds	r6, #1
 80066ee:	e7f2      	b.n	80066d6 <__libc_init_array+0x1e>
 80066f0:	08008b54 	.word	0x08008b54
 80066f4:	08008b54 	.word	0x08008b54
 80066f8:	08008b54 	.word	0x08008b54
 80066fc:	08008b58 	.word	0x08008b58

08006700 <__retarget_lock_init_recursive>:
 8006700:	4770      	bx	lr

08006702 <__retarget_lock_acquire_recursive>:
 8006702:	4770      	bx	lr

08006704 <__retarget_lock_release_recursive>:
 8006704:	4770      	bx	lr

08006706 <memchr>:
 8006706:	4603      	mov	r3, r0
 8006708:	b510      	push	{r4, lr}
 800670a:	b2c9      	uxtb	r1, r1
 800670c:	4402      	add	r2, r0
 800670e:	4293      	cmp	r3, r2
 8006710:	4618      	mov	r0, r3
 8006712:	d101      	bne.n	8006718 <memchr+0x12>
 8006714:	2000      	movs	r0, #0
 8006716:	e003      	b.n	8006720 <memchr+0x1a>
 8006718:	7804      	ldrb	r4, [r0, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	428c      	cmp	r4, r1
 800671e:	d1f6      	bne.n	800670e <memchr+0x8>
 8006720:	bd10      	pop	{r4, pc}

08006722 <memcpy>:
 8006722:	440a      	add	r2, r1
 8006724:	4291      	cmp	r1, r2
 8006726:	f100 33ff 	add.w	r3, r0, #4294967295
 800672a:	d100      	bne.n	800672e <memcpy+0xc>
 800672c:	4770      	bx	lr
 800672e:	b510      	push	{r4, lr}
 8006730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006734:	4291      	cmp	r1, r2
 8006736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673a:	d1f9      	bne.n	8006730 <memcpy+0xe>
 800673c:	bd10      	pop	{r4, pc}
	...

08006740 <__assert_func>:
 8006740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006742:	4614      	mov	r4, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4b09      	ldr	r3, [pc, #36]	@ (800676c <__assert_func+0x2c>)
 8006748:	4605      	mov	r5, r0
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68d8      	ldr	r0, [r3, #12]
 800674e:	b954      	cbnz	r4, 8006766 <__assert_func+0x26>
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <__assert_func+0x30>)
 8006752:	461c      	mov	r4, r3
 8006754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006758:	9100      	str	r1, [sp, #0]
 800675a:	462b      	mov	r3, r5
 800675c:	4905      	ldr	r1, [pc, #20]	@ (8006774 <__assert_func+0x34>)
 800675e:	f001 fc0f 	bl	8007f80 <fiprintf>
 8006762:	f001 fca3 	bl	80080ac <abort>
 8006766:	4b04      	ldr	r3, [pc, #16]	@ (8006778 <__assert_func+0x38>)
 8006768:	e7f4      	b.n	8006754 <__assert_func+0x14>
 800676a:	bf00      	nop
 800676c:	2000002c 	.word	0x2000002c
 8006770:	08008849 	.word	0x08008849
 8006774:	0800881b 	.word	0x0800881b
 8006778:	0800880e 	.word	0x0800880e

0800677c <quorem>:
 800677c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	6903      	ldr	r3, [r0, #16]
 8006782:	690c      	ldr	r4, [r1, #16]
 8006784:	4607      	mov	r7, r0
 8006786:	42a3      	cmp	r3, r4
 8006788:	db7e      	blt.n	8006888 <quorem+0x10c>
 800678a:	3c01      	subs	r4, #1
 800678c:	00a3      	lsls	r3, r4, #2
 800678e:	f100 0514 	add.w	r5, r0, #20
 8006792:	f101 0814 	add.w	r8, r1, #20
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067a6:	3301      	adds	r3, #1
 80067a8:	429a      	cmp	r2, r3
 80067aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80067ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067b2:	d32e      	bcc.n	8006812 <quorem+0x96>
 80067b4:	f04f 0a00 	mov.w	sl, #0
 80067b8:	46c4      	mov	ip, r8
 80067ba:	46ae      	mov	lr, r5
 80067bc:	46d3      	mov	fp, sl
 80067be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067c2:	b298      	uxth	r0, r3
 80067c4:	fb06 a000 	mla	r0, r6, r0, sl
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	0c02      	lsrs	r2, r0, #16
 80067cc:	fb06 2303 	mla	r3, r6, r3, r2
 80067d0:	f8de 2000 	ldr.w	r2, [lr]
 80067d4:	b280      	uxth	r0, r0
 80067d6:	b292      	uxth	r2, r2
 80067d8:	1a12      	subs	r2, r2, r0
 80067da:	445a      	add	r2, fp
 80067dc:	f8de 0000 	ldr.w	r0, [lr]
 80067e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80067ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80067ee:	b292      	uxth	r2, r2
 80067f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80067f4:	45e1      	cmp	r9, ip
 80067f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067fa:	f84e 2b04 	str.w	r2, [lr], #4
 80067fe:	d2de      	bcs.n	80067be <quorem+0x42>
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	58eb      	ldr	r3, [r5, r3]
 8006804:	b92b      	cbnz	r3, 8006812 <quorem+0x96>
 8006806:	9b01      	ldr	r3, [sp, #4]
 8006808:	3b04      	subs	r3, #4
 800680a:	429d      	cmp	r5, r3
 800680c:	461a      	mov	r2, r3
 800680e:	d32f      	bcc.n	8006870 <quorem+0xf4>
 8006810:	613c      	str	r4, [r7, #16]
 8006812:	4638      	mov	r0, r7
 8006814:	f001 f8c4 	bl	80079a0 <__mcmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	db25      	blt.n	8006868 <quorem+0xec>
 800681c:	4629      	mov	r1, r5
 800681e:	2000      	movs	r0, #0
 8006820:	f858 2b04 	ldr.w	r2, [r8], #4
 8006824:	f8d1 c000 	ldr.w	ip, [r1]
 8006828:	fa1f fe82 	uxth.w	lr, r2
 800682c:	fa1f f38c 	uxth.w	r3, ip
 8006830:	eba3 030e 	sub.w	r3, r3, lr
 8006834:	4403      	add	r3, r0
 8006836:	0c12      	lsrs	r2, r2, #16
 8006838:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800683c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006840:	b29b      	uxth	r3, r3
 8006842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006846:	45c1      	cmp	r9, r8
 8006848:	ea4f 4022 	mov.w	r0, r2, asr #16
 800684c:	f841 3b04 	str.w	r3, [r1], #4
 8006850:	d2e6      	bcs.n	8006820 <quorem+0xa4>
 8006852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800685a:	b922      	cbnz	r2, 8006866 <quorem+0xea>
 800685c:	3b04      	subs	r3, #4
 800685e:	429d      	cmp	r5, r3
 8006860:	461a      	mov	r2, r3
 8006862:	d30b      	bcc.n	800687c <quorem+0x100>
 8006864:	613c      	str	r4, [r7, #16]
 8006866:	3601      	adds	r6, #1
 8006868:	4630      	mov	r0, r6
 800686a:	b003      	add	sp, #12
 800686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	3b04      	subs	r3, #4
 8006874:	2a00      	cmp	r2, #0
 8006876:	d1cb      	bne.n	8006810 <quorem+0x94>
 8006878:	3c01      	subs	r4, #1
 800687a:	e7c6      	b.n	800680a <quorem+0x8e>
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	3b04      	subs	r3, #4
 8006880:	2a00      	cmp	r2, #0
 8006882:	d1ef      	bne.n	8006864 <quorem+0xe8>
 8006884:	3c01      	subs	r4, #1
 8006886:	e7ea      	b.n	800685e <quorem+0xe2>
 8006888:	2000      	movs	r0, #0
 800688a:	e7ee      	b.n	800686a <quorem+0xee>
 800688c:	0000      	movs	r0, r0
	...

08006890 <_dtoa_r>:
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	69c7      	ldr	r7, [r0, #28]
 800689a:	b097      	sub	sp, #92	@ 0x5c
 800689c:	4683      	mov	fp, r0
 800689e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80068a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80068a4:	b97f      	cbnz	r7, 80068c6 <_dtoa_r+0x36>
 80068a6:	2010      	movs	r0, #16
 80068a8:	f7fe ff82 	bl	80057b0 <malloc>
 80068ac:	4602      	mov	r2, r0
 80068ae:	f8cb 001c 	str.w	r0, [fp, #28]
 80068b2:	b920      	cbnz	r0, 80068be <_dtoa_r+0x2e>
 80068b4:	21ef      	movs	r1, #239	@ 0xef
 80068b6:	4ba8      	ldr	r3, [pc, #672]	@ (8006b58 <_dtoa_r+0x2c8>)
 80068b8:	48a8      	ldr	r0, [pc, #672]	@ (8006b5c <_dtoa_r+0x2cc>)
 80068ba:	f7ff ff41 	bl	8006740 <__assert_func>
 80068be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068c2:	6007      	str	r7, [r0, #0]
 80068c4:	60c7      	str	r7, [r0, #12]
 80068c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068ca:	6819      	ldr	r1, [r3, #0]
 80068cc:	b159      	cbz	r1, 80068e6 <_dtoa_r+0x56>
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	2301      	movs	r3, #1
 80068d2:	4093      	lsls	r3, r2
 80068d4:	604a      	str	r2, [r1, #4]
 80068d6:	608b      	str	r3, [r1, #8]
 80068d8:	4658      	mov	r0, fp
 80068da:	f000 fe29 	bl	8007530 <_Bfree>
 80068de:	2200      	movs	r2, #0
 80068e0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	1e2b      	subs	r3, r5, #0
 80068e8:	bfaf      	iteee	ge
 80068ea:	2300      	movge	r3, #0
 80068ec:	2201      	movlt	r2, #1
 80068ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80068f2:	9303      	strlt	r3, [sp, #12]
 80068f4:	bfa8      	it	ge
 80068f6:	6033      	strge	r3, [r6, #0]
 80068f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80068fc:	4b98      	ldr	r3, [pc, #608]	@ (8006b60 <_dtoa_r+0x2d0>)
 80068fe:	bfb8      	it	lt
 8006900:	6032      	strlt	r2, [r6, #0]
 8006902:	ea33 0308 	bics.w	r3, r3, r8
 8006906:	d112      	bne.n	800692e <_dtoa_r+0x9e>
 8006908:	f242 730f 	movw	r3, #9999	@ 0x270f
 800690c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006914:	4323      	orrs	r3, r4
 8006916:	f000 8550 	beq.w	80073ba <_dtoa_r+0xb2a>
 800691a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800691c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006b64 <_dtoa_r+0x2d4>
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8552 	beq.w	80073ca <_dtoa_r+0xb3a>
 8006926:	f10a 0303 	add.w	r3, sl, #3
 800692a:	f000 bd4c 	b.w	80073c6 <_dtoa_r+0xb36>
 800692e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006932:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	f7fa f833 	bl	80009a8 <__aeabi_dcmpeq>
 8006942:	4607      	mov	r7, r0
 8006944:	b158      	cbz	r0, 800695e <_dtoa_r+0xce>
 8006946:	2301      	movs	r3, #1
 8006948:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800694e:	b113      	cbz	r3, 8006956 <_dtoa_r+0xc6>
 8006950:	4b85      	ldr	r3, [pc, #532]	@ (8006b68 <_dtoa_r+0x2d8>)
 8006952:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006b6c <_dtoa_r+0x2dc>
 800695a:	f000 bd36 	b.w	80073ca <_dtoa_r+0xb3a>
 800695e:	ab14      	add	r3, sp, #80	@ 0x50
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	ab15      	add	r3, sp, #84	@ 0x54
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4658      	mov	r0, fp
 8006968:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800696c:	f001 f8c8 	bl	8007b00 <__d2b>
 8006970:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006974:	4681      	mov	r9, r0
 8006976:	2e00      	cmp	r6, #0
 8006978:	d077      	beq.n	8006a6a <_dtoa_r+0x1da>
 800697a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800697e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006980:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006988:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800698c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006990:	9712      	str	r7, [sp, #72]	@ 0x48
 8006992:	4619      	mov	r1, r3
 8006994:	2200      	movs	r2, #0
 8006996:	4b76      	ldr	r3, [pc, #472]	@ (8006b70 <_dtoa_r+0x2e0>)
 8006998:	f7f9 fbe6 	bl	8000168 <__aeabi_dsub>
 800699c:	a368      	add	r3, pc, #416	@ (adr r3, 8006b40 <_dtoa_r+0x2b0>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fd99 	bl	80004d8 <__aeabi_dmul>
 80069a6:	a368      	add	r3, pc, #416	@ (adr r3, 8006b48 <_dtoa_r+0x2b8>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fbde 	bl	800016c <__adddf3>
 80069b0:	4604      	mov	r4, r0
 80069b2:	4630      	mov	r0, r6
 80069b4:	460d      	mov	r5, r1
 80069b6:	f7f9 fd25 	bl	8000404 <__aeabi_i2d>
 80069ba:	a365      	add	r3, pc, #404	@ (adr r3, 8006b50 <_dtoa_r+0x2c0>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fd8a 	bl	80004d8 <__aeabi_dmul>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4620      	mov	r0, r4
 80069ca:	4629      	mov	r1, r5
 80069cc:	f7f9 fbce 	bl	800016c <__adddf3>
 80069d0:	4604      	mov	r4, r0
 80069d2:	460d      	mov	r5, r1
 80069d4:	f7fa f830 	bl	8000a38 <__aeabi_d2iz>
 80069d8:	2200      	movs	r2, #0
 80069da:	4607      	mov	r7, r0
 80069dc:	2300      	movs	r3, #0
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7f9 ffeb 	bl	80009bc <__aeabi_dcmplt>
 80069e6:	b140      	cbz	r0, 80069fa <_dtoa_r+0x16a>
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7f9 fd0b 	bl	8000404 <__aeabi_i2d>
 80069ee:	4622      	mov	r2, r4
 80069f0:	462b      	mov	r3, r5
 80069f2:	f7f9 ffd9 	bl	80009a8 <__aeabi_dcmpeq>
 80069f6:	b900      	cbnz	r0, 80069fa <_dtoa_r+0x16a>
 80069f8:	3f01      	subs	r7, #1
 80069fa:	2f16      	cmp	r7, #22
 80069fc:	d853      	bhi.n	8006aa6 <_dtoa_r+0x216>
 80069fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a02:	4b5c      	ldr	r3, [pc, #368]	@ (8006b74 <_dtoa_r+0x2e4>)
 8006a04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f7f9 ffd6 	bl	80009bc <__aeabi_dcmplt>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d04a      	beq.n	8006aaa <_dtoa_r+0x21a>
 8006a14:	2300      	movs	r3, #0
 8006a16:	3f01      	subs	r7, #1
 8006a18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a1c:	1b9b      	subs	r3, r3, r6
 8006a1e:	1e5a      	subs	r2, r3, #1
 8006a20:	bf46      	itte	mi
 8006a22:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a26:	2300      	movmi	r3, #0
 8006a28:	f04f 0800 	movpl.w	r8, #0
 8006a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a2e:	bf48      	it	mi
 8006a30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	db3b      	blt.n	8006aae <_dtoa_r+0x21e>
 8006a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a38:	970e      	str	r7, [sp, #56]	@ 0x38
 8006a3a:	443b      	add	r3, r7
 8006a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a3e:	2300      	movs	r3, #0
 8006a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	d866      	bhi.n	8006b16 <_dtoa_r+0x286>
 8006a48:	2b05      	cmp	r3, #5
 8006a4a:	bfc4      	itt	gt
 8006a4c:	3b04      	subgt	r3, #4
 8006a4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006a50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a52:	bfc8      	it	gt
 8006a54:	2400      	movgt	r4, #0
 8006a56:	f1a3 0302 	sub.w	r3, r3, #2
 8006a5a:	bfd8      	it	le
 8006a5c:	2401      	movle	r4, #1
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d864      	bhi.n	8006b2c <_dtoa_r+0x29c>
 8006a62:	e8df f003 	tbb	[pc, r3]
 8006a66:	382b      	.short	0x382b
 8006a68:	5636      	.short	0x5636
 8006a6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006a6e:	441e      	add	r6, r3
 8006a70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	bfc1      	itttt	gt
 8006a78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006a80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a88:	bfd6      	itet	le
 8006a8a:	f1c3 0320 	rsble	r3, r3, #32
 8006a8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006a92:	fa04 f003 	lslle.w	r0, r4, r3
 8006a96:	f7f9 fca5 	bl	80003e4 <__aeabi_ui2d>
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006aa0:	3e01      	subs	r6, #1
 8006aa2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006aa4:	e775      	b.n	8006992 <_dtoa_r+0x102>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e7b6      	b.n	8006a18 <_dtoa_r+0x188>
 8006aaa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006aac:	e7b5      	b.n	8006a1a <_dtoa_r+0x18a>
 8006aae:	427b      	negs	r3, r7
 8006ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	eba8 0807 	sub.w	r8, r8, r7
 8006ab8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006aba:	e7c2      	b.n	8006a42 <_dtoa_r+0x1b2>
 8006abc:	2300      	movs	r3, #0
 8006abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ac0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	dc35      	bgt.n	8006b32 <_dtoa_r+0x2a2>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	461a      	mov	r2, r3
 8006aca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ace:	9221      	str	r2, [sp, #132]	@ 0x84
 8006ad0:	e00b      	b.n	8006aea <_dtoa_r+0x25a>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e7f3      	b.n	8006abe <_dtoa_r+0x22e>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ada:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	9308      	str	r3, [sp, #32]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	9307      	str	r3, [sp, #28]
 8006ae6:	bfb8      	it	lt
 8006ae8:	2301      	movlt	r3, #1
 8006aea:	2100      	movs	r1, #0
 8006aec:	2204      	movs	r2, #4
 8006aee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006af2:	f102 0514 	add.w	r5, r2, #20
 8006af6:	429d      	cmp	r5, r3
 8006af8:	d91f      	bls.n	8006b3a <_dtoa_r+0x2aa>
 8006afa:	6041      	str	r1, [r0, #4]
 8006afc:	4658      	mov	r0, fp
 8006afe:	f000 fcd7 	bl	80074b0 <_Balloc>
 8006b02:	4682      	mov	sl, r0
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d139      	bne.n	8006b7c <_dtoa_r+0x2ec>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b78 <_dtoa_r+0x2e8>)
 8006b10:	e6d2      	b.n	80068b8 <_dtoa_r+0x28>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e7e0      	b.n	8006ad8 <_dtoa_r+0x248>
 8006b16:	2401      	movs	r4, #1
 8006b18:	2300      	movs	r3, #0
 8006b1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b22:	2200      	movs	r2, #0
 8006b24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b28:	2312      	movs	r3, #18
 8006b2a:	e7d0      	b.n	8006ace <_dtoa_r+0x23e>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b30:	e7f5      	b.n	8006b1e <_dtoa_r+0x28e>
 8006b32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b38:	e7d7      	b.n	8006aea <_dtoa_r+0x25a>
 8006b3a:	3101      	adds	r1, #1
 8006b3c:	0052      	lsls	r2, r2, #1
 8006b3e:	e7d8      	b.n	8006af2 <_dtoa_r+0x262>
 8006b40:	636f4361 	.word	0x636f4361
 8006b44:	3fd287a7 	.word	0x3fd287a7
 8006b48:	8b60c8b3 	.word	0x8b60c8b3
 8006b4c:	3fc68a28 	.word	0x3fc68a28
 8006b50:	509f79fb 	.word	0x509f79fb
 8006b54:	3fd34413 	.word	0x3fd34413
 8006b58:	08008857 	.word	0x08008857
 8006b5c:	0800886e 	.word	0x0800886e
 8006b60:	7ff00000 	.word	0x7ff00000
 8006b64:	08008853 	.word	0x08008853
 8006b68:	080087eb 	.word	0x080087eb
 8006b6c:	080087ea 	.word	0x080087ea
 8006b70:	3ff80000 	.word	0x3ff80000
 8006b74:	08008968 	.word	0x08008968
 8006b78:	080088c6 	.word	0x080088c6
 8006b7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b80:	6018      	str	r0, [r3, #0]
 8006b82:	9b07      	ldr	r3, [sp, #28]
 8006b84:	2b0e      	cmp	r3, #14
 8006b86:	f200 80a4 	bhi.w	8006cd2 <_dtoa_r+0x442>
 8006b8a:	2c00      	cmp	r4, #0
 8006b8c:	f000 80a1 	beq.w	8006cd2 <_dtoa_r+0x442>
 8006b90:	2f00      	cmp	r7, #0
 8006b92:	dd33      	ble.n	8006bfc <_dtoa_r+0x36c>
 8006b94:	4b86      	ldr	r3, [pc, #536]	@ (8006db0 <_dtoa_r+0x520>)
 8006b96:	f007 020f 	and.w	r2, r7, #15
 8006b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b9e:	05f8      	lsls	r0, r7, #23
 8006ba0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ba4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ba8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bac:	d516      	bpl.n	8006bdc <_dtoa_r+0x34c>
 8006bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bb2:	4b80      	ldr	r3, [pc, #512]	@ (8006db4 <_dtoa_r+0x524>)
 8006bb4:	2603      	movs	r6, #3
 8006bb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bba:	f7f9 fdb7 	bl	800072c <__aeabi_ddiv>
 8006bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bc2:	f004 040f 	and.w	r4, r4, #15
 8006bc6:	4d7b      	ldr	r5, [pc, #492]	@ (8006db4 <_dtoa_r+0x524>)
 8006bc8:	b954      	cbnz	r4, 8006be0 <_dtoa_r+0x350>
 8006bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd2:	f7f9 fdab 	bl	800072c <__aeabi_ddiv>
 8006bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bda:	e028      	b.n	8006c2e <_dtoa_r+0x39e>
 8006bdc:	2602      	movs	r6, #2
 8006bde:	e7f2      	b.n	8006bc6 <_dtoa_r+0x336>
 8006be0:	07e1      	lsls	r1, r4, #31
 8006be2:	d508      	bpl.n	8006bf6 <_dtoa_r+0x366>
 8006be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006be8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bec:	f7f9 fc74 	bl	80004d8 <__aeabi_dmul>
 8006bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf4:	3601      	adds	r6, #1
 8006bf6:	1064      	asrs	r4, r4, #1
 8006bf8:	3508      	adds	r5, #8
 8006bfa:	e7e5      	b.n	8006bc8 <_dtoa_r+0x338>
 8006bfc:	f000 80d2 	beq.w	8006da4 <_dtoa_r+0x514>
 8006c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c04:	427c      	negs	r4, r7
 8006c06:	4b6a      	ldr	r3, [pc, #424]	@ (8006db0 <_dtoa_r+0x520>)
 8006c08:	f004 020f 	and.w	r2, r4, #15
 8006c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 fc60 	bl	80004d8 <__aeabi_dmul>
 8006c18:	2602      	movs	r6, #2
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c20:	4d64      	ldr	r5, [pc, #400]	@ (8006db4 <_dtoa_r+0x524>)
 8006c22:	1124      	asrs	r4, r4, #4
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	f040 80b2 	bne.w	8006d8e <_dtoa_r+0x4fe>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d3      	bne.n	8006bd6 <_dtoa_r+0x346>
 8006c2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80b7 	beq.w	8006da8 <_dtoa_r+0x518>
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4b5d      	ldr	r3, [pc, #372]	@ (8006db8 <_dtoa_r+0x528>)
 8006c42:	f7f9 febb 	bl	80009bc <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f000 80ae 	beq.w	8006da8 <_dtoa_r+0x518>
 8006c4c:	9b07      	ldr	r3, [sp, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80aa 	beq.w	8006da8 <_dtoa_r+0x518>
 8006c54:	9b08      	ldr	r3, [sp, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dd37      	ble.n	8006cca <_dtoa_r+0x43a>
 8006c5a:	1e7b      	subs	r3, r7, #1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	9304      	str	r3, [sp, #16]
 8006c60:	2200      	movs	r2, #0
 8006c62:	4629      	mov	r1, r5
 8006c64:	4b55      	ldr	r3, [pc, #340]	@ (8006dbc <_dtoa_r+0x52c>)
 8006c66:	f7f9 fc37 	bl	80004d8 <__aeabi_dmul>
 8006c6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c6e:	9c08      	ldr	r4, [sp, #32]
 8006c70:	3601      	adds	r6, #1
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7f9 fbc6 	bl	8000404 <__aeabi_i2d>
 8006c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	4b4f      	ldr	r3, [pc, #316]	@ (8006dc0 <_dtoa_r+0x530>)
 8006c84:	f7f9 fa72 	bl	800016c <__adddf3>
 8006c88:	4605      	mov	r5, r0
 8006c8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	f040 809a 	bne.w	8006dc8 <_dtoa_r+0x538>
 8006c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006dc4 <_dtoa_r+0x534>)
 8006c9c:	f7f9 fa64 	bl	8000168 <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ca8:	462a      	mov	r2, r5
 8006caa:	4633      	mov	r3, r6
 8006cac:	f7f9 fea4 	bl	80009f8 <__aeabi_dcmpgt>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	f040 828e 	bne.w	80071d2 <_dtoa_r+0x942>
 8006cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cba:	462a      	mov	r2, r5
 8006cbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006cc0:	f7f9 fe7c 	bl	80009bc <__aeabi_dcmplt>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f040 8127 	bne.w	8006f18 <_dtoa_r+0x688>
 8006cca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006cce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006cd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f2c0 8163 	blt.w	8006fa0 <_dtoa_r+0x710>
 8006cda:	2f0e      	cmp	r7, #14
 8006cdc:	f300 8160 	bgt.w	8006fa0 <_dtoa_r+0x710>
 8006ce0:	4b33      	ldr	r3, [pc, #204]	@ (8006db0 <_dtoa_r+0x520>)
 8006ce2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ce6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da03      	bge.n	8006cfc <_dtoa_r+0x46c>
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f340 8100 	ble.w	8006efc <_dtoa_r+0x66c>
 8006cfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d00:	4656      	mov	r6, sl
 8006d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 fd0f 	bl	800072c <__aeabi_ddiv>
 8006d0e:	f7f9 fe93 	bl	8000a38 <__aeabi_d2iz>
 8006d12:	4680      	mov	r8, r0
 8006d14:	f7f9 fb76 	bl	8000404 <__aeabi_i2d>
 8006d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d1c:	f7f9 fbdc 	bl	80004d8 <__aeabi_dmul>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 fa1e 	bl	8000168 <__aeabi_dsub>
 8006d2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d30:	9d07      	ldr	r5, [sp, #28]
 8006d32:	f806 4b01 	strb.w	r4, [r6], #1
 8006d36:	eba6 040a 	sub.w	r4, r6, sl
 8006d3a:	42a5      	cmp	r5, r4
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	f040 8116 	bne.w	8006f70 <_dtoa_r+0x6e0>
 8006d44:	f7f9 fa12 	bl	800016c <__adddf3>
 8006d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	f7f9 fe52 	bl	80009f8 <__aeabi_dcmpgt>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f040 80f8 	bne.w	8006f4a <_dtoa_r+0x6ba>
 8006d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	4629      	mov	r1, r5
 8006d62:	f7f9 fe21 	bl	80009a8 <__aeabi_dcmpeq>
 8006d66:	b118      	cbz	r0, 8006d70 <_dtoa_r+0x4e0>
 8006d68:	f018 0f01 	tst.w	r8, #1
 8006d6c:	f040 80ed 	bne.w	8006f4a <_dtoa_r+0x6ba>
 8006d70:	4649      	mov	r1, r9
 8006d72:	4658      	mov	r0, fp
 8006d74:	f000 fbdc 	bl	8007530 <_Bfree>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	7033      	strb	r3, [r6, #0]
 8006d7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d7e:	3701      	adds	r7, #1
 8006d80:	601f      	str	r7, [r3, #0]
 8006d82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8320 	beq.w	80073ca <_dtoa_r+0xb3a>
 8006d8a:	601e      	str	r6, [r3, #0]
 8006d8c:	e31d      	b.n	80073ca <_dtoa_r+0xb3a>
 8006d8e:	07e2      	lsls	r2, r4, #31
 8006d90:	d505      	bpl.n	8006d9e <_dtoa_r+0x50e>
 8006d92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d96:	f7f9 fb9f 	bl	80004d8 <__aeabi_dmul>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	1064      	asrs	r4, r4, #1
 8006da0:	3508      	adds	r5, #8
 8006da2:	e73f      	b.n	8006c24 <_dtoa_r+0x394>
 8006da4:	2602      	movs	r6, #2
 8006da6:	e742      	b.n	8006c2e <_dtoa_r+0x39e>
 8006da8:	9c07      	ldr	r4, [sp, #28]
 8006daa:	9704      	str	r7, [sp, #16]
 8006dac:	e761      	b.n	8006c72 <_dtoa_r+0x3e2>
 8006dae:	bf00      	nop
 8006db0:	08008968 	.word	0x08008968
 8006db4:	08008940 	.word	0x08008940
 8006db8:	3ff00000 	.word	0x3ff00000
 8006dbc:	40240000 	.word	0x40240000
 8006dc0:	401c0000 	.word	0x401c0000
 8006dc4:	40140000 	.word	0x40140000
 8006dc8:	4b70      	ldr	r3, [pc, #448]	@ (8006f8c <_dtoa_r+0x6fc>)
 8006dca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006dd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dd4:	4454      	add	r4, sl
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d045      	beq.n	8006e66 <_dtoa_r+0x5d6>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	496c      	ldr	r1, [pc, #432]	@ (8006f90 <_dtoa_r+0x700>)
 8006dde:	f7f9 fca5 	bl	800072c <__aeabi_ddiv>
 8006de2:	4633      	mov	r3, r6
 8006de4:	462a      	mov	r2, r5
 8006de6:	f7f9 f9bf 	bl	8000168 <__aeabi_dsub>
 8006dea:	4656      	mov	r6, sl
 8006dec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df4:	f7f9 fe20 	bl	8000a38 <__aeabi_d2iz>
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f7f9 fb03 	bl	8000404 <__aeabi_i2d>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e06:	f7f9 f9af 	bl	8000168 <__aeabi_dsub>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	3530      	adds	r5, #48	@ 0x30
 8006e10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e18:	f806 5b01 	strb.w	r5, [r6], #1
 8006e1c:	f7f9 fdce 	bl	80009bc <__aeabi_dcmplt>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d163      	bne.n	8006eec <_dtoa_r+0x65c>
 8006e24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	495a      	ldr	r1, [pc, #360]	@ (8006f94 <_dtoa_r+0x704>)
 8006e2c:	f7f9 f99c 	bl	8000168 <__aeabi_dsub>
 8006e30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e34:	f7f9 fdc2 	bl	80009bc <__aeabi_dcmplt>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f040 8087 	bne.w	8006f4c <_dtoa_r+0x6bc>
 8006e3e:	42a6      	cmp	r6, r4
 8006e40:	f43f af43 	beq.w	8006cca <_dtoa_r+0x43a>
 8006e44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4b53      	ldr	r3, [pc, #332]	@ (8006f98 <_dtoa_r+0x708>)
 8006e4c:	f7f9 fb44 	bl	80004d8 <__aeabi_dmul>
 8006e50:	2200      	movs	r2, #0
 8006e52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006f98 <_dtoa_r+0x708>)
 8006e5c:	f7f9 fb3c 	bl	80004d8 <__aeabi_dmul>
 8006e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e64:	e7c4      	b.n	8006df0 <_dtoa_r+0x560>
 8006e66:	4631      	mov	r1, r6
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7f9 fb35 	bl	80004d8 <__aeabi_dmul>
 8006e6e:	4656      	mov	r6, sl
 8006e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e74:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7a:	f7f9 fddd 	bl	8000a38 <__aeabi_d2iz>
 8006e7e:	4605      	mov	r5, r0
 8006e80:	f7f9 fac0 	bl	8000404 <__aeabi_i2d>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e8c:	f7f9 f96c 	bl	8000168 <__aeabi_dsub>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	3530      	adds	r5, #48	@ 0x30
 8006e96:	f806 5b01 	strb.w	r5, [r6], #1
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	d124      	bne.n	8006ef0 <_dtoa_r+0x660>
 8006ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006eaa:	4b39      	ldr	r3, [pc, #228]	@ (8006f90 <_dtoa_r+0x700>)
 8006eac:	f7f9 f95e 	bl	800016c <__adddf3>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb8:	f7f9 fd9e 	bl	80009f8 <__aeabi_dcmpgt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d145      	bne.n	8006f4c <_dtoa_r+0x6bc>
 8006ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	4932      	ldr	r1, [pc, #200]	@ (8006f90 <_dtoa_r+0x700>)
 8006ec8:	f7f9 f94e 	bl	8000168 <__aeabi_dsub>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed4:	f7f9 fd72 	bl	80009bc <__aeabi_dcmplt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	f43f aef6 	beq.w	8006cca <_dtoa_r+0x43a>
 8006ede:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ee0:	1e73      	subs	r3, r6, #1
 8006ee2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ee4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ee8:	2b30      	cmp	r3, #48	@ 0x30
 8006eea:	d0f8      	beq.n	8006ede <_dtoa_r+0x64e>
 8006eec:	9f04      	ldr	r7, [sp, #16]
 8006eee:	e73f      	b.n	8006d70 <_dtoa_r+0x4e0>
 8006ef0:	4b29      	ldr	r3, [pc, #164]	@ (8006f98 <_dtoa_r+0x708>)
 8006ef2:	f7f9 faf1 	bl	80004d8 <__aeabi_dmul>
 8006ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006efa:	e7bc      	b.n	8006e76 <_dtoa_r+0x5e6>
 8006efc:	d10c      	bne.n	8006f18 <_dtoa_r+0x688>
 8006efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f02:	2200      	movs	r2, #0
 8006f04:	4b25      	ldr	r3, [pc, #148]	@ (8006f9c <_dtoa_r+0x70c>)
 8006f06:	f7f9 fae7 	bl	80004d8 <__aeabi_dmul>
 8006f0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f0e:	f7f9 fd69 	bl	80009e4 <__aeabi_dcmpge>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f000 815b 	beq.w	80071ce <_dtoa_r+0x93e>
 8006f18:	2400      	movs	r4, #0
 8006f1a:	4625      	mov	r5, r4
 8006f1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f1e:	4656      	mov	r6, sl
 8006f20:	43db      	mvns	r3, r3
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	2700      	movs	r7, #0
 8006f26:	4621      	mov	r1, r4
 8006f28:	4658      	mov	r0, fp
 8006f2a:	f000 fb01 	bl	8007530 <_Bfree>
 8006f2e:	2d00      	cmp	r5, #0
 8006f30:	d0dc      	beq.n	8006eec <_dtoa_r+0x65c>
 8006f32:	b12f      	cbz	r7, 8006f40 <_dtoa_r+0x6b0>
 8006f34:	42af      	cmp	r7, r5
 8006f36:	d003      	beq.n	8006f40 <_dtoa_r+0x6b0>
 8006f38:	4639      	mov	r1, r7
 8006f3a:	4658      	mov	r0, fp
 8006f3c:	f000 faf8 	bl	8007530 <_Bfree>
 8006f40:	4629      	mov	r1, r5
 8006f42:	4658      	mov	r0, fp
 8006f44:	f000 faf4 	bl	8007530 <_Bfree>
 8006f48:	e7d0      	b.n	8006eec <_dtoa_r+0x65c>
 8006f4a:	9704      	str	r7, [sp, #16]
 8006f4c:	4633      	mov	r3, r6
 8006f4e:	461e      	mov	r6, r3
 8006f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f54:	2a39      	cmp	r2, #57	@ 0x39
 8006f56:	d107      	bne.n	8006f68 <_dtoa_r+0x6d8>
 8006f58:	459a      	cmp	sl, r3
 8006f5a:	d1f8      	bne.n	8006f4e <_dtoa_r+0x6be>
 8006f5c:	9a04      	ldr	r2, [sp, #16]
 8006f5e:	3201      	adds	r2, #1
 8006f60:	9204      	str	r2, [sp, #16]
 8006f62:	2230      	movs	r2, #48	@ 0x30
 8006f64:	f88a 2000 	strb.w	r2, [sl]
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e7bd      	b.n	8006eec <_dtoa_r+0x65c>
 8006f70:	2200      	movs	r2, #0
 8006f72:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <_dtoa_r+0x708>)
 8006f74:	f7f9 fab0 	bl	80004d8 <__aeabi_dmul>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	f7f9 fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f43f aebc 	beq.w	8006d02 <_dtoa_r+0x472>
 8006f8a:	e6f1      	b.n	8006d70 <_dtoa_r+0x4e0>
 8006f8c:	08008968 	.word	0x08008968
 8006f90:	3fe00000 	.word	0x3fe00000
 8006f94:	3ff00000 	.word	0x3ff00000
 8006f98:	40240000 	.word	0x40240000
 8006f9c:	40140000 	.word	0x40140000
 8006fa0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	f000 80db 	beq.w	800715e <_dtoa_r+0x8ce>
 8006fa8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	f300 80bf 	bgt.w	800712e <_dtoa_r+0x89e>
 8006fb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	f000 80b7 	beq.w	8007126 <_dtoa_r+0x896>
 8006fb8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006fbc:	4646      	mov	r6, r8
 8006fbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	441a      	add	r2, r3
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	4498      	add	r8, r3
 8006fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fcc:	f000 fb64 	bl	8007698 <__i2b>
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	b15e      	cbz	r6, 8006fec <_dtoa_r+0x75c>
 8006fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	dd08      	ble.n	8006fec <_dtoa_r+0x75c>
 8006fda:	42b3      	cmp	r3, r6
 8006fdc:	bfa8      	it	ge
 8006fde:	4633      	movge	r3, r6
 8006fe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe2:	eba8 0803 	sub.w	r8, r8, r3
 8006fe6:	1af6      	subs	r6, r6, r3
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fee:	b1f3      	cbz	r3, 800702e <_dtoa_r+0x79e>
 8006ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80b7 	beq.w	8007166 <_dtoa_r+0x8d6>
 8006ff8:	b18c      	cbz	r4, 800701e <_dtoa_r+0x78e>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4658      	mov	r0, fp
 8007000:	f000 fc08 	bl	8007814 <__pow5mult>
 8007004:	464a      	mov	r2, r9
 8007006:	4601      	mov	r1, r0
 8007008:	4605      	mov	r5, r0
 800700a:	4658      	mov	r0, fp
 800700c:	f000 fb5a 	bl	80076c4 <__multiply>
 8007010:	4649      	mov	r1, r9
 8007012:	9004      	str	r0, [sp, #16]
 8007014:	4658      	mov	r0, fp
 8007016:	f000 fa8b 	bl	8007530 <_Bfree>
 800701a:	9b04      	ldr	r3, [sp, #16]
 800701c:	4699      	mov	r9, r3
 800701e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007020:	1b1a      	subs	r2, r3, r4
 8007022:	d004      	beq.n	800702e <_dtoa_r+0x79e>
 8007024:	4649      	mov	r1, r9
 8007026:	4658      	mov	r0, fp
 8007028:	f000 fbf4 	bl	8007814 <__pow5mult>
 800702c:	4681      	mov	r9, r0
 800702e:	2101      	movs	r1, #1
 8007030:	4658      	mov	r0, fp
 8007032:	f000 fb31 	bl	8007698 <__i2b>
 8007036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007038:	4604      	mov	r4, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 81c9 	beq.w	80073d2 <_dtoa_r+0xb42>
 8007040:	461a      	mov	r2, r3
 8007042:	4601      	mov	r1, r0
 8007044:	4658      	mov	r0, fp
 8007046:	f000 fbe5 	bl	8007814 <__pow5mult>
 800704a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800704c:	4604      	mov	r4, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	f300 808f 	bgt.w	8007172 <_dtoa_r+0x8e2>
 8007054:	9b02      	ldr	r3, [sp, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 8087 	bne.w	800716a <_dtoa_r+0x8da>
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007062:	2b00      	cmp	r3, #0
 8007064:	f040 8083 	bne.w	800716e <_dtoa_r+0x8de>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800706e:	0d1b      	lsrs	r3, r3, #20
 8007070:	051b      	lsls	r3, r3, #20
 8007072:	b12b      	cbz	r3, 8007080 <_dtoa_r+0x7f0>
 8007074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007076:	f108 0801 	add.w	r8, r8, #1
 800707a:	3301      	adds	r3, #1
 800707c:	9309      	str	r3, [sp, #36]	@ 0x24
 800707e:	2301      	movs	r3, #1
 8007080:	930a      	str	r3, [sp, #40]	@ 0x28
 8007082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 81aa 	beq.w	80073de <_dtoa_r+0xb4e>
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007090:	6918      	ldr	r0, [r3, #16]
 8007092:	f000 fab5 	bl	8007600 <__hi0bits>
 8007096:	f1c0 0020 	rsb	r0, r0, #32
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	4418      	add	r0, r3
 800709e:	f010 001f 	ands.w	r0, r0, #31
 80070a2:	d071      	beq.n	8007188 <_dtoa_r+0x8f8>
 80070a4:	f1c0 0320 	rsb	r3, r0, #32
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	dd65      	ble.n	8007178 <_dtoa_r+0x8e8>
 80070ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ae:	f1c0 001c 	rsb	r0, r0, #28
 80070b2:	4403      	add	r3, r0
 80070b4:	4480      	add	r8, r0
 80070b6:	4406      	add	r6, r0
 80070b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ba:	f1b8 0f00 	cmp.w	r8, #0
 80070be:	dd05      	ble.n	80070cc <_dtoa_r+0x83c>
 80070c0:	4649      	mov	r1, r9
 80070c2:	4642      	mov	r2, r8
 80070c4:	4658      	mov	r0, fp
 80070c6:	f000 fbff 	bl	80078c8 <__lshift>
 80070ca:	4681      	mov	r9, r0
 80070cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dd05      	ble.n	80070de <_dtoa_r+0x84e>
 80070d2:	4621      	mov	r1, r4
 80070d4:	461a      	mov	r2, r3
 80070d6:	4658      	mov	r0, fp
 80070d8:	f000 fbf6 	bl	80078c8 <__lshift>
 80070dc:	4604      	mov	r4, r0
 80070de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d053      	beq.n	800718c <_dtoa_r+0x8fc>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4648      	mov	r0, r9
 80070e8:	f000 fc5a 	bl	80079a0 <__mcmp>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	da4d      	bge.n	800718c <_dtoa_r+0x8fc>
 80070f0:	1e7b      	subs	r3, r7, #1
 80070f2:	4649      	mov	r1, r9
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	220a      	movs	r2, #10
 80070f8:	2300      	movs	r3, #0
 80070fa:	4658      	mov	r0, fp
 80070fc:	f000 fa3a 	bl	8007574 <__multadd>
 8007100:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007102:	4681      	mov	r9, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 816c 	beq.w	80073e2 <_dtoa_r+0xb52>
 800710a:	2300      	movs	r3, #0
 800710c:	4629      	mov	r1, r5
 800710e:	220a      	movs	r2, #10
 8007110:	4658      	mov	r0, fp
 8007112:	f000 fa2f 	bl	8007574 <__multadd>
 8007116:	9b08      	ldr	r3, [sp, #32]
 8007118:	4605      	mov	r5, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	dc61      	bgt.n	80071e2 <_dtoa_r+0x952>
 800711e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007120:	2b02      	cmp	r3, #2
 8007122:	dc3b      	bgt.n	800719c <_dtoa_r+0x90c>
 8007124:	e05d      	b.n	80071e2 <_dtoa_r+0x952>
 8007126:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007128:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800712c:	e746      	b.n	8006fbc <_dtoa_r+0x72c>
 800712e:	9b07      	ldr	r3, [sp, #28]
 8007130:	1e5c      	subs	r4, r3, #1
 8007132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007134:	42a3      	cmp	r3, r4
 8007136:	bfbf      	itttt	lt
 8007138:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800713a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800713c:	1ae3      	sublt	r3, r4, r3
 800713e:	18d2      	addlt	r2, r2, r3
 8007140:	bfa8      	it	ge
 8007142:	1b1c      	subge	r4, r3, r4
 8007144:	9b07      	ldr	r3, [sp, #28]
 8007146:	bfbe      	ittt	lt
 8007148:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800714a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800714c:	2400      	movlt	r4, #0
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfb5      	itete	lt
 8007152:	eba8 0603 	sublt.w	r6, r8, r3
 8007156:	4646      	movge	r6, r8
 8007158:	2300      	movlt	r3, #0
 800715a:	9b07      	ldrge	r3, [sp, #28]
 800715c:	e730      	b.n	8006fc0 <_dtoa_r+0x730>
 800715e:	4646      	mov	r6, r8
 8007160:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007162:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007164:	e735      	b.n	8006fd2 <_dtoa_r+0x742>
 8007166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007168:	e75c      	b.n	8007024 <_dtoa_r+0x794>
 800716a:	2300      	movs	r3, #0
 800716c:	e788      	b.n	8007080 <_dtoa_r+0x7f0>
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	e786      	b.n	8007080 <_dtoa_r+0x7f0>
 8007172:	2300      	movs	r3, #0
 8007174:	930a      	str	r3, [sp, #40]	@ 0x28
 8007176:	e788      	b.n	800708a <_dtoa_r+0x7fa>
 8007178:	d09f      	beq.n	80070ba <_dtoa_r+0x82a>
 800717a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800717c:	331c      	adds	r3, #28
 800717e:	441a      	add	r2, r3
 8007180:	4498      	add	r8, r3
 8007182:	441e      	add	r6, r3
 8007184:	9209      	str	r2, [sp, #36]	@ 0x24
 8007186:	e798      	b.n	80070ba <_dtoa_r+0x82a>
 8007188:	4603      	mov	r3, r0
 800718a:	e7f6      	b.n	800717a <_dtoa_r+0x8ea>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	9704      	str	r7, [sp, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	dc20      	bgt.n	80071d6 <_dtoa_r+0x946>
 8007194:	9308      	str	r3, [sp, #32]
 8007196:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007198:	2b02      	cmp	r3, #2
 800719a:	dd1e      	ble.n	80071da <_dtoa_r+0x94a>
 800719c:	9b08      	ldr	r3, [sp, #32]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f47f aebc 	bne.w	8006f1c <_dtoa_r+0x68c>
 80071a4:	4621      	mov	r1, r4
 80071a6:	2205      	movs	r2, #5
 80071a8:	4658      	mov	r0, fp
 80071aa:	f000 f9e3 	bl	8007574 <__multadd>
 80071ae:	4601      	mov	r1, r0
 80071b0:	4604      	mov	r4, r0
 80071b2:	4648      	mov	r0, r9
 80071b4:	f000 fbf4 	bl	80079a0 <__mcmp>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f77f aeaf 	ble.w	8006f1c <_dtoa_r+0x68c>
 80071be:	2331      	movs	r3, #49	@ 0x31
 80071c0:	4656      	mov	r6, sl
 80071c2:	f806 3b01 	strb.w	r3, [r6], #1
 80071c6:	9b04      	ldr	r3, [sp, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	e6aa      	b.n	8006f24 <_dtoa_r+0x694>
 80071ce:	9c07      	ldr	r4, [sp, #28]
 80071d0:	9704      	str	r7, [sp, #16]
 80071d2:	4625      	mov	r5, r4
 80071d4:	e7f3      	b.n	80071be <_dtoa_r+0x92e>
 80071d6:	9b07      	ldr	r3, [sp, #28]
 80071d8:	9308      	str	r3, [sp, #32]
 80071da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8104 	beq.w	80073ea <_dtoa_r+0xb5a>
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	dd05      	ble.n	80071f2 <_dtoa_r+0x962>
 80071e6:	4629      	mov	r1, r5
 80071e8:	4632      	mov	r2, r6
 80071ea:	4658      	mov	r0, fp
 80071ec:	f000 fb6c 	bl	80078c8 <__lshift>
 80071f0:	4605      	mov	r5, r0
 80071f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d05a      	beq.n	80072ae <_dtoa_r+0xa1e>
 80071f8:	4658      	mov	r0, fp
 80071fa:	6869      	ldr	r1, [r5, #4]
 80071fc:	f000 f958 	bl	80074b0 <_Balloc>
 8007200:	4606      	mov	r6, r0
 8007202:	b928      	cbnz	r0, 8007210 <_dtoa_r+0x980>
 8007204:	4602      	mov	r2, r0
 8007206:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800720a:	4b83      	ldr	r3, [pc, #524]	@ (8007418 <_dtoa_r+0xb88>)
 800720c:	f7ff bb54 	b.w	80068b8 <_dtoa_r+0x28>
 8007210:	692a      	ldr	r2, [r5, #16]
 8007212:	f105 010c 	add.w	r1, r5, #12
 8007216:	3202      	adds	r2, #2
 8007218:	0092      	lsls	r2, r2, #2
 800721a:	300c      	adds	r0, #12
 800721c:	f7ff fa81 	bl	8006722 <memcpy>
 8007220:	2201      	movs	r2, #1
 8007222:	4631      	mov	r1, r6
 8007224:	4658      	mov	r0, fp
 8007226:	f000 fb4f 	bl	80078c8 <__lshift>
 800722a:	462f      	mov	r7, r5
 800722c:	4605      	mov	r5, r0
 800722e:	f10a 0301 	add.w	r3, sl, #1
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	9b08      	ldr	r3, [sp, #32]
 8007236:	4453      	add	r3, sl
 8007238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800723a:	9b02      	ldr	r3, [sp, #8]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	930a      	str	r3, [sp, #40]	@ 0x28
 8007242:	9b07      	ldr	r3, [sp, #28]
 8007244:	4621      	mov	r1, r4
 8007246:	3b01      	subs	r3, #1
 8007248:	4648      	mov	r0, r9
 800724a:	9302      	str	r3, [sp, #8]
 800724c:	f7ff fa96 	bl	800677c <quorem>
 8007250:	4639      	mov	r1, r7
 8007252:	9008      	str	r0, [sp, #32]
 8007254:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007258:	4648      	mov	r0, r9
 800725a:	f000 fba1 	bl	80079a0 <__mcmp>
 800725e:	462a      	mov	r2, r5
 8007260:	9009      	str	r0, [sp, #36]	@ 0x24
 8007262:	4621      	mov	r1, r4
 8007264:	4658      	mov	r0, fp
 8007266:	f000 fbb7 	bl	80079d8 <__mdiff>
 800726a:	68c2      	ldr	r2, [r0, #12]
 800726c:	4606      	mov	r6, r0
 800726e:	bb02      	cbnz	r2, 80072b2 <_dtoa_r+0xa22>
 8007270:	4601      	mov	r1, r0
 8007272:	4648      	mov	r0, r9
 8007274:	f000 fb94 	bl	80079a0 <__mcmp>
 8007278:	4602      	mov	r2, r0
 800727a:	4631      	mov	r1, r6
 800727c:	4658      	mov	r0, fp
 800727e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007280:	f000 f956 	bl	8007530 <_Bfree>
 8007284:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007286:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007288:	9e07      	ldr	r6, [sp, #28]
 800728a:	ea43 0102 	orr.w	r1, r3, r2
 800728e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007290:	4319      	orrs	r1, r3
 8007292:	d110      	bne.n	80072b6 <_dtoa_r+0xa26>
 8007294:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007298:	d029      	beq.n	80072ee <_dtoa_r+0xa5e>
 800729a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729c:	2b00      	cmp	r3, #0
 800729e:	dd02      	ble.n	80072a6 <_dtoa_r+0xa16>
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80072a6:	9b02      	ldr	r3, [sp, #8]
 80072a8:	f883 8000 	strb.w	r8, [r3]
 80072ac:	e63b      	b.n	8006f26 <_dtoa_r+0x696>
 80072ae:	4628      	mov	r0, r5
 80072b0:	e7bb      	b.n	800722a <_dtoa_r+0x99a>
 80072b2:	2201      	movs	r2, #1
 80072b4:	e7e1      	b.n	800727a <_dtoa_r+0x9ea>
 80072b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	db04      	blt.n	80072c6 <_dtoa_r+0xa36>
 80072bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80072be:	430b      	orrs	r3, r1
 80072c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072c2:	430b      	orrs	r3, r1
 80072c4:	d120      	bne.n	8007308 <_dtoa_r+0xa78>
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	dded      	ble.n	80072a6 <_dtoa_r+0xa16>
 80072ca:	4649      	mov	r1, r9
 80072cc:	2201      	movs	r2, #1
 80072ce:	4658      	mov	r0, fp
 80072d0:	f000 fafa 	bl	80078c8 <__lshift>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4681      	mov	r9, r0
 80072d8:	f000 fb62 	bl	80079a0 <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	dc03      	bgt.n	80072e8 <_dtoa_r+0xa58>
 80072e0:	d1e1      	bne.n	80072a6 <_dtoa_r+0xa16>
 80072e2:	f018 0f01 	tst.w	r8, #1
 80072e6:	d0de      	beq.n	80072a6 <_dtoa_r+0xa16>
 80072e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072ec:	d1d8      	bne.n	80072a0 <_dtoa_r+0xa10>
 80072ee:	2339      	movs	r3, #57	@ 0x39
 80072f0:	9a02      	ldr	r2, [sp, #8]
 80072f2:	7013      	strb	r3, [r2, #0]
 80072f4:	4633      	mov	r3, r6
 80072f6:	461e      	mov	r6, r3
 80072f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	2a39      	cmp	r2, #57	@ 0x39
 8007300:	d052      	beq.n	80073a8 <_dtoa_r+0xb18>
 8007302:	3201      	adds	r2, #1
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e60e      	b.n	8006f26 <_dtoa_r+0x696>
 8007308:	2a00      	cmp	r2, #0
 800730a:	dd07      	ble.n	800731c <_dtoa_r+0xa8c>
 800730c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007310:	d0ed      	beq.n	80072ee <_dtoa_r+0xa5e>
 8007312:	9a02      	ldr	r2, [sp, #8]
 8007314:	f108 0301 	add.w	r3, r8, #1
 8007318:	7013      	strb	r3, [r2, #0]
 800731a:	e604      	b.n	8006f26 <_dtoa_r+0x696>
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	9a07      	ldr	r2, [sp, #28]
 8007320:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007326:	4293      	cmp	r3, r2
 8007328:	d028      	beq.n	800737c <_dtoa_r+0xaec>
 800732a:	4649      	mov	r1, r9
 800732c:	2300      	movs	r3, #0
 800732e:	220a      	movs	r2, #10
 8007330:	4658      	mov	r0, fp
 8007332:	f000 f91f 	bl	8007574 <__multadd>
 8007336:	42af      	cmp	r7, r5
 8007338:	4681      	mov	r9, r0
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	f04f 020a 	mov.w	r2, #10
 8007342:	4639      	mov	r1, r7
 8007344:	4658      	mov	r0, fp
 8007346:	d107      	bne.n	8007358 <_dtoa_r+0xac8>
 8007348:	f000 f914 	bl	8007574 <__multadd>
 800734c:	4607      	mov	r7, r0
 800734e:	4605      	mov	r5, r0
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	3301      	adds	r3, #1
 8007354:	9307      	str	r3, [sp, #28]
 8007356:	e774      	b.n	8007242 <_dtoa_r+0x9b2>
 8007358:	f000 f90c 	bl	8007574 <__multadd>
 800735c:	4629      	mov	r1, r5
 800735e:	4607      	mov	r7, r0
 8007360:	2300      	movs	r3, #0
 8007362:	220a      	movs	r2, #10
 8007364:	4658      	mov	r0, fp
 8007366:	f000 f905 	bl	8007574 <__multadd>
 800736a:	4605      	mov	r5, r0
 800736c:	e7f0      	b.n	8007350 <_dtoa_r+0xac0>
 800736e:	9b08      	ldr	r3, [sp, #32]
 8007370:	2700      	movs	r7, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	bfcc      	ite	gt
 8007376:	461e      	movgt	r6, r3
 8007378:	2601      	movle	r6, #1
 800737a:	4456      	add	r6, sl
 800737c:	4649      	mov	r1, r9
 800737e:	2201      	movs	r2, #1
 8007380:	4658      	mov	r0, fp
 8007382:	f000 faa1 	bl	80078c8 <__lshift>
 8007386:	4621      	mov	r1, r4
 8007388:	4681      	mov	r9, r0
 800738a:	f000 fb09 	bl	80079a0 <__mcmp>
 800738e:	2800      	cmp	r0, #0
 8007390:	dcb0      	bgt.n	80072f4 <_dtoa_r+0xa64>
 8007392:	d102      	bne.n	800739a <_dtoa_r+0xb0a>
 8007394:	f018 0f01 	tst.w	r8, #1
 8007398:	d1ac      	bne.n	80072f4 <_dtoa_r+0xa64>
 800739a:	4633      	mov	r3, r6
 800739c:	461e      	mov	r6, r3
 800739e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073a2:	2a30      	cmp	r2, #48	@ 0x30
 80073a4:	d0fa      	beq.n	800739c <_dtoa_r+0xb0c>
 80073a6:	e5be      	b.n	8006f26 <_dtoa_r+0x696>
 80073a8:	459a      	cmp	sl, r3
 80073aa:	d1a4      	bne.n	80072f6 <_dtoa_r+0xa66>
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	3301      	adds	r3, #1
 80073b0:	9304      	str	r3, [sp, #16]
 80073b2:	2331      	movs	r3, #49	@ 0x31
 80073b4:	f88a 3000 	strb.w	r3, [sl]
 80073b8:	e5b5      	b.n	8006f26 <_dtoa_r+0x696>
 80073ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800741c <_dtoa_r+0xb8c>
 80073c0:	b11b      	cbz	r3, 80073ca <_dtoa_r+0xb3a>
 80073c2:	f10a 0308 	add.w	r3, sl, #8
 80073c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	4650      	mov	r0, sl
 80073cc:	b017      	add	sp, #92	@ 0x5c
 80073ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	f77f ae3d 	ble.w	8007054 <_dtoa_r+0x7c4>
 80073da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80073de:	2001      	movs	r0, #1
 80073e0:	e65b      	b.n	800709a <_dtoa_r+0x80a>
 80073e2:	9b08      	ldr	r3, [sp, #32]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f77f aed6 	ble.w	8007196 <_dtoa_r+0x906>
 80073ea:	4656      	mov	r6, sl
 80073ec:	4621      	mov	r1, r4
 80073ee:	4648      	mov	r0, r9
 80073f0:	f7ff f9c4 	bl	800677c <quorem>
 80073f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073f8:	9b08      	ldr	r3, [sp, #32]
 80073fa:	f806 8b01 	strb.w	r8, [r6], #1
 80073fe:	eba6 020a 	sub.w	r2, r6, sl
 8007402:	4293      	cmp	r3, r2
 8007404:	ddb3      	ble.n	800736e <_dtoa_r+0xade>
 8007406:	4649      	mov	r1, r9
 8007408:	2300      	movs	r3, #0
 800740a:	220a      	movs	r2, #10
 800740c:	4658      	mov	r0, fp
 800740e:	f000 f8b1 	bl	8007574 <__multadd>
 8007412:	4681      	mov	r9, r0
 8007414:	e7ea      	b.n	80073ec <_dtoa_r+0xb5c>
 8007416:	bf00      	nop
 8007418:	080088c6 	.word	0x080088c6
 800741c:	0800884a 	.word	0x0800884a

08007420 <_free_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4605      	mov	r5, r0
 8007424:	2900      	cmp	r1, #0
 8007426:	d040      	beq.n	80074aa <_free_r+0x8a>
 8007428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800742c:	1f0c      	subs	r4, r1, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfb8      	it	lt
 8007432:	18e4      	addlt	r4, r4, r3
 8007434:	f7fe fa66 	bl	8005904 <__malloc_lock>
 8007438:	4a1c      	ldr	r2, [pc, #112]	@ (80074ac <_free_r+0x8c>)
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	b933      	cbnz	r3, 800744c <_free_r+0x2c>
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	6014      	str	r4, [r2, #0]
 8007442:	4628      	mov	r0, r5
 8007444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007448:	f7fe ba62 	b.w	8005910 <__malloc_unlock>
 800744c:	42a3      	cmp	r3, r4
 800744e:	d908      	bls.n	8007462 <_free_r+0x42>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf01      	itttt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	1809      	addeq	r1, r1, r0
 800745e:	6021      	streq	r1, [r4, #0]
 8007460:	e7ed      	b.n	800743e <_free_r+0x1e>
 8007462:	461a      	mov	r2, r3
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b10b      	cbz	r3, 800746c <_free_r+0x4c>
 8007468:	42a3      	cmp	r3, r4
 800746a:	d9fa      	bls.n	8007462 <_free_r+0x42>
 800746c:	6811      	ldr	r1, [r2, #0]
 800746e:	1850      	adds	r0, r2, r1
 8007470:	42a0      	cmp	r0, r4
 8007472:	d10b      	bne.n	800748c <_free_r+0x6c>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	4401      	add	r1, r0
 8007478:	1850      	adds	r0, r2, r1
 800747a:	4283      	cmp	r3, r0
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	d1e0      	bne.n	8007442 <_free_r+0x22>
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	4408      	add	r0, r1
 8007486:	6010      	str	r0, [r2, #0]
 8007488:	6053      	str	r3, [r2, #4]
 800748a:	e7da      	b.n	8007442 <_free_r+0x22>
 800748c:	d902      	bls.n	8007494 <_free_r+0x74>
 800748e:	230c      	movs	r3, #12
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	e7d6      	b.n	8007442 <_free_r+0x22>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf01      	itttt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	1809      	addeq	r1, r1, r0
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6054      	str	r4, [r2, #4]
 80074a8:	e7cb      	b.n	8007442 <_free_r+0x22>
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	200014b8 	.word	0x200014b8

080074b0 <_Balloc>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	69c6      	ldr	r6, [r0, #28]
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	b976      	cbnz	r6, 80074d8 <_Balloc+0x28>
 80074ba:	2010      	movs	r0, #16
 80074bc:	f7fe f978 	bl	80057b0 <malloc>
 80074c0:	4602      	mov	r2, r0
 80074c2:	61e0      	str	r0, [r4, #28]
 80074c4:	b920      	cbnz	r0, 80074d0 <_Balloc+0x20>
 80074c6:	216b      	movs	r1, #107	@ 0x6b
 80074c8:	4b17      	ldr	r3, [pc, #92]	@ (8007528 <_Balloc+0x78>)
 80074ca:	4818      	ldr	r0, [pc, #96]	@ (800752c <_Balloc+0x7c>)
 80074cc:	f7ff f938 	bl	8006740 <__assert_func>
 80074d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074d4:	6006      	str	r6, [r0, #0]
 80074d6:	60c6      	str	r6, [r0, #12]
 80074d8:	69e6      	ldr	r6, [r4, #28]
 80074da:	68f3      	ldr	r3, [r6, #12]
 80074dc:	b183      	cbz	r3, 8007500 <_Balloc+0x50>
 80074de:	69e3      	ldr	r3, [r4, #28]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074e6:	b9b8      	cbnz	r0, 8007518 <_Balloc+0x68>
 80074e8:	2101      	movs	r1, #1
 80074ea:	fa01 f605 	lsl.w	r6, r1, r5
 80074ee:	1d72      	adds	r2, r6, #5
 80074f0:	4620      	mov	r0, r4
 80074f2:	0092      	lsls	r2, r2, #2
 80074f4:	f000 fde1 	bl	80080ba <_calloc_r>
 80074f8:	b160      	cbz	r0, 8007514 <_Balloc+0x64>
 80074fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074fe:	e00e      	b.n	800751e <_Balloc+0x6e>
 8007500:	2221      	movs	r2, #33	@ 0x21
 8007502:	2104      	movs	r1, #4
 8007504:	4620      	mov	r0, r4
 8007506:	f000 fdd8 	bl	80080ba <_calloc_r>
 800750a:	69e3      	ldr	r3, [r4, #28]
 800750c:	60f0      	str	r0, [r6, #12]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e4      	bne.n	80074de <_Balloc+0x2e>
 8007514:	2000      	movs	r0, #0
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	6802      	ldr	r2, [r0, #0]
 800751a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800751e:	2300      	movs	r3, #0
 8007520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007524:	e7f7      	b.n	8007516 <_Balloc+0x66>
 8007526:	bf00      	nop
 8007528:	08008857 	.word	0x08008857
 800752c:	080088d7 	.word	0x080088d7

08007530 <_Bfree>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	69c6      	ldr	r6, [r0, #28]
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	b976      	cbnz	r6, 8007558 <_Bfree+0x28>
 800753a:	2010      	movs	r0, #16
 800753c:	f7fe f938 	bl	80057b0 <malloc>
 8007540:	4602      	mov	r2, r0
 8007542:	61e8      	str	r0, [r5, #28]
 8007544:	b920      	cbnz	r0, 8007550 <_Bfree+0x20>
 8007546:	218f      	movs	r1, #143	@ 0x8f
 8007548:	4b08      	ldr	r3, [pc, #32]	@ (800756c <_Bfree+0x3c>)
 800754a:	4809      	ldr	r0, [pc, #36]	@ (8007570 <_Bfree+0x40>)
 800754c:	f7ff f8f8 	bl	8006740 <__assert_func>
 8007550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007554:	6006      	str	r6, [r0, #0]
 8007556:	60c6      	str	r6, [r0, #12]
 8007558:	b13c      	cbz	r4, 800756a <_Bfree+0x3a>
 800755a:	69eb      	ldr	r3, [r5, #28]
 800755c:	6862      	ldr	r2, [r4, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007564:	6021      	str	r1, [r4, #0]
 8007566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	08008857 	.word	0x08008857
 8007570:	080088d7 	.word	0x080088d7

08007574 <__multadd>:
 8007574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007578:	4607      	mov	r7, r0
 800757a:	460c      	mov	r4, r1
 800757c:	461e      	mov	r6, r3
 800757e:	2000      	movs	r0, #0
 8007580:	690d      	ldr	r5, [r1, #16]
 8007582:	f101 0c14 	add.w	ip, r1, #20
 8007586:	f8dc 3000 	ldr.w	r3, [ip]
 800758a:	3001      	adds	r0, #1
 800758c:	b299      	uxth	r1, r3
 800758e:	fb02 6101 	mla	r1, r2, r1, r6
 8007592:	0c1e      	lsrs	r6, r3, #16
 8007594:	0c0b      	lsrs	r3, r1, #16
 8007596:	fb02 3306 	mla	r3, r2, r6, r3
 800759a:	b289      	uxth	r1, r1
 800759c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075a0:	4285      	cmp	r5, r0
 80075a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075a6:	f84c 1b04 	str.w	r1, [ip], #4
 80075aa:	dcec      	bgt.n	8007586 <__multadd+0x12>
 80075ac:	b30e      	cbz	r6, 80075f2 <__multadd+0x7e>
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	42ab      	cmp	r3, r5
 80075b2:	dc19      	bgt.n	80075e8 <__multadd+0x74>
 80075b4:	6861      	ldr	r1, [r4, #4]
 80075b6:	4638      	mov	r0, r7
 80075b8:	3101      	adds	r1, #1
 80075ba:	f7ff ff79 	bl	80074b0 <_Balloc>
 80075be:	4680      	mov	r8, r0
 80075c0:	b928      	cbnz	r0, 80075ce <__multadd+0x5a>
 80075c2:	4602      	mov	r2, r0
 80075c4:	21ba      	movs	r1, #186	@ 0xba
 80075c6:	4b0c      	ldr	r3, [pc, #48]	@ (80075f8 <__multadd+0x84>)
 80075c8:	480c      	ldr	r0, [pc, #48]	@ (80075fc <__multadd+0x88>)
 80075ca:	f7ff f8b9 	bl	8006740 <__assert_func>
 80075ce:	6922      	ldr	r2, [r4, #16]
 80075d0:	f104 010c 	add.w	r1, r4, #12
 80075d4:	3202      	adds	r2, #2
 80075d6:	0092      	lsls	r2, r2, #2
 80075d8:	300c      	adds	r0, #12
 80075da:	f7ff f8a2 	bl	8006722 <memcpy>
 80075de:	4621      	mov	r1, r4
 80075e0:	4638      	mov	r0, r7
 80075e2:	f7ff ffa5 	bl	8007530 <_Bfree>
 80075e6:	4644      	mov	r4, r8
 80075e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075ec:	3501      	adds	r5, #1
 80075ee:	615e      	str	r6, [r3, #20]
 80075f0:	6125      	str	r5, [r4, #16]
 80075f2:	4620      	mov	r0, r4
 80075f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f8:	080088c6 	.word	0x080088c6
 80075fc:	080088d7 	.word	0x080088d7

08007600 <__hi0bits>:
 8007600:	4603      	mov	r3, r0
 8007602:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007606:	bf3a      	itte	cc
 8007608:	0403      	lslcc	r3, r0, #16
 800760a:	2010      	movcc	r0, #16
 800760c:	2000      	movcs	r0, #0
 800760e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007612:	bf3c      	itt	cc
 8007614:	021b      	lslcc	r3, r3, #8
 8007616:	3008      	addcc	r0, #8
 8007618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800761c:	bf3c      	itt	cc
 800761e:	011b      	lslcc	r3, r3, #4
 8007620:	3004      	addcc	r0, #4
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007626:	bf3c      	itt	cc
 8007628:	009b      	lslcc	r3, r3, #2
 800762a:	3002      	addcc	r0, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	db05      	blt.n	800763c <__hi0bits+0x3c>
 8007630:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007634:	f100 0001 	add.w	r0, r0, #1
 8007638:	bf08      	it	eq
 800763a:	2020      	moveq	r0, #32
 800763c:	4770      	bx	lr

0800763e <__lo0bits>:
 800763e:	6803      	ldr	r3, [r0, #0]
 8007640:	4602      	mov	r2, r0
 8007642:	f013 0007 	ands.w	r0, r3, #7
 8007646:	d00b      	beq.n	8007660 <__lo0bits+0x22>
 8007648:	07d9      	lsls	r1, r3, #31
 800764a:	d421      	bmi.n	8007690 <__lo0bits+0x52>
 800764c:	0798      	lsls	r0, r3, #30
 800764e:	bf49      	itett	mi
 8007650:	085b      	lsrmi	r3, r3, #1
 8007652:	089b      	lsrpl	r3, r3, #2
 8007654:	2001      	movmi	r0, #1
 8007656:	6013      	strmi	r3, [r2, #0]
 8007658:	bf5c      	itt	pl
 800765a:	2002      	movpl	r0, #2
 800765c:	6013      	strpl	r3, [r2, #0]
 800765e:	4770      	bx	lr
 8007660:	b299      	uxth	r1, r3
 8007662:	b909      	cbnz	r1, 8007668 <__lo0bits+0x2a>
 8007664:	2010      	movs	r0, #16
 8007666:	0c1b      	lsrs	r3, r3, #16
 8007668:	b2d9      	uxtb	r1, r3
 800766a:	b909      	cbnz	r1, 8007670 <__lo0bits+0x32>
 800766c:	3008      	adds	r0, #8
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	0719      	lsls	r1, r3, #28
 8007672:	bf04      	itt	eq
 8007674:	091b      	lsreq	r3, r3, #4
 8007676:	3004      	addeq	r0, #4
 8007678:	0799      	lsls	r1, r3, #30
 800767a:	bf04      	itt	eq
 800767c:	089b      	lsreq	r3, r3, #2
 800767e:	3002      	addeq	r0, #2
 8007680:	07d9      	lsls	r1, r3, #31
 8007682:	d403      	bmi.n	800768c <__lo0bits+0x4e>
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	f100 0001 	add.w	r0, r0, #1
 800768a:	d003      	beq.n	8007694 <__lo0bits+0x56>
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	4770      	bx	lr
 8007690:	2000      	movs	r0, #0
 8007692:	4770      	bx	lr
 8007694:	2020      	movs	r0, #32
 8007696:	4770      	bx	lr

08007698 <__i2b>:
 8007698:	b510      	push	{r4, lr}
 800769a:	460c      	mov	r4, r1
 800769c:	2101      	movs	r1, #1
 800769e:	f7ff ff07 	bl	80074b0 <_Balloc>
 80076a2:	4602      	mov	r2, r0
 80076a4:	b928      	cbnz	r0, 80076b2 <__i2b+0x1a>
 80076a6:	f240 1145 	movw	r1, #325	@ 0x145
 80076aa:	4b04      	ldr	r3, [pc, #16]	@ (80076bc <__i2b+0x24>)
 80076ac:	4804      	ldr	r0, [pc, #16]	@ (80076c0 <__i2b+0x28>)
 80076ae:	f7ff f847 	bl	8006740 <__assert_func>
 80076b2:	2301      	movs	r3, #1
 80076b4:	6144      	str	r4, [r0, #20]
 80076b6:	6103      	str	r3, [r0, #16]
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	bf00      	nop
 80076bc:	080088c6 	.word	0x080088c6
 80076c0:	080088d7 	.word	0x080088d7

080076c4 <__multiply>:
 80076c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c8:	4614      	mov	r4, r2
 80076ca:	690a      	ldr	r2, [r1, #16]
 80076cc:	6923      	ldr	r3, [r4, #16]
 80076ce:	460f      	mov	r7, r1
 80076d0:	429a      	cmp	r2, r3
 80076d2:	bfa2      	ittt	ge
 80076d4:	4623      	movge	r3, r4
 80076d6:	460c      	movge	r4, r1
 80076d8:	461f      	movge	r7, r3
 80076da:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80076de:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	6861      	ldr	r1, [r4, #4]
 80076e6:	eb0a 0609 	add.w	r6, sl, r9
 80076ea:	42b3      	cmp	r3, r6
 80076ec:	b085      	sub	sp, #20
 80076ee:	bfb8      	it	lt
 80076f0:	3101      	addlt	r1, #1
 80076f2:	f7ff fedd 	bl	80074b0 <_Balloc>
 80076f6:	b930      	cbnz	r0, 8007706 <__multiply+0x42>
 80076f8:	4602      	mov	r2, r0
 80076fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80076fe:	4b43      	ldr	r3, [pc, #268]	@ (800780c <__multiply+0x148>)
 8007700:	4843      	ldr	r0, [pc, #268]	@ (8007810 <__multiply+0x14c>)
 8007702:	f7ff f81d 	bl	8006740 <__assert_func>
 8007706:	f100 0514 	add.w	r5, r0, #20
 800770a:	462b      	mov	r3, r5
 800770c:	2200      	movs	r2, #0
 800770e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007712:	4543      	cmp	r3, r8
 8007714:	d321      	bcc.n	800775a <__multiply+0x96>
 8007716:	f107 0114 	add.w	r1, r7, #20
 800771a:	f104 0214 	add.w	r2, r4, #20
 800771e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007722:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007726:	9302      	str	r3, [sp, #8]
 8007728:	1b13      	subs	r3, r2, r4
 800772a:	3b15      	subs	r3, #21
 800772c:	f023 0303 	bic.w	r3, r3, #3
 8007730:	3304      	adds	r3, #4
 8007732:	f104 0715 	add.w	r7, r4, #21
 8007736:	42ba      	cmp	r2, r7
 8007738:	bf38      	it	cc
 800773a:	2304      	movcc	r3, #4
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	9b02      	ldr	r3, [sp, #8]
 8007740:	9103      	str	r1, [sp, #12]
 8007742:	428b      	cmp	r3, r1
 8007744:	d80c      	bhi.n	8007760 <__multiply+0x9c>
 8007746:	2e00      	cmp	r6, #0
 8007748:	dd03      	ble.n	8007752 <__multiply+0x8e>
 800774a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800774e:	2b00      	cmp	r3, #0
 8007750:	d05a      	beq.n	8007808 <__multiply+0x144>
 8007752:	6106      	str	r6, [r0, #16]
 8007754:	b005      	add	sp, #20
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	f843 2b04 	str.w	r2, [r3], #4
 800775e:	e7d8      	b.n	8007712 <__multiply+0x4e>
 8007760:	f8b1 a000 	ldrh.w	sl, [r1]
 8007764:	f1ba 0f00 	cmp.w	sl, #0
 8007768:	d023      	beq.n	80077b2 <__multiply+0xee>
 800776a:	46a9      	mov	r9, r5
 800776c:	f04f 0c00 	mov.w	ip, #0
 8007770:	f104 0e14 	add.w	lr, r4, #20
 8007774:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007778:	f8d9 3000 	ldr.w	r3, [r9]
 800777c:	fa1f fb87 	uxth.w	fp, r7
 8007780:	b29b      	uxth	r3, r3
 8007782:	fb0a 330b 	mla	r3, sl, fp, r3
 8007786:	4463      	add	r3, ip
 8007788:	f8d9 c000 	ldr.w	ip, [r9]
 800778c:	0c3f      	lsrs	r7, r7, #16
 800778e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007792:	fb0a c707 	mla	r7, sl, r7, ip
 8007796:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077a0:	4572      	cmp	r2, lr
 80077a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077a6:	f849 3b04 	str.w	r3, [r9], #4
 80077aa:	d8e3      	bhi.n	8007774 <__multiply+0xb0>
 80077ac:	9b01      	ldr	r3, [sp, #4]
 80077ae:	f845 c003 	str.w	ip, [r5, r3]
 80077b2:	9b03      	ldr	r3, [sp, #12]
 80077b4:	3104      	adds	r1, #4
 80077b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077ba:	f1b9 0f00 	cmp.w	r9, #0
 80077be:	d021      	beq.n	8007804 <__multiply+0x140>
 80077c0:	46ae      	mov	lr, r5
 80077c2:	f04f 0a00 	mov.w	sl, #0
 80077c6:	682b      	ldr	r3, [r5, #0]
 80077c8:	f104 0c14 	add.w	ip, r4, #20
 80077cc:	f8bc b000 	ldrh.w	fp, [ip]
 80077d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	fb09 770b 	mla	r7, r9, fp, r7
 80077da:	4457      	add	r7, sl
 80077dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077e0:	f84e 3b04 	str.w	r3, [lr], #4
 80077e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ec:	f8be 3000 	ldrh.w	r3, [lr]
 80077f0:	4562      	cmp	r2, ip
 80077f2:	fb09 330a 	mla	r3, r9, sl, r3
 80077f6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80077fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077fe:	d8e5      	bhi.n	80077cc <__multiply+0x108>
 8007800:	9f01      	ldr	r7, [sp, #4]
 8007802:	51eb      	str	r3, [r5, r7]
 8007804:	3504      	adds	r5, #4
 8007806:	e79a      	b.n	800773e <__multiply+0x7a>
 8007808:	3e01      	subs	r6, #1
 800780a:	e79c      	b.n	8007746 <__multiply+0x82>
 800780c:	080088c6 	.word	0x080088c6
 8007810:	080088d7 	.word	0x080088d7

08007814 <__pow5mult>:
 8007814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007818:	4615      	mov	r5, r2
 800781a:	f012 0203 	ands.w	r2, r2, #3
 800781e:	4607      	mov	r7, r0
 8007820:	460e      	mov	r6, r1
 8007822:	d007      	beq.n	8007834 <__pow5mult+0x20>
 8007824:	4c25      	ldr	r4, [pc, #148]	@ (80078bc <__pow5mult+0xa8>)
 8007826:	3a01      	subs	r2, #1
 8007828:	2300      	movs	r3, #0
 800782a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800782e:	f7ff fea1 	bl	8007574 <__multadd>
 8007832:	4606      	mov	r6, r0
 8007834:	10ad      	asrs	r5, r5, #2
 8007836:	d03d      	beq.n	80078b4 <__pow5mult+0xa0>
 8007838:	69fc      	ldr	r4, [r7, #28]
 800783a:	b97c      	cbnz	r4, 800785c <__pow5mult+0x48>
 800783c:	2010      	movs	r0, #16
 800783e:	f7fd ffb7 	bl	80057b0 <malloc>
 8007842:	4602      	mov	r2, r0
 8007844:	61f8      	str	r0, [r7, #28]
 8007846:	b928      	cbnz	r0, 8007854 <__pow5mult+0x40>
 8007848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800784c:	4b1c      	ldr	r3, [pc, #112]	@ (80078c0 <__pow5mult+0xac>)
 800784e:	481d      	ldr	r0, [pc, #116]	@ (80078c4 <__pow5mult+0xb0>)
 8007850:	f7fe ff76 	bl	8006740 <__assert_func>
 8007854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007858:	6004      	str	r4, [r0, #0]
 800785a:	60c4      	str	r4, [r0, #12]
 800785c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007864:	b94c      	cbnz	r4, 800787a <__pow5mult+0x66>
 8007866:	f240 2171 	movw	r1, #625	@ 0x271
 800786a:	4638      	mov	r0, r7
 800786c:	f7ff ff14 	bl	8007698 <__i2b>
 8007870:	2300      	movs	r3, #0
 8007872:	4604      	mov	r4, r0
 8007874:	f8c8 0008 	str.w	r0, [r8, #8]
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	f04f 0900 	mov.w	r9, #0
 800787e:	07eb      	lsls	r3, r5, #31
 8007880:	d50a      	bpl.n	8007898 <__pow5mult+0x84>
 8007882:	4631      	mov	r1, r6
 8007884:	4622      	mov	r2, r4
 8007886:	4638      	mov	r0, r7
 8007888:	f7ff ff1c 	bl	80076c4 <__multiply>
 800788c:	4680      	mov	r8, r0
 800788e:	4631      	mov	r1, r6
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff fe4d 	bl	8007530 <_Bfree>
 8007896:	4646      	mov	r6, r8
 8007898:	106d      	asrs	r5, r5, #1
 800789a:	d00b      	beq.n	80078b4 <__pow5mult+0xa0>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	b938      	cbnz	r0, 80078b0 <__pow5mult+0x9c>
 80078a0:	4622      	mov	r2, r4
 80078a2:	4621      	mov	r1, r4
 80078a4:	4638      	mov	r0, r7
 80078a6:	f7ff ff0d 	bl	80076c4 <__multiply>
 80078aa:	6020      	str	r0, [r4, #0]
 80078ac:	f8c0 9000 	str.w	r9, [r0]
 80078b0:	4604      	mov	r4, r0
 80078b2:	e7e4      	b.n	800787e <__pow5mult+0x6a>
 80078b4:	4630      	mov	r0, r6
 80078b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ba:	bf00      	nop
 80078bc:	08008930 	.word	0x08008930
 80078c0:	08008857 	.word	0x08008857
 80078c4:	080088d7 	.word	0x080088d7

080078c8 <__lshift>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	4607      	mov	r7, r0
 80078d0:	4691      	mov	r9, r2
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	6849      	ldr	r1, [r1, #4]
 80078d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078da:	68a3      	ldr	r3, [r4, #8]
 80078dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078e0:	f108 0601 	add.w	r6, r8, #1
 80078e4:	42b3      	cmp	r3, r6
 80078e6:	db0b      	blt.n	8007900 <__lshift+0x38>
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff fde1 	bl	80074b0 <_Balloc>
 80078ee:	4605      	mov	r5, r0
 80078f0:	b948      	cbnz	r0, 8007906 <__lshift+0x3e>
 80078f2:	4602      	mov	r2, r0
 80078f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80078f8:	4b27      	ldr	r3, [pc, #156]	@ (8007998 <__lshift+0xd0>)
 80078fa:	4828      	ldr	r0, [pc, #160]	@ (800799c <__lshift+0xd4>)
 80078fc:	f7fe ff20 	bl	8006740 <__assert_func>
 8007900:	3101      	adds	r1, #1
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	e7ee      	b.n	80078e4 <__lshift+0x1c>
 8007906:	2300      	movs	r3, #0
 8007908:	f100 0114 	add.w	r1, r0, #20
 800790c:	f100 0210 	add.w	r2, r0, #16
 8007910:	4618      	mov	r0, r3
 8007912:	4553      	cmp	r3, sl
 8007914:	db33      	blt.n	800797e <__lshift+0xb6>
 8007916:	6920      	ldr	r0, [r4, #16]
 8007918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800791c:	f104 0314 	add.w	r3, r4, #20
 8007920:	f019 091f 	ands.w	r9, r9, #31
 8007924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007928:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800792c:	d02b      	beq.n	8007986 <__lshift+0xbe>
 800792e:	468a      	mov	sl, r1
 8007930:	2200      	movs	r2, #0
 8007932:	f1c9 0e20 	rsb	lr, r9, #32
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	fa00 f009 	lsl.w	r0, r0, r9
 800793c:	4310      	orrs	r0, r2
 800793e:	f84a 0b04 	str.w	r0, [sl], #4
 8007942:	f853 2b04 	ldr.w	r2, [r3], #4
 8007946:	459c      	cmp	ip, r3
 8007948:	fa22 f20e 	lsr.w	r2, r2, lr
 800794c:	d8f3      	bhi.n	8007936 <__lshift+0x6e>
 800794e:	ebac 0304 	sub.w	r3, ip, r4
 8007952:	3b15      	subs	r3, #21
 8007954:	f023 0303 	bic.w	r3, r3, #3
 8007958:	3304      	adds	r3, #4
 800795a:	f104 0015 	add.w	r0, r4, #21
 800795e:	4584      	cmp	ip, r0
 8007960:	bf38      	it	cc
 8007962:	2304      	movcc	r3, #4
 8007964:	50ca      	str	r2, [r1, r3]
 8007966:	b10a      	cbz	r2, 800796c <__lshift+0xa4>
 8007968:	f108 0602 	add.w	r6, r8, #2
 800796c:	3e01      	subs	r6, #1
 800796e:	4638      	mov	r0, r7
 8007970:	4621      	mov	r1, r4
 8007972:	612e      	str	r6, [r5, #16]
 8007974:	f7ff fddc 	bl	8007530 <_Bfree>
 8007978:	4628      	mov	r0, r5
 800797a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007982:	3301      	adds	r3, #1
 8007984:	e7c5      	b.n	8007912 <__lshift+0x4a>
 8007986:	3904      	subs	r1, #4
 8007988:	f853 2b04 	ldr.w	r2, [r3], #4
 800798c:	459c      	cmp	ip, r3
 800798e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007992:	d8f9      	bhi.n	8007988 <__lshift+0xc0>
 8007994:	e7ea      	b.n	800796c <__lshift+0xa4>
 8007996:	bf00      	nop
 8007998:	080088c6 	.word	0x080088c6
 800799c:	080088d7 	.word	0x080088d7

080079a0 <__mcmp>:
 80079a0:	4603      	mov	r3, r0
 80079a2:	690a      	ldr	r2, [r1, #16]
 80079a4:	6900      	ldr	r0, [r0, #16]
 80079a6:	b530      	push	{r4, r5, lr}
 80079a8:	1a80      	subs	r0, r0, r2
 80079aa:	d10e      	bne.n	80079ca <__mcmp+0x2a>
 80079ac:	3314      	adds	r3, #20
 80079ae:	3114      	adds	r1, #20
 80079b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079c0:	4295      	cmp	r5, r2
 80079c2:	d003      	beq.n	80079cc <__mcmp+0x2c>
 80079c4:	d205      	bcs.n	80079d2 <__mcmp+0x32>
 80079c6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ca:	bd30      	pop	{r4, r5, pc}
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	d3f3      	bcc.n	80079b8 <__mcmp+0x18>
 80079d0:	e7fb      	b.n	80079ca <__mcmp+0x2a>
 80079d2:	2001      	movs	r0, #1
 80079d4:	e7f9      	b.n	80079ca <__mcmp+0x2a>
	...

080079d8 <__mdiff>:
 80079d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4689      	mov	r9, r1
 80079de:	4606      	mov	r6, r0
 80079e0:	4611      	mov	r1, r2
 80079e2:	4648      	mov	r0, r9
 80079e4:	4614      	mov	r4, r2
 80079e6:	f7ff ffdb 	bl	80079a0 <__mcmp>
 80079ea:	1e05      	subs	r5, r0, #0
 80079ec:	d112      	bne.n	8007a14 <__mdiff+0x3c>
 80079ee:	4629      	mov	r1, r5
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff fd5d 	bl	80074b0 <_Balloc>
 80079f6:	4602      	mov	r2, r0
 80079f8:	b928      	cbnz	r0, 8007a06 <__mdiff+0x2e>
 80079fa:	f240 2137 	movw	r1, #567	@ 0x237
 80079fe:	4b3e      	ldr	r3, [pc, #248]	@ (8007af8 <__mdiff+0x120>)
 8007a00:	483e      	ldr	r0, [pc, #248]	@ (8007afc <__mdiff+0x124>)
 8007a02:	f7fe fe9d 	bl	8006740 <__assert_func>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	b003      	add	sp, #12
 8007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a14:	bfbc      	itt	lt
 8007a16:	464b      	movlt	r3, r9
 8007a18:	46a1      	movlt	r9, r4
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a20:	bfba      	itte	lt
 8007a22:	461c      	movlt	r4, r3
 8007a24:	2501      	movlt	r5, #1
 8007a26:	2500      	movge	r5, #0
 8007a28:	f7ff fd42 	bl	80074b0 <_Balloc>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	b918      	cbnz	r0, 8007a38 <__mdiff+0x60>
 8007a30:	f240 2145 	movw	r1, #581	@ 0x245
 8007a34:	4b30      	ldr	r3, [pc, #192]	@ (8007af8 <__mdiff+0x120>)
 8007a36:	e7e3      	b.n	8007a00 <__mdiff+0x28>
 8007a38:	f100 0b14 	add.w	fp, r0, #20
 8007a3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a40:	f109 0310 	add.w	r3, r9, #16
 8007a44:	60c5      	str	r5, [r0, #12]
 8007a46:	f04f 0c00 	mov.w	ip, #0
 8007a4a:	f109 0514 	add.w	r5, r9, #20
 8007a4e:	46d9      	mov	r9, fp
 8007a50:	6926      	ldr	r6, [r4, #16]
 8007a52:	f104 0e14 	add.w	lr, r4, #20
 8007a56:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a5a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a6a:	b281      	uxth	r1, r0
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	fa1f f38a 	uxth.w	r3, sl
 8007a72:	1a5b      	subs	r3, r3, r1
 8007a74:	0c00      	lsrs	r0, r0, #16
 8007a76:	4463      	add	r3, ip
 8007a78:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a7c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a86:	4576      	cmp	r6, lr
 8007a88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a8c:	f849 3b04 	str.w	r3, [r9], #4
 8007a90:	d8e6      	bhi.n	8007a60 <__mdiff+0x88>
 8007a92:	1b33      	subs	r3, r6, r4
 8007a94:	3b15      	subs	r3, #21
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	3415      	adds	r4, #21
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	42a6      	cmp	r6, r4
 8007aa0:	bf38      	it	cc
 8007aa2:	2304      	movcc	r3, #4
 8007aa4:	441d      	add	r5, r3
 8007aa6:	445b      	add	r3, fp
 8007aa8:	461e      	mov	r6, r3
 8007aaa:	462c      	mov	r4, r5
 8007aac:	4544      	cmp	r4, r8
 8007aae:	d30e      	bcc.n	8007ace <__mdiff+0xf6>
 8007ab0:	f108 0103 	add.w	r1, r8, #3
 8007ab4:	1b49      	subs	r1, r1, r5
 8007ab6:	f021 0103 	bic.w	r1, r1, #3
 8007aba:	3d03      	subs	r5, #3
 8007abc:	45a8      	cmp	r8, r5
 8007abe:	bf38      	it	cc
 8007ac0:	2100      	movcc	r1, #0
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ac8:	b199      	cbz	r1, 8007af2 <__mdiff+0x11a>
 8007aca:	6117      	str	r7, [r2, #16]
 8007acc:	e79e      	b.n	8007a0c <__mdiff+0x34>
 8007ace:	46e6      	mov	lr, ip
 8007ad0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ad4:	fa1f fc81 	uxth.w	ip, r1
 8007ad8:	44f4      	add	ip, lr
 8007ada:	0c08      	lsrs	r0, r1, #16
 8007adc:	4471      	add	r1, lr
 8007ade:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ae2:	b289      	uxth	r1, r1
 8007ae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007aec:	f846 1b04 	str.w	r1, [r6], #4
 8007af0:	e7dc      	b.n	8007aac <__mdiff+0xd4>
 8007af2:	3f01      	subs	r7, #1
 8007af4:	e7e6      	b.n	8007ac4 <__mdiff+0xec>
 8007af6:	bf00      	nop
 8007af8:	080088c6 	.word	0x080088c6
 8007afc:	080088d7 	.word	0x080088d7

08007b00 <__d2b>:
 8007b00:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b04:	2101      	movs	r1, #1
 8007b06:	4690      	mov	r8, r2
 8007b08:	4699      	mov	r9, r3
 8007b0a:	9e08      	ldr	r6, [sp, #32]
 8007b0c:	f7ff fcd0 	bl	80074b0 <_Balloc>
 8007b10:	4604      	mov	r4, r0
 8007b12:	b930      	cbnz	r0, 8007b22 <__d2b+0x22>
 8007b14:	4602      	mov	r2, r0
 8007b16:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b1a:	4b23      	ldr	r3, [pc, #140]	@ (8007ba8 <__d2b+0xa8>)
 8007b1c:	4823      	ldr	r0, [pc, #140]	@ (8007bac <__d2b+0xac>)
 8007b1e:	f7fe fe0f 	bl	8006740 <__assert_func>
 8007b22:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b2a:	b10d      	cbz	r5, 8007b30 <__d2b+0x30>
 8007b2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	f1b8 0300 	subs.w	r3, r8, #0
 8007b36:	d024      	beq.n	8007b82 <__d2b+0x82>
 8007b38:	4668      	mov	r0, sp
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	f7ff fd7f 	bl	800763e <__lo0bits>
 8007b40:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b44:	b1d8      	cbz	r0, 8007b7e <__d2b+0x7e>
 8007b46:	f1c0 0320 	rsb	r3, r0, #32
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	40c2      	lsrs	r2, r0
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2201      	moveq	r2, #1
 8007b5e:	2202      	movne	r2, #2
 8007b60:	61a3      	str	r3, [r4, #24]
 8007b62:	6122      	str	r2, [r4, #16]
 8007b64:	b1ad      	cbz	r5, 8007b92 <__d2b+0x92>
 8007b66:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b6a:	4405      	add	r5, r0
 8007b6c:	6035      	str	r5, [r6, #0]
 8007b6e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b74:	6018      	str	r0, [r3, #0]
 8007b76:	4620      	mov	r0, r4
 8007b78:	b002      	add	sp, #8
 8007b7a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007b7e:	6161      	str	r1, [r4, #20]
 8007b80:	e7e9      	b.n	8007b56 <__d2b+0x56>
 8007b82:	a801      	add	r0, sp, #4
 8007b84:	f7ff fd5b 	bl	800763e <__lo0bits>
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	6163      	str	r3, [r4, #20]
 8007b8e:	3020      	adds	r0, #32
 8007b90:	e7e7      	b.n	8007b62 <__d2b+0x62>
 8007b92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b9a:	6030      	str	r0, [r6, #0]
 8007b9c:	6918      	ldr	r0, [r3, #16]
 8007b9e:	f7ff fd2f 	bl	8007600 <__hi0bits>
 8007ba2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ba6:	e7e4      	b.n	8007b72 <__d2b+0x72>
 8007ba8:	080088c6 	.word	0x080088c6
 8007bac:	080088d7 	.word	0x080088d7

08007bb0 <__sfputc_r>:
 8007bb0:	6893      	ldr	r3, [r2, #8]
 8007bb2:	b410      	push	{r4}
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	6093      	str	r3, [r2, #8]
 8007bba:	da07      	bge.n	8007bcc <__sfputc_r+0x1c>
 8007bbc:	6994      	ldr	r4, [r2, #24]
 8007bbe:	42a3      	cmp	r3, r4
 8007bc0:	db01      	blt.n	8007bc6 <__sfputc_r+0x16>
 8007bc2:	290a      	cmp	r1, #10
 8007bc4:	d102      	bne.n	8007bcc <__sfputc_r+0x1c>
 8007bc6:	bc10      	pop	{r4}
 8007bc8:	f7fe bc79 	b.w	80064be <__swbuf_r>
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	1c58      	adds	r0, r3, #1
 8007bd0:	6010      	str	r0, [r2, #0]
 8007bd2:	7019      	strb	r1, [r3, #0]
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	bc10      	pop	{r4}
 8007bd8:	4770      	bx	lr

08007bda <__sfputs_r>:
 8007bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	18d5      	adds	r5, r2, r3
 8007be4:	42ac      	cmp	r4, r5
 8007be6:	d101      	bne.n	8007bec <__sfputs_r+0x12>
 8007be8:	2000      	movs	r0, #0
 8007bea:	e007      	b.n	8007bfc <__sfputs_r+0x22>
 8007bec:	463a      	mov	r2, r7
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf4:	f7ff ffdc 	bl	8007bb0 <__sfputc_r>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d1f3      	bne.n	8007be4 <__sfputs_r+0xa>
 8007bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c00 <_vfiprintf_r>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	460d      	mov	r5, r1
 8007c06:	4614      	mov	r4, r2
 8007c08:	4698      	mov	r8, r3
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	b09d      	sub	sp, #116	@ 0x74
 8007c0e:	b118      	cbz	r0, 8007c18 <_vfiprintf_r+0x18>
 8007c10:	6a03      	ldr	r3, [r0, #32]
 8007c12:	b90b      	cbnz	r3, 8007c18 <_vfiprintf_r+0x18>
 8007c14:	f7fe fb6a 	bl	80062ec <__sinit>
 8007c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c1a:	07d9      	lsls	r1, r3, #31
 8007c1c:	d405      	bmi.n	8007c2a <_vfiprintf_r+0x2a>
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	059a      	lsls	r2, r3, #22
 8007c22:	d402      	bmi.n	8007c2a <_vfiprintf_r+0x2a>
 8007c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c26:	f7fe fd6c 	bl	8006702 <__retarget_lock_acquire_recursive>
 8007c2a:	89ab      	ldrh	r3, [r5, #12]
 8007c2c:	071b      	lsls	r3, r3, #28
 8007c2e:	d501      	bpl.n	8007c34 <_vfiprintf_r+0x34>
 8007c30:	692b      	ldr	r3, [r5, #16]
 8007c32:	b99b      	cbnz	r3, 8007c5c <_vfiprintf_r+0x5c>
 8007c34:	4629      	mov	r1, r5
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7fe fc80 	bl	800653c <__swsetup_r>
 8007c3c:	b170      	cbz	r0, 8007c5c <_vfiprintf_r+0x5c>
 8007c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c40:	07dc      	lsls	r4, r3, #31
 8007c42:	d504      	bpl.n	8007c4e <_vfiprintf_r+0x4e>
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	b01d      	add	sp, #116	@ 0x74
 8007c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	0598      	lsls	r0, r3, #22
 8007c52:	d4f7      	bmi.n	8007c44 <_vfiprintf_r+0x44>
 8007c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c56:	f7fe fd55 	bl	8006704 <__retarget_lock_release_recursive>
 8007c5a:	e7f3      	b.n	8007c44 <_vfiprintf_r+0x44>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c60:	2320      	movs	r3, #32
 8007c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c66:	2330      	movs	r3, #48	@ 0x30
 8007c68:	f04f 0901 	mov.w	r9, #1
 8007c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c70:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e1c <_vfiprintf_r+0x21c>
 8007c74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c78:	4623      	mov	r3, r4
 8007c7a:	469a      	mov	sl, r3
 8007c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c80:	b10a      	cbz	r2, 8007c86 <_vfiprintf_r+0x86>
 8007c82:	2a25      	cmp	r2, #37	@ 0x25
 8007c84:	d1f9      	bne.n	8007c7a <_vfiprintf_r+0x7a>
 8007c86:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8a:	d00b      	beq.n	8007ca4 <_vfiprintf_r+0xa4>
 8007c8c:	465b      	mov	r3, fp
 8007c8e:	4622      	mov	r2, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffa1 	bl	8007bda <__sfputs_r>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f000 80a7 	beq.w	8007dec <_vfiprintf_r+0x1ec>
 8007c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ca0:	445a      	add	r2, fp
 8007ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 809f 	beq.w	8007dec <_vfiprintf_r+0x1ec>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cb8:	f10a 0a01 	add.w	sl, sl, #1
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cc6:	4654      	mov	r4, sl
 8007cc8:	2205      	movs	r2, #5
 8007cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cce:	4853      	ldr	r0, [pc, #332]	@ (8007e1c <_vfiprintf_r+0x21c>)
 8007cd0:	f7fe fd19 	bl	8006706 <memchr>
 8007cd4:	9a04      	ldr	r2, [sp, #16]
 8007cd6:	b9d8      	cbnz	r0, 8007d10 <_vfiprintf_r+0x110>
 8007cd8:	06d1      	lsls	r1, r2, #27
 8007cda:	bf44      	itt	mi
 8007cdc:	2320      	movmi	r3, #32
 8007cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ce2:	0713      	lsls	r3, r2, #28
 8007ce4:	bf44      	itt	mi
 8007ce6:	232b      	movmi	r3, #43	@ 0x2b
 8007ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cec:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf2:	d015      	beq.n	8007d20 <_vfiprintf_r+0x120>
 8007cf4:	4654      	mov	r4, sl
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f04f 0c0a 	mov.w	ip, #10
 8007cfc:	9a07      	ldr	r2, [sp, #28]
 8007cfe:	4621      	mov	r1, r4
 8007d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d04:	3b30      	subs	r3, #48	@ 0x30
 8007d06:	2b09      	cmp	r3, #9
 8007d08:	d94b      	bls.n	8007da2 <_vfiprintf_r+0x1a2>
 8007d0a:	b1b0      	cbz	r0, 8007d3a <_vfiprintf_r+0x13a>
 8007d0c:	9207      	str	r2, [sp, #28]
 8007d0e:	e014      	b.n	8007d3a <_vfiprintf_r+0x13a>
 8007d10:	eba0 0308 	sub.w	r3, r0, r8
 8007d14:	fa09 f303 	lsl.w	r3, r9, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	46a2      	mov	sl, r4
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	e7d2      	b.n	8007cc6 <_vfiprintf_r+0xc6>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	1d19      	adds	r1, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	9103      	str	r1, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfbb      	ittet	lt
 8007d2c:	425b      	neglt	r3, r3
 8007d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d32:	9307      	strge	r3, [sp, #28]
 8007d34:	9307      	strlt	r3, [sp, #28]
 8007d36:	bfb8      	it	lt
 8007d38:	9204      	strlt	r2, [sp, #16]
 8007d3a:	7823      	ldrb	r3, [r4, #0]
 8007d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d3e:	d10a      	bne.n	8007d56 <_vfiprintf_r+0x156>
 8007d40:	7863      	ldrb	r3, [r4, #1]
 8007d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d44:	d132      	bne.n	8007dac <_vfiprintf_r+0x1ac>
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	3402      	adds	r4, #2
 8007d4a:	1d1a      	adds	r2, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	9203      	str	r2, [sp, #12]
 8007d50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e20 <_vfiprintf_r+0x220>
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	4650      	mov	r0, sl
 8007d5e:	7821      	ldrb	r1, [r4, #0]
 8007d60:	f7fe fcd1 	bl	8006706 <memchr>
 8007d64:	b138      	cbz	r0, 8007d76 <_vfiprintf_r+0x176>
 8007d66:	2240      	movs	r2, #64	@ 0x40
 8007d68:	9b04      	ldr	r3, [sp, #16]
 8007d6a:	eba0 000a 	sub.w	r0, r0, sl
 8007d6e:	4082      	lsls	r2, r0
 8007d70:	4313      	orrs	r3, r2
 8007d72:	3401      	adds	r4, #1
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7a:	2206      	movs	r2, #6
 8007d7c:	4829      	ldr	r0, [pc, #164]	@ (8007e24 <_vfiprintf_r+0x224>)
 8007d7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d82:	f7fe fcc0 	bl	8006706 <memchr>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d03f      	beq.n	8007e0a <_vfiprintf_r+0x20a>
 8007d8a:	4b27      	ldr	r3, [pc, #156]	@ (8007e28 <_vfiprintf_r+0x228>)
 8007d8c:	bb1b      	cbnz	r3, 8007dd6 <_vfiprintf_r+0x1d6>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	3307      	adds	r3, #7
 8007d92:	f023 0307 	bic.w	r3, r3, #7
 8007d96:	3308      	adds	r3, #8
 8007d98:	9303      	str	r3, [sp, #12]
 8007d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9c:	443b      	add	r3, r7
 8007d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da0:	e76a      	b.n	8007c78 <_vfiprintf_r+0x78>
 8007da2:	460c      	mov	r4, r1
 8007da4:	2001      	movs	r0, #1
 8007da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007daa:	e7a8      	b.n	8007cfe <_vfiprintf_r+0xfe>
 8007dac:	2300      	movs	r3, #0
 8007dae:	f04f 0c0a 	mov.w	ip, #10
 8007db2:	4619      	mov	r1, r3
 8007db4:	3401      	adds	r4, #1
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	4620      	mov	r0, r4
 8007dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dbe:	3a30      	subs	r2, #48	@ 0x30
 8007dc0:	2a09      	cmp	r2, #9
 8007dc2:	d903      	bls.n	8007dcc <_vfiprintf_r+0x1cc>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0c6      	beq.n	8007d56 <_vfiprintf_r+0x156>
 8007dc8:	9105      	str	r1, [sp, #20]
 8007dca:	e7c4      	b.n	8007d56 <_vfiprintf_r+0x156>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	2301      	movs	r3, #1
 8007dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd4:	e7f0      	b.n	8007db8 <_vfiprintf_r+0x1b8>
 8007dd6:	ab03      	add	r3, sp, #12
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	462a      	mov	r2, r5
 8007ddc:	4630      	mov	r0, r6
 8007dde:	4b13      	ldr	r3, [pc, #76]	@ (8007e2c <_vfiprintf_r+0x22c>)
 8007de0:	a904      	add	r1, sp, #16
 8007de2:	f7fd fe39 	bl	8005a58 <_printf_float>
 8007de6:	4607      	mov	r7, r0
 8007de8:	1c78      	adds	r0, r7, #1
 8007dea:	d1d6      	bne.n	8007d9a <_vfiprintf_r+0x19a>
 8007dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dee:	07d9      	lsls	r1, r3, #31
 8007df0:	d405      	bmi.n	8007dfe <_vfiprintf_r+0x1fe>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	059a      	lsls	r2, r3, #22
 8007df6:	d402      	bmi.n	8007dfe <_vfiprintf_r+0x1fe>
 8007df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dfa:	f7fe fc83 	bl	8006704 <__retarget_lock_release_recursive>
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	065b      	lsls	r3, r3, #25
 8007e02:	f53f af1f 	bmi.w	8007c44 <_vfiprintf_r+0x44>
 8007e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e08:	e71e      	b.n	8007c48 <_vfiprintf_r+0x48>
 8007e0a:	ab03      	add	r3, sp, #12
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	462a      	mov	r2, r5
 8007e10:	4630      	mov	r0, r6
 8007e12:	4b06      	ldr	r3, [pc, #24]	@ (8007e2c <_vfiprintf_r+0x22c>)
 8007e14:	a904      	add	r1, sp, #16
 8007e16:	f7fe f8bd 	bl	8005f94 <_printf_i>
 8007e1a:	e7e4      	b.n	8007de6 <_vfiprintf_r+0x1e6>
 8007e1c:	08008a30 	.word	0x08008a30
 8007e20:	08008a36 	.word	0x08008a36
 8007e24:	08008a3a 	.word	0x08008a3a
 8007e28:	08005a59 	.word	0x08005a59
 8007e2c:	08007bdb 	.word	0x08007bdb

08007e30 <__sflush_r>:
 8007e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	0716      	lsls	r6, r2, #28
 8007e38:	4605      	mov	r5, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	d454      	bmi.n	8007ee8 <__sflush_r+0xb8>
 8007e3e:	684b      	ldr	r3, [r1, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc02      	bgt.n	8007e4a <__sflush_r+0x1a>
 8007e44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd48      	ble.n	8007edc <__sflush_r+0xac>
 8007e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e4c:	2e00      	cmp	r6, #0
 8007e4e:	d045      	beq.n	8007edc <__sflush_r+0xac>
 8007e50:	2300      	movs	r3, #0
 8007e52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e56:	682f      	ldr	r7, [r5, #0]
 8007e58:	6a21      	ldr	r1, [r4, #32]
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	d030      	beq.n	8007ec0 <__sflush_r+0x90>
 8007e5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	0759      	lsls	r1, r3, #29
 8007e64:	d505      	bpl.n	8007e72 <__sflush_r+0x42>
 8007e66:	6863      	ldr	r3, [r4, #4]
 8007e68:	1ad2      	subs	r2, r2, r3
 8007e6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e6c:	b10b      	cbz	r3, 8007e72 <__sflush_r+0x42>
 8007e6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e70:	1ad2      	subs	r2, r2, r3
 8007e72:	2300      	movs	r3, #0
 8007e74:	4628      	mov	r0, r5
 8007e76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e78:	6a21      	ldr	r1, [r4, #32]
 8007e7a:	47b0      	blx	r6
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	d106      	bne.n	8007e90 <__sflush_r+0x60>
 8007e82:	6829      	ldr	r1, [r5, #0]
 8007e84:	291d      	cmp	r1, #29
 8007e86:	d82b      	bhi.n	8007ee0 <__sflush_r+0xb0>
 8007e88:	4a28      	ldr	r2, [pc, #160]	@ (8007f2c <__sflush_r+0xfc>)
 8007e8a:	410a      	asrs	r2, r1
 8007e8c:	07d6      	lsls	r6, r2, #31
 8007e8e:	d427      	bmi.n	8007ee0 <__sflush_r+0xb0>
 8007e90:	2200      	movs	r2, #0
 8007e92:	6062      	str	r2, [r4, #4]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	04d9      	lsls	r1, r3, #19
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	d504      	bpl.n	8007ea6 <__sflush_r+0x76>
 8007e9c:	1c42      	adds	r2, r0, #1
 8007e9e:	d101      	bne.n	8007ea4 <__sflush_r+0x74>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b903      	cbnz	r3, 8007ea6 <__sflush_r+0x76>
 8007ea4:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ea8:	602f      	str	r7, [r5, #0]
 8007eaa:	b1b9      	cbz	r1, 8007edc <__sflush_r+0xac>
 8007eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007eb0:	4299      	cmp	r1, r3
 8007eb2:	d002      	beq.n	8007eba <__sflush_r+0x8a>
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f7ff fab3 	bl	8007420 <_free_r>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ebe:	e00d      	b.n	8007edc <__sflush_r+0xac>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b0      	blx	r6
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	1c50      	adds	r0, r2, #1
 8007eca:	d1c9      	bne.n	8007e60 <__sflush_r+0x30>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0c6      	beq.n	8007e60 <__sflush_r+0x30>
 8007ed2:	2b1d      	cmp	r3, #29
 8007ed4:	d001      	beq.n	8007eda <__sflush_r+0xaa>
 8007ed6:	2b16      	cmp	r3, #22
 8007ed8:	d11d      	bne.n	8007f16 <__sflush_r+0xe6>
 8007eda:	602f      	str	r7, [r5, #0]
 8007edc:	2000      	movs	r0, #0
 8007ede:	e021      	b.n	8007f24 <__sflush_r+0xf4>
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ee4:	b21b      	sxth	r3, r3
 8007ee6:	e01a      	b.n	8007f1e <__sflush_r+0xee>
 8007ee8:	690f      	ldr	r7, [r1, #16]
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	d0f6      	beq.n	8007edc <__sflush_r+0xac>
 8007eee:	0793      	lsls	r3, r2, #30
 8007ef0:	bf18      	it	ne
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	680e      	ldr	r6, [r1, #0]
 8007ef6:	bf08      	it	eq
 8007ef8:	694b      	ldreq	r3, [r1, #20]
 8007efa:	1bf6      	subs	r6, r6, r7
 8007efc:	600f      	str	r7, [r1, #0]
 8007efe:	608b      	str	r3, [r1, #8]
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	ddeb      	ble.n	8007edc <__sflush_r+0xac>
 8007f04:	4633      	mov	r3, r6
 8007f06:	463a      	mov	r2, r7
 8007f08:	4628      	mov	r0, r5
 8007f0a:	6a21      	ldr	r1, [r4, #32]
 8007f0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007f10:	47e0      	blx	ip
 8007f12:	2800      	cmp	r0, #0
 8007f14:	dc07      	bgt.n	8007f26 <__sflush_r+0xf6>
 8007f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f26:	4407      	add	r7, r0
 8007f28:	1a36      	subs	r6, r6, r0
 8007f2a:	e7e9      	b.n	8007f00 <__sflush_r+0xd0>
 8007f2c:	dfbffffe 	.word	0xdfbffffe

08007f30 <_fflush_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	690b      	ldr	r3, [r1, #16]
 8007f34:	4605      	mov	r5, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b913      	cbnz	r3, 8007f40 <_fflush_r+0x10>
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	b118      	cbz	r0, 8007f4a <_fflush_r+0x1a>
 8007f42:	6a03      	ldr	r3, [r0, #32]
 8007f44:	b90b      	cbnz	r3, 8007f4a <_fflush_r+0x1a>
 8007f46:	f7fe f9d1 	bl	80062ec <__sinit>
 8007f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f3      	beq.n	8007f3a <_fflush_r+0xa>
 8007f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f54:	07d0      	lsls	r0, r2, #31
 8007f56:	d404      	bmi.n	8007f62 <_fflush_r+0x32>
 8007f58:	0599      	lsls	r1, r3, #22
 8007f5a:	d402      	bmi.n	8007f62 <_fflush_r+0x32>
 8007f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f5e:	f7fe fbd0 	bl	8006702 <__retarget_lock_acquire_recursive>
 8007f62:	4628      	mov	r0, r5
 8007f64:	4621      	mov	r1, r4
 8007f66:	f7ff ff63 	bl	8007e30 <__sflush_r>
 8007f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	07da      	lsls	r2, r3, #31
 8007f70:	d4e4      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	059b      	lsls	r3, r3, #22
 8007f76:	d4e1      	bmi.n	8007f3c <_fflush_r+0xc>
 8007f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f7a:	f7fe fbc3 	bl	8006704 <__retarget_lock_release_recursive>
 8007f7e:	e7dd      	b.n	8007f3c <_fflush_r+0xc>

08007f80 <fiprintf>:
 8007f80:	b40e      	push	{r1, r2, r3}
 8007f82:	b503      	push	{r0, r1, lr}
 8007f84:	4601      	mov	r1, r0
 8007f86:	ab03      	add	r3, sp, #12
 8007f88:	4805      	ldr	r0, [pc, #20]	@ (8007fa0 <fiprintf+0x20>)
 8007f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8e:	6800      	ldr	r0, [r0, #0]
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	f7ff fe35 	bl	8007c00 <_vfiprintf_r>
 8007f96:	b002      	add	sp, #8
 8007f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f9c:	b003      	add	sp, #12
 8007f9e:	4770      	bx	lr
 8007fa0:	2000002c 	.word	0x2000002c

08007fa4 <__swhatbuf_r>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fac:	4615      	mov	r5, r2
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	461e      	mov	r6, r3
 8007fb2:	b096      	sub	sp, #88	@ 0x58
 8007fb4:	da0c      	bge.n	8007fd0 <__swhatbuf_r+0x2c>
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	2100      	movs	r1, #0
 8007fba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fbe:	bf14      	ite	ne
 8007fc0:	2340      	movne	r3, #64	@ 0x40
 8007fc2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	6031      	str	r1, [r6, #0]
 8007fca:	602b      	str	r3, [r5, #0]
 8007fcc:	b016      	add	sp, #88	@ 0x58
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	466a      	mov	r2, sp
 8007fd2:	f000 f849 	bl	8008068 <_fstat_r>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	dbed      	blt.n	8007fb6 <__swhatbuf_r+0x12>
 8007fda:	9901      	ldr	r1, [sp, #4]
 8007fdc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fe0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fe4:	4259      	negs	r1, r3
 8007fe6:	4159      	adcs	r1, r3
 8007fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fec:	e7eb      	b.n	8007fc6 <__swhatbuf_r+0x22>

08007fee <__smakebuf_r>:
 8007fee:	898b      	ldrh	r3, [r1, #12]
 8007ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ff2:	079d      	lsls	r5, r3, #30
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	d507      	bpl.n	800800a <__smakebuf_r+0x1c>
 8007ffa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	6123      	str	r3, [r4, #16]
 8008002:	2301      	movs	r3, #1
 8008004:	6163      	str	r3, [r4, #20]
 8008006:	b003      	add	sp, #12
 8008008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800a:	466a      	mov	r2, sp
 800800c:	ab01      	add	r3, sp, #4
 800800e:	f7ff ffc9 	bl	8007fa4 <__swhatbuf_r>
 8008012:	9f00      	ldr	r7, [sp, #0]
 8008014:	4605      	mov	r5, r0
 8008016:	4639      	mov	r1, r7
 8008018:	4630      	mov	r0, r6
 800801a:	f7fd fbf3 	bl	8005804 <_malloc_r>
 800801e:	b948      	cbnz	r0, 8008034 <__smakebuf_r+0x46>
 8008020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d4ee      	bmi.n	8008006 <__smakebuf_r+0x18>
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	f043 0302 	orr.w	r3, r3, #2
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	e7e2      	b.n	8007ffa <__smakebuf_r+0xc>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800803a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	6020      	str	r0, [r4, #0]
 8008044:	b15b      	cbz	r3, 800805e <__smakebuf_r+0x70>
 8008046:	4630      	mov	r0, r6
 8008048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800804c:	f000 f81e 	bl	800808c <_isatty_r>
 8008050:	b128      	cbz	r0, 800805e <__smakebuf_r+0x70>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f023 0303 	bic.w	r3, r3, #3
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	431d      	orrs	r5, r3
 8008062:	81a5      	strh	r5, [r4, #12]
 8008064:	e7cf      	b.n	8008006 <__smakebuf_r+0x18>
	...

08008068 <_fstat_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	2300      	movs	r3, #0
 800806c:	4d06      	ldr	r5, [pc, #24]	@ (8008088 <_fstat_r+0x20>)
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	4611      	mov	r1, r2
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	f7f9 fe24 	bl	8001cc2 <_fstat>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d102      	bne.n	8008084 <_fstat_r+0x1c>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	b103      	cbz	r3, 8008084 <_fstat_r+0x1c>
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	bd38      	pop	{r3, r4, r5, pc}
 8008086:	bf00      	nop
 8008088:	200015f8 	.word	0x200015f8

0800808c <_isatty_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	2300      	movs	r3, #0
 8008090:	4d05      	ldr	r5, [pc, #20]	@ (80080a8 <_isatty_r+0x1c>)
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7f9 fe18 	bl	8001ccc <_isatty>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_isatty_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_isatty_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200015f8 	.word	0x200015f8

080080ac <abort>:
 80080ac:	2006      	movs	r0, #6
 80080ae:	b508      	push	{r3, lr}
 80080b0:	f000 f85e 	bl	8008170 <raise>
 80080b4:	2001      	movs	r0, #1
 80080b6:	f7f9 fdeb 	bl	8001c90 <_exit>

080080ba <_calloc_r>:
 80080ba:	b570      	push	{r4, r5, r6, lr}
 80080bc:	fba1 5402 	umull	r5, r4, r1, r2
 80080c0:	b93c      	cbnz	r4, 80080d2 <_calloc_r+0x18>
 80080c2:	4629      	mov	r1, r5
 80080c4:	f7fd fb9e 	bl	8005804 <_malloc_r>
 80080c8:	4606      	mov	r6, r0
 80080ca:	b928      	cbnz	r0, 80080d8 <_calloc_r+0x1e>
 80080cc:	2600      	movs	r6, #0
 80080ce:	4630      	mov	r0, r6
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
 80080d2:	220c      	movs	r2, #12
 80080d4:	6002      	str	r2, [r0, #0]
 80080d6:	e7f9      	b.n	80080cc <_calloc_r+0x12>
 80080d8:	462a      	mov	r2, r5
 80080da:	4621      	mov	r1, r4
 80080dc:	f7fe fa84 	bl	80065e8 <memset>
 80080e0:	e7f5      	b.n	80080ce <_calloc_r+0x14>

080080e2 <__ascii_mbtowc>:
 80080e2:	b082      	sub	sp, #8
 80080e4:	b901      	cbnz	r1, 80080e8 <__ascii_mbtowc+0x6>
 80080e6:	a901      	add	r1, sp, #4
 80080e8:	b142      	cbz	r2, 80080fc <__ascii_mbtowc+0x1a>
 80080ea:	b14b      	cbz	r3, 8008100 <__ascii_mbtowc+0x1e>
 80080ec:	7813      	ldrb	r3, [r2, #0]
 80080ee:	600b      	str	r3, [r1, #0]
 80080f0:	7812      	ldrb	r2, [r2, #0]
 80080f2:	1e10      	subs	r0, r2, #0
 80080f4:	bf18      	it	ne
 80080f6:	2001      	movne	r0, #1
 80080f8:	b002      	add	sp, #8
 80080fa:	4770      	bx	lr
 80080fc:	4610      	mov	r0, r2
 80080fe:	e7fb      	b.n	80080f8 <__ascii_mbtowc+0x16>
 8008100:	f06f 0001 	mvn.w	r0, #1
 8008104:	e7f8      	b.n	80080f8 <__ascii_mbtowc+0x16>

08008106 <__ascii_wctomb>:
 8008106:	4603      	mov	r3, r0
 8008108:	4608      	mov	r0, r1
 800810a:	b141      	cbz	r1, 800811e <__ascii_wctomb+0x18>
 800810c:	2aff      	cmp	r2, #255	@ 0xff
 800810e:	d904      	bls.n	800811a <__ascii_wctomb+0x14>
 8008110:	228a      	movs	r2, #138	@ 0x8a
 8008112:	f04f 30ff 	mov.w	r0, #4294967295
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	4770      	bx	lr
 800811a:	2001      	movs	r0, #1
 800811c:	700a      	strb	r2, [r1, #0]
 800811e:	4770      	bx	lr

08008120 <_raise_r>:
 8008120:	291f      	cmp	r1, #31
 8008122:	b538      	push	{r3, r4, r5, lr}
 8008124:	4605      	mov	r5, r0
 8008126:	460c      	mov	r4, r1
 8008128:	d904      	bls.n	8008134 <_raise_r+0x14>
 800812a:	2316      	movs	r3, #22
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	f04f 30ff 	mov.w	r0, #4294967295
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008136:	b112      	cbz	r2, 800813e <_raise_r+0x1e>
 8008138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800813c:	b94b      	cbnz	r3, 8008152 <_raise_r+0x32>
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f830 	bl	80081a4 <_getpid_r>
 8008144:	4622      	mov	r2, r4
 8008146:	4601      	mov	r1, r0
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800814e:	f000 b817 	b.w	8008180 <_kill_r>
 8008152:	2b01      	cmp	r3, #1
 8008154:	d00a      	beq.n	800816c <_raise_r+0x4c>
 8008156:	1c59      	adds	r1, r3, #1
 8008158:	d103      	bne.n	8008162 <_raise_r+0x42>
 800815a:	2316      	movs	r3, #22
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	2001      	movs	r0, #1
 8008160:	e7e7      	b.n	8008132 <_raise_r+0x12>
 8008162:	2100      	movs	r1, #0
 8008164:	4620      	mov	r0, r4
 8008166:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800816a:	4798      	blx	r3
 800816c:	2000      	movs	r0, #0
 800816e:	e7e0      	b.n	8008132 <_raise_r+0x12>

08008170 <raise>:
 8008170:	4b02      	ldr	r3, [pc, #8]	@ (800817c <raise+0xc>)
 8008172:	4601      	mov	r1, r0
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	f7ff bfd3 	b.w	8008120 <_raise_r>
 800817a:	bf00      	nop
 800817c:	2000002c 	.word	0x2000002c

08008180 <_kill_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	2300      	movs	r3, #0
 8008184:	4d06      	ldr	r5, [pc, #24]	@ (80081a0 <_kill_r+0x20>)
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	4611      	mov	r1, r2
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	f7f9 fd77 	bl	8001c80 <_kill>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	d102      	bne.n	800819c <_kill_r+0x1c>
 8008196:	682b      	ldr	r3, [r5, #0]
 8008198:	b103      	cbz	r3, 800819c <_kill_r+0x1c>
 800819a:	6023      	str	r3, [r4, #0]
 800819c:	bd38      	pop	{r3, r4, r5, pc}
 800819e:	bf00      	nop
 80081a0:	200015f8 	.word	0x200015f8

080081a4 <_getpid_r>:
 80081a4:	f7f9 bd6a 	b.w	8001c7c <_getpid>

080081a8 <_init>:
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081aa:	bf00      	nop
 80081ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ae:	bc08      	pop	{r3}
 80081b0:	469e      	mov	lr, r3
 80081b2:	4770      	bx	lr

080081b4 <_fini>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr
