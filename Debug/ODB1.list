
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d50  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  08009e60  08009e60  0000ae60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a89c  0800a89c  0000b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a4  0800a8a4  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a4  0800a8a4  0000b8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a8  0800a8a8  0000b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a8ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  200001e8  0800aa94  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800aa94  0000c7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a6d  00000000  00000000  0000c211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecc  00000000  00000000  00015c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000e42  00000000  00000000  00017b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  0001898c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000443  00000000  00000000  00018f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b681  00000000  00000000  00019367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd6a  00000000  00000000  000349e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095c06  00000000  00000000  00041752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7358  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002308  00000000  00000000  000d739c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e48 	.word	0x08009e48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009e48 	.word	0x08009e48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <BMP280_ReadRegister>:

    float altitude = (T0 / alpha) * (1 - pow((pressure / P0), (1 / beta)));
    return altitude;
}

uint8_t BMP280_ReadRegister(uint8_t reg) {
 8000a88:	b500      	push	{lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	f88d 0007 	strb.w	r0, [sp, #7]

    uint8_t received_data;
    Write_GPIO(PA, 8, LOW); // Disable CS
 8000a90:	2200      	movs	r2, #0
 8000a92:	2108      	movs	r1, #8
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fbf9 	bl	800128c <Write_GPIO>
    SPI2_TX(&reg, 1);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f10d 0007 	add.w	r0, sp, #7
 8000aa0:	f000 fc78 	bl	8001394 <SPI2_TX>
    SPI2_RX(&received_data, 1);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	f10d 000f 	add.w	r0, sp, #15
 8000aaa:	f000 fc91 	bl	80013d0 <SPI2_RX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	f000 fbea 	bl	800128c <Write_GPIO>
    return received_data;
}
 8000ab8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000abc:	b005      	add	sp, #20
 8000abe:	f85d fb04 	ldr.w	pc, [sp], #4

08000ac2 <BMP280_ReadCalibrationData>:
void BMP280_ReadCalibrationData(BMP280 *devBMP) {
 8000ac2:	b530      	push	{r4, r5, lr}
 8000ac4:	b089      	sub	sp, #36	@ 0x24
 8000ac6:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 8000ac8:	20f3      	movs	r0, #243	@ 0xf3
 8000aca:	f7ff ffdd 	bl	8000a88 <BMP280_ReadRegister>
 8000ace:	f010 0f04 	tst.w	r0, #4
 8000ad2:	d1f9      	bne.n	8000ac8 <BMP280_ReadCalibrationData+0x6>
    for (int i = 0; i < 26; i++) {
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e00a      	b.n	8000aee <BMP280_ReadCalibrationData+0x2c>
        calib[i] = BMP280_ReadRegister(BMP280_REG_CALIB_00 + i);
 8000ad8:	f1a4 0078 	sub.w	r0, r4, #120	@ 0x78
 8000adc:	b2c0      	uxtb	r0, r0
 8000ade:	f7ff ffd3 	bl	8000a88 <BMP280_ReadRegister>
 8000ae2:	f104 0320 	add.w	r3, r4, #32
 8000ae6:	446b      	add	r3, sp
 8000ae8:	f803 0c1c 	strb.w	r0, [r3, #-28]
    for (int i = 0; i < 26; i++) {
 8000aec:	3401      	adds	r4, #1
 8000aee:	2c19      	cmp	r4, #25
 8000af0:	ddf2      	ble.n	8000ad8 <BMP280_ReadCalibrationData+0x16>
    devBMP->calib_data.dig_T1 = (calib[1] << 8) | calib[0];
 8000af2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000af6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000afa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000afe:	812b      	strh	r3, [r5, #8]
    devBMP->calib_data.dig_T2 = (calib[3] << 8) | calib[2];
 8000b00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000b04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000b08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b0c:	816b      	strh	r3, [r5, #10]
    devBMP->calib_data.dig_T3 = (calib[5] << 8) | calib[4];
 8000b0e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8000b12:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000b16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b1a:	81ab      	strh	r3, [r5, #12]
    devBMP->calib_data.dig_P1 = (calib[7] << 8) | calib[6];
 8000b1c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000b20:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b28:	81eb      	strh	r3, [r5, #14]
    devBMP->calib_data.dig_P2 = (calib[9] << 8) | calib[8];
 8000b2a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000b2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b36:	822b      	strh	r3, [r5, #16]
    devBMP->calib_data.dig_P3 = (calib[11] << 8) | calib[10];
 8000b38:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000b3c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000b40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b44:	826b      	strh	r3, [r5, #18]
    devBMP->calib_data.dig_P4 = (calib[13] << 8) | calib[12];
 8000b46:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8000b4a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000b4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b52:	82ab      	strh	r3, [r5, #20]
    devBMP->calib_data.dig_P5 = (calib[15] << 8) | calib[14];
 8000b54:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8000b58:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000b5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b60:	82eb      	strh	r3, [r5, #22]
    devBMP->calib_data.dig_P6 = (calib[17] << 8) | calib[16];
 8000b62:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8000b66:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b6e:	832b      	strh	r3, [r5, #24]
    devBMP->calib_data.dig_P7 = (calib[19] << 8) | calib[18];
 8000b70:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8000b74:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b7c:	836b      	strh	r3, [r5, #26]
    devBMP->calib_data.dig_P8 = (calib[21] << 8) | calib[20];
 8000b7e:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8000b82:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000b86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b8a:	83ab      	strh	r3, [r5, #28]
    devBMP->calib_data.dig_P9 = (calib[23] << 8) | calib[22];
 8000b8c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8000b90:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b98:	83eb      	strh	r3, [r5, #30]
}
 8000b9a:	b009      	add	sp, #36	@ 0x24
 8000b9c:	bd30      	pop	{r4, r5, pc}

08000b9e <BMP280_WriteRegister>:

uint8_t BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8000b9e:	b500      	push	{lr}
 8000ba0:	b083      	sub	sp, #12

    uint8_t data[2] = {reg, value};
 8000ba2:	f88d 0004 	strb.w	r0, [sp, #4]
 8000ba6:	f88d 1005 	strb.w	r1, [sp, #5]
    Write_GPIO(PA, 8, LOW); // Disable CS
 8000baa:	2200      	movs	r2, #0
 8000bac:	2108      	movs	r1, #8
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f000 fb6c 	bl	800128c <Write_GPIO>
    SPI2_TX(data, 2);
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	a801      	add	r0, sp, #4
 8000bb8:	f000 fbec 	bl	8001394 <SPI2_TX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f000 fb63 	bl	800128c <Write_GPIO>
    return 0; // OK
}
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	b003      	add	sp, #12
 8000bca:	f85d fb04 	ldr.w	pc, [sp], #4

08000bce <BMP280_Init>:
uint8_t BMP280_Init(BMP280 *devBMP) {
 8000bce:	b510      	push	{r4, lr}
 8000bd0:	4604      	mov	r4, r0
	SPI_Init(2);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f000 fb7a 	bl	80012cc <SPI_Init>
    BMP280_WriteRegister(BMP280_REG_RESET, BMP280_RESET_WORD); // Reset
 8000bd8:	21b6      	movs	r1, #182	@ 0xb6
 8000bda:	20e0      	movs	r0, #224	@ 0xe0
 8000bdc:	f7ff ffdf 	bl	8000b9e <BMP280_WriteRegister>
    if (BMP280_ReadRegister(BMP280_REG_ID) != BMP280_DEVICE_ID) {
 8000be0:	20d0      	movs	r0, #208	@ 0xd0
 8000be2:	f7ff ff51 	bl	8000a88 <BMP280_ReadRegister>
 8000be6:	2858      	cmp	r0, #88	@ 0x58
 8000be8:	d001      	beq.n	8000bee <BMP280_Init+0x20>
        return 1; // Error
 8000bea:	2001      	movs	r0, #1
}
 8000bec:	bd10      	pop	{r4, pc}
    BMP280_ReadCalibrationData(devBMP);
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ff67 	bl	8000ac2 <BMP280_ReadCalibrationData>
    BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, BMP280_SETTING_CTRL_MEAS_NORMAL);
 8000bf4:	2157      	movs	r1, #87	@ 0x57
 8000bf6:	20f4      	movs	r0, #244	@ 0xf4
 8000bf8:	f7ff ffd1 	bl	8000b9e <BMP280_WriteRegister>
    BMP280_WriteRegister(BMP280_REG_CONFIG, BMP280_SETTING_CONFIG);
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	20f5      	movs	r0, #245	@ 0xf5
 8000c00:	f7ff ffcd 	bl	8000b9e <BMP280_WriteRegister>
    return 0;
 8000c04:	2000      	movs	r0, #0
 8000c06:	e7f1      	b.n	8000bec <BMP280_Init+0x1e>

08000c08 <CD74HC4051_Init>:

#include "GAUL_Drivers/CD74HC4051.h"
#include "GAUL_Drivers/Pyros.h"
#include "GAUL_Drivers/Low_Level_Drivers/ADC_driver.h"

uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0

	// Read pin
	Init_GPIO(PA, 0, IN, I_AN); // MUL_AN
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 faf0 	bl	80011f8 <Init_GPIO>
	// Batteries
	Init_GPIO(PC, 13, OUT2, O_GP_PP); // MUL_S0
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	210d      	movs	r1, #13
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 faea 	bl	80011f8 <Init_GPIO>
	Init_GPIO(PC, 14, OUT2, O_GP_PP); // MUL_S1
 8000c24:	2300      	movs	r3, #0
 8000c26:	2202      	movs	r2, #2
 8000c28:	210e      	movs	r1, #14
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 fae4 	bl	80011f8 <Init_GPIO>
	Init_GPIO(PC, 15, OUT2, O_GP_PP); // MUL_S2
 8000c30:	2300      	movs	r3, #0
 8000c32:	2202      	movs	r2, #2
 8000c34:	210f      	movs	r1, #15
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 fade 	bl	80011f8 <Init_GPIO>
	Init_GPIO(PB, 8, OUT2, O_GP_PP); // MUL_E~
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2202      	movs	r2, #2
 8000c40:	2108      	movs	r1, #8
 8000c42:	4610      	mov	r0, r2
 8000c44:	f000 fad8 	bl	80011f8 <Init_GPIO>
	// Set MUL_E~ (inverse)
	Write_GPIO(PB, 8, HIGH);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f000 fb1d 	bl	800128c <Write_GPIO>
	// Pyros
	Pyro_Init();
 8000c52:	f000 fa39 	bl	80010c8 <Pyro_Init>

	//ADC calibration
	ADC_Stop(hadc);
 8000c56:	4620      	mov	r0, r4
 8000c58:	f000 fac9 	bl	80011ee <ADC_Stop>
	ADC_Calibration(hadc);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f000 fac1 	bl	80011e4 <ADC_Calibration>

	return 0; // OK
}
 8000c62:	2000      	movs	r0, #0
 8000c64:	bd10      	pop	{r4, pc}

08000c66 <ICM20602_Read>:
{
	return Read_GPIO(PA, 10);
}

void ICM20602_Read(uint8_t address, uint8_t rxData[], uint8_t size)
{
 8000c66:	b530      	push	{r4, r5, lr}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	f88d 0007 	strb.w	r0, [sp, #7]
	address |= 0x80;  // read operation
 8000c72:	b2c3      	uxtb	r3, r0
 8000c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c78:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(PB, 12, LOW);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	210c      	movs	r1, #12
 8000c80:	2002      	movs	r0, #2
 8000c82:	f000 fb03 	bl	800128c <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8000c86:	2101      	movs	r1, #1
 8000c88:	f10d 0007 	add.w	r0, sp, #7
 8000c8c:	f000 fb82 	bl	8001394 <SPI2_TX>
	SPI2_RX(rxData, size);  // receive 6 bytes data
 8000c90:	4629      	mov	r1, r5
 8000c92:	4620      	mov	r0, r4
 8000c94:	f000 fb9c 	bl	80013d0 <SPI2_RX>
	Write_GPIO(PB, 12, HIGH);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	210c      	movs	r1, #12
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 faf5 	bl	800128c <Write_GPIO>
}
 8000ca2:	b003      	add	sp, #12
 8000ca4:	bd30      	pop	{r4, r5, pc}

08000ca6 <ICM20602_Write>:

void ICM20602_Write(uint8_t address, uint8_t value)
{
 8000ca6:	b500      	push	{lr}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	f88d 0007 	strb.w	r0, [sp, #7]
 8000cae:	f88d 1006 	strb.w	r1, [sp, #6]
	Write_GPIO(PB, 12, LOW);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f000 fae8 	bl	800128c <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	f10d 0007 	add.w	r0, sp, #7
 8000cc2:	f000 fb67 	bl	8001394 <SPI2_TX>
	SPI2_TX(&value, 1);  // send value
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	f10d 0006 	add.w	r0, sp, #6
 8000ccc:	f000 fb62 	bl	8001394 <SPI2_TX>
	Write_GPIO(PB, 12, HIGH);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	210c      	movs	r1, #12
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f000 fad9 	bl	800128c <Write_GPIO>
	HAL_Delay(20);
 8000cda:	2014      	movs	r0, #20
 8000cdc:	f001 f894 	bl	8001e08 <HAL_Delay>
}
 8000ce0:	b003      	add	sp, #12
 8000ce2:	f85d fb04 	ldr.w	pc, [sp], #4

08000ce6 <ICM20602_Remove_DC_Offset>:
{
 8000ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	460d      	mov	r5, r1
	int16_t offset[3] = {0,0,0};
 8000cee:	2400      	movs	r4, #0
 8000cf0:	f8ad 4008 	strh.w	r4, [sp, #8]
 8000cf4:	f8ad 400a 	strh.w	r4, [sp, #10]
 8000cf8:	f8ad 400c 	strh.w	r4, [sp, #12]
	for(i = 0; i < mean; i++)
 8000cfc:	e027      	b.n	8000d4e <ICM20602_Remove_DC_Offset+0x68>
		ICM20602_Read(ICM20602_REG_GYRO_XOUT_H, rxData, 6);
 8000cfe:	2206      	movs	r2, #6
 8000d00:	4669      	mov	r1, sp
 8000d02:	2043      	movs	r0, #67	@ 0x43
 8000d04:	f7ff ffaf 	bl	8000c66 <ICM20602_Read>
		offset[0] += (rxData[0] << 8) | rxData[1];
 8000d08:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8000d0c:	f89d 1000 	ldrb.w	r1, [sp]
 8000d10:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000d14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d18:	4413      	add	r3, r2
 8000d1a:	f8ad 3008 	strh.w	r3, [sp, #8]
		offset[1] += (rxData[2] << 8) | rxData[3];
 8000d1e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000d22:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8000d26:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000d2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d2e:	4413      	add	r3, r2
 8000d30:	f8ad 300a 	strh.w	r3, [sp, #10]
		offset[2] += (rxData[4] << 8) | rxData[5];
 8000d34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8000d38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000d3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000d40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d44:	4413      	add	r3, r2
 8000d46:	f8ad 300c 	strh.w	r3, [sp, #12]
	for(i = 0; i < mean; i++)
 8000d4a:	3401      	adds	r4, #1
 8000d4c:	b264      	sxtb	r4, r4
 8000d4e:	42ac      	cmp	r4, r5
 8000d50:	dbd5      	blt.n	8000cfe <ICM20602_Remove_DC_Offset+0x18>
	offset[0] /= mean;
 8000d52:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 8000d56:	fb97 f7f5 	sdiv	r7, r7, r5
 8000d5a:	b239      	sxth	r1, r7
 8000d5c:	f8ad 1008 	strh.w	r1, [sp, #8]
	offset[1] /= mean;
 8000d60:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8000d64:	fb96 f6f5 	sdiv	r6, r6, r5
 8000d68:	fa0f f886 	sxth.w	r8, r6
 8000d6c:	f8ad 800a 	strh.w	r8, [sp, #10]
	offset[2] /= mean;
 8000d70:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 8000d74:	fb94 f4f5 	sdiv	r4, r4, r5
 8000d78:	b225      	sxth	r5, r4
 8000d7a:	f8ad 500c 	strh.w	r5, [sp, #12]
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRH, (offset[0]*-2)>>8);
 8000d7e:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
 8000d82:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8000d86:	2013      	movs	r0, #19
 8000d88:	f7ff ff8d 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRL, offset[0]*-2);
 8000d8c:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
 8000d90:	0079      	lsls	r1, r7, #1
 8000d92:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8000d96:	2014      	movs	r0, #20
 8000d98:	f7ff ff85 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRH, (offset[1]*-2)>>8);
 8000d9c:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8000da0:	f3c8 11c7 	ubfx	r1, r8, #7, #8
 8000da4:	2015      	movs	r0, #21
 8000da6:	f7ff ff7e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRL, offset[1]*-2);
 8000daa:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
 8000dae:	0071      	lsls	r1, r6, #1
 8000db0:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8000db4:	2016      	movs	r0, #22
 8000db6:	f7ff ff76 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRH, (offset[2]*-2)>>8);
 8000dba:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8000dbe:	f3c5 11c7 	ubfx	r1, r5, #7, #8
 8000dc2:	2017      	movs	r0, #23
 8000dc4:	f7ff ff6f 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRL, offset[2]*-2);
 8000dc8:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 8000dcc:	0061      	lsls	r1, r4, #1
 8000dce:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8000dd2:	2018      	movs	r0, #24
 8000dd4:	f7ff ff67 	bl	8000ca6 <ICM20602_Write>
}
 8000dd8:	b004      	add	sp, #16
 8000dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000dde <ICM20602_Init>:
{
 8000dde:	b530      	push	{r4, r5, lr}
 8000de0:	b083      	sub	sp, #12
 8000de2:	4604      	mov	r4, r0
	dev->gyroXRaw = 	0.0f;
 8000de4:	2500      	movs	r5, #0
 8000de6:	8005      	strh	r5, [r0, #0]
	dev->gyroYRaw = 	0.0f;
 8000de8:	8045      	strh	r5, [r0, #2]
	dev->gyroZRaw = 	0.0f;
 8000dea:	8085      	strh	r5, [r0, #4]
	dev->accXRaw = 		0.0f;
 8000dec:	80c5      	strh	r5, [r0, #6]
	dev->accYRaw = 		0.0f;
 8000dee:	8105      	strh	r5, [r0, #8]
	dev->accZRaw = 		0.0f;
 8000df0:	8145      	strh	r5, [r0, #10]
	dev->temperatureC = 0.0f;
 8000df2:	2300      	movs	r3, #0
 8000df4:	6243      	str	r3, [r0, #36]	@ 0x24
	Init_GPIO(PA,  10, IN, I_PP); // Init GPIO for the interrupt
 8000df6:	2302      	movs	r3, #2
 8000df8:	462a      	mov	r2, r5
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 f9fb 	bl	80011f8 <Init_GPIO>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x80);
 8000e02:	2180      	movs	r1, #128	@ 0x80
 8000e04:	206b      	movs	r0, #107	@ 0x6b
 8000e06:	f7ff ff4e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_I2C_IF, 0x40);
 8000e0a:	2140      	movs	r1, #64	@ 0x40
 8000e0c:	2070      	movs	r0, #112	@ 0x70
 8000e0e:	f7ff ff4a 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x01);
 8000e12:	2101      	movs	r1, #1
 8000e14:	206b      	movs	r0, #107	@ 0x6b
 8000e16:	f7ff ff46 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_SMPLRT_DIV, 0x00);
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	2019      	movs	r0, #25
 8000e1e:	f7ff ff42 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_CONFIG, 0x05);
 8000e22:	2105      	movs	r1, #5
 8000e24:	201a      	movs	r0, #26
 8000e26:	f7ff ff3e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_GYRO_CONFIG, 0x018);
 8000e2a:	2118      	movs	r1, #24
 8000e2c:	201b      	movs	r0, #27
 8000e2e:	f7ff ff3a 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG, 0x18);
 8000e32:	2118      	movs	r1, #24
 8000e34:	201c      	movs	r0, #28
 8000e36:	f7ff ff36 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	201d      	movs	r0, #29
 8000e3e:	f7ff ff32 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_INT_ENABLE, 0x01);
 8000e42:	2101      	movs	r1, #1
 8000e44:	2038      	movs	r0, #56	@ 0x38
 8000e46:	f7ff ff2e 	bl	8000ca6 <ICM20602_Write>
	ICM20602_Read(ICM20602_REG_WHO_AM_I, rxData, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	a901      	add	r1, sp, #4
 8000e4e:	2075      	movs	r0, #117	@ 0x75
 8000e50:	f7ff ff09 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_I2C_IF, rxData, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	a901      	add	r1, sp, #4
 8000e58:	2070      	movs	r0, #112	@ 0x70
 8000e5a:	f7ff ff04 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_PWR_MGMT_1, rxData, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	a901      	add	r1, sp, #4
 8000e62:	206b      	movs	r0, #107	@ 0x6b
 8000e64:	f7ff feff 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_SMPLRT_DIV, rxData, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	a901      	add	r1, sp, #4
 8000e6c:	2019      	movs	r0, #25
 8000e6e:	f7ff fefa 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_CONFIG, rxData, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	a901      	add	r1, sp, #4
 8000e76:	201a      	movs	r0, #26
 8000e78:	f7ff fef5 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG, rxData, 1);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	a901      	add	r1, sp, #4
 8000e80:	201c      	movs	r0, #28
 8000e82:	f7ff fef0 	bl	8000c66 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG2, rxData, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	a901      	add	r1, sp, #4
 8000e8a:	201d      	movs	r0, #29
 8000e8c:	f7ff feeb 	bl	8000c66 <ICM20602_Read>
	ICM20602_Remove_DC_Offset(dev,2);
 8000e90:	2102      	movs	r1, #2
 8000e92:	4620      	mov	r0, r4
 8000e94:	f7ff ff27 	bl	8000ce6 <ICM20602_Remove_DC_Offset>
}
 8000e98:	4628      	mov	r0, r5
 8000e9a:	b003      	add	sp, #12
 8000e9c:	bd30      	pop	{r4, r5, pc}
	...

08000ea0 <FATFS_ErrorToString>:
extern char USERPath[4];

// Dedebugging
const char* FATFS_ErrorToString(FRESULT result) {

    switch (result) {
 8000ea0:	2813      	cmp	r0, #19
 8000ea2:	d831      	bhi.n	8000f08 <FATFS_ErrorToString+0x68>
 8000ea4:	e8df f000 	tbb	[pc, r0]
 8000ea8:	0e0c320a 	.word	0x0e0c320a
 8000eac:	16141210 	.word	0x16141210
 8000eb0:	1e1c1a18 	.word	0x1e1c1a18
 8000eb4:	26242220 	.word	0x26242220
 8000eb8:	2e2c2a28 	.word	0x2e2c2a28
 8000ebc:	4814      	ldr	r0, [pc, #80]	@ (8000f10 <FATFS_ErrorToString+0x70>)
 8000ebe:	4770      	bx	lr
        case FR_OK: return "Succeeded";
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer";
        case FR_INT_ERR: return "Assertion failed";
 8000ec0:	4814      	ldr	r0, [pc, #80]	@ (8000f14 <FATFS_ErrorToString+0x74>)
 8000ec2:	4770      	bx	lr
        case FR_NOT_READY: return "The physical drive cannot work";
 8000ec4:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <FATFS_ErrorToString+0x78>)
 8000ec6:	4770      	bx	lr
        case FR_NO_FILE: return "Could not find the file";
 8000ec8:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <FATFS_ErrorToString+0x7c>)
 8000eca:	4770      	bx	lr
        case FR_NO_PATH: return "Could not find the path";
 8000ecc:	4814      	ldr	r0, [pc, #80]	@ (8000f20 <FATFS_ErrorToString+0x80>)
 8000ece:	4770      	bx	lr
        case FR_INVALID_NAME: return "The path name format is invalid";
 8000ed0:	4814      	ldr	r0, [pc, #80]	@ (8000f24 <FATFS_ErrorToString+0x84>)
 8000ed2:	4770      	bx	lr
        case FR_DENIED: return "Access denied due to prohibited access or directory full";
 8000ed4:	4814      	ldr	r0, [pc, #80]	@ (8000f28 <FATFS_ErrorToString+0x88>)
 8000ed6:	4770      	bx	lr
        case FR_EXIST: return "Access denied due to prohibited access";
 8000ed8:	4814      	ldr	r0, [pc, #80]	@ (8000f2c <FATFS_ErrorToString+0x8c>)
 8000eda:	4770      	bx	lr
        case FR_INVALID_OBJECT: return "The file/directory object is invalid";
 8000edc:	4814      	ldr	r0, [pc, #80]	@ (8000f30 <FATFS_ErrorToString+0x90>)
 8000ede:	4770      	bx	lr
        case FR_WRITE_PROTECTED: return "The physical drive is write protected";
 8000ee0:	4814      	ldr	r0, [pc, #80]	@ (8000f34 <FATFS_ErrorToString+0x94>)
 8000ee2:	4770      	bx	lr
        case FR_INVALID_DRIVE: return "The logical drive number is invalid";
 8000ee4:	4814      	ldr	r0, [pc, #80]	@ (8000f38 <FATFS_ErrorToString+0x98>)
 8000ee6:	4770      	bx	lr
        case FR_NOT_ENABLED: return "The volume has no work area";
 8000ee8:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <FATFS_ErrorToString+0x9c>)
 8000eea:	4770      	bx	lr
        case FR_NO_FILESYSTEM: return "There is no valid FAT volume";
 8000eec:	4814      	ldr	r0, [pc, #80]	@ (8000f40 <FATFS_ErrorToString+0xa0>)
 8000eee:	4770      	bx	lr
        case FR_MKFS_ABORTED: return "The f_mkfs() aborted due to any parameter error";
 8000ef0:	4814      	ldr	r0, [pc, #80]	@ (8000f44 <FATFS_ErrorToString+0xa4>)
 8000ef2:	4770      	bx	lr
        case FR_TIMEOUT: return "Could not get a grant to access the volume within defined period";
 8000ef4:	4814      	ldr	r0, [pc, #80]	@ (8000f48 <FATFS_ErrorToString+0xa8>)
 8000ef6:	4770      	bx	lr
        case FR_LOCKED: return "The operation is rejected according to the file sharing policy";
 8000ef8:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <FATFS_ErrorToString+0xac>)
 8000efa:	4770      	bx	lr
        case FR_NOT_ENOUGH_CORE: return "LFN working buffer could not be allocated";
 8000efc:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <FATFS_ErrorToString+0xb0>)
 8000efe:	4770      	bx	lr
        case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_SHARE";
 8000f00:	4814      	ldr	r0, [pc, #80]	@ (8000f54 <FATFS_ErrorToString+0xb4>)
 8000f02:	4770      	bx	lr
        case FR_INVALID_PARAMETER: return "Given parameter is invalid";
 8000f04:	4814      	ldr	r0, [pc, #80]	@ (8000f58 <FATFS_ErrorToString+0xb8>)
 8000f06:	4770      	bx	lr
        default: return "Unknown error";
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <FATFS_ErrorToString+0xbc>)
 8000f0a:	4770      	bx	lr
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer";
 8000f0c:	4814      	ldr	r0, [pc, #80]	@ (8000f60 <FATFS_ErrorToString+0xc0>)
    }
}
 8000f0e:	4770      	bx	lr
 8000f10:	08009ea4 	.word	0x08009ea4
 8000f14:	08009ee8 	.word	0x08009ee8
 8000f18:	08009efc 	.word	0x08009efc
 8000f1c:	08009f1c 	.word	0x08009f1c
 8000f20:	08009f34 	.word	0x08009f34
 8000f24:	08009f4c 	.word	0x08009f4c
 8000f28:	08009f6c 	.word	0x08009f6c
 8000f2c:	08009fa8 	.word	0x08009fa8
 8000f30:	08009fd0 	.word	0x08009fd0
 8000f34:	08009ff8 	.word	0x08009ff8
 8000f38:	0800a020 	.word	0x0800a020
 8000f3c:	0800a044 	.word	0x0800a044
 8000f40:	0800a060 	.word	0x0800a060
 8000f44:	0800a080 	.word	0x0800a080
 8000f48:	0800a0b0 	.word	0x0800a0b0
 8000f4c:	0800a0f4 	.word	0x0800a0f4
 8000f50:	0800a134 	.word	0x0800a134
 8000f54:	0800a160 	.word	0x0800a160
 8000f58:	0800a184 	.word	0x0800a184
 8000f5c:	0800a1a0 	.word	0x0800a1a0
 8000f60:	08009eb0 	.word	0x08009eb0

08000f64 <MEM2067_WriteFATFS>:

uint8_t MEM2067_WriteFATFS(const char *filename, uint8_t *data, uint16_t size) {
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	4616      	mov	r6, r2

    Write_GPIO(PA, 4, LOW);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2104      	movs	r1, #4
 8000f74:	2001      	movs	r0, #1
 8000f76:	f000 f989 	bl	800128c <Write_GPIO>

    FIL file;
    FRESULT result;
    UINT bytes_written;

    result = f_mount(&USERFatFS, USERPath, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	492d      	ldr	r1, [pc, #180]	@ (8001034 <MEM2067_WriteFATFS+0xd0>)
 8000f7e:	482e      	ldr	r0, [pc, #184]	@ (8001038 <MEM2067_WriteFATFS+0xd4>)
 8000f80:	f005 fcc0 	bl	8006904 <f_mount>
    if (result != FR_OK) {
 8000f84:	bb30      	cbnz	r0, 8000fd4 <MEM2067_WriteFATFS+0x70>
        printf("Error mounting: %s\n", FATFS_ErrorToString(result));
        Write_GPIO(PA, 4, HIGH);
        return 1;
    }

    result = f_open(&file, filename, FA_WRITE | FA_CREATE_ALWAYS);
 8000f86:	220a      	movs	r2, #10
 8000f88:	4621      	mov	r1, r4
 8000f8a:	a801      	add	r0, sp, #4
 8000f8c:	f005 fd02 	bl	8006994 <f_open>
    if (result != FR_OK) {
 8000f90:	bb80      	cbnz	r0, 8000ff4 <MEM2067_WriteFATFS+0x90>
        f_mount(NULL, USERPath, 1);
        Write_GPIO(PA, 4, HIGH);
        return 1;
    }

    result = f_write(&file, data, size, &bytes_written);
 8000f92:	466b      	mov	r3, sp
 8000f94:	4632      	mov	r2, r6
 8000f96:	4629      	mov	r1, r5
 8000f98:	a801      	add	r0, sp, #4
 8000f9a:	f005 ff70 	bl	8006e7e <f_write>
    if (result != FR_OK || bytes_written != size) {
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	b910      	cbnz	r0, 8000fa8 <MEM2067_WriteFATFS+0x44>
 8000fa2:	9b00      	ldr	r3, [sp, #0]
 8000fa4:	429e      	cmp	r6, r3
 8000fa6:	d037      	beq.n	8001018 <MEM2067_WriteFATFS+0xb4>
        printf("Error writing: %s\n", FATFS_ErrorToString(result));
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f7ff ff79 	bl	8000ea0 <FATFS_ErrorToString>
 8000fae:	4601      	mov	r1, r0
 8000fb0:	4822      	ldr	r0, [pc, #136]	@ (800103c <MEM2067_WriteFATFS+0xd8>)
 8000fb2:	f007 f821 	bl	8007ff8 <iprintf>
        f_close(&file);
 8000fb6:	a801      	add	r0, sp, #4
 8000fb8:	f006 f9c8 	bl	800734c <f_close>
        f_mount(NULL, USERPath, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	491d      	ldr	r1, [pc, #116]	@ (8001034 <MEM2067_WriteFATFS+0xd0>)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f005 fc9f 	bl	8006904 <f_mount>
        Write_GPIO(PA, 4, HIGH);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f000 f95e 	bl	800128c <Write_GPIO>
        return 1;
 8000fd0:	2401      	movs	r4, #1
 8000fd2:	e00b      	b.n	8000fec <MEM2067_WriteFATFS+0x88>
        printf("Error mounting: %s\n", FATFS_ErrorToString(result));
 8000fd4:	f7ff ff64 	bl	8000ea0 <FATFS_ErrorToString>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	4819      	ldr	r0, [pc, #100]	@ (8001040 <MEM2067_WriteFATFS+0xdc>)
 8000fdc:	f007 f80c 	bl	8007ff8 <iprintf>
        Write_GPIO(PA, 4, HIGH);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f000 f951 	bl	800128c <Write_GPIO>
        return 1;
 8000fea:	2401      	movs	r4, #1
    f_mount(NULL, USERPath, 1);

    Write_GPIO(PA, 4, HIGH);

    return 0;
}
 8000fec:	4620      	mov	r0, r4
 8000fee:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error opening file: %s\n", FATFS_ErrorToString(result));
 8000ff4:	f7ff ff54 	bl	8000ea0 <FATFS_ErrorToString>
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	4812      	ldr	r0, [pc, #72]	@ (8001044 <MEM2067_WriteFATFS+0xe0>)
 8000ffc:	f006 fffc 	bl	8007ff8 <iprintf>
        f_mount(NULL, USERPath, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	490c      	ldr	r1, [pc, #48]	@ (8001034 <MEM2067_WriteFATFS+0xd0>)
 8001004:	2000      	movs	r0, #0
 8001006:	f005 fc7d 	bl	8006904 <f_mount>
        Write_GPIO(PA, 4, HIGH);
 800100a:	2201      	movs	r2, #1
 800100c:	2104      	movs	r1, #4
 800100e:	4610      	mov	r0, r2
 8001010:	f000 f93c 	bl	800128c <Write_GPIO>
        return 1;
 8001014:	2401      	movs	r4, #1
 8001016:	e7e9      	b.n	8000fec <MEM2067_WriteFATFS+0x88>
    f_close(&file);
 8001018:	a801      	add	r0, sp, #4
 800101a:	f006 f997 	bl	800734c <f_close>
    f_mount(NULL, USERPath, 1);
 800101e:	2201      	movs	r2, #1
 8001020:	4904      	ldr	r1, [pc, #16]	@ (8001034 <MEM2067_WriteFATFS+0xd0>)
 8001022:	2000      	movs	r0, #0
 8001024:	f005 fc6e 	bl	8006904 <f_mount>
    Write_GPIO(PA, 4, HIGH);
 8001028:	2201      	movs	r2, #1
 800102a:	2104      	movs	r1, #4
 800102c:	4610      	mov	r0, r2
 800102e:	f000 f92d 	bl	800128c <Write_GPIO>
    return 0;
 8001032:	e7db      	b.n	8000fec <MEM2067_WriteFATFS+0x88>
 8001034:	200003f8 	.word	0x200003f8
 8001038:	200003fc 	.word	0x200003fc
 800103c:	0800a1dc 	.word	0x0800a1dc
 8001040:	0800a1b0 	.word	0x0800a1b0
 8001044:	0800a1c4 	.word	0x0800a1c4

08001048 <MEM2067_SDCardDetection>:

uint8_t MEM2067_SDCardDetection(void) {
 8001048:	b510      	push	{r4, lr}

    Write_GPIO(PA, 4, LOW);
 800104a:	2200      	movs	r2, #0
 800104c:	2104      	movs	r1, #4
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f91c 	bl	800128c <Write_GPIO>

    memset(&USERFatFS, 0, sizeof(USERFatFS));
 8001054:	4c17      	ldr	r4, [pc, #92]	@ (80010b4 <MEM2067_SDCardDetection+0x6c>)
 8001056:	f44f 720c 	mov.w	r2, #560	@ 0x230
 800105a:	2100      	movs	r1, #0
 800105c:	4620      	mov	r0, r4
 800105e:	f007 f913 	bl	8008288 <memset>
    memset(USERPath, 0, sizeof(USERPath));
 8001062:	4915      	ldr	r1, [pc, #84]	@ (80010b8 <MEM2067_SDCardDetection+0x70>)
 8001064:	2300      	movs	r3, #0
 8001066:	600b      	str	r3, [r1, #0]

    FRESULT res = f_mount(&USERFatFS, USERPath, 1);
 8001068:	2201      	movs	r2, #1
 800106a:	4620      	mov	r0, r4
 800106c:	f005 fc4a 	bl	8006904 <f_mount>
 8001070:	4604      	mov	r4, r0
    printf(" -> SD card error, result: %s\n", FATFS_ErrorToString(res));
 8001072:	f7ff ff15 	bl	8000ea0 <FATFS_ErrorToString>
 8001076:	4601      	mov	r1, r0
 8001078:	4810      	ldr	r0, [pc, #64]	@ (80010bc <MEM2067_SDCardDetection+0x74>)
 800107a:	f006 ffbd 	bl	8007ff8 <iprintf>

    if (res == FR_OK) {
 800107e:	b974      	cbnz	r4, 800109e <MEM2067_SDCardDetection+0x56>
        f_mount(NULL, USERPath, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <MEM2067_SDCardDetection+0x70>)
 8001084:	2000      	movs	r0, #0
 8001086:	f005 fc3d 	bl	8006904 <f_mount>
        Write_GPIO(PA, 4, HIGH);
 800108a:	2201      	movs	r2, #1
 800108c:	2104      	movs	r1, #4
 800108e:	4610      	mov	r0, r2
 8001090:	f000 f8fc 	bl	800128c <Write_GPIO>
        printf(" -> SD card detected\r\n");
 8001094:	480a      	ldr	r0, [pc, #40]	@ (80010c0 <MEM2067_SDCardDetection+0x78>)
 8001096:	f007 f817 	bl	80080c8 <puts>
    } else {
        printf(" -> No SD card detected\r\n");
        Write_GPIO(PA, 4, HIGH);
        return 1;
    }
}
 800109a:	4620      	mov	r0, r4
 800109c:	bd10      	pop	{r4, pc}
        printf(" -> No SD card detected\r\n");
 800109e:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <MEM2067_SDCardDetection+0x7c>)
 80010a0:	f007 f812 	bl	80080c8 <puts>
        Write_GPIO(PA, 4, HIGH);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2104      	movs	r1, #4
 80010a8:	4610      	mov	r0, r2
 80010aa:	f000 f8ef 	bl	800128c <Write_GPIO>
        return 1;
 80010ae:	2401      	movs	r4, #1
 80010b0:	e7f3      	b.n	800109a <MEM2067_SDCardDetection+0x52>
 80010b2:	bf00      	nop
 80010b4:	200003fc 	.word	0x200003fc
 80010b8:	200003f8 	.word	0x200003f8
 80010bc:	0800a1f0 	.word	0x0800a1f0
 80010c0:	0800a210 	.word	0x0800a210
 80010c4:	0800a228 	.word	0x0800a228

080010c8 <Pyro_Init>:
 *      Author: gagno
 */

#include "GAUL_Drivers/Pyros.h"

void Pyro_Init(void) {
 80010c8:	b508      	push	{r3, lr}

	// Pyros
	Init_GPIO(PB, 4, OUT2, O_GP_PP); // PyroON0
 80010ca:	2300      	movs	r3, #0
 80010cc:	2202      	movs	r2, #2
 80010ce:	2104      	movs	r1, #4
 80010d0:	4610      	mov	r0, r2
 80010d2:	f000 f891 	bl	80011f8 <Init_GPIO>
	Init_GPIO(PB, 5, OUT2, O_GP_PP); // PyroON1
 80010d6:	2300      	movs	r3, #0
 80010d8:	2202      	movs	r2, #2
 80010da:	2105      	movs	r1, #5
 80010dc:	4610      	mov	r0, r2
 80010de:	f000 f88b 	bl	80011f8 <Init_GPIO>
	Init_GPIO(PA, 15, OUT2, O_GP_PP); // Pyro_Test~
 80010e2:	2300      	movs	r3, #0
 80010e4:	2202      	movs	r2, #2
 80010e6:	210f      	movs	r1, #15
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f885 	bl	80011f8 <Init_GPIO>
	// Set Pyro_Test~ (inverse) et Pyros_ON LOW
	Write_GPIO(PA, 15, HIGH);
 80010ee:	2201      	movs	r2, #1
 80010f0:	210f      	movs	r1, #15
 80010f2:	4610      	mov	r0, r2
 80010f4:	f000 f8ca 	bl	800128c <Write_GPIO>
	Write_GPIO(PB, 4, LOW);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2104      	movs	r1, #4
 80010fc:	2002      	movs	r0, #2
 80010fe:	f000 f8c5 	bl	800128c <Write_GPIO>
	Write_GPIO(PB, 5, LOW);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	2002      	movs	r0, #2
 8001108:	f000 f8c0 	bl	800128c <Write_GPIO>
}
 800110c:	bd08      	pop	{r3, pc}
	...

08001110 <ws2812_timer2_init>:
static uint16_t ws2812_gpio_set_bits = 0;
static uint16_t dma_buffer[DMA_BUFFER_SIZE];


static void ws2812_timer2_init(void)
{
 8001110:	b570      	push	{r4, r5, r6, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001114:	2400      	movs	r4, #0
 8001116:	940a      	str	r4, [sp, #40]	@ 0x28
 8001118:	940b      	str	r4, [sp, #44]	@ 0x2c
 800111a:	940c      	str	r4, [sp, #48]	@ 0x30
 800111c:	940d      	str	r4, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111e:	9408      	str	r4, [sp, #32]
 8001120:	9409      	str	r4, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001122:	9401      	str	r4, [sp, #4]
 8001124:	9402      	str	r4, [sp, #8]
 8001126:	9403      	str	r4, [sp, #12]
 8001128:	9404      	str	r4, [sp, #16]
 800112a:	9405      	str	r4, [sp, #20]
 800112c:	9406      	str	r4, [sp, #24]
 800112e:	9407      	str	r4, [sp, #28]

    htimer2.Instance = TIM2;
 8001130:	4d1a      	ldr	r5, [pc, #104]	@ (800119c <ws2812_timer2_init+0x8c>)
 8001132:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001136:	602b      	str	r3, [r5, #0]
    htimer2.Init.Prescaler = 0;
 8001138:	606c      	str	r4, [r5, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	60ac      	str	r4, [r5, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 800113c:	235a      	movs	r3, #90	@ 0x5a
 800113e:	60eb      	str	r3, [r5, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	612c      	str	r4, [r5, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htimer2);
 8001144:	4628      	mov	r0, r5
 8001146:	f002 faa7 	bl	8003698 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114e:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8001150:	a90a      	add	r1, sp, #40	@ 0x28
 8001152:	4628      	mov	r0, r5
 8001154:	f002 fc0a 	bl	800396c <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8001158:	4628      	mov	r0, r5
 800115a:	f002 faec 	bl	8003736 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	9408      	str	r4, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8001162:	a908      	add	r1, sp, #32
 8001164:	4628      	mov	r0, r5
 8001166:	f002 ff49 	bl	8003ffc <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116a:	2660      	movs	r6, #96	@ 0x60
 800116c:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 800116e:	231c      	movs	r3, #28
 8001170:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001174:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001176:	4622      	mov	r2, r4
 8001178:	a901      	add	r1, sp, #4
 800117a:	4628      	mov	r0, r5
 800117c:	f002 fb34 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8001182:	2339      	movs	r3, #57	@ 0x39
 8001184:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001188:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 800118a:	2204      	movs	r2, #4
 800118c:	eb0d 0102 	add.w	r1, sp, r2
 8001190:	4628      	mov	r0, r5
 8001192:	f002 fb29 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
}
 8001196:	b00e      	add	sp, #56	@ 0x38
 8001198:	bd70      	pop	{r4, r5, r6, pc}
 800119a:	bf00      	nop
 800119c:	20000204 	.word	0x20000204

080011a0 <WS2812_Init>:
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
}

void WS2812_Init()
{
 80011a0:	b500      	push	{lr}
 80011a2:	b083      	sub	sp, #12
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <WS2812_Init+0x40>)
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	9b01      	ldr	r3, [sp, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	4611      	mov	r1, r2
 80011bc:	200c      	movs	r0, #12
 80011be:	f001 fa64 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	4611      	mov	r1, r2
 80011c6:	200f      	movs	r0, #15
 80011c8:	f001 fa5f 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	4611      	mov	r1, r2
 80011d0:	2011      	movs	r0, #17
 80011d2:	f001 fa5a 	bl	800268a <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 80011d6:	f7ff ff9b 	bl	8001110 <ws2812_timer2_init>
}
 80011da:	b003      	add	sp, #12
 80011dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e0:	40021000 	.word	0x40021000

080011e4 <ADC_Calibration>:
	HAL_ADC_Start(hadc);

	return 0;
}

uint8_t ADC_Calibration(ADC_HandleTypeDef *hadc) {
 80011e4:	b508      	push	{r3, lr}

	HAL_ADCEx_Calibration_Start(hadc);
 80011e6:	f001 f8cb 	bl	8002380 <HAL_ADCEx_Calibration_Start>

	return 0;
}
 80011ea:	2000      	movs	r0, #0
 80011ec:	bd08      	pop	{r3, pc}

080011ee <ADC_Stop>:

uint8_t ADC_Stop(ADC_HandleTypeDef *hadc) {
 80011ee:	b508      	push	{r3, lr}

	HAL_ADC_Stop(hadc);
 80011f0:	f000 ff06 	bl	8002000 <HAL_ADC_Stop>

	return 0;
}
 80011f4:	2000      	movs	r0, #0
 80011f6:	bd08      	pop	{r3, pc}

080011f8 <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 80011f8:	b510      	push	{r4, lr}
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 unsigned short offset = 0x00;

	if(pin > 7)
 80011fa:	2907      	cmp	r1, #7
 80011fc:	d904      	bls.n	8001208 <Init_GPIO+0x10>
		{
			tPIN -= 8;
 80011fe:	3908      	subs	r1, #8
 8001200:	b289      	uxth	r1, r1
			offset = 0x01;
 8001202:	f04f 0e01 	mov.w	lr, #1
 8001206:	e001      	b.n	800120c <Init_GPIO+0x14>
 unsigned short offset = 0x00;
 8001208:	f04f 0e00 	mov.w	lr, #0
		}

	if(port == 1)
 800120c:	2801      	cmp	r0, #1
 800120e:	d00f      	beq.n	8001230 <Init_GPIO+0x38>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8001210:	2802      	cmp	r0, #2
 8001212:	d02d      	beq.n	8001270 <Init_GPIO+0x78>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001214:	2803      	cmp	r0, #3
 8001216:	d116      	bne.n	8001246 <Init_GPIO+0x4e>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 8001218:	4c1b      	ldr	r4, [pc, #108]	@ (8001288 <Init_GPIO+0x90>)
 800121a:	69a0      	ldr	r0, [r4, #24]
 800121c:	f040 0010 	orr.w	r0, r0, #16
 8001220:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 8001222:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001226:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 800122a:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 800122e:	e00a      	b.n	8001246 <Init_GPIO+0x4e>
			RCC_APB2ENR |= 4; //// Enabling PORT A
 8001230:	4c15      	ldr	r4, [pc, #84]	@ (8001288 <Init_GPIO+0x90>)
 8001232:	69a0      	ldr	r0, [r4, #24]
 8001234:	f040 0004 	orr.w	r0, r0, #4
 8001238:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 800123a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800123e:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001242:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 8001246:	f8dc 0000 	ldr.w	r0, [ip]
 800124a:	0089      	lsls	r1, r1, #2
 800124c:	f04f 0e0f 	mov.w	lr, #15
 8001250:	fa0e fe01 	lsl.w	lr, lr, r1
 8001254:	ea20 000e 	bic.w	r0, r0, lr
 8001258:	f8cc 0000 	str.w	r0, [ip]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 800125c:	f8dc 0000 	ldr.w	r0, [ip]
 8001260:	408a      	lsls	r2, r1
 8001262:	3102      	adds	r1, #2
 8001264:	408b      	lsls	r3, r1
 8001266:	431a      	orrs	r2, r3
 8001268:	4302      	orrs	r2, r0
 800126a:	f8cc 2000 	str.w	r2, [ip]
}
 800126e:	bd10      	pop	{r4, pc}
			RCC_APB2ENR |= 8; //// Enabling PORT A
 8001270:	4c05      	ldr	r4, [pc, #20]	@ (8001288 <Init_GPIO+0x90>)
 8001272:	69a0      	ldr	r0, [r4, #24]
 8001274:	f040 0008 	orr.w	r0, r0, #8
 8001278:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 800127a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800127e:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001282:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 8001286:	e7de      	b.n	8001246 <Init_GPIO+0x4e>
 8001288:	40021000 	.word	0x40021000

0800128c <Write_GPIO>:
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
 800128c:	2801      	cmp	r0, #1
 800128e:	d005      	beq.n	800129c <Write_GPIO+0x10>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8001290:	2802      	cmp	r0, #2
 8001292:	d00a      	beq.n	80012aa <Write_GPIO+0x1e>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001294:	2803      	cmp	r0, #3
 8001296:	d102      	bne.n	800129e <Write_GPIO+0x12>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <Write_GPIO+0x34>)
 800129a:	e000      	b.n	800129e <Write_GPIO+0x12>
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <Write_GPIO+0x38>)
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 800129e:	b132      	cbz	r2, 80012ae <Write_GPIO+0x22>
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	408a      	lsls	r2, r1
 80012a4:	4302      	orrs	r2, r0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	4770      	bx	lr
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <Write_GPIO+0x3c>)
 80012ac:	e7f7      	b.n	800129e <Write_GPIO+0x12>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f101 	lsl.w	r1, r0, r1
 80012b6:	ea22 0201 	bic.w	r2, r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	4001100c 	.word	0x4001100c
 80012c4:	4001080c 	.word	0x4001080c
 80012c8:	40010c0c 	.word	0x40010c0c

080012cc <SPI_Init>:

#include "main.h"
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"
#include "GAUL_Drivers/Low_Level_Drivers/SPI_driver.h"

void SPI_Init(unsigned short spi) {
 80012cc:	b508      	push	{r3, lr}
    if(spi == 1) {
 80012ce:	2801      	cmp	r0, #1
 80012d0:	d002      	beq.n	80012d8 <SPI_Init+0xc>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1

        Write_GPIO(PA, 4, HIGH);

        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    } else if(spi == 2) {
 80012d2:	2802      	cmp	r0, #2
 80012d4:	d026      	beq.n	8001324 <SPI_Init+0x58>
        Write_GPIO(PA, 8, HIGH);
        Write_GPIO(PB, 12, HIGH);

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}
 80012d6:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80012d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001388 <SPI_Init+0xbc>)
 80012da:	6993      	ldr	r3, [r2, #24]
 80012dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012e0:	6193      	str	r3, [r2, #24]
        Init_GPIO(PA, 4, OUT50, O_GP_PP); // CS
 80012e2:	2300      	movs	r3, #0
 80012e4:	2203      	movs	r2, #3
 80012e6:	2104      	movs	r1, #4
 80012e8:	f7ff ff86 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PA, 5, OUT50, O_AF_PP); // CLK
 80012ec:	2302      	movs	r3, #2
 80012ee:	2203      	movs	r2, #3
 80012f0:	2105      	movs	r1, #5
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7ff ff80 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PA, 6, IN, I_PP);    // MISO SPI1
 80012f8:	2302      	movs	r3, #2
 80012fa:	2200      	movs	r2, #0
 80012fc:	2106      	movs	r1, #6
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff ff7a 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1
 8001304:	2302      	movs	r3, #2
 8001306:	2203      	movs	r2, #3
 8001308:	2107      	movs	r1, #7
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ff74 	bl	80011f8 <Init_GPIO>
        Write_GPIO(PA, 4, HIGH);
 8001310:	2201      	movs	r2, #1
 8001312:	2104      	movs	r1, #4
 8001314:	4610      	mov	r0, r2
 8001316:	f7ff ffb9 	bl	800128c <Write_GPIO>
        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <SPI_Init+0xc0>)
 800131c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e7d8      	b.n	80012d6 <SPI_Init+0xa>
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001324:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <SPI_Init+0xbc>)
 8001326:	69d3      	ldr	r3, [r2, #28]
 8001328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132c:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 8, OUT50, O_GP_PP); // CS (optionnel)
 800132e:	2300      	movs	r3, #0
 8001330:	2203      	movs	r2, #3
 8001332:	2108      	movs	r1, #8
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff ff5f 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PB, 12, OUT50, O_GP_PP); // CS
 800133a:	2300      	movs	r3, #0
 800133c:	2203      	movs	r2, #3
 800133e:	210c      	movs	r1, #12
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff ff59 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PB, 13, OUT50, O_AF_PP); // CLK
 8001346:	2302      	movs	r3, #2
 8001348:	2203      	movs	r2, #3
 800134a:	210d      	movs	r1, #13
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff53 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
 8001352:	2302      	movs	r3, #2
 8001354:	2200      	movs	r2, #0
 8001356:	210e      	movs	r1, #14
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff4d 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2
 800135e:	2302      	movs	r3, #2
 8001360:	2203      	movs	r2, #3
 8001362:	210f      	movs	r1, #15
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff47 	bl	80011f8 <Init_GPIO>
        Write_GPIO(PA, 8, HIGH);
 800136a:	2201      	movs	r2, #1
 800136c:	2108      	movs	r1, #8
 800136e:	4610      	mov	r0, r2
 8001370:	f7ff ff8c 	bl	800128c <Write_GPIO>
        Write_GPIO(PB, 12, HIGH);
 8001374:	2201      	movs	r2, #1
 8001376:	210c      	movs	r1, #12
 8001378:	2002      	movs	r0, #2
 800137a:	f7ff ff87 	bl	800128c <Write_GPIO>
        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <SPI_Init+0xc4>)
 8001380:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	e7a6      	b.n	80012d6 <SPI_Init+0xa>
 8001388:	40021000 	.word	0x40021000
 800138c:	40013000 	.word	0x40013000
 8001390:	40003800 	.word	0x40003800

08001394 <SPI2_TX>:

    uint8_t temp = SPI1->DR;
    temp = SPI1->SR;
}

void SPI2_TX(uint8_t *data, int size) {
 8001394:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 8001396:	2200      	movs	r2, #0
 8001398:	e008      	b.n	80013ac <SPI2_TX+0x18>
        while (!(SPI2->SR & SPI_SR_TXE)) {}
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <SPI2_TX+0x38>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f013 0f02 	tst.w	r3, #2
 80013a2:	d0fa      	beq.n	800139a <SPI2_TX+0x6>
        SPI2->DR = data[i];
 80013a4:	5c81      	ldrb	r1, [r0, r2]
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <SPI2_TX+0x38>)
 80013a8:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 80013aa:	3201      	adds	r2, #1
 80013ac:	4562      	cmp	r2, ip
 80013ae:	dbf4      	blt.n	800139a <SPI2_TX+0x6>
    }

    while (!(SPI2->SR & SPI_SR_TXE)) {}
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SPI2_TX+0x38>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f013 0f02 	tst.w	r3, #2
 80013b8:	d0fa      	beq.n	80013b0 <SPI2_TX+0x1c>
    while (SPI2->SR & SPI_SR_BSY) {}
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <SPI2_TX+0x38>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013c2:	d1fa      	bne.n	80013ba <SPI2_TX+0x26>

    uint8_t temp = SPI2->DR;
 80013c4:	4b01      	ldr	r3, [pc, #4]	@ (80013cc <SPI2_TX+0x38>)
 80013c6:	68da      	ldr	r2, [r3, #12]
    temp = SPI2->SR;
 80013c8:	689b      	ldr	r3, [r3, #8]
}
 80013ca:	4770      	bx	lr
 80013cc:	40003800 	.word	0x40003800

080013d0 <SPI2_RX>:
    }
}

void SPI2_RX(uint8_t *data, int size) {

    while (size) {
 80013d0:	e011      	b.n	80013f6 <SPI2_RX+0x26>
        while (SPI2->SR & SPI_SR_BSY) {}
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <SPI2_RX+0x2c>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013da:	d1fa      	bne.n	80013d2 <SPI2_RX+0x2>
        SPI2->DR = 0;
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <SPI2_RX+0x2c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
        while (!(SPI2->SR & SPI_SR_RXNE)) {}
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <SPI2_RX+0x2c>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f013 0f01 	tst.w	r3, #1
 80013ea:	d0fa      	beq.n	80013e2 <SPI2_RX+0x12>
        *data++ = SPI2->DR;
 80013ec:	4b03      	ldr	r3, [pc, #12]	@ (80013fc <SPI2_RX+0x2c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 80013f4:	3901      	subs	r1, #1
    while (size) {
 80013f6:	2900      	cmp	r1, #0
 80013f8:	d1eb      	bne.n	80013d2 <SPI2_RX+0x2>
    }
}
 80013fa:	4770      	bx	lr
 80013fc:	40003800 	.word	0x40003800

08001400 <USART_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/USART_driver.h"
#include "main.h"


void USART_Init(unsigned short usart)
{
 8001400:	b508      	push	{r3, lr}
    if(usart == 1) {
 8001402:	2801      	cmp	r0, #1
 8001404:	d004      	beq.n	8001410 <USART_Init+0x10>
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART1
        NVIC_EnableIRQ(USART1_IRQn);
    }
    else if(usart == 2) {
 8001406:	2802      	cmp	r0, #2
 8001408:	d024      	beq.n	8001454 <USART_Init+0x54>
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART2
        NVIC_EnableIRQ(USART2_IRQn);
    }
    else if(usart == 3) {
 800140a:	2803      	cmp	r0, #3
 800140c:	d044      	beq.n	8001498 <USART_Init+0x98>
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART3
        NVIC_EnableIRQ(USART3_IRQn);
    }
}
 800140e:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001410:	4a32      	ldr	r2, [pc, #200]	@ (80014dc <USART_Init+0xdc>)
 8001412:	6993      	ldr	r3, [r2, #24]
 8001414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001418:	6193      	str	r3, [r2, #24]
        Init_GPIO(PB, 6, OUT50, O_AF_PP); // TX
 800141a:	2302      	movs	r3, #2
 800141c:	2203      	movs	r2, #3
 800141e:	2106      	movs	r1, #6
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fee9 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PB, 7, IN, I_PP); // RX
 8001426:	2302      	movs	r3, #2
 8001428:	2200      	movs	r2, #0
 800142a:	2107      	movs	r1, #7
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fee3 	bl	80011f8 <Init_GPIO>
        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
 8001432:	4b2b      	ldr	r3, [pc, #172]	@ (80014e0 <USART_Init+0xe0>)
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800143a:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	f042 0208 	orr.w	r2, r2, #8
 8001442:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	f042 0204 	orr.w	r2, r2, #4
 800144a:	60da      	str	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144c:	4b25      	ldr	r3, [pc, #148]	@ (80014e4 <USART_Init+0xe4>)
 800144e:	2220      	movs	r2, #32
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	e7dc      	b.n	800140e <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <USART_Init+0xdc>)
 8001456:	69d3      	ldr	r3, [r2, #28]
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 2, OUT50, O_AF_PP); // TX
 800145e:	2302      	movs	r3, #2
 8001460:	2203      	movs	r2, #3
 8001462:	4619      	mov	r1, r3
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fec7 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PA, 3, IN, I_PP); // RX
 800146a:	2302      	movs	r3, #2
 800146c:	2200      	movs	r2, #0
 800146e:	2103      	movs	r1, #3
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fec1 	bl	80011f8 <Init_GPIO>
        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <USART_Init+0xe8>)
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800147e:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	f042 0208 	orr.w	r2, r2, #8
 8001486:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	f042 0204 	orr.w	r2, r2, #4
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <USART_Init+0xe4>)
 8001492:	2240      	movs	r2, #64	@ 0x40
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	e7ba      	b.n	800140e <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART3EN ;
 8001498:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <USART_Init+0xdc>)
 800149a:	69d3      	ldr	r3, [r2, #28]
 800149c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a0:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 10, OUT50, O_AF_PP); // TX
 80014a2:	2302      	movs	r3, #2
 80014a4:	2203      	movs	r2, #3
 80014a6:	210a      	movs	r1, #10
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fea5 	bl	80011f8 <Init_GPIO>
        Init_GPIO(PB, 11, IN, I_PP); // RX
 80014ae:	2302      	movs	r3, #2
 80014b0:	2200      	movs	r2, #0
 80014b2:	210b      	movs	r1, #11
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe9f 	bl	80011f8 <Init_GPIO>
        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <USART_Init+0xec>)
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014c2:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	f042 0208 	orr.w	r2, r2, #8
 80014ca:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	f042 0204 	orr.w	r2, r2, #4
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <USART_Init+0xe4>)
 80014d6:	2280      	movs	r2, #128	@ 0x80
 80014d8:	605a      	str	r2, [r3, #4]
}
 80014da:	e798      	b.n	800140e <USART_Init+0xe>
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40013800 	.word	0x40013800
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	40004400 	.word	0x40004400
 80014ec:	40004800 	.word	0x40004800

080014f0 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80014f8:	f013 0f01 	tst.w	r3, #1
 80014fc:	d011      	beq.n	8001522 <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014fe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001502:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001506:	f013 0f01 	tst.w	r3, #1
 800150a:	d101      	bne.n	8001510 <ITM_SendChar+0x20>
 800150c:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800150e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001510:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f9      	beq.n	800150e <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800151a:	b2c3      	uxtb	r3, r0
 800151c:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001520:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8001522:	4770      	bx	lr

08001524 <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	460c      	mov	r4, r1
 8001528:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2500      	movs	r5, #0
 800152c:	e004      	b.n	8001538 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 800152e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001532:	f7ff ffdd 	bl	80014f0 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	3501      	adds	r5, #1
 8001538:	42b5      	cmp	r5, r6
 800153a:	dbf8      	blt.n	800152e <_write+0xa>
	}
	return len;
}
 800153c:	4630      	mov	r0, r6
 800153e:	bd70      	pop	{r4, r5, r6, pc}

08001540 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001542:	e7fe      	b.n	8001542 <Error_Handler+0x2>

08001544 <MX_USART1_UART_Init>:
{
 8001544:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001546:	480a      	ldr	r0, [pc, #40]	@ (8001570 <MX_USART1_UART_Init+0x2c>)
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_USART1_UART_Init+0x30>)
 800154a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800154c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001550:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	2300      	movs	r3, #0
 8001554:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001556:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001558:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155a:	220c      	movs	r2, #12
 800155c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001562:	f002 fda9 	bl	80040b8 <HAL_UART_Init>
 8001566:	b900      	cbnz	r0, 800156a <MX_USART1_UART_Init+0x26>
}
 8001568:	bd08      	pop	{r3, pc}
    Error_Handler();
 800156a:	f7ff ffe9 	bl	8001540 <Error_Handler>
 800156e:	bf00      	nop
 8001570:	200002dc 	.word	0x200002dc
 8001574:	40013800 	.word	0x40013800

08001578 <MX_USART2_UART_Init>:
{
 8001578:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800157a:	480a      	ldr	r0, [pc, #40]	@ (80015a4 <MX_USART2_UART_Init+0x2c>)
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <MX_USART2_UART_Init+0x30>)
 800157e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001580:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001584:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	2300      	movs	r3, #0
 8001588:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158e:	220c      	movs	r2, #12
 8001590:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	f002 fd8f 	bl	80040b8 <HAL_UART_Init>
 800159a:	b900      	cbnz	r0, 800159e <MX_USART2_UART_Init+0x26>
}
 800159c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800159e:	f7ff ffcf 	bl	8001540 <Error_Handler>
 80015a2:	bf00      	nop
 80015a4:	20000294 	.word	0x20000294
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_USART3_UART_Init>:
{
 80015ac:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80015ae:	480a      	ldr	r0, [pc, #40]	@ (80015d8 <MX_USART3_UART_Init+0x2c>)
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_USART3_UART_Init+0x30>)
 80015b2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 80015b4:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80015b8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	2300      	movs	r3, #0
 80015bc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015be:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c2:	220c      	movs	r2, #12
 80015c4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ca:	f002 fd75 	bl	80040b8 <HAL_UART_Init>
 80015ce:	b900      	cbnz	r0, 80015d2 <MX_USART3_UART_Init+0x26>
}
 80015d0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015d2:	f7ff ffb5 	bl	8001540 <Error_Handler>
 80015d6:	bf00      	nop
 80015d8:	2000024c 	.word	0x2000024c
 80015dc:	40004800 	.word	0x40004800

080015e0 <MX_TIM3_Init>:
{
 80015e0:	b500      	push	{lr}
 80015e2:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e4:	2300      	movs	r3, #0
 80015e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80015e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80015ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80015ec:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	9308      	str	r3, [sp, #32]
 80015f0:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	9303      	str	r3, [sp, #12]
 80015f8:	9304      	str	r3, [sp, #16]
 80015fa:	9305      	str	r3, [sp, #20]
 80015fc:	9306      	str	r3, [sp, #24]
 80015fe:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8001600:	481e      	ldr	r0, [pc, #120]	@ (800167c <MX_TIM3_Init+0x9c>)
 8001602:	4a1f      	ldr	r2, [pc, #124]	@ (8001680 <MX_TIM3_Init+0xa0>)
 8001604:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 8001606:	227f      	movs	r2, #127	@ 0x7f
 8001608:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 800160c:	2214      	movs	r2, #20
 800160e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001614:	f002 f840 	bl	8003698 <HAL_TIM_Base_Init>
 8001618:	bb28      	cbnz	r0, 8001666 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001620:	a90a      	add	r1, sp, #40	@ 0x28
 8001622:	4816      	ldr	r0, [pc, #88]	@ (800167c <MX_TIM3_Init+0x9c>)
 8001624:	f002 f9a2 	bl	800396c <HAL_TIM_ConfigClockSource>
 8001628:	b9f8      	cbnz	r0, 800166a <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800162a:	4814      	ldr	r0, [pc, #80]	@ (800167c <MX_TIM3_Init+0x9c>)
 800162c:	f002 f883 	bl	8003736 <HAL_TIM_PWM_Init>
 8001630:	b9e8      	cbnz	r0, 800166e <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001638:	a908      	add	r1, sp, #32
 800163a:	4810      	ldr	r0, [pc, #64]	@ (800167c <MX_TIM3_Init+0x9c>)
 800163c:	f002 fcde 	bl	8003ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	b9b8      	cbnz	r0, 8001672 <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001642:	2360      	movs	r3, #96	@ 0x60
 8001644:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800164e:	220c      	movs	r2, #12
 8001650:	a901      	add	r1, sp, #4
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <MX_TIM3_Init+0x9c>)
 8001654:	f002 f8c8 	bl	80037e8 <HAL_TIM_PWM_ConfigChannel>
 8001658:	b968      	cbnz	r0, 8001676 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 800165a:	4808      	ldr	r0, [pc, #32]	@ (800167c <MX_TIM3_Init+0x9c>)
 800165c:	f000 f9f6 	bl	8001a4c <HAL_TIM_MspPostInit>
}
 8001660:	b00f      	add	sp, #60	@ 0x3c
 8001662:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001666:	f7ff ff6b 	bl	8001540 <Error_Handler>
    Error_Handler();
 800166a:	f7ff ff69 	bl	8001540 <Error_Handler>
    Error_Handler();
 800166e:	f7ff ff67 	bl	8001540 <Error_Handler>
    Error_Handler();
 8001672:	f7ff ff65 	bl	8001540 <Error_Handler>
    Error_Handler();
 8001676:	f7ff ff63 	bl	8001540 <Error_Handler>
 800167a:	bf00      	nop
 800167c:	20000324 	.word	0x20000324
 8001680:	40000400 	.word	0x40000400

08001684 <MX_TIM2_Init>:
{
 8001684:	b500      	push	{lr}
 8001686:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001688:	2300      	movs	r3, #0
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	9303      	str	r3, [sp, #12]
 800168e:	9304      	str	r3, [sp, #16]
 8001690:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8001696:	4814      	ldr	r0, [pc, #80]	@ (80016e8 <MX_TIM2_Init+0x64>)
 8001698:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800169c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 800169e:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 80016a2:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80016a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016aa:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b0:	f001 fff2 	bl	8003698 <HAL_TIM_Base_Init>
 80016b4:	b990      	cbnz	r0, 80016dc <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ba:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016bc:	a902      	add	r1, sp, #8
 80016be:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <MX_TIM2_Init+0x64>)
 80016c0:	f002 f954 	bl	800396c <HAL_TIM_ConfigClockSource>
 80016c4:	b960      	cbnz	r0, 80016e0 <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016cc:	4669      	mov	r1, sp
 80016ce:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <MX_TIM2_Init+0x64>)
 80016d0:	f002 fc94 	bl	8003ffc <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	b930      	cbnz	r0, 80016e4 <MX_TIM2_Init+0x60>
}
 80016d6:	b007      	add	sp, #28
 80016d8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016dc:	f7ff ff30 	bl	8001540 <Error_Handler>
    Error_Handler();
 80016e0:	f7ff ff2e 	bl	8001540 <Error_Handler>
    Error_Handler();
 80016e4:	f7ff ff2c 	bl	8001540 <Error_Handler>
 80016e8:	2000036c 	.word	0x2000036c

080016ec <MX_ADC1_Init>:
{
 80016ec:	b500      	push	{lr}
 80016ee:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80016f0:	2300      	movs	r3, #0
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80016f8:	480f      	ldr	r0, [pc, #60]	@ (8001738 <MX_ADC1_Init+0x4c>)
 80016fa:	4a10      	ldr	r2, [pc, #64]	@ (800173c <MX_ADC1_Init+0x50>)
 80016fc:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016fe:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001700:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001702:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001704:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001708:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800170a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800170c:	2301      	movs	r3, #1
 800170e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001710:	f000 fb9e 	bl	8001e50 <HAL_ADC_Init>
 8001714:	b960      	cbnz	r0, 8001730 <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 8001716:	2300      	movs	r3, #0
 8001718:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800171a:	2201      	movs	r2, #1
 800171c:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800171e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	a901      	add	r1, sp, #4
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_ADC1_Init+0x4c>)
 8001724:	f000 fc98 	bl	8002058 <HAL_ADC_ConfigChannel>
 8001728:	b920      	cbnz	r0, 8001734 <MX_ADC1_Init+0x48>
}
 800172a:	b005      	add	sp, #20
 800172c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001730:	f7ff ff06 	bl	8001540 <Error_Handler>
    Error_Handler();
 8001734:	f7ff ff04 	bl	8001540 <Error_Handler>
 8001738:	200003bc 	.word	0x200003bc
 800173c:	40012400 	.word	0x40012400

08001740 <MX_CRC_Init>:
{
 8001740:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8001742:	4804      	ldr	r0, [pc, #16]	@ (8001754 <MX_CRC_Init+0x14>)
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <MX_CRC_Init+0x18>)
 8001746:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001748:	f000 ffd5 	bl	80026f6 <HAL_CRC_Init>
 800174c:	b900      	cbnz	r0, 8001750 <MX_CRC_Init+0x10>
}
 800174e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001750:	f7ff fef6 	bl	8001540 <Error_Handler>
 8001754:	200003b4 	.word	0x200003b4
 8001758:	40023000 	.word	0x40023000

0800175c <SystemClock_Config>:
{
 800175c:	b500      	push	{lr}
 800175e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001760:	2228      	movs	r2, #40	@ 0x28
 8001762:	2100      	movs	r1, #0
 8001764:	eb0d 0002 	add.w	r0, sp, r2
 8001768:	f006 fd8e 	bl	8008288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	2300      	movs	r3, #0
 800176e:	9305      	str	r3, [sp, #20]
 8001770:	9306      	str	r3, [sp, #24]
 8001772:	9307      	str	r3, [sp, #28]
 8001774:	9308      	str	r3, [sp, #32]
 8001776:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001780:	2201      	movs	r2, #1
 8001782:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001788:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800178a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800178e:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001792:	2202      	movs	r2, #2
 8001794:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001796:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001798:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800179c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179e:	a80a      	add	r0, sp, #40	@ 0x28
 80017a0:	f001 f9fc 	bl	8002b9c <HAL_RCC_OscConfig>
 80017a4:	b9c8      	cbnz	r0, 80017da <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2102      	movs	r1, #2
 80017ac:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b6:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ba:	a805      	add	r0, sp, #20
 80017bc:	f001 fc70 	bl	80030a0 <HAL_RCC_ClockConfig>
 80017c0:	b968      	cbnz	r0, 80017de <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017c2:	2302      	movs	r3, #2
 80017c4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ca:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	a801      	add	r0, sp, #4
 80017ce:	f001 fdf7 	bl	80033c0 <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	b930      	cbnz	r0, 80017e2 <SystemClock_Config+0x86>
}
 80017d4:	b015      	add	sp, #84	@ 0x54
 80017d6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017da:	f7ff feb1 	bl	8001540 <Error_Handler>
    Error_Handler();
 80017de:	f7ff feaf 	bl	8001540 <Error_Handler>
    Error_Handler();
 80017e2:	f7ff fead 	bl	8001540 <Error_Handler>
	...

080017e8 <main>:
{
 80017e8:	b500      	push	{lr}
 80017ea:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 80017ec:	f000 faaa 	bl	8001d44 <HAL_Init>
  SystemClock_Config();
 80017f0:	f7ff ffb4 	bl	800175c <SystemClock_Config>
  MX_USART1_UART_Init();
 80017f4:	f7ff fea6 	bl	8001544 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017f8:	f7ff febe 	bl	8001578 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017fc:	f7ff fed6 	bl	80015ac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001800:	f7ff feee 	bl	80015e0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001804:	f7ff ff3e 	bl	8001684 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001808:	f7ff ff70 	bl	80016ec <MX_ADC1_Init>
  MX_CRC_Init();
 800180c:	f7ff ff98 	bl	8001740 <MX_CRC_Init>
  MX_FATFS_Init();
 8001810:	f003 f984 	bl	8004b1c <MX_FATFS_Init>
  printf("|----------Starting----------|\r\n");
 8001814:	4832      	ldr	r0, [pc, #200]	@ (80018e0 <main+0xf8>)
 8001816:	f006 fc57 	bl	80080c8 <puts>
  SPI_Init(1);
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fd56 	bl	80012cc <SPI_Init>
  printf("(+) SPI1 succeeded...\r\n");
 8001820:	4830      	ldr	r0, [pc, #192]	@ (80018e4 <main+0xfc>)
 8001822:	f006 fc51 	bl	80080c8 <puts>
  SPI_Init(2);
 8001826:	2002      	movs	r0, #2
 8001828:	f7ff fd50 	bl	80012cc <SPI_Init>
  printf("(+) SPI2 succeeded...\r\n");
 800182c:	482e      	ldr	r0, [pc, #184]	@ (80018e8 <main+0x100>)
 800182e:	f006 fc4b 	bl	80080c8 <puts>
  USART_Init(1);
 8001832:	2001      	movs	r0, #1
 8001834:	f7ff fde4 	bl	8001400 <USART_Init>
  printf("(+) USART1 succeeded...\r\n");
 8001838:	482c      	ldr	r0, [pc, #176]	@ (80018ec <main+0x104>)
 800183a:	f006 fc45 	bl	80080c8 <puts>
  USART_Init(2);
 800183e:	2002      	movs	r0, #2
 8001840:	f7ff fdde 	bl	8001400 <USART_Init>
  printf("(+) USART2 succeeded...\r\n");
 8001844:	482a      	ldr	r0, [pc, #168]	@ (80018f0 <main+0x108>)
 8001846:	f006 fc3f 	bl	80080c8 <puts>
  printf("|----------Components initialization----------|\r\n");
 800184a:	482a      	ldr	r0, [pc, #168]	@ (80018f4 <main+0x10c>)
 800184c:	f006 fc3c 	bl	80080c8 <puts>
  WS2812_Init();
 8001850:	f7ff fca6 	bl	80011a0 <WS2812_Init>
  printf("(+) WS2812 succeeded...\r\n");
 8001854:	4828      	ldr	r0, [pc, #160]	@ (80018f8 <main+0x110>)
 8001856:	f006 fc37 	bl	80080c8 <puts>
  if (CD74HC4051_Init(&hadc1) != 0) {
 800185a:	4828      	ldr	r0, [pc, #160]	@ (80018fc <main+0x114>)
 800185c:	f7ff f9d4 	bl	8000c08 <CD74HC4051_Init>
 8001860:	b340      	cbz	r0, 80018b4 <main+0xcc>
	  printf("(-) CD74HC4051 failed...\r\n");
 8001862:	4827      	ldr	r0, [pc, #156]	@ (8001900 <main+0x118>)
 8001864:	f006 fc30 	bl	80080c8 <puts>
  if (BMP280_Init(&bmp) != 0) {
 8001868:	a813      	add	r0, sp, #76	@ 0x4c
 800186a:	f7ff f9b0 	bl	8000bce <BMP280_Init>
 800186e:	b328      	cbz	r0, 80018bc <main+0xd4>
	  printf("(-) BMP280 failed...\r\n");
 8001870:	4824      	ldr	r0, [pc, #144]	@ (8001904 <main+0x11c>)
 8001872:	f006 fc29 	bl	80080c8 <puts>
  if (ICM20602_Init(&icm) != 0) {
 8001876:	a805      	add	r0, sp, #20
 8001878:	f7ff fab1 	bl	8000dde <ICM20602_Init>
 800187c:	b310      	cbz	r0, 80018c4 <main+0xdc>
	  printf("(-) ICM20602 failed...\r\n");
 800187e:	4822      	ldr	r0, [pc, #136]	@ (8001908 <main+0x120>)
 8001880:	f006 fc22 	bl	80080c8 <puts>
  if (MEM2067_SDCardDetection() == 1) {
 8001884:	f7ff fbe0 	bl	8001048 <MEM2067_SDCardDetection>
 8001888:	2801      	cmp	r0, #1
 800188a:	d01f      	beq.n	80018cc <main+0xe4>
	  printf("(+) SD card detected in MEM2067...\r\n");
 800188c:	481f      	ldr	r0, [pc, #124]	@ (800190c <main+0x124>)
 800188e:	f006 fc1b 	bl	80080c8 <puts>
	  uint8_t data[] = "Hello, SD Card!";
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <main+0x128>)
 8001894:	f10d 0c04 	add.w	ip, sp, #4
 8001898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  if (MEM2067_WriteFATFS(filename, data, size) == 0) {
 800189e:	220f      	movs	r2, #15
 80018a0:	4661      	mov	r1, ip
 80018a2:	481c      	ldr	r0, [pc, #112]	@ (8001914 <main+0x12c>)
 80018a4:	f7ff fb5e 	bl	8000f64 <MEM2067_WriteFATFS>
 80018a8:	b9a0      	cbnz	r0, 80018d4 <main+0xec>
		  printf("(+) Writing to %s succeeded...\r\n", filename);
 80018aa:	491a      	ldr	r1, [pc, #104]	@ (8001914 <main+0x12c>)
 80018ac:	481a      	ldr	r0, [pc, #104]	@ (8001918 <main+0x130>)
 80018ae:	f006 fba3 	bl	8007ff8 <iprintf>
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <main+0xca>
	  printf("(+) CD74HC4051 succeeded...\r\n");
 80018b4:	4819      	ldr	r0, [pc, #100]	@ (800191c <main+0x134>)
 80018b6:	f006 fc07 	bl	80080c8 <puts>
 80018ba:	e7d5      	b.n	8001868 <main+0x80>
	  printf("(+) BMP280 succeeded...\r\n");
 80018bc:	4818      	ldr	r0, [pc, #96]	@ (8001920 <main+0x138>)
 80018be:	f006 fc03 	bl	80080c8 <puts>
 80018c2:	e7d8      	b.n	8001876 <main+0x8e>
	  printf("(+) ICM20602 succeeded...\r\n");
 80018c4:	4817      	ldr	r0, [pc, #92]	@ (8001924 <main+0x13c>)
 80018c6:	f006 fbff 	bl	80080c8 <puts>
 80018ca:	e7db      	b.n	8001884 <main+0x9c>
      printf("(-) No SD card detected in MEM2067...\r\n");
 80018cc:	4816      	ldr	r0, [pc, #88]	@ (8001928 <main+0x140>)
 80018ce:	f006 fbfb 	bl	80080c8 <puts>
 80018d2:	e7ee      	b.n	80018b2 <main+0xca>
		  printf("(-) Writing %s failed...\r\n", filename);
 80018d4:	490f      	ldr	r1, [pc, #60]	@ (8001914 <main+0x12c>)
 80018d6:	4815      	ldr	r0, [pc, #84]	@ (800192c <main+0x144>)
 80018d8:	f006 fb8e 	bl	8007ff8 <iprintf>
 80018dc:	e7e9      	b.n	80018b2 <main+0xca>
 80018de:	bf00      	nop
 80018e0:	0800a244 	.word	0x0800a244
 80018e4:	0800a264 	.word	0x0800a264
 80018e8:	0800a27c 	.word	0x0800a27c
 80018ec:	0800a294 	.word	0x0800a294
 80018f0:	0800a2b0 	.word	0x0800a2b0
 80018f4:	0800a2cc 	.word	0x0800a2cc
 80018f8:	0800a300 	.word	0x0800a300
 80018fc:	200003bc 	.word	0x200003bc
 8001900:	0800a31c 	.word	0x0800a31c
 8001904:	0800a358 	.word	0x0800a358
 8001908:	0800a38c 	.word	0x0800a38c
 800190c:	0800a3e8 	.word	0x0800a3e8
 8001910:	0800a458 	.word	0x0800a458
 8001914:	0800a40c 	.word	0x0800a40c
 8001918:	0800a418 	.word	0x0800a418
 800191c:	0800a338 	.word	0x0800a338
 8001920:	0800a370 	.word	0x0800a370
 8001924:	0800a3a4 	.word	0x0800a3a4
 8001928:	0800a3c0 	.word	0x0800a3c0
 800192c:	0800a43c 	.word	0x0800a43c

08001930 <HAL_MspInit>:
 8001930:	b082      	sub	sp, #8
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <HAL_MspInit+0x3c>)
 8001934:	699a      	ldr	r2, [r3, #24]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	619a      	str	r2, [r3, #24]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	f002 0201 	and.w	r2, r2, #1
 8001942:	9200      	str	r2, [sp, #0]
 8001944:	9a00      	ldr	r2, [sp, #0]
 8001946:	69da      	ldr	r2, [r3, #28]
 8001948:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800194c:	61da      	str	r2, [r3, #28]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	9b01      	ldr	r3, [sp, #4]
 8001958:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <HAL_MspInit+0x40>)
 800195a:	6853      	ldr	r3, [r2, #4]
 800195c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001964:	6053      	str	r3, [r2, #4]
 8001966:	b002      	add	sp, #8
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000

08001974 <HAL_ADC_MspInit>:
 8001974:	b500      	push	{lr}
 8001976:	b087      	sub	sp, #28
 8001978:	2300      	movs	r3, #0
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	9304      	str	r3, [sp, #16]
 8001980:	9305      	str	r3, [sp, #20]
 8001982:	6802      	ldr	r2, [r0, #0]
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_ADC_MspInit+0x58>)
 8001986:	429a      	cmp	r2, r3
 8001988:	d002      	beq.n	8001990 <HAL_ADC_MspInit+0x1c>
 800198a:	b007      	add	sp, #28
 800198c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001990:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80019a2:	9200      	str	r2, [sp, #0]
 80019a4:	9a00      	ldr	r2, [sp, #0]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	f042 0204 	orr.w	r2, r2, #4
 80019ac:	619a      	str	r2, [r3, #24]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b01      	ldr	r3, [sp, #4]
 80019b8:	2301      	movs	r3, #1
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	2303      	movs	r3, #3
 80019be:	9303      	str	r3, [sp, #12]
 80019c0:	a902      	add	r1, sp, #8
 80019c2:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <HAL_ADC_MspInit+0x5c>)
 80019c4:	f000 ff66 	bl	8002894 <HAL_GPIO_Init>
 80019c8:	e7df      	b.n	800198a <HAL_ADC_MspInit+0x16>
 80019ca:	bf00      	nop
 80019cc:	40012400 	.word	0x40012400
 80019d0:	40010800 	.word	0x40010800

080019d4 <HAL_CRC_MspInit>:
 80019d4:	6802      	ldr	r2, [r0, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_CRC_MspInit+0x28>)
 80019d8:	429a      	cmp	r2, r3
 80019da:	d000      	beq.n	80019de <HAL_CRC_MspInit+0xa>
 80019dc:	4770      	bx	lr
 80019de:	b082      	sub	sp, #8
 80019e0:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	9b01      	ldr	r3, [sp, #4]
 80019f6:	b002      	add	sp, #8
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023000 	.word	0x40023000

08001a00 <HAL_TIM_Base_MspInit>:
 8001a00:	b082      	sub	sp, #8
 8001a02:	6803      	ldr	r3, [r0, #0]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a08:	d004      	beq.n	8001a14 <HAL_TIM_Base_MspInit+0x14>
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <HAL_TIM_Base_MspInit+0x44>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00d      	beq.n	8001a2c <HAL_TIM_Base_MspInit+0x2c>
 8001a10:	b002      	add	sp, #8
 8001a12:	4770      	bx	lr
 8001a14:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	61da      	str	r2, [r3, #28]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	9b00      	ldr	r3, [sp, #0]
 8001a2a:	e7f1      	b.n	8001a10 <HAL_TIM_Base_MspInit+0x10>
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_TIM_Base_MspInit+0x48>)
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	f042 0202 	orr.w	r2, r2, #2
 8001a34:	61da      	str	r2, [r3, #28]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	9b01      	ldr	r3, [sp, #4]
 8001a40:	e7e6      	b.n	8001a10 <HAL_TIM_Base_MspInit+0x10>
 8001a42:	bf00      	nop
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_TIM_MspPostInit>:
 8001a4c:	b500      	push	{lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	2300      	movs	r3, #0
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	9303      	str	r3, [sp, #12]
 8001a56:	9304      	str	r3, [sp, #16]
 8001a58:	9305      	str	r3, [sp, #20]
 8001a5a:	6802      	ldr	r2, [r0, #0]
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_TIM_MspPostInit+0x44>)
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d002      	beq.n	8001a68 <HAL_TIM_MspPostInit+0x1c>
 8001a62:	b007      	add	sp, #28
 8001a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a68:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	f042 0208 	orr.w	r2, r2, #8
 8001a72:	619a      	str	r2, [r3, #24]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	9303      	str	r3, [sp, #12]
 8001a84:	9305      	str	r3, [sp, #20]
 8001a86:	a902      	add	r1, sp, #8
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <HAL_TIM_MspPostInit+0x48>)
 8001a8a:	f000 ff03 	bl	8002894 <HAL_GPIO_Init>
 8001a8e:	e7e8      	b.n	8001a62 <HAL_TIM_MspPostInit+0x16>
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40010c00 	.word	0x40010c00

08001a98 <HAL_UART_MspInit>:
 8001a98:	b530      	push	{r4, r5, lr}
 8001a9a:	b08b      	sub	sp, #44	@ 0x2c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9306      	str	r3, [sp, #24]
 8001aa0:	9307      	str	r3, [sp, #28]
 8001aa2:	9308      	str	r3, [sp, #32]
 8001aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001aa6:	6803      	ldr	r3, [r0, #0]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	@ (8001bf0 <HAL_UART_MspInit+0x158>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_UART_MspInit+0x26>
 8001aae:	4a51      	ldr	r2, [pc, #324]	@ (8001bf4 <HAL_UART_MspInit+0x15c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d03b      	beq.n	8001b2c <HAL_UART_MspInit+0x94>
 8001ab4:	4a50      	ldr	r2, [pc, #320]	@ (8001bf8 <HAL_UART_MspInit+0x160>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d068      	beq.n	8001b8c <HAL_UART_MspInit+0xf4>
 8001aba:	b00b      	add	sp, #44	@ 0x2c
 8001abc:	bd30      	pop	{r4, r5, pc}
 8001abe:	4b4f      	ldr	r3, [pc, #316]	@ (8001bfc <HAL_UART_MspInit+0x164>)
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001ace:	9200      	str	r2, [sp, #0]
 8001ad0:	9a00      	ldr	r2, [sp, #0]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	f042 0208 	orr.w	r2, r2, #8
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	9b01      	ldr	r3, [sp, #4]
 8001ae4:	2340      	movs	r3, #64	@ 0x40
 8001ae6:	9306      	str	r3, [sp, #24]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9307      	str	r3, [sp, #28]
 8001aec:	2303      	movs	r3, #3
 8001aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8001af0:	4d43      	ldr	r5, [pc, #268]	@ (8001c00 <HAL_UART_MspInit+0x168>)
 8001af2:	a906      	add	r1, sp, #24
 8001af4:	4628      	mov	r0, r5
 8001af6:	f000 fecd 	bl	8002894 <HAL_GPIO_Init>
 8001afa:	2380      	movs	r3, #128	@ 0x80
 8001afc:	9306      	str	r3, [sp, #24]
 8001afe:	2400      	movs	r4, #0
 8001b00:	9407      	str	r4, [sp, #28]
 8001b02:	9408      	str	r4, [sp, #32]
 8001b04:	a906      	add	r1, sp, #24
 8001b06:	4628      	mov	r0, r5
 8001b08:	f000 fec4 	bl	8002894 <HAL_GPIO_Init>
 8001b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c04 <HAL_UART_MspInit+0x16c>)
 8001b0e:	6853      	ldr	r3, [r2, #4]
 8001b10:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6053      	str	r3, [r2, #4]
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	2025      	movs	r0, #37	@ 0x25
 8001b20:	f000 fdb3 	bl	800268a <HAL_NVIC_SetPriority>
 8001b24:	2025      	movs	r0, #37	@ 0x25
 8001b26:	f000 fdcc 	bl	80026c2 <HAL_NVIC_EnableIRQ>
 8001b2a:	e7c6      	b.n	8001aba <HAL_UART_MspInit+0x22>
 8001b2c:	4b33      	ldr	r3, [pc, #204]	@ (8001bfc <HAL_UART_MspInit+0x164>)
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b34:	61da      	str	r2, [r3, #28]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001b3c:	9202      	str	r2, [sp, #8]
 8001b3e:	9a02      	ldr	r2, [sp, #8]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	f042 0204 	orr.w	r2, r2, #4
 8001b46:	619a      	str	r2, [r3, #24]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	9303      	str	r3, [sp, #12]
 8001b50:	9b03      	ldr	r3, [sp, #12]
 8001b52:	2304      	movs	r3, #4
 8001b54:	9306      	str	r3, [sp, #24]
 8001b56:	2302      	movs	r3, #2
 8001b58:	9307      	str	r3, [sp, #28]
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b5e:	4d2a      	ldr	r5, [pc, #168]	@ (8001c08 <HAL_UART_MspInit+0x170>)
 8001b60:	a906      	add	r1, sp, #24
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 fe96 	bl	8002894 <HAL_GPIO_Init>
 8001b68:	2308      	movs	r3, #8
 8001b6a:	9306      	str	r3, [sp, #24]
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	9407      	str	r4, [sp, #28]
 8001b70:	9408      	str	r4, [sp, #32]
 8001b72:	a906      	add	r1, sp, #24
 8001b74:	4628      	mov	r0, r5
 8001b76:	f000 fe8d 	bl	8002894 <HAL_GPIO_Init>
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	2026      	movs	r0, #38	@ 0x26
 8001b80:	f000 fd83 	bl	800268a <HAL_NVIC_SetPriority>
 8001b84:	2026      	movs	r0, #38	@ 0x26
 8001b86:	f000 fd9c 	bl	80026c2 <HAL_NVIC_EnableIRQ>
 8001b8a:	e796      	b.n	8001aba <HAL_UART_MspInit+0x22>
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_UART_MspInit+0x164>)
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001b94:	61da      	str	r2, [r3, #28]
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001b9c:	9204      	str	r2, [sp, #16]
 8001b9e:	9a04      	ldr	r2, [sp, #16]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	f042 0208 	orr.w	r2, r2, #8
 8001ba6:	619a      	str	r2, [r3, #24]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	9305      	str	r3, [sp, #20]
 8001bb0:	9b05      	ldr	r3, [sp, #20]
 8001bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb6:	9306      	str	r3, [sp, #24]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	9307      	str	r3, [sp, #28]
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bc0:	4d0f      	ldr	r5, [pc, #60]	@ (8001c00 <HAL_UART_MspInit+0x168>)
 8001bc2:	a906      	add	r1, sp, #24
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f000 fe65 	bl	8002894 <HAL_GPIO_Init>
 8001bca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bce:	9306      	str	r3, [sp, #24]
 8001bd0:	2400      	movs	r4, #0
 8001bd2:	9407      	str	r4, [sp, #28]
 8001bd4:	9408      	str	r4, [sp, #32]
 8001bd6:	a906      	add	r1, sp, #24
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f000 fe5b 	bl	8002894 <HAL_GPIO_Init>
 8001bde:	4622      	mov	r2, r4
 8001be0:	4621      	mov	r1, r4
 8001be2:	2027      	movs	r0, #39	@ 0x27
 8001be4:	f000 fd51 	bl	800268a <HAL_NVIC_SetPriority>
 8001be8:	2027      	movs	r0, #39	@ 0x27
 8001bea:	f000 fd6a 	bl	80026c2 <HAL_NVIC_EnableIRQ>
 8001bee:	e764      	b.n	8001aba <HAL_UART_MspInit+0x22>
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	40004400 	.word	0x40004400
 8001bf8:	40004800 	.word	0x40004800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40010800 	.word	0x40010800

08001c0c <NMI_Handler>:
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler>

08001c0e <HardFault_Handler>:
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler>

08001c10 <MemManage_Handler>:
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler>

08001c12 <BusFault_Handler>:
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler>

08001c14 <UsageFault_Handler>:
 8001c14:	e7fe      	b.n	8001c14 <UsageFault_Handler>

08001c16 <SVC_Handler>:
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:
 8001c1c:	b508      	push	{r3, lr}
 8001c1e:	f000 f8d7 	bl	8001dd0 <HAL_IncTick>
 8001c22:	bd08      	pop	{r3, pc}

08001c24 <USART1_IRQHandler>:
 8001c24:	b508      	push	{r3, lr}
 8001c26:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <USART1_IRQHandler+0xc>)
 8001c28:	f002 fa96 	bl	8004158 <HAL_UART_IRQHandler>
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	200002dc 	.word	0x200002dc

08001c34 <USART2_IRQHandler>:
 8001c34:	b508      	push	{r3, lr}
 8001c36:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <USART2_IRQHandler+0xc>)
 8001c38:	f002 fa8e 	bl	8004158 <HAL_UART_IRQHandler>
 8001c3c:	bd08      	pop	{r3, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000294 	.word	0x20000294

08001c44 <USART3_IRQHandler>:
 8001c44:	b508      	push	{r3, lr}
 8001c46:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <USART3_IRQHandler+0xc>)
 8001c48:	f002 fa86 	bl	8004158 <HAL_UART_IRQHandler>
 8001c4c:	bd08      	pop	{r3, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000024c 	.word	0x2000024c

08001c54 <_getpid>:
 8001c54:	2001      	movs	r0, #1
 8001c56:	4770      	bx	lr

08001c58 <_kill>:
 8001c58:	b508      	push	{r3, lr}
 8001c5a:	f006 fb77 	bl	800834c <__errno>
 8001c5e:	2316      	movs	r3, #22
 8001c60:	6003      	str	r3, [r0, #0]
 8001c62:	f04f 30ff 	mov.w	r0, #4294967295
 8001c66:	bd08      	pop	{r3, pc}

08001c68 <_exit>:
 8001c68:	b508      	push	{r3, lr}
 8001c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6e:	f7ff fff3 	bl	8001c58 <_kill>
 8001c72:	e7fe      	b.n	8001c72 <_exit+0xa>

08001c74 <_read>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	460c      	mov	r4, r1
 8001c78:	4616      	mov	r6, r2
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	e006      	b.n	8001c8c <_read+0x18>
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4621      	mov	r1, r4
 8001c84:	f801 0b01 	strb.w	r0, [r1], #1
 8001c88:	3501      	adds	r5, #1
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	42b5      	cmp	r5, r6
 8001c8e:	dbf6      	blt.n	8001c7e <_read+0xa>
 8001c90:	4630      	mov	r0, r6
 8001c92:	bd70      	pop	{r4, r5, r6, pc}

08001c94 <_close>:
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	4770      	bx	lr

08001c9a <_fstat>:
 8001c9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	4770      	bx	lr

08001ca4 <_isatty>:
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	4770      	bx	lr

08001ca8 <_lseek>:
 8001ca8:	2000      	movs	r0, #0
 8001caa:	4770      	bx	lr

08001cac <_sbrk>:
 8001cac:	b510      	push	{r4, lr}
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce4 <_sbrk+0x38>)
 8001cb2:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <_sbrk+0x3c>)
 8001cb4:	480d      	ldr	r0, [pc, #52]	@ (8001cec <_sbrk+0x40>)
 8001cb6:	6800      	ldr	r0, [r0, #0]
 8001cb8:	b140      	cbz	r0, 8001ccc <_sbrk+0x20>
 8001cba:	480c      	ldr	r0, [pc, #48]	@ (8001cec <_sbrk+0x40>)
 8001cbc:	6800      	ldr	r0, [r0, #0]
 8001cbe:	4403      	add	r3, r0
 8001cc0:	1a52      	subs	r2, r2, r1
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d806      	bhi.n	8001cd4 <_sbrk+0x28>
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <_sbrk+0x40>)
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	bd10      	pop	{r4, pc}
 8001ccc:	4807      	ldr	r0, [pc, #28]	@ (8001cec <_sbrk+0x40>)
 8001cce:	4c08      	ldr	r4, [pc, #32]	@ (8001cf0 <_sbrk+0x44>)
 8001cd0:	6004      	str	r4, [r0, #0]
 8001cd2:	e7f2      	b.n	8001cba <_sbrk+0xe>
 8001cd4:	f006 fb3a 	bl	800834c <__errno>
 8001cd8:	230c      	movs	r3, #12
 8001cda:	6003      	str	r3, [r0, #0]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	e7f3      	b.n	8001cca <_sbrk+0x1e>
 8001ce2:	bf00      	nop
 8001ce4:	20005000 	.word	0x20005000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	200003ec 	.word	0x200003ec
 8001cf0:	200007a8 	.word	0x200007a8

08001cf4 <SystemInit>:
 8001cf4:	4770      	bx	lr
	...

08001cf8 <Reset_Handler>:
 8001cf8:	f7ff fffc 	bl	8001cf4 <SystemInit>
 8001cfc:	480b      	ldr	r0, [pc, #44]	@ (8001d2c <LoopFillZerobss+0xe>)
 8001cfe:	490c      	ldr	r1, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
 8001d00:	4a0c      	ldr	r2, [pc, #48]	@ (8001d34 <LoopFillZerobss+0x16>)
 8001d02:	2300      	movs	r3, #0
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:
 8001d06:	58d4      	ldr	r4, [r2, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:
 8001d0c:	18c4      	adds	r4, r0, r3
 8001d0e:	428c      	cmp	r4, r1
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <LoopFillZerobss+0x1a>)
 8001d14:	4c09      	ldr	r4, [pc, #36]	@ (8001d3c <LoopFillZerobss+0x1e>)
 8001d16:	2300      	movs	r3, #0
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>
 8001d22:	f006 fb19 	bl	8008358 <__libc_init_array>
 8001d26:	f7ff fd5f 	bl	80017e8 <main>
 8001d2a:	4770      	bx	lr
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	200001e8 	.word	0x200001e8
 8001d34:	0800a8ac 	.word	0x0800a8ac
 8001d38:	200001e8 	.word	0x200001e8
 8001d3c:	200007a4 	.word	0x200007a4

08001d40 <ADC1_2_IRQHandler>:
 8001d40:	e7fe      	b.n	8001d40 <ADC1_2_IRQHandler>
	...

08001d44 <HAL_Init>:
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <HAL_Init+0x28>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <HAL_Init+0x28>)
 8001d4e:	f043 0310 	orr.w	r3, r3, #16
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 fc8d 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f000 f808 	bl	8001d70 <HAL_InitTick>
 8001d60:	f7ff fde6 	bl	8001930 <HAL_MspInit>
 8001d64:	2300      	movs	r3, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40022000 	.word	0x40022000

08001d70 <HAL_InitTick>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0x54>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_InitTick+0x58>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 fca5 	bl	80026de <HAL_SYSTICK_Config>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_InitTick+0x2e>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00e      	b.n	8001dbc <HAL_InitTick+0x4c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d80a      	bhi.n	8001dba <HAL_InitTick+0x4a>
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f000 fc6d 	bl	800268a <HAL_NVIC_SetPriority>
 8001db0:	4a06      	ldr	r2, [pc, #24]	@ (8001dcc <HAL_InitTick+0x5c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_InitTick+0x4c>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_IncTick>:
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_IncTick+0x1c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_IncTick+0x20>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a03      	ldr	r2, [pc, #12]	@ (8001df0 <HAL_IncTick+0x20>)
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000008 	.word	0x20000008
 8001df0:	200003f0 	.word	0x200003f0

08001df4 <HAL_GetTick>:
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4b02      	ldr	r3, [pc, #8]	@ (8001e04 <HAL_GetTick+0x10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	200003f0 	.word	0x200003f0

08001e08 <HAL_Delay>:
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_GetTick>
 8001e14:	60b8      	str	r0, [r7, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d005      	beq.n	8001e2e <HAL_Delay+0x26>
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_Delay+0x44>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	bf00      	nop
 8001e30:	f7ff ffe0 	bl	8001df4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8f7      	bhi.n	8001e30 <HAL_Delay+0x28>
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000008 	.word	0x20000008

08001e50 <HAL_ADC_Init>:
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	75fb      	strb	r3, [r7, #23]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x22>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0be      	b.n	8001ff0 <HAL_ADC_Init+0x1a0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_ADC_Init+0x44>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fd70 	bl	8001974 <HAL_ADC_MspInit>
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fa31 	bl	80022fc <ADC_ConversionStop_Disable>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	75fb      	strb	r3, [r7, #23]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 8099 	bne.w	8001fde <HAL_ADC_Init+0x18e>
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 8095 	bne.w	8001fde <HAL_ADC_Init+0x18e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ebc:	f023 0302 	bic.w	r3, r3, #2
 8001ec0:	f043 0202 	orr.w	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7b1b      	ldrb	r3, [r3, #12]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee8:	d003      	beq.n	8001ef2 <HAL_ADC_Init+0xa2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_ADC_Init+0xa8>
 8001ef2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ef6:	e000      	b.n	8001efa <HAL_ADC_Init+0xaa>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7d1b      	ldrb	r3, [r3, #20]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d119      	bne.n	8001f3c <HAL_ADC_Init+0xec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7b1b      	ldrb	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_ADC_Init+0xd4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	035a      	lsls	r2, r3, #13
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e00b      	b.n	8001f3c <HAL_ADC_Init+0xec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <HAL_ADC_Init+0x1a8>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6093      	str	r3, [r2, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f6c:	d003      	beq.n	8001f76 <HAL_ADC_Init+0x126>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d104      	bne.n	8001f80 <HAL_ADC_Init+0x130>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	051b      	lsls	r3, r3, #20
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_ADC_Init+0x1ac>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d10b      	bne.n	8001fbc <HAL_ADC_Init+0x16c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fba:	e018      	b.n	8001fee <HAL_ADC_Init+0x19e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f023 0312 	bic.w	r3, r3, #18
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fd8:	2301      	movs	r3, #1
 8001fda:	75fb      	strb	r3, [r7, #23]
 8001fdc:	e007      	b.n	8001fee <HAL_ADC_Init+0x19e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	f043 0210 	orr.w	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	ffe1f7fd 	.word	0xffe1f7fd
 8001ffc:	ff1f0efe 	.word	0xff1f0efe

08002000 <HAL_ADC_Stop>:
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Stop+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e01a      	b.n	8002050 <HAL_ADC_Stop+0x50>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f96a 	bl	80022fc <ADC_ConversionStop_Disable>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Stop+0x46>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_ADC_ConfigChannel>:
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x20>
 8002074:	2302      	movs	r3, #2
 8002076:	e0dc      	b.n	8002232 <HAL_ADC_ConfigChannel+0x1da>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b06      	cmp	r3, #6
 8002086:	d81c      	bhi.n	80020c2 <HAL_ADC_ConfigChannel+0x6a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b05      	subs	r3, #5
 800209a:	221f      	movs	r2, #31
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4019      	ands	r1, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b05      	subs	r3, #5
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	635a      	str	r2, [r3, #52]	@ 0x34
 80020c0:	e03c      	b.n	800213c <HAL_ADC_ConfigChannel+0xe4>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d81c      	bhi.n	8002104 <HAL_ADC_ConfigChannel+0xac>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b23      	subs	r3, #35	@ 0x23
 80020dc:	221f      	movs	r2, #31
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4019      	ands	r1, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b23      	subs	r3, #35	@ 0x23
 80020f6:	fa00 f203 	lsl.w	r2, r0, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
 8002102:	e01b      	b.n	800213c <HAL_ADC_ConfigChannel+0xe4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b41      	subs	r3, #65	@ 0x41
 8002116:	221f      	movs	r2, #31
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	4019      	ands	r1, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b41      	subs	r3, #65	@ 0x41
 8002130:	fa00 f203 	lsl.w	r2, r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b09      	cmp	r3, #9
 8002142:	d91c      	bls.n	800217e <HAL_ADC_ConfigChannel+0x126>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	3b1e      	subs	r3, #30
 8002156:	2207      	movs	r2, #7
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	4019      	ands	r1, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6898      	ldr	r0, [r3, #8]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	3b1e      	subs	r3, #30
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	e019      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x15a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6919      	ldr	r1, [r3, #16]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	2207      	movs	r2, #7
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6898      	ldr	r0, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d003      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x16a>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b11      	cmp	r3, #17
 80021c0:	d132      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1d      	ldr	r2, [pc, #116]	@ (800223c <HAL_ADC_ConfigChannel+0x1e4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d125      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1c0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d126      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d11a      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
 80021f2:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <HAL_ADC_ConfigChannel+0x1e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a13      	ldr	r2, [pc, #76]	@ (8002244 <HAL_ADC_ConfigChannel+0x1ec>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9a      	lsrs	r2, r3, #18
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	e002      	b.n	8002210 <HAL_ADC_ConfigChannel+0x1b8>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3b01      	subs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_ConfigChannel+0x1b2>
 8002216:	e007      	b.n	8002228 <HAL_ADC_ConfigChannel+0x1d0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40012400 	.word	0x40012400
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <ADC_Enable>:
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d040      	beq.n	80022e8 <ADC_Enable+0xa0>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <ADC_Enable+0xac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1f      	ldr	r2, [pc, #124]	@ (80022f8 <ADC_Enable+0xb0>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	0c9b      	lsrs	r3, r3, #18
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	e002      	b.n	800228c <ADC_Enable+0x44>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3b01      	subs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <ADC_Enable+0x3e>
 8002292:	f7ff fdaf 	bl	8001df4 <HAL_GetTick>
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	e01f      	b.n	80022da <ADC_Enable+0x92>
 800229a:	f7ff fdab 	bl	8001df4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d918      	bls.n	80022da <ADC_Enable+0x92>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d011      	beq.n	80022da <ADC_Enable+0x92>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <ADC_Enable+0xa2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d1d8      	bne.n	800229a <ADC_Enable+0x52>
 80022e8:	2300      	movs	r3, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000000 	.word	0x20000000
 80022f8:	431bde83 	.word	0x431bde83

080022fc <ADC_ConversionStop_Disable>:
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d12e      	bne.n	8002374 <ADC_ConversionStop_Disable+0x78>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	f7ff fd65 	bl	8001df4 <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	e01b      	b.n	8002366 <ADC_ConversionStop_Disable+0x6a>
 800232e:	f7ff fd61 	bl	8001df4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d914      	bls.n	8002366 <ADC_ConversionStop_Disable+0x6a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10d      	bne.n	8002366 <ADC_ConversionStop_Disable+0x6a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	629a      	str	r2, [r3, #40]	@ 0x28
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002362:	2301      	movs	r3, #1
 8002364:	e007      	b.n	8002376 <ADC_ConversionStop_Disable+0x7a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d0dc      	beq.n	800232e <ADC_ConversionStop_Disable+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_ADCEx_Calibration_Start>:
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_ADCEx_Calibration_Start+0x1e>
 800239a:	2302      	movs	r3, #2
 800239c:	e097      	b.n	80024ce <HAL_ADCEx_Calibration_Start+0x14e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa8 	bl	80022fc <ADC_ConversionStop_Disable>
 80023ac:	4603      	mov	r3, r0
 80023ae:	75fb      	strb	r3, [r7, #23]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff49 	bl	8002248 <ADC_Enable>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75fb      	strb	r3, [r7, #23]
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 8081 	bne.w	80024c4 <HAL_ADCEx_Calibration_Start+0x144>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023ca:	f023 0302 	bic.w	r3, r3, #2
 80023ce:	f043 0202 	orr.w	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80023d6:	4b40      	ldr	r3, [pc, #256]	@ (80024d8 <HAL_ADCEx_Calibration_Start+0x158>)
 80023d8:	681c      	ldr	r4, [r3, #0]
 80023da:	2002      	movs	r0, #2
 80023dc:	f001 f8a6 	bl	800352c <HAL_RCCEx_GetPeriphCLKFreq>
 80023e0:	4603      	mov	r3, r0
 80023e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e002      	b.n	80023f2 <HAL_ADCEx_Calibration_Start+0x72>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f9      	bne.n	80023ec <HAL_ADCEx_Calibration_Start+0x6c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0208 	orr.w	r2, r2, #8
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	f7ff fcf4 	bl	8001df4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]
 800240e:	e01b      	b.n	8002448 <HAL_ADCEx_Calibration_Start+0xc8>
 8002410:	f7ff fcf0 	bl	8001df4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b0a      	cmp	r3, #10
 800241c:	d914      	bls.n	8002448 <HAL_ADCEx_Calibration_Start+0xc8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <HAL_ADCEx_Calibration_Start+0xc8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f023 0312 	bic.w	r3, r3, #18
 8002434:	f043 0210 	orr.w	r2, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002444:	2301      	movs	r3, #1
 8002446:	e042      	b.n	80024ce <HAL_ADCEx_Calibration_Start+0x14e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1dc      	bne.n	8002410 <HAL_ADCEx_Calibration_Start+0x90>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0204 	orr.w	r2, r2, #4
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	f7ff fcc5 	bl	8001df4 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]
 800246c:	e01b      	b.n	80024a6 <HAL_ADCEx_Calibration_Start+0x126>
 800246e:	f7ff fcc1 	bl	8001df4 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b0a      	cmp	r3, #10
 800247a:	d914      	bls.n	80024a6 <HAL_ADCEx_Calibration_Start+0x126>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_ADCEx_Calibration_Start+0x126>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	f023 0312 	bic.w	r3, r3, #18
 8002492:	f043 0210 	orr.w	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024a2:	2301      	movs	r3, #1
 80024a4:	e013      	b.n	80024ce <HAL_ADCEx_Calibration_Start+0x14e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1dc      	bne.n	800246e <HAL_ADCEx_Calibration_Start+0xee>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	f023 0303 	bic.w	r3, r3, #3
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	4618      	mov	r0, r3
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd90      	pop	{r4, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000000 	.word	0x20000000

080024dc <__NVIC_SetPriorityGrouping>:
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
 8002504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_GetPriorityGrouping>:
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
 8002528:	4b04      	ldr	r3, [pc, #16]	@ (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4906      	ldr	r1, [pc, #24]	@ (8002574 <__NVIC_EnableIRQ+0x34>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	@ (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	@ (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	@ 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
 8002624:	4313      	orrs	r3, r2
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <SysTick_Config>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff90 	bl	8002578 <__NVIC_SetPriority>
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	2300      	movs	r3, #0
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff2d 	bl	80024dc <__NVIC_SetPriorityGrouping>
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	f7ff ff42 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff90 	bl	80025cc <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5f 	bl	8002578 <__NVIC_SetPriority>
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff35 	bl	8002540 <__NVIC_EnableIRQ>
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_CRC_Init>:
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_CRC_Init+0x12>
 8002704:	2301      	movs	r3, #1
 8002706:	e00e      	b.n	8002726 <HAL_CRC_Init+0x30>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	795b      	ldrb	r3, [r3, #5]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_CRC_Init+0x28>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	711a      	strb	r2, [r3, #4]
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff f95b 	bl	80019d4 <HAL_CRC_MspInit>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	715a      	strb	r2, [r3, #5]
 8002724:	2300      	movs	r3, #0
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_DMA_Abort>:
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d008      	beq.n	8002758 <HAL_DMA_Abort+0x2a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2204      	movs	r2, #4
 800274a:	639a      	str	r2, [r3, #56]	@ 0x38
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2020 	strb.w	r2, [r3, #32]
 8002754:	2301      	movs	r3, #1
 8002756:	e020      	b.n	800279a <HAL_DMA_Abort+0x6c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2020 	strb.w	r2, [r3, #32]
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_Abort_IT>:
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d005      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x24>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2204      	movs	r2, #4
 80027c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e051      	b.n	800286c <HAL_DMA_Abort_IT+0xc8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 020e 	bic.w	r2, r2, #14
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	@ (8002878 <HAL_DMA_Abort_IT+0xd4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d029      	beq.n	8002846 <HAL_DMA_Abort_IT+0xa2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a21      	ldr	r2, [pc, #132]	@ (800287c <HAL_DMA_Abort_IT+0xd8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_Abort_IT+0x9e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <HAL_DMA_Abort_IT+0xdc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01a      	beq.n	800283c <HAL_DMA_Abort_IT+0x98>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <HAL_DMA_Abort_IT+0xe0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d012      	beq.n	8002836 <HAL_DMA_Abort_IT+0x92>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_DMA_Abort_IT+0xe4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00a      	beq.n	8002830 <HAL_DMA_Abort_IT+0x8c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <HAL_DMA_Abort_IT+0xe8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <HAL_DMA_Abort_IT+0x86>
 8002824:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002828:	e00e      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 800282a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800282e:	e00b      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002834:	e008      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800283a:	e005      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 800283c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002840:	e002      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002842:	2310      	movs	r3, #16
 8002844:	e000      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002846:	2301      	movs	r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <HAL_DMA_Abort_IT+0xec>)
 800284a:	6053      	str	r3, [r2, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2020 	strb.w	r2, [r3, #32]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA_Abort_IT+0xc8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020008 	.word	0x40020008
 800287c:	4002001c 	.word	0x4002001c
 8002880:	40020030 	.word	0x40020030
 8002884:	40020044 	.word	0x40020044
 8002888:	40020058 	.word	0x40020058
 800288c:	4002006c 	.word	0x4002006c
 8002890:	40020000 	.word	0x40020000

08002894 <HAL_GPIO_Init>:
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	@ 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	e169      	b.n	8002b7c <HAL_GPIO_Init+0x2e8>
 80028a8:	2201      	movs	r2, #1
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8158 	bne.w	8002b76 <HAL_GPIO_Init+0x2e2>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a9a      	ldr	r2, [pc, #616]	@ (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d05e      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028d0:	4a98      	ldr	r2, [pc, #608]	@ (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d875      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028d6:	4a98      	ldr	r2, [pc, #608]	@ (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d058      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028dc:	4a96      	ldr	r2, [pc, #600]	@ (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d86f      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028e2:	4a96      	ldr	r2, [pc, #600]	@ (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d052      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028e8:	4a94      	ldr	r2, [pc, #592]	@ (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d869      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028ee:	4a94      	ldr	r2, [pc, #592]	@ (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04c      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028f4:	4a92      	ldr	r2, [pc, #584]	@ (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d863      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028fa:	4a92      	ldr	r2, [pc, #584]	@ (8002b44 <HAL_GPIO_Init+0x2b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d046      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 8002900:	4a90      	ldr	r2, [pc, #576]	@ (8002b44 <HAL_GPIO_Init+0x2b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d85d      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 8002906:	2b12      	cmp	r3, #18
 8002908:	d82a      	bhi.n	8002960 <HAL_GPIO_Init+0xcc>
 800290a:	2b12      	cmp	r3, #18
 800290c:	d859      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 800290e:	a201      	add	r2, pc, #4	@ (adr r2, 8002914 <HAL_GPIO_Init+0x80>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	0800298f 	.word	0x0800298f
 8002918:	08002969 	.word	0x08002969
 800291c:	0800297b 	.word	0x0800297b
 8002920:	080029bd 	.word	0x080029bd
 8002924:	080029c3 	.word	0x080029c3
 8002928:	080029c3 	.word	0x080029c3
 800292c:	080029c3 	.word	0x080029c3
 8002930:	080029c3 	.word	0x080029c3
 8002934:	080029c3 	.word	0x080029c3
 8002938:	080029c3 	.word	0x080029c3
 800293c:	080029c3 	.word	0x080029c3
 8002940:	080029c3 	.word	0x080029c3
 8002944:	080029c3 	.word	0x080029c3
 8002948:	080029c3 	.word	0x080029c3
 800294c:	080029c3 	.word	0x080029c3
 8002950:	080029c3 	.word	0x080029c3
 8002954:	080029c3 	.word	0x080029c3
 8002958:	08002971 	.word	0x08002971
 800295c:	08002985 	.word	0x08002985
 8002960:	4a79      	ldr	r2, [pc, #484]	@ (8002b48 <HAL_GPIO_Init+0x2b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 8002966:	e02c      	b.n	80029c2 <HAL_GPIO_Init+0x12e>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	e029      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	3304      	adds	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	e024      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	3308      	adds	r3, #8
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	e01f      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	330c      	adds	r3, #12
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	e01a      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_GPIO_Init+0x108>
 8002996:	2304      	movs	r3, #4
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	e013      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_GPIO_Init+0x11c>
 80029a4:	2308      	movs	r3, #8
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e009      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 80029b0:	2308      	movs	r3, #8
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	e003      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x130>
 80029c2:	bf00      	nop
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	@ 0xff
 80029c8:	d801      	bhi.n	80029ce <HAL_GPIO_Init+0x13a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_Init+0x13e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2bff      	cmp	r3, #255	@ 0xff
 80029d8:	d802      	bhi.n	80029e0 <HAL_GPIO_Init+0x14c>
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x152>
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	3b08      	subs	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	210f      	movs	r1, #15
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80b1 	beq.w	8002b76 <HAL_GPIO_Init+0x2e2>
 8002a14:	4b4d      	ldr	r3, [pc, #308]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4a48      	ldr	r2, [pc, #288]	@ (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a40      	ldr	r2, [pc, #256]	@ (8002b54 <HAL_GPIO_Init+0x2c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1ec>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b58 <HAL_GPIO_Init+0x2c4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1e8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	@ (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <HAL_GPIO_Init+0x2cc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1e0>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e004      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e002      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a80:	2300      	movs	r3, #0
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	f002 0203 	and.w	r2, r2, #3
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	4093      	lsls	r3, r2
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	492f      	ldr	r1, [pc, #188]	@ (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x226>
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	492c      	ldr	r1, [pc, #176]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x234>
 8002aba:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4928      	ldr	r1, [pc, #160]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x24e>
 8002ad4:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4922      	ldr	r1, [pc, #136]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x25c>
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	491e      	ldr	r1, [pc, #120]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_GPIO_Init+0x276>
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4918      	ldr	r1, [pc, #96]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x284>
 8002b0a:	4b16      	ldr	r3, [pc, #88]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4914      	ldr	r1, [pc, #80]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_GPIO_Init+0x2d4>
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	490e      	ldr	r1, [pc, #56]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e021      	b.n	8002b76 <HAL_GPIO_Init+0x2e2>
 8002b32:	bf00      	nop
 8002b34:	10320000 	.word	0x10320000
 8002b38:	10310000 	.word	0x10310000
 8002b3c:	10220000 	.word	0x10220000
 8002b40:	10210000 	.word	0x10210000
 8002b44:	10120000 	.word	0x10120000
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40010400 	.word	0x40010400
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4909      	ldr	r1, [pc, #36]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f ae8e 	bne.w	80028a8 <HAL_GPIO_Init+0x14>
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	372c      	adds	r7, #44	@ 0x2c
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_RCC_OscConfig>:
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e272      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x12e>
 8002bbc:	4b92      	ldr	r3, [pc, #584]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46>
 8002bc8:	4b8f      	ldr	r3, [pc, #572]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d112      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be0:	d10b      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
 8002be2:	4b89      	ldr	r3, [pc, #548]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d06c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d168      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e24c      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x76>
 8002c04:	4b80      	ldr	r3, [pc, #512]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7f      	ldr	r2, [pc, #508]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e02e      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b78      	ldr	r3, [pc, #480]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a77      	ldr	r2, [pc, #476]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0xbc>
 8002c3e:	4b72      	ldr	r3, [pc, #456]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a71      	ldr	r2, [pc, #452]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c58:	4b6b      	ldr	r3, [pc, #428]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b68      	ldr	r3, [pc, #416]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a67      	ldr	r2, [pc, #412]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x104>
 8002c78:	f7ff f8bc 	bl	8001df4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xf6>
 8002c80:	f7ff f8b8 	bl	8001df4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	@ 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xf6>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e200      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002c92:	4b5d      	ldr	r3, [pc, #372]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe4>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
 8002ca0:	f7ff f8a8 	bl	8001df4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x11e>
 8002ca8:	f7ff f8a4 	bl	8001df4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	@ 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x11e>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1ec      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002cba:	4b53      	ldr	r3, [pc, #332]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x10c>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
 8002cc8:	bf00      	nop
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_OscConfig+0x202>
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x15e>
 8002ce2:	4b49      	ldr	r3, [pc, #292]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
 8002cee:	4b46      	ldr	r3, [pc, #280]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
 8002cfa:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1c0      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002d12:	4b3d      	ldr	r3, [pc, #244]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4939      	ldr	r1, [pc, #228]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1d6>
 8002d30:	4b36      	ldr	r3, [pc, #216]	@ (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f7ff f85d 	bl	8001df4 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
 8002d3e:	f7ff f859 	bl	8001df4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1a1      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002d50:	4b2d      	ldr	r3, [pc, #180]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1a2>
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4927      	ldr	r1, [pc, #156]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
 8002d72:	4b26      	ldr	r3, [pc, #152]	@ (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f7ff f83c 	bl	8001df4 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
 8002d80:	f7ff f838 	bl	8001df4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e180      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002d92:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1e4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d03a      	beq.n	8002e20 <HAL_RCC_OscConfig+0x284>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x24a>
 8002db2:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f7ff f81c 	bl	8001df4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x236>
 8002dc0:	f7ff f818 	bl	8001df4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x236>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e160      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x224>
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 fad0 	bl	8003384 <RCC_Delay>
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f7ff f802 	bl	8001df4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x278>
 8002df4:	f7fe fffe 	bl	8001df4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_OscConfig+0x278>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e146      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	42420000 	.word	0x42420000
 8002e10:	42420480 	.word	0x42420480
 8002e14:	4b92      	ldr	r3, [pc, #584]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e9      	bne.n	8002df4 <HAL_RCC_OscConfig+0x258>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a6 	beq.w	8002f7a <HAL_RCC_OscConfig+0x3de>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
 8002e32:	4b8b      	ldr	r3, [pc, #556]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2be>
 8002e3e:	4b88      	ldr	r3, [pc, #544]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a87      	ldr	r2, [pc, #540]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b85      	ldr	r3, [pc, #532]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
 8002e5a:	4b82      	ldr	r3, [pc, #520]	@ (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2fc>
 8002e66:	4b7f      	ldr	r3, [pc, #508]	@ (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	f7fe ffbf 	bl	8001df4 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
 8002e7a:	f7fe ffbb 	bl	8001df4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	@ 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e103      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002e8c:	4b75      	ldr	r3, [pc, #468]	@ (8003064 <HAL_RCC_OscConfig+0x4c8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2de>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x312>
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a6e      	ldr	r2, [pc, #440]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	e02d      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x334>
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a69      	ldr	r2, [pc, #420]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6213      	str	r3, [r2, #32]
 8002ec2:	4b67      	ldr	r3, [pc, #412]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a66      	ldr	r2, [pc, #408]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	e01c      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x356>
 8002ed8:	4b61      	ldr	r3, [pc, #388]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a60      	ldr	r2, [pc, #384]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a5d      	ldr	r2, [pc, #372]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	4b58      	ldr	r3, [pc, #352]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a57      	ldr	r2, [pc, #348]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
 8002f12:	f7fe ff6f 	bl	8001df4 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x394>
 8002f1a:	f7fe ff6b 	bl	8001df4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x394>
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0b1      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002f30:	4b4b      	ldr	r3, [pc, #300]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCC_OscConfig+0x37e>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
 8002f3e:	f7fe ff59 	bl	8001df4 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
 8002f46:	f7fe ff55 	bl	8001df4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e09b      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002f5c:	4b40      	ldr	r3, [pc, #256]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ee      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3de>
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8087 	beq.w	8003092 <HAL_RCC_OscConfig+0x4f6>
 8002f84:	4b36      	ldr	r3, [pc, #216]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d061      	beq.n	8003054 <HAL_RCC_OscConfig+0x4b8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d146      	bne.n	8003026 <HAL_RCC_OscConfig+0x48a>
 8002f98:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f7fe ff29 	bl	8001df4 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
 8002fa6:	f7fe ff25 	bl	8001df4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e06d      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8002fb8:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x40a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x444>
 8002fce:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4921      	ldr	r1, [pc, #132]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a19      	ldr	r1, [r3, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	491b      	ldr	r1, [pc, #108]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f7fe fef9 	bl	8001df4 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x47c>
 8003006:	f7fe fef5 	bl	8001df4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x47c>
 8003014:	2303      	movs	r3, #3
 8003016:	e03d      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x46a>
 8003024:	e035      	b.n	8003092 <HAL_RCC_OscConfig+0x4f6>
 8003026:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f7fe fee2 	bl	8001df4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4aa>
 8003034:	f7fe fede 	bl	8001df4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4aa>
 8003042:	2303      	movs	r3, #3
 8003044:	e026      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x498>
 8003052:	e01e      	b.n	8003092 <HAL_RCC_OscConfig+0x4f6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x4d0>
 800305c:	2301      	movs	r3, #1
 800305e:	e019      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	42420060 	.word	0x42420060
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_OscConfig+0x500>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	429a      	cmp	r2, r3
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x4f2>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x4f6>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_RCC_OscConfig+0x4f8>
 8003092:	2300      	movs	r3, #0
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_RCC_ClockConfig>:
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d0      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
 80030b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
 80030c2:	4b67      	ldr	r3, [pc, #412]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4965      	ldr	r1, [pc, #404]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
 80030d2:	4b63      	ldr	r3, [pc, #396]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0b8      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_ClockConfig+0x92>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x68>
 80030fc:	4b59      	ldr	r3, [pc, #356]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003106:	6053      	str	r3, [r2, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x80>
 8003114:	4b53      	ldr	r3, [pc, #332]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a52      	ldr	r2, [pc, #328]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800311e:	6053      	str	r3, [r2, #4]
 8003120:	4b50      	ldr	r3, [pc, #320]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	494d      	ldr	r1, [pc, #308]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d040      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xb6>
 8003146:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d115      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
 8003152:	2301      	movs	r3, #1
 8003154:	e07f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
 800315e:	4b41      	ldr	r3, [pc, #260]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
 800316a:	2301      	movs	r3, #1
 800316c:	e073      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
 800316e:	4b3d      	ldr	r3, [pc, #244]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
 800317a:	2301      	movs	r3, #1
 800317c:	e06b      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
 800317e:	4b39      	ldr	r3, [pc, #228]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4936      	ldr	r1, [pc, #216]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	f7fe fe30 	bl	8001df4 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
 8003198:	f7fe fe2c 	bl	8001df4 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
 80031aa:	2303      	movs	r3, #3
 80031ac:	e053      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
 80031ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
 80031c0:	4b27      	ldr	r3, [pc, #156]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d210      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x150>
 80031ce:	4b24      	ldr	r3, [pc, #144]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0207 	bic.w	r2, r3, #7
 80031d6:	4922      	ldr	r1, [pc, #136]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x150>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e032      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCC_ClockConfig+0x16e>
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4916      	ldr	r1, [pc, #88]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x18e>
 800321a:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	490e      	ldr	r1, [pc, #56]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
 800322e:	f000 f821 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8003232:	4602      	mov	r2, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	490a      	ldr	r1, [pc, #40]	@ (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	5ccb      	ldrb	r3, [r1, r3]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a09      	ldr	r2, [pc, #36]	@ (800326c <HAL_RCC_ClockConfig+0x1cc>)
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <HAL_RCC_ClockConfig+0x1d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fd8e 	bl	8001d70 <HAL_InitTick>
 8003254:	2300      	movs	r3, #0
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	0800a470 	.word	0x0800a470
 800326c:	20000000 	.word	0x20000000
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetSysClockFreq>:
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x94>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b04      	cmp	r3, #4
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x30>
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x36>
 80032a2:	e027      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x80>
 80032a4:	4b19      	ldr	r3, [pc, #100]	@ (800330c <HAL_RCC_GetSysClockFreq+0x98>)
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	e027      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x86>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	0c9b      	lsrs	r3, r3, #18
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	4a17      	ldr	r2, [pc, #92]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d010      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x70>
 80032c2:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x94>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	0c5b      	lsrs	r3, r3, #17
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	4a11      	ldr	r2, [pc, #68]	@ (8003314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <HAL_RCC_GetSysClockFreq+0x98>)
 80032d6:	fb03 f202 	mul.w	r2, r3, r2
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e004      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x7a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e002      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x86>
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_RCC_GetSysClockFreq+0xa8>)
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	bf00      	nop
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4618      	mov	r0, r3
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	00f42400 	.word	0x00f42400
 8003310:	0800a480 	.word	0x0800a480
 8003314:	0800a490 	.word	0x0800a490
 8003318:	003d0900 	.word	0x003d0900
 800331c:	007a1200 	.word	0x007a1200

08003320 <HAL_RCC_GetHCLKFreq>:
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
 8003324:	4b02      	ldr	r3, [pc, #8]	@ (8003330 <HAL_RCC_GetHCLKFreq+0x10>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20000000 	.word	0x20000000

08003334 <HAL_RCC_GetPCLK1Freq>:
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
 8003338:	f7ff fff2 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4903      	ldr	r1, [pc, #12]	@ (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	0800a468 	.word	0x0800a468

0800335c <HAL_RCC_GetPCLK2Freq>:
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
 8003360:	f7ff ffde 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	@ (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	0800a468 	.word	0x0800a468

08003384 <RCC_Delay>:
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <RCC_Delay+0x34>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <RCC_Delay+0x38>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	bf00      	nop
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <RCC_Delay+0x1c>
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000000 	.word	0x20000000
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <HAL_RCCEx_PeriphCLKConfig>:
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d07d      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]
 80033e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80033ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b49      	ldr	r3, [pc, #292]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
 8003408:	4b46      	ldr	r3, [pc, #280]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d118      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8003414:	4b43      	ldr	r3, [pc, #268]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a42      	ldr	r2, [pc, #264]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	f7fe fce8 	bl	8001df4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003428:	f7fe fce4 	bl	8001df4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	@ 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003436:	2303      	movs	r3, #3
 8003438:	e06d      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
 800343a:	4b3a      	ldr	r3, [pc, #232]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003446:	4b36      	ldr	r3, [pc, #216]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02e      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d027      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003464:	4b2e      	ldr	r3, [pc, #184]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b2e      	ldr	r3, [pc, #184]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6213      	str	r3, [r2, #32]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d014      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800348a:	f7fe fcb3 	bl	8001df4 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003492:	f7fe fcaf 	bl	8001df4 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80034a4:	2303      	movs	r3, #3
 80034a6:	e036      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80034a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80034b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4917      	ldr	r1, [pc, #92]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	620b      	str	r3, [r1, #32]
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80034cc:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a13      	ldr	r2, [pc, #76]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	61d3      	str	r3, [r2, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	490b      	ldr	r1, [pc, #44]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003502:	4b07      	ldr	r3, [pc, #28]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4904      	ldr	r1, [pc, #16]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
 8003514:	2300      	movs	r3, #0
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	42420440 	.word	0x42420440

0800352c <HAL_RCCEx_GetPeriphCLKFreq>:
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b10      	cmp	r3, #16
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b10      	cmp	r3, #16
 8003552:	f200 8089 	bhi.w	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d045      	beq.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d074      	beq.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003562:	e081      	b.n	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8003564:	4b45      	ldr	r3, [pc, #276]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b44      	ldr	r3, [pc, #272]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07a      	beq.n	800366c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	0c9b      	lsrs	r3, r3, #18
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	4a40      	ldr	r2, [pc, #256]	@ (8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003580:	5cd3      	ldrb	r3, [r2, r3]
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d015      	beq.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 800358e:	4b3b      	ldr	r3, [pc, #236]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0c5b      	lsrs	r3, r3, #17
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	4a3a      	ldr	r2, [pc, #232]	@ (8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800359a:	5cd3      	ldrb	r3, [r2, r3]
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80035a8:	4a37      	ldr	r2, [pc, #220]	@ (8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e004      	b.n	80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4a33      	ldr	r2, [pc, #204]	@ (800368c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d0:	d102      	bne.n	80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e049      	b.n	800366c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e041      	b.n	800366c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80035e8:	4b24      	ldr	r3, [pc, #144]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f8:	d108      	bne.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e01e      	b.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003616:	d109      	bne.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003618:	4b18      	ldr	r3, [pc, #96]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003624:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e00e      	b.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003636:	d11b      	bne.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e012      	b.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800364c:	f7ff fe86 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	0b9b      	lsrs	r3, r3, #14
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	3301      	adds	r3, #1
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e004      	b.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003668:	bf00      	nop
 800366a:	e002      	b.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800366c:	bf00      	nop
 800366e:	e000      	b.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003670:	bf00      	nop
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	0800a494 	.word	0x0800a494
 8003684:	0800a4a4 	.word	0x0800a4a4
 8003688:	00f42400 	.word	0x00f42400
 800368c:	003d0900 	.word	0x003d0900
 8003690:	aaaaaaab 	.word	0xaaaaaaab
 8003694:	0001e848 	.word	0x0001e848

08003698 <HAL_TIM_Base_Init>:
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_Base_Init+0x12>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e041      	b.n	800372e <HAL_TIM_Base_Init+0x96>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_Base_Init+0x2c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe f99e 	bl	8001a00 <HAL_TIM_Base_MspInit>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 fa10 	bl	8003afc <TIM_Base_SetConfig>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800372c:	2300      	movs	r3, #0
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_PWM_Init>:
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_TIM_PWM_Init+0x12>
 8003744:	2301      	movs	r3, #1
 8003746:	e041      	b.n	80037cc <HAL_TIM_PWM_Init+0x96>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_TIM_PWM_Init+0x2c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f839 	bl	80037d4 <HAL_TIM_PWM_MspInit>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 f9c1 	bl	8003afc <TIM_Base_SetConfig>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037ca:	2300      	movs	r3, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_PWM_MspInit>:
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_TIM_PWM_ConfigChannel>:
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003802:	2302      	movs	r3, #2
 8003804:	e0ae      	b.n	8003964 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0c      	cmp	r3, #12
 8003812:	f200 809f 	bhi.w	8003954 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003816:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003851 	.word	0x08003851
 8003820:	08003955 	.word	0x08003955
 8003824:	08003955 	.word	0x08003955
 8003828:	08003955 	.word	0x08003955
 800382c:	08003891 	.word	0x08003891
 8003830:	08003955 	.word	0x08003955
 8003834:	08003955 	.word	0x08003955
 8003838:	08003955 	.word	0x08003955
 800383c:	080038d3 	.word	0x080038d3
 8003840:	08003955 	.word	0x08003955
 8003844:	08003955 	.word	0x08003955
 8003848:	08003955 	.word	0x08003955
 800384c:	08003913 	.word	0x08003913
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f9b2 	bl	8003bc0 <TIM_OC1_SetConfig>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	619a      	str	r2, [r3, #24]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0204 	bic.w	r2, r2, #4
 800387a:	619a      	str	r2, [r3, #24]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6999      	ldr	r1, [r3, #24]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	619a      	str	r2, [r3, #24]
 800388e:	e064      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f9f8 	bl	8003c8c <TIM_OC2_SetConfig>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038aa:	619a      	str	r2, [r3, #24]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ba:	619a      	str	r2, [r3, #24]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6999      	ldr	r1, [r3, #24]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	021a      	lsls	r2, r3, #8
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	619a      	str	r2, [r3, #24]
 80038d0:	e043      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fa41 	bl	8003d60 <TIM_OC3_SetConfig>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0208 	orr.w	r2, r2, #8
 80038ec:	61da      	str	r2, [r3, #28]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0204 	bic.w	r2, r2, #4
 80038fc:	61da      	str	r2, [r3, #28]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69d9      	ldr	r1, [r3, #28]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	61da      	str	r2, [r3, #28]
 8003910:	e023      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fa8b 	bl	8003e34 <TIM_OC4_SetConfig>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393c:	61da      	str	r2, [r3, #28]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69d9      	ldr	r1, [r3, #28]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	61da      	str	r2, [r3, #28]
 8003952:	e002      	b.n	800395a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
 8003958:	bf00      	nop
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_ConfigClockSource>:
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_TIM_ConfigClockSource+0x1c>
 8003984:	2302      	movs	r3, #2
 8003986:	e0b4      	b.n	8003af2 <HAL_TIM_ConfigClockSource+0x186>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039c0:	d03e      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0xd4>
 80039c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039c6:	f200 8087 	bhi.w	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ce:	f000 8086 	beq.w	8003ade <HAL_TIM_ConfigClockSource+0x172>
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d6:	d87f      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b70      	cmp	r3, #112	@ 0x70
 80039da:	d01a      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0xa6>
 80039dc:	2b70      	cmp	r3, #112	@ 0x70
 80039de:	d87b      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b60      	cmp	r3, #96	@ 0x60
 80039e2:	d050      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x11a>
 80039e4:	2b60      	cmp	r3, #96	@ 0x60
 80039e6:	d877      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e8:	2b50      	cmp	r3, #80	@ 0x50
 80039ea:	d03c      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0xfa>
 80039ec:	2b50      	cmp	r3, #80	@ 0x50
 80039ee:	d873      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80039f0:	2b40      	cmp	r3, #64	@ 0x40
 80039f2:	d058      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80039f4:	2b40      	cmp	r3, #64	@ 0x40
 80039f6:	d86f      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80039f8:	2b30      	cmp	r3, #48	@ 0x30
 80039fa:	d064      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	2b30      	cmp	r3, #48	@ 0x30
 80039fe:	d86b      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d060      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d867      	bhi.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d05c      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d05a      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8003a10:	e062      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6899      	ldr	r1, [r3, #8]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f000 facc 	bl	8003fbe <TIM_ETR_SetConfig>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	e04f      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x174>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6899      	ldr	r1, [r3, #8]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f000 fab5 	bl	8003fbe <TIM_ETR_SetConfig>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	e03c      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x174>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f000 fa2c 	bl	8003ed0 <TIM_TI1_ConfigInputStage>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2150      	movs	r1, #80	@ 0x50
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fa83 	bl	8003f8a <TIM_ITRx_SetConfig>
 8003a84:	e02c      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x174>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f000 fa4a 	bl	8003f2c <TIM_TI2_ConfigInputStage>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2160      	movs	r1, #96	@ 0x60
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fa73 	bl	8003f8a <TIM_ITRx_SetConfig>
 8003aa4:	e01c      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x174>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6859      	ldr	r1, [r3, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f000 fa0c 	bl	8003ed0 <TIM_TI1_ConfigInputStage>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2140      	movs	r1, #64	@ 0x40
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fa63 	bl	8003f8a <TIM_ITRx_SetConfig>
 8003ac4:	e00c      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x174>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f000 fa5a 	bl	8003f8a <TIM_ITRx_SetConfig>
 8003ad6:	e003      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x174>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e000      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x174>
 8003ade:	bf00      	nop
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <TIM_Base_SetConfig>:
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <TIM_Base_SetConfig+0xb8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <TIM_Base_SetConfig+0x30>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1a:	d007      	beq.n	8003b2c <TIM_Base_SetConfig+0x30>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a26      	ldr	r2, [pc, #152]	@ (8003bb8 <TIM_Base_SetConfig+0xbc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_Base_SetConfig+0x30>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a25      	ldr	r2, [pc, #148]	@ (8003bbc <TIM_Base_SetConfig+0xc0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d108      	bne.n	8003b3e <TIM_Base_SetConfig+0x42>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <TIM_Base_SetConfig+0xb8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00b      	beq.n	8003b5e <TIM_Base_SetConfig+0x62>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4c:	d007      	beq.n	8003b5e <TIM_Base_SetConfig+0x62>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a19      	ldr	r2, [pc, #100]	@ (8003bb8 <TIM_Base_SetConfig+0xbc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_Base_SetConfig+0x62>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <TIM_Base_SetConfig+0xc0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <TIM_Base_SetConfig+0x74>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <TIM_Base_SetConfig+0xb8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <TIM_Base_SetConfig+0xa8>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800

08003bc0 <TIM_OC1_SetConfig>:
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f023 0201 	bic.w	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 0302 	bic.w	r3, r3, #2
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1c      	ldr	r2, [pc, #112]	@ (8003c88 <TIM_OC1_SetConfig+0xc8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10c      	bne.n	8003c36 <TIM_OC1_SetConfig+0x76>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0308 	bic.w	r3, r3, #8
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a13      	ldr	r2, [pc, #76]	@ (8003c88 <TIM_OC1_SetConfig+0xc8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d111      	bne.n	8003c62 <TIM_OC1_SetConfig+0xa2>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	619a      	str	r2, [r3, #24]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40012c00 	.word	0x40012c00

08003c8c <TIM_OC2_SetConfig>:
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f023 0210 	bic.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0320 	bic.w	r3, r3, #32
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d5c <TIM_OC2_SetConfig+0xd0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10d      	bne.n	8003d08 <TIM_OC2_SetConfig+0x7c>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a14      	ldr	r2, [pc, #80]	@ (8003d5c <TIM_OC2_SetConfig+0xd0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d113      	bne.n	8003d38 <TIM_OC2_SetConfig+0xac>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	619a      	str	r2, [r3, #24]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	40012c00 	.word	0x40012c00

08003d60 <TIM_OC3_SetConfig>:
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <TIM_OC3_SetConfig+0xd0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10d      	bne.n	8003dda <TIM_OC3_SetConfig+0x7a>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a14      	ldr	r2, [pc, #80]	@ (8003e30 <TIM_OC3_SetConfig+0xd0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d113      	bne.n	8003e0a <TIM_OC3_SetConfig+0xaa>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	61da      	str	r2, [r3, #28]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	621a      	str	r2, [r3, #32]
 8003e24:	bf00      	nop
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40012c00 	.word	0x40012c00

08003e34 <TIM_OC4_SetConfig>:
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	621a      	str	r2, [r3, #32]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	031b      	lsls	r3, r3, #12
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003ecc <TIM_OC4_SetConfig+0x98>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d109      	bne.n	8003ea8 <TIM_OC4_SetConfig+0x74>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	61da      	str	r2, [r3, #28]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	621a      	str	r2, [r3, #32]
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	40012c00 	.word	0x40012c00

08003ed0 <TIM_TI1_ConfigInputStage>:
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f023 0201 	bic.w	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f023 030a 	bic.w	r3, r3, #10
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	619a      	str	r2, [r3, #24]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	621a      	str	r2, [r3, #32]
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <TIM_TI2_ConfigInputStage>:
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0210 	bic.w	r2, r3, #16
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	031b      	lsls	r3, r3, #12
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	619a      	str	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	621a      	str	r2, [r3, #32]
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <TIM_ITRx_SetConfig>:
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f043 0307 	orr.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <TIM_ETR_SetConfig>:
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	021a      	lsls	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_MasterConfigSynchronization>:
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004010:	2302      	movs	r3, #2
 8004012:	e046      	b.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a16      	ldr	r2, [pc, #88]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004060:	d009      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a12      	ldr	r2, [pc, #72]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a10      	ldr	r2, [pc, #64]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10c      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80040a0:	2300      	movs	r3, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800

080040b8 <HAL_UART_Init>:
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e042      	b.n	8004150 <HAL_UART_Init+0x98>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_UART_Init+0x2c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fcda 	bl	8001a98 <HAL_UART_MspInit>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	@ 0x24
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fc7f 	bl	8004a00 <UART_SetConfig>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004110:	611a      	str	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004120:	615a      	str	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	645a      	str	r2, [r3, #68]	@ 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34
 800414e:	2300      	movs	r3, #0
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_IRQHandler>:
 8004158:	b580      	push	{r7, lr}
 800415a:	b0ba      	sub	sp, #232	@ 0xe8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_UART_IRQHandler+0x66>
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_UART_IRQHandler+0x66>
 80041aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_UART_IRQHandler+0x66>
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb63 	bl	8004882 <UART_Receive_IT>
 80041bc:	e25b      	b.n	8004676 <HAL_UART_IRQHandler+0x51e>
 80041be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80de 	beq.w	8004384 <HAL_UART_IRQHandler+0x22c>
 80041c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_UART_IRQHandler+0x8a>
 80041d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80d1 	beq.w	8004384 <HAL_UART_IRQHandler+0x22c>
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xae>
 80041ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_UART_IRQHandler+0xae>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xd2>
 8004212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xd2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f043 0202 	orr.w	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_UART_IRQHandler+0xf6>
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xf6>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d011      	beq.n	800427e <HAL_UART_IRQHandler+0x126>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d105      	bne.n	8004272 <HAL_UART_IRQHandler+0x11a>
 8004266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0x126>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0208 	orr.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 81f2 	beq.w	800466c <HAL_UART_IRQHandler+0x514>
 8004288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_UART_IRQHandler+0x14e>
 8004294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_UART_IRQHandler+0x14e>
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 faee 	bl	8004882 <UART_Receive_IT>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <HAL_UART_IRQHandler+0x17a>
 80042ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d04f      	beq.n	8004372 <HAL_UART_IRQHandler+0x21a>
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9f8 	bl	80046c8 <UART_EndRxTransfer>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d041      	beq.n	800436a <HAL_UART_IRQHandler+0x212>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3314      	adds	r3, #20
 800430e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004312:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800431a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800431e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800432a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1d9      	bne.n	80042e6 <HAL_UART_IRQHandler+0x18e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d013      	beq.n	8004362 <HAL_UART_IRQHandler+0x20a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433e:	4a7e      	ldr	r2, [pc, #504]	@ (8004538 <HAL_UART_IRQHandler+0x3e0>)
 8004340:	635a      	str	r2, [r3, #52]	@ 0x34
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fa2c 	bl	80027a4 <HAL_DMA_Abort_IT>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d016      	beq.n	8004380 <HAL_UART_IRQHandler+0x228>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800435c:	4610      	mov	r0, r2
 800435e:	4798      	blx	r3
 8004360:	e00e      	b.n	8004380 <HAL_UART_IRQHandler+0x228>
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f99c 	bl	80046a0 <HAL_UART_ErrorCallback>
 8004368:	e00a      	b.n	8004380 <HAL_UART_IRQHandler+0x228>
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f998 	bl	80046a0 <HAL_UART_ErrorCallback>
 8004370:	e006      	b.n	8004380 <HAL_UART_IRQHandler+0x228>
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f994 	bl	80046a0 <HAL_UART_ErrorCallback>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44
 800437e:	e175      	b.n	800466c <HAL_UART_IRQHandler+0x514>
 8004380:	bf00      	nop
 8004382:	e173      	b.n	800466c <HAL_UART_IRQHandler+0x514>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	2b01      	cmp	r3, #1
 800438a:	f040 814f 	bne.w	800462c <HAL_UART_IRQHandler+0x4d4>
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8148 	beq.w	800462c <HAL_UART_IRQHandler+0x4d4>
 800439c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8141 	beq.w	800462c <HAL_UART_IRQHandler+0x4d4>
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80b6 	beq.w	800453c <HAL_UART_IRQHandler+0x3e4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80043dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8145 	beq.w	8004670 <HAL_UART_IRQHandler+0x518>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043ee:	429a      	cmp	r2, r3
 80043f0:	f080 813e 	bcs.w	8004670 <HAL_UART_IRQHandler+0x518>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b20      	cmp	r3, #32
 8004404:	f000 8088 	beq.w	8004518 <HAL_UART_IRQHandler+0x3c0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004412:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800441e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004422:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004426:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004434:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800443c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004440:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800444c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1d9      	bne.n	8004408 <HAL_UART_IRQHandler+0x2b0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	677b      	str	r3, [r7, #116]	@ 0x74
 800445c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	673b      	str	r3, [r7, #112]	@ 0x70
 8004464:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004478:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800447c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800447e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004480:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800448a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e1      	bne.n	8004454 <HAL_UART_IRQHandler+0x2fc>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	663b      	str	r3, [r7, #96]	@ 0x60
 8004498:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80044c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e3      	bne.n	8004490 <HAL_UART_IRQHandler+0x338>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e8:	f023 0310 	bic.w	r3, r3, #16
 80044ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80044fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80044fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004500:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	653b      	str	r3, [r7, #80]	@ 0x50
 8004508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e3      	bne.n	80044d6 <HAL_UART_IRQHandler+0x37e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe f90b 	bl	800272e <HAL_DMA_Abort>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	635a      	str	r2, [r3, #52]	@ 0x34
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004526:	b29b      	uxth	r3, r3
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	b29b      	uxth	r3, r3
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8bf 	bl	80046b2 <HAL_UARTEx_RxEventCallback>
 8004534:	e09c      	b.n	8004670 <HAL_UART_IRQHandler+0x518>
 8004536:	bf00      	nop
 8004538:	0800478d 	.word	0x0800478d
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004544:	b29b      	uxth	r3, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 808e 	beq.w	8004674 <HAL_UART_IRQHandler+0x51c>
 8004558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8089 	beq.w	8004674 <HAL_UART_IRQHandler+0x51c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	637b      	str	r3, [r7, #52]	@ 0x34
 8004572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004574:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004578:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004586:	647a      	str	r2, [r7, #68]	@ 0x44
 8004588:	643b      	str	r3, [r7, #64]	@ 0x40
 800458a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800458c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e3      	bne.n	8004562 <HAL_UART_IRQHandler+0x40a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3314      	adds	r3, #20
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045be:	633a      	str	r2, [r7, #48]	@ 0x30
 80045c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e3      	bne.n	800459a <HAL_UART_IRQHandler+0x442>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0310 	bic.w	r3, r3, #16
 80045f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004604:	61fa      	str	r2, [r7, #28]
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	69b9      	ldr	r1, [r7, #24]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e3      	bne.n	80045e0 <HAL_UART_IRQHandler+0x488>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	635a      	str	r2, [r3, #52]	@ 0x34
 800461e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f844 	bl	80046b2 <HAL_UARTEx_RxEventCallback>
 800462a:	e023      	b.n	8004674 <HAL_UART_IRQHandler+0x51c>
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <HAL_UART_IRQHandler+0x4f4>
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_UART_IRQHandler+0x4f4>
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8b5 	bl	80047b4 <UART_Transmit_IT>
 800464a:	e014      	b.n	8004676 <HAL_UART_IRQHandler+0x51e>
 800464c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00e      	beq.n	8004676 <HAL_UART_IRQHandler+0x51e>
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_UART_IRQHandler+0x51e>
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8f4 	bl	8004852 <UART_EndTransmit_IT>
 800466a:	e004      	b.n	8004676 <HAL_UART_IRQHandler+0x51e>
 800466c:	bf00      	nop
 800466e:	e002      	b.n	8004676 <HAL_UART_IRQHandler+0x51e>
 8004670:	bf00      	nop
 8004672:	e000      	b.n	8004676 <HAL_UART_IRQHandler+0x51e>
 8004674:	bf00      	nop
 8004676:	37e8      	adds	r7, #232	@ 0xe8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_UART_TxCpltCallback>:
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <HAL_UART_RxCpltCallback>:
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_UART_ErrorCallback>:
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <HAL_UARTEx_RxEventCallback>:
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	807b      	strh	r3, [r7, #2]
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <UART_EndRxTransfer>:
 80046c8:	b480      	push	{r7}
 80046ca:	b095      	sub	sp, #84	@ 0x54
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80046f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_EndRxTransfer+0x8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3314      	adds	r3, #20
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3314      	adds	r3, #20
 8004722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800472a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e5      	bne.n	8004704 <UART_EndRxTransfer+0x3c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d119      	bne.n	8004774 <UART_EndRxTransfer+0xac>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f023 0310 	bic.w	r3, r3, #16
 8004756:	647b      	str	r3, [r7, #68]	@ 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004760:	61ba      	str	r2, [r7, #24]
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e5      	bne.n	8004740 <UART_EndRxTransfer+0x78>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	@ 0x30
 8004782:	bf00      	nop
 8004784:	3754      	adds	r7, #84	@ 0x54
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <UART_DMAAbortOnError>:
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	84da      	strh	r2, [r3, #38]	@ 0x26
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff ff7a 	bl	80046a0 <HAL_UART_ErrorCallback>
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_Transmit_IT>:
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b21      	cmp	r3, #33	@ 0x21
 80047c6:	d13e      	bne.n	8004846 <UART_Transmit_IT+0x92>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d0:	d114      	bne.n	80047fc <UART_Transmit_IT+0x48>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d110      	bne.n	80047fc <UART_Transmit_IT+0x48>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ee:	605a      	str	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	1c9a      	adds	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]
 80047fa:	e008      	b.n	800480e <UART_Transmit_IT+0x5a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6211      	str	r1, [r2, #32]
 8004806:	781a      	ldrb	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4619      	mov	r1, r3
 800481c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10f      	bne.n	8004842 <UART_Transmit_IT+0x8e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	2300      	movs	r3, #0
 8004844:	e000      	b.n	8004848 <UART_Transmit_IT+0x94>
 8004846:	2302      	movs	r3, #2
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr

08004852 <UART_EndTransmit_IT>:
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff02 	bl	800467c <HAL_UART_TxCpltCallback>
 8004878:	2300      	movs	r3, #0
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_Receive_IT>:
 8004882:	b580      	push	{r7, lr}
 8004884:	b08c      	sub	sp, #48	@ 0x30
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b22      	cmp	r3, #34	@ 0x22
 8004894:	f040 80ae 	bne.w	80049f4 <UART_Receive_IT+0x172>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a0:	d117      	bne.n	80048d2 <UART_Receive_IT+0x50>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d113      	bne.n	80048d2 <UART_Receive_IT+0x50>
 80048aa:	2300      	movs	r3, #0
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	1c9a      	adds	r2, r3, #2
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80048d0:	e026      	b.n	8004920 <UART_Receive_IT+0x9e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d8:	2300      	movs	r3, #0
 80048da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e4:	d007      	beq.n	80048f6 <UART_Receive_IT+0x74>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <UART_Receive_IT+0x82>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <UART_Receive_IT+0x82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e008      	b.n	8004916 <UART_Receive_IT+0x94>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004910:	b2da      	uxtb	r2, r3
 8004912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29b      	uxth	r3, r3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4619      	mov	r1, r3
 800492e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004930:	2b00      	cmp	r3, #0
 8004932:	d15d      	bne.n	80049f0 <UART_Receive_IT+0x16e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0220 	bic.w	r2, r2, #32
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	615a      	str	r2, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	2b01      	cmp	r3, #1
 8004978:	d135      	bne.n	80049e6 <UART_Receive_IT+0x164>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a0:	623a      	str	r2, [r7, #32]
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	69f9      	ldr	r1, [r7, #28]
 80049a6:	6a3a      	ldr	r2, [r7, #32]
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <UART_Receive_IT+0xfe>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d10a      	bne.n	80049d8 <UART_Receive_IT+0x156>
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe67 	bl	80046b2 <HAL_UARTEx_RxEventCallback>
 80049e4:	e002      	b.n	80049ec <UART_Receive_IT+0x16a>
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fe51 	bl	800468e <HAL_UART_RxCpltCallback>
 80049ec:	2300      	movs	r3, #0
 80049ee:	e002      	b.n	80049f6 <UART_Receive_IT+0x174>
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <UART_Receive_IT+0x174>
 80049f4:	2302      	movs	r3, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	3730      	adds	r7, #48	@ 0x30
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <UART_SetConfig>:
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	611a      	str	r2, [r3, #16]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a3a:	f023 030c 	bic.w	r3, r3, #12
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	60d3      	str	r3, [r2, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	615a      	str	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2c      	ldr	r2, [pc, #176]	@ (8004b14 <UART_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <UART_SetConfig+0x70>
 8004a68:	f7fe fc78 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	e002      	b.n	8004a76 <UART_SetConfig+0x76>
 8004a70:	f7fe fc60 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009a      	lsls	r2, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	4a22      	ldr	r2, [pc, #136]	@ (8004b18 <UART_SetConfig+0x118>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	0119      	lsls	r1, r3, #4
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009a      	lsls	r2, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aac:	4b1a      	ldr	r3, [pc, #104]	@ (8004b18 <UART_SetConfig+0x118>)
 8004aae:	fba3 0302 	umull	r0, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2064      	movs	r0, #100	@ 0x64
 8004ab6:	fb00 f303 	mul.w	r3, r0, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	@ 0x32
 8004ac0:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <UART_SetConfig+0x118>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004acc:	4419      	add	r1, r3
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <UART_SetConfig+0x118>)
 8004ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2064      	movs	r0, #100	@ 0x64
 8004aee:	fb00 f303 	mul.w	r3, r0, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	3332      	adds	r3, #50	@ 0x32
 8004af8:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <UART_SetConfig+0x118>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	f003 020f 	and.w	r2, r3, #15
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	440a      	add	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40013800 	.word	0x40013800
 8004b18:	51eb851f 	.word	0x51eb851f

08004b1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004b20:	4904      	ldr	r1, [pc, #16]	@ (8004b34 <MX_FATFS_Init+0x18>)
 8004b22:	4805      	ldr	r0, [pc, #20]	@ (8004b38 <MX_FATFS_Init+0x1c>)
 8004b24:	f002 fc84 	bl	8007430 <FATFS_LinkDriver>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b03      	ldr	r3, [pc, #12]	@ (8004b3c <MX_FATFS_Init+0x20>)
 8004b2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004b30:	bf00      	nop
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	200003f8 	.word	0x200003f8
 8004b38:	2000000c 	.word	0x2000000c
 8004b3c:	200003f4 	.word	0x200003f4

08004b40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004b44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
	...

08004b50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <USER_initialize+0x20>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004b60:	4b03      	ldr	r3, [pc, #12]	@ (8004b70 <USER_initialize+0x20>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	20000009 	.word	0x20000009

08004b74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <USER_status+0x20>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004b84:	4b03      	ldr	r3, [pc, #12]	@ (8004b94 <USER_status+0x20>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20000009 	.word	0x20000009

08004b98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004ba8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004bc4:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	603a      	str	r2, [r7, #0]
 8004bda:	71fb      	strb	r3, [r7, #7]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
    return res;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	4a08      	ldr	r2, [pc, #32]	@ (8004c20 <disk_status+0x30>)
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	79fa      	ldrb	r2, [r7, #7]
 8004c08:	4905      	ldr	r1, [pc, #20]	@ (8004c20 <disk_status+0x30>)
 8004c0a:	440a      	add	r2, r1
 8004c0c:	7a12      	ldrb	r2, [r2, #8]
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4798      	blx	r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	2000064c 	.word	0x2000064c

08004c24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	4a0d      	ldr	r2, [pc, #52]	@ (8004c6c <disk_initialize+0x48>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d111      	bne.n	8004c60 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c6c <disk_initialize+0x48>)
 8004c40:	2101      	movs	r1, #1
 8004c42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	4a09      	ldr	r2, [pc, #36]	@ (8004c6c <disk_initialize+0x48>)
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	79fa      	ldrb	r2, [r7, #7]
 8004c52:	4906      	ldr	r1, [pc, #24]	@ (8004c6c <disk_initialize+0x48>)
 8004c54:	440a      	add	r2, r1
 8004c56:	7a12      	ldrb	r2, [r2, #8]
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4798      	blx	r3
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2000064c 	.word	0x2000064c

08004c70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <disk_read+0x3c>)
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	689c      	ldr	r4, [r3, #8]
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	4a07      	ldr	r2, [pc, #28]	@ (8004cac <disk_read+0x3c>)
 8004c90:	4413      	add	r3, r2
 8004c92:	7a18      	ldrb	r0, [r3, #8]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	47a0      	blx	r4
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	bf00      	nop
 8004cac:	2000064c 	.word	0x2000064c

08004cb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cec <disk_write+0x3c>)
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68dc      	ldr	r4, [r3, #12]
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	4a07      	ldr	r2, [pc, #28]	@ (8004cec <disk_write+0x3c>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	7a18      	ldrb	r0, [r3, #8]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	47a0      	blx	r4
 8004cdc:	4603      	mov	r3, r0
 8004cde:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd90      	pop	{r4, r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2000064c 	.word	0x2000064c

08004cf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	603a      	str	r2, [r7, #0]
 8004cfa:	71fb      	strb	r3, [r7, #7]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	4a09      	ldr	r2, [pc, #36]	@ (8004d28 <disk_ioctl+0x38>)
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	79fa      	ldrb	r2, [r7, #7]
 8004d0e:	4906      	ldr	r1, [pc, #24]	@ (8004d28 <disk_ioctl+0x38>)
 8004d10:	440a      	add	r2, r1
 8004d12:	7a10      	ldrb	r0, [r2, #8]
 8004d14:	79b9      	ldrb	r1, [r7, #6]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	4798      	blx	r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	2000064c 	.word	0x2000064c

08004d2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004d40:	e007      	b.n	8004d52 <mem_cpy+0x26>
		*d++ = *s++;
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	1c53      	adds	r3, r2, #1
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	6179      	str	r1, [r7, #20]
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f2      	bne.n	8004d42 <mem_cpy+0x16>
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004d78:	e005      	b.n	8004d86 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	617a      	str	r2, [r7, #20]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f4      	bne.n	8004d7a <mem_set+0x12>
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004d9c:	b480      	push	{r7}
 8004d9e:	b089      	sub	sp, #36	@ 0x24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004db4:	bf00      	nop
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	1e5a      	subs	r2, r3, #1
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00d      	beq.n	8004ddc <mem_cmp+0x40>
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	61fa      	str	r2, [r7, #28]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	61ba      	str	r2, [r7, #24]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0ec      	beq.n	8004db6 <mem_cmp+0x1a>
	return r;
 8004ddc:	697b      	ldr	r3, [r7, #20]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3724      	adds	r7, #36	@ 0x24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr

08004de8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004df2:	e002      	b.n	8004dfa <chk_chr+0x12>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3301      	adds	r3, #1
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <chk_chr+0x26>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d1f2      	bne.n	8004df4 <chk_chr+0xc>
	return *str;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	781b      	ldrb	r3, [r3, #0]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e038      	b.n	8004ea2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8004e30:	492f      	ldr	r1, [pc, #188]	@ (8004ef0 <chk_lock+0xd4>)
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d029      	beq.n	8004e98 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e44:	492a      	ldr	r1, [pc, #168]	@ (8004ef0 <chk_lock+0xd4>)
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d11e      	bne.n	8004e9c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004e5e:	4924      	ldr	r1, [pc, #144]	@ (8004ef0 <chk_lock+0xd4>)
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4613      	mov	r3, r2
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d110      	bne.n	8004e9c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004e7a:	491d      	ldr	r1, [pc, #116]	@ (8004ef0 <chk_lock+0xd4>)
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	3308      	adds	r3, #8
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d102      	bne.n	8004e9c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004e96:	e007      	b.n	8004ea8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d9c3      	bls.n	8004e30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d109      	bne.n	8004ec2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <chk_lock+0x9e>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d101      	bne.n	8004ebe <chk_lock+0xa2>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e013      	b.n	8004ee6 <chk_lock+0xca>
 8004ebe:	2312      	movs	r3, #18
 8004ec0:	e011      	b.n	8004ee6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <chk_lock+0xc4>
 8004ec8:	4909      	ldr	r1, [pc, #36]	@ (8004ef0 <chk_lock+0xd4>)
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	330a      	adds	r3, #10
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ede:	d101      	bne.n	8004ee4 <chk_lock+0xc8>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	e000      	b.n	8004ee6 <chk_lock+0xca>
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	20000634 	.word	0x20000634

08004ef4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e002      	b.n	8004f06 <enq_lock+0x12>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3301      	adds	r3, #1
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d809      	bhi.n	8004f20 <enq_lock+0x2c>
 8004f0c:	490a      	ldr	r1, [pc, #40]	@ (8004f38 <enq_lock+0x44>)
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1ef      	bne.n	8004f00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	bf14      	ite	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	2300      	moveq	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000634 	.word	0x20000634

08004f3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e02b      	b.n	8004fa4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004f4c:	4955      	ldr	r1, [pc, #340]	@ (80050a4 <inc_lock+0x168>)
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d11b      	bne.n	8004f9e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004f66:	494f      	ldr	r1, [pc, #316]	@ (80050a4 <inc_lock+0x168>)
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3304      	adds	r3, #4
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d10d      	bne.n	8004f9e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8004f82:	4948      	ldr	r1, [pc, #288]	@ (80050a4 <inc_lock+0x168>)
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3308      	adds	r3, #8
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d006      	beq.n	8004fac <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d9d0      	bls.n	8004f4c <inc_lock+0x10>
 8004faa:	e000      	b.n	8004fae <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004fac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d145      	bne.n	8005040 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e002      	b.n	8004fc0 <inc_lock+0x84>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d809      	bhi.n	8004fda <inc_lock+0x9e>
 8004fc6:	4937      	ldr	r1, [pc, #220]	@ (80050a4 <inc_lock+0x168>)
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ef      	bne.n	8004fba <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d101      	bne.n	8004fe4 <inc_lock+0xa8>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e05a      	b.n	800509a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8004fea:	482e      	ldr	r0, [pc, #184]	@ (80050a4 <inc_lock+0x168>)
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4403      	add	r3, r0
 8004ff8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8005000:	4828      	ldr	r0, [pc, #160]	@ (80050a4 <inc_lock+0x168>)
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4403      	add	r3, r0
 800500e:	3304      	adds	r3, #4
 8005010:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 8005018:	4922      	ldr	r1, [pc, #136]	@ (80050a4 <inc_lock+0x168>)
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	3308      	adds	r3, #8
 8005028:	4602      	mov	r2, r0
 800502a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800502c:	491d      	ldr	r1, [pc, #116]	@ (80050a4 <inc_lock+0x168>)
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	330a      	adds	r3, #10
 800503c:	2200      	movs	r2, #0
 800503e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <inc_lock+0x124>
 8005046:	4917      	ldr	r1, [pc, #92]	@ (80050a4 <inc_lock+0x168>)
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	330a      	adds	r3, #10
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <inc_lock+0x124>
 800505c:	2300      	movs	r3, #0
 800505e:	e01c      	b.n	800509a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <inc_lock+0x142>
 8005066:	490f      	ldr	r1, [pc, #60]	@ (80050a4 <inc_lock+0x168>)
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	330a      	adds	r3, #10
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	b299      	uxth	r1, r3
 800507c:	e001      	b.n	8005082 <inc_lock+0x146>
 800507e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005082:	4808      	ldr	r0, [pc, #32]	@ (80050a4 <inc_lock+0x168>)
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4403      	add	r3, r0
 8005090:	330a      	adds	r3, #10
 8005092:	460a      	mov	r2, r1
 8005094:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	20000634 	.word	0x20000634

080050a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	607b      	str	r3, [r7, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d82e      	bhi.n	800511a <dec_lock+0x72>
		n = Files[i].ctr;
 80050bc:	491b      	ldr	r1, [pc, #108]	@ (800512c <dec_lock+0x84>)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	330a      	adds	r3, #10
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050d0:	89fb      	ldrh	r3, [r7, #14]
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d6:	d101      	bne.n	80050dc <dec_lock+0x34>
 80050d8:	2300      	movs	r3, #0
 80050da:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80050dc:	89fb      	ldrh	r3, [r7, #14]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <dec_lock+0x40>
 80050e2:	89fb      	ldrh	r3, [r7, #14]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050e8:	4910      	ldr	r1, [pc, #64]	@ (800512c <dec_lock+0x84>)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	330a      	adds	r3, #10
 80050f8:	89fa      	ldrh	r2, [r7, #14]
 80050fa:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050fc:	89fb      	ldrh	r3, [r7, #14]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d108      	bne.n	8005114 <dec_lock+0x6c>
 8005102:	490a      	ldr	r1, [pc, #40]	@ (800512c <dec_lock+0x84>)
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	737b      	strb	r3, [r7, #13]
 8005118:	e001      	b.n	800511e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800511a:	2302      	movs	r3, #2
 800511c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800511e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000634 	.word	0x20000634

08005130 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e016      	b.n	800516c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800513e:	4910      	ldr	r1, [pc, #64]	@ (8005180 <clear_lock+0x50>)
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d108      	bne.n	8005166 <clear_lock+0x36>
 8005154:	490a      	ldr	r1, [pc, #40]	@ (8005180 <clear_lock+0x50>)
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d9e5      	bls.n	800513e <clear_lock+0xe>
	}
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20000634 	.word	0x20000634

08005184 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8005196:	2b00      	cmp	r3, #0
 8005198:	d038      	beq.n	800520c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80051a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	2301      	movs	r3, #1
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	f7ff fd7f 	bl	8004cb0 <disk_write>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <sync_window+0x3a>
			res = FR_DISK_ERR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	e026      	b.n	800520c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d218      	bcs.n	800520c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e010      	b.n	8005206 <sync_window+0x82>
					wsect += fs->fsize;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4413      	add	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	2301      	movs	r3, #1
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	f7ff fd58 	bl	8004cb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	3b01      	subs	r3, #1
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d8eb      	bhi.n	80051e4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d01b      	beq.n	8005268 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ffa7 	bl	8005184 <sync_window>
 8005236:	4603      	mov	r3, r0
 8005238:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d113      	bne.n	8005268 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	2301      	movs	r3, #1
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	f7ff fd10 	bl	8004c70 <disk_read>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff ff82 	bl	8005184 <sync_window>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 809b 	bne.w	80053c2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005292:	2b03      	cmp	r3, #3
 8005294:	f040 8088 	bne.w	80053a8 <sync_fs+0x136>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f040 8082 	bne.w	80053a8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fd5b 	bl	8004d68 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2255      	movs	r2, #85	@ 0x55
 80052b6:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	22aa      	movs	r2, #170	@ 0xaa
 80052be:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2252      	movs	r2, #82	@ 0x52
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2252      	movs	r2, #82	@ 0x52
 80052cc:	705a      	strb	r2, [r3, #1]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2261      	movs	r2, #97	@ 0x61
 80052d2:	709a      	strb	r2, [r3, #2]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2241      	movs	r2, #65	@ 0x41
 80052d8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2272      	movs	r2, #114	@ 0x72
 80052de:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2272      	movs	r2, #114	@ 0x72
 80052e6:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2241      	movs	r2, #65	@ 0x41
 80052ee:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2261      	movs	r2, #97	@ 0x61
 80052f6:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005300:	b2da      	uxtb	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800530e:	b29b      	uxth	r3, r3
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	b29b      	uxth	r3, r3
 8005314:	b2da      	uxtb	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005332:	0e1b      	lsrs	r3, r3, #24
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005350:	b29b      	uxth	r3, r3
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	b29b      	uxth	r3, r3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005374:	0e1b      	lsrs	r3, r3, #24
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800539a:	2301      	movs	r3, #1
 800539c:	f7ff fc88 	bl	8004cb0 <disk_write>
			fs->fsi_flag = 0;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80053ae:	2200      	movs	r2, #0
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fc9c 	bl	8004cf0 <disk_ioctl>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	3b02      	subs	r3, #2
 80053da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80053e2:	3b02      	subs	r3, #2
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d301      	bcc.n	80053ee <clust2sect+0x22>
 80053ea:	2300      	movs	r3, #0
 80053ec:	e00a      	b.n	8005404 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80053f4:	461a      	mov	r2, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	fb03 f202 	mul.w	r2, r3, r2
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005402:	4413      	add	r3, r2
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d905      	bls.n	800542a <get_fat+0x1c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <get_fat+0x22>
		val = 1;	/* Internal error */
 800542a:	2301      	movs	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e0a2      	b.n	8005576 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800543c:	2b03      	cmp	r3, #3
 800543e:	d067      	beq.n	8005510 <get_fat+0x102>
 8005440:	2b03      	cmp	r3, #3
 8005442:	f300 808e 	bgt.w	8005562 <get_fat+0x154>
 8005446:	2b01      	cmp	r3, #1
 8005448:	d002      	beq.n	8005450 <get_fat+0x42>
 800544a:	2b02      	cmp	r3, #2
 800544c:	d03f      	beq.n	80054ce <get_fat+0xc0>
 800544e:	e088      	b.n	8005562 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	0a5b      	lsrs	r3, r3, #9
 8005468:	4413      	add	r3, r2
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fed2 	bl	8005216 <move_window>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d177      	bne.n	8005568 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	60fa      	str	r2, [r7, #12]
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	5cd3      	ldrb	r3, [r2, r3]
 8005486:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	0a5b      	lsrs	r3, r3, #9
 8005492:	4413      	add	r3, r2
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff febd 	bl	8005216 <move_window>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d164      	bne.n	800556c <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	5cd3      	ldrb	r3, [r2, r3]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <get_fat+0xb6>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	e002      	b.n	80054ca <get_fat+0xbc>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ca:	617b      	str	r3, [r7, #20]
			break;
 80054cc:	e053      	b.n	8005576 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	4413      	add	r3, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fe9a 	bl	8005216 <move_window>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d143      	bne.n	8005570 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3301      	adds	r3, #1
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	b21a      	sxth	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b21b      	sxth	r3, r3
 8005506:	4313      	orrs	r3, r2
 8005508:	b21b      	sxth	r3, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	617b      	str	r3, [r7, #20]
			break;
 800550e:	e032      	b.n	8005576 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	09db      	lsrs	r3, r3, #7
 800551a:	4413      	add	r3, r2
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fe79 	bl	8005216 <move_window>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d124      	bne.n	8005574 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3303      	adds	r3, #3
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	061a      	lsls	r2, r3, #24
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3302      	adds	r3, #2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	041b      	lsls	r3, r3, #16
 8005548:	431a      	orrs	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3301      	adds	r3, #1
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	4313      	orrs	r3, r2
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	4313      	orrs	r3, r2
 800555a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800555e:	617b      	str	r3, [r7, #20]
			break;
 8005560:	e009      	b.n	8005576 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 8005562:	2301      	movs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e006      	b.n	8005576 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005568:	bf00      	nop
 800556a:	e004      	b.n	8005576 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005574:	bf00      	nop
		}
	}

	return val;
 8005576:	697b      	ldr	r3, [r7, #20]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d905      	bls.n	800559e <put_fat+0x1e>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <put_fat+0x24>
		res = FR_INT_ERR;
 800559e:	2302      	movs	r3, #2
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e0f6      	b.n	8005792 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	f000 809e 	beq.w	80056ec <put_fat+0x16c>
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	f300 80e4 	bgt.w	800577e <put_fat+0x1fe>
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d002      	beq.n	80055c0 <put_fat+0x40>
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d06f      	beq.n	800569e <put_fat+0x11e>
 80055be:	e0de      	b.n	800577e <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	0a5b      	lsrs	r3, r3, #9
 80055d8:	4413      	add	r3, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff fe1a 	bl	8005216 <move_window>
 80055e2:	4603      	mov	r3, r0
 80055e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f040 80cb 	bne.w	8005784 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	617a      	str	r2, [r7, #20]
 80055f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <put_fat+0xa4>
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b25b      	sxtb	r3, r3
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	b25a      	sxtb	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	b25b      	sxtb	r3, r3
 800561c:	4313      	orrs	r3, r2
 800561e:	b25b      	sxtb	r3, r3
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e001      	b.n	8005628 <put_fat+0xa8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	0a5b      	lsrs	r3, r3, #9
 800563e:	4413      	add	r3, r2
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff fde7 	bl	8005216 <move_window>
 8005648:	4603      	mov	r3, r0
 800564a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800564c:	7ffb      	ldrb	r3, [r7, #31]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 809a 	bne.w	8005788 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <put_fat+0xf2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	b2db      	uxtb	r3, r3
 8005670:	e00e      	b.n	8005690 <put_fat+0x110>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f023 030f 	bic.w	r3, r3, #15
 800567c:	b25a      	sxtb	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	b25b      	sxtb	r3, r3
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	b25b      	sxtb	r3, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	b25b      	sxtb	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800569c:	e079      	b.n	8005792 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	4413      	add	r3, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff fdb2 	bl	8005216 <move_window>
 80056b2:	4603      	mov	r3, r0
 80056b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d167      	bne.n	800578c <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b29a      	uxth	r2, r3
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	3301      	adds	r3, #1
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 80056ea:	e052      	b.n	8005792 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	09db      	lsrs	r3, r3, #7
 80056f6:	4413      	add	r3, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fd8b 	bl	8005216 <move_window>
 8005700:	4603      	mov	r3, r0
 8005702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005704:	7ffb      	ldrb	r3, [r7, #31]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d142      	bne.n	8005790 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	3303      	adds	r3, #3
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	061a      	lsls	r2, r3, #24
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	3302      	adds	r3, #2
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	431a      	orrs	r2, r3
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3301      	adds	r3, #1
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	4313      	orrs	r3, r2
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	7812      	ldrb	r2, [r2, #0]
 8005738:	4313      	orrs	r3, r2
 800573a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4313      	orrs	r3, r2
 8005742:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	b29b      	uxth	r3, r3
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	b29a      	uxth	r2, r3
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	3301      	adds	r3, #1
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	0c1a      	lsrs	r2, r3, #16
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	3302      	adds	r3, #2
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0e1a      	lsrs	r2, r3, #24
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	3303      	adds	r3, #3
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800577c:	e009      	b.n	8005792 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800577e:	2302      	movs	r3, #2
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e006      	b.n	8005792 <put_fat+0x212>
			if (res != FR_OK) break;
 8005784:	bf00      	nop
 8005786:	e004      	b.n	8005792 <put_fat+0x212>
			if (res != FR_OK) break;
 8005788:	bf00      	nop
 800578a:	e002      	b.n	8005792 <put_fat+0x212>
			if (res != FR_OK) break;
 800578c:	bf00      	nop
 800578e:	e000      	b.n	8005792 <put_fat+0x212>
			if (res != FR_OK) break;
 8005790:	bf00      	nop
		}
	}

	return res;
 8005792:	7ffb      	ldrb	r3, [r7, #31]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d905      	bls.n	80057b8 <remove_chain+0x1c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d302      	bcc.n	80057be <remove_chain+0x22>
		res = FR_INT_ERR;
 80057b8:	2302      	movs	r3, #2
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	e043      	b.n	8005846 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80057c2:	e036      	b.n	8005832 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fe21 	bl	800540e <get_fat>
 80057cc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d035      	beq.n	8005840 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d102      	bne.n	80057e0 <remove_chain+0x44>
 80057da:	2302      	movs	r3, #2
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e032      	b.n	8005846 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d102      	bne.n	80057ee <remove_chain+0x52>
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e02b      	b.n	8005846 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80057ee:	2200      	movs	r2, #0
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fec4 	bl	8005580 <put_fat>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d120      	bne.n	8005844 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d00f      	beq.n	800582e <remove_chain+0x92>
				fs->free_clust++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3c2      	bcc.n	80057c4 <remove_chain+0x28>
 800583e:	e002      	b.n	8005846 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005844:	bf00      	nop
		}
	}

	return res;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10f      	bne.n	8005880 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005866:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <create_chain+0x2a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d31c      	bcc.n	80058b4 <create_chain+0x64>
 800587a:	2301      	movs	r3, #1
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e019      	b.n	80058b4 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fdc3 	bl	800540e <get_fat>
 8005888:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d801      	bhi.n	8005894 <create_chain+0x44>
 8005890:	2301      	movs	r3, #1
 8005892:	e076      	b.n	8005982 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d101      	bne.n	80058a0 <create_chain+0x50>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	e070      	b.n	8005982 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d201      	bcs.n	80058b0 <create_chain+0x60>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	e068      	b.n	8005982 <create_chain+0x132>
		scl = clst;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	3301      	adds	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d307      	bcc.n	80058da <create_chain+0x8a>
			ncl = 2;
 80058ca:	2302      	movs	r3, #2
 80058cc:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d901      	bls.n	80058da <create_chain+0x8a>
 80058d6:	2300      	movs	r3, #0
 80058d8:	e053      	b.n	8005982 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80058da:	6979      	ldr	r1, [r7, #20]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff fd96 	bl	800540e <get_fat>
 80058e2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00e      	beq.n	8005908 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d002      	beq.n	80058f8 <create_chain+0xa8>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <create_chain+0xac>
			return cs;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	e042      	b.n	8005982 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d1d9      	bne.n	80058b8 <create_chain+0x68>
 8005904:	2300      	movs	r3, #0
 8005906:	e03c      	b.n	8005982 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8005908:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800590a:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff fe35 	bl	8005580 <put_fat>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <create_chain+0xe4>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fe28 	bl	8005580 <put_fat>
 8005930:	4603      	mov	r3, r0
 8005932:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11a      	bne.n	8005970 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d018      	beq.n	8005980 <create_chain+0x130>
			fs->free_clust--;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800596e:	e007      	b.n	8005980 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d102      	bne.n	800597c <create_chain+0x12c>
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
 800597a:	e000      	b.n	800597e <create_chain+0x12e>
 800597c:	2301      	movs	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005980:	697b      	ldr	r3, [r7, #20]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800599a:	3304      	adds	r3, #4
 800599c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	0a5b      	lsrs	r3, r3, #9
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80059a8:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80059ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1d1a      	adds	r2, r3, #4
 80059b6:	613a      	str	r2, [r7, #16]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <clmt_clust+0x3c>
 80059c2:	2300      	movs	r3, #0
 80059c4:	e010      	b.n	80059e8 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d307      	bcc.n	80059de <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	3304      	adds	r3, #4
 80059da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059dc:	e7e9      	b.n	80059b2 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80059de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4413      	add	r3, r2
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b086      	sub	sp, #24
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8005a0c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d007      	beq.n	8005a24 <dir_sdi+0x32>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d301      	bcc.n	8005a28 <dir_sdi+0x36>
		return FR_INT_ERR;
 8005a24:	2302      	movs	r3, #2
 8005a26:	e074      	b.n	8005b12 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10c      	bne.n	8005a48 <dir_sdi+0x56>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a34:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d105      	bne.n	8005a48 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a42:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8005a46:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d111      	bne.n	8005a72 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a54:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8005a58:	461a      	mov	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d301      	bcc.n	8005a64 <dir_sdi+0x72>
			return FR_INT_ERR;
 8005a60:	2302      	movs	r3, #2
 8005a62:	e056      	b.n	8005b12 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a6a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	e032      	b.n	8005ad8 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a78:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005a80:	e01e      	b.n	8005ac0 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a88:	6979      	ldr	r1, [r7, #20]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff fcbf 	bl	800540e <get_fat>
 8005a90:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d101      	bne.n	8005a9e <dir_sdi+0xac>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e039      	b.n	8005b12 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d907      	bls.n	8005ab4 <dir_sdi+0xc2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005aaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d301      	bcc.n	8005ab8 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e02c      	b.n	8005b12 <dir_sdi+0x120>
			idx -= ic;
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d2dc      	bcs.n	8005a82 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fc7b 	bl	80053cc <clust2sect>
 8005ad6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <dir_sdi+0xf8>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e013      	b.n	8005b12 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	091a      	lsrs	r2, r3, #4
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	441a      	add	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005afe:	461a      	mov	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	015b      	lsls	r3, r3, #5
 8005b08:	441a      	add	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b1a:	b590      	push	{r4, r7, lr}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <dir_next+0x26>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <dir_next+0x2a>
		return FR_NO_FILE;
 8005b40:	2304      	movs	r3, #4
 8005b42:	e0dd      	b.n	8005d00 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f040 80c6 	bne.w	8005cdc <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005b6e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8005b72:	461a      	mov	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4293      	cmp	r3, r2
 8005b78:	f0c0 80b0 	bcc.w	8005cdc <dir_next+0x1c2>
				return FR_NO_FILE;
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	e0bf      	b.n	8005d00 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8005b8a:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8005b8e:	3a01      	subs	r2, #1
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f040 80a2 	bne.w	8005cdc <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f7ff fc31 	bl	800540e <get_fat>
 8005bac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d801      	bhi.n	8005bb8 <dir_next+0x9e>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e0a3      	b.n	8005d00 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d101      	bne.n	8005bc4 <dir_next+0xaa>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e09d      	b.n	8005d00 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005bca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d374      	bcc.n	8005cbe <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <dir_next+0xc4>
 8005bda:	2304      	movs	r3, #4
 8005bdc:	e090      	b.n	8005d00 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7ff fe2f 	bl	8005850 <create_chain>
 8005bf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <dir_next+0xe4>
 8005bfa:	2307      	movs	r3, #7
 8005bfc:	e080      	b.n	8005d00 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <dir_next+0xee>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e07b      	b.n	8005d00 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d101      	bne.n	8005c14 <dir_next+0xfa>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e075      	b.n	8005d00 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fab2 	bl	8005184 <sync_window>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <dir_next+0x110>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e06a      	b.n	8005d00 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff f896 	bl	8004d68 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7ff fbbe 	bl	80053cc <clust2sect>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	e01b      	b.n	8005c94 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fa88 	bl	8005184 <sync_window>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <dir_next+0x164>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e040      	b.n	8005d00 <dir_next+0x1e6>
						dp->fs->winsect++;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c84:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8005c88:	3201      	adds	r2, #1
 8005c8a:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	3301      	adds	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c9a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d3da      	bcc.n	8005c5c <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cac:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	1a8a      	subs	r2, r1, r2
 8005cba:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005ccc:	6979      	ldr	r1, [r7, #20]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fb7c 	bl	80053cc <clust2sect>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cec:	461a      	mov	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	015b      	lsls	r3, r3, #5
 8005cf6:	441a      	add	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}

08005d08 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005d12:	2100      	movs	r1, #0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fe6c 	bl	80059f2 <dir_sdi>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d131      	bne.n	8005d88 <dir_alloc+0x80>
		n = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7ff fa6d 	bl	8005216 <move_window>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d11f      	bne.n	8005d86 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2be5      	cmp	r3, #229	@ 0xe5
 8005d50:	d005      	beq.n	8005d5e <dir_alloc+0x56>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d102      	bne.n	8005d72 <dir_alloc+0x6a>
 8005d6c:	e00c      	b.n	8005d88 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005d72:	2101      	movs	r1, #1
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff fed0 	bl	8005b1a <dir_next>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0d1      	beq.n	8005d28 <dir_alloc+0x20>
 8005d84:	e000      	b.n	8005d88 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8005d86:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d101      	bne.n	8005d92 <dir_alloc+0x8a>
 8005d8e:	2307      	movs	r3, #7
 8005d90:	73fb      	strb	r3, [r7, #15]
	return res;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	331b      	adds	r3, #27
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	b21a      	sxth	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	331a      	adds	r3, #26
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	b21b      	sxth	r3, r3
 8005db8:	4313      	orrs	r3, r2
 8005dba:	b21b      	sxth	r3, r3
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d10f      	bne.n	8005dea <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	3315      	adds	r3, #21
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	b21a      	sxth	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	3314      	adds	r3, #20
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b21b      	sxth	r3, r3
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

	return cl;
 8005dea:	68fb      	ldr	r3, [r7, #12]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	331a      	adds	r3, #26
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	331b      	adds	r3, #27
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	0c1a      	lsrs	r2, r3, #16
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3314      	adds	r3, #20
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	0c1b      	lsrs	r3, r3, #16
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3315      	adds	r3, #21
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b086      	sub	sp, #24
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff fdd0 	bl	80059f2 <dir_sdi>
 8005e52:	4603      	mov	r3, r0
 8005e54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <dir_find+0x1e>
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	e03b      	b.n	8005ed8 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7ff f9d1 	bl	8005216 <move_window>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d128      	bne.n	8005ed0 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005e84:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <dir_find+0x56>
 8005e92:	2304      	movs	r3, #4
 8005e94:	75fb      	strb	r3, [r7, #23]
 8005e96:	e01e      	b.n	8005ed6 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	330b      	adds	r3, #11
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <dir_find+0x7a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005eac:	220b      	movs	r2, #11
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6938      	ldr	r0, [r7, #16]
 8005eb2:	f7fe ff73 	bl	8004d9c <mem_cmp>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff fe2b 	bl	8005b1a <dir_next>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0c8      	beq.n	8005e60 <dir_find+0x1e>
 8005ece:	e002      	b.n	8005ed6 <dir_find+0x94>
		if (res != FR_OK) break;
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <dir_find+0x94>
			break;
 8005ed4:	bf00      	nop

	return res;
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005ee8:	2101      	movs	r1, #1
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ff0c 	bl	8005d08 <dir_alloc>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d126      	bne.n	8005f48 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f7ff f984 	bl	8005216 <move_window>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d117      	bne.n	8005f48 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f1e:	2220      	movs	r2, #32
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe ff20 	bl	8004d68 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005f34:	220b      	movs	r2, #11
 8005f36:	4619      	mov	r1, r3
 8005f38:	f7fe fef8 	bl	8004d2c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <create_name+0x18>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f72:	d0f8      	beq.n	8005f66 <create_name+0x12>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f7a:	d0f4      	beq.n	8005f66 <create_name+0x12>
	sfn = dp->fn;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005f82:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005f84:	220b      	movs	r2, #11
 8005f86:	2120      	movs	r1, #32
 8005f88:	68b8      	ldr	r0, [r7, #8]
 8005f8a:	f7fe feed 	bl	8004d68 <mem_set>
	si = i = b = 0; ni = 8;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	617a      	str	r2, [r7, #20]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005fac:	7fbb      	ldrb	r3, [r7, #30]
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d953      	bls.n	800605a <create_name+0x106>
 8005fb2:	7fbb      	ldrb	r3, [r7, #30]
 8005fb4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fb6:	d050      	beq.n	800605a <create_name+0x106>
 8005fb8:	7fbb      	ldrb	r3, [r7, #30]
 8005fba:	2b5c      	cmp	r3, #92	@ 0x5c
 8005fbc:	d04d      	beq.n	800605a <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005fbe:	7fbb      	ldrb	r3, [r7, #30]
 8005fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fc2:	d003      	beq.n	8005fcc <create_name+0x78>
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d30f      	bcc.n	8005fec <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d102      	bne.n	8005fd8 <create_name+0x84>
 8005fd2:	7fbb      	ldrb	r3, [r7, #30]
 8005fd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fd6:	d001      	beq.n	8005fdc <create_name+0x88>
 8005fd8:	2306      	movs	r3, #6
 8005fda:	e073      	b.n	80060c4 <create_name+0x170>
			i = 8; ni = 11;
 8005fdc:	2308      	movs	r3, #8
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	230b      	movs	r3, #11
 8005fe2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005fe4:	7ffb      	ldrb	r3, [r7, #31]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e035      	b.n	8006058 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005fec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da08      	bge.n	8006006 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005ff4:	7ffb      	ldrb	r3, [r7, #31]
 8005ff6:	f043 0303 	orr.w	r3, r3, #3
 8005ffa:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ffc:	7fbb      	ldrb	r3, [r7, #30]
 8005ffe:	3b80      	subs	r3, #128	@ 0x80
 8006000:	4a32      	ldr	r2, [pc, #200]	@ (80060cc <create_name+0x178>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006006:	7fbb      	ldrb	r3, [r7, #30]
 8006008:	4619      	mov	r1, r3
 800600a:	4831      	ldr	r0, [pc, #196]	@ (80060d0 <create_name+0x17c>)
 800600c:	f7fe feec 	bl	8004de8 <chk_chr>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <create_name+0xc6>
				return FR_INVALID_NAME;
 8006016:	2306      	movs	r3, #6
 8006018:	e054      	b.n	80060c4 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800601a:	7fbb      	ldrb	r3, [r7, #30]
 800601c:	2b40      	cmp	r3, #64	@ 0x40
 800601e:	d907      	bls.n	8006030 <create_name+0xdc>
 8006020:	7fbb      	ldrb	r3, [r7, #30]
 8006022:	2b5a      	cmp	r3, #90	@ 0x5a
 8006024:	d804      	bhi.n	8006030 <create_name+0xdc>
				b |= 2;
 8006026:	7ffb      	ldrb	r3, [r7, #31]
 8006028:	f043 0302 	orr.w	r3, r3, #2
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e00c      	b.n	800604a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006030:	7fbb      	ldrb	r3, [r7, #30]
 8006032:	2b60      	cmp	r3, #96	@ 0x60
 8006034:	d909      	bls.n	800604a <create_name+0xf6>
 8006036:	7fbb      	ldrb	r3, [r7, #30]
 8006038:	2b7a      	cmp	r3, #122	@ 0x7a
 800603a:	d806      	bhi.n	800604a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800603c:	7ffb      	ldrb	r3, [r7, #31]
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	7fbb      	ldrb	r3, [r7, #30]
 8006046:	3b20      	subs	r3, #32
 8006048:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	613a      	str	r2, [r7, #16]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	4413      	add	r3, r2
 8006054:	7fba      	ldrb	r2, [r7, #30]
 8006056:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006058:	e7a1      	b.n	8005f9e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	441a      	add	r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006064:	7fbb      	ldrb	r3, [r7, #30]
 8006066:	2b20      	cmp	r3, #32
 8006068:	d801      	bhi.n	800606e <create_name+0x11a>
 800606a:	2304      	movs	r3, #4
 800606c:	e000      	b.n	8006070 <create_name+0x11c>
 800606e:	2300      	movs	r3, #0
 8006070:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <create_name+0x128>
 8006078:	2306      	movs	r3, #6
 800607a:	e023      	b.n	80060c4 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2be5      	cmp	r3, #229	@ 0xe5
 8006082:	d102      	bne.n	800608a <create_name+0x136>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2205      	movs	r2, #5
 8006088:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d102      	bne.n	8006096 <create_name+0x142>
 8006090:	7ffb      	ldrb	r3, [r7, #31]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006096:	7ffb      	ldrb	r3, [r7, #31]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d103      	bne.n	80060a8 <create_name+0x154>
 80060a0:	7fbb      	ldrb	r3, [r7, #30]
 80060a2:	f043 0310 	orr.w	r3, r3, #16
 80060a6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80060a8:	7ffb      	ldrb	r3, [r7, #31]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d103      	bne.n	80060ba <create_name+0x166>
 80060b2:	7fbb      	ldrb	r3, [r7, #30]
 80060b4:	f043 0308 	orr.w	r3, r3, #8
 80060b8:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	330b      	adds	r3, #11
 80060be:	7fba      	ldrb	r2, [r7, #30]
 80060c0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80060c2:	2300      	movs	r3, #0
#endif
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	0800a4a8 	.word	0x0800a4a8
 80060d0:	08009e60 	.word	0x08009e60

080060d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80060e4:	d003      	beq.n	80060ee <follow_path+0x1a>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b5c      	cmp	r3, #92	@ 0x5c
 80060ec:	d102      	bne.n	80060f4 <follow_path+0x20>
		path++;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b1f      	cmp	r3, #31
 8006102:	d80a      	bhi.n	800611a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006104:	2100      	movs	r1, #0
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff fc73 	bl	80059f2 <dir_sdi>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006118:	e045      	b.n	80061a6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800611a:	463b      	mov	r3, r7
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff ff18 	bl	8005f54 <create_name>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d136      	bne.n	800619c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff fe87 	bl	8005e42 <dir_find>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800613e:	7adb      	ldrb	r3, [r3, #11]
 8006140:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b04      	cmp	r3, #4
 800614c:	d128      	bne.n	80061a0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d123      	bne.n	80061a0 <follow_path+0xcc>
 8006158:	2305      	movs	r3, #5
 800615a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800615c:	e020      	b.n	80061a0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11d      	bne.n	80061a4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800616e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	330b      	adds	r3, #11
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800617e:	2305      	movs	r3, #5
 8006180:	73fb      	strb	r3, [r7, #15]
 8006182:	e010      	b.n	80061a6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fe05 	bl	8005d9c <ld_clust>
 8006192:	4602      	mov	r2, r0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800619a:	e7be      	b.n	800611a <follow_path+0x46>
			if (res != FR_OK) break;
 800619c:	bf00      	nop
 800619e:	e002      	b.n	80061a6 <follow_path+0xd2>
				break;
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061a4:	bf00      	nop
		}
	}

	return res;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d031      	beq.n	800622a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e002      	b.n	80061d4 <get_ldnumber+0x24>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	3301      	adds	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d903      	bls.n	80061e4 <get_ldnumber+0x34>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80061e2:	d1f4      	bne.n	80061ce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80061ea:	d11c      	bne.n	8006226 <get_ldnumber+0x76>
			tp = *path;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	60fa      	str	r2, [r7, #12]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	3b30      	subs	r3, #48	@ 0x30
 80061fc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b09      	cmp	r3, #9
 8006202:	d80e      	bhi.n	8006222 <get_ldnumber+0x72>
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	429a      	cmp	r2, r3
 800620a:	d10a      	bne.n	8006222 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <get_ldnumber+0x72>
					vol = (int)i;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	3301      	adds	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	e002      	b.n	800622c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800622a:	693b      	ldr	r3, [r7, #16]
}
 800622c:	4618      	mov	r0, r3
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr
	...

08006238 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f04f 32ff 	mov.w	r2, #4294967295
 8006250:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fe ffdd 	bl	8005216 <move_window>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <check_fs+0x2e>
		return 3;
 8006262:	2303      	movs	r3, #3
 8006264:	e04a      	b.n	80062fc <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800626c:	3301      	adds	r3, #1
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	b21a      	sxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800627a:	b21b      	sxth	r3, r3
 800627c:	4313      	orrs	r3, r2
 800627e:	b21b      	sxth	r3, r3
 8006280:	4a20      	ldr	r2, [pc, #128]	@ (8006304 <check_fs+0xcc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d001      	beq.n	800628a <check_fs+0x52>
		return 2;
 8006286:	2302      	movs	r3, #2
 8006288:	e038      	b.n	80062fc <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3336      	adds	r3, #54	@ 0x36
 800628e:	3303      	adds	r3, #3
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	061a      	lsls	r2, r3, #24
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3336      	adds	r3, #54	@ 0x36
 8006298:	3302      	adds	r3, #2
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	041b      	lsls	r3, r3, #16
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3336      	adds	r3, #54	@ 0x36
 80062a4:	3301      	adds	r3, #1
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	4313      	orrs	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80062b8:	4a13      	ldr	r2, [pc, #76]	@ (8006308 <check_fs+0xd0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <check_fs+0x8a>
		return 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	e01c      	b.n	80062fc <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3352      	adds	r3, #82	@ 0x52
 80062c6:	3303      	adds	r3, #3
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	061a      	lsls	r2, r3, #24
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3352      	adds	r3, #82	@ 0x52
 80062d0:	3302      	adds	r3, #2
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3352      	adds	r3, #82	@ 0x52
 80062dc:	3301      	adds	r3, #1
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	4313      	orrs	r3, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80062f0:	4a05      	ldr	r2, [pc, #20]	@ (8006308 <check_fs+0xd0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <check_fs+0xc2>
		return 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e000      	b.n	80062fc <check_fs+0xc4>

	return 1;
 80062fa:	2301      	movs	r3, #1
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	ffffaa55 	.word	0xffffaa55
 8006308:	00544146 	.word	0x00544146

0800630c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b096      	sub	sp, #88	@ 0x58
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006320:	68b8      	ldr	r0, [r7, #8]
 8006322:	f7ff ff45 	bl	80061b0 <get_ldnumber>
 8006326:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	da01      	bge.n	8006332 <find_volume+0x26>
 800632e:	230b      	movs	r3, #11
 8006330:	e2a8      	b.n	8006884 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006332:	4a9d      	ldr	r2, [pc, #628]	@ (80065a8 <find_volume+0x29c>)
 8006334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <find_volume+0x3a>
 8006342:	230c      	movs	r3, #12
 8006344:	e29e      	b.n	8006884 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800634a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800634c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01b      	beq.n	800638e <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006358:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fc47 	bl	8004bf0 <disk_status>
 8006362:	4603      	mov	r3, r0
 8006364:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006368:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10c      	bne.n	800638e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <find_volume+0x7e>
 800637a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006386:	230a      	movs	r3, #10
 8006388:	e27c      	b.n	8006884 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800638a:	2300      	movs	r3, #0
 800638c:	e27a      	b.n	8006884 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006398:	b2da      	uxtb	r2, r3
 800639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fc3c 	bl	8004c24 <disk_initialize>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80063b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80063be:	2303      	movs	r3, #3
 80063c0:	e260      	b.n	8006884 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <find_volume+0xcc>
 80063c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80063d4:	230a      	movs	r3, #10
 80063d6:	e255      	b.n	8006884 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80063dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063e0:	f7ff ff2a 	bl	8006238 <check_fs>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80063ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d153      	bne.n	800649a <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80063f2:	2300      	movs	r3, #0
 80063f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f6:	e028      	b.n	800644a <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80063f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006402:	4413      	add	r3, r2
 8006404:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	3304      	adds	r3, #4
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d012      	beq.n	8006436 <find_volume+0x12a>
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	330b      	adds	r3, #11
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	061a      	lsls	r2, r3, #24
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	330a      	adds	r3, #10
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	431a      	orrs	r2, r3
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	3309      	adds	r3, #9
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	4313      	orrs	r3, r2
 800642c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642e:	3208      	adds	r2, #8
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	431a      	orrs	r2, r3
 8006434:	e000      	b.n	8006438 <find_volume+0x12c>
 8006436:	2200      	movs	r2, #0
 8006438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	3358      	adds	r3, #88	@ 0x58
 800643e:	443b      	add	r3, r7
 8006440:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006446:	3301      	adds	r3, #1
 8006448:	643b      	str	r3, [r7, #64]	@ 0x40
 800644a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644c:	2b03      	cmp	r3, #3
 800644e:	d9d3      	bls.n	80063f8 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006450:	2300      	movs	r3, #0
 8006452:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <find_volume+0x154>
 800645a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800645c:	3b01      	subs	r3, #1
 800645e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	3358      	adds	r3, #88	@ 0x58
 8006466:	443b      	add	r3, r7
 8006468:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800646c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800646e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <find_volume+0x174>
 8006474:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006476:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006478:	f7ff fede 	bl	8006238 <check_fs>
 800647c:	4603      	mov	r3, r0
 800647e:	e000      	b.n	8006482 <find_volume+0x176>
 8006480:	2302      	movs	r3, #2
 8006482:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006486:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <find_volume+0x18e>
 800648e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006490:	3301      	adds	r3, #1
 8006492:	643b      	str	r3, [r7, #64]	@ 0x40
 8006494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006496:	2b03      	cmp	r3, #3
 8006498:	d9e2      	bls.n	8006460 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800649a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d101      	bne.n	80064a6 <find_volume+0x19a>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e1ee      	b.n	8006884 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80064a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <find_volume+0x1a6>
 80064ae:	230d      	movs	r3, #13
 80064b0:	e1e8      	b.n	8006884 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	7b1b      	ldrb	r3, [r3, #12]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	b21a      	sxth	r2, r3
 80064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064bc:	7adb      	ldrb	r3, [r3, #11]
 80064be:	b21b      	sxth	r3, r3
 80064c0:	4313      	orrs	r3, r2
 80064c2:	b21b      	sxth	r3, r3
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c8:	d001      	beq.n	80064ce <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80064ca:	230d      	movs	r3, #13
 80064cc:	e1da      	b.n	8006884 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	7ddb      	ldrb	r3, [r3, #23]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	b21a      	sxth	r2, r3
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	7d9b      	ldrb	r3, [r3, #22]
 80064da:	b21b      	sxth	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b21b      	sxth	r3, r3
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80064e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d112      	bne.n	8006510 <find_volume+0x204>
 80064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ec:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80064f0:	061a      	lsls	r2, r3, #24
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	431a      	orrs	r2, r3
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	4313      	orrs	r3, r2
 8006506:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006508:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800650c:	4313      	orrs	r3, r2
 800650e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006514:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	7c1a      	ldrb	r2, [r3, #16]
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006528:	2b01      	cmp	r3, #1
 800652a:	d006      	beq.n	800653a <find_volume+0x22e>
 800652c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006532:	2b02      	cmp	r3, #2
 8006534:	d001      	beq.n	800653a <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8006536:	230d      	movs	r3, #13
 8006538:	e1a4      	b.n	8006884 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800653a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006540:	461a      	mov	r2, r3
 8006542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654c:	7b5a      	ldrb	r2, [r3, #13]
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <find_volume+0x268>
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006564:	461a      	mov	r2, r3
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800656c:	3b01      	subs	r3, #1
 800656e:	4013      	ands	r3, r2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8006574:	230d      	movs	r3, #13
 8006576:	e185      	b.n	8006884 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	7c9b      	ldrb	r3, [r3, #18]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	b21a      	sxth	r2, r3
 8006580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006582:	7c5b      	ldrb	r3, [r3, #17]
 8006584:	b21b      	sxth	r3, r3
 8006586:	4313      	orrs	r3, r2
 8006588:	b21b      	sxth	r3, r3
 800658a:	b29a      	uxth	r2, r3
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80065a2:	230d      	movs	r3, #13
 80065a4:	e16e      	b.n	8006884 <find_volume+0x578>
 80065a6:	bf00      	nop
 80065a8:	2000062c 	.word	0x2000062c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	7d1b      	ldrb	r3, [r3, #20]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	b21a      	sxth	r2, r3
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	7cdb      	ldrb	r3, [r3, #19]
 80065b8:	b21b      	sxth	r3, r3
 80065ba:	4313      	orrs	r3, r2
 80065bc:	b21b      	sxth	r3, r3
 80065be:	b29b      	uxth	r3, r3
 80065c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80065c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d112      	bne.n	80065ee <find_volume+0x2e2>
 80065c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80065ce:	061a      	lsls	r2, r3, #24
 80065d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80065d6:	041b      	lsls	r3, r3, #16
 80065d8:	431a      	orrs	r2, r3
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	4313      	orrs	r3, r2
 80065e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	7bdb      	ldrb	r3, [r3, #15]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	b21a      	sxth	r2, r3
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	7b9b      	ldrb	r3, [r3, #14]
 80065fa:	b21b      	sxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b21b      	sxth	r3, r3
 8006600:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006602:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <find_volume+0x300>
 8006608:	230d      	movs	r3, #13
 800660a:	e13b      	b.n	8006884 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800660c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800660e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006610:	4413      	add	r3, r2
 8006612:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006614:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8006618:	0912      	lsrs	r2, r2, #4
 800661a:	b292      	uxth	r2, r2
 800661c:	4413      	add	r3, r2
 800661e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	429a      	cmp	r2, r3
 8006626:	d201      	bcs.n	800662c <find_volume+0x320>
 8006628:	230d      	movs	r3, #13
 800662a:	e12b      	b.n	8006884 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800662c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006634:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8006638:	fbb3 f3f2 	udiv	r3, r3, r2
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <find_volume+0x33c>
 8006644:	230d      	movs	r3, #13
 8006646:	e11d      	b.n	8006884 <find_volume+0x578>
	fmt = FS_FAT12;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006654:	4293      	cmp	r3, r2
 8006656:	d902      	bls.n	800665e <find_volume+0x352>
 8006658:	2302      	movs	r3, #2
 800665a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006664:	4293      	cmp	r3, r2
 8006666:	d902      	bls.n	800666e <find_volume+0x362>
 8006668:	2303      	movs	r3, #3
 800666a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	1c9a      	adds	r2, r3, #2
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800667c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006680:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006684:	441a      	add	r2, r3
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800668c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	441a      	add	r2, r3
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8006698:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800669c:	2b03      	cmp	r3, #3
 800669e:	d121      	bne.n	80066e4 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <find_volume+0x3a2>
 80066aa:	230d      	movs	r3, #13
 80066ac:	e0ea      	b.n	8006884 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80066b4:	061a      	lsls	r2, r3, #24
 80066b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	431a      	orrs	r2, r3
 80066c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	4313      	orrs	r3, r2
 80066ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066cc:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80066d0:	431a      	orrs	r2, r3
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e2:	e025      	b.n	8006730 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <find_volume+0x3e6>
 80066ee:	230d      	movs	r3, #13
 80066f0:	e0c8      	b.n	8006884 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80066f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066fa:	441a      	add	r2, r3
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006702:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006706:	2b02      	cmp	r3, #2
 8006708:	d104      	bne.n	8006714 <find_volume+0x408>
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	e00c      	b.n	800672e <find_volume+0x422>
 8006714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006716:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	085a      	lsrs	r2, r3, #1
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800672e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006738:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800673c:	0a5b      	lsrs	r3, r3, #9
 800673e:	429a      	cmp	r2, r3
 8006740:	d201      	bcs.n	8006746 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8006742:	230d      	movs	r3, #13
 8006744:	e09e      	b.n	8006884 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800675c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675e:	2280      	movs	r2, #128	@ 0x80
 8006760:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006764:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006768:	2b03      	cmp	r3, #3
 800676a:	d177      	bne.n	800685c <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	b21a      	sxth	r2, r3
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800677c:	b21b      	sxth	r3, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	b21b      	sxth	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	d16a      	bne.n	800685c <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006788:	3301      	adds	r3, #1
 800678a:	4619      	mov	r1, r3
 800678c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800678e:	f7fe fd42 	bl	8005216 <move_window>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d161      	bne.n	800685c <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	b21a      	sxth	r2, r3
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b21b      	sxth	r3, r3
 80067b6:	4a35      	ldr	r2, [pc, #212]	@ (800688c <find_volume+0x580>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d14f      	bne.n	800685c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	78db      	ldrb	r3, [r3, #3]
 80067c0:	061a      	lsls	r2, r3, #24
 80067c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c4:	789b      	ldrb	r3, [r3, #2]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	431a      	orrs	r2, r3
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	4313      	orrs	r3, r2
 80067d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006890 <find_volume+0x584>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d13e      	bne.n	800685c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80067de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e0:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80067e4:	061a      	lsls	r2, r3, #24
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	431a      	orrs	r2, r3
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	4313      	orrs	r3, r2
 80067fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067fc:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8006800:	4313      	orrs	r3, r2
 8006802:	4a24      	ldr	r2, [pc, #144]	@ (8006894 <find_volume+0x588>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d129      	bne.n	800685c <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800680e:	061a      	lsls	r2, r3, #24
 8006810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006812:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	431a      	orrs	r2, r3
 800681a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681c:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	4313      	orrs	r3, r2
 8006824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006826:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800682a:	431a      	orrs	r2, r3
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8006838:	061a      	lsls	r2, r3, #24
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8006840:	041b      	lsls	r3, r3, #16
 8006842:	431a      	orrs	r2, r3
 8006844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006846:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	4313      	orrs	r3, r2
 800684e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006850:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8006854:	431a      	orrs	r2, r3
 8006856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006858:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800685c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006862:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8006866:	4b0c      	ldr	r3, [pc, #48]	@ (8006898 <find_volume+0x58c>)
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	4b0a      	ldr	r3, [pc, #40]	@ (8006898 <find_volume+0x58c>)
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	4b09      	ldr	r3, [pc, #36]	@ (8006898 <find_volume+0x58c>)
 8006874:	881a      	ldrh	r2, [r3, #0]
 8006876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006878:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800687c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800687e:	f7fe fc57 	bl	8005130 <clear_lock>
#endif

	return FR_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3758      	adds	r7, #88	@ 0x58
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	ffffaa55 	.word	0xffffaa55
 8006890:	41615252 	.word	0x41615252
 8006894:	61417272 	.word	0x61417272
 8006898:	20000630 	.word	0x20000630

0800689c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d022      	beq.n	80068f4 <validate+0x58>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01d      	beq.n	80068f4 <validate+0x58>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80068be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d016      	beq.n	80068f4 <validate+0x58>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80068cc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d10c      	bne.n	80068f4 <validate+0x58>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80068e0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe f983 	bl	8004bf0 <disk_status>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80068f4:	2309      	movs	r3, #9
 80068f6:	e000      	b.n	80068fa <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006916:	f107 0310 	add.w	r3, r7, #16
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fc48 	bl	80061b0 <get_ldnumber>
 8006920:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da01      	bge.n	800692c <f_mount+0x28>
 8006928:	230b      	movs	r3, #11
 800692a:	e02d      	b.n	8006988 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800692c:	4a18      	ldr	r2, [pc, #96]	@ (8006990 <f_mount+0x8c>)
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006934:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d006      	beq.n	800694a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800693c:	69b8      	ldr	r0, [r7, #24]
 800693e:	f7fe fbf7 	bl	8005130 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	490d      	ldr	r1, [pc, #52]	@ (8006990 <f_mount+0x8c>)
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <f_mount+0x6a>
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d001      	beq.n	8006972 <f_mount+0x6e>
 800696e:	2300      	movs	r3, #0
 8006970:	e00a      	b.n	8006988 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006972:	f107 0108 	add.w	r1, r7, #8
 8006976:	f107 030c 	add.w	r3, r7, #12
 800697a:	2200      	movs	r2, #0
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fcc5 	bl	800630c <find_volume>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006986:	7dfb      	ldrb	r3, [r7, #23]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	2000062c 	.word	0x2000062c

08006994 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 800699a:	af00      	add	r7, sp, #0
 800699c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069a0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80069a4:	6018      	str	r0, [r3, #0]
 80069a6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069aa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80069ae:	6019      	str	r1, [r3, #0]
 80069b0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069b4:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80069b8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80069ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069be:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <f_open+0x38>
 80069c8:	2309      	movs	r3, #9
 80069ca:	e253      	b.n	8006e74 <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 80069cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069d0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80069dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069e0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80069e4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80069e8:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	f002 021f 	and.w	r2, r2, #31
 80069f2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80069f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069f8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	f107 0108 	add.w	r1, r7, #8
 8006a08:	f107 0320 	add.w	r3, r7, #32
 8006a0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fc7b 	bl	800630c <find_volume>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006a1c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 8225 	bne.w	8006e70 <f_open+0x4dc>
		INIT_BUF(dj);
 8006a26:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a2a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006a2e:	f107 0214 	add.w	r2, r7, #20
 8006a32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8006a36:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a3a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	f107 0320 	add.w	r3, r7, #32
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fb44 	bl	80060d4 <follow_path>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 8006a52:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a56:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006a5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a5e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006a62:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d11b      	bne.n	8006aa2 <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 8006a6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d103      	bne.n	8006a7a <f_open+0xe6>
				res = FR_INVALID_NAME;
 8006a72:	2306      	movs	r3, #6
 8006a74:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8006a78:	e013      	b.n	8006aa2 <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a7a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a7e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	bf8c      	ite	hi
 8006a88:	2301      	movhi	r3, #1
 8006a8a:	2300      	movls	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f107 0320 	add.w	r3, r7, #32
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe f9c0 	bl	8004e1c <chk_lock>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006aa2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006aa6:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 031c 	and.w	r3, r3, #28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80e6 	beq.w	8006c82 <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 8006ab6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d027      	beq.n	8006b0e <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006abe:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d10e      	bne.n	8006ae4 <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ac6:	f7fe fa15 	bl	8004ef4 <enq_lock>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d006      	beq.n	8006ade <f_open+0x14a>
 8006ad0:	f107 0320 	add.w	r3, r7, #32
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fa03 	bl	8005ee0 <dir_register>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e000      	b.n	8006ae0 <f_open+0x14c>
 8006ade:	2312      	movs	r3, #18
 8006ae0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006ae4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ae8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006aec:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006af0:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006afc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b00:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006b04:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b08:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8006b0c:	e017      	b.n	8006b3e <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006b0e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006b12:	330b      	adds	r3, #11
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	f003 0311 	and.w	r3, r3, #17
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <f_open+0x192>
					res = FR_DENIED;
 8006b1e:	2307      	movs	r3, #7
 8006b20:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8006b24:	e00b      	b.n	8006b3e <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006b26:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b2a:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <f_open+0x1aa>
						res = FR_EXIST;
 8006b38:	2308      	movs	r3, #8
 8006b3a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006b3e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 80c1 	bne.w	8006cca <f_open+0x336>
 8006b48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b4c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80b7 	beq.w	8006cca <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 8006b5c:	f7fd fff0 	bl	8004b40 <get_fattime>
 8006b60:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006b64:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006b68:	330e      	adds	r3, #14
 8006b6a:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006b80:	330f      	adds	r3, #15
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8006b8a:	0c1a      	lsrs	r2, r3, #16
 8006b8c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006b90:	3310      	adds	r3, #16
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8006b9a:	0e1a      	lsrs	r2, r3, #24
 8006b9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006ba0:	3311      	adds	r3, #17
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006ba6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006baa:	330b      	adds	r3, #11
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006bb0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006bb4:	331c      	adds	r3, #28
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006bbe:	331d      	adds	r3, #29
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006bc8:	331e      	adds	r3, #30
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006bd2:	331f      	adds	r3, #31
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006bd8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006bdc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006be0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006be4:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f8d7 	bl	8005d9c <ld_clust>
 8006bee:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8006bf8:	f7ff f8fd 	bl	8005df6 <st_clust>
				dj.fs->wflag = 1;
 8006bfc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c00:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8006c0e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d059      	beq.n	8006cca <f_open+0x336>
					dw = dj.fs->winsect;
 8006c16:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c1a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006c1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c22:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8006c26:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 8006c2a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c2e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c36:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fdae 	bl	800579c <remove_chain>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 8006c46:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d13d      	bne.n	8006cca <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006c4e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c52:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c5a:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8006c5e:	3a01      	subs	r2, #1
 8006c60:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 8006c64:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c68:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c70:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe face 	bl	8005216 <move_window>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8006c80:	e023      	b.n	8006cca <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006c82:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11f      	bne.n	8006cca <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006c8a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006c8e:	330b      	adds	r3, #11
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <f_open+0x30e>
					res = FR_NO_FILE;
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8006ca0:	e013      	b.n	8006cca <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006ca2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ca6:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <f_open+0x336>
 8006cb4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006cb8:	330b      	adds	r3, #11
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <f_open+0x336>
						res = FR_DENIED;
 8006cc4:	2307      	movs	r3, #7
 8006cc6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8006cca:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d151      	bne.n	8006d76 <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006cd2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006cd6:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <f_open+0x368>
				mode |= FA__WRITTEN;
 8006ce4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ce8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006cec:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006cf0:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	f042 0220 	orr.w	r2, r2, #32
 8006cfa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006cfc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d00:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006d08:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8006d0c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d10:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8006d1a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d1e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8006d28:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d2c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d30:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	bf8c      	ite	hi
 8006d3a:	2301      	movhi	r3, #1
 8006d3c:	2300      	movls	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	f107 0320 	add.w	r3, r7, #32
 8006d46:	4611      	mov	r1, r2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe f8f7 	bl	8004f3c <inc_lock>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d54:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006d5e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d62:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <f_open+0x3e2>
 8006d70:	2302      	movs	r3, #2
 8006d72:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006d76:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d178      	bne.n	8006e70 <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 8006d7e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d82:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006d8c:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8006d90:	7812      	ldrb	r2, [r2, #0]
 8006d92:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 8006d96:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d9a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006da6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006daa:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006dae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006db2:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fff0 	bl	8005d9c <ld_clust>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006dc2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006dcc:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006dd0:	331f      	adds	r3, #31
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	061a      	lsls	r2, r3, #24
 8006dd6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006dda:	331e      	adds	r3, #30
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	431a      	orrs	r2, r3
 8006de2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8006de6:	331d      	adds	r3, #29
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8006df2:	321c      	adds	r2, #28
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006dfc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 8006e06:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e0a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8006e16:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e1a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006e26:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e2a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006e36:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e3a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8006e3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006e42:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e46:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8006e50:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e54:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006e5e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8006e62:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e66:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8006e70:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b08a      	sub	sp, #40	@ 0x28
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff fd00 	bl	800689c <validate>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <f_write+0x2c>
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	e192      	b.n	80071d0 <f_write+0x352>
	if (fp->err)							/* Check error */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8006eba:	e189      	b.n	80071d0 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006eca:	2307      	movs	r3, #7
 8006ecc:	e180      	b.n	80071d0 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f080 8158 	bcs.w	8007194 <f_write+0x316>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006ee8:	e154      	b.n	8007194 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 8114 	bne.w	8007122 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006f00:	0a5b      	lsrs	r3, r3, #9
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006f0a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4013      	ands	r3, r2
 8006f14:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006f16:	7dbb      	ldrb	r3, [r7, #22]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d151      	bne.n	8006fc0 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10f      	bne.n	8006f46 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d121      	bne.n	8006f78 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe fc87 	bl	8005850 <create_chain>
 8006f42:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f44:	e018      	b.n	8006f78 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006f56:	4619      	mov	r1, r3
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7fe fd16 	bl	800598a <clmt_clust>
 8006f5e:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f60:	e00a      	b.n	8006f78 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	f7fe fc6d 	bl	8005850 <create_chain>
 8006f76:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 810f 	beq.w	800719e <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d105      	bne.n	8006f92 <f_write+0x114>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e11e      	b.n	80071d0 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d105      	bne.n	8006fa6 <f_write+0x128>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e114      	b.n	80071d0 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006faa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <f_write+0x142>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fbc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01d      	beq.n	800700a <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006fd4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8006fd8:	68f9      	ldr	r1, [r7, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f7fd fe65 	bl	8004cb0 <disk_write>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e0eb      	b.n	80071d0 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007002:	b2da      	uxtb	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f7fe f9d7 	bl	80053cc <clust2sect>
 800701e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <f_write+0x1b4>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800702e:	2302      	movs	r3, #2
 8007030:	e0ce      	b.n	80071d0 <f_write+0x352>
			sect += csect;
 8007032:	7dbb      	ldrb	r3, [r7, #22]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4413      	add	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	0a5b      	lsrs	r3, r3, #9
 800703e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d048      	beq.n	80070d8 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007046:	7dba      	ldrb	r2, [r7, #22]
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	4413      	add	r3, r2
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8007052:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007056:	4293      	cmp	r3, r2
 8007058:	d908      	bls.n	800706c <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007060:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007064:	461a      	mov	r2, r3
 8007066:	7dbb      	ldrb	r3, [r7, #22]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007072:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	69b9      	ldr	r1, [r7, #24]
 800707c:	f7fd fe18 	bl	8004cb0 <disk_write>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800708e:	2301      	movs	r3, #1
 8007090:	e09e      	b.n	80071d0 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d916      	bls.n	80070d0 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	025b      	lsls	r3, r3, #9
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	4413      	add	r3, r2
 80070b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070b8:	4619      	mov	r1, r3
 80070ba:	f7fd fe37 	bl	8004d2c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80070c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	025b      	lsls	r3, r3, #9
 80070d4:	623b      	str	r3, [r7, #32]
				continue;
 80070d6:	e047      	b.n	8007168 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d01a      	beq.n	800711a <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d212      	bcs.n	800711a <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80070fa:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	2301      	movs	r3, #1
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	f7fd fdb4 	bl	8004c70 <disk_read>
 8007108:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007116:	2301      	movs	r3, #1
 8007118:	e05a      	b.n	80071d0 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007130:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007132:	6a3a      	ldr	r2, [r7, #32]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d901      	bls.n	800713e <f_write+0x2c0>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	6a3a      	ldr	r2, [r7, #32]
 800714e:	69b9      	ldr	r1, [r7, #24]
 8007150:	4618      	mov	r0, r3
 8007152:	f7fd fdeb 	bl	8004d2c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800715c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007160:	b2da      	uxtb	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	4413      	add	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	441a      	add	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	441a      	add	r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f47f aea7 	bne.w	8006eea <f_write+0x6c>
 800719c:	e000      	b.n	80071a0 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800719e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d905      	bls.n	80071bc <f_write+0x33e>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80071c2:	f043 0320 	orr.w	r3, r3, #32
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3728      	adds	r7, #40	@ 0x28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff fb5b 	bl	800689c <validate>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 80a8 	bne.w	8007342 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a0 	beq.w	8007342 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d019      	beq.n	8007244 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007216:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007222:	2301      	movs	r3, #1
 8007224:	f7fd fd44 	bl	8004cb0 <disk_write>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800722e:	2301      	movs	r3, #1
 8007230:	e088      	b.n	8007344 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800723c:	b2da      	uxtb	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f7fd ffdf 	bl	8005216 <move_window>
 8007258:	4603      	mov	r3, r0
 800725a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d16f      	bne.n	8007342 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8007268:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	330b      	adds	r3, #11
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	330b      	adds	r3, #11
 8007274:	f042 0220 	orr.w	r2, r2, #32
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	331c      	adds	r3, #28
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007290:	b29b      	uxth	r3, r3
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b29a      	uxth	r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	331d      	adds	r3, #29
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80072a4:	0c1a      	lsrs	r2, r3, #16
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	331e      	adds	r3, #30
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80072b4:	0e1a      	lsrs	r2, r3, #24
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	331f      	adds	r3, #31
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80072c4:	4619      	mov	r1, r3
 80072c6:	6938      	ldr	r0, [r7, #16]
 80072c8:	f7fe fd95 	bl	8005df6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80072cc:	f7fd fc38 	bl	8004b40 <get_fattime>
 80072d0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3316      	adds	r3, #22
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3317      	adds	r3, #23
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	0c1a      	lsrs	r2, r3, #16
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	3318      	adds	r3, #24
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	0e1a      	lsrs	r2, r3, #24
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3319      	adds	r3, #25
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	3312      	adds	r3, #18
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	3313      	adds	r3, #19
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800731a:	f023 0320 	bic.w	r3, r3, #32
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007338:	4618      	mov	r0, r3
 800733a:	f7fd ff9a 	bl	8005272 <sync_fs>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007342:	7dfb      	ldrb	r3, [r7, #23]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff ff3f 	bl	80071d8 <f_sync>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d116      	bne.n	8007392 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fa99 	bl	800689c <validate>
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10e      	bne.n	8007392 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd fe94 	bl	80050a8 <dec_lock>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80073b2:	4b1e      	ldr	r3, [pc, #120]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073b4:	7a5b      	ldrb	r3, [r3, #9]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d831      	bhi.n	8007420 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073bc:	4b1b      	ldr	r3, [pc, #108]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073be:	7a5b      	ldrb	r3, [r3, #9]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	4b19      	ldr	r3, [pc, #100]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073c6:	2100      	movs	r1, #0
 80073c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80073ca:	4b18      	ldr	r3, [pc, #96]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073cc:	7a5b      	ldrb	r3, [r3, #9]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	4a16      	ldr	r2, [pc, #88]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80073da:	4b14      	ldr	r3, [pc, #80]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073dc:	7a5b      	ldrb	r3, [r3, #9]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	4b12      	ldr	r3, [pc, #72]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073e4:	4413      	add	r3, r2
 80073e6:	79fa      	ldrb	r2, [r7, #7]
 80073e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80073ea:	4b10      	ldr	r3, [pc, #64]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073ec:	7a5b      	ldrb	r3, [r3, #9]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	b2d1      	uxtb	r1, r2
 80073f4:	4a0d      	ldr	r2, [pc, #52]	@ (800742c <FATFS_LinkDriverEx+0x90>)
 80073f6:	7251      	strb	r1, [r2, #9]
 80073f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80073fa:	7dbb      	ldrb	r3, [r7, #22]
 80073fc:	3330      	adds	r3, #48	@ 0x30
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	3301      	adds	r3, #1
 8007408:	223a      	movs	r2, #58	@ 0x3a
 800740a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	3302      	adds	r3, #2
 8007410:	222f      	movs	r2, #47	@ 0x2f
 8007412:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	3303      	adds	r3, #3
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
}
 8007422:	4618      	mov	r0, r3
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	bc80      	pop	{r7}
 800742a:	4770      	bx	lr
 800742c:	2000064c 	.word	0x2000064c

08007430 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800743a:	2200      	movs	r2, #0
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff ffac 	bl	800739c <FATFS_LinkDriverEx>
 8007444:	4603      	mov	r3, r0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <malloc>:
 8007450:	4b02      	ldr	r3, [pc, #8]	@ (800745c <malloc+0xc>)
 8007452:	4601      	mov	r1, r0
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	f000 b825 	b.w	80074a4 <_malloc_r>
 800745a:	bf00      	nop
 800745c:	2000002c 	.word	0x2000002c

08007460 <sbrk_aligned>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4e0f      	ldr	r6, [pc, #60]	@ (80074a0 <sbrk_aligned+0x40>)
 8007464:	460c      	mov	r4, r1
 8007466:	6831      	ldr	r1, [r6, #0]
 8007468:	4605      	mov	r5, r0
 800746a:	b911      	cbnz	r1, 8007472 <sbrk_aligned+0x12>
 800746c:	f000 ff4c 	bl	8008308 <_sbrk_r>
 8007470:	6030      	str	r0, [r6, #0]
 8007472:	4621      	mov	r1, r4
 8007474:	4628      	mov	r0, r5
 8007476:	f000 ff47 	bl	8008308 <_sbrk_r>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	d103      	bne.n	8007486 <sbrk_aligned+0x26>
 800747e:	f04f 34ff 	mov.w	r4, #4294967295
 8007482:	4620      	mov	r0, r4
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	1cc4      	adds	r4, r0, #3
 8007488:	f024 0403 	bic.w	r4, r4, #3
 800748c:	42a0      	cmp	r0, r4
 800748e:	d0f8      	beq.n	8007482 <sbrk_aligned+0x22>
 8007490:	1a21      	subs	r1, r4, r0
 8007492:	4628      	mov	r0, r5
 8007494:	f000 ff38 	bl	8008308 <_sbrk_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d1f2      	bne.n	8007482 <sbrk_aligned+0x22>
 800749c:	e7ef      	b.n	800747e <sbrk_aligned+0x1e>
 800749e:	bf00      	nop
 80074a0:	20000658 	.word	0x20000658

080074a4 <_malloc_r>:
 80074a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a8:	1ccd      	adds	r5, r1, #3
 80074aa:	f025 0503 	bic.w	r5, r5, #3
 80074ae:	3508      	adds	r5, #8
 80074b0:	2d0c      	cmp	r5, #12
 80074b2:	bf38      	it	cc
 80074b4:	250c      	movcc	r5, #12
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	4606      	mov	r6, r0
 80074ba:	db01      	blt.n	80074c0 <_malloc_r+0x1c>
 80074bc:	42a9      	cmp	r1, r5
 80074be:	d904      	bls.n	80074ca <_malloc_r+0x26>
 80074c0:	230c      	movs	r3, #12
 80074c2:	6033      	str	r3, [r6, #0]
 80074c4:	2000      	movs	r0, #0
 80074c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075a0 <_malloc_r+0xfc>
 80074ce:	f000 f869 	bl	80075a4 <__malloc_lock>
 80074d2:	f8d8 3000 	ldr.w	r3, [r8]
 80074d6:	461c      	mov	r4, r3
 80074d8:	bb44      	cbnz	r4, 800752c <_malloc_r+0x88>
 80074da:	4629      	mov	r1, r5
 80074dc:	4630      	mov	r0, r6
 80074de:	f7ff ffbf 	bl	8007460 <sbrk_aligned>
 80074e2:	1c43      	adds	r3, r0, #1
 80074e4:	4604      	mov	r4, r0
 80074e6:	d158      	bne.n	800759a <_malloc_r+0xf6>
 80074e8:	f8d8 4000 	ldr.w	r4, [r8]
 80074ec:	4627      	mov	r7, r4
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	d143      	bne.n	800757a <_malloc_r+0xd6>
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	d04b      	beq.n	800758e <_malloc_r+0xea>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	4639      	mov	r1, r7
 80074fa:	4630      	mov	r0, r6
 80074fc:	eb04 0903 	add.w	r9, r4, r3
 8007500:	f000 ff02 	bl	8008308 <_sbrk_r>
 8007504:	4581      	cmp	r9, r0
 8007506:	d142      	bne.n	800758e <_malloc_r+0xea>
 8007508:	6821      	ldr	r1, [r4, #0]
 800750a:	4630      	mov	r0, r6
 800750c:	1a6d      	subs	r5, r5, r1
 800750e:	4629      	mov	r1, r5
 8007510:	f7ff ffa6 	bl	8007460 <sbrk_aligned>
 8007514:	3001      	adds	r0, #1
 8007516:	d03a      	beq.n	800758e <_malloc_r+0xea>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	442b      	add	r3, r5
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	f8d8 3000 	ldr.w	r3, [r8]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	bb62      	cbnz	r2, 8007580 <_malloc_r+0xdc>
 8007526:	f8c8 7000 	str.w	r7, [r8]
 800752a:	e00f      	b.n	800754c <_malloc_r+0xa8>
 800752c:	6822      	ldr	r2, [r4, #0]
 800752e:	1b52      	subs	r2, r2, r5
 8007530:	d420      	bmi.n	8007574 <_malloc_r+0xd0>
 8007532:	2a0b      	cmp	r2, #11
 8007534:	d917      	bls.n	8007566 <_malloc_r+0xc2>
 8007536:	1961      	adds	r1, r4, r5
 8007538:	42a3      	cmp	r3, r4
 800753a:	6025      	str	r5, [r4, #0]
 800753c:	bf18      	it	ne
 800753e:	6059      	strne	r1, [r3, #4]
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	bf08      	it	eq
 8007544:	f8c8 1000 	streq.w	r1, [r8]
 8007548:	5162      	str	r2, [r4, r5]
 800754a:	604b      	str	r3, [r1, #4]
 800754c:	4630      	mov	r0, r6
 800754e:	f000 f82f 	bl	80075b0 <__malloc_unlock>
 8007552:	f104 000b 	add.w	r0, r4, #11
 8007556:	1d23      	adds	r3, r4, #4
 8007558:	f020 0007 	bic.w	r0, r0, #7
 800755c:	1ac2      	subs	r2, r0, r3
 800755e:	bf1c      	itt	ne
 8007560:	1a1b      	subne	r3, r3, r0
 8007562:	50a3      	strne	r3, [r4, r2]
 8007564:	e7af      	b.n	80074c6 <_malloc_r+0x22>
 8007566:	6862      	ldr	r2, [r4, #4]
 8007568:	42a3      	cmp	r3, r4
 800756a:	bf0c      	ite	eq
 800756c:	f8c8 2000 	streq.w	r2, [r8]
 8007570:	605a      	strne	r2, [r3, #4]
 8007572:	e7eb      	b.n	800754c <_malloc_r+0xa8>
 8007574:	4623      	mov	r3, r4
 8007576:	6864      	ldr	r4, [r4, #4]
 8007578:	e7ae      	b.n	80074d8 <_malloc_r+0x34>
 800757a:	463c      	mov	r4, r7
 800757c:	687f      	ldr	r7, [r7, #4]
 800757e:	e7b6      	b.n	80074ee <_malloc_r+0x4a>
 8007580:	461a      	mov	r2, r3
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	42a3      	cmp	r3, r4
 8007586:	d1fb      	bne.n	8007580 <_malloc_r+0xdc>
 8007588:	2300      	movs	r3, #0
 800758a:	6053      	str	r3, [r2, #4]
 800758c:	e7de      	b.n	800754c <_malloc_r+0xa8>
 800758e:	230c      	movs	r3, #12
 8007590:	4630      	mov	r0, r6
 8007592:	6033      	str	r3, [r6, #0]
 8007594:	f000 f80c 	bl	80075b0 <__malloc_unlock>
 8007598:	e794      	b.n	80074c4 <_malloc_r+0x20>
 800759a:	6005      	str	r5, [r0, #0]
 800759c:	e7d6      	b.n	800754c <_malloc_r+0xa8>
 800759e:	bf00      	nop
 80075a0:	2000065c 	.word	0x2000065c

080075a4 <__malloc_lock>:
 80075a4:	4801      	ldr	r0, [pc, #4]	@ (80075ac <__malloc_lock+0x8>)
 80075a6:	f000 befc 	b.w	80083a2 <__retarget_lock_acquire_recursive>
 80075aa:	bf00      	nop
 80075ac:	200007a0 	.word	0x200007a0

080075b0 <__malloc_unlock>:
 80075b0:	4801      	ldr	r0, [pc, #4]	@ (80075b8 <__malloc_unlock+0x8>)
 80075b2:	f000 bef7 	b.w	80083a4 <__retarget_lock_release_recursive>
 80075b6:	bf00      	nop
 80075b8:	200007a0 	.word	0x200007a0

080075bc <__cvt>:
 80075bc:	2b00      	cmp	r3, #0
 80075be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c2:	461d      	mov	r5, r3
 80075c4:	bfbb      	ittet	lt
 80075c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80075ca:	461d      	movlt	r5, r3
 80075cc:	2300      	movge	r3, #0
 80075ce:	232d      	movlt	r3, #45	@ 0x2d
 80075d0:	b088      	sub	sp, #32
 80075d2:	4614      	mov	r4, r2
 80075d4:	bfb8      	it	lt
 80075d6:	4614      	movlt	r4, r2
 80075d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80075da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80075dc:	7013      	strb	r3, [r2, #0]
 80075de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80075e4:	f023 0820 	bic.w	r8, r3, #32
 80075e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075ec:	d005      	beq.n	80075fa <__cvt+0x3e>
 80075ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075f2:	d100      	bne.n	80075f6 <__cvt+0x3a>
 80075f4:	3601      	adds	r6, #1
 80075f6:	2302      	movs	r3, #2
 80075f8:	e000      	b.n	80075fc <__cvt+0x40>
 80075fa:	2303      	movs	r3, #3
 80075fc:	aa07      	add	r2, sp, #28
 80075fe:	9204      	str	r2, [sp, #16]
 8007600:	aa06      	add	r2, sp, #24
 8007602:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007606:	e9cd 3600 	strd	r3, r6, [sp]
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	f000 ff8f 	bl	8008530 <_dtoa_r>
 8007612:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007616:	4607      	mov	r7, r0
 8007618:	d119      	bne.n	800764e <__cvt+0x92>
 800761a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800761c:	07db      	lsls	r3, r3, #31
 800761e:	d50e      	bpl.n	800763e <__cvt+0x82>
 8007620:	eb00 0906 	add.w	r9, r0, r6
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4620      	mov	r0, r4
 800762a:	4629      	mov	r1, r5
 800762c:	f7f9 f9bc 	bl	80009a8 <__aeabi_dcmpeq>
 8007630:	b108      	cbz	r0, 8007636 <__cvt+0x7a>
 8007632:	f8cd 901c 	str.w	r9, [sp, #28]
 8007636:	2230      	movs	r2, #48	@ 0x30
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	454b      	cmp	r3, r9
 800763c:	d31e      	bcc.n	800767c <__cvt+0xc0>
 800763e:	4638      	mov	r0, r7
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007644:	1bdb      	subs	r3, r3, r7
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	b008      	add	sp, #32
 800764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007652:	eb00 0906 	add.w	r9, r0, r6
 8007656:	d1e5      	bne.n	8007624 <__cvt+0x68>
 8007658:	7803      	ldrb	r3, [r0, #0]
 800765a:	2b30      	cmp	r3, #48	@ 0x30
 800765c:	d10a      	bne.n	8007674 <__cvt+0xb8>
 800765e:	2200      	movs	r2, #0
 8007660:	2300      	movs	r3, #0
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	f7f9 f99f 	bl	80009a8 <__aeabi_dcmpeq>
 800766a:	b918      	cbnz	r0, 8007674 <__cvt+0xb8>
 800766c:	f1c6 0601 	rsb	r6, r6, #1
 8007670:	f8ca 6000 	str.w	r6, [sl]
 8007674:	f8da 3000 	ldr.w	r3, [sl]
 8007678:	4499      	add	r9, r3
 800767a:	e7d3      	b.n	8007624 <__cvt+0x68>
 800767c:	1c59      	adds	r1, r3, #1
 800767e:	9107      	str	r1, [sp, #28]
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	e7d9      	b.n	8007638 <__cvt+0x7c>

08007684 <__exponent>:
 8007684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007686:	2900      	cmp	r1, #0
 8007688:	bfb6      	itet	lt
 800768a:	232d      	movlt	r3, #45	@ 0x2d
 800768c:	232b      	movge	r3, #43	@ 0x2b
 800768e:	4249      	neglt	r1, r1
 8007690:	2909      	cmp	r1, #9
 8007692:	7002      	strb	r2, [r0, #0]
 8007694:	7043      	strb	r3, [r0, #1]
 8007696:	dd29      	ble.n	80076ec <__exponent+0x68>
 8007698:	f10d 0307 	add.w	r3, sp, #7
 800769c:	461d      	mov	r5, r3
 800769e:	270a      	movs	r7, #10
 80076a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80076a4:	461a      	mov	r2, r3
 80076a6:	fb07 1416 	mls	r4, r7, r6, r1
 80076aa:	3430      	adds	r4, #48	@ 0x30
 80076ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076b0:	460c      	mov	r4, r1
 80076b2:	2c63      	cmp	r4, #99	@ 0x63
 80076b4:	4631      	mov	r1, r6
 80076b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80076ba:	dcf1      	bgt.n	80076a0 <__exponent+0x1c>
 80076bc:	3130      	adds	r1, #48	@ 0x30
 80076be:	1e94      	subs	r4, r2, #2
 80076c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076c4:	4623      	mov	r3, r4
 80076c6:	1c41      	adds	r1, r0, #1
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	d30a      	bcc.n	80076e2 <__exponent+0x5e>
 80076cc:	f10d 0309 	add.w	r3, sp, #9
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	42ac      	cmp	r4, r5
 80076d4:	bf88      	it	hi
 80076d6:	2300      	movhi	r3, #0
 80076d8:	3302      	adds	r3, #2
 80076da:	4403      	add	r3, r0
 80076dc:	1a18      	subs	r0, r3, r0
 80076de:	b003      	add	sp, #12
 80076e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076ea:	e7ed      	b.n	80076c8 <__exponent+0x44>
 80076ec:	2330      	movs	r3, #48	@ 0x30
 80076ee:	3130      	adds	r1, #48	@ 0x30
 80076f0:	7083      	strb	r3, [r0, #2]
 80076f2:	70c1      	strb	r1, [r0, #3]
 80076f4:	1d03      	adds	r3, r0, #4
 80076f6:	e7f1      	b.n	80076dc <__exponent+0x58>

080076f8 <_printf_float>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	b091      	sub	sp, #68	@ 0x44
 80076fe:	460c      	mov	r4, r1
 8007700:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007704:	4616      	mov	r6, r2
 8007706:	461f      	mov	r7, r3
 8007708:	4605      	mov	r5, r0
 800770a:	f000 fdc5 	bl	8008298 <_localeconv_r>
 800770e:	6803      	ldr	r3, [r0, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	9308      	str	r3, [sp, #32]
 8007714:	f7f8 fd1c 	bl	8000150 <strlen>
 8007718:	2300      	movs	r3, #0
 800771a:	930e      	str	r3, [sp, #56]	@ 0x38
 800771c:	f8d8 3000 	ldr.w	r3, [r8]
 8007720:	9009      	str	r0, [sp, #36]	@ 0x24
 8007722:	3307      	adds	r3, #7
 8007724:	f023 0307 	bic.w	r3, r3, #7
 8007728:	f103 0208 	add.w	r2, r3, #8
 800772c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007730:	f8d4 b000 	ldr.w	fp, [r4]
 8007734:	f8c8 2000 	str.w	r2, [r8]
 8007738:	e9d3 8900 	ldrd	r8, r9, [r3]
 800773c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007742:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007746:	f04f 32ff 	mov.w	r2, #4294967295
 800774a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800774e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007752:	4b9c      	ldr	r3, [pc, #624]	@ (80079c4 <_printf_float+0x2cc>)
 8007754:	f7f9 f95a 	bl	8000a0c <__aeabi_dcmpun>
 8007758:	bb70      	cbnz	r0, 80077b8 <_printf_float+0xc0>
 800775a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800775e:	f04f 32ff 	mov.w	r2, #4294967295
 8007762:	4b98      	ldr	r3, [pc, #608]	@ (80079c4 <_printf_float+0x2cc>)
 8007764:	f7f9 f934 	bl	80009d0 <__aeabi_dcmple>
 8007768:	bb30      	cbnz	r0, 80077b8 <_printf_float+0xc0>
 800776a:	2200      	movs	r2, #0
 800776c:	2300      	movs	r3, #0
 800776e:	4640      	mov	r0, r8
 8007770:	4649      	mov	r1, r9
 8007772:	f7f9 f923 	bl	80009bc <__aeabi_dcmplt>
 8007776:	b110      	cbz	r0, 800777e <_printf_float+0x86>
 8007778:	232d      	movs	r3, #45	@ 0x2d
 800777a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800777e:	4a92      	ldr	r2, [pc, #584]	@ (80079c8 <_printf_float+0x2d0>)
 8007780:	4b92      	ldr	r3, [pc, #584]	@ (80079cc <_printf_float+0x2d4>)
 8007782:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007786:	bf94      	ite	ls
 8007788:	4690      	movls	r8, r2
 800778a:	4698      	movhi	r8, r3
 800778c:	2303      	movs	r3, #3
 800778e:	f04f 0900 	mov.w	r9, #0
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	f02b 0304 	bic.w	r3, fp, #4
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	4633      	mov	r3, r6
 800779c:	4621      	mov	r1, r4
 800779e:	4628      	mov	r0, r5
 80077a0:	9700      	str	r7, [sp, #0]
 80077a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80077a4:	f000 f9d4 	bl	8007b50 <_printf_common>
 80077a8:	3001      	adds	r0, #1
 80077aa:	f040 8090 	bne.w	80078ce <_printf_float+0x1d6>
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295
 80077b2:	b011      	add	sp, #68	@ 0x44
 80077b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b8:	4642      	mov	r2, r8
 80077ba:	464b      	mov	r3, r9
 80077bc:	4640      	mov	r0, r8
 80077be:	4649      	mov	r1, r9
 80077c0:	f7f9 f924 	bl	8000a0c <__aeabi_dcmpun>
 80077c4:	b148      	cbz	r0, 80077da <_printf_float+0xe2>
 80077c6:	464b      	mov	r3, r9
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bfb8      	it	lt
 80077cc:	232d      	movlt	r3, #45	@ 0x2d
 80077ce:	4a80      	ldr	r2, [pc, #512]	@ (80079d0 <_printf_float+0x2d8>)
 80077d0:	bfb8      	it	lt
 80077d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077d6:	4b7f      	ldr	r3, [pc, #508]	@ (80079d4 <_printf_float+0x2dc>)
 80077d8:	e7d3      	b.n	8007782 <_printf_float+0x8a>
 80077da:	6863      	ldr	r3, [r4, #4]
 80077dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	d13f      	bne.n	8007864 <_printf_float+0x16c>
 80077e4:	2306      	movs	r3, #6
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80077ee:	6023      	str	r3, [r4, #0]
 80077f0:	9206      	str	r2, [sp, #24]
 80077f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80077f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80077f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80077fa:	9203      	str	r2, [sp, #12]
 80077fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007800:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	4642      	mov	r2, r8
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	4628      	mov	r0, r5
 800780c:	464b      	mov	r3, r9
 800780e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007810:	f7ff fed4 	bl	80075bc <__cvt>
 8007814:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007816:	4680      	mov	r8, r0
 8007818:	2947      	cmp	r1, #71	@ 0x47
 800781a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800781c:	d128      	bne.n	8007870 <_printf_float+0x178>
 800781e:	1cc8      	adds	r0, r1, #3
 8007820:	db02      	blt.n	8007828 <_printf_float+0x130>
 8007822:	6863      	ldr	r3, [r4, #4]
 8007824:	4299      	cmp	r1, r3
 8007826:	dd40      	ble.n	80078aa <_printf_float+0x1b2>
 8007828:	f1aa 0a02 	sub.w	sl, sl, #2
 800782c:	fa5f fa8a 	uxtb.w	sl, sl
 8007830:	4652      	mov	r2, sl
 8007832:	3901      	subs	r1, #1
 8007834:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007838:	910d      	str	r1, [sp, #52]	@ 0x34
 800783a:	f7ff ff23 	bl	8007684 <__exponent>
 800783e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007840:	4681      	mov	r9, r0
 8007842:	1813      	adds	r3, r2, r0
 8007844:	2a01      	cmp	r2, #1
 8007846:	6123      	str	r3, [r4, #16]
 8007848:	dc02      	bgt.n	8007850 <_printf_float+0x158>
 800784a:	6822      	ldr	r2, [r4, #0]
 800784c:	07d2      	lsls	r2, r2, #31
 800784e:	d501      	bpl.n	8007854 <_printf_float+0x15c>
 8007850:	3301      	adds	r3, #1
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007858:	2b00      	cmp	r3, #0
 800785a:	d09e      	beq.n	800779a <_printf_float+0xa2>
 800785c:	232d      	movs	r3, #45	@ 0x2d
 800785e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007862:	e79a      	b.n	800779a <_printf_float+0xa2>
 8007864:	2947      	cmp	r1, #71	@ 0x47
 8007866:	d1bf      	bne.n	80077e8 <_printf_float+0xf0>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1bd      	bne.n	80077e8 <_printf_float+0xf0>
 800786c:	2301      	movs	r3, #1
 800786e:	e7ba      	b.n	80077e6 <_printf_float+0xee>
 8007870:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007874:	d9dc      	bls.n	8007830 <_printf_float+0x138>
 8007876:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800787a:	d118      	bne.n	80078ae <_printf_float+0x1b6>
 800787c:	2900      	cmp	r1, #0
 800787e:	6863      	ldr	r3, [r4, #4]
 8007880:	dd0b      	ble.n	800789a <_printf_float+0x1a2>
 8007882:	6121      	str	r1, [r4, #16]
 8007884:	b913      	cbnz	r3, 800788c <_printf_float+0x194>
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	07d0      	lsls	r0, r2, #31
 800788a:	d502      	bpl.n	8007892 <_printf_float+0x19a>
 800788c:	3301      	adds	r3, #1
 800788e:	440b      	add	r3, r1
 8007890:	6123      	str	r3, [r4, #16]
 8007892:	f04f 0900 	mov.w	r9, #0
 8007896:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007898:	e7dc      	b.n	8007854 <_printf_float+0x15c>
 800789a:	b913      	cbnz	r3, 80078a2 <_printf_float+0x1aa>
 800789c:	6822      	ldr	r2, [r4, #0]
 800789e:	07d2      	lsls	r2, r2, #31
 80078a0:	d501      	bpl.n	80078a6 <_printf_float+0x1ae>
 80078a2:	3302      	adds	r3, #2
 80078a4:	e7f4      	b.n	8007890 <_printf_float+0x198>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e7f2      	b.n	8007890 <_printf_float+0x198>
 80078aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078b0:	4299      	cmp	r1, r3
 80078b2:	db05      	blt.n	80078c0 <_printf_float+0x1c8>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	6121      	str	r1, [r4, #16]
 80078b8:	07d8      	lsls	r0, r3, #31
 80078ba:	d5ea      	bpl.n	8007892 <_printf_float+0x19a>
 80078bc:	1c4b      	adds	r3, r1, #1
 80078be:	e7e7      	b.n	8007890 <_printf_float+0x198>
 80078c0:	2900      	cmp	r1, #0
 80078c2:	bfcc      	ite	gt
 80078c4:	2201      	movgt	r2, #1
 80078c6:	f1c1 0202 	rsble	r2, r1, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	e7e0      	b.n	8007890 <_printf_float+0x198>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	055a      	lsls	r2, r3, #21
 80078d2:	d407      	bmi.n	80078e4 <_printf_float+0x1ec>
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	4642      	mov	r2, r8
 80078d8:	4631      	mov	r1, r6
 80078da:	4628      	mov	r0, r5
 80078dc:	47b8      	blx	r7
 80078de:	3001      	adds	r0, #1
 80078e0:	d12b      	bne.n	800793a <_printf_float+0x242>
 80078e2:	e764      	b.n	80077ae <_printf_float+0xb6>
 80078e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078e8:	f240 80dc 	bls.w	8007aa4 <_printf_float+0x3ac>
 80078ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078f0:	2200      	movs	r2, #0
 80078f2:	2300      	movs	r3, #0
 80078f4:	f7f9 f858 	bl	80009a8 <__aeabi_dcmpeq>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d033      	beq.n	8007964 <_printf_float+0x26c>
 80078fc:	2301      	movs	r3, #1
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	4a35      	ldr	r2, [pc, #212]	@ (80079d8 <_printf_float+0x2e0>)
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	f43f af51 	beq.w	80077ae <_printf_float+0xb6>
 800790c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007910:	4543      	cmp	r3, r8
 8007912:	db02      	blt.n	800791a <_printf_float+0x222>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	07d8      	lsls	r0, r3, #31
 8007918:	d50f      	bpl.n	800793a <_printf_float+0x242>
 800791a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	f43f af42 	beq.w	80077ae <_printf_float+0xb6>
 800792a:	f04f 0900 	mov.w	r9, #0
 800792e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007932:	f104 0a1a 	add.w	sl, r4, #26
 8007936:	45c8      	cmp	r8, r9
 8007938:	dc09      	bgt.n	800794e <_printf_float+0x256>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	079b      	lsls	r3, r3, #30
 800793e:	f100 8102 	bmi.w	8007b46 <_printf_float+0x44e>
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007946:	4298      	cmp	r0, r3
 8007948:	bfb8      	it	lt
 800794a:	4618      	movlt	r0, r3
 800794c:	e731      	b.n	80077b2 <_printf_float+0xba>
 800794e:	2301      	movs	r3, #1
 8007950:	4652      	mov	r2, sl
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	f43f af28 	beq.w	80077ae <_printf_float+0xb6>
 800795e:	f109 0901 	add.w	r9, r9, #1
 8007962:	e7e8      	b.n	8007936 <_printf_float+0x23e>
 8007964:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007966:	2b00      	cmp	r3, #0
 8007968:	dc38      	bgt.n	80079dc <_printf_float+0x2e4>
 800796a:	2301      	movs	r3, #1
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	4a19      	ldr	r2, [pc, #100]	@ (80079d8 <_printf_float+0x2e0>)
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f af1a 	beq.w	80077ae <_printf_float+0xb6>
 800797a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800797e:	ea59 0303 	orrs.w	r3, r9, r3
 8007982:	d102      	bne.n	800798a <_printf_float+0x292>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	07d9      	lsls	r1, r3, #31
 8007988:	d5d7      	bpl.n	800793a <_printf_float+0x242>
 800798a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	f43f af0a 	beq.w	80077ae <_printf_float+0xb6>
 800799a:	f04f 0a00 	mov.w	sl, #0
 800799e:	f104 0b1a 	add.w	fp, r4, #26
 80079a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079a4:	425b      	negs	r3, r3
 80079a6:	4553      	cmp	r3, sl
 80079a8:	dc01      	bgt.n	80079ae <_printf_float+0x2b6>
 80079aa:	464b      	mov	r3, r9
 80079ac:	e793      	b.n	80078d6 <_printf_float+0x1de>
 80079ae:	2301      	movs	r3, #1
 80079b0:	465a      	mov	r2, fp
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	f43f aef8 	beq.w	80077ae <_printf_float+0xb6>
 80079be:	f10a 0a01 	add.w	sl, sl, #1
 80079c2:	e7ee      	b.n	80079a2 <_printf_float+0x2aa>
 80079c4:	7fefffff 	.word	0x7fefffff
 80079c8:	0800a528 	.word	0x0800a528
 80079cc:	0800a52c 	.word	0x0800a52c
 80079d0:	0800a530 	.word	0x0800a530
 80079d4:	0800a534 	.word	0x0800a534
 80079d8:	0800a538 	.word	0x0800a538
 80079dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80079e2:	4553      	cmp	r3, sl
 80079e4:	bfa8      	it	ge
 80079e6:	4653      	movge	r3, sl
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	4699      	mov	r9, r3
 80079ec:	dc36      	bgt.n	8007a5c <_printf_float+0x364>
 80079ee:	f04f 0b00 	mov.w	fp, #0
 80079f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079f6:	f104 021a 	add.w	r2, r4, #26
 80079fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80079fe:	eba3 0309 	sub.w	r3, r3, r9
 8007a02:	455b      	cmp	r3, fp
 8007a04:	dc31      	bgt.n	8007a6a <_printf_float+0x372>
 8007a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a08:	459a      	cmp	sl, r3
 8007a0a:	dc3a      	bgt.n	8007a82 <_printf_float+0x38a>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	07da      	lsls	r2, r3, #31
 8007a10:	d437      	bmi.n	8007a82 <_printf_float+0x38a>
 8007a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a14:	ebaa 0903 	sub.w	r9, sl, r3
 8007a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a1a:	ebaa 0303 	sub.w	r3, sl, r3
 8007a1e:	4599      	cmp	r9, r3
 8007a20:	bfa8      	it	ge
 8007a22:	4699      	movge	r9, r3
 8007a24:	f1b9 0f00 	cmp.w	r9, #0
 8007a28:	dc33      	bgt.n	8007a92 <_printf_float+0x39a>
 8007a2a:	f04f 0800 	mov.w	r8, #0
 8007a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a32:	f104 0b1a 	add.w	fp, r4, #26
 8007a36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a38:	ebaa 0303 	sub.w	r3, sl, r3
 8007a3c:	eba3 0309 	sub.w	r3, r3, r9
 8007a40:	4543      	cmp	r3, r8
 8007a42:	f77f af7a 	ble.w	800793a <_printf_float+0x242>
 8007a46:	2301      	movs	r3, #1
 8007a48:	465a      	mov	r2, fp
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	47b8      	blx	r7
 8007a50:	3001      	adds	r0, #1
 8007a52:	f43f aeac 	beq.w	80077ae <_printf_float+0xb6>
 8007a56:	f108 0801 	add.w	r8, r8, #1
 8007a5a:	e7ec      	b.n	8007a36 <_printf_float+0x33e>
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b8      	blx	r7
 8007a64:	3001      	adds	r0, #1
 8007a66:	d1c2      	bne.n	80079ee <_printf_float+0x2f6>
 8007a68:	e6a1      	b.n	80077ae <_printf_float+0xb6>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	920a      	str	r2, [sp, #40]	@ 0x28
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	f43f ae9a 	beq.w	80077ae <_printf_float+0xb6>
 8007a7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a7c:	f10b 0b01 	add.w	fp, fp, #1
 8007a80:	e7bb      	b.n	80079fa <_printf_float+0x302>
 8007a82:	4631      	mov	r1, r6
 8007a84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b8      	blx	r7
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d1c0      	bne.n	8007a12 <_printf_float+0x31a>
 8007a90:	e68d      	b.n	80077ae <_printf_float+0xb6>
 8007a92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a94:	464b      	mov	r3, r9
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	4442      	add	r2, r8
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d1c3      	bne.n	8007a2a <_printf_float+0x332>
 8007aa2:	e684      	b.n	80077ae <_printf_float+0xb6>
 8007aa4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007aa8:	f1ba 0f01 	cmp.w	sl, #1
 8007aac:	dc01      	bgt.n	8007ab2 <_printf_float+0x3ba>
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d536      	bpl.n	8007b20 <_printf_float+0x428>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4642      	mov	r2, r8
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f ae76 	beq.w	80077ae <_printf_float+0xb6>
 8007ac2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	f43f ae6e 	beq.w	80077ae <_printf_float+0xb6>
 8007ad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ade:	f7f8 ff63 	bl	80009a8 <__aeabi_dcmpeq>
 8007ae2:	b9c0      	cbnz	r0, 8007b16 <_printf_float+0x41e>
 8007ae4:	4653      	mov	r3, sl
 8007ae6:	f108 0201 	add.w	r2, r8, #1
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	d10c      	bne.n	8007b0e <_printf_float+0x416>
 8007af4:	e65b      	b.n	80077ae <_printf_float+0xb6>
 8007af6:	2301      	movs	r3, #1
 8007af8:	465a      	mov	r2, fp
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	f43f ae54 	beq.w	80077ae <_printf_float+0xb6>
 8007b06:	f108 0801 	add.w	r8, r8, #1
 8007b0a:	45d0      	cmp	r8, sl
 8007b0c:	dbf3      	blt.n	8007af6 <_printf_float+0x3fe>
 8007b0e:	464b      	mov	r3, r9
 8007b10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b14:	e6e0      	b.n	80078d8 <_printf_float+0x1e0>
 8007b16:	f04f 0800 	mov.w	r8, #0
 8007b1a:	f104 0b1a 	add.w	fp, r4, #26
 8007b1e:	e7f4      	b.n	8007b0a <_printf_float+0x412>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4642      	mov	r2, r8
 8007b24:	e7e1      	b.n	8007aea <_printf_float+0x3f2>
 8007b26:	2301      	movs	r3, #1
 8007b28:	464a      	mov	r2, r9
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b8      	blx	r7
 8007b30:	3001      	adds	r0, #1
 8007b32:	f43f ae3c 	beq.w	80077ae <_printf_float+0xb6>
 8007b36:	f108 0801 	add.w	r8, r8, #1
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b3e:	1a5b      	subs	r3, r3, r1
 8007b40:	4543      	cmp	r3, r8
 8007b42:	dcf0      	bgt.n	8007b26 <_printf_float+0x42e>
 8007b44:	e6fd      	b.n	8007942 <_printf_float+0x24a>
 8007b46:	f04f 0800 	mov.w	r8, #0
 8007b4a:	f104 0919 	add.w	r9, r4, #25
 8007b4e:	e7f4      	b.n	8007b3a <_printf_float+0x442>

08007b50 <_printf_common>:
 8007b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	4616      	mov	r6, r2
 8007b56:	4698      	mov	r8, r3
 8007b58:	688a      	ldr	r2, [r1, #8]
 8007b5a:	690b      	ldr	r3, [r1, #16]
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	bfb8      	it	lt
 8007b62:	4613      	movlt	r3, r2
 8007b64:	6033      	str	r3, [r6, #0]
 8007b66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b70:	b10a      	cbz	r2, 8007b76 <_printf_common+0x26>
 8007b72:	3301      	adds	r3, #1
 8007b74:	6033      	str	r3, [r6, #0]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	0699      	lsls	r1, r3, #26
 8007b7a:	bf42      	ittt	mi
 8007b7c:	6833      	ldrmi	r3, [r6, #0]
 8007b7e:	3302      	addmi	r3, #2
 8007b80:	6033      	strmi	r3, [r6, #0]
 8007b82:	6825      	ldr	r5, [r4, #0]
 8007b84:	f015 0506 	ands.w	r5, r5, #6
 8007b88:	d106      	bne.n	8007b98 <_printf_common+0x48>
 8007b8a:	f104 0a19 	add.w	sl, r4, #25
 8007b8e:	68e3      	ldr	r3, [r4, #12]
 8007b90:	6832      	ldr	r2, [r6, #0]
 8007b92:	1a9b      	subs	r3, r3, r2
 8007b94:	42ab      	cmp	r3, r5
 8007b96:	dc2b      	bgt.n	8007bf0 <_printf_common+0xa0>
 8007b98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	3b00      	subs	r3, #0
 8007ba0:	bf18      	it	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	0692      	lsls	r2, r2, #26
 8007ba6:	d430      	bmi.n	8007c0a <_printf_common+0xba>
 8007ba8:	4641      	mov	r1, r8
 8007baa:	4638      	mov	r0, r7
 8007bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bb0:	47c8      	blx	r9
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d023      	beq.n	8007bfe <_printf_common+0xae>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	6922      	ldr	r2, [r4, #16]
 8007bba:	f003 0306 	and.w	r3, r3, #6
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	bf14      	ite	ne
 8007bc2:	2500      	movne	r5, #0
 8007bc4:	6833      	ldreq	r3, [r6, #0]
 8007bc6:	f04f 0600 	mov.w	r6, #0
 8007bca:	bf08      	it	eq
 8007bcc:	68e5      	ldreq	r5, [r4, #12]
 8007bce:	f104 041a 	add.w	r4, r4, #26
 8007bd2:	bf08      	it	eq
 8007bd4:	1aed      	subeq	r5, r5, r3
 8007bd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007bda:	bf08      	it	eq
 8007bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be0:	4293      	cmp	r3, r2
 8007be2:	bfc4      	itt	gt
 8007be4:	1a9b      	subgt	r3, r3, r2
 8007be6:	18ed      	addgt	r5, r5, r3
 8007be8:	42b5      	cmp	r5, r6
 8007bea:	d11a      	bne.n	8007c22 <_printf_common+0xd2>
 8007bec:	2000      	movs	r0, #0
 8007bee:	e008      	b.n	8007c02 <_printf_common+0xb2>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c8      	blx	r9
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d103      	bne.n	8007c06 <_printf_common+0xb6>
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c06:	3501      	adds	r5, #1
 8007c08:	e7c1      	b.n	8007b8e <_printf_common+0x3e>
 8007c0a:	2030      	movs	r0, #48	@ 0x30
 8007c0c:	18e1      	adds	r1, r4, r3
 8007c0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c18:	4422      	add	r2, r4
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c20:	e7c2      	b.n	8007ba8 <_printf_common+0x58>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4622      	mov	r2, r4
 8007c26:	4641      	mov	r1, r8
 8007c28:	4638      	mov	r0, r7
 8007c2a:	47c8      	blx	r9
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d0e6      	beq.n	8007bfe <_printf_common+0xae>
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7d9      	b.n	8007be8 <_printf_common+0x98>

08007c34 <_printf_i>:
 8007c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	7e0f      	ldrb	r7, [r1, #24]
 8007c3a:	4691      	mov	r9, r2
 8007c3c:	2f78      	cmp	r7, #120	@ 0x78
 8007c3e:	4680      	mov	r8, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	469a      	mov	sl, r3
 8007c44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c4a:	d807      	bhi.n	8007c5c <_printf_i+0x28>
 8007c4c:	2f62      	cmp	r7, #98	@ 0x62
 8007c4e:	d80a      	bhi.n	8007c66 <_printf_i+0x32>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	f000 80d3 	beq.w	8007dfc <_printf_i+0x1c8>
 8007c56:	2f58      	cmp	r7, #88	@ 0x58
 8007c58:	f000 80ba 	beq.w	8007dd0 <_printf_i+0x19c>
 8007c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c64:	e03a      	b.n	8007cdc <_printf_i+0xa8>
 8007c66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c6a:	2b15      	cmp	r3, #21
 8007c6c:	d8f6      	bhi.n	8007c5c <_printf_i+0x28>
 8007c6e:	a101      	add	r1, pc, #4	@ (adr r1, 8007c74 <_printf_i+0x40>)
 8007c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c74:	08007ccd 	.word	0x08007ccd
 8007c78:	08007ce1 	.word	0x08007ce1
 8007c7c:	08007c5d 	.word	0x08007c5d
 8007c80:	08007c5d 	.word	0x08007c5d
 8007c84:	08007c5d 	.word	0x08007c5d
 8007c88:	08007c5d 	.word	0x08007c5d
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007c5d 	.word	0x08007c5d
 8007c94:	08007c5d 	.word	0x08007c5d
 8007c98:	08007c5d 	.word	0x08007c5d
 8007c9c:	08007c5d 	.word	0x08007c5d
 8007ca0:	08007de3 	.word	0x08007de3
 8007ca4:	08007d0b 	.word	0x08007d0b
 8007ca8:	08007d9d 	.word	0x08007d9d
 8007cac:	08007c5d 	.word	0x08007c5d
 8007cb0:	08007c5d 	.word	0x08007c5d
 8007cb4:	08007e05 	.word	0x08007e05
 8007cb8:	08007c5d 	.word	0x08007c5d
 8007cbc:	08007d0b 	.word	0x08007d0b
 8007cc0:	08007c5d 	.word	0x08007c5d
 8007cc4:	08007c5d 	.word	0x08007c5d
 8007cc8:	08007da5 	.word	0x08007da5
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6032      	str	r2, [r6, #0]
 8007cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e09e      	b.n	8007e1e <_printf_i+0x1ea>
 8007ce0:	6833      	ldr	r3, [r6, #0]
 8007ce2:	6820      	ldr	r0, [r4, #0]
 8007ce4:	1d19      	adds	r1, r3, #4
 8007ce6:	6031      	str	r1, [r6, #0]
 8007ce8:	0606      	lsls	r6, r0, #24
 8007cea:	d501      	bpl.n	8007cf0 <_printf_i+0xbc>
 8007cec:	681d      	ldr	r5, [r3, #0]
 8007cee:	e003      	b.n	8007cf8 <_printf_i+0xc4>
 8007cf0:	0645      	lsls	r5, r0, #25
 8007cf2:	d5fb      	bpl.n	8007cec <_printf_i+0xb8>
 8007cf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	da03      	bge.n	8007d04 <_printf_i+0xd0>
 8007cfc:	232d      	movs	r3, #45	@ 0x2d
 8007cfe:	426d      	negs	r5, r5
 8007d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d04:	230a      	movs	r3, #10
 8007d06:	4859      	ldr	r0, [pc, #356]	@ (8007e6c <_printf_i+0x238>)
 8007d08:	e011      	b.n	8007d2e <_printf_i+0xfa>
 8007d0a:	6821      	ldr	r1, [r4, #0]
 8007d0c:	6833      	ldr	r3, [r6, #0]
 8007d0e:	0608      	lsls	r0, r1, #24
 8007d10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d14:	d402      	bmi.n	8007d1c <_printf_i+0xe8>
 8007d16:	0649      	lsls	r1, r1, #25
 8007d18:	bf48      	it	mi
 8007d1a:	b2ad      	uxthmi	r5, r5
 8007d1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d1e:	6033      	str	r3, [r6, #0]
 8007d20:	bf14      	ite	ne
 8007d22:	230a      	movne	r3, #10
 8007d24:	2308      	moveq	r3, #8
 8007d26:	4851      	ldr	r0, [pc, #324]	@ (8007e6c <_printf_i+0x238>)
 8007d28:	2100      	movs	r1, #0
 8007d2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d2e:	6866      	ldr	r6, [r4, #4]
 8007d30:	2e00      	cmp	r6, #0
 8007d32:	bfa8      	it	ge
 8007d34:	6821      	ldrge	r1, [r4, #0]
 8007d36:	60a6      	str	r6, [r4, #8]
 8007d38:	bfa4      	itt	ge
 8007d3a:	f021 0104 	bicge.w	r1, r1, #4
 8007d3e:	6021      	strge	r1, [r4, #0]
 8007d40:	b90d      	cbnz	r5, 8007d46 <_printf_i+0x112>
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	d04b      	beq.n	8007dde <_printf_i+0x1aa>
 8007d46:	4616      	mov	r6, r2
 8007d48:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d4c:	fb03 5711 	mls	r7, r3, r1, r5
 8007d50:	5dc7      	ldrb	r7, [r0, r7]
 8007d52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d56:	462f      	mov	r7, r5
 8007d58:	42bb      	cmp	r3, r7
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	d9f4      	bls.n	8007d48 <_printf_i+0x114>
 8007d5e:	2b08      	cmp	r3, #8
 8007d60:	d10b      	bne.n	8007d7a <_printf_i+0x146>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	07df      	lsls	r7, r3, #31
 8007d66:	d508      	bpl.n	8007d7a <_printf_i+0x146>
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	6861      	ldr	r1, [r4, #4]
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	bfde      	ittt	le
 8007d70:	2330      	movle	r3, #48	@ 0x30
 8007d72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d7a:	1b92      	subs	r2, r2, r6
 8007d7c:	6122      	str	r2, [r4, #16]
 8007d7e:	464b      	mov	r3, r9
 8007d80:	4621      	mov	r1, r4
 8007d82:	4640      	mov	r0, r8
 8007d84:	f8cd a000 	str.w	sl, [sp]
 8007d88:	aa03      	add	r2, sp, #12
 8007d8a:	f7ff fee1 	bl	8007b50 <_printf_common>
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d14a      	bne.n	8007e28 <_printf_i+0x1f4>
 8007d92:	f04f 30ff 	mov.w	r0, #4294967295
 8007d96:	b004      	add	sp, #16
 8007d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f043 0320 	orr.w	r3, r3, #32
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	2778      	movs	r7, #120	@ 0x78
 8007da6:	4832      	ldr	r0, [pc, #200]	@ (8007e70 <_printf_i+0x23c>)
 8007da8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	6831      	ldr	r1, [r6, #0]
 8007db0:	061f      	lsls	r7, r3, #24
 8007db2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007db6:	d402      	bmi.n	8007dbe <_printf_i+0x18a>
 8007db8:	065f      	lsls	r7, r3, #25
 8007dba:	bf48      	it	mi
 8007dbc:	b2ad      	uxthmi	r5, r5
 8007dbe:	6031      	str	r1, [r6, #0]
 8007dc0:	07d9      	lsls	r1, r3, #31
 8007dc2:	bf44      	itt	mi
 8007dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc8:	6023      	strmi	r3, [r4, #0]
 8007dca:	b11d      	cbz	r5, 8007dd4 <_printf_i+0x1a0>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	e7ab      	b.n	8007d28 <_printf_i+0xf4>
 8007dd0:	4826      	ldr	r0, [pc, #152]	@ (8007e6c <_printf_i+0x238>)
 8007dd2:	e7e9      	b.n	8007da8 <_printf_i+0x174>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	f023 0320 	bic.w	r3, r3, #32
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	e7f6      	b.n	8007dcc <_printf_i+0x198>
 8007dde:	4616      	mov	r6, r2
 8007de0:	e7bd      	b.n	8007d5e <_printf_i+0x12a>
 8007de2:	6833      	ldr	r3, [r6, #0]
 8007de4:	6825      	ldr	r5, [r4, #0]
 8007de6:	1d18      	adds	r0, r3, #4
 8007de8:	6961      	ldr	r1, [r4, #20]
 8007dea:	6030      	str	r0, [r6, #0]
 8007dec:	062e      	lsls	r6, r5, #24
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	d501      	bpl.n	8007df6 <_printf_i+0x1c2>
 8007df2:	6019      	str	r1, [r3, #0]
 8007df4:	e002      	b.n	8007dfc <_printf_i+0x1c8>
 8007df6:	0668      	lsls	r0, r5, #25
 8007df8:	d5fb      	bpl.n	8007df2 <_printf_i+0x1be>
 8007dfa:	8019      	strh	r1, [r3, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4616      	mov	r6, r2
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	e7bc      	b.n	8007d7e <_printf_i+0x14a>
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	2100      	movs	r1, #0
 8007e08:	1d1a      	adds	r2, r3, #4
 8007e0a:	6032      	str	r2, [r6, #0]
 8007e0c:	681e      	ldr	r6, [r3, #0]
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 fac8 	bl	80083a6 <memchr>
 8007e16:	b108      	cbz	r0, 8007e1c <_printf_i+0x1e8>
 8007e18:	1b80      	subs	r0, r0, r6
 8007e1a:	6060      	str	r0, [r4, #4]
 8007e1c:	6863      	ldr	r3, [r4, #4]
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	2300      	movs	r3, #0
 8007e22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e26:	e7aa      	b.n	8007d7e <_printf_i+0x14a>
 8007e28:	4632      	mov	r2, r6
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	47d0      	blx	sl
 8007e32:	3001      	adds	r0, #1
 8007e34:	d0ad      	beq.n	8007d92 <_printf_i+0x15e>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	079b      	lsls	r3, r3, #30
 8007e3a:	d413      	bmi.n	8007e64 <_printf_i+0x230>
 8007e3c:	68e0      	ldr	r0, [r4, #12]
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	4298      	cmp	r0, r3
 8007e42:	bfb8      	it	lt
 8007e44:	4618      	movlt	r0, r3
 8007e46:	e7a6      	b.n	8007d96 <_printf_i+0x162>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4632      	mov	r2, r6
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	4640      	mov	r0, r8
 8007e50:	47d0      	blx	sl
 8007e52:	3001      	adds	r0, #1
 8007e54:	d09d      	beq.n	8007d92 <_printf_i+0x15e>
 8007e56:	3501      	adds	r5, #1
 8007e58:	68e3      	ldr	r3, [r4, #12]
 8007e5a:	9903      	ldr	r1, [sp, #12]
 8007e5c:	1a5b      	subs	r3, r3, r1
 8007e5e:	42ab      	cmp	r3, r5
 8007e60:	dcf2      	bgt.n	8007e48 <_printf_i+0x214>
 8007e62:	e7eb      	b.n	8007e3c <_printf_i+0x208>
 8007e64:	2500      	movs	r5, #0
 8007e66:	f104 0619 	add.w	r6, r4, #25
 8007e6a:	e7f5      	b.n	8007e58 <_printf_i+0x224>
 8007e6c:	0800a53a 	.word	0x0800a53a
 8007e70:	0800a54b 	.word	0x0800a54b

08007e74 <std>:
 8007e74:	2300      	movs	r3, #0
 8007e76:	b510      	push	{r4, lr}
 8007e78:	4604      	mov	r4, r0
 8007e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e82:	6083      	str	r3, [r0, #8]
 8007e84:	8181      	strh	r1, [r0, #12]
 8007e86:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e88:	81c2      	strh	r2, [r0, #14]
 8007e8a:	6183      	str	r3, [r0, #24]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	2208      	movs	r2, #8
 8007e90:	305c      	adds	r0, #92	@ 0x5c
 8007e92:	f000 f9f9 	bl	8008288 <memset>
 8007e96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <std+0x58>)
 8007e98:	6224      	str	r4, [r4, #32]
 8007e9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed0 <std+0x5c>)
 8007e9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <std+0x60>)
 8007ea2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <std+0x64>)
 8007ea6:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8007edc <std+0x68>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d006      	beq.n	8007ebc <std+0x48>
 8007eae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007eb2:	4294      	cmp	r4, r2
 8007eb4:	d002      	beq.n	8007ebc <std+0x48>
 8007eb6:	33d0      	adds	r3, #208	@ 0xd0
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	d105      	bne.n	8007ec8 <std+0x54>
 8007ebc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec4:	f000 ba6c 	b.w	80083a0 <__retarget_lock_init_recursive>
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	bf00      	nop
 8007ecc:	080080d9 	.word	0x080080d9
 8007ed0:	080080fb 	.word	0x080080fb
 8007ed4:	08008133 	.word	0x08008133
 8007ed8:	08008157 	.word	0x08008157
 8007edc:	20000660 	.word	0x20000660

08007ee0 <stdio_exit_handler>:
 8007ee0:	4a02      	ldr	r2, [pc, #8]	@ (8007eec <stdio_exit_handler+0xc>)
 8007ee2:	4903      	ldr	r1, [pc, #12]	@ (8007ef0 <stdio_exit_handler+0x10>)
 8007ee4:	4803      	ldr	r0, [pc, #12]	@ (8007ef4 <stdio_exit_handler+0x14>)
 8007ee6:	f000 b869 	b.w	8007fbc <_fwalk_sglue>
 8007eea:	bf00      	nop
 8007eec:	20000020 	.word	0x20000020
 8007ef0:	08009bd1 	.word	0x08009bd1
 8007ef4:	20000030 	.word	0x20000030

08007ef8 <cleanup_stdio>:
 8007ef8:	6841      	ldr	r1, [r0, #4]
 8007efa:	4b0c      	ldr	r3, [pc, #48]	@ (8007f2c <cleanup_stdio+0x34>)
 8007efc:	b510      	push	{r4, lr}
 8007efe:	4299      	cmp	r1, r3
 8007f00:	4604      	mov	r4, r0
 8007f02:	d001      	beq.n	8007f08 <cleanup_stdio+0x10>
 8007f04:	f001 fe64 	bl	8009bd0 <_fflush_r>
 8007f08:	68a1      	ldr	r1, [r4, #8]
 8007f0a:	4b09      	ldr	r3, [pc, #36]	@ (8007f30 <cleanup_stdio+0x38>)
 8007f0c:	4299      	cmp	r1, r3
 8007f0e:	d002      	beq.n	8007f16 <cleanup_stdio+0x1e>
 8007f10:	4620      	mov	r0, r4
 8007f12:	f001 fe5d 	bl	8009bd0 <_fflush_r>
 8007f16:	68e1      	ldr	r1, [r4, #12]
 8007f18:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <cleanup_stdio+0x3c>)
 8007f1a:	4299      	cmp	r1, r3
 8007f1c:	d004      	beq.n	8007f28 <cleanup_stdio+0x30>
 8007f1e:	4620      	mov	r0, r4
 8007f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f24:	f001 be54 	b.w	8009bd0 <_fflush_r>
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000660 	.word	0x20000660
 8007f30:	200006c8 	.word	0x200006c8
 8007f34:	20000730 	.word	0x20000730

08007f38 <global_stdio_init.part.0>:
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <global_stdio_init.part.0+0x30>)
 8007f3c:	4c0b      	ldr	r4, [pc, #44]	@ (8007f6c <global_stdio_init.part.0+0x34>)
 8007f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f70 <global_stdio_init.part.0+0x38>)
 8007f40:	4620      	mov	r0, r4
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	2104      	movs	r1, #4
 8007f46:	2200      	movs	r2, #0
 8007f48:	f7ff ff94 	bl	8007e74 <std>
 8007f4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f50:	2201      	movs	r2, #1
 8007f52:	2109      	movs	r1, #9
 8007f54:	f7ff ff8e 	bl	8007e74 <std>
 8007f58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f62:	2112      	movs	r1, #18
 8007f64:	f7ff bf86 	b.w	8007e74 <std>
 8007f68:	20000798 	.word	0x20000798
 8007f6c:	20000660 	.word	0x20000660
 8007f70:	08007ee1 	.word	0x08007ee1

08007f74 <__sfp_lock_acquire>:
 8007f74:	4801      	ldr	r0, [pc, #4]	@ (8007f7c <__sfp_lock_acquire+0x8>)
 8007f76:	f000 ba14 	b.w	80083a2 <__retarget_lock_acquire_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	200007a1 	.word	0x200007a1

08007f80 <__sfp_lock_release>:
 8007f80:	4801      	ldr	r0, [pc, #4]	@ (8007f88 <__sfp_lock_release+0x8>)
 8007f82:	f000 ba0f 	b.w	80083a4 <__retarget_lock_release_recursive>
 8007f86:	bf00      	nop
 8007f88:	200007a1 	.word	0x200007a1

08007f8c <__sinit>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4604      	mov	r4, r0
 8007f90:	f7ff fff0 	bl	8007f74 <__sfp_lock_acquire>
 8007f94:	6a23      	ldr	r3, [r4, #32]
 8007f96:	b11b      	cbz	r3, 8007fa0 <__sinit+0x14>
 8007f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f9c:	f7ff bff0 	b.w	8007f80 <__sfp_lock_release>
 8007fa0:	4b04      	ldr	r3, [pc, #16]	@ (8007fb4 <__sinit+0x28>)
 8007fa2:	6223      	str	r3, [r4, #32]
 8007fa4:	4b04      	ldr	r3, [pc, #16]	@ (8007fb8 <__sinit+0x2c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f5      	bne.n	8007f98 <__sinit+0xc>
 8007fac:	f7ff ffc4 	bl	8007f38 <global_stdio_init.part.0>
 8007fb0:	e7f2      	b.n	8007f98 <__sinit+0xc>
 8007fb2:	bf00      	nop
 8007fb4:	08007ef9 	.word	0x08007ef9
 8007fb8:	20000798 	.word	0x20000798

08007fbc <_fwalk_sglue>:
 8007fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	4688      	mov	r8, r1
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fcc:	f1b9 0901 	subs.w	r9, r9, #1
 8007fd0:	d505      	bpl.n	8007fde <_fwalk_sglue+0x22>
 8007fd2:	6824      	ldr	r4, [r4, #0]
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	d1f7      	bne.n	8007fc8 <_fwalk_sglue+0xc>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d907      	bls.n	8007ff4 <_fwalk_sglue+0x38>
 8007fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	d003      	beq.n	8007ff4 <_fwalk_sglue+0x38>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c0      	blx	r8
 8007ff2:	4306      	orrs	r6, r0
 8007ff4:	3568      	adds	r5, #104	@ 0x68
 8007ff6:	e7e9      	b.n	8007fcc <_fwalk_sglue+0x10>

08007ff8 <iprintf>:
 8007ff8:	b40f      	push	{r0, r1, r2, r3}
 8007ffa:	b507      	push	{r0, r1, r2, lr}
 8007ffc:	4906      	ldr	r1, [pc, #24]	@ (8008018 <iprintf+0x20>)
 8007ffe:	ab04      	add	r3, sp, #16
 8008000:	6808      	ldr	r0, [r1, #0]
 8008002:	f853 2b04 	ldr.w	r2, [r3], #4
 8008006:	6881      	ldr	r1, [r0, #8]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	f001 fc49 	bl	80098a0 <_vfiprintf_r>
 800800e:	b003      	add	sp, #12
 8008010:	f85d eb04 	ldr.w	lr, [sp], #4
 8008014:	b004      	add	sp, #16
 8008016:	4770      	bx	lr
 8008018:	2000002c 	.word	0x2000002c

0800801c <_puts_r>:
 800801c:	6a03      	ldr	r3, [r0, #32]
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	4605      	mov	r5, r0
 8008022:	460e      	mov	r6, r1
 8008024:	6884      	ldr	r4, [r0, #8]
 8008026:	b90b      	cbnz	r3, 800802c <_puts_r+0x10>
 8008028:	f7ff ffb0 	bl	8007f8c <__sinit>
 800802c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800802e:	07db      	lsls	r3, r3, #31
 8008030:	d405      	bmi.n	800803e <_puts_r+0x22>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	0598      	lsls	r0, r3, #22
 8008036:	d402      	bmi.n	800803e <_puts_r+0x22>
 8008038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800803a:	f000 f9b2 	bl	80083a2 <__retarget_lock_acquire_recursive>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	0719      	lsls	r1, r3, #28
 8008042:	d502      	bpl.n	800804a <_puts_r+0x2e>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d135      	bne.n	80080b6 <_puts_r+0x9a>
 800804a:	4621      	mov	r1, r4
 800804c:	4628      	mov	r0, r5
 800804e:	f000 f8c5 	bl	80081dc <__swsetup_r>
 8008052:	b380      	cbz	r0, 80080b6 <_puts_r+0x9a>
 8008054:	f04f 35ff 	mov.w	r5, #4294967295
 8008058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800805a:	07da      	lsls	r2, r3, #31
 800805c:	d405      	bmi.n	800806a <_puts_r+0x4e>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	059b      	lsls	r3, r3, #22
 8008062:	d402      	bmi.n	800806a <_puts_r+0x4e>
 8008064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008066:	f000 f99d 	bl	80083a4 <__retarget_lock_release_recursive>
 800806a:	4628      	mov	r0, r5
 800806c:	bd70      	pop	{r4, r5, r6, pc}
 800806e:	2b00      	cmp	r3, #0
 8008070:	da04      	bge.n	800807c <_puts_r+0x60>
 8008072:	69a2      	ldr	r2, [r4, #24]
 8008074:	429a      	cmp	r2, r3
 8008076:	dc17      	bgt.n	80080a8 <_puts_r+0x8c>
 8008078:	290a      	cmp	r1, #10
 800807a:	d015      	beq.n	80080a8 <_puts_r+0x8c>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	6022      	str	r2, [r4, #0]
 8008082:	7019      	strb	r1, [r3, #0]
 8008084:	68a3      	ldr	r3, [r4, #8]
 8008086:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800808a:	3b01      	subs	r3, #1
 800808c:	60a3      	str	r3, [r4, #8]
 800808e:	2900      	cmp	r1, #0
 8008090:	d1ed      	bne.n	800806e <_puts_r+0x52>
 8008092:	2b00      	cmp	r3, #0
 8008094:	da11      	bge.n	80080ba <_puts_r+0x9e>
 8008096:	4622      	mov	r2, r4
 8008098:	210a      	movs	r1, #10
 800809a:	4628      	mov	r0, r5
 800809c:	f000 f85f 	bl	800815e <__swbuf_r>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d0d7      	beq.n	8008054 <_puts_r+0x38>
 80080a4:	250a      	movs	r5, #10
 80080a6:	e7d7      	b.n	8008058 <_puts_r+0x3c>
 80080a8:	4622      	mov	r2, r4
 80080aa:	4628      	mov	r0, r5
 80080ac:	f000 f857 	bl	800815e <__swbuf_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	d1e7      	bne.n	8008084 <_puts_r+0x68>
 80080b4:	e7ce      	b.n	8008054 <_puts_r+0x38>
 80080b6:	3e01      	subs	r6, #1
 80080b8:	e7e4      	b.n	8008084 <_puts_r+0x68>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	6022      	str	r2, [r4, #0]
 80080c0:	220a      	movs	r2, #10
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e7ee      	b.n	80080a4 <_puts_r+0x88>
	...

080080c8 <puts>:
 80080c8:	4b02      	ldr	r3, [pc, #8]	@ (80080d4 <puts+0xc>)
 80080ca:	4601      	mov	r1, r0
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f7ff bfa5 	b.w	800801c <_puts_r>
 80080d2:	bf00      	nop
 80080d4:	2000002c 	.word	0x2000002c

080080d8 <__sread>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	460c      	mov	r4, r1
 80080dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e0:	f000 f900 	bl	80082e4 <_read_r>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	bfab      	itete	ge
 80080e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080ea:	89a3      	ldrhlt	r3, [r4, #12]
 80080ec:	181b      	addge	r3, r3, r0
 80080ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080f2:	bfac      	ite	ge
 80080f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080f6:	81a3      	strhlt	r3, [r4, #12]
 80080f8:	bd10      	pop	{r4, pc}

080080fa <__swrite>:
 80080fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	461f      	mov	r7, r3
 8008100:	898b      	ldrh	r3, [r1, #12]
 8008102:	4605      	mov	r5, r0
 8008104:	05db      	lsls	r3, r3, #23
 8008106:	460c      	mov	r4, r1
 8008108:	4616      	mov	r6, r2
 800810a:	d505      	bpl.n	8008118 <__swrite+0x1e>
 800810c:	2302      	movs	r3, #2
 800810e:	2200      	movs	r2, #0
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	f000 f8d4 	bl	80082c0 <_lseek_r>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	4632      	mov	r2, r6
 800811c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	4628      	mov	r0, r5
 8008124:	463b      	mov	r3, r7
 8008126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800812a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	f000 b8fb 	b.w	8008328 <_write_r>

08008132 <__sseek>:
 8008132:	b510      	push	{r4, lr}
 8008134:	460c      	mov	r4, r1
 8008136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813a:	f000 f8c1 	bl	80082c0 <_lseek_r>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	bf15      	itete	ne
 8008144:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008146:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800814a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800814e:	81a3      	strheq	r3, [r4, #12]
 8008150:	bf18      	it	ne
 8008152:	81a3      	strhne	r3, [r4, #12]
 8008154:	bd10      	pop	{r4, pc}

08008156 <__sclose>:
 8008156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815a:	f000 b8a1 	b.w	80082a0 <_close_r>

0800815e <__swbuf_r>:
 800815e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008160:	460e      	mov	r6, r1
 8008162:	4614      	mov	r4, r2
 8008164:	4605      	mov	r5, r0
 8008166:	b118      	cbz	r0, 8008170 <__swbuf_r+0x12>
 8008168:	6a03      	ldr	r3, [r0, #32]
 800816a:	b90b      	cbnz	r3, 8008170 <__swbuf_r+0x12>
 800816c:	f7ff ff0e 	bl	8007f8c <__sinit>
 8008170:	69a3      	ldr	r3, [r4, #24]
 8008172:	60a3      	str	r3, [r4, #8]
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	071a      	lsls	r2, r3, #28
 8008178:	d501      	bpl.n	800817e <__swbuf_r+0x20>
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	b943      	cbnz	r3, 8008190 <__swbuf_r+0x32>
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 f82b 	bl	80081dc <__swsetup_r>
 8008186:	b118      	cbz	r0, 8008190 <__swbuf_r+0x32>
 8008188:	f04f 37ff 	mov.w	r7, #4294967295
 800818c:	4638      	mov	r0, r7
 800818e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	6922      	ldr	r2, [r4, #16]
 8008194:	b2f6      	uxtb	r6, r6
 8008196:	1a98      	subs	r0, r3, r2
 8008198:	6963      	ldr	r3, [r4, #20]
 800819a:	4637      	mov	r7, r6
 800819c:	4283      	cmp	r3, r0
 800819e:	dc05      	bgt.n	80081ac <__swbuf_r+0x4e>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4628      	mov	r0, r5
 80081a4:	f001 fd14 	bl	8009bd0 <_fflush_r>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d1ed      	bne.n	8008188 <__swbuf_r+0x2a>
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	60a3      	str	r3, [r4, #8]
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	6022      	str	r2, [r4, #0]
 80081b8:	701e      	strb	r6, [r3, #0]
 80081ba:	6962      	ldr	r2, [r4, #20]
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	429a      	cmp	r2, r3
 80081c0:	d004      	beq.n	80081cc <__swbuf_r+0x6e>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	07db      	lsls	r3, r3, #31
 80081c6:	d5e1      	bpl.n	800818c <__swbuf_r+0x2e>
 80081c8:	2e0a      	cmp	r6, #10
 80081ca:	d1df      	bne.n	800818c <__swbuf_r+0x2e>
 80081cc:	4621      	mov	r1, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f001 fcfe 	bl	8009bd0 <_fflush_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d0d9      	beq.n	800818c <__swbuf_r+0x2e>
 80081d8:	e7d6      	b.n	8008188 <__swbuf_r+0x2a>
	...

080081dc <__swsetup_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4b29      	ldr	r3, [pc, #164]	@ (8008284 <__swsetup_r+0xa8>)
 80081e0:	4605      	mov	r5, r0
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	460c      	mov	r4, r1
 80081e6:	b118      	cbz	r0, 80081f0 <__swsetup_r+0x14>
 80081e8:	6a03      	ldr	r3, [r0, #32]
 80081ea:	b90b      	cbnz	r3, 80081f0 <__swsetup_r+0x14>
 80081ec:	f7ff fece 	bl	8007f8c <__sinit>
 80081f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f4:	0719      	lsls	r1, r3, #28
 80081f6:	d422      	bmi.n	800823e <__swsetup_r+0x62>
 80081f8:	06da      	lsls	r2, r3, #27
 80081fa:	d407      	bmi.n	800820c <__swsetup_r+0x30>
 80081fc:	2209      	movs	r2, #9
 80081fe:	602a      	str	r2, [r5, #0]
 8008200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	e033      	b.n	8008274 <__swsetup_r+0x98>
 800820c:	0758      	lsls	r0, r3, #29
 800820e:	d512      	bpl.n	8008236 <__swsetup_r+0x5a>
 8008210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008212:	b141      	cbz	r1, 8008226 <__swsetup_r+0x4a>
 8008214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008218:	4299      	cmp	r1, r3
 800821a:	d002      	beq.n	8008222 <__swsetup_r+0x46>
 800821c:	4628      	mov	r0, r5
 800821e:	f000 ff4f 	bl	80090c0 <_free_r>
 8008222:	2300      	movs	r3, #0
 8008224:	6363      	str	r3, [r4, #52]	@ 0x34
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	2300      	movs	r3, #0
 8008230:	6063      	str	r3, [r4, #4]
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	f043 0308 	orr.w	r3, r3, #8
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	b94b      	cbnz	r3, 8008256 <__swsetup_r+0x7a>
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800824c:	d003      	beq.n	8008256 <__swsetup_r+0x7a>
 800824e:	4621      	mov	r1, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f001 fd1c 	bl	8009c8e <__smakebuf_r>
 8008256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825a:	f013 0201 	ands.w	r2, r3, #1
 800825e:	d00a      	beq.n	8008276 <__swsetup_r+0x9a>
 8008260:	2200      	movs	r2, #0
 8008262:	60a2      	str	r2, [r4, #8]
 8008264:	6962      	ldr	r2, [r4, #20]
 8008266:	4252      	negs	r2, r2
 8008268:	61a2      	str	r2, [r4, #24]
 800826a:	6922      	ldr	r2, [r4, #16]
 800826c:	b942      	cbnz	r2, 8008280 <__swsetup_r+0xa4>
 800826e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008272:	d1c5      	bne.n	8008200 <__swsetup_r+0x24>
 8008274:	bd38      	pop	{r3, r4, r5, pc}
 8008276:	0799      	lsls	r1, r3, #30
 8008278:	bf58      	it	pl
 800827a:	6962      	ldrpl	r2, [r4, #20]
 800827c:	60a2      	str	r2, [r4, #8]
 800827e:	e7f4      	b.n	800826a <__swsetup_r+0x8e>
 8008280:	2000      	movs	r0, #0
 8008282:	e7f7      	b.n	8008274 <__swsetup_r+0x98>
 8008284:	2000002c 	.word	0x2000002c

08008288 <memset>:
 8008288:	4603      	mov	r3, r0
 800828a:	4402      	add	r2, r0
 800828c:	4293      	cmp	r3, r2
 800828e:	d100      	bne.n	8008292 <memset+0xa>
 8008290:	4770      	bx	lr
 8008292:	f803 1b01 	strb.w	r1, [r3], #1
 8008296:	e7f9      	b.n	800828c <memset+0x4>

08008298 <_localeconv_r>:
 8008298:	4800      	ldr	r0, [pc, #0]	@ (800829c <_localeconv_r+0x4>)
 800829a:	4770      	bx	lr
 800829c:	2000016c 	.word	0x2000016c

080082a0 <_close_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	2300      	movs	r3, #0
 80082a4:	4d05      	ldr	r5, [pc, #20]	@ (80082bc <_close_r+0x1c>)
 80082a6:	4604      	mov	r4, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	602b      	str	r3, [r5, #0]
 80082ac:	f7f9 fcf2 	bl	8001c94 <_close>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d102      	bne.n	80082ba <_close_r+0x1a>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	b103      	cbz	r3, 80082ba <_close_r+0x1a>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	2000079c 	.word	0x2000079c

080082c0 <_lseek_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	2200      	movs	r2, #0
 80082ca:	4d05      	ldr	r5, [pc, #20]	@ (80082e0 <_lseek_r+0x20>)
 80082cc:	602a      	str	r2, [r5, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7f9 fcea 	bl	8001ca8 <_lseek>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_lseek_r+0x1e>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_lseek_r+0x1e>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	2000079c 	.word	0x2000079c

080082e4 <_read_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	2200      	movs	r2, #0
 80082ee:	4d05      	ldr	r5, [pc, #20]	@ (8008304 <_read_r+0x20>)
 80082f0:	602a      	str	r2, [r5, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f7f9 fcbe 	bl	8001c74 <_read>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_read_r+0x1e>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_read_r+0x1e>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	2000079c 	.word	0x2000079c

08008308 <_sbrk_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	2300      	movs	r3, #0
 800830c:	4d05      	ldr	r5, [pc, #20]	@ (8008324 <_sbrk_r+0x1c>)
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7f9 fcca 	bl	8001cac <_sbrk>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_sbrk_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_sbrk_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	2000079c 	.word	0x2000079c

08008328 <_write_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	4611      	mov	r1, r2
 8008330:	2200      	movs	r2, #0
 8008332:	4d05      	ldr	r5, [pc, #20]	@ (8008348 <_write_r+0x20>)
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	f7f9 f8f4 	bl	8001524 <_write>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_write_r+0x1e>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_write_r+0x1e>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	2000079c 	.word	0x2000079c

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	@ (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	2000002c 	.word	0x2000002c

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	2600      	movs	r6, #0
 800835c:	4d0c      	ldr	r5, [pc, #48]	@ (8008390 <__libc_init_array+0x38>)
 800835e:	4c0d      	ldr	r4, [pc, #52]	@ (8008394 <__libc_init_array+0x3c>)
 8008360:	1b64      	subs	r4, r4, r5
 8008362:	10a4      	asrs	r4, r4, #2
 8008364:	42a6      	cmp	r6, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	f001 fd6e 	bl	8009e48 <_init>
 800836c:	2600      	movs	r6, #0
 800836e:	4d0a      	ldr	r5, [pc, #40]	@ (8008398 <__libc_init_array+0x40>)
 8008370:	4c0a      	ldr	r4, [pc, #40]	@ (800839c <__libc_init_array+0x44>)
 8008372:	1b64      	subs	r4, r4, r5
 8008374:	10a4      	asrs	r4, r4, #2
 8008376:	42a6      	cmp	r6, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008380:	4798      	blx	r3
 8008382:	3601      	adds	r6, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f855 3b04 	ldr.w	r3, [r5], #4
 800838a:	4798      	blx	r3
 800838c:	3601      	adds	r6, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	0800a8a4 	.word	0x0800a8a4
 8008394:	0800a8a4 	.word	0x0800a8a4
 8008398:	0800a8a4 	.word	0x0800a8a4
 800839c:	0800a8a8 	.word	0x0800a8a8

080083a0 <__retarget_lock_init_recursive>:
 80083a0:	4770      	bx	lr

080083a2 <__retarget_lock_acquire_recursive>:
 80083a2:	4770      	bx	lr

080083a4 <__retarget_lock_release_recursive>:
 80083a4:	4770      	bx	lr

080083a6 <memchr>:
 80083a6:	4603      	mov	r3, r0
 80083a8:	b510      	push	{r4, lr}
 80083aa:	b2c9      	uxtb	r1, r1
 80083ac:	4402      	add	r2, r0
 80083ae:	4293      	cmp	r3, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	d101      	bne.n	80083b8 <memchr+0x12>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e003      	b.n	80083c0 <memchr+0x1a>
 80083b8:	7804      	ldrb	r4, [r0, #0]
 80083ba:	3301      	adds	r3, #1
 80083bc:	428c      	cmp	r4, r1
 80083be:	d1f6      	bne.n	80083ae <memchr+0x8>
 80083c0:	bd10      	pop	{r4, pc}

080083c2 <memcpy>:
 80083c2:	440a      	add	r2, r1
 80083c4:	4291      	cmp	r1, r2
 80083c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ca:	d100      	bne.n	80083ce <memcpy+0xc>
 80083cc:	4770      	bx	lr
 80083ce:	b510      	push	{r4, lr}
 80083d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d4:	4291      	cmp	r1, r2
 80083d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083da:	d1f9      	bne.n	80083d0 <memcpy+0xe>
 80083dc:	bd10      	pop	{r4, pc}
	...

080083e0 <__assert_func>:
 80083e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083e2:	4614      	mov	r4, r2
 80083e4:	461a      	mov	r2, r3
 80083e6:	4b09      	ldr	r3, [pc, #36]	@ (800840c <__assert_func+0x2c>)
 80083e8:	4605      	mov	r5, r0
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68d8      	ldr	r0, [r3, #12]
 80083ee:	b954      	cbnz	r4, 8008406 <__assert_func+0x26>
 80083f0:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <__assert_func+0x30>)
 80083f2:	461c      	mov	r4, r3
 80083f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083f8:	9100      	str	r1, [sp, #0]
 80083fa:	462b      	mov	r3, r5
 80083fc:	4905      	ldr	r1, [pc, #20]	@ (8008414 <__assert_func+0x34>)
 80083fe:	f001 fc0f 	bl	8009c20 <fiprintf>
 8008402:	f001 fca3 	bl	8009d4c <abort>
 8008406:	4b04      	ldr	r3, [pc, #16]	@ (8008418 <__assert_func+0x38>)
 8008408:	e7f4      	b.n	80083f4 <__assert_func+0x14>
 800840a:	bf00      	nop
 800840c:	2000002c 	.word	0x2000002c
 8008410:	0800a597 	.word	0x0800a597
 8008414:	0800a569 	.word	0x0800a569
 8008418:	0800a55c 	.word	0x0800a55c

0800841c <quorem>:
 800841c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	6903      	ldr	r3, [r0, #16]
 8008422:	690c      	ldr	r4, [r1, #16]
 8008424:	4607      	mov	r7, r0
 8008426:	42a3      	cmp	r3, r4
 8008428:	db7e      	blt.n	8008528 <quorem+0x10c>
 800842a:	3c01      	subs	r4, #1
 800842c:	00a3      	lsls	r3, r4, #2
 800842e:	f100 0514 	add.w	r5, r0, #20
 8008432:	f101 0814 	add.w	r8, r1, #20
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008446:	3301      	adds	r3, #1
 8008448:	429a      	cmp	r2, r3
 800844a:	fbb2 f6f3 	udiv	r6, r2, r3
 800844e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008452:	d32e      	bcc.n	80084b2 <quorem+0x96>
 8008454:	f04f 0a00 	mov.w	sl, #0
 8008458:	46c4      	mov	ip, r8
 800845a:	46ae      	mov	lr, r5
 800845c:	46d3      	mov	fp, sl
 800845e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008462:	b298      	uxth	r0, r3
 8008464:	fb06 a000 	mla	r0, r6, r0, sl
 8008468:	0c1b      	lsrs	r3, r3, #16
 800846a:	0c02      	lsrs	r2, r0, #16
 800846c:	fb06 2303 	mla	r3, r6, r3, r2
 8008470:	f8de 2000 	ldr.w	r2, [lr]
 8008474:	b280      	uxth	r0, r0
 8008476:	b292      	uxth	r2, r2
 8008478:	1a12      	subs	r2, r2, r0
 800847a:	445a      	add	r2, fp
 800847c:	f8de 0000 	ldr.w	r0, [lr]
 8008480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008484:	b29b      	uxth	r3, r3
 8008486:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800848a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800848e:	b292      	uxth	r2, r2
 8008490:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008494:	45e1      	cmp	r9, ip
 8008496:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800849a:	f84e 2b04 	str.w	r2, [lr], #4
 800849e:	d2de      	bcs.n	800845e <quorem+0x42>
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	58eb      	ldr	r3, [r5, r3]
 80084a4:	b92b      	cbnz	r3, 80084b2 <quorem+0x96>
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	3b04      	subs	r3, #4
 80084aa:	429d      	cmp	r5, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	d32f      	bcc.n	8008510 <quorem+0xf4>
 80084b0:	613c      	str	r4, [r7, #16]
 80084b2:	4638      	mov	r0, r7
 80084b4:	f001 f8c4 	bl	8009640 <__mcmp>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	db25      	blt.n	8008508 <quorem+0xec>
 80084bc:	4629      	mov	r1, r5
 80084be:	2000      	movs	r0, #0
 80084c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80084c4:	f8d1 c000 	ldr.w	ip, [r1]
 80084c8:	fa1f fe82 	uxth.w	lr, r2
 80084cc:	fa1f f38c 	uxth.w	r3, ip
 80084d0:	eba3 030e 	sub.w	r3, r3, lr
 80084d4:	4403      	add	r3, r0
 80084d6:	0c12      	lsrs	r2, r2, #16
 80084d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084e6:	45c1      	cmp	r9, r8
 80084e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084ec:	f841 3b04 	str.w	r3, [r1], #4
 80084f0:	d2e6      	bcs.n	80084c0 <quorem+0xa4>
 80084f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084fa:	b922      	cbnz	r2, 8008506 <quorem+0xea>
 80084fc:	3b04      	subs	r3, #4
 80084fe:	429d      	cmp	r5, r3
 8008500:	461a      	mov	r2, r3
 8008502:	d30b      	bcc.n	800851c <quorem+0x100>
 8008504:	613c      	str	r4, [r7, #16]
 8008506:	3601      	adds	r6, #1
 8008508:	4630      	mov	r0, r6
 800850a:	b003      	add	sp, #12
 800850c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	3b04      	subs	r3, #4
 8008514:	2a00      	cmp	r2, #0
 8008516:	d1cb      	bne.n	80084b0 <quorem+0x94>
 8008518:	3c01      	subs	r4, #1
 800851a:	e7c6      	b.n	80084aa <quorem+0x8e>
 800851c:	6812      	ldr	r2, [r2, #0]
 800851e:	3b04      	subs	r3, #4
 8008520:	2a00      	cmp	r2, #0
 8008522:	d1ef      	bne.n	8008504 <quorem+0xe8>
 8008524:	3c01      	subs	r4, #1
 8008526:	e7ea      	b.n	80084fe <quorem+0xe2>
 8008528:	2000      	movs	r0, #0
 800852a:	e7ee      	b.n	800850a <quorem+0xee>
 800852c:	0000      	movs	r0, r0
	...

08008530 <_dtoa_r>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	69c7      	ldr	r7, [r0, #28]
 800853a:	b097      	sub	sp, #92	@ 0x5c
 800853c:	4683      	mov	fp, r0
 800853e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008542:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008544:	b97f      	cbnz	r7, 8008566 <_dtoa_r+0x36>
 8008546:	2010      	movs	r0, #16
 8008548:	f7fe ff82 	bl	8007450 <malloc>
 800854c:	4602      	mov	r2, r0
 800854e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008552:	b920      	cbnz	r0, 800855e <_dtoa_r+0x2e>
 8008554:	21ef      	movs	r1, #239	@ 0xef
 8008556:	4ba8      	ldr	r3, [pc, #672]	@ (80087f8 <_dtoa_r+0x2c8>)
 8008558:	48a8      	ldr	r0, [pc, #672]	@ (80087fc <_dtoa_r+0x2cc>)
 800855a:	f7ff ff41 	bl	80083e0 <__assert_func>
 800855e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008562:	6007      	str	r7, [r0, #0]
 8008564:	60c7      	str	r7, [r0, #12]
 8008566:	f8db 301c 	ldr.w	r3, [fp, #28]
 800856a:	6819      	ldr	r1, [r3, #0]
 800856c:	b159      	cbz	r1, 8008586 <_dtoa_r+0x56>
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	2301      	movs	r3, #1
 8008572:	4093      	lsls	r3, r2
 8008574:	604a      	str	r2, [r1, #4]
 8008576:	608b      	str	r3, [r1, #8]
 8008578:	4658      	mov	r0, fp
 800857a:	f000 fe29 	bl	80091d0 <_Bfree>
 800857e:	2200      	movs	r2, #0
 8008580:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	1e2b      	subs	r3, r5, #0
 8008588:	bfaf      	iteee	ge
 800858a:	2300      	movge	r3, #0
 800858c:	2201      	movlt	r2, #1
 800858e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008592:	9303      	strlt	r3, [sp, #12]
 8008594:	bfa8      	it	ge
 8008596:	6033      	strge	r3, [r6, #0]
 8008598:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800859c:	4b98      	ldr	r3, [pc, #608]	@ (8008800 <_dtoa_r+0x2d0>)
 800859e:	bfb8      	it	lt
 80085a0:	6032      	strlt	r2, [r6, #0]
 80085a2:	ea33 0308 	bics.w	r3, r3, r8
 80085a6:	d112      	bne.n	80085ce <_dtoa_r+0x9e>
 80085a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80085b4:	4323      	orrs	r3, r4
 80085b6:	f000 8550 	beq.w	800905a <_dtoa_r+0xb2a>
 80085ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085bc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008804 <_dtoa_r+0x2d4>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 8552 	beq.w	800906a <_dtoa_r+0xb3a>
 80085c6:	f10a 0303 	add.w	r3, sl, #3
 80085ca:	f000 bd4c 	b.w	8009066 <_dtoa_r+0xb36>
 80085ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80085d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085da:	2200      	movs	r2, #0
 80085dc:	2300      	movs	r3, #0
 80085de:	f7f8 f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 80085e2:	4607      	mov	r7, r0
 80085e4:	b158      	cbz	r0, 80085fe <_dtoa_r+0xce>
 80085e6:	2301      	movs	r3, #1
 80085e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085ee:	b113      	cbz	r3, 80085f6 <_dtoa_r+0xc6>
 80085f0:	4b85      	ldr	r3, [pc, #532]	@ (8008808 <_dtoa_r+0x2d8>)
 80085f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800880c <_dtoa_r+0x2dc>
 80085fa:	f000 bd36 	b.w	800906a <_dtoa_r+0xb3a>
 80085fe:	ab14      	add	r3, sp, #80	@ 0x50
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	ab15      	add	r3, sp, #84	@ 0x54
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	4658      	mov	r0, fp
 8008608:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800860c:	f001 f8c8 	bl	80097a0 <__d2b>
 8008610:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008614:	4681      	mov	r9, r0
 8008616:	2e00      	cmp	r6, #0
 8008618:	d077      	beq.n	800870a <_dtoa_r+0x1da>
 800861a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800861e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008620:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008628:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800862c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008630:	9712      	str	r7, [sp, #72]	@ 0x48
 8008632:	4619      	mov	r1, r3
 8008634:	2200      	movs	r2, #0
 8008636:	4b76      	ldr	r3, [pc, #472]	@ (8008810 <_dtoa_r+0x2e0>)
 8008638:	f7f7 fd96 	bl	8000168 <__aeabi_dsub>
 800863c:	a368      	add	r3, pc, #416	@ (adr r3, 80087e0 <_dtoa_r+0x2b0>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 ff49 	bl	80004d8 <__aeabi_dmul>
 8008646:	a368      	add	r3, pc, #416	@ (adr r3, 80087e8 <_dtoa_r+0x2b8>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 fd8e 	bl	800016c <__adddf3>
 8008650:	4604      	mov	r4, r0
 8008652:	4630      	mov	r0, r6
 8008654:	460d      	mov	r5, r1
 8008656:	f7f7 fed5 	bl	8000404 <__aeabi_i2d>
 800865a:	a365      	add	r3, pc, #404	@ (adr r3, 80087f0 <_dtoa_r+0x2c0>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f7f7 ff3a 	bl	80004d8 <__aeabi_dmul>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4620      	mov	r0, r4
 800866a:	4629      	mov	r1, r5
 800866c:	f7f7 fd7e 	bl	800016c <__adddf3>
 8008670:	4604      	mov	r4, r0
 8008672:	460d      	mov	r5, r1
 8008674:	f7f8 f9e0 	bl	8000a38 <__aeabi_d2iz>
 8008678:	2200      	movs	r2, #0
 800867a:	4607      	mov	r7, r0
 800867c:	2300      	movs	r3, #0
 800867e:	4620      	mov	r0, r4
 8008680:	4629      	mov	r1, r5
 8008682:	f7f8 f99b 	bl	80009bc <__aeabi_dcmplt>
 8008686:	b140      	cbz	r0, 800869a <_dtoa_r+0x16a>
 8008688:	4638      	mov	r0, r7
 800868a:	f7f7 febb 	bl	8000404 <__aeabi_i2d>
 800868e:	4622      	mov	r2, r4
 8008690:	462b      	mov	r3, r5
 8008692:	f7f8 f989 	bl	80009a8 <__aeabi_dcmpeq>
 8008696:	b900      	cbnz	r0, 800869a <_dtoa_r+0x16a>
 8008698:	3f01      	subs	r7, #1
 800869a:	2f16      	cmp	r7, #22
 800869c:	d853      	bhi.n	8008746 <_dtoa_r+0x216>
 800869e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008814 <_dtoa_r+0x2e4>)
 80086a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f7f8 f986 	bl	80009bc <__aeabi_dcmplt>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d04a      	beq.n	800874a <_dtoa_r+0x21a>
 80086b4:	2300      	movs	r3, #0
 80086b6:	3f01      	subs	r7, #1
 80086b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086bc:	1b9b      	subs	r3, r3, r6
 80086be:	1e5a      	subs	r2, r3, #1
 80086c0:	bf46      	itte	mi
 80086c2:	f1c3 0801 	rsbmi	r8, r3, #1
 80086c6:	2300      	movmi	r3, #0
 80086c8:	f04f 0800 	movpl.w	r8, #0
 80086cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80086ce:	bf48      	it	mi
 80086d0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80086d2:	2f00      	cmp	r7, #0
 80086d4:	db3b      	blt.n	800874e <_dtoa_r+0x21e>
 80086d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d8:	970e      	str	r7, [sp, #56]	@ 0x38
 80086da:	443b      	add	r3, r7
 80086dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086de:	2300      	movs	r3, #0
 80086e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d866      	bhi.n	80087b6 <_dtoa_r+0x286>
 80086e8:	2b05      	cmp	r3, #5
 80086ea:	bfc4      	itt	gt
 80086ec:	3b04      	subgt	r3, #4
 80086ee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80086f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086f2:	bfc8      	it	gt
 80086f4:	2400      	movgt	r4, #0
 80086f6:	f1a3 0302 	sub.w	r3, r3, #2
 80086fa:	bfd8      	it	le
 80086fc:	2401      	movle	r4, #1
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d864      	bhi.n	80087cc <_dtoa_r+0x29c>
 8008702:	e8df f003 	tbb	[pc, r3]
 8008706:	382b      	.short	0x382b
 8008708:	5636      	.short	0x5636
 800870a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800870e:	441e      	add	r6, r3
 8008710:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008714:	2b20      	cmp	r3, #32
 8008716:	bfc1      	itttt	gt
 8008718:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800871c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008720:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008724:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008728:	bfd6      	itet	le
 800872a:	f1c3 0320 	rsble	r3, r3, #32
 800872e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008732:	fa04 f003 	lslle.w	r0, r4, r3
 8008736:	f7f7 fe55 	bl	80003e4 <__aeabi_ui2d>
 800873a:	2201      	movs	r2, #1
 800873c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008740:	3e01      	subs	r6, #1
 8008742:	9212      	str	r2, [sp, #72]	@ 0x48
 8008744:	e775      	b.n	8008632 <_dtoa_r+0x102>
 8008746:	2301      	movs	r3, #1
 8008748:	e7b6      	b.n	80086b8 <_dtoa_r+0x188>
 800874a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800874c:	e7b5      	b.n	80086ba <_dtoa_r+0x18a>
 800874e:	427b      	negs	r3, r7
 8008750:	930a      	str	r3, [sp, #40]	@ 0x28
 8008752:	2300      	movs	r3, #0
 8008754:	eba8 0807 	sub.w	r8, r8, r7
 8008758:	930e      	str	r3, [sp, #56]	@ 0x38
 800875a:	e7c2      	b.n	80086e2 <_dtoa_r+0x1b2>
 800875c:	2300      	movs	r3, #0
 800875e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008760:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008762:	2b00      	cmp	r3, #0
 8008764:	dc35      	bgt.n	80087d2 <_dtoa_r+0x2a2>
 8008766:	2301      	movs	r3, #1
 8008768:	461a      	mov	r2, r3
 800876a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800876e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008770:	e00b      	b.n	800878a <_dtoa_r+0x25a>
 8008772:	2301      	movs	r3, #1
 8008774:	e7f3      	b.n	800875e <_dtoa_r+0x22e>
 8008776:	2300      	movs	r3, #0
 8008778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800877a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	9308      	str	r3, [sp, #32]
 8008780:	3301      	adds	r3, #1
 8008782:	2b01      	cmp	r3, #1
 8008784:	9307      	str	r3, [sp, #28]
 8008786:	bfb8      	it	lt
 8008788:	2301      	movlt	r3, #1
 800878a:	2100      	movs	r1, #0
 800878c:	2204      	movs	r2, #4
 800878e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008792:	f102 0514 	add.w	r5, r2, #20
 8008796:	429d      	cmp	r5, r3
 8008798:	d91f      	bls.n	80087da <_dtoa_r+0x2aa>
 800879a:	6041      	str	r1, [r0, #4]
 800879c:	4658      	mov	r0, fp
 800879e:	f000 fcd7 	bl	8009150 <_Balloc>
 80087a2:	4682      	mov	sl, r0
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d139      	bne.n	800881c <_dtoa_r+0x2ec>
 80087a8:	4602      	mov	r2, r0
 80087aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80087ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008818 <_dtoa_r+0x2e8>)
 80087b0:	e6d2      	b.n	8008558 <_dtoa_r+0x28>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e7e0      	b.n	8008778 <_dtoa_r+0x248>
 80087b6:	2401      	movs	r4, #1
 80087b8:	2300      	movs	r3, #0
 80087ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80087be:	f04f 33ff 	mov.w	r3, #4294967295
 80087c2:	2200      	movs	r2, #0
 80087c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80087c8:	2312      	movs	r3, #18
 80087ca:	e7d0      	b.n	800876e <_dtoa_r+0x23e>
 80087cc:	2301      	movs	r3, #1
 80087ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087d0:	e7f5      	b.n	80087be <_dtoa_r+0x28e>
 80087d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80087d8:	e7d7      	b.n	800878a <_dtoa_r+0x25a>
 80087da:	3101      	adds	r1, #1
 80087dc:	0052      	lsls	r2, r2, #1
 80087de:	e7d8      	b.n	8008792 <_dtoa_r+0x262>
 80087e0:	636f4361 	.word	0x636f4361
 80087e4:	3fd287a7 	.word	0x3fd287a7
 80087e8:	8b60c8b3 	.word	0x8b60c8b3
 80087ec:	3fc68a28 	.word	0x3fc68a28
 80087f0:	509f79fb 	.word	0x509f79fb
 80087f4:	3fd34413 	.word	0x3fd34413
 80087f8:	0800a5a5 	.word	0x0800a5a5
 80087fc:	0800a5bc 	.word	0x0800a5bc
 8008800:	7ff00000 	.word	0x7ff00000
 8008804:	0800a5a1 	.word	0x0800a5a1
 8008808:	0800a539 	.word	0x0800a539
 800880c:	0800a538 	.word	0x0800a538
 8008810:	3ff80000 	.word	0x3ff80000
 8008814:	0800a6b8 	.word	0x0800a6b8
 8008818:	0800a614 	.word	0x0800a614
 800881c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008820:	6018      	str	r0, [r3, #0]
 8008822:	9b07      	ldr	r3, [sp, #28]
 8008824:	2b0e      	cmp	r3, #14
 8008826:	f200 80a4 	bhi.w	8008972 <_dtoa_r+0x442>
 800882a:	2c00      	cmp	r4, #0
 800882c:	f000 80a1 	beq.w	8008972 <_dtoa_r+0x442>
 8008830:	2f00      	cmp	r7, #0
 8008832:	dd33      	ble.n	800889c <_dtoa_r+0x36c>
 8008834:	4b86      	ldr	r3, [pc, #536]	@ (8008a50 <_dtoa_r+0x520>)
 8008836:	f007 020f 	and.w	r2, r7, #15
 800883a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800883e:	05f8      	lsls	r0, r7, #23
 8008840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008844:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008848:	ea4f 1427 	mov.w	r4, r7, asr #4
 800884c:	d516      	bpl.n	800887c <_dtoa_r+0x34c>
 800884e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008852:	4b80      	ldr	r3, [pc, #512]	@ (8008a54 <_dtoa_r+0x524>)
 8008854:	2603      	movs	r6, #3
 8008856:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800885a:	f7f7 ff67 	bl	800072c <__aeabi_ddiv>
 800885e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008862:	f004 040f 	and.w	r4, r4, #15
 8008866:	4d7b      	ldr	r5, [pc, #492]	@ (8008a54 <_dtoa_r+0x524>)
 8008868:	b954      	cbnz	r4, 8008880 <_dtoa_r+0x350>
 800886a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800886e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008872:	f7f7 ff5b 	bl	800072c <__aeabi_ddiv>
 8008876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800887a:	e028      	b.n	80088ce <_dtoa_r+0x39e>
 800887c:	2602      	movs	r6, #2
 800887e:	e7f2      	b.n	8008866 <_dtoa_r+0x336>
 8008880:	07e1      	lsls	r1, r4, #31
 8008882:	d508      	bpl.n	8008896 <_dtoa_r+0x366>
 8008884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008888:	e9d5 2300 	ldrd	r2, r3, [r5]
 800888c:	f7f7 fe24 	bl	80004d8 <__aeabi_dmul>
 8008890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008894:	3601      	adds	r6, #1
 8008896:	1064      	asrs	r4, r4, #1
 8008898:	3508      	adds	r5, #8
 800889a:	e7e5      	b.n	8008868 <_dtoa_r+0x338>
 800889c:	f000 80d2 	beq.w	8008a44 <_dtoa_r+0x514>
 80088a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088a4:	427c      	negs	r4, r7
 80088a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008a50 <_dtoa_r+0x520>)
 80088a8:	f004 020f 	and.w	r2, r4, #15
 80088ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f7f7 fe10 	bl	80004d8 <__aeabi_dmul>
 80088b8:	2602      	movs	r6, #2
 80088ba:	2300      	movs	r3, #0
 80088bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088c0:	4d64      	ldr	r5, [pc, #400]	@ (8008a54 <_dtoa_r+0x524>)
 80088c2:	1124      	asrs	r4, r4, #4
 80088c4:	2c00      	cmp	r4, #0
 80088c6:	f040 80b2 	bne.w	8008a2e <_dtoa_r+0x4fe>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1d3      	bne.n	8008876 <_dtoa_r+0x346>
 80088ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80b7 	beq.w	8008a48 <_dtoa_r+0x518>
 80088da:	2200      	movs	r2, #0
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	4b5d      	ldr	r3, [pc, #372]	@ (8008a58 <_dtoa_r+0x528>)
 80088e2:	f7f8 f86b 	bl	80009bc <__aeabi_dcmplt>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f000 80ae 	beq.w	8008a48 <_dtoa_r+0x518>
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 80aa 	beq.w	8008a48 <_dtoa_r+0x518>
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd37      	ble.n	800896a <_dtoa_r+0x43a>
 80088fa:	1e7b      	subs	r3, r7, #1
 80088fc:	4620      	mov	r0, r4
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	2200      	movs	r2, #0
 8008902:	4629      	mov	r1, r5
 8008904:	4b55      	ldr	r3, [pc, #340]	@ (8008a5c <_dtoa_r+0x52c>)
 8008906:	f7f7 fde7 	bl	80004d8 <__aeabi_dmul>
 800890a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800890e:	9c08      	ldr	r4, [sp, #32]
 8008910:	3601      	adds	r6, #1
 8008912:	4630      	mov	r0, r6
 8008914:	f7f7 fd76 	bl	8000404 <__aeabi_i2d>
 8008918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800891c:	f7f7 fddc 	bl	80004d8 <__aeabi_dmul>
 8008920:	2200      	movs	r2, #0
 8008922:	4b4f      	ldr	r3, [pc, #316]	@ (8008a60 <_dtoa_r+0x530>)
 8008924:	f7f7 fc22 	bl	800016c <__adddf3>
 8008928:	4605      	mov	r5, r0
 800892a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800892e:	2c00      	cmp	r4, #0
 8008930:	f040 809a 	bne.w	8008a68 <_dtoa_r+0x538>
 8008934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008938:	2200      	movs	r2, #0
 800893a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a64 <_dtoa_r+0x534>)
 800893c:	f7f7 fc14 	bl	8000168 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008948:	462a      	mov	r2, r5
 800894a:	4633      	mov	r3, r6
 800894c:	f7f8 f854 	bl	80009f8 <__aeabi_dcmpgt>
 8008950:	2800      	cmp	r0, #0
 8008952:	f040 828e 	bne.w	8008e72 <_dtoa_r+0x942>
 8008956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895a:	462a      	mov	r2, r5
 800895c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008960:	f7f8 f82c 	bl	80009bc <__aeabi_dcmplt>
 8008964:	2800      	cmp	r0, #0
 8008966:	f040 8127 	bne.w	8008bb8 <_dtoa_r+0x688>
 800896a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800896e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008972:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008974:	2b00      	cmp	r3, #0
 8008976:	f2c0 8163 	blt.w	8008c40 <_dtoa_r+0x710>
 800897a:	2f0e      	cmp	r7, #14
 800897c:	f300 8160 	bgt.w	8008c40 <_dtoa_r+0x710>
 8008980:	4b33      	ldr	r3, [pc, #204]	@ (8008a50 <_dtoa_r+0x520>)
 8008982:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800898a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800898e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008990:	2b00      	cmp	r3, #0
 8008992:	da03      	bge.n	800899c <_dtoa_r+0x46c>
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f340 8100 	ble.w	8008b9c <_dtoa_r+0x66c>
 800899c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089a0:	4656      	mov	r6, sl
 80089a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089a6:	4620      	mov	r0, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	f7f7 febf 	bl	800072c <__aeabi_ddiv>
 80089ae:	f7f8 f843 	bl	8000a38 <__aeabi_d2iz>
 80089b2:	4680      	mov	r8, r0
 80089b4:	f7f7 fd26 	bl	8000404 <__aeabi_i2d>
 80089b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089bc:	f7f7 fd8c 	bl	80004d8 <__aeabi_dmul>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fbce 	bl	8000168 <__aeabi_dsub>
 80089cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089d0:	9d07      	ldr	r5, [sp, #28]
 80089d2:	f806 4b01 	strb.w	r4, [r6], #1
 80089d6:	eba6 040a 	sub.w	r4, r6, sl
 80089da:	42a5      	cmp	r5, r4
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	f040 8116 	bne.w	8008c10 <_dtoa_r+0x6e0>
 80089e4:	f7f7 fbc2 	bl	800016c <__adddf3>
 80089e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ec:	4604      	mov	r4, r0
 80089ee:	460d      	mov	r5, r1
 80089f0:	f7f8 f802 	bl	80009f8 <__aeabi_dcmpgt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f040 80f8 	bne.w	8008bea <_dtoa_r+0x6ba>
 80089fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089fe:	4620      	mov	r0, r4
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f7 ffd1 	bl	80009a8 <__aeabi_dcmpeq>
 8008a06:	b118      	cbz	r0, 8008a10 <_dtoa_r+0x4e0>
 8008a08:	f018 0f01 	tst.w	r8, #1
 8008a0c:	f040 80ed 	bne.w	8008bea <_dtoa_r+0x6ba>
 8008a10:	4649      	mov	r1, r9
 8008a12:	4658      	mov	r0, fp
 8008a14:	f000 fbdc 	bl	80091d0 <_Bfree>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	7033      	strb	r3, [r6, #0]
 8008a1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008a1e:	3701      	adds	r7, #1
 8008a20:	601f      	str	r7, [r3, #0]
 8008a22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8320 	beq.w	800906a <_dtoa_r+0xb3a>
 8008a2a:	601e      	str	r6, [r3, #0]
 8008a2c:	e31d      	b.n	800906a <_dtoa_r+0xb3a>
 8008a2e:	07e2      	lsls	r2, r4, #31
 8008a30:	d505      	bpl.n	8008a3e <_dtoa_r+0x50e>
 8008a32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a36:	f7f7 fd4f 	bl	80004d8 <__aeabi_dmul>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	3601      	adds	r6, #1
 8008a3e:	1064      	asrs	r4, r4, #1
 8008a40:	3508      	adds	r5, #8
 8008a42:	e73f      	b.n	80088c4 <_dtoa_r+0x394>
 8008a44:	2602      	movs	r6, #2
 8008a46:	e742      	b.n	80088ce <_dtoa_r+0x39e>
 8008a48:	9c07      	ldr	r4, [sp, #28]
 8008a4a:	9704      	str	r7, [sp, #16]
 8008a4c:	e761      	b.n	8008912 <_dtoa_r+0x3e2>
 8008a4e:	bf00      	nop
 8008a50:	0800a6b8 	.word	0x0800a6b8
 8008a54:	0800a690 	.word	0x0800a690
 8008a58:	3ff00000 	.word	0x3ff00000
 8008a5c:	40240000 	.word	0x40240000
 8008a60:	401c0000 	.word	0x401c0000
 8008a64:	40140000 	.word	0x40140000
 8008a68:	4b70      	ldr	r3, [pc, #448]	@ (8008c2c <_dtoa_r+0x6fc>)
 8008a6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a74:	4454      	add	r4, sl
 8008a76:	2900      	cmp	r1, #0
 8008a78:	d045      	beq.n	8008b06 <_dtoa_r+0x5d6>
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	496c      	ldr	r1, [pc, #432]	@ (8008c30 <_dtoa_r+0x700>)
 8008a7e:	f7f7 fe55 	bl	800072c <__aeabi_ddiv>
 8008a82:	4633      	mov	r3, r6
 8008a84:	462a      	mov	r2, r5
 8008a86:	f7f7 fb6f 	bl	8000168 <__aeabi_dsub>
 8008a8a:	4656      	mov	r6, sl
 8008a8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a94:	f7f7 ffd0 	bl	8000a38 <__aeabi_d2iz>
 8008a98:	4605      	mov	r5, r0
 8008a9a:	f7f7 fcb3 	bl	8000404 <__aeabi_i2d>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa6:	f7f7 fb5f 	bl	8000168 <__aeabi_dsub>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	3530      	adds	r5, #48	@ 0x30
 8008ab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ab4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ab8:	f806 5b01 	strb.w	r5, [r6], #1
 8008abc:	f7f7 ff7e 	bl	80009bc <__aeabi_dcmplt>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d163      	bne.n	8008b8c <_dtoa_r+0x65c>
 8008ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ac8:	2000      	movs	r0, #0
 8008aca:	495a      	ldr	r1, [pc, #360]	@ (8008c34 <_dtoa_r+0x704>)
 8008acc:	f7f7 fb4c 	bl	8000168 <__aeabi_dsub>
 8008ad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ad4:	f7f7 ff72 	bl	80009bc <__aeabi_dcmplt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	f040 8087 	bne.w	8008bec <_dtoa_r+0x6bc>
 8008ade:	42a6      	cmp	r6, r4
 8008ae0:	f43f af43 	beq.w	800896a <_dtoa_r+0x43a>
 8008ae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4b53      	ldr	r3, [pc, #332]	@ (8008c38 <_dtoa_r+0x708>)
 8008aec:	f7f7 fcf4 	bl	80004d8 <__aeabi_dmul>
 8008af0:	2200      	movs	r2, #0
 8008af2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afa:	4b4f      	ldr	r3, [pc, #316]	@ (8008c38 <_dtoa_r+0x708>)
 8008afc:	f7f7 fcec 	bl	80004d8 <__aeabi_dmul>
 8008b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b04:	e7c4      	b.n	8008a90 <_dtoa_r+0x560>
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f7f7 fce5 	bl	80004d8 <__aeabi_dmul>
 8008b0e:	4656      	mov	r6, sl
 8008b10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b14:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b1a:	f7f7 ff8d 	bl	8000a38 <__aeabi_d2iz>
 8008b1e:	4605      	mov	r5, r0
 8008b20:	f7f7 fc70 	bl	8000404 <__aeabi_i2d>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2c:	f7f7 fb1c 	bl	8000168 <__aeabi_dsub>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	3530      	adds	r5, #48	@ 0x30
 8008b36:	f806 5b01 	strb.w	r5, [r6], #1
 8008b3a:	42a6      	cmp	r6, r4
 8008b3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	d124      	bne.n	8008b90 <_dtoa_r+0x660>
 8008b46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b4a:	4b39      	ldr	r3, [pc, #228]	@ (8008c30 <_dtoa_r+0x700>)
 8008b4c:	f7f7 fb0e 	bl	800016c <__adddf3>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b58:	f7f7 ff4e 	bl	80009f8 <__aeabi_dcmpgt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d145      	bne.n	8008bec <_dtoa_r+0x6bc>
 8008b60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b64:	2000      	movs	r0, #0
 8008b66:	4932      	ldr	r1, [pc, #200]	@ (8008c30 <_dtoa_r+0x700>)
 8008b68:	f7f7 fafe 	bl	8000168 <__aeabi_dsub>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b74:	f7f7 ff22 	bl	80009bc <__aeabi_dcmplt>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f43f aef6 	beq.w	800896a <_dtoa_r+0x43a>
 8008b7e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b80:	1e73      	subs	r3, r6, #1
 8008b82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b88:	2b30      	cmp	r3, #48	@ 0x30
 8008b8a:	d0f8      	beq.n	8008b7e <_dtoa_r+0x64e>
 8008b8c:	9f04      	ldr	r7, [sp, #16]
 8008b8e:	e73f      	b.n	8008a10 <_dtoa_r+0x4e0>
 8008b90:	4b29      	ldr	r3, [pc, #164]	@ (8008c38 <_dtoa_r+0x708>)
 8008b92:	f7f7 fca1 	bl	80004d8 <__aeabi_dmul>
 8008b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b9a:	e7bc      	b.n	8008b16 <_dtoa_r+0x5e6>
 8008b9c:	d10c      	bne.n	8008bb8 <_dtoa_r+0x688>
 8008b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4b25      	ldr	r3, [pc, #148]	@ (8008c3c <_dtoa_r+0x70c>)
 8008ba6:	f7f7 fc97 	bl	80004d8 <__aeabi_dmul>
 8008baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bae:	f7f7 ff19 	bl	80009e4 <__aeabi_dcmpge>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f000 815b 	beq.w	8008e6e <_dtoa_r+0x93e>
 8008bb8:	2400      	movs	r4, #0
 8008bba:	4625      	mov	r5, r4
 8008bbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bbe:	4656      	mov	r6, sl
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	2700      	movs	r7, #0
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4658      	mov	r0, fp
 8008bca:	f000 fb01 	bl	80091d0 <_Bfree>
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	d0dc      	beq.n	8008b8c <_dtoa_r+0x65c>
 8008bd2:	b12f      	cbz	r7, 8008be0 <_dtoa_r+0x6b0>
 8008bd4:	42af      	cmp	r7, r5
 8008bd6:	d003      	beq.n	8008be0 <_dtoa_r+0x6b0>
 8008bd8:	4639      	mov	r1, r7
 8008bda:	4658      	mov	r0, fp
 8008bdc:	f000 faf8 	bl	80091d0 <_Bfree>
 8008be0:	4629      	mov	r1, r5
 8008be2:	4658      	mov	r0, fp
 8008be4:	f000 faf4 	bl	80091d0 <_Bfree>
 8008be8:	e7d0      	b.n	8008b8c <_dtoa_r+0x65c>
 8008bea:	9704      	str	r7, [sp, #16]
 8008bec:	4633      	mov	r3, r6
 8008bee:	461e      	mov	r6, r3
 8008bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bf4:	2a39      	cmp	r2, #57	@ 0x39
 8008bf6:	d107      	bne.n	8008c08 <_dtoa_r+0x6d8>
 8008bf8:	459a      	cmp	sl, r3
 8008bfa:	d1f8      	bne.n	8008bee <_dtoa_r+0x6be>
 8008bfc:	9a04      	ldr	r2, [sp, #16]
 8008bfe:	3201      	adds	r2, #1
 8008c00:	9204      	str	r2, [sp, #16]
 8008c02:	2230      	movs	r2, #48	@ 0x30
 8008c04:	f88a 2000 	strb.w	r2, [sl]
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	3201      	adds	r2, #1
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e7bd      	b.n	8008b8c <_dtoa_r+0x65c>
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b09      	ldr	r3, [pc, #36]	@ (8008c38 <_dtoa_r+0x708>)
 8008c14:	f7f7 fc60 	bl	80004d8 <__aeabi_dmul>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	f7f7 fec2 	bl	80009a8 <__aeabi_dcmpeq>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f43f aebc 	beq.w	80089a2 <_dtoa_r+0x472>
 8008c2a:	e6f1      	b.n	8008a10 <_dtoa_r+0x4e0>
 8008c2c:	0800a6b8 	.word	0x0800a6b8
 8008c30:	3fe00000 	.word	0x3fe00000
 8008c34:	3ff00000 	.word	0x3ff00000
 8008c38:	40240000 	.word	0x40240000
 8008c3c:	40140000 	.word	0x40140000
 8008c40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	f000 80db 	beq.w	8008dfe <_dtoa_r+0x8ce>
 8008c48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c4a:	2a01      	cmp	r2, #1
 8008c4c:	f300 80bf 	bgt.w	8008dce <_dtoa_r+0x89e>
 8008c50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	f000 80b7 	beq.w	8008dc6 <_dtoa_r+0x896>
 8008c58:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c5c:	4646      	mov	r6, r8
 8008c5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c62:	2101      	movs	r1, #1
 8008c64:	441a      	add	r2, r3
 8008c66:	4658      	mov	r0, fp
 8008c68:	4498      	add	r8, r3
 8008c6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c6c:	f000 fb64 	bl	8009338 <__i2b>
 8008c70:	4605      	mov	r5, r0
 8008c72:	b15e      	cbz	r6, 8008c8c <_dtoa_r+0x75c>
 8008c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd08      	ble.n	8008c8c <_dtoa_r+0x75c>
 8008c7a:	42b3      	cmp	r3, r6
 8008c7c:	bfa8      	it	ge
 8008c7e:	4633      	movge	r3, r6
 8008c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c82:	eba8 0803 	sub.w	r8, r8, r3
 8008c86:	1af6      	subs	r6, r6, r3
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c8e:	b1f3      	cbz	r3, 8008cce <_dtoa_r+0x79e>
 8008c90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80b7 	beq.w	8008e06 <_dtoa_r+0x8d6>
 8008c98:	b18c      	cbz	r4, 8008cbe <_dtoa_r+0x78e>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f000 fc08 	bl	80094b4 <__pow5mult>
 8008ca4:	464a      	mov	r2, r9
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	4605      	mov	r5, r0
 8008caa:	4658      	mov	r0, fp
 8008cac:	f000 fb5a 	bl	8009364 <__multiply>
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	9004      	str	r0, [sp, #16]
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f000 fa8b 	bl	80091d0 <_Bfree>
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	4699      	mov	r9, r3
 8008cbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cc0:	1b1a      	subs	r2, r3, r4
 8008cc2:	d004      	beq.n	8008cce <_dtoa_r+0x79e>
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	4658      	mov	r0, fp
 8008cc8:	f000 fbf4 	bl	80094b4 <__pow5mult>
 8008ccc:	4681      	mov	r9, r0
 8008cce:	2101      	movs	r1, #1
 8008cd0:	4658      	mov	r0, fp
 8008cd2:	f000 fb31 	bl	8009338 <__i2b>
 8008cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cd8:	4604      	mov	r4, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 81c9 	beq.w	8009072 <_dtoa_r+0xb42>
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f000 fbe5 	bl	80094b4 <__pow5mult>
 8008cea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008cec:	4604      	mov	r4, r0
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	f300 808f 	bgt.w	8008e12 <_dtoa_r+0x8e2>
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 8087 	bne.w	8008e0a <_dtoa_r+0x8da>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 8083 	bne.w	8008e0e <_dtoa_r+0x8de>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d0e:	0d1b      	lsrs	r3, r3, #20
 8008d10:	051b      	lsls	r3, r3, #20
 8008d12:	b12b      	cbz	r3, 8008d20 <_dtoa_r+0x7f0>
 8008d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d16:	f108 0801 	add.w	r8, r8, #1
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1e:	2301      	movs	r3, #1
 8008d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 81aa 	beq.w	800907e <_dtoa_r+0xb4e>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d30:	6918      	ldr	r0, [r3, #16]
 8008d32:	f000 fab5 	bl	80092a0 <__hi0bits>
 8008d36:	f1c0 0020 	rsb	r0, r0, #32
 8008d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3c:	4418      	add	r0, r3
 8008d3e:	f010 001f 	ands.w	r0, r0, #31
 8008d42:	d071      	beq.n	8008e28 <_dtoa_r+0x8f8>
 8008d44:	f1c0 0320 	rsb	r3, r0, #32
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	dd65      	ble.n	8008e18 <_dtoa_r+0x8e8>
 8008d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4e:	f1c0 001c 	rsb	r0, r0, #28
 8008d52:	4403      	add	r3, r0
 8008d54:	4480      	add	r8, r0
 8008d56:	4406      	add	r6, r0
 8008d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	dd05      	ble.n	8008d6c <_dtoa_r+0x83c>
 8008d60:	4649      	mov	r1, r9
 8008d62:	4642      	mov	r2, r8
 8008d64:	4658      	mov	r0, fp
 8008d66:	f000 fbff 	bl	8009568 <__lshift>
 8008d6a:	4681      	mov	r9, r0
 8008d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dd05      	ble.n	8008d7e <_dtoa_r+0x84e>
 8008d72:	4621      	mov	r1, r4
 8008d74:	461a      	mov	r2, r3
 8008d76:	4658      	mov	r0, fp
 8008d78:	f000 fbf6 	bl	8009568 <__lshift>
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d053      	beq.n	8008e2c <_dtoa_r+0x8fc>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4648      	mov	r0, r9
 8008d88:	f000 fc5a 	bl	8009640 <__mcmp>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	da4d      	bge.n	8008e2c <_dtoa_r+0x8fc>
 8008d90:	1e7b      	subs	r3, r7, #1
 8008d92:	4649      	mov	r1, r9
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	220a      	movs	r2, #10
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f000 fa3a 	bl	8009214 <__multadd>
 8008da0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008da2:	4681      	mov	r9, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 816c 	beq.w	8009082 <_dtoa_r+0xb52>
 8008daa:	2300      	movs	r3, #0
 8008dac:	4629      	mov	r1, r5
 8008dae:	220a      	movs	r2, #10
 8008db0:	4658      	mov	r0, fp
 8008db2:	f000 fa2f 	bl	8009214 <__multadd>
 8008db6:	9b08      	ldr	r3, [sp, #32]
 8008db8:	4605      	mov	r5, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dc61      	bgt.n	8008e82 <_dtoa_r+0x952>
 8008dbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	dc3b      	bgt.n	8008e3c <_dtoa_r+0x90c>
 8008dc4:	e05d      	b.n	8008e82 <_dtoa_r+0x952>
 8008dc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008dc8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008dcc:	e746      	b.n	8008c5c <_dtoa_r+0x72c>
 8008dce:	9b07      	ldr	r3, [sp, #28]
 8008dd0:	1e5c      	subs	r4, r3, #1
 8008dd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	bfbf      	itttt	lt
 8008dd8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008dda:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008ddc:	1ae3      	sublt	r3, r4, r3
 8008dde:	18d2      	addlt	r2, r2, r3
 8008de0:	bfa8      	it	ge
 8008de2:	1b1c      	subge	r4, r3, r4
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	bfbe      	ittt	lt
 8008de8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008dea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008dec:	2400      	movlt	r4, #0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	bfb5      	itete	lt
 8008df2:	eba8 0603 	sublt.w	r6, r8, r3
 8008df6:	4646      	movge	r6, r8
 8008df8:	2300      	movlt	r3, #0
 8008dfa:	9b07      	ldrge	r3, [sp, #28]
 8008dfc:	e730      	b.n	8008c60 <_dtoa_r+0x730>
 8008dfe:	4646      	mov	r6, r8
 8008e00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e02:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e04:	e735      	b.n	8008c72 <_dtoa_r+0x742>
 8008e06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e08:	e75c      	b.n	8008cc4 <_dtoa_r+0x794>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e788      	b.n	8008d20 <_dtoa_r+0x7f0>
 8008e0e:	9b02      	ldr	r3, [sp, #8]
 8008e10:	e786      	b.n	8008d20 <_dtoa_r+0x7f0>
 8008e12:	2300      	movs	r3, #0
 8008e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e16:	e788      	b.n	8008d2a <_dtoa_r+0x7fa>
 8008e18:	d09f      	beq.n	8008d5a <_dtoa_r+0x82a>
 8008e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e1c:	331c      	adds	r3, #28
 8008e1e:	441a      	add	r2, r3
 8008e20:	4498      	add	r8, r3
 8008e22:	441e      	add	r6, r3
 8008e24:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e26:	e798      	b.n	8008d5a <_dtoa_r+0x82a>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	e7f6      	b.n	8008e1a <_dtoa_r+0x8ea>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	9704      	str	r7, [sp, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	dc20      	bgt.n	8008e76 <_dtoa_r+0x946>
 8008e34:	9308      	str	r3, [sp, #32]
 8008e36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	dd1e      	ble.n	8008e7a <_dtoa_r+0x94a>
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f47f aebc 	bne.w	8008bbc <_dtoa_r+0x68c>
 8008e44:	4621      	mov	r1, r4
 8008e46:	2205      	movs	r2, #5
 8008e48:	4658      	mov	r0, fp
 8008e4a:	f000 f9e3 	bl	8009214 <__multadd>
 8008e4e:	4601      	mov	r1, r0
 8008e50:	4604      	mov	r4, r0
 8008e52:	4648      	mov	r0, r9
 8008e54:	f000 fbf4 	bl	8009640 <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f77f aeaf 	ble.w	8008bbc <_dtoa_r+0x68c>
 8008e5e:	2331      	movs	r3, #49	@ 0x31
 8008e60:	4656      	mov	r6, sl
 8008e62:	f806 3b01 	strb.w	r3, [r6], #1
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	9304      	str	r3, [sp, #16]
 8008e6c:	e6aa      	b.n	8008bc4 <_dtoa_r+0x694>
 8008e6e:	9c07      	ldr	r4, [sp, #28]
 8008e70:	9704      	str	r7, [sp, #16]
 8008e72:	4625      	mov	r5, r4
 8008e74:	e7f3      	b.n	8008e5e <_dtoa_r+0x92e>
 8008e76:	9b07      	ldr	r3, [sp, #28]
 8008e78:	9308      	str	r3, [sp, #32]
 8008e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8104 	beq.w	800908a <_dtoa_r+0xb5a>
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	dd05      	ble.n	8008e92 <_dtoa_r+0x962>
 8008e86:	4629      	mov	r1, r5
 8008e88:	4632      	mov	r2, r6
 8008e8a:	4658      	mov	r0, fp
 8008e8c:	f000 fb6c 	bl	8009568 <__lshift>
 8008e90:	4605      	mov	r5, r0
 8008e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d05a      	beq.n	8008f4e <_dtoa_r+0xa1e>
 8008e98:	4658      	mov	r0, fp
 8008e9a:	6869      	ldr	r1, [r5, #4]
 8008e9c:	f000 f958 	bl	8009150 <_Balloc>
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	b928      	cbnz	r0, 8008eb0 <_dtoa_r+0x980>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008eaa:	4b83      	ldr	r3, [pc, #524]	@ (80090b8 <_dtoa_r+0xb88>)
 8008eac:	f7ff bb54 	b.w	8008558 <_dtoa_r+0x28>
 8008eb0:	692a      	ldr	r2, [r5, #16]
 8008eb2:	f105 010c 	add.w	r1, r5, #12
 8008eb6:	3202      	adds	r2, #2
 8008eb8:	0092      	lsls	r2, r2, #2
 8008eba:	300c      	adds	r0, #12
 8008ebc:	f7ff fa81 	bl	80083c2 <memcpy>
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	f000 fb4f 	bl	8009568 <__lshift>
 8008eca:	462f      	mov	r7, r5
 8008ecc:	4605      	mov	r5, r0
 8008ece:	f10a 0301 	add.w	r3, sl, #1
 8008ed2:	9307      	str	r3, [sp, #28]
 8008ed4:	9b08      	ldr	r3, [sp, #32]
 8008ed6:	4453      	add	r3, sl
 8008ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ee2:	9b07      	ldr	r3, [sp, #28]
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	4648      	mov	r0, r9
 8008eea:	9302      	str	r3, [sp, #8]
 8008eec:	f7ff fa96 	bl	800841c <quorem>
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	9008      	str	r0, [sp, #32]
 8008ef4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ef8:	4648      	mov	r0, r9
 8008efa:	f000 fba1 	bl	8009640 <__mcmp>
 8008efe:	462a      	mov	r2, r5
 8008f00:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f02:	4621      	mov	r1, r4
 8008f04:	4658      	mov	r0, fp
 8008f06:	f000 fbb7 	bl	8009678 <__mdiff>
 8008f0a:	68c2      	ldr	r2, [r0, #12]
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	bb02      	cbnz	r2, 8008f52 <_dtoa_r+0xa22>
 8008f10:	4601      	mov	r1, r0
 8008f12:	4648      	mov	r0, r9
 8008f14:	f000 fb94 	bl	8009640 <__mcmp>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f20:	f000 f956 	bl	80091d0 <_Bfree>
 8008f24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f28:	9e07      	ldr	r6, [sp, #28]
 8008f2a:	ea43 0102 	orr.w	r1, r3, r2
 8008f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f30:	4319      	orrs	r1, r3
 8008f32:	d110      	bne.n	8008f56 <_dtoa_r+0xa26>
 8008f34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f38:	d029      	beq.n	8008f8e <_dtoa_r+0xa5e>
 8008f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dd02      	ble.n	8008f46 <_dtoa_r+0xa16>
 8008f40:	9b08      	ldr	r3, [sp, #32]
 8008f42:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f46:	9b02      	ldr	r3, [sp, #8]
 8008f48:	f883 8000 	strb.w	r8, [r3]
 8008f4c:	e63b      	b.n	8008bc6 <_dtoa_r+0x696>
 8008f4e:	4628      	mov	r0, r5
 8008f50:	e7bb      	b.n	8008eca <_dtoa_r+0x99a>
 8008f52:	2201      	movs	r2, #1
 8008f54:	e7e1      	b.n	8008f1a <_dtoa_r+0x9ea>
 8008f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db04      	blt.n	8008f66 <_dtoa_r+0xa36>
 8008f5c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f62:	430b      	orrs	r3, r1
 8008f64:	d120      	bne.n	8008fa8 <_dtoa_r+0xa78>
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	dded      	ble.n	8008f46 <_dtoa_r+0xa16>
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	4658      	mov	r0, fp
 8008f70:	f000 fafa 	bl	8009568 <__lshift>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4681      	mov	r9, r0
 8008f78:	f000 fb62 	bl	8009640 <__mcmp>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	dc03      	bgt.n	8008f88 <_dtoa_r+0xa58>
 8008f80:	d1e1      	bne.n	8008f46 <_dtoa_r+0xa16>
 8008f82:	f018 0f01 	tst.w	r8, #1
 8008f86:	d0de      	beq.n	8008f46 <_dtoa_r+0xa16>
 8008f88:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f8c:	d1d8      	bne.n	8008f40 <_dtoa_r+0xa10>
 8008f8e:	2339      	movs	r3, #57	@ 0x39
 8008f90:	9a02      	ldr	r2, [sp, #8]
 8008f92:	7013      	strb	r3, [r2, #0]
 8008f94:	4633      	mov	r3, r6
 8008f96:	461e      	mov	r6, r3
 8008f98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	2a39      	cmp	r2, #57	@ 0x39
 8008fa0:	d052      	beq.n	8009048 <_dtoa_r+0xb18>
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	e60e      	b.n	8008bc6 <_dtoa_r+0x696>
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	dd07      	ble.n	8008fbc <_dtoa_r+0xa8c>
 8008fac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fb0:	d0ed      	beq.n	8008f8e <_dtoa_r+0xa5e>
 8008fb2:	9a02      	ldr	r2, [sp, #8]
 8008fb4:	f108 0301 	add.w	r3, r8, #1
 8008fb8:	7013      	strb	r3, [r2, #0]
 8008fba:	e604      	b.n	8008bc6 <_dtoa_r+0x696>
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	9a07      	ldr	r2, [sp, #28]
 8008fc0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008fc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d028      	beq.n	800901c <_dtoa_r+0xaec>
 8008fca:	4649      	mov	r1, r9
 8008fcc:	2300      	movs	r3, #0
 8008fce:	220a      	movs	r2, #10
 8008fd0:	4658      	mov	r0, fp
 8008fd2:	f000 f91f 	bl	8009214 <__multadd>
 8008fd6:	42af      	cmp	r7, r5
 8008fd8:	4681      	mov	r9, r0
 8008fda:	f04f 0300 	mov.w	r3, #0
 8008fde:	f04f 020a 	mov.w	r2, #10
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	d107      	bne.n	8008ff8 <_dtoa_r+0xac8>
 8008fe8:	f000 f914 	bl	8009214 <__multadd>
 8008fec:	4607      	mov	r7, r0
 8008fee:	4605      	mov	r5, r0
 8008ff0:	9b07      	ldr	r3, [sp, #28]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	9307      	str	r3, [sp, #28]
 8008ff6:	e774      	b.n	8008ee2 <_dtoa_r+0x9b2>
 8008ff8:	f000 f90c 	bl	8009214 <__multadd>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4607      	mov	r7, r0
 8009000:	2300      	movs	r3, #0
 8009002:	220a      	movs	r2, #10
 8009004:	4658      	mov	r0, fp
 8009006:	f000 f905 	bl	8009214 <__multadd>
 800900a:	4605      	mov	r5, r0
 800900c:	e7f0      	b.n	8008ff0 <_dtoa_r+0xac0>
 800900e:	9b08      	ldr	r3, [sp, #32]
 8009010:	2700      	movs	r7, #0
 8009012:	2b00      	cmp	r3, #0
 8009014:	bfcc      	ite	gt
 8009016:	461e      	movgt	r6, r3
 8009018:	2601      	movle	r6, #1
 800901a:	4456      	add	r6, sl
 800901c:	4649      	mov	r1, r9
 800901e:	2201      	movs	r2, #1
 8009020:	4658      	mov	r0, fp
 8009022:	f000 faa1 	bl	8009568 <__lshift>
 8009026:	4621      	mov	r1, r4
 8009028:	4681      	mov	r9, r0
 800902a:	f000 fb09 	bl	8009640 <__mcmp>
 800902e:	2800      	cmp	r0, #0
 8009030:	dcb0      	bgt.n	8008f94 <_dtoa_r+0xa64>
 8009032:	d102      	bne.n	800903a <_dtoa_r+0xb0a>
 8009034:	f018 0f01 	tst.w	r8, #1
 8009038:	d1ac      	bne.n	8008f94 <_dtoa_r+0xa64>
 800903a:	4633      	mov	r3, r6
 800903c:	461e      	mov	r6, r3
 800903e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009042:	2a30      	cmp	r2, #48	@ 0x30
 8009044:	d0fa      	beq.n	800903c <_dtoa_r+0xb0c>
 8009046:	e5be      	b.n	8008bc6 <_dtoa_r+0x696>
 8009048:	459a      	cmp	sl, r3
 800904a:	d1a4      	bne.n	8008f96 <_dtoa_r+0xa66>
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	3301      	adds	r3, #1
 8009050:	9304      	str	r3, [sp, #16]
 8009052:	2331      	movs	r3, #49	@ 0x31
 8009054:	f88a 3000 	strb.w	r3, [sl]
 8009058:	e5b5      	b.n	8008bc6 <_dtoa_r+0x696>
 800905a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800905c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80090bc <_dtoa_r+0xb8c>
 8009060:	b11b      	cbz	r3, 800906a <_dtoa_r+0xb3a>
 8009062:	f10a 0308 	add.w	r3, sl, #8
 8009066:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	4650      	mov	r0, sl
 800906c:	b017      	add	sp, #92	@ 0x5c
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009074:	2b01      	cmp	r3, #1
 8009076:	f77f ae3d 	ble.w	8008cf4 <_dtoa_r+0x7c4>
 800907a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800907c:	930a      	str	r3, [sp, #40]	@ 0x28
 800907e:	2001      	movs	r0, #1
 8009080:	e65b      	b.n	8008d3a <_dtoa_r+0x80a>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f77f aed6 	ble.w	8008e36 <_dtoa_r+0x906>
 800908a:	4656      	mov	r6, sl
 800908c:	4621      	mov	r1, r4
 800908e:	4648      	mov	r0, r9
 8009090:	f7ff f9c4 	bl	800841c <quorem>
 8009094:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009098:	9b08      	ldr	r3, [sp, #32]
 800909a:	f806 8b01 	strb.w	r8, [r6], #1
 800909e:	eba6 020a 	sub.w	r2, r6, sl
 80090a2:	4293      	cmp	r3, r2
 80090a4:	ddb3      	ble.n	800900e <_dtoa_r+0xade>
 80090a6:	4649      	mov	r1, r9
 80090a8:	2300      	movs	r3, #0
 80090aa:	220a      	movs	r2, #10
 80090ac:	4658      	mov	r0, fp
 80090ae:	f000 f8b1 	bl	8009214 <__multadd>
 80090b2:	4681      	mov	r9, r0
 80090b4:	e7ea      	b.n	800908c <_dtoa_r+0xb5c>
 80090b6:	bf00      	nop
 80090b8:	0800a614 	.word	0x0800a614
 80090bc:	0800a598 	.word	0x0800a598

080090c0 <_free_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4605      	mov	r5, r0
 80090c4:	2900      	cmp	r1, #0
 80090c6:	d040      	beq.n	800914a <_free_r+0x8a>
 80090c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090cc:	1f0c      	subs	r4, r1, #4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfb8      	it	lt
 80090d2:	18e4      	addlt	r4, r4, r3
 80090d4:	f7fe fa66 	bl	80075a4 <__malloc_lock>
 80090d8:	4a1c      	ldr	r2, [pc, #112]	@ (800914c <_free_r+0x8c>)
 80090da:	6813      	ldr	r3, [r2, #0]
 80090dc:	b933      	cbnz	r3, 80090ec <_free_r+0x2c>
 80090de:	6063      	str	r3, [r4, #4]
 80090e0:	6014      	str	r4, [r2, #0]
 80090e2:	4628      	mov	r0, r5
 80090e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e8:	f7fe ba62 	b.w	80075b0 <__malloc_unlock>
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d908      	bls.n	8009102 <_free_r+0x42>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	1821      	adds	r1, r4, r0
 80090f4:	428b      	cmp	r3, r1
 80090f6:	bf01      	itttt	eq
 80090f8:	6819      	ldreq	r1, [r3, #0]
 80090fa:	685b      	ldreq	r3, [r3, #4]
 80090fc:	1809      	addeq	r1, r1, r0
 80090fe:	6021      	streq	r1, [r4, #0]
 8009100:	e7ed      	b.n	80090de <_free_r+0x1e>
 8009102:	461a      	mov	r2, r3
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	b10b      	cbz	r3, 800910c <_free_r+0x4c>
 8009108:	42a3      	cmp	r3, r4
 800910a:	d9fa      	bls.n	8009102 <_free_r+0x42>
 800910c:	6811      	ldr	r1, [r2, #0]
 800910e:	1850      	adds	r0, r2, r1
 8009110:	42a0      	cmp	r0, r4
 8009112:	d10b      	bne.n	800912c <_free_r+0x6c>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	4401      	add	r1, r0
 8009118:	1850      	adds	r0, r2, r1
 800911a:	4283      	cmp	r3, r0
 800911c:	6011      	str	r1, [r2, #0]
 800911e:	d1e0      	bne.n	80090e2 <_free_r+0x22>
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	4408      	add	r0, r1
 8009126:	6010      	str	r0, [r2, #0]
 8009128:	6053      	str	r3, [r2, #4]
 800912a:	e7da      	b.n	80090e2 <_free_r+0x22>
 800912c:	d902      	bls.n	8009134 <_free_r+0x74>
 800912e:	230c      	movs	r3, #12
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	e7d6      	b.n	80090e2 <_free_r+0x22>
 8009134:	6820      	ldr	r0, [r4, #0]
 8009136:	1821      	adds	r1, r4, r0
 8009138:	428b      	cmp	r3, r1
 800913a:	bf01      	itttt	eq
 800913c:	6819      	ldreq	r1, [r3, #0]
 800913e:	685b      	ldreq	r3, [r3, #4]
 8009140:	1809      	addeq	r1, r1, r0
 8009142:	6021      	streq	r1, [r4, #0]
 8009144:	6063      	str	r3, [r4, #4]
 8009146:	6054      	str	r4, [r2, #4]
 8009148:	e7cb      	b.n	80090e2 <_free_r+0x22>
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	2000065c 	.word	0x2000065c

08009150 <_Balloc>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	69c6      	ldr	r6, [r0, #28]
 8009154:	4604      	mov	r4, r0
 8009156:	460d      	mov	r5, r1
 8009158:	b976      	cbnz	r6, 8009178 <_Balloc+0x28>
 800915a:	2010      	movs	r0, #16
 800915c:	f7fe f978 	bl	8007450 <malloc>
 8009160:	4602      	mov	r2, r0
 8009162:	61e0      	str	r0, [r4, #28]
 8009164:	b920      	cbnz	r0, 8009170 <_Balloc+0x20>
 8009166:	216b      	movs	r1, #107	@ 0x6b
 8009168:	4b17      	ldr	r3, [pc, #92]	@ (80091c8 <_Balloc+0x78>)
 800916a:	4818      	ldr	r0, [pc, #96]	@ (80091cc <_Balloc+0x7c>)
 800916c:	f7ff f938 	bl	80083e0 <__assert_func>
 8009170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009174:	6006      	str	r6, [r0, #0]
 8009176:	60c6      	str	r6, [r0, #12]
 8009178:	69e6      	ldr	r6, [r4, #28]
 800917a:	68f3      	ldr	r3, [r6, #12]
 800917c:	b183      	cbz	r3, 80091a0 <_Balloc+0x50>
 800917e:	69e3      	ldr	r3, [r4, #28]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009186:	b9b8      	cbnz	r0, 80091b8 <_Balloc+0x68>
 8009188:	2101      	movs	r1, #1
 800918a:	fa01 f605 	lsl.w	r6, r1, r5
 800918e:	1d72      	adds	r2, r6, #5
 8009190:	4620      	mov	r0, r4
 8009192:	0092      	lsls	r2, r2, #2
 8009194:	f000 fde1 	bl	8009d5a <_calloc_r>
 8009198:	b160      	cbz	r0, 80091b4 <_Balloc+0x64>
 800919a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800919e:	e00e      	b.n	80091be <_Balloc+0x6e>
 80091a0:	2221      	movs	r2, #33	@ 0x21
 80091a2:	2104      	movs	r1, #4
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fdd8 	bl	8009d5a <_calloc_r>
 80091aa:	69e3      	ldr	r3, [r4, #28]
 80091ac:	60f0      	str	r0, [r6, #12]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e4      	bne.n	800917e <_Balloc+0x2e>
 80091b4:	2000      	movs	r0, #0
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	6802      	ldr	r2, [r0, #0]
 80091ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091be:	2300      	movs	r3, #0
 80091c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091c4:	e7f7      	b.n	80091b6 <_Balloc+0x66>
 80091c6:	bf00      	nop
 80091c8:	0800a5a5 	.word	0x0800a5a5
 80091cc:	0800a625 	.word	0x0800a625

080091d0 <_Bfree>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	69c6      	ldr	r6, [r0, #28]
 80091d4:	4605      	mov	r5, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	b976      	cbnz	r6, 80091f8 <_Bfree+0x28>
 80091da:	2010      	movs	r0, #16
 80091dc:	f7fe f938 	bl	8007450 <malloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	61e8      	str	r0, [r5, #28]
 80091e4:	b920      	cbnz	r0, 80091f0 <_Bfree+0x20>
 80091e6:	218f      	movs	r1, #143	@ 0x8f
 80091e8:	4b08      	ldr	r3, [pc, #32]	@ (800920c <_Bfree+0x3c>)
 80091ea:	4809      	ldr	r0, [pc, #36]	@ (8009210 <_Bfree+0x40>)
 80091ec:	f7ff f8f8 	bl	80083e0 <__assert_func>
 80091f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091f4:	6006      	str	r6, [r0, #0]
 80091f6:	60c6      	str	r6, [r0, #12]
 80091f8:	b13c      	cbz	r4, 800920a <_Bfree+0x3a>
 80091fa:	69eb      	ldr	r3, [r5, #28]
 80091fc:	6862      	ldr	r2, [r4, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009204:	6021      	str	r1, [r4, #0]
 8009206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	0800a5a5 	.word	0x0800a5a5
 8009210:	0800a625 	.word	0x0800a625

08009214 <__multadd>:
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	4607      	mov	r7, r0
 800921a:	460c      	mov	r4, r1
 800921c:	461e      	mov	r6, r3
 800921e:	2000      	movs	r0, #0
 8009220:	690d      	ldr	r5, [r1, #16]
 8009222:	f101 0c14 	add.w	ip, r1, #20
 8009226:	f8dc 3000 	ldr.w	r3, [ip]
 800922a:	3001      	adds	r0, #1
 800922c:	b299      	uxth	r1, r3
 800922e:	fb02 6101 	mla	r1, r2, r1, r6
 8009232:	0c1e      	lsrs	r6, r3, #16
 8009234:	0c0b      	lsrs	r3, r1, #16
 8009236:	fb02 3306 	mla	r3, r2, r6, r3
 800923a:	b289      	uxth	r1, r1
 800923c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009240:	4285      	cmp	r5, r0
 8009242:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009246:	f84c 1b04 	str.w	r1, [ip], #4
 800924a:	dcec      	bgt.n	8009226 <__multadd+0x12>
 800924c:	b30e      	cbz	r6, 8009292 <__multadd+0x7e>
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	42ab      	cmp	r3, r5
 8009252:	dc19      	bgt.n	8009288 <__multadd+0x74>
 8009254:	6861      	ldr	r1, [r4, #4]
 8009256:	4638      	mov	r0, r7
 8009258:	3101      	adds	r1, #1
 800925a:	f7ff ff79 	bl	8009150 <_Balloc>
 800925e:	4680      	mov	r8, r0
 8009260:	b928      	cbnz	r0, 800926e <__multadd+0x5a>
 8009262:	4602      	mov	r2, r0
 8009264:	21ba      	movs	r1, #186	@ 0xba
 8009266:	4b0c      	ldr	r3, [pc, #48]	@ (8009298 <__multadd+0x84>)
 8009268:	480c      	ldr	r0, [pc, #48]	@ (800929c <__multadd+0x88>)
 800926a:	f7ff f8b9 	bl	80083e0 <__assert_func>
 800926e:	6922      	ldr	r2, [r4, #16]
 8009270:	f104 010c 	add.w	r1, r4, #12
 8009274:	3202      	adds	r2, #2
 8009276:	0092      	lsls	r2, r2, #2
 8009278:	300c      	adds	r0, #12
 800927a:	f7ff f8a2 	bl	80083c2 <memcpy>
 800927e:	4621      	mov	r1, r4
 8009280:	4638      	mov	r0, r7
 8009282:	f7ff ffa5 	bl	80091d0 <_Bfree>
 8009286:	4644      	mov	r4, r8
 8009288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800928c:	3501      	adds	r5, #1
 800928e:	615e      	str	r6, [r3, #20]
 8009290:	6125      	str	r5, [r4, #16]
 8009292:	4620      	mov	r0, r4
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	0800a614 	.word	0x0800a614
 800929c:	0800a625 	.word	0x0800a625

080092a0 <__hi0bits>:
 80092a0:	4603      	mov	r3, r0
 80092a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092a6:	bf3a      	itte	cc
 80092a8:	0403      	lslcc	r3, r0, #16
 80092aa:	2010      	movcc	r0, #16
 80092ac:	2000      	movcs	r0, #0
 80092ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092b2:	bf3c      	itt	cc
 80092b4:	021b      	lslcc	r3, r3, #8
 80092b6:	3008      	addcc	r0, #8
 80092b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092bc:	bf3c      	itt	cc
 80092be:	011b      	lslcc	r3, r3, #4
 80092c0:	3004      	addcc	r0, #4
 80092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c6:	bf3c      	itt	cc
 80092c8:	009b      	lslcc	r3, r3, #2
 80092ca:	3002      	addcc	r0, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	db05      	blt.n	80092dc <__hi0bits+0x3c>
 80092d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092d4:	f100 0001 	add.w	r0, r0, #1
 80092d8:	bf08      	it	eq
 80092da:	2020      	moveq	r0, #32
 80092dc:	4770      	bx	lr

080092de <__lo0bits>:
 80092de:	6803      	ldr	r3, [r0, #0]
 80092e0:	4602      	mov	r2, r0
 80092e2:	f013 0007 	ands.w	r0, r3, #7
 80092e6:	d00b      	beq.n	8009300 <__lo0bits+0x22>
 80092e8:	07d9      	lsls	r1, r3, #31
 80092ea:	d421      	bmi.n	8009330 <__lo0bits+0x52>
 80092ec:	0798      	lsls	r0, r3, #30
 80092ee:	bf49      	itett	mi
 80092f0:	085b      	lsrmi	r3, r3, #1
 80092f2:	089b      	lsrpl	r3, r3, #2
 80092f4:	2001      	movmi	r0, #1
 80092f6:	6013      	strmi	r3, [r2, #0]
 80092f8:	bf5c      	itt	pl
 80092fa:	2002      	movpl	r0, #2
 80092fc:	6013      	strpl	r3, [r2, #0]
 80092fe:	4770      	bx	lr
 8009300:	b299      	uxth	r1, r3
 8009302:	b909      	cbnz	r1, 8009308 <__lo0bits+0x2a>
 8009304:	2010      	movs	r0, #16
 8009306:	0c1b      	lsrs	r3, r3, #16
 8009308:	b2d9      	uxtb	r1, r3
 800930a:	b909      	cbnz	r1, 8009310 <__lo0bits+0x32>
 800930c:	3008      	adds	r0, #8
 800930e:	0a1b      	lsrs	r3, r3, #8
 8009310:	0719      	lsls	r1, r3, #28
 8009312:	bf04      	itt	eq
 8009314:	091b      	lsreq	r3, r3, #4
 8009316:	3004      	addeq	r0, #4
 8009318:	0799      	lsls	r1, r3, #30
 800931a:	bf04      	itt	eq
 800931c:	089b      	lsreq	r3, r3, #2
 800931e:	3002      	addeq	r0, #2
 8009320:	07d9      	lsls	r1, r3, #31
 8009322:	d403      	bmi.n	800932c <__lo0bits+0x4e>
 8009324:	085b      	lsrs	r3, r3, #1
 8009326:	f100 0001 	add.w	r0, r0, #1
 800932a:	d003      	beq.n	8009334 <__lo0bits+0x56>
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	4770      	bx	lr
 8009330:	2000      	movs	r0, #0
 8009332:	4770      	bx	lr
 8009334:	2020      	movs	r0, #32
 8009336:	4770      	bx	lr

08009338 <__i2b>:
 8009338:	b510      	push	{r4, lr}
 800933a:	460c      	mov	r4, r1
 800933c:	2101      	movs	r1, #1
 800933e:	f7ff ff07 	bl	8009150 <_Balloc>
 8009342:	4602      	mov	r2, r0
 8009344:	b928      	cbnz	r0, 8009352 <__i2b+0x1a>
 8009346:	f240 1145 	movw	r1, #325	@ 0x145
 800934a:	4b04      	ldr	r3, [pc, #16]	@ (800935c <__i2b+0x24>)
 800934c:	4804      	ldr	r0, [pc, #16]	@ (8009360 <__i2b+0x28>)
 800934e:	f7ff f847 	bl	80083e0 <__assert_func>
 8009352:	2301      	movs	r3, #1
 8009354:	6144      	str	r4, [r0, #20]
 8009356:	6103      	str	r3, [r0, #16]
 8009358:	bd10      	pop	{r4, pc}
 800935a:	bf00      	nop
 800935c:	0800a614 	.word	0x0800a614
 8009360:	0800a625 	.word	0x0800a625

08009364 <__multiply>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4614      	mov	r4, r2
 800936a:	690a      	ldr	r2, [r1, #16]
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	460f      	mov	r7, r1
 8009370:	429a      	cmp	r2, r3
 8009372:	bfa2      	ittt	ge
 8009374:	4623      	movge	r3, r4
 8009376:	460c      	movge	r4, r1
 8009378:	461f      	movge	r7, r3
 800937a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800937e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	6861      	ldr	r1, [r4, #4]
 8009386:	eb0a 0609 	add.w	r6, sl, r9
 800938a:	42b3      	cmp	r3, r6
 800938c:	b085      	sub	sp, #20
 800938e:	bfb8      	it	lt
 8009390:	3101      	addlt	r1, #1
 8009392:	f7ff fedd 	bl	8009150 <_Balloc>
 8009396:	b930      	cbnz	r0, 80093a6 <__multiply+0x42>
 8009398:	4602      	mov	r2, r0
 800939a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800939e:	4b43      	ldr	r3, [pc, #268]	@ (80094ac <__multiply+0x148>)
 80093a0:	4843      	ldr	r0, [pc, #268]	@ (80094b0 <__multiply+0x14c>)
 80093a2:	f7ff f81d 	bl	80083e0 <__assert_func>
 80093a6:	f100 0514 	add.w	r5, r0, #20
 80093aa:	462b      	mov	r3, r5
 80093ac:	2200      	movs	r2, #0
 80093ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093b2:	4543      	cmp	r3, r8
 80093b4:	d321      	bcc.n	80093fa <__multiply+0x96>
 80093b6:	f107 0114 	add.w	r1, r7, #20
 80093ba:	f104 0214 	add.w	r2, r4, #20
 80093be:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80093c2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80093c6:	9302      	str	r3, [sp, #8]
 80093c8:	1b13      	subs	r3, r2, r4
 80093ca:	3b15      	subs	r3, #21
 80093cc:	f023 0303 	bic.w	r3, r3, #3
 80093d0:	3304      	adds	r3, #4
 80093d2:	f104 0715 	add.w	r7, r4, #21
 80093d6:	42ba      	cmp	r2, r7
 80093d8:	bf38      	it	cc
 80093da:	2304      	movcc	r3, #4
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	9103      	str	r1, [sp, #12]
 80093e2:	428b      	cmp	r3, r1
 80093e4:	d80c      	bhi.n	8009400 <__multiply+0x9c>
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	dd03      	ble.n	80093f2 <__multiply+0x8e>
 80093ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d05a      	beq.n	80094a8 <__multiply+0x144>
 80093f2:	6106      	str	r6, [r0, #16]
 80093f4:	b005      	add	sp, #20
 80093f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fa:	f843 2b04 	str.w	r2, [r3], #4
 80093fe:	e7d8      	b.n	80093b2 <__multiply+0x4e>
 8009400:	f8b1 a000 	ldrh.w	sl, [r1]
 8009404:	f1ba 0f00 	cmp.w	sl, #0
 8009408:	d023      	beq.n	8009452 <__multiply+0xee>
 800940a:	46a9      	mov	r9, r5
 800940c:	f04f 0c00 	mov.w	ip, #0
 8009410:	f104 0e14 	add.w	lr, r4, #20
 8009414:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009418:	f8d9 3000 	ldr.w	r3, [r9]
 800941c:	fa1f fb87 	uxth.w	fp, r7
 8009420:	b29b      	uxth	r3, r3
 8009422:	fb0a 330b 	mla	r3, sl, fp, r3
 8009426:	4463      	add	r3, ip
 8009428:	f8d9 c000 	ldr.w	ip, [r9]
 800942c:	0c3f      	lsrs	r7, r7, #16
 800942e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009432:	fb0a c707 	mla	r7, sl, r7, ip
 8009436:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800943a:	b29b      	uxth	r3, r3
 800943c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009440:	4572      	cmp	r2, lr
 8009442:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009446:	f849 3b04 	str.w	r3, [r9], #4
 800944a:	d8e3      	bhi.n	8009414 <__multiply+0xb0>
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	f845 c003 	str.w	ip, [r5, r3]
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	3104      	adds	r1, #4
 8009456:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800945a:	f1b9 0f00 	cmp.w	r9, #0
 800945e:	d021      	beq.n	80094a4 <__multiply+0x140>
 8009460:	46ae      	mov	lr, r5
 8009462:	f04f 0a00 	mov.w	sl, #0
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	f104 0c14 	add.w	ip, r4, #20
 800946c:	f8bc b000 	ldrh.w	fp, [ip]
 8009470:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009474:	b29b      	uxth	r3, r3
 8009476:	fb09 770b 	mla	r7, r9, fp, r7
 800947a:	4457      	add	r7, sl
 800947c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009480:	f84e 3b04 	str.w	r3, [lr], #4
 8009484:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800948c:	f8be 3000 	ldrh.w	r3, [lr]
 8009490:	4562      	cmp	r2, ip
 8009492:	fb09 330a 	mla	r3, r9, sl, r3
 8009496:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800949a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800949e:	d8e5      	bhi.n	800946c <__multiply+0x108>
 80094a0:	9f01      	ldr	r7, [sp, #4]
 80094a2:	51eb      	str	r3, [r5, r7]
 80094a4:	3504      	adds	r5, #4
 80094a6:	e79a      	b.n	80093de <__multiply+0x7a>
 80094a8:	3e01      	subs	r6, #1
 80094aa:	e79c      	b.n	80093e6 <__multiply+0x82>
 80094ac:	0800a614 	.word	0x0800a614
 80094b0:	0800a625 	.word	0x0800a625

080094b4 <__pow5mult>:
 80094b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b8:	4615      	mov	r5, r2
 80094ba:	f012 0203 	ands.w	r2, r2, #3
 80094be:	4607      	mov	r7, r0
 80094c0:	460e      	mov	r6, r1
 80094c2:	d007      	beq.n	80094d4 <__pow5mult+0x20>
 80094c4:	4c25      	ldr	r4, [pc, #148]	@ (800955c <__pow5mult+0xa8>)
 80094c6:	3a01      	subs	r2, #1
 80094c8:	2300      	movs	r3, #0
 80094ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ce:	f7ff fea1 	bl	8009214 <__multadd>
 80094d2:	4606      	mov	r6, r0
 80094d4:	10ad      	asrs	r5, r5, #2
 80094d6:	d03d      	beq.n	8009554 <__pow5mult+0xa0>
 80094d8:	69fc      	ldr	r4, [r7, #28]
 80094da:	b97c      	cbnz	r4, 80094fc <__pow5mult+0x48>
 80094dc:	2010      	movs	r0, #16
 80094de:	f7fd ffb7 	bl	8007450 <malloc>
 80094e2:	4602      	mov	r2, r0
 80094e4:	61f8      	str	r0, [r7, #28]
 80094e6:	b928      	cbnz	r0, 80094f4 <__pow5mult+0x40>
 80094e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009560 <__pow5mult+0xac>)
 80094ee:	481d      	ldr	r0, [pc, #116]	@ (8009564 <__pow5mult+0xb0>)
 80094f0:	f7fe ff76 	bl	80083e0 <__assert_func>
 80094f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094f8:	6004      	str	r4, [r0, #0]
 80094fa:	60c4      	str	r4, [r0, #12]
 80094fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009504:	b94c      	cbnz	r4, 800951a <__pow5mult+0x66>
 8009506:	f240 2171 	movw	r1, #625	@ 0x271
 800950a:	4638      	mov	r0, r7
 800950c:	f7ff ff14 	bl	8009338 <__i2b>
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	f8c8 0008 	str.w	r0, [r8, #8]
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	f04f 0900 	mov.w	r9, #0
 800951e:	07eb      	lsls	r3, r5, #31
 8009520:	d50a      	bpl.n	8009538 <__pow5mult+0x84>
 8009522:	4631      	mov	r1, r6
 8009524:	4622      	mov	r2, r4
 8009526:	4638      	mov	r0, r7
 8009528:	f7ff ff1c 	bl	8009364 <__multiply>
 800952c:	4680      	mov	r8, r0
 800952e:	4631      	mov	r1, r6
 8009530:	4638      	mov	r0, r7
 8009532:	f7ff fe4d 	bl	80091d0 <_Bfree>
 8009536:	4646      	mov	r6, r8
 8009538:	106d      	asrs	r5, r5, #1
 800953a:	d00b      	beq.n	8009554 <__pow5mult+0xa0>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	b938      	cbnz	r0, 8009550 <__pow5mult+0x9c>
 8009540:	4622      	mov	r2, r4
 8009542:	4621      	mov	r1, r4
 8009544:	4638      	mov	r0, r7
 8009546:	f7ff ff0d 	bl	8009364 <__multiply>
 800954a:	6020      	str	r0, [r4, #0]
 800954c:	f8c0 9000 	str.w	r9, [r0]
 8009550:	4604      	mov	r4, r0
 8009552:	e7e4      	b.n	800951e <__pow5mult+0x6a>
 8009554:	4630      	mov	r0, r6
 8009556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955a:	bf00      	nop
 800955c:	0800a680 	.word	0x0800a680
 8009560:	0800a5a5 	.word	0x0800a5a5
 8009564:	0800a625 	.word	0x0800a625

08009568 <__lshift>:
 8009568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956c:	460c      	mov	r4, r1
 800956e:	4607      	mov	r7, r0
 8009570:	4691      	mov	r9, r2
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	6849      	ldr	r1, [r1, #4]
 8009576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800957a:	68a3      	ldr	r3, [r4, #8]
 800957c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009580:	f108 0601 	add.w	r6, r8, #1
 8009584:	42b3      	cmp	r3, r6
 8009586:	db0b      	blt.n	80095a0 <__lshift+0x38>
 8009588:	4638      	mov	r0, r7
 800958a:	f7ff fde1 	bl	8009150 <_Balloc>
 800958e:	4605      	mov	r5, r0
 8009590:	b948      	cbnz	r0, 80095a6 <__lshift+0x3e>
 8009592:	4602      	mov	r2, r0
 8009594:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009598:	4b27      	ldr	r3, [pc, #156]	@ (8009638 <__lshift+0xd0>)
 800959a:	4828      	ldr	r0, [pc, #160]	@ (800963c <__lshift+0xd4>)
 800959c:	f7fe ff20 	bl	80083e0 <__assert_func>
 80095a0:	3101      	adds	r1, #1
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	e7ee      	b.n	8009584 <__lshift+0x1c>
 80095a6:	2300      	movs	r3, #0
 80095a8:	f100 0114 	add.w	r1, r0, #20
 80095ac:	f100 0210 	add.w	r2, r0, #16
 80095b0:	4618      	mov	r0, r3
 80095b2:	4553      	cmp	r3, sl
 80095b4:	db33      	blt.n	800961e <__lshift+0xb6>
 80095b6:	6920      	ldr	r0, [r4, #16]
 80095b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095bc:	f104 0314 	add.w	r3, r4, #20
 80095c0:	f019 091f 	ands.w	r9, r9, #31
 80095c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095cc:	d02b      	beq.n	8009626 <__lshift+0xbe>
 80095ce:	468a      	mov	sl, r1
 80095d0:	2200      	movs	r2, #0
 80095d2:	f1c9 0e20 	rsb	lr, r9, #32
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	fa00 f009 	lsl.w	r0, r0, r9
 80095dc:	4310      	orrs	r0, r2
 80095de:	f84a 0b04 	str.w	r0, [sl], #4
 80095e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e6:	459c      	cmp	ip, r3
 80095e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80095ec:	d8f3      	bhi.n	80095d6 <__lshift+0x6e>
 80095ee:	ebac 0304 	sub.w	r3, ip, r4
 80095f2:	3b15      	subs	r3, #21
 80095f4:	f023 0303 	bic.w	r3, r3, #3
 80095f8:	3304      	adds	r3, #4
 80095fa:	f104 0015 	add.w	r0, r4, #21
 80095fe:	4584      	cmp	ip, r0
 8009600:	bf38      	it	cc
 8009602:	2304      	movcc	r3, #4
 8009604:	50ca      	str	r2, [r1, r3]
 8009606:	b10a      	cbz	r2, 800960c <__lshift+0xa4>
 8009608:	f108 0602 	add.w	r6, r8, #2
 800960c:	3e01      	subs	r6, #1
 800960e:	4638      	mov	r0, r7
 8009610:	4621      	mov	r1, r4
 8009612:	612e      	str	r6, [r5, #16]
 8009614:	f7ff fddc 	bl	80091d0 <_Bfree>
 8009618:	4628      	mov	r0, r5
 800961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009622:	3301      	adds	r3, #1
 8009624:	e7c5      	b.n	80095b2 <__lshift+0x4a>
 8009626:	3904      	subs	r1, #4
 8009628:	f853 2b04 	ldr.w	r2, [r3], #4
 800962c:	459c      	cmp	ip, r3
 800962e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009632:	d8f9      	bhi.n	8009628 <__lshift+0xc0>
 8009634:	e7ea      	b.n	800960c <__lshift+0xa4>
 8009636:	bf00      	nop
 8009638:	0800a614 	.word	0x0800a614
 800963c:	0800a625 	.word	0x0800a625

08009640 <__mcmp>:
 8009640:	4603      	mov	r3, r0
 8009642:	690a      	ldr	r2, [r1, #16]
 8009644:	6900      	ldr	r0, [r0, #16]
 8009646:	b530      	push	{r4, r5, lr}
 8009648:	1a80      	subs	r0, r0, r2
 800964a:	d10e      	bne.n	800966a <__mcmp+0x2a>
 800964c:	3314      	adds	r3, #20
 800964e:	3114      	adds	r1, #20
 8009650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800965c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009660:	4295      	cmp	r5, r2
 8009662:	d003      	beq.n	800966c <__mcmp+0x2c>
 8009664:	d205      	bcs.n	8009672 <__mcmp+0x32>
 8009666:	f04f 30ff 	mov.w	r0, #4294967295
 800966a:	bd30      	pop	{r4, r5, pc}
 800966c:	42a3      	cmp	r3, r4
 800966e:	d3f3      	bcc.n	8009658 <__mcmp+0x18>
 8009670:	e7fb      	b.n	800966a <__mcmp+0x2a>
 8009672:	2001      	movs	r0, #1
 8009674:	e7f9      	b.n	800966a <__mcmp+0x2a>
	...

08009678 <__mdiff>:
 8009678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	4689      	mov	r9, r1
 800967e:	4606      	mov	r6, r0
 8009680:	4611      	mov	r1, r2
 8009682:	4648      	mov	r0, r9
 8009684:	4614      	mov	r4, r2
 8009686:	f7ff ffdb 	bl	8009640 <__mcmp>
 800968a:	1e05      	subs	r5, r0, #0
 800968c:	d112      	bne.n	80096b4 <__mdiff+0x3c>
 800968e:	4629      	mov	r1, r5
 8009690:	4630      	mov	r0, r6
 8009692:	f7ff fd5d 	bl	8009150 <_Balloc>
 8009696:	4602      	mov	r2, r0
 8009698:	b928      	cbnz	r0, 80096a6 <__mdiff+0x2e>
 800969a:	f240 2137 	movw	r1, #567	@ 0x237
 800969e:	4b3e      	ldr	r3, [pc, #248]	@ (8009798 <__mdiff+0x120>)
 80096a0:	483e      	ldr	r0, [pc, #248]	@ (800979c <__mdiff+0x124>)
 80096a2:	f7fe fe9d 	bl	80083e0 <__assert_func>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096ac:	4610      	mov	r0, r2
 80096ae:	b003      	add	sp, #12
 80096b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b4:	bfbc      	itt	lt
 80096b6:	464b      	movlt	r3, r9
 80096b8:	46a1      	movlt	r9, r4
 80096ba:	4630      	mov	r0, r6
 80096bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096c0:	bfba      	itte	lt
 80096c2:	461c      	movlt	r4, r3
 80096c4:	2501      	movlt	r5, #1
 80096c6:	2500      	movge	r5, #0
 80096c8:	f7ff fd42 	bl	8009150 <_Balloc>
 80096cc:	4602      	mov	r2, r0
 80096ce:	b918      	cbnz	r0, 80096d8 <__mdiff+0x60>
 80096d0:	f240 2145 	movw	r1, #581	@ 0x245
 80096d4:	4b30      	ldr	r3, [pc, #192]	@ (8009798 <__mdiff+0x120>)
 80096d6:	e7e3      	b.n	80096a0 <__mdiff+0x28>
 80096d8:	f100 0b14 	add.w	fp, r0, #20
 80096dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096e0:	f109 0310 	add.w	r3, r9, #16
 80096e4:	60c5      	str	r5, [r0, #12]
 80096e6:	f04f 0c00 	mov.w	ip, #0
 80096ea:	f109 0514 	add.w	r5, r9, #20
 80096ee:	46d9      	mov	r9, fp
 80096f0:	6926      	ldr	r6, [r4, #16]
 80096f2:	f104 0e14 	add.w	lr, r4, #20
 80096f6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096fa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009706:	f853 af04 	ldr.w	sl, [r3, #4]!
 800970a:	b281      	uxth	r1, r0
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	fa1f f38a 	uxth.w	r3, sl
 8009712:	1a5b      	subs	r3, r3, r1
 8009714:	0c00      	lsrs	r0, r0, #16
 8009716:	4463      	add	r3, ip
 8009718:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800971c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009720:	b29b      	uxth	r3, r3
 8009722:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009726:	4576      	cmp	r6, lr
 8009728:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800972c:	f849 3b04 	str.w	r3, [r9], #4
 8009730:	d8e6      	bhi.n	8009700 <__mdiff+0x88>
 8009732:	1b33      	subs	r3, r6, r4
 8009734:	3b15      	subs	r3, #21
 8009736:	f023 0303 	bic.w	r3, r3, #3
 800973a:	3415      	adds	r4, #21
 800973c:	3304      	adds	r3, #4
 800973e:	42a6      	cmp	r6, r4
 8009740:	bf38      	it	cc
 8009742:	2304      	movcc	r3, #4
 8009744:	441d      	add	r5, r3
 8009746:	445b      	add	r3, fp
 8009748:	461e      	mov	r6, r3
 800974a:	462c      	mov	r4, r5
 800974c:	4544      	cmp	r4, r8
 800974e:	d30e      	bcc.n	800976e <__mdiff+0xf6>
 8009750:	f108 0103 	add.w	r1, r8, #3
 8009754:	1b49      	subs	r1, r1, r5
 8009756:	f021 0103 	bic.w	r1, r1, #3
 800975a:	3d03      	subs	r5, #3
 800975c:	45a8      	cmp	r8, r5
 800975e:	bf38      	it	cc
 8009760:	2100      	movcc	r1, #0
 8009762:	440b      	add	r3, r1
 8009764:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009768:	b199      	cbz	r1, 8009792 <__mdiff+0x11a>
 800976a:	6117      	str	r7, [r2, #16]
 800976c:	e79e      	b.n	80096ac <__mdiff+0x34>
 800976e:	46e6      	mov	lr, ip
 8009770:	f854 1b04 	ldr.w	r1, [r4], #4
 8009774:	fa1f fc81 	uxth.w	ip, r1
 8009778:	44f4      	add	ip, lr
 800977a:	0c08      	lsrs	r0, r1, #16
 800977c:	4471      	add	r1, lr
 800977e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009782:	b289      	uxth	r1, r1
 8009784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009788:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800978c:	f846 1b04 	str.w	r1, [r6], #4
 8009790:	e7dc      	b.n	800974c <__mdiff+0xd4>
 8009792:	3f01      	subs	r7, #1
 8009794:	e7e6      	b.n	8009764 <__mdiff+0xec>
 8009796:	bf00      	nop
 8009798:	0800a614 	.word	0x0800a614
 800979c:	0800a625 	.word	0x0800a625

080097a0 <__d2b>:
 80097a0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80097a4:	2101      	movs	r1, #1
 80097a6:	4690      	mov	r8, r2
 80097a8:	4699      	mov	r9, r3
 80097aa:	9e08      	ldr	r6, [sp, #32]
 80097ac:	f7ff fcd0 	bl	8009150 <_Balloc>
 80097b0:	4604      	mov	r4, r0
 80097b2:	b930      	cbnz	r0, 80097c2 <__d2b+0x22>
 80097b4:	4602      	mov	r2, r0
 80097b6:	f240 310f 	movw	r1, #783	@ 0x30f
 80097ba:	4b23      	ldr	r3, [pc, #140]	@ (8009848 <__d2b+0xa8>)
 80097bc:	4823      	ldr	r0, [pc, #140]	@ (800984c <__d2b+0xac>)
 80097be:	f7fe fe0f 	bl	80083e0 <__assert_func>
 80097c2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097ca:	b10d      	cbz	r5, 80097d0 <__d2b+0x30>
 80097cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	f1b8 0300 	subs.w	r3, r8, #0
 80097d6:	d024      	beq.n	8009822 <__d2b+0x82>
 80097d8:	4668      	mov	r0, sp
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	f7ff fd7f 	bl	80092de <__lo0bits>
 80097e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097e4:	b1d8      	cbz	r0, 800981e <__d2b+0x7e>
 80097e6:	f1c0 0320 	rsb	r3, r0, #32
 80097ea:	fa02 f303 	lsl.w	r3, r2, r3
 80097ee:	430b      	orrs	r3, r1
 80097f0:	40c2      	lsrs	r2, r0
 80097f2:	6163      	str	r3, [r4, #20]
 80097f4:	9201      	str	r2, [sp, #4]
 80097f6:	9b01      	ldr	r3, [sp, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bf0c      	ite	eq
 80097fc:	2201      	moveq	r2, #1
 80097fe:	2202      	movne	r2, #2
 8009800:	61a3      	str	r3, [r4, #24]
 8009802:	6122      	str	r2, [r4, #16]
 8009804:	b1ad      	cbz	r5, 8009832 <__d2b+0x92>
 8009806:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800980a:	4405      	add	r5, r0
 800980c:	6035      	str	r5, [r6, #0]
 800980e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009814:	6018      	str	r0, [r3, #0]
 8009816:	4620      	mov	r0, r4
 8009818:	b002      	add	sp, #8
 800981a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800981e:	6161      	str	r1, [r4, #20]
 8009820:	e7e9      	b.n	80097f6 <__d2b+0x56>
 8009822:	a801      	add	r0, sp, #4
 8009824:	f7ff fd5b 	bl	80092de <__lo0bits>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	6163      	str	r3, [r4, #20]
 800982e:	3020      	adds	r0, #32
 8009830:	e7e7      	b.n	8009802 <__d2b+0x62>
 8009832:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009836:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800983a:	6030      	str	r0, [r6, #0]
 800983c:	6918      	ldr	r0, [r3, #16]
 800983e:	f7ff fd2f 	bl	80092a0 <__hi0bits>
 8009842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009846:	e7e4      	b.n	8009812 <__d2b+0x72>
 8009848:	0800a614 	.word	0x0800a614
 800984c:	0800a625 	.word	0x0800a625

08009850 <__sfputc_r>:
 8009850:	6893      	ldr	r3, [r2, #8]
 8009852:	b410      	push	{r4}
 8009854:	3b01      	subs	r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	6093      	str	r3, [r2, #8]
 800985a:	da07      	bge.n	800986c <__sfputc_r+0x1c>
 800985c:	6994      	ldr	r4, [r2, #24]
 800985e:	42a3      	cmp	r3, r4
 8009860:	db01      	blt.n	8009866 <__sfputc_r+0x16>
 8009862:	290a      	cmp	r1, #10
 8009864:	d102      	bne.n	800986c <__sfputc_r+0x1c>
 8009866:	bc10      	pop	{r4}
 8009868:	f7fe bc79 	b.w	800815e <__swbuf_r>
 800986c:	6813      	ldr	r3, [r2, #0]
 800986e:	1c58      	adds	r0, r3, #1
 8009870:	6010      	str	r0, [r2, #0]
 8009872:	7019      	strb	r1, [r3, #0]
 8009874:	4608      	mov	r0, r1
 8009876:	bc10      	pop	{r4}
 8009878:	4770      	bx	lr

0800987a <__sfputs_r>:
 800987a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987c:	4606      	mov	r6, r0
 800987e:	460f      	mov	r7, r1
 8009880:	4614      	mov	r4, r2
 8009882:	18d5      	adds	r5, r2, r3
 8009884:	42ac      	cmp	r4, r5
 8009886:	d101      	bne.n	800988c <__sfputs_r+0x12>
 8009888:	2000      	movs	r0, #0
 800988a:	e007      	b.n	800989c <__sfputs_r+0x22>
 800988c:	463a      	mov	r2, r7
 800988e:	4630      	mov	r0, r6
 8009890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009894:	f7ff ffdc 	bl	8009850 <__sfputc_r>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d1f3      	bne.n	8009884 <__sfputs_r+0xa>
 800989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098a0 <_vfiprintf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	460d      	mov	r5, r1
 80098a6:	4614      	mov	r4, r2
 80098a8:	4698      	mov	r8, r3
 80098aa:	4606      	mov	r6, r0
 80098ac:	b09d      	sub	sp, #116	@ 0x74
 80098ae:	b118      	cbz	r0, 80098b8 <_vfiprintf_r+0x18>
 80098b0:	6a03      	ldr	r3, [r0, #32]
 80098b2:	b90b      	cbnz	r3, 80098b8 <_vfiprintf_r+0x18>
 80098b4:	f7fe fb6a 	bl	8007f8c <__sinit>
 80098b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098ba:	07d9      	lsls	r1, r3, #31
 80098bc:	d405      	bmi.n	80098ca <_vfiprintf_r+0x2a>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	059a      	lsls	r2, r3, #22
 80098c2:	d402      	bmi.n	80098ca <_vfiprintf_r+0x2a>
 80098c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098c6:	f7fe fd6c 	bl	80083a2 <__retarget_lock_acquire_recursive>
 80098ca:	89ab      	ldrh	r3, [r5, #12]
 80098cc:	071b      	lsls	r3, r3, #28
 80098ce:	d501      	bpl.n	80098d4 <_vfiprintf_r+0x34>
 80098d0:	692b      	ldr	r3, [r5, #16]
 80098d2:	b99b      	cbnz	r3, 80098fc <_vfiprintf_r+0x5c>
 80098d4:	4629      	mov	r1, r5
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7fe fc80 	bl	80081dc <__swsetup_r>
 80098dc:	b170      	cbz	r0, 80098fc <_vfiprintf_r+0x5c>
 80098de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098e0:	07dc      	lsls	r4, r3, #31
 80098e2:	d504      	bpl.n	80098ee <_vfiprintf_r+0x4e>
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	b01d      	add	sp, #116	@ 0x74
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	89ab      	ldrh	r3, [r5, #12]
 80098f0:	0598      	lsls	r0, r3, #22
 80098f2:	d4f7      	bmi.n	80098e4 <_vfiprintf_r+0x44>
 80098f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098f6:	f7fe fd55 	bl	80083a4 <__retarget_lock_release_recursive>
 80098fa:	e7f3      	b.n	80098e4 <_vfiprintf_r+0x44>
 80098fc:	2300      	movs	r3, #0
 80098fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009900:	2320      	movs	r3, #32
 8009902:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009906:	2330      	movs	r3, #48	@ 0x30
 8009908:	f04f 0901 	mov.w	r9, #1
 800990c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009910:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009abc <_vfiprintf_r+0x21c>
 8009914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009918:	4623      	mov	r3, r4
 800991a:	469a      	mov	sl, r3
 800991c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009920:	b10a      	cbz	r2, 8009926 <_vfiprintf_r+0x86>
 8009922:	2a25      	cmp	r2, #37	@ 0x25
 8009924:	d1f9      	bne.n	800991a <_vfiprintf_r+0x7a>
 8009926:	ebba 0b04 	subs.w	fp, sl, r4
 800992a:	d00b      	beq.n	8009944 <_vfiprintf_r+0xa4>
 800992c:	465b      	mov	r3, fp
 800992e:	4622      	mov	r2, r4
 8009930:	4629      	mov	r1, r5
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff ffa1 	bl	800987a <__sfputs_r>
 8009938:	3001      	adds	r0, #1
 800993a:	f000 80a7 	beq.w	8009a8c <_vfiprintf_r+0x1ec>
 800993e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009940:	445a      	add	r2, fp
 8009942:	9209      	str	r2, [sp, #36]	@ 0x24
 8009944:	f89a 3000 	ldrb.w	r3, [sl]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 809f 	beq.w	8009a8c <_vfiprintf_r+0x1ec>
 800994e:	2300      	movs	r3, #0
 8009950:	f04f 32ff 	mov.w	r2, #4294967295
 8009954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009958:	f10a 0a01 	add.w	sl, sl, #1
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009964:	931a      	str	r3, [sp, #104]	@ 0x68
 8009966:	4654      	mov	r4, sl
 8009968:	2205      	movs	r2, #5
 800996a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996e:	4853      	ldr	r0, [pc, #332]	@ (8009abc <_vfiprintf_r+0x21c>)
 8009970:	f7fe fd19 	bl	80083a6 <memchr>
 8009974:	9a04      	ldr	r2, [sp, #16]
 8009976:	b9d8      	cbnz	r0, 80099b0 <_vfiprintf_r+0x110>
 8009978:	06d1      	lsls	r1, r2, #27
 800997a:	bf44      	itt	mi
 800997c:	2320      	movmi	r3, #32
 800997e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009982:	0713      	lsls	r3, r2, #28
 8009984:	bf44      	itt	mi
 8009986:	232b      	movmi	r3, #43	@ 0x2b
 8009988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800998c:	f89a 3000 	ldrb.w	r3, [sl]
 8009990:	2b2a      	cmp	r3, #42	@ 0x2a
 8009992:	d015      	beq.n	80099c0 <_vfiprintf_r+0x120>
 8009994:	4654      	mov	r4, sl
 8009996:	2000      	movs	r0, #0
 8009998:	f04f 0c0a 	mov.w	ip, #10
 800999c:	9a07      	ldr	r2, [sp, #28]
 800999e:	4621      	mov	r1, r4
 80099a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a4:	3b30      	subs	r3, #48	@ 0x30
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d94b      	bls.n	8009a42 <_vfiprintf_r+0x1a2>
 80099aa:	b1b0      	cbz	r0, 80099da <_vfiprintf_r+0x13a>
 80099ac:	9207      	str	r2, [sp, #28]
 80099ae:	e014      	b.n	80099da <_vfiprintf_r+0x13a>
 80099b0:	eba0 0308 	sub.w	r3, r0, r8
 80099b4:	fa09 f303 	lsl.w	r3, r9, r3
 80099b8:	4313      	orrs	r3, r2
 80099ba:	46a2      	mov	sl, r4
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	e7d2      	b.n	8009966 <_vfiprintf_r+0xc6>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	1d19      	adds	r1, r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	9103      	str	r1, [sp, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfbb      	ittet	lt
 80099cc:	425b      	neglt	r3, r3
 80099ce:	f042 0202 	orrlt.w	r2, r2, #2
 80099d2:	9307      	strge	r3, [sp, #28]
 80099d4:	9307      	strlt	r3, [sp, #28]
 80099d6:	bfb8      	it	lt
 80099d8:	9204      	strlt	r2, [sp, #16]
 80099da:	7823      	ldrb	r3, [r4, #0]
 80099dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80099de:	d10a      	bne.n	80099f6 <_vfiprintf_r+0x156>
 80099e0:	7863      	ldrb	r3, [r4, #1]
 80099e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e4:	d132      	bne.n	8009a4c <_vfiprintf_r+0x1ac>
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	3402      	adds	r4, #2
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009ac0 <_vfiprintf_r+0x220>
 80099fa:	2203      	movs	r2, #3
 80099fc:	4650      	mov	r0, sl
 80099fe:	7821      	ldrb	r1, [r4, #0]
 8009a00:	f7fe fcd1 	bl	80083a6 <memchr>
 8009a04:	b138      	cbz	r0, 8009a16 <_vfiprintf_r+0x176>
 8009a06:	2240      	movs	r2, #64	@ 0x40
 8009a08:	9b04      	ldr	r3, [sp, #16]
 8009a0a:	eba0 000a 	sub.w	r0, r0, sl
 8009a0e:	4082      	lsls	r2, r0
 8009a10:	4313      	orrs	r3, r2
 8009a12:	3401      	adds	r4, #1
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1a:	2206      	movs	r2, #6
 8009a1c:	4829      	ldr	r0, [pc, #164]	@ (8009ac4 <_vfiprintf_r+0x224>)
 8009a1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a22:	f7fe fcc0 	bl	80083a6 <memchr>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d03f      	beq.n	8009aaa <_vfiprintf_r+0x20a>
 8009a2a:	4b27      	ldr	r3, [pc, #156]	@ (8009ac8 <_vfiprintf_r+0x228>)
 8009a2c:	bb1b      	cbnz	r3, 8009a76 <_vfiprintf_r+0x1d6>
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	3308      	adds	r3, #8
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3c:	443b      	add	r3, r7
 8009a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a40:	e76a      	b.n	8009918 <_vfiprintf_r+0x78>
 8009a42:	460c      	mov	r4, r1
 8009a44:	2001      	movs	r0, #1
 8009a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4a:	e7a8      	b.n	800999e <_vfiprintf_r+0xfe>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f04f 0c0a 	mov.w	ip, #10
 8009a52:	4619      	mov	r1, r3
 8009a54:	3401      	adds	r4, #1
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5e:	3a30      	subs	r2, #48	@ 0x30
 8009a60:	2a09      	cmp	r2, #9
 8009a62:	d903      	bls.n	8009a6c <_vfiprintf_r+0x1cc>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0c6      	beq.n	80099f6 <_vfiprintf_r+0x156>
 8009a68:	9105      	str	r1, [sp, #20]
 8009a6a:	e7c4      	b.n	80099f6 <_vfiprintf_r+0x156>
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	2301      	movs	r3, #1
 8009a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a74:	e7f0      	b.n	8009a58 <_vfiprintf_r+0x1b8>
 8009a76:	ab03      	add	r3, sp, #12
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	4b13      	ldr	r3, [pc, #76]	@ (8009acc <_vfiprintf_r+0x22c>)
 8009a80:	a904      	add	r1, sp, #16
 8009a82:	f7fd fe39 	bl	80076f8 <_printf_float>
 8009a86:	4607      	mov	r7, r0
 8009a88:	1c78      	adds	r0, r7, #1
 8009a8a:	d1d6      	bne.n	8009a3a <_vfiprintf_r+0x19a>
 8009a8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a8e:	07d9      	lsls	r1, r3, #31
 8009a90:	d405      	bmi.n	8009a9e <_vfiprintf_r+0x1fe>
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	059a      	lsls	r2, r3, #22
 8009a96:	d402      	bmi.n	8009a9e <_vfiprintf_r+0x1fe>
 8009a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a9a:	f7fe fc83 	bl	80083a4 <__retarget_lock_release_recursive>
 8009a9e:	89ab      	ldrh	r3, [r5, #12]
 8009aa0:	065b      	lsls	r3, r3, #25
 8009aa2:	f53f af1f 	bmi.w	80098e4 <_vfiprintf_r+0x44>
 8009aa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009aa8:	e71e      	b.n	80098e8 <_vfiprintf_r+0x48>
 8009aaa:	ab03      	add	r3, sp, #12
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	4b06      	ldr	r3, [pc, #24]	@ (8009acc <_vfiprintf_r+0x22c>)
 8009ab4:	a904      	add	r1, sp, #16
 8009ab6:	f7fe f8bd 	bl	8007c34 <_printf_i>
 8009aba:	e7e4      	b.n	8009a86 <_vfiprintf_r+0x1e6>
 8009abc:	0800a780 	.word	0x0800a780
 8009ac0:	0800a786 	.word	0x0800a786
 8009ac4:	0800a78a 	.word	0x0800a78a
 8009ac8:	080076f9 	.word	0x080076f9
 8009acc:	0800987b 	.word	0x0800987b

08009ad0 <__sflush_r>:
 8009ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	0716      	lsls	r6, r2, #28
 8009ad8:	4605      	mov	r5, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	d454      	bmi.n	8009b88 <__sflush_r+0xb8>
 8009ade:	684b      	ldr	r3, [r1, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dc02      	bgt.n	8009aea <__sflush_r+0x1a>
 8009ae4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dd48      	ble.n	8009b7c <__sflush_r+0xac>
 8009aea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	d045      	beq.n	8009b7c <__sflush_r+0xac>
 8009af0:	2300      	movs	r3, #0
 8009af2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009af6:	682f      	ldr	r7, [r5, #0]
 8009af8:	6a21      	ldr	r1, [r4, #32]
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	d030      	beq.n	8009b60 <__sflush_r+0x90>
 8009afe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	0759      	lsls	r1, r3, #29
 8009b04:	d505      	bpl.n	8009b12 <__sflush_r+0x42>
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	1ad2      	subs	r2, r2, r3
 8009b0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b0c:	b10b      	cbz	r3, 8009b12 <__sflush_r+0x42>
 8009b0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b10:	1ad2      	subs	r2, r2, r3
 8009b12:	2300      	movs	r3, #0
 8009b14:	4628      	mov	r0, r5
 8009b16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b18:	6a21      	ldr	r1, [r4, #32]
 8009b1a:	47b0      	blx	r6
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	d106      	bne.n	8009b30 <__sflush_r+0x60>
 8009b22:	6829      	ldr	r1, [r5, #0]
 8009b24:	291d      	cmp	r1, #29
 8009b26:	d82b      	bhi.n	8009b80 <__sflush_r+0xb0>
 8009b28:	4a28      	ldr	r2, [pc, #160]	@ (8009bcc <__sflush_r+0xfc>)
 8009b2a:	410a      	asrs	r2, r1
 8009b2c:	07d6      	lsls	r6, r2, #31
 8009b2e:	d427      	bmi.n	8009b80 <__sflush_r+0xb0>
 8009b30:	2200      	movs	r2, #0
 8009b32:	6062      	str	r2, [r4, #4]
 8009b34:	6922      	ldr	r2, [r4, #16]
 8009b36:	04d9      	lsls	r1, r3, #19
 8009b38:	6022      	str	r2, [r4, #0]
 8009b3a:	d504      	bpl.n	8009b46 <__sflush_r+0x76>
 8009b3c:	1c42      	adds	r2, r0, #1
 8009b3e:	d101      	bne.n	8009b44 <__sflush_r+0x74>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b903      	cbnz	r3, 8009b46 <__sflush_r+0x76>
 8009b44:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b48:	602f      	str	r7, [r5, #0]
 8009b4a:	b1b9      	cbz	r1, 8009b7c <__sflush_r+0xac>
 8009b4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b50:	4299      	cmp	r1, r3
 8009b52:	d002      	beq.n	8009b5a <__sflush_r+0x8a>
 8009b54:	4628      	mov	r0, r5
 8009b56:	f7ff fab3 	bl	80090c0 <_free_r>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b5e:	e00d      	b.n	8009b7c <__sflush_r+0xac>
 8009b60:	2301      	movs	r3, #1
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b0      	blx	r6
 8009b66:	4602      	mov	r2, r0
 8009b68:	1c50      	adds	r0, r2, #1
 8009b6a:	d1c9      	bne.n	8009b00 <__sflush_r+0x30>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0c6      	beq.n	8009b00 <__sflush_r+0x30>
 8009b72:	2b1d      	cmp	r3, #29
 8009b74:	d001      	beq.n	8009b7a <__sflush_r+0xaa>
 8009b76:	2b16      	cmp	r3, #22
 8009b78:	d11d      	bne.n	8009bb6 <__sflush_r+0xe6>
 8009b7a:	602f      	str	r7, [r5, #0]
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e021      	b.n	8009bc4 <__sflush_r+0xf4>
 8009b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b84:	b21b      	sxth	r3, r3
 8009b86:	e01a      	b.n	8009bbe <__sflush_r+0xee>
 8009b88:	690f      	ldr	r7, [r1, #16]
 8009b8a:	2f00      	cmp	r7, #0
 8009b8c:	d0f6      	beq.n	8009b7c <__sflush_r+0xac>
 8009b8e:	0793      	lsls	r3, r2, #30
 8009b90:	bf18      	it	ne
 8009b92:	2300      	movne	r3, #0
 8009b94:	680e      	ldr	r6, [r1, #0]
 8009b96:	bf08      	it	eq
 8009b98:	694b      	ldreq	r3, [r1, #20]
 8009b9a:	1bf6      	subs	r6, r6, r7
 8009b9c:	600f      	str	r7, [r1, #0]
 8009b9e:	608b      	str	r3, [r1, #8]
 8009ba0:	2e00      	cmp	r6, #0
 8009ba2:	ddeb      	ble.n	8009b7c <__sflush_r+0xac>
 8009ba4:	4633      	mov	r3, r6
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	4628      	mov	r0, r5
 8009baa:	6a21      	ldr	r1, [r4, #32]
 8009bac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009bb0:	47e0      	blx	ip
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	dc07      	bgt.n	8009bc6 <__sflush_r+0xf6>
 8009bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc6:	4407      	add	r7, r0
 8009bc8:	1a36      	subs	r6, r6, r0
 8009bca:	e7e9      	b.n	8009ba0 <__sflush_r+0xd0>
 8009bcc:	dfbffffe 	.word	0xdfbffffe

08009bd0 <_fflush_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	690b      	ldr	r3, [r1, #16]
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	b913      	cbnz	r3, 8009be0 <_fflush_r+0x10>
 8009bda:	2500      	movs	r5, #0
 8009bdc:	4628      	mov	r0, r5
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	b118      	cbz	r0, 8009bea <_fflush_r+0x1a>
 8009be2:	6a03      	ldr	r3, [r0, #32]
 8009be4:	b90b      	cbnz	r3, 8009bea <_fflush_r+0x1a>
 8009be6:	f7fe f9d1 	bl	8007f8c <__sinit>
 8009bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0f3      	beq.n	8009bda <_fflush_r+0xa>
 8009bf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bf4:	07d0      	lsls	r0, r2, #31
 8009bf6:	d404      	bmi.n	8009c02 <_fflush_r+0x32>
 8009bf8:	0599      	lsls	r1, r3, #22
 8009bfa:	d402      	bmi.n	8009c02 <_fflush_r+0x32>
 8009bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bfe:	f7fe fbd0 	bl	80083a2 <__retarget_lock_acquire_recursive>
 8009c02:	4628      	mov	r0, r5
 8009c04:	4621      	mov	r1, r4
 8009c06:	f7ff ff63 	bl	8009ad0 <__sflush_r>
 8009c0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	07da      	lsls	r2, r3, #31
 8009c10:	d4e4      	bmi.n	8009bdc <_fflush_r+0xc>
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	059b      	lsls	r3, r3, #22
 8009c16:	d4e1      	bmi.n	8009bdc <_fflush_r+0xc>
 8009c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c1a:	f7fe fbc3 	bl	80083a4 <__retarget_lock_release_recursive>
 8009c1e:	e7dd      	b.n	8009bdc <_fflush_r+0xc>

08009c20 <fiprintf>:
 8009c20:	b40e      	push	{r1, r2, r3}
 8009c22:	b503      	push	{r0, r1, lr}
 8009c24:	4601      	mov	r1, r0
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	4805      	ldr	r0, [pc, #20]	@ (8009c40 <fiprintf+0x20>)
 8009c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c2e:	6800      	ldr	r0, [r0, #0]
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	f7ff fe35 	bl	80098a0 <_vfiprintf_r>
 8009c36:	b002      	add	sp, #8
 8009c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c3c:	b003      	add	sp, #12
 8009c3e:	4770      	bx	lr
 8009c40:	2000002c 	.word	0x2000002c

08009c44 <__swhatbuf_r>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	460c      	mov	r4, r1
 8009c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4c:	4615      	mov	r5, r2
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	461e      	mov	r6, r3
 8009c52:	b096      	sub	sp, #88	@ 0x58
 8009c54:	da0c      	bge.n	8009c70 <__swhatbuf_r+0x2c>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	2100      	movs	r1, #0
 8009c5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c5e:	bf14      	ite	ne
 8009c60:	2340      	movne	r3, #64	@ 0x40
 8009c62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c66:	2000      	movs	r0, #0
 8009c68:	6031      	str	r1, [r6, #0]
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	b016      	add	sp, #88	@ 0x58
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	466a      	mov	r2, sp
 8009c72:	f000 f849 	bl	8009d08 <_fstat_r>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	dbed      	blt.n	8009c56 <__swhatbuf_r+0x12>
 8009c7a:	9901      	ldr	r1, [sp, #4]
 8009c7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c84:	4259      	negs	r1, r3
 8009c86:	4159      	adcs	r1, r3
 8009c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c8c:	e7eb      	b.n	8009c66 <__swhatbuf_r+0x22>

08009c8e <__smakebuf_r>:
 8009c8e:	898b      	ldrh	r3, [r1, #12]
 8009c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c92:	079d      	lsls	r5, r3, #30
 8009c94:	4606      	mov	r6, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	d507      	bpl.n	8009caa <__smakebuf_r+0x1c>
 8009c9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	6163      	str	r3, [r4, #20]
 8009ca6:	b003      	add	sp, #12
 8009ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009caa:	466a      	mov	r2, sp
 8009cac:	ab01      	add	r3, sp, #4
 8009cae:	f7ff ffc9 	bl	8009c44 <__swhatbuf_r>
 8009cb2:	9f00      	ldr	r7, [sp, #0]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7fd fbf3 	bl	80074a4 <_malloc_r>
 8009cbe:	b948      	cbnz	r0, 8009cd4 <__smakebuf_r+0x46>
 8009cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc4:	059a      	lsls	r2, r3, #22
 8009cc6:	d4ee      	bmi.n	8009ca6 <__smakebuf_r+0x18>
 8009cc8:	f023 0303 	bic.w	r3, r3, #3
 8009ccc:	f043 0302 	orr.w	r3, r3, #2
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	e7e2      	b.n	8009c9a <__smakebuf_r+0xc>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	6020      	str	r0, [r4, #0]
 8009ce4:	b15b      	cbz	r3, 8009cfe <__smakebuf_r+0x70>
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cec:	f000 f81e 	bl	8009d2c <_isatty_r>
 8009cf0:	b128      	cbz	r0, 8009cfe <__smakebuf_r+0x70>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f023 0303 	bic.w	r3, r3, #3
 8009cf8:	f043 0301 	orr.w	r3, r3, #1
 8009cfc:	81a3      	strh	r3, [r4, #12]
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	431d      	orrs	r5, r3
 8009d02:	81a5      	strh	r5, [r4, #12]
 8009d04:	e7cf      	b.n	8009ca6 <__smakebuf_r+0x18>
	...

08009d08 <_fstat_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4d06      	ldr	r5, [pc, #24]	@ (8009d28 <_fstat_r+0x20>)
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4608      	mov	r0, r1
 8009d12:	4611      	mov	r1, r2
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	f7f7 ffc0 	bl	8001c9a <_fstat>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	d102      	bne.n	8009d24 <_fstat_r+0x1c>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	b103      	cbz	r3, 8009d24 <_fstat_r+0x1c>
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	bd38      	pop	{r3, r4, r5, pc}
 8009d26:	bf00      	nop
 8009d28:	2000079c 	.word	0x2000079c

08009d2c <_isatty_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4d05      	ldr	r5, [pc, #20]	@ (8009d48 <_isatty_r+0x1c>)
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f7f7 ffb4 	bl	8001ca4 <_isatty>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_isatty_r+0x1a>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_isatty_r+0x1a>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	2000079c 	.word	0x2000079c

08009d4c <abort>:
 8009d4c:	2006      	movs	r0, #6
 8009d4e:	b508      	push	{r3, lr}
 8009d50:	f000 f85e 	bl	8009e10 <raise>
 8009d54:	2001      	movs	r0, #1
 8009d56:	f7f7 ff87 	bl	8001c68 <_exit>

08009d5a <_calloc_r>:
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	fba1 5402 	umull	r5, r4, r1, r2
 8009d60:	b93c      	cbnz	r4, 8009d72 <_calloc_r+0x18>
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7fd fb9e 	bl	80074a4 <_malloc_r>
 8009d68:	4606      	mov	r6, r0
 8009d6a:	b928      	cbnz	r0, 8009d78 <_calloc_r+0x1e>
 8009d6c:	2600      	movs	r6, #0
 8009d6e:	4630      	mov	r0, r6
 8009d70:	bd70      	pop	{r4, r5, r6, pc}
 8009d72:	220c      	movs	r2, #12
 8009d74:	6002      	str	r2, [r0, #0]
 8009d76:	e7f9      	b.n	8009d6c <_calloc_r+0x12>
 8009d78:	462a      	mov	r2, r5
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	f7fe fa84 	bl	8008288 <memset>
 8009d80:	e7f5      	b.n	8009d6e <_calloc_r+0x14>

08009d82 <__ascii_mbtowc>:
 8009d82:	b082      	sub	sp, #8
 8009d84:	b901      	cbnz	r1, 8009d88 <__ascii_mbtowc+0x6>
 8009d86:	a901      	add	r1, sp, #4
 8009d88:	b142      	cbz	r2, 8009d9c <__ascii_mbtowc+0x1a>
 8009d8a:	b14b      	cbz	r3, 8009da0 <__ascii_mbtowc+0x1e>
 8009d8c:	7813      	ldrb	r3, [r2, #0]
 8009d8e:	600b      	str	r3, [r1, #0]
 8009d90:	7812      	ldrb	r2, [r2, #0]
 8009d92:	1e10      	subs	r0, r2, #0
 8009d94:	bf18      	it	ne
 8009d96:	2001      	movne	r0, #1
 8009d98:	b002      	add	sp, #8
 8009d9a:	4770      	bx	lr
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	e7fb      	b.n	8009d98 <__ascii_mbtowc+0x16>
 8009da0:	f06f 0001 	mvn.w	r0, #1
 8009da4:	e7f8      	b.n	8009d98 <__ascii_mbtowc+0x16>

08009da6 <__ascii_wctomb>:
 8009da6:	4603      	mov	r3, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	b141      	cbz	r1, 8009dbe <__ascii_wctomb+0x18>
 8009dac:	2aff      	cmp	r2, #255	@ 0xff
 8009dae:	d904      	bls.n	8009dba <__ascii_wctomb+0x14>
 8009db0:	228a      	movs	r2, #138	@ 0x8a
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	4770      	bx	lr
 8009dba:	2001      	movs	r0, #1
 8009dbc:	700a      	strb	r2, [r1, #0]
 8009dbe:	4770      	bx	lr

08009dc0 <_raise_r>:
 8009dc0:	291f      	cmp	r1, #31
 8009dc2:	b538      	push	{r3, r4, r5, lr}
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	d904      	bls.n	8009dd4 <_raise_r+0x14>
 8009dca:	2316      	movs	r3, #22
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dd6:	b112      	cbz	r2, 8009dde <_raise_r+0x1e>
 8009dd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <_raise_r+0x32>
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 f830 	bl	8009e44 <_getpid_r>
 8009de4:	4622      	mov	r2, r4
 8009de6:	4601      	mov	r1, r0
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dee:	f000 b817 	b.w	8009e20 <_kill_r>
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d00a      	beq.n	8009e0c <_raise_r+0x4c>
 8009df6:	1c59      	adds	r1, r3, #1
 8009df8:	d103      	bne.n	8009e02 <_raise_r+0x42>
 8009dfa:	2316      	movs	r3, #22
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	2001      	movs	r0, #1
 8009e00:	e7e7      	b.n	8009dd2 <_raise_r+0x12>
 8009e02:	2100      	movs	r1, #0
 8009e04:	4620      	mov	r0, r4
 8009e06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e0a:	4798      	blx	r3
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e7e0      	b.n	8009dd2 <_raise_r+0x12>

08009e10 <raise>:
 8009e10:	4b02      	ldr	r3, [pc, #8]	@ (8009e1c <raise+0xc>)
 8009e12:	4601      	mov	r1, r0
 8009e14:	6818      	ldr	r0, [r3, #0]
 8009e16:	f7ff bfd3 	b.w	8009dc0 <_raise_r>
 8009e1a:	bf00      	nop
 8009e1c:	2000002c 	.word	0x2000002c

08009e20 <_kill_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	2300      	movs	r3, #0
 8009e24:	4d06      	ldr	r5, [pc, #24]	@ (8009e40 <_kill_r+0x20>)
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	f7f7 ff13 	bl	8001c58 <_kill>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d102      	bne.n	8009e3c <_kill_r+0x1c>
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	b103      	cbz	r3, 8009e3c <_kill_r+0x1c>
 8009e3a:	6023      	str	r3, [r4, #0]
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop
 8009e40:	2000079c 	.word	0x2000079c

08009e44 <_getpid_r>:
 8009e44:	f7f7 bf06 	b.w	8001c54 <_getpid>

08009e48 <_init>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr

08009e54 <_fini>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr
