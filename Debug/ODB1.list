
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cebc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa8  0800cfd0  0800cfd0  0000dfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df78  0800df78  0000f200  2**0
                  CONTENTS
  4 .ARM          00000008  0800df78  0800df78  0000ef78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df80  0800df80  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df80  0800df80  0000ef80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df84  0800df84  0000ef84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800df88  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002640  20000200  0800e188  0000f200  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002840  0800e188  0000f840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9b2  00000000  00000000  0000f229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002221  00000000  00000000  0001abdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000188d  00000000  00000000  0001cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  0001e689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000504  00000000  00000000  0001ed19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c215  00000000  00000000  0001f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f262  00000000  00000000  0003b432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000970b3  00000000  00000000  0004a694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e1747  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a70  00000000  00000000  000e178c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cfb4 	.word	0x0800cfb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800cfb4 	.word	0x0800cfb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b99b 	b.w	800137c <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f835 	bl	80010c4 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f828 	bl	80010c4 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f817 	bl	80010c4 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f809 	bl	80010c4 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9d08      	ldr	r5, [sp, #32]
 80010ca:	460c      	mov	r4, r1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d14e      	bne.n	800116e <__udivmoddi4+0xaa>
 80010d0:	4694      	mov	ip, r2
 80010d2:	458c      	cmp	ip, r1
 80010d4:	4686      	mov	lr, r0
 80010d6:	fab2 f282 	clz	r2, r2
 80010da:	d962      	bls.n	80011a2 <__udivmoddi4+0xde>
 80010dc:	b14a      	cbz	r2, 80010f2 <__udivmoddi4+0x2e>
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	4091      	lsls	r1, r2
 80010e4:	fa20 f303 	lsr.w	r3, r0, r3
 80010e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010ec:	4319      	orrs	r1, r3
 80010ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80010fa:	fb07 1114 	mls	r1, r7, r4, r1
 80010fe:	fa1f f68c 	uxth.w	r6, ip
 8001102:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001106:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800110a:	fb04 f106 	mul.w	r1, r4, r6
 800110e:	4299      	cmp	r1, r3
 8001110:	d90a      	bls.n	8001128 <__udivmoddi4+0x64>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f104 30ff 	add.w	r0, r4, #4294967295
 800111a:	f080 8110 	bcs.w	800133e <__udivmoddi4+0x27a>
 800111e:	4299      	cmp	r1, r3
 8001120:	f240 810d 	bls.w	800133e <__udivmoddi4+0x27a>
 8001124:	3c02      	subs	r4, #2
 8001126:	4463      	add	r3, ip
 8001128:	1a59      	subs	r1, r3, r1
 800112a:	fbb1 f0f7 	udiv	r0, r1, r7
 800112e:	fb07 1110 	mls	r1, r7, r0, r1
 8001132:	fb00 f606 	mul.w	r6, r0, r6
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800113e:	429e      	cmp	r6, r3
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0303 	adds.w	r3, ip, r3
 8001146:	f100 31ff 	add.w	r1, r0, #4294967295
 800114a:	f080 80fa 	bcs.w	8001342 <__udivmoddi4+0x27e>
 800114e:	429e      	cmp	r6, r3
 8001150:	f240 80f7 	bls.w	8001342 <__udivmoddi4+0x27e>
 8001154:	4463      	add	r3, ip
 8001156:	3802      	subs	r0, #2
 8001158:	2100      	movs	r1, #0
 800115a:	1b9b      	subs	r3, r3, r6
 800115c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001160:	b11d      	cbz	r5, 800116a <__udivmoddi4+0xa6>
 8001162:	40d3      	lsrs	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e9c5 3200 	strd	r3, r2, [r5]
 800116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116e:	428b      	cmp	r3, r1
 8001170:	d905      	bls.n	800117e <__udivmoddi4+0xba>
 8001172:	b10d      	cbz	r5, 8001178 <__udivmoddi4+0xb4>
 8001174:	e9c5 0100 	strd	r0, r1, [r5]
 8001178:	2100      	movs	r1, #0
 800117a:	4608      	mov	r0, r1
 800117c:	e7f5      	b.n	800116a <__udivmoddi4+0xa6>
 800117e:	fab3 f183 	clz	r1, r3
 8001182:	2900      	cmp	r1, #0
 8001184:	d146      	bne.n	8001214 <__udivmoddi4+0x150>
 8001186:	42a3      	cmp	r3, r4
 8001188:	d302      	bcc.n	8001190 <__udivmoddi4+0xcc>
 800118a:	4290      	cmp	r0, r2
 800118c:	f0c0 80ee 	bcc.w	800136c <__udivmoddi4+0x2a8>
 8001190:	1a86      	subs	r6, r0, r2
 8001192:	eb64 0303 	sbc.w	r3, r4, r3
 8001196:	2001      	movs	r0, #1
 8001198:	2d00      	cmp	r5, #0
 800119a:	d0e6      	beq.n	800116a <__udivmoddi4+0xa6>
 800119c:	e9c5 6300 	strd	r6, r3, [r5]
 80011a0:	e7e3      	b.n	800116a <__udivmoddi4+0xa6>
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	f040 808f 	bne.w	80012c6 <__udivmoddi4+0x202>
 80011a8:	eba1 040c 	sub.w	r4, r1, ip
 80011ac:	2101      	movs	r1, #1
 80011ae:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011b2:	fa1f f78c 	uxth.w	r7, ip
 80011b6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011ba:	fb08 4416 	mls	r4, r8, r6, r4
 80011be:	fb07 f006 	mul.w	r0, r7, r6
 80011c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ca:	4298      	cmp	r0, r3
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x11c>
 80011ce:	eb1c 0303 	adds.w	r3, ip, r3
 80011d2:	f106 34ff 	add.w	r4, r6, #4294967295
 80011d6:	d202      	bcs.n	80011de <__udivmoddi4+0x11a>
 80011d8:	4298      	cmp	r0, r3
 80011da:	f200 80cb 	bhi.w	8001374 <__udivmoddi4+0x2b0>
 80011de:	4626      	mov	r6, r4
 80011e0:	1a1c      	subs	r4, r3, r0
 80011e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011e6:	fb08 4410 	mls	r4, r8, r0, r4
 80011ea:	fb00 f707 	mul.w	r7, r0, r7
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011f6:	429f      	cmp	r7, r3
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x148>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 34ff 	add.w	r4, r0, #4294967295
 8001202:	d202      	bcs.n	800120a <__udivmoddi4+0x146>
 8001204:	429f      	cmp	r7, r3
 8001206:	f200 80ae 	bhi.w	8001366 <__udivmoddi4+0x2a2>
 800120a:	4620      	mov	r0, r4
 800120c:	1bdb      	subs	r3, r3, r7
 800120e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001212:	e7a5      	b.n	8001160 <__udivmoddi4+0x9c>
 8001214:	f1c1 0720 	rsb	r7, r1, #32
 8001218:	408b      	lsls	r3, r1
 800121a:	fa22 fc07 	lsr.w	ip, r2, r7
 800121e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001222:	fa24 f607 	lsr.w	r6, r4, r7
 8001226:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800122a:	fbb6 f8f9 	udiv	r8, r6, r9
 800122e:	fa1f fe8c 	uxth.w	lr, ip
 8001232:	fb09 6618 	mls	r6, r9, r8, r6
 8001236:	fa20 f307 	lsr.w	r3, r0, r7
 800123a:	408c      	lsls	r4, r1
 800123c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001240:	fb08 f00e 	mul.w	r0, r8, lr
 8001244:	431c      	orrs	r4, r3
 8001246:	0c23      	lsrs	r3, r4, #16
 8001248:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800124c:	4298      	cmp	r0, r3
 800124e:	fa02 f201 	lsl.w	r2, r2, r1
 8001252:	d90a      	bls.n	800126a <__udivmoddi4+0x1a6>
 8001254:	eb1c 0303 	adds.w	r3, ip, r3
 8001258:	f108 36ff 	add.w	r6, r8, #4294967295
 800125c:	f080 8081 	bcs.w	8001362 <__udivmoddi4+0x29e>
 8001260:	4298      	cmp	r0, r3
 8001262:	d97e      	bls.n	8001362 <__udivmoddi4+0x29e>
 8001264:	f1a8 0802 	sub.w	r8, r8, #2
 8001268:	4463      	add	r3, ip
 800126a:	1a1e      	subs	r6, r3, r0
 800126c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001270:	fb09 6613 	mls	r6, r9, r3, r6
 8001274:	fb03 fe0e 	mul.w	lr, r3, lr
 8001278:	b2a4      	uxth	r4, r4
 800127a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800127e:	45a6      	cmp	lr, r4
 8001280:	d908      	bls.n	8001294 <__udivmoddi4+0x1d0>
 8001282:	eb1c 0404 	adds.w	r4, ip, r4
 8001286:	f103 30ff 	add.w	r0, r3, #4294967295
 800128a:	d266      	bcs.n	800135a <__udivmoddi4+0x296>
 800128c:	45a6      	cmp	lr, r4
 800128e:	d964      	bls.n	800135a <__udivmoddi4+0x296>
 8001290:	3b02      	subs	r3, #2
 8001292:	4464      	add	r4, ip
 8001294:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001298:	fba0 8302 	umull	r8, r3, r0, r2
 800129c:	eba4 040e 	sub.w	r4, r4, lr
 80012a0:	429c      	cmp	r4, r3
 80012a2:	46c6      	mov	lr, r8
 80012a4:	461e      	mov	r6, r3
 80012a6:	d350      	bcc.n	800134a <__udivmoddi4+0x286>
 80012a8:	d04d      	beq.n	8001346 <__udivmoddi4+0x282>
 80012aa:	b155      	cbz	r5, 80012c2 <__udivmoddi4+0x1fe>
 80012ac:	ebba 030e 	subs.w	r3, sl, lr
 80012b0:	eb64 0406 	sbc.w	r4, r4, r6
 80012b4:	fa04 f707 	lsl.w	r7, r4, r7
 80012b8:	40cb      	lsrs	r3, r1
 80012ba:	431f      	orrs	r7, r3
 80012bc:	40cc      	lsrs	r4, r1
 80012be:	e9c5 7400 	strd	r7, r4, [r5]
 80012c2:	2100      	movs	r1, #0
 80012c4:	e751      	b.n	800116a <__udivmoddi4+0xa6>
 80012c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ca:	f1c2 0320 	rsb	r3, r2, #32
 80012ce:	40d9      	lsrs	r1, r3
 80012d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012d4:	fa20 f303 	lsr.w	r3, r0, r3
 80012d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1110 	mls	r1, r8, r0, r1
 80012e4:	4094      	lsls	r4, r2
 80012e6:	431c      	orrs	r4, r3
 80012e8:	fa1f f78c 	uxth.w	r7, ip
 80012ec:	0c23      	lsrs	r3, r4, #16
 80012ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012f2:	fb00 f107 	mul.w	r1, r0, r7
 80012f6:	4299      	cmp	r1, r3
 80012f8:	d908      	bls.n	800130c <__udivmoddi4+0x248>
 80012fa:	eb1c 0303 	adds.w	r3, ip, r3
 80012fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8001302:	d22c      	bcs.n	800135e <__udivmoddi4+0x29a>
 8001304:	4299      	cmp	r1, r3
 8001306:	d92a      	bls.n	800135e <__udivmoddi4+0x29a>
 8001308:	3802      	subs	r0, #2
 800130a:	4463      	add	r3, ip
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001312:	fb08 3311 	mls	r3, r8, r1, r3
 8001316:	b2a4      	uxth	r4, r4
 8001318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800131c:	fb01 f307 	mul.w	r3, r1, r7
 8001320:	42a3      	cmp	r3, r4
 8001322:	d908      	bls.n	8001336 <__udivmoddi4+0x272>
 8001324:	eb1c 0404 	adds.w	r4, ip, r4
 8001328:	f101 36ff 	add.w	r6, r1, #4294967295
 800132c:	d213      	bcs.n	8001356 <__udivmoddi4+0x292>
 800132e:	42a3      	cmp	r3, r4
 8001330:	d911      	bls.n	8001356 <__udivmoddi4+0x292>
 8001332:	3902      	subs	r1, #2
 8001334:	4464      	add	r4, ip
 8001336:	1ae4      	subs	r4, r4, r3
 8001338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800133c:	e73b      	b.n	80011b6 <__udivmoddi4+0xf2>
 800133e:	4604      	mov	r4, r0
 8001340:	e6f2      	b.n	8001128 <__udivmoddi4+0x64>
 8001342:	4608      	mov	r0, r1
 8001344:	e708      	b.n	8001158 <__udivmoddi4+0x94>
 8001346:	45c2      	cmp	sl, r8
 8001348:	d2af      	bcs.n	80012aa <__udivmoddi4+0x1e6>
 800134a:	ebb8 0e02 	subs.w	lr, r8, r2
 800134e:	eb63 060c 	sbc.w	r6, r3, ip
 8001352:	3801      	subs	r0, #1
 8001354:	e7a9      	b.n	80012aa <__udivmoddi4+0x1e6>
 8001356:	4631      	mov	r1, r6
 8001358:	e7ed      	b.n	8001336 <__udivmoddi4+0x272>
 800135a:	4603      	mov	r3, r0
 800135c:	e79a      	b.n	8001294 <__udivmoddi4+0x1d0>
 800135e:	4630      	mov	r0, r6
 8001360:	e7d4      	b.n	800130c <__udivmoddi4+0x248>
 8001362:	46b0      	mov	r8, r6
 8001364:	e781      	b.n	800126a <__udivmoddi4+0x1a6>
 8001366:	4463      	add	r3, ip
 8001368:	3802      	subs	r0, #2
 800136a:	e74f      	b.n	800120c <__udivmoddi4+0x148>
 800136c:	4606      	mov	r6, r0
 800136e:	4623      	mov	r3, r4
 8001370:	4608      	mov	r0, r1
 8001372:	e711      	b.n	8001198 <__udivmoddi4+0xd4>
 8001374:	3e02      	subs	r6, #2
 8001376:	4463      	add	r3, ip
 8001378:	e732      	b.n	80011e0 <__udivmoddi4+0x11c>
 800137a:	bf00      	nop

0800137c <__aeabi_idiv0>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <BMP280_PressureToAltitude>:
    dev->altitude_MSL = BMP280_PressureToAltitude(dev->pressure_Pa / 100.0f, HPA_SEA_LEVEL); // Convertir la pression en hPa et utiliser la pression au niveau de la mer par défaut
}


float BMP280_PressureToAltitude(float pressure, float sea_level_pressure)
{
 8001380:	b508      	push	{r3, lr}
    const float L = 0.0065;      // Temperature lapse rate in K/m
    const float R = 287.05;      // Specific gas constant for dry air in J/(kg·K)
    const float g = 9.80665;     // Gravitational acceleration in m/s^2

    // Calculate the altitude
    float altitude = (T0 / L) * (1 - pow((pressure / sea_level_pressure), (R * L) / g));
 8001382:	f7ff fdb3 	bl	8000eec <__aeabi_fdiv>
 8001386:	f7ff f84f 	bl	8000428 <__aeabi_f2d>
 800138a:	a309      	add	r3, pc, #36	@ (adr r3, 80013b0 <BMP280_PressureToAltitude+0x30>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f00a ff02 	bl	800c198 <pow>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	2000      	movs	r0, #0
 800139a:	4909      	ldr	r1, [pc, #36]	@ (80013c0 <BMP280_PressureToAltitude+0x40>)
 800139c:	f7fe fee4 	bl	8000168 <__aeabi_dsub>
 80013a0:	a305      	add	r3, pc, #20	@ (adr r3, 80013b8 <BMP280_PressureToAltitude+0x38>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f897 	bl	80004d8 <__aeabi_dmul>
 80013aa:	f7ff fb8d 	bl	8000ac8 <__aeabi_d2f>

    return altitude;
}
 80013ae:	bd08      	pop	{r3, pc}
 80013b0:	80000000 	.word	0x80000000
 80013b4:	3fc85a7a 	.word	0x3fc85a7a
 80013b8:	80000000 	.word	0x80000000
 80013bc:	40e5a558 	.word	0x40e5a558
 80013c0:	3ff00000 	.word	0x3ff00000

080013c4 <BMP280_Write>:
    dev->calib_data.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
    dev->calib_data.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
}

void BMP280_Write(BMP280 *dev, uint8_t address, uint8_t value)
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	4604      	mov	r4, r0
 80013ca:	f88d 1007 	strb.w	r1, [sp, #7]
 80013ce:	f88d 2006 	strb.w	r2, [sp, #6]
    address &= 0x7F;  // Write operation
 80013d2:	b2cb      	uxtb	r3, r1
 80013d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013d8:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(PA, 8, LOW);
 80013dc:	2200      	movs	r2, #0
 80013de:	2108      	movs	r1, #8
 80013e0:	2001      	movs	r0, #1
 80013e2:	f000 fddb 	bl	8001f9c <Write_GPIO>
	if (SPI_TX(dev->SPIx, &address, 1) != 0) { /* Handle timeout error */ }
 80013e6:	2201      	movs	r2, #1
 80013e8:	f10d 0107 	add.w	r1, sp, #7
 80013ec:	6820      	ldr	r0, [r4, #0]
 80013ee:	f000 fe49 	bl	8002084 <SPI_TX>
	if (SPI_TX(dev->SPIx, &value, 1) != 0) {   /* Handle timeout error */ }
 80013f2:	2201      	movs	r2, #1
 80013f4:	f10d 0106 	add.w	r1, sp, #6
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	f000 fe43 	bl	8002084 <SPI_TX>
	Write_GPIO(PA, 8, HIGH);
 80013fe:	2201      	movs	r2, #1
 8001400:	2108      	movs	r1, #8
 8001402:	4610      	mov	r0, r2
 8001404:	f000 fdca 	bl	8001f9c <Write_GPIO>

	HAL_Delay(20);
 8001408:	2014      	movs	r0, #20
 800140a:	f001 fec3 	bl	8003194 <HAL_Delay>
}
 800140e:	b002      	add	sp, #8
 8001410:	bd10      	pop	{r4, pc}

08001412 <BMP280_Read>:

void BMP280_Read(BMP280 *dev, uint8_t address, uint8_t *rxData[], uint8_t size)
{
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	4604      	mov	r4, r0
 8001418:	4615      	mov	r5, r2
 800141a:	461e      	mov	r6, r3
 800141c:	f88d 1007 	strb.w	r1, [sp, #7]
    address |= 0x80;  // read operation
 8001420:	b2c8      	uxtb	r0, r1
 8001422:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8001426:	f88d 0007 	strb.w	r0, [sp, #7]

	Write_GPIO(dev->cs_port, dev->cs_pin, LOW);
 800142a:	2200      	movs	r2, #0
 800142c:	7921      	ldrb	r1, [r4, #4]
 800142e:	8920      	ldrh	r0, [r4, #8]
 8001430:	f000 fdb4 	bl	8001f9c <Write_GPIO>
	if (SPI_TX(dev->SPIx, &address, 1) != 0)
 8001434:	2201      	movs	r2, #1
 8001436:	f10d 0107 	add.w	r1, sp, #7
 800143a:	6820      	ldr	r0, [r4, #0]
 800143c:	f000 fe22 	bl	8002084 <SPI_TX>
 8001440:	b960      	cbnz	r0, 800145c <BMP280_Read+0x4a>
	{
		Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
		return;
	}
	if (SPI_RX(dev->SPIx, rxData, size) != 0)
 8001442:	4632      	mov	r2, r6
 8001444:	4629      	mov	r1, r5
 8001446:	6820      	ldr	r0, [r4, #0]
 8001448:	f000 fe3d 	bl	80020c6 <SPI_RX>
 800144c:	b960      	cbnz	r0, 8001468 <BMP280_Read+0x56>
	{
		Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
		return;
	}
	Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 800144e:	2201      	movs	r2, #1
 8001450:	7921      	ldrb	r1, [r4, #4]
 8001452:	8920      	ldrh	r0, [r4, #8]
 8001454:	f000 fda2 	bl	8001f9c <Write_GPIO>
}
 8001458:	b002      	add	sp, #8
 800145a:	bd70      	pop	{r4, r5, r6, pc}
		Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 800145c:	2201      	movs	r2, #1
 800145e:	7921      	ldrb	r1, [r4, #4]
 8001460:	8920      	ldrh	r0, [r4, #8]
 8001462:	f000 fd9b 	bl	8001f9c <Write_GPIO>
		return;
 8001466:	e7f7      	b.n	8001458 <BMP280_Read+0x46>
		Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 8001468:	2201      	movs	r2, #1
 800146a:	7921      	ldrb	r1, [r4, #4]
 800146c:	8920      	ldrh	r0, [r4, #8]
 800146e:	f000 fd95 	bl	8001f9c <Write_GPIO>
		return;
 8001472:	e7f1      	b.n	8001458 <BMP280_Read+0x46>
 8001474:	0000      	movs	r0, r0
	...

08001478 <BMP280_Read_Temperature_Pressure>:
void BMP280_Read_Temperature_Pressure(BMP280 *dev) {
 8001478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800147c:	b08f      	sub	sp, #60	@ 0x3c
 800147e:	4605      	mov	r5, r0
    BMP280_Read(dev, BMP280_REG_PRESS_MSB, data, 6);
 8001480:	2306      	movs	r3, #6
 8001482:	aa0c      	add	r2, sp, #48	@ 0x30
 8001484:	21f7      	movs	r1, #247	@ 0xf7
 8001486:	f7ff ffc4 	bl	8001412 <BMP280_Read>
    int32_t raw_pressure = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 800148a:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 800148e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001498:	f89d 2032 	ldrb.w	r2, [sp, #50]	@ 0x32
 800149c:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80014a0:	9306      	str	r3, [sp, #24]
    int32_t raw_temperature = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80014a2:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 80014a6:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80014b0:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 80014b4:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
    int32_t dig_T1 = dev->calib_data.dig_T1;
 80014b8:	8d2c      	ldrh	r4, [r5, #40]	@ 0x28
    int32_t dig_T2 = dev->calib_data.dig_T2;
 80014ba:	f9b5 002a 	ldrsh.w	r0, [r5, #42]	@ 0x2a
    int32_t dig_T3 = dev->calib_data.dig_T3;
 80014be:	f9b5 102c 	ldrsh.w	r1, [r5, #44]	@ 0x2c
    var1 = ((((raw_temperature >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 80014c2:	0062      	lsls	r2, r4, #1
 80014c4:	ebc2 02e3 	rsb	r2, r2, r3, asr #3
 80014c8:	fb00 f202 	mul.w	r2, r0, r2
    var2 = (((((raw_temperature >> 4) - ((int32_t)dig_T1)) * ((raw_temperature >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80014cc:	ebc4 1423 	rsb	r4, r4, r3, asr #4
 80014d0:	fb04 f304 	mul.w	r3, r4, r4
 80014d4:	131b      	asrs	r3, r3, #12
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
 80014dc:	eb03 24e2 	add.w	r4, r3, r2, asr #11
    dev->temp_C = (t_fine * 5 + 128) >> 8;
 80014e0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80014e4:	3080      	adds	r0, #128	@ 0x80
 80014e6:	1200      	asrs	r0, r0, #8
 80014e8:	f7ff fbf8 	bl	8000cdc <__aeabi_i2f>
 80014ec:	6268      	str	r0, [r5, #36]	@ 0x24
    dev->temp_C /= 100.0f; // Convertir en degrés Celsius
 80014ee:	4990      	ldr	r1, [pc, #576]	@ (8001730 <BMP280_Read_Temperature_Pressure+0x2b8>)
 80014f0:	f7ff fcfc 	bl	8000eec <__aeabi_fdiv>
 80014f4:	6268      	str	r0, [r5, #36]	@ 0x24
    int64_t dig_P1 = dev->calib_data.dig_P1;
 80014f6:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
 80014f8:	9001      	str	r0, [sp, #4]
    int64_t dig_P2 = dev->calib_data.dig_P2;
 80014fa:	f9b5 1030 	ldrsh.w	r1, [r5, #48]	@ 0x30
 80014fe:	17cb      	asrs	r3, r1, #31
 8001500:	9303      	str	r3, [sp, #12]
    int64_t dig_P3 = dev->calib_data.dig_P3;
 8001502:	f9b5 e032 	ldrsh.w	lr, [r5, #50]	@ 0x32
 8001506:	ea4f 77ee 	mov.w	r7, lr, asr #31
    int64_t dig_P4 = dev->calib_data.dig_P4;
 800150a:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	@ 0x34
 800150e:	9202      	str	r2, [sp, #8]
    int64_t dig_P5 = dev->calib_data.dig_P5;
 8001510:	f9b5 c036 	ldrsh.w	ip, [r5, #54]	@ 0x36
 8001514:	ea4f 7bec 	mov.w	fp, ip, asr #31
    int64_t dig_P6 = dev->calib_data.dig_P6;
 8001518:	f9b5 6038 	ldrsh.w	r6, [r5, #56]	@ 0x38
 800151c:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    int64_t dig_P7 = dev->calib_data.dig_P7;
 8001520:	f9b5 903a 	ldrsh.w	r9, [r5, #58]	@ 0x3a
 8001524:	ea4f 78e9 	mov.w	r8, r9, asr #31
 8001528:	f8cd 801c 	str.w	r8, [sp, #28]
    int64_t dig_P8 = dev->calib_data.dig_P8;
 800152c:	f9b5 203c 	ldrsh.w	r2, [r5, #60]	@ 0x3c
 8001530:	4613      	mov	r3, r2
 8001532:	9204      	str	r2, [sp, #16]
 8001534:	17d2      	asrs	r2, r2, #31
 8001536:	9208      	str	r2, [sp, #32]
 8001538:	930a      	str	r3, [sp, #40]	@ 0x28
    int64_t dig_P9 = dev->calib_data.dig_P9;
 800153a:	f9b5 203e 	ldrsh.w	r2, [r5, #62]	@ 0x3e
 800153e:	4613      	mov	r3, r2
 8001540:	9205      	str	r2, [sp, #20]
 8001542:	17d2      	asrs	r2, r2, #31
 8001544:	9209      	str	r2, [sp, #36]	@ 0x24
 8001546:	930b      	str	r3, [sp, #44]	@ 0x2c
    p_var1 = ((int64_t)t_fine) - 128000;
 8001548:	17e2      	asrs	r2, r4, #31
 800154a:	f5b4 33fa 	subs.w	r3, r4, #128000	@ 0x1f400
 800154e:	f142 32ff 	adc.w	r2, r2, #4294967295
    p_var2 = p_var1 * p_var1 * (int64_t)dig_P6;
 8001552:	fb03 f402 	mul.w	r4, r3, r2
 8001556:	fba3 0803 	umull	r0, r8, r3, r3
 800155a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 800155e:	fb00 f40a 	mul.w	r4, r0, sl
 8001562:	fb06 4408 	mla	r4, r6, r8, r4
 8001566:	fba0 a606 	umull	sl, r6, r0, r6
 800156a:	4434      	add	r4, r6
    p_var2 = p_var2 + ((p_var1 * (int64_t)dig_P5) << 17);
 800156c:	fb0c f602 	mul.w	r6, ip, r2
 8001570:	fb03 660b 	mla	r6, r3, fp, r6
 8001574:	fbac cb03 	umull	ip, fp, ip, r3
 8001578:	445e      	add	r6, fp
 800157a:	0476      	lsls	r6, r6, #17
 800157c:	ea46 36dc 	orr.w	r6, r6, ip, lsr #15
 8001580:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 8001584:	eb1c 0c0a 	adds.w	ip, ip, sl
 8001588:	eb44 0406 	adc.w	r4, r4, r6
    p_var2 = p_var2 + (((int64_t)dig_P4) << 35);
 800158c:	4666      	mov	r6, ip
 800158e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001592:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
    p_var1 = ((p_var1 * p_var1 * (int64_t)dig_P3) >> 8) + ((p_var1 * (int64_t)dig_P2) << 12);
 8001596:	fb00 f707 	mul.w	r7, r0, r7
 800159a:	fb0e 7708 	mla	r7, lr, r8, r7
 800159e:	fba0 0e0e 	umull	r0, lr, r0, lr
 80015a2:	44be      	add	lr, r7
 80015a4:	0a00      	lsrs	r0, r0, #8
 80015a6:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 80015aa:	fb01 f202 	mul.w	r2, r1, r2
 80015ae:	9f03      	ldr	r7, [sp, #12]
 80015b0:	fb03 2207 	mla	r2, r3, r7, r2
 80015b4:	fba1 1303 	umull	r1, r3, r1, r3
 80015b8:	441a      	add	r2, r3
 80015ba:	0312      	lsls	r2, r2, #12
 80015bc:	ea42 5211 	orr.w	r2, r2, r1, lsr #20
 80015c0:	0309      	lsls	r1, r1, #12
 80015c2:	1841      	adds	r1, r0, r1
 80015c4:	eb42 222e 	adc.w	r2, r2, lr, asr #8
    p_var1 = ((((int64_t)1) << 47) + p_var1) * ((int64_t)dig_P1) >> 33;
 80015c8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80015cc:	9801      	ldr	r0, [sp, #4]
 80015ce:	fba1 1300 	umull	r1, r3, r1, r0
 80015d2:	fb00 3102 	mla	r1, r0, r2, r3
 80015d6:	104a      	asrs	r2, r1, #1
 80015d8:	17cb      	asrs	r3, r1, #31
    if (p_var1 == 0) {
 80015da:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 80015de:	d138      	bne.n	8001652 <BMP280_Read_Temperature_Pressure+0x1da>
        dev->pressure_Pa = 0; // Prévenir la division par zéro
 80015e0:	2300      	movs	r3, #0
 80015e2:	60eb      	str	r3, [r5, #12]
    float pressure_ratio = dev->pressure_Pa / dev->pressure_ref;
 80015e4:	68ee      	ldr	r6, [r5, #12]
 80015e6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80015e8:	4630      	mov	r0, r6
 80015ea:	f7ff fc7f 	bl	8000eec <__aeabi_fdiv>
    dev->altitude_m = 44330.0f * (1.0f - pow(pressure_ratio, 0.1903f));
 80015ee:	f7fe ff1b 	bl	8000428 <__aeabi_f2d>
 80015f2:	a34b      	add	r3, pc, #300	@ (adr r3, 8001720 <BMP280_Read_Temperature_Pressure+0x2a8>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f00a fdce 	bl	800c198 <pow>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	2000      	movs	r0, #0
 8001602:	494c      	ldr	r1, [pc, #304]	@ (8001734 <BMP280_Read_Temperature_Pressure+0x2bc>)
 8001604:	f7fe fdb0 	bl	8000168 <__aeabi_dsub>
 8001608:	a347      	add	r3, pc, #284	@ (adr r3, 8001728 <BMP280_Read_Temperature_Pressure+0x2b0>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe ff63 	bl	80004d8 <__aeabi_dmul>
 8001612:	f7ff fa59 	bl	8000ac8 <__aeabi_d2f>
 8001616:	61a8      	str	r0, [r5, #24]
    dev->altitude_filtered_m = dev->alpha * dev->altitude_m + (1 - dev->alpha) * dev->altitude_filtered_m;
 8001618:	6a2f      	ldr	r7, [r5, #32]
 800161a:	4639      	mov	r1, r7
 800161c:	f7ff fbb2 	bl	8000d84 <__aeabi_fmul>
 8001620:	4604      	mov	r4, r0
 8001622:	4639      	mov	r1, r7
 8001624:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001628:	f7ff faa2 	bl	8000b70 <__aeabi_fsub>
 800162c:	69e9      	ldr	r1, [r5, #28]
 800162e:	f7ff fba9 	bl	8000d84 <__aeabi_fmul>
 8001632:	4601      	mov	r1, r0
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff fa9d 	bl	8000b74 <__addsf3>
 800163a:	61e8      	str	r0, [r5, #28]
    dev->altitude_MSL = BMP280_PressureToAltitude(dev->pressure_Pa / 100.0f, HPA_SEA_LEVEL); // Convertir la pression en hPa et utiliser la pression au niveau de la mer par défaut
 800163c:	493c      	ldr	r1, [pc, #240]	@ (8001730 <BMP280_Read_Temperature_Pressure+0x2b8>)
 800163e:	4630      	mov	r0, r6
 8001640:	f7ff fc54 	bl	8000eec <__aeabi_fdiv>
 8001644:	493c      	ldr	r1, [pc, #240]	@ (8001738 <BMP280_Read_Temperature_Pressure+0x2c0>)
 8001646:	f7ff fe9b 	bl	8001380 <BMP280_PressureToAltitude>
 800164a:	6168      	str	r0, [r5, #20]
}
 800164c:	b00f      	add	sp, #60	@ 0x3c
 800164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = 1048576 - raw_pressure;
 8001652:	9906      	ldr	r1, [sp, #24]
 8001654:	f5c1 1080 	rsb	r0, r1, #1048576	@ 0x100000
        p = (((p << 31) - p_var2) * 3125) / p_var1;
 8001658:	1041      	asrs	r1, r0, #1
 800165a:	07c0      	lsls	r0, r0, #31
 800165c:	1b86      	subs	r6, r0, r6
 800165e:	eb61 0404 	sbc.w	r4, r1, r4
 8001662:	19b7      	adds	r7, r6, r6
 8001664:	eb44 0104 	adc.w	r1, r4, r4
 8001668:	19bf      	adds	r7, r7, r6
 800166a:	eb44 0101 	adc.w	r1, r4, r1
 800166e:	ea4f 1c81 	mov.w	ip, r1, lsl #6
 8001672:	ea4c 6c97 	orr.w	ip, ip, r7, lsr #26
 8001676:	01b8      	lsls	r0, r7, #6
 8001678:	1838      	adds	r0, r7, r0
 800167a:	eb41 010c 	adc.w	r1, r1, ip
 800167e:	0089      	lsls	r1, r1, #2
 8001680:	ea41 7190 	orr.w	r1, r1, r0, lsr #30
 8001684:	0080      	lsls	r0, r0, #2
 8001686:	1980      	adds	r0, r0, r6
 8001688:	eb44 0101 	adc.w	r1, r4, r1
 800168c:	0089      	lsls	r1, r1, #2
 800168e:	ea41 7190 	orr.w	r1, r1, r0, lsr #30
 8001692:	0080      	lsls	r0, r0, #2
 8001694:	1980      	adds	r0, r0, r6
 8001696:	eb44 0101 	adc.w	r1, r4, r1
 800169a:	f7ff fcc3 	bl	8001024 <__aeabi_ldivmod>
 800169e:	4606      	mov	r6, r0
 80016a0:	4603      	mov	r3, r0
        p_var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80016a2:	0b44      	lsrs	r4, r0, #13
 80016a4:	ea44 44c1 	orr.w	r4, r4, r1, lsl #19
 80016a8:	1348      	asrs	r0, r1, #13
 80016aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80016ac:	fb04 f202 	mul.w	r2, r4, r2
 80016b0:	9f05      	ldr	r7, [sp, #20]
 80016b2:	fb07 2200 	mla	r2, r7, r0, r2
 80016b6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80016b8:	fba4 7c07 	umull	r7, ip, r4, r7
 80016bc:	4462      	add	r2, ip
 80016be:	fb04 f202 	mul.w	r2, r4, r2
 80016c2:	fb07 2200 	mla	r2, r7, r0, r2
 80016c6:	fba4 4707 	umull	r4, r7, r4, r7
 80016ca:	443a      	add	r2, r7
 80016cc:	0e64      	lsrs	r4, r4, #25
 80016ce:	ea44 14c2 	orr.w	r4, r4, r2, lsl #7
        p_var2 = (((int64_t)dig_P8) * p) >> 19;
 80016d2:	9804      	ldr	r0, [sp, #16]
 80016d4:	fb01 f000 	mul.w	r0, r1, r0
 80016d8:	9f08      	ldr	r7, [sp, #32]
 80016da:	fb07 0006 	mla	r0, r7, r6, r0
 80016de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80016e0:	fba6 6703 	umull	r6, r7, r6, r3
 80016e4:	4438      	add	r0, r7
 80016e6:	0cf6      	lsrs	r6, r6, #19
 80016e8:	ea46 3640 	orr.w	r6, r6, r0, lsl #13
        p = ((p + p_var1 + p_var2) >> 8) + (((int64_t)dig_P7) << 4);
 80016ec:	191b      	adds	r3, r3, r4
 80016ee:	eb41 6162 	adc.w	r1, r1, r2, asr #25
 80016f2:	199b      	adds	r3, r3, r6
 80016f4:	eb41 41e0 	adc.w	r1, r1, r0, asr #19
 80016f8:	0a18      	lsrs	r0, r3, #8
 80016fa:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80016fe:	9b07      	ldr	r3, [sp, #28]
 8001700:	011a      	lsls	r2, r3, #4
 8001702:	ea42 7219 	orr.w	r2, r2, r9, lsr #28
 8001706:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800170a:	18c0      	adds	r0, r0, r3
        dev->pressure_Pa = (float)p / 256.0f; // Convertir en Pascals
 800170c:	eb42 2121 	adc.w	r1, r2, r1, asr #8
 8001710:	f7ff fafa 	bl	8000d08 <__aeabi_l2f>
 8001714:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8001718:	f7ff fb34 	bl	8000d84 <__aeabi_fmul>
 800171c:	60e8      	str	r0, [r5, #12]
 800171e:	e761      	b.n	80015e4 <BMP280_Read_Temperature_Pressure+0x16c>
 8001720:	20000000 	.word	0x20000000
 8001724:	3fc85bc0 	.word	0x3fc85bc0
 8001728:	00000000 	.word	0x00000000
 800172c:	40e5a540 	.word	0x40e5a540
 8001730:	42c80000 	.word	0x42c80000
 8001734:	3ff00000 	.word	0x3ff00000
 8001738:	447d5000 	.word	0x447d5000

0800173c <BMP280_Read_Calib_Data>:
{
 800173c:	b510      	push	{r4, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	4604      	mov	r4, r0
    BMP280_Read(dev, BMP280_REG_CALIB_00, calib, 24);
 8001742:	2318      	movs	r3, #24
 8001744:	466a      	mov	r2, sp
 8001746:	2188      	movs	r1, #136	@ 0x88
 8001748:	f7ff fe63 	bl	8001412 <BMP280_Read>
    dev->calib_data.dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 800174c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001750:	f89d 3000 	ldrb.w	r3, [sp]
 8001754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001758:	8523      	strh	r3, [r4, #40]	@ 0x28
    dev->calib_data.dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 800175a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800175e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001762:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001766:	8563      	strh	r3, [r4, #42]	@ 0x2a
    dev->calib_data.dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 8001768:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800176c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001774:	85a3      	strh	r3, [r4, #44]	@ 0x2c
    dev->calib_data.dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 8001776:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800177a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800177e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001782:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    dev->calib_data.dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 8001784:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001788:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800178c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001790:	8623      	strh	r3, [r4, #48]	@ 0x30
    dev->calib_data.dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 8001792:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001796:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800179a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800179e:	8663      	strh	r3, [r4, #50]	@ 0x32
    dev->calib_data.dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 80017a0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80017a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80017a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017ac:	86a3      	strh	r3, [r4, #52]	@ 0x34
    dev->calib_data.dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 80017ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80017b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80017b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017ba:	86e3      	strh	r3, [r4, #54]	@ 0x36
    dev->calib_data.dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 80017bc:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80017c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80017c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017c8:	8723      	strh	r3, [r4, #56]	@ 0x38
    dev->calib_data.dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 80017ca:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80017ce:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80017d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017d6:	8763      	strh	r3, [r4, #58]	@ 0x3a
    dev->calib_data.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 80017d8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80017dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80017e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017e4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    dev->calib_data.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 80017e6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80017ea:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80017ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017f2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
}
 80017f4:	b006      	add	sp, #24
 80017f6:	bd10      	pop	{r4, pc}

080017f8 <BMP280_Init>:
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	4604      	mov	r4, r0
	Init_GPIO(dev->cs_port, dev->cs_pin, OUT50, O_GP_PP); // CS
 80017fe:	2300      	movs	r3, #0
 8001800:	2203      	movs	r2, #3
 8001802:	7901      	ldrb	r1, [r0, #4]
 8001804:	8900      	ldrh	r0, [r0, #8]
 8001806:	f000 fb85 	bl	8001f14 <Init_GPIO>
	Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 800180a:	2201      	movs	r2, #1
 800180c:	7921      	ldrb	r1, [r4, #4]
 800180e:	8920      	ldrh	r0, [r4, #8]
 8001810:	f000 fbc4 	bl	8001f9c <Write_GPIO>
    BMP280_Write(dev, BMP280_REG_RESET, BMP280_RESET_WORD);
 8001814:	22b6      	movs	r2, #182	@ 0xb6
 8001816:	21e0      	movs	r1, #224	@ 0xe0
 8001818:	4620      	mov	r0, r4
 800181a:	f7ff fdd3 	bl	80013c4 <BMP280_Write>
    HAL_Delay(100); // Attendre la fin de la réinitialisation
 800181e:	2064      	movs	r0, #100	@ 0x64
 8001820:	f001 fcb8 	bl	8003194 <HAL_Delay>
    BMP280_Write(dev, BMP280_REG_RESET, BMP280_RESET_WORD); // Reset
 8001824:	22b6      	movs	r2, #182	@ 0xb6
 8001826:	21e0      	movs	r1, #224	@ 0xe0
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fdcb 	bl	80013c4 <BMP280_Write>
    BMP280_Read(dev, BMP280_REG_ID, &id, sizeof(id));
 800182e:	2301      	movs	r3, #1
 8001830:	f10d 0207 	add.w	r2, sp, #7
 8001834:	21d0      	movs	r1, #208	@ 0xd0
 8001836:	4620      	mov	r0, r4
 8001838:	f7ff fdeb 	bl	8001412 <BMP280_Read>
	if (id != BMP280_DEVICE_ID)
 800183c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001840:	2b58      	cmp	r3, #88	@ 0x58
 8001842:	d002      	beq.n	800184a <BMP280_Init+0x52>
		return 0; // Error
 8001844:	2000      	movs	r0, #0
}
 8001846:	b002      	add	sp, #8
 8001848:	bd10      	pop	{r4, pc}
	BMP280_Read_Calib_Data(dev);
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff ff76 	bl	800173c <BMP280_Read_Calib_Data>
    BMP280_Write(dev, BMP280_REG_CTRL_MEAS, BMP280_SETTING_CTRL_MEAS_NORMAL);
 8001850:	2257      	movs	r2, #87	@ 0x57
 8001852:	21f4      	movs	r1, #244	@ 0xf4
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fdb5 	bl	80013c4 <BMP280_Write>
    BMP280_Write(dev, BMP280_REG_CONFIG, BMP280_SETTING_CONFIG);
 800185a:	2208      	movs	r2, #8
 800185c:	21f5      	movs	r1, #245	@ 0xf5
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fdb0 	bl	80013c4 <BMP280_Write>
	BMP280_Read_Temperature_Pressure(dev);
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fe07 	bl	8001478 <BMP280_Read_Temperature_Pressure>
	dev->pressure_ref = dev->pressure_Pa;
 800186a:	68e3      	ldr	r3, [r4, #12]
 800186c:	64a3      	str	r3, [r4, #72]	@ 0x48
	dev->altitude_filtered_m = 0.0f;
 800186e:	2300      	movs	r3, #0
 8001870:	61e3      	str	r3, [r4, #28]
	dev->alpha = FILTER_FACTOR; // Ajustez ce facteur selon le niveau de lissage souhaité (entre 0 et 1)
 8001872:	4b02      	ldr	r3, [pc, #8]	@ (800187c <BMP280_Init+0x84>)
 8001874:	6223      	str	r3, [r4, #32]
    return 1;
 8001876:	2001      	movs	r0, #1
 8001878:	e7e5      	b.n	8001846 <BMP280_Init+0x4e>
 800187a:	bf00      	nop
 800187c:	3dcccccd 	.word	0x3dcccccd

08001880 <ICM20602_Read>:
{
	return Read_GPIO(dev->int_port, dev->int_pin);
}

void ICM20602_Read(ICM20602 *dev, uint8_t address, uint8_t rxData[], uint8_t size)
{
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	4604      	mov	r4, r0
 8001886:	4615      	mov	r5, r2
 8001888:	461e      	mov	r6, r3
 800188a:	f88d 1007 	strb.w	r1, [sp, #7]
    address |= 0x80;  // read operation
 800188e:	b2c8      	uxtb	r0, r1
 8001890:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8001894:	f88d 0007 	strb.w	r0, [sp, #7]

    Write_GPIO(dev->cs_port, dev->cs_pin, LOW);
 8001898:	2200      	movs	r2, #0
 800189a:	7921      	ldrb	r1, [r4, #4]
 800189c:	8920      	ldrh	r0, [r4, #8]
 800189e:	f000 fb7d 	bl	8001f9c <Write_GPIO>
    if (SPI_TX(dev->SPIx, &address, 1) != 0)
 80018a2:	2201      	movs	r2, #1
 80018a4:	f10d 0107 	add.w	r1, sp, #7
 80018a8:	6820      	ldr	r0, [r4, #0]
 80018aa:	f000 fbeb 	bl	8002084 <SPI_TX>
 80018ae:	b960      	cbnz	r0, 80018ca <ICM20602_Read+0x4a>
    { /* Handle timeout error */
    	Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
    	return;
    }
    if (SPI_RX(dev->SPIx, rxData, size) != 0)
 80018b0:	4632      	mov	r2, r6
 80018b2:	4629      	mov	r1, r5
 80018b4:	6820      	ldr	r0, [r4, #0]
 80018b6:	f000 fc06 	bl	80020c6 <SPI_RX>
 80018ba:	b960      	cbnz	r0, 80018d6 <ICM20602_Read+0x56>
    {/* Handle timeout error */
    	Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
		return;
    }
    Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 80018bc:	2201      	movs	r2, #1
 80018be:	7921      	ldrb	r1, [r4, #4]
 80018c0:	8920      	ldrh	r0, [r4, #8]
 80018c2:	f000 fb6b 	bl	8001f9c <Write_GPIO>
}
 80018c6:	b002      	add	sp, #8
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
    	Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 80018ca:	2201      	movs	r2, #1
 80018cc:	7921      	ldrb	r1, [r4, #4]
 80018ce:	8920      	ldrh	r0, [r4, #8]
 80018d0:	f000 fb64 	bl	8001f9c <Write_GPIO>
    	return;
 80018d4:	e7f7      	b.n	80018c6 <ICM20602_Read+0x46>
    	Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 80018d6:	2201      	movs	r2, #1
 80018d8:	7921      	ldrb	r1, [r4, #4]
 80018da:	8920      	ldrh	r0, [r4, #8]
 80018dc:	f000 fb5e 	bl	8001f9c <Write_GPIO>
		return;
 80018e0:	e7f1      	b.n	80018c6 <ICM20602_Read+0x46>

080018e2 <ICM20602_Write>:

void ICM20602_Write(ICM20602 *dev, uint8_t address, uint8_t value)
{
 80018e2:	b510      	push	{r4, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	4604      	mov	r4, r0
 80018e8:	f88d 1007 	strb.w	r1, [sp, #7]
 80018ec:	f88d 2006 	strb.w	r2, [sp, #6]
	address &= 0x7F;  // Write operation
 80018f0:	b2cb      	uxtb	r3, r1
 80018f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018f6:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(dev->cs_port, dev->cs_pin, LOW);
 80018fa:	2200      	movs	r2, #0
 80018fc:	7901      	ldrb	r1, [r0, #4]
 80018fe:	8900      	ldrh	r0, [r0, #8]
 8001900:	f000 fb4c 	bl	8001f9c <Write_GPIO>
    if (SPI_TX(dev->SPIx, &address, 1) != 0) { /* Handle timeout error */ }
 8001904:	2201      	movs	r2, #1
 8001906:	f10d 0107 	add.w	r1, sp, #7
 800190a:	6820      	ldr	r0, [r4, #0]
 800190c:	f000 fbba 	bl	8002084 <SPI_TX>
    if (SPI_TX(dev->SPIx, &value, 1) != 0) {   /* Handle timeout error */ }
 8001910:	2201      	movs	r2, #1
 8001912:	f10d 0106 	add.w	r1, sp, #6
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	f000 fbb4 	bl	8002084 <SPI_TX>
    Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 800191c:	2201      	movs	r2, #1
 800191e:	7921      	ldrb	r1, [r4, #4]
 8001920:	8920      	ldrh	r0, [r4, #8]
 8001922:	f000 fb3b 	bl	8001f9c <Write_GPIO>

    HAL_Delay(20);
 8001926:	2014      	movs	r0, #20
 8001928:	f001 fc34 	bl	8003194 <HAL_Delay>
}
 800192c:	b002      	add	sp, #8
 800192e:	bd10      	pop	{r4, pc}

08001930 <ICM20602_Remove_DC_Offset>:
{
 8001930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001934:	b085      	sub	sp, #20
 8001936:	4605      	mov	r5, r0
 8001938:	460e      	mov	r6, r1
    int16_t offset[3] = {0, 0, 0};
 800193a:	2400      	movs	r4, #0
 800193c:	f8ad 4008 	strh.w	r4, [sp, #8]
 8001940:	f8ad 400a 	strh.w	r4, [sp, #10]
 8001944:	f8ad 400c 	strh.w	r4, [sp, #12]
    for (int8_t i = 0; i < mean; i++)
 8001948:	e028      	b.n	800199c <ICM20602_Remove_DC_Offset+0x6c>
        ICM20602_Read(dev, ICM20602_REG_GYRO_XOUT_H, rxData, 6);
 800194a:	2306      	movs	r3, #6
 800194c:	466a      	mov	r2, sp
 800194e:	2143      	movs	r1, #67	@ 0x43
 8001950:	4628      	mov	r0, r5
 8001952:	f7ff ff95 	bl	8001880 <ICM20602_Read>
        offset[0] += (rxData[0] << 8) | rxData[1];
 8001956:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800195a:	f89d 1000 	ldrb.w	r1, [sp]
 800195e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001962:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001966:	4413      	add	r3, r2
 8001968:	f8ad 3008 	strh.w	r3, [sp, #8]
        offset[1] += (rxData[2] << 8) | rxData[3];
 800196c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001970:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001974:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001978:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800197c:	4413      	add	r3, r2
 800197e:	f8ad 300a 	strh.w	r3, [sp, #10]
        offset[2] += (rxData[4] << 8) | rxData[5];
 8001982:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001986:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800198a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800198e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001992:	4413      	add	r3, r2
 8001994:	f8ad 300c 	strh.w	r3, [sp, #12]
    for (int8_t i = 0; i < mean; i++)
 8001998:	3401      	adds	r4, #1
 800199a:	b264      	sxtb	r4, r4
 800199c:	42b4      	cmp	r4, r6
 800199e:	dbd4      	blt.n	800194a <ICM20602_Remove_DC_Offset+0x1a>
    offset[0] /= mean;
 80019a0:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 80019a4:	fb98 f8f6 	sdiv	r8, r8, r6
 80019a8:	fa0f f288 	sxth.w	r2, r8
 80019ac:	f8ad 2008 	strh.w	r2, [sp, #8]
    offset[1] /= mean;
 80019b0:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 80019b4:	fb97 f7f6 	sdiv	r7, r7, r6
 80019b8:	fa0f f987 	sxth.w	r9, r7
 80019bc:	f8ad 900a 	strh.w	r9, [sp, #10]
    offset[2] /= mean;
 80019c0:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 80019c4:	fb94 f4f6 	sdiv	r4, r4, r6
 80019c8:	b226      	sxth	r6, r4
 80019ca:	f8ad 600c 	strh.w	r6, [sp, #12]
    ICM20602_Write(dev, ICM20602_REG_XG_OFFS_USRH, (offset[0] * -2) >> 8);
 80019ce:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 80019d2:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 80019d6:	2113      	movs	r1, #19
 80019d8:	4628      	mov	r0, r5
 80019da:	f7ff ff82 	bl	80018e2 <ICM20602_Write>
    ICM20602_Write(dev, ICM20602_REG_XG_OFFS_USRL, offset[0] * -2);
 80019de:	ebc8 18c8 	rsb	r8, r8, r8, lsl #7
 80019e2:	ea4f 0248 	mov.w	r2, r8, lsl #1
 80019e6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019ea:	2114      	movs	r1, #20
 80019ec:	4628      	mov	r0, r5
 80019ee:	f7ff ff78 	bl	80018e2 <ICM20602_Write>
    ICM20602_Write(dev, ICM20602_REG_YG_OFFS_USRH, (offset[1] * -2) >> 8);
 80019f2:	ebc9 79c9 	rsb	r9, r9, r9, lsl #31
 80019f6:	f3c9 12c7 	ubfx	r2, r9, #7, #8
 80019fa:	2115      	movs	r1, #21
 80019fc:	4628      	mov	r0, r5
 80019fe:	f7ff ff70 	bl	80018e2 <ICM20602_Write>
    ICM20602_Write(dev, ICM20602_REG_YG_OFFS_USRL, offset[1] * -2);
 8001a02:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
 8001a06:	007a      	lsls	r2, r7, #1
 8001a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a0c:	2116      	movs	r1, #22
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f7ff ff67 	bl	80018e2 <ICM20602_Write>
    ICM20602_Write(dev, ICM20602_REG_ZG_OFFS_USRH, (offset[2] * -2) >> 8);
 8001a14:	ebc6 76c6 	rsb	r6, r6, r6, lsl #31
 8001a18:	f3c6 12c7 	ubfx	r2, r6, #7, #8
 8001a1c:	2117      	movs	r1, #23
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f7ff ff5f 	bl	80018e2 <ICM20602_Write>
    ICM20602_Write(dev, ICM20602_REG_ZG_OFFS_USRL, offset[2] * -2);
 8001a24:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 8001a28:	0062      	lsls	r2, r4, #1
 8001a2a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a2e:	2118      	movs	r1, #24
 8001a30:	4628      	mov	r0, r5
 8001a32:	f7ff ff56 	bl	80018e2 <ICM20602_Write>
}
 8001a36:	b005      	add	sp, #20
 8001a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a3c <ICM20602_Init>:
{
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	4604      	mov	r4, r0
    dev->gyroXRaw = 0.0f;
 8001a42:	2500      	movs	r5, #0
 8001a44:	8285      	strh	r5, [r0, #20]
    dev->gyroYRaw = 0.0f;
 8001a46:	82c5      	strh	r5, [r0, #22]
    dev->gyroZRaw = 0.0f;
 8001a48:	8305      	strh	r5, [r0, #24]
    dev->accXRaw = 0.0f;
 8001a4a:	8345      	strh	r5, [r0, #26]
    dev->accYRaw = 0.0f;
 8001a4c:	8385      	strh	r5, [r0, #28]
    dev->accZRaw = 0.0f;
 8001a4e:	83c5      	strh	r5, [r0, #30]
    dev->accResult = 0.0f;
 8001a50:	2300      	movs	r3, #0
 8001a52:	6383      	str	r3, [r0, #56]	@ 0x38
    dev->temperatureC = 0.0f;
 8001a54:	63c3      	str	r3, [r0, #60]	@ 0x3c
    Init_GPIO(dev->cs_port, dev->cs_pin, OUT50, O_GP_PP); // CS
 8001a56:	462b      	mov	r3, r5
 8001a58:	2203      	movs	r2, #3
 8001a5a:	7901      	ldrb	r1, [r0, #4]
 8001a5c:	8900      	ldrh	r0, [r0, #8]
 8001a5e:	f000 fa59 	bl	8001f14 <Init_GPIO>
    Write_GPIO(dev->cs_port, dev->cs_pin, HIGH);
 8001a62:	2201      	movs	r2, #1
 8001a64:	7921      	ldrb	r1, [r4, #4]
 8001a66:	8920      	ldrh	r0, [r4, #8]
 8001a68:	f000 fa98 	bl	8001f9c <Write_GPIO>
    Init_GPIO(dev->int_port, dev->int_pin, IN, I_PP); // Init GPIO for the interrupt
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	462a      	mov	r2, r5
 8001a70:	7b21      	ldrb	r1, [r4, #12]
 8001a72:	8a20      	ldrh	r0, [r4, #16]
 8001a74:	f000 fa4e 	bl	8001f14 <Init_GPIO>
    ICM20602_Write(dev, ICM20602_REG_PWR_MGMT_1, 0x80);
 8001a78:	2280      	movs	r2, #128	@ 0x80
 8001a7a:	216b      	movs	r1, #107	@ 0x6b
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff ff30 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_WHO_AM_I, &rxData, 1);
 8001a82:	2301      	movs	r3, #1
 8001a84:	f10d 0207 	add.w	r2, sp, #7
 8001a88:	2175      	movs	r1, #117	@ 0x75
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff fef8 	bl	8001880 <ICM20602_Read>
        if (rxData != 0x12) return 0;
 8001a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a94:	2b12      	cmp	r3, #18
 8001a96:	d003      	beq.n	8001aa0 <ICM20602_Init+0x64>
 8001a98:	2500      	movs	r5, #0
}
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}
    ICM20602_Write(dev, ICM20602_REG_I2C_IF, 0x40);
 8001aa0:	2240      	movs	r2, #64	@ 0x40
 8001aa2:	2170      	movs	r1, #112	@ 0x70
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff ff1c 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_I2C_IF, &rxData, 1);
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f10d 0207 	add.w	r2, sp, #7
 8001ab0:	2170      	movs	r1, #112	@ 0x70
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff fee4 	bl	8001880 <ICM20602_Read>
        if (rxData != 0x40) return 0;
 8001ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001abc:	2b40      	cmp	r3, #64	@ 0x40
 8001abe:	d001      	beq.n	8001ac4 <ICM20602_Init+0x88>
 8001ac0:	2500      	movs	r5, #0
 8001ac2:	e7ea      	b.n	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Write(dev, ICM20602_REG_PWR_MGMT_1, 0x01);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	216b      	movs	r1, #107	@ 0x6b
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff ff0a 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_PWR_MGMT_1, &rxData, 1);
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f10d 0207 	add.w	r2, sp, #7
 8001ad4:	216b      	movs	r1, #107	@ 0x6b
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fed2 	bl	8001880 <ICM20602_Read>
        if (rxData != 0x01) return 0;
 8001adc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d001      	beq.n	8001ae8 <ICM20602_Init+0xac>
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	e7d8      	b.n	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Write(dev, ICM20602_REG_SMPLRT_DIV, 0x00);
 8001ae8:	462a      	mov	r2, r5
 8001aea:	2119      	movs	r1, #25
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fef8 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_SMPLRT_DIV, &rxData, 1);
 8001af2:	2301      	movs	r3, #1
 8001af4:	f10d 0207 	add.w	r2, sp, #7
 8001af8:	2119      	movs	r1, #25
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff fec0 	bl	8001880 <ICM20602_Read>
		if (rxData != 0x00) return 0;
 8001b00:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8001b04:	b10d      	cbz	r5, 8001b0a <ICM20602_Init+0xce>
 8001b06:	2500      	movs	r5, #0
 8001b08:	e7c7      	b.n	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Write(dev, ICM20602_REG_CONFIG, 0x05);
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	211a      	movs	r1, #26
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff fee7 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_CONFIG, &rxData, 1);
 8001b14:	2301      	movs	r3, #1
 8001b16:	f10d 0207 	add.w	r2, sp, #7
 8001b1a:	211a      	movs	r1, #26
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff feaf 	bl	8001880 <ICM20602_Read>
		if (rxData != 0x05) return 0;
 8001b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d1b7      	bne.n	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Write(dev, ICM20602_REG_GYRO_CONFIG, 0x18);
 8001b2a:	2218      	movs	r2, #24
 8001b2c:	211b      	movs	r1, #27
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff fed7 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_CONFIG, &rxData, 1);
 8001b34:	2301      	movs	r3, #1
 8001b36:	f10d 0207 	add.w	r2, sp, #7
 8001b3a:	211a      	movs	r1, #26
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff fe9f 	bl	8001880 <ICM20602_Read>
        if (rxData != 0x18) return 0;
 8001b42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b46:	2b18      	cmp	r3, #24
 8001b48:	d1a7      	bne.n	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Write(dev, ICM20602_REG_ACCEL_CONFIG, 0x18);
 8001b4a:	2218      	movs	r2, #24
 8001b4c:	211c      	movs	r1, #28
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff fec7 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_ACCEL_CONFIG, &rxData, 1);
 8001b54:	2301      	movs	r3, #1
 8001b56:	f10d 0207 	add.w	r2, sp, #7
 8001b5a:	211c      	movs	r1, #28
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7ff fe8f 	bl	8001880 <ICM20602_Read>
        if (rxData != 0x18) return 0;
 8001b62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b66:	2b18      	cmp	r3, #24
 8001b68:	d197      	bne.n	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Write(dev, ICM20602_REG_ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	211d      	movs	r1, #29
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff feb7 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_ACCEL_CONFIG2, &rxData, 1);
 8001b74:	2301      	movs	r3, #1
 8001b76:	f10d 0207 	add.w	r2, sp, #7
 8001b7a:	211d      	movs	r1, #29
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff fe7f 	bl	8001880 <ICM20602_Read>
        if (rxData != 0x03) return 0;
 8001b82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d187      	bne.n	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Write(dev, ICM20602_REG_INT_ENABLE, 0x01);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2138      	movs	r1, #56	@ 0x38
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff fea7 	bl	80018e2 <ICM20602_Write>
    ICM20602_Read(dev, ICM20602_REG_INT_ENABLE, &rxData, 1);
 8001b94:	2301      	movs	r3, #1
 8001b96:	f10d 0207 	add.w	r2, sp, #7
 8001b9a:	2138      	movs	r1, #56	@ 0x38
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff fe6f 	bl	8001880 <ICM20602_Read>
        if (rxData != 0x01) return 0;
 8001ba2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8001ba6:	2e01      	cmp	r6, #1
 8001ba8:	f47f af77 	bne.w	8001a9a <ICM20602_Init+0x5e>
    ICM20602_Remove_DC_Offset(dev, 2);
 8001bac:	2102      	movs	r1, #2
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff febe 	bl	8001930 <ICM20602_Remove_DC_Offset>
    return 1;
 8001bb4:	4635      	mov	r5, r6
 8001bb6:	e770      	b.n	8001a9a <ICM20602_Init+0x5e>

08001bb8 <L76LM33_SendCommand>:
    return 1; // OK
}

uint8_t L76LM33_SendCommand(L76LM33 *devL76L, char *command) {

    if (command == NULL) {
 8001bb8:	b161      	cbz	r1, 8001bd4 <L76LM33_SendCommand+0x1c>
uint8_t L76LM33_SendCommand(L76LM33 *devL76L, char *command) {
 8001bba:	b538      	push	{r3, r4, r5, lr}
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	460d      	mov	r5, r1
        return 0; // Error
    }
    USART_TX(devL76L->USARTx, (uint8_t*)command, strlen(command));
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	f7fe fac5 	bl	8000150 <strlen>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4629      	mov	r1, r5
 8001bca:	6820      	ldr	r0, [r4, #0]
 8001bcc:	f000 fb0e 	bl	80021ec <USART_TX>
    return 1; // OK
 8001bd0:	2001      	movs	r0, #1
}
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
        return 0; // Error
 8001bd4:	2000      	movs	r0, #0
}
 8001bd6:	4770      	bx	lr

08001bd8 <L76LM33_Init>:
uint8_t L76LM33_Init(L76LM33 *devL76L) {
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	b09a      	sub	sp, #104	@ 0x68
 8001bdc:	4606      	mov	r6, r0
    char PROTOCOL_SETRMS[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*35\r\n";
 8001bde:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8001be2:	4c17      	ldr	r4, [pc, #92]	@ (8001c40 <L76LM33_Init+0x68>)
 8001be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001bf6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001bfa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8001bfe:	f8ac 2000 	strh.w	r2, [ip]
    char PROTOCOL_GPSSEARCHONLY[] = "$PMTK353,1,0,0,0,0*2A\r\n";
 8001c02:	ac05      	add	r4, sp, #20
 8001c04:	4d0f      	ldr	r5, [pc, #60]	@ (8001c44 <L76LM33_Init+0x6c>)
 8001c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c0e:	e884 0003 	stmia.w	r4, {r0, r1}
    char PROTOCOL_NAVMODE[] = "PMTK886,2*2A\r\n";
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <L76LM33_Init+0x70>)
 8001c14:	ac01      	add	r4, sp, #4
 8001c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c18:	c407      	stmia	r4!, {r0, r1, r2}
 8001c1a:	f824 3b02 	strh.w	r3, [r4], #2
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	7023      	strb	r3, [r4, #0]
    L76LM33_SendCommand(devL76L, PROTOCOL_SETRMS);
 8001c22:	a90b      	add	r1, sp, #44	@ 0x2c
 8001c24:	4630      	mov	r0, r6
 8001c26:	f7ff ffc7 	bl	8001bb8 <L76LM33_SendCommand>
    L76LM33_SendCommand(devL76L, PROTOCOL_GPSSEARCHONLY);
 8001c2a:	a905      	add	r1, sp, #20
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f7ff ffc3 	bl	8001bb8 <L76LM33_SendCommand>
    L76LM33_SendCommand(devL76L, PROTOCOL_NAVMODE);
 8001c32:	a901      	add	r1, sp, #4
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7ff ffbf 	bl	8001bb8 <L76LM33_SendCommand>
}
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	b01a      	add	sp, #104	@ 0x68
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	0800d018 	.word	0x0800d018
 8001c44:	0800d054 	.word	0x0800d054
 8001c48:	0800d06c 	.word	0x0800d06c

08001c4c <FATFS_ErrorToString>:
void MEM2067_Unmount(void);

// Debugging
const char* FATFS_ErrorToString(FRESULT result) {

    switch (result) {
 8001c4c:	2813      	cmp	r0, #19
 8001c4e:	d831      	bhi.n	8001cb4 <FATFS_ErrorToString+0x68>
 8001c50:	e8df f000 	tbb	[pc, r0]
 8001c54:	0e0c320a 	.word	0x0e0c320a
 8001c58:	16141210 	.word	0x16141210
 8001c5c:	1e1c1a18 	.word	0x1e1c1a18
 8001c60:	26242220 	.word	0x26242220
 8001c64:	2e2c2a28 	.word	0x2e2c2a28
 8001c68:	4814      	ldr	r0, [pc, #80]	@ (8001cbc <FATFS_ErrorToString+0x70>)
 8001c6a:	4770      	bx	lr
        case FR_OK: return "Succeeded\r\n";
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer\r\n";
        case FR_INT_ERR: return "Assertion failed\r\n";
 8001c6c:	4814      	ldr	r0, [pc, #80]	@ (8001cc0 <FATFS_ErrorToString+0x74>)
 8001c6e:	4770      	bx	lr
        case FR_NOT_READY: return "The physical drive cannot work\r\n";
 8001c70:	4814      	ldr	r0, [pc, #80]	@ (8001cc4 <FATFS_ErrorToString+0x78>)
 8001c72:	4770      	bx	lr
        case FR_NO_FILE: return "Could not find the file\r\n";
 8001c74:	4814      	ldr	r0, [pc, #80]	@ (8001cc8 <FATFS_ErrorToString+0x7c>)
 8001c76:	4770      	bx	lr
        case FR_NO_PATH: return "Could not find the path\r\n";
 8001c78:	4814      	ldr	r0, [pc, #80]	@ (8001ccc <FATFS_ErrorToString+0x80>)
 8001c7a:	4770      	bx	lr
        case FR_INVALID_NAME: return "The path name format is invalid\r\n";
 8001c7c:	4814      	ldr	r0, [pc, #80]	@ (8001cd0 <FATFS_ErrorToString+0x84>)
 8001c7e:	4770      	bx	lr
        case FR_DENIED: return "Access denied due to prohibited access or directory full\r\n";
 8001c80:	4814      	ldr	r0, [pc, #80]	@ (8001cd4 <FATFS_ErrorToString+0x88>)
 8001c82:	4770      	bx	lr
        case FR_EXIST: return "Access denied due to prohibited access\r\n";
 8001c84:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <FATFS_ErrorToString+0x8c>)
 8001c86:	4770      	bx	lr
        case FR_INVALID_OBJECT: return "The file/directory object is invalid\r\n";
 8001c88:	4814      	ldr	r0, [pc, #80]	@ (8001cdc <FATFS_ErrorToString+0x90>)
 8001c8a:	4770      	bx	lr
        case FR_WRITE_PROTECTED: return "The physical drive is write protected\r\n";
 8001c8c:	4814      	ldr	r0, [pc, #80]	@ (8001ce0 <FATFS_ErrorToString+0x94>)
 8001c8e:	4770      	bx	lr
        case FR_INVALID_DRIVE: return "The logical drive number is invalid\r\n";
 8001c90:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <FATFS_ErrorToString+0x98>)
 8001c92:	4770      	bx	lr
        case FR_NOT_ENABLED: return "The volume has no work area\r\n";
 8001c94:	4814      	ldr	r0, [pc, #80]	@ (8001ce8 <FATFS_ErrorToString+0x9c>)
 8001c96:	4770      	bx	lr
        case FR_NO_FILESYSTEM: return "There is no valid FAT volume\r\n";
 8001c98:	4814      	ldr	r0, [pc, #80]	@ (8001cec <FATFS_ErrorToString+0xa0>)
 8001c9a:	4770      	bx	lr
        case FR_MKFS_ABORTED: return "The f_mkfs() aborted due to any parameter error\r\n";
 8001c9c:	4814      	ldr	r0, [pc, #80]	@ (8001cf0 <FATFS_ErrorToString+0xa4>)
 8001c9e:	4770      	bx	lr
        case FR_TIMEOUT: return "Could not get a grant to access the volume within defined period\r\n";
 8001ca0:	4814      	ldr	r0, [pc, #80]	@ (8001cf4 <FATFS_ErrorToString+0xa8>)
 8001ca2:	4770      	bx	lr
        case FR_LOCKED: return "The operation is rejected according to the file sharing policy\r\n";
 8001ca4:	4814      	ldr	r0, [pc, #80]	@ (8001cf8 <FATFS_ErrorToString+0xac>)
 8001ca6:	4770      	bx	lr
        case FR_NOT_ENOUGH_CORE: return "LFN working buffer could not be allocated\r\n";
 8001ca8:	4814      	ldr	r0, [pc, #80]	@ (8001cfc <FATFS_ErrorToString+0xb0>)
 8001caa:	4770      	bx	lr
        case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_SHARE\r\n";
 8001cac:	4814      	ldr	r0, [pc, #80]	@ (8001d00 <FATFS_ErrorToString+0xb4>)
 8001cae:	4770      	bx	lr
        case FR_INVALID_PARAMETER: return "Given parameter is invalid\r\n";
 8001cb0:	4814      	ldr	r0, [pc, #80]	@ (8001d04 <FATFS_ErrorToString+0xb8>)
 8001cb2:	4770      	bx	lr
        default: return "Unknown error\r\n";
 8001cb4:	4814      	ldr	r0, [pc, #80]	@ (8001d08 <FATFS_ErrorToString+0xbc>)
 8001cb6:	4770      	bx	lr
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer\r\n";
 8001cb8:	4814      	ldr	r0, [pc, #80]	@ (8001d0c <FATFS_ErrorToString+0xc0>)
    }
}
 8001cba:	4770      	bx	lr
 8001cbc:	0800d07c 	.word	0x0800d07c
 8001cc0:	0800d0c0 	.word	0x0800d0c0
 8001cc4:	0800d0d4 	.word	0x0800d0d4
 8001cc8:	0800d0f8 	.word	0x0800d0f8
 8001ccc:	0800d114 	.word	0x0800d114
 8001cd0:	0800d130 	.word	0x0800d130
 8001cd4:	0800d154 	.word	0x0800d154
 8001cd8:	0800d190 	.word	0x0800d190
 8001cdc:	0800d1bc 	.word	0x0800d1bc
 8001ce0:	0800d1e4 	.word	0x0800d1e4
 8001ce4:	0800d20c 	.word	0x0800d20c
 8001ce8:	0800d234 	.word	0x0800d234
 8001cec:	0800d254 	.word	0x0800d254
 8001cf0:	0800d274 	.word	0x0800d274
 8001cf4:	0800d2a8 	.word	0x0800d2a8
 8001cf8:	0800d2ec 	.word	0x0800d2ec
 8001cfc:	0800d330 	.word	0x0800d330
 8001d00:	0800d35c 	.word	0x0800d35c
 8001d04:	0800d380 	.word	0x0800d380
 8001d08:	0800d3a0 	.word	0x0800d3a0
 8001d0c:	0800d088 	.word	0x0800d088

08001d10 <MEM2067_Write>:
	f_close(&fil);

	return 1;
}

void MEM2067_Write(char *filename, char* data) {
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	460d      	mov	r5, r1

	fresult = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001d14:	2212      	movs	r2, #18
 8001d16:	4601      	mov	r1, r0
 8001d18:	480d      	ldr	r0, [pc, #52]	@ (8001d50 <MEM2067_Write+0x40>)
 8001d1a:	f006 f9f9 	bl	8008110 <f_open>
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <MEM2067_Write+0x44>)
 8001d20:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK){
 8001d22:	b970      	cbnz	r0, 8001d42 <MEM2067_Write+0x32>
		printf(" -> SD Card open: %s", FATFS_ErrorToString(fresult));
	}
	f_lseek(&fil, f_size(&fil));
 8001d24:	4c0a      	ldr	r4, [pc, #40]	@ (8001d50 <MEM2067_Write+0x40>)
 8001d26:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f007 f835 	bl	8008d9c <f_lseek>
	f_puts(data, &fil);
 8001d32:	4621      	mov	r1, r4
 8001d34:	4628      	mov	r0, r5
 8001d36:	f007 fc39 	bl	80095ac <f_puts>

	f_close(&fil);
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f007 f803 	bl	8008d46 <f_close>
}
 8001d40:	bd38      	pop	{r3, r4, r5, pc}
		printf(" -> SD Card open: %s", FATFS_ErrorToString(fresult));
 8001d42:	f7ff ff83 	bl	8001c4c <FATFS_ErrorToString>
 8001d46:	4601      	mov	r1, r0
 8001d48:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <MEM2067_Write+0x48>)
 8001d4a:	f008 faff 	bl	800a34c <iprintf>
 8001d4e:	e7e9      	b.n	8001d24 <MEM2067_Write+0x14>
 8001d50:	20000230 	.word	0x20000230
 8001d54:	2000022c 	.word	0x2000022c
 8001d58:	0800d3b0 	.word	0x0800d3b0

08001d5c <MEM2067_Mount>:
uint8_t MEM2067_Mount(char* filename) {
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4604      	mov	r4, r0
	fresult = f_mount(&fs, "/", 1);
 8001d60:	2201      	movs	r2, #1
 8001d62:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <MEM2067_Mount+0x38>)
 8001d64:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <MEM2067_Mount+0x3c>)
 8001d66:	f006 f989 	bl	800807c <f_mount>
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <MEM2067_Mount+0x40>)
 8001d6c:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK){
 8001d6e:	b940      	cbnz	r0, 8001d82 <MEM2067_Mount+0x26>
	MEM2067_Write(filename, "LOG\n");
 8001d70:	490b      	ldr	r1, [pc, #44]	@ (8001da0 <MEM2067_Mount+0x44>)
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff ffcc 	bl	8001d10 <MEM2067_Write>
	f_close(&fil);
 8001d78:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <MEM2067_Mount+0x48>)
 8001d7a:	f006 ffe4 	bl	8008d46 <f_close>
	return 1;
 8001d7e:	2001      	movs	r0, #1
}
 8001d80:	bd10      	pop	{r4, pc}
		printf(" -> SD Card Mount: %s", FATFS_ErrorToString(fresult));
 8001d82:	f7ff ff63 	bl	8001c4c <FATFS_ErrorToString>
 8001d86:	4601      	mov	r1, r0
 8001d88:	4807      	ldr	r0, [pc, #28]	@ (8001da8 <MEM2067_Mount+0x4c>)
 8001d8a:	f008 fadf 	bl	800a34c <iprintf>
		return 0;
 8001d8e:	2000      	movs	r0, #0
 8001d90:	e7f6      	b.n	8001d80 <MEM2067_Mount+0x24>
 8001d92:	bf00      	nop
 8001d94:	0800d3c8 	.word	0x0800d3c8
 8001d98:	2000125c 	.word	0x2000125c
 8001d9c:	2000022c 	.word	0x2000022c
 8001da0:	0800d3e4 	.word	0x0800d3e4
 8001da4:	20000230 	.word	0x20000230
 8001da8:	0800d3cc 	.word	0x0800d3cc

08001dac <MEM2067_Infos>:
	if (fresult != FR_OK){
		printf(" -> SD Card Mount: %s", FATFS_ErrorToString(fresult));
	}
}

void MEM2067_Infos(void) {
 8001dac:	b570      	push	{r4, r5, r6, lr}

	f_getfree("", &fre_clust, &pfr);
 8001dae:	4c18      	ldr	r4, [pc, #96]	@ (8001e10 <MEM2067_Infos+0x64>)
 8001db0:	4e18      	ldr	r6, [pc, #96]	@ (8001e14 <MEM2067_Infos+0x68>)
 8001db2:	4622      	mov	r2, r4
 8001db4:	4631      	mov	r1, r6
 8001db6:	4818      	ldr	r0, [pc, #96]	@ (8001e18 <MEM2067_Infos+0x6c>)
 8001db8:	f007 fae1 	bl	800937e <f_getfree>
	total_space = (uint32_t)((pfr->n_fatent - 2) * pfr->csize * 0.5);
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc2:	6958      	ldr	r0, [r3, #20]
 8001dc4:	3802      	subs	r0, #2
 8001dc6:	789d      	ldrb	r5, [r3, #2]
 8001dc8:	fb05 f000 	mul.w	r0, r5, r0
 8001dcc:	f7fe fb0a 	bl	80003e4 <__aeabi_ui2d>
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <MEM2067_Infos+0x70>)
 8001dd4:	f7fe fb80 	bl	80004d8 <__aeabi_dmul>
 8001dd8:	f7fe fe56 	bl	8000a88 <__aeabi_d2uiz>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <MEM2067_Infos+0x74>)
 8001de0:	6018      	str	r0, [r3, #0]
	free_space = (uint32_t)(fre_clust * pfr->csize * 0.5);
 8001de2:	6830      	ldr	r0, [r6, #0]
 8001de4:	fb05 f000 	mul.w	r0, r5, r0
 8001de8:	f7fe fafc 	bl	80003e4 <__aeabi_ui2d>
 8001dec:	2200      	movs	r2, #0
 8001dee:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <MEM2067_Infos+0x70>)
 8001df0:	f7fe fb72 	bl	80004d8 <__aeabi_dmul>
 8001df4:	f7fe fe48 	bl	8000a88 <__aeabi_d2uiz>
 8001df8:	4d0a      	ldr	r5, [pc, #40]	@ (8001e24 <MEM2067_Infos+0x78>)
 8001dfa:	6028      	str	r0, [r5, #0]
	printf(" -> Total SD Card Size: %lu Bytes\r\n", total_space);
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	480a      	ldr	r0, [pc, #40]	@ (8001e28 <MEM2067_Infos+0x7c>)
 8001e00:	f008 faa4 	bl	800a34c <iprintf>
	printf(" -> Free SD Card Space: %lu Bytes\r\n\n", free_space);
 8001e04:	6829      	ldr	r1, [r5, #0]
 8001e06:	4809      	ldr	r0, [pc, #36]	@ (8001e2c <MEM2067_Infos+0x80>)
 8001e08:	f008 faa0 	bl	800a34c <iprintf>
}
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000228 	.word	0x20000228
 8001e14:	20000224 	.word	0x20000224
 8001e18:	0800d434 	.word	0x0800d434
 8001e1c:	3fe00000 	.word	0x3fe00000
 8001e20:	20000220 	.word	0x20000220
 8001e24:	2000021c 	.word	0x2000021c
 8001e28:	0800d3ec 	.word	0x0800d3ec
 8001e2c:	0800d410 	.word	0x0800d410

08001e30 <RFD900_Init>:
#include "GAUL_Drivers/RFD900.h"
#include "GAUL_Drivers/CD74HC4051.h"

int RFD900_Init(RFD900 *devRFD) {

	devRFD->header = 0x00;
 8001e30:	2300      	movs	r3, #0
 8001e32:	7103      	strb	r3, [r0, #4]
    devRFD->data = NULL;
 8001e34:	6083      	str	r3, [r0, #8]
    devRFD->crc = 0x00;
 8001e36:	60c3      	str	r3, [r0, #12]
    devRFD->size = 0x00;
 8001e38:	7403      	strb	r3, [r0, #16]

    return 1;
}
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	4770      	bx	lr
	...

08001e40 <ws2812_timer2_init>:
static uint16_t ws2812_gpio_set_bits = 0;
static uint16_t dma_buffer[DMA_BUFFER_SIZE];


static void ws2812_timer2_init(void)
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	b08e      	sub	sp, #56	@ 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e44:	2400      	movs	r4, #0
 8001e46:	940a      	str	r4, [sp, #40]	@ 0x28
 8001e48:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001e4a:	940c      	str	r4, [sp, #48]	@ 0x30
 8001e4c:	940d      	str	r4, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4e:	9408      	str	r4, [sp, #32]
 8001e50:	9409      	str	r4, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001e52:	9401      	str	r4, [sp, #4]
 8001e54:	9402      	str	r4, [sp, #8]
 8001e56:	9403      	str	r4, [sp, #12]
 8001e58:	9404      	str	r4, [sp, #16]
 8001e5a:	9405      	str	r4, [sp, #20]
 8001e5c:	9406      	str	r4, [sp, #24]
 8001e5e:	9407      	str	r4, [sp, #28]

    htimer2.Instance = TIM2;
 8001e60:	4d1a      	ldr	r5, [pc, #104]	@ (8001ecc <ws2812_timer2_init+0x8c>)
 8001e62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e66:	602b      	str	r3, [r5, #0]
    htimer2.Init.Prescaler = 0;
 8001e68:	606c      	str	r4, [r5, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	60ac      	str	r4, [r5, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8001e6c:	235a      	movs	r3, #90	@ 0x5a
 8001e6e:	60eb      	str	r3, [r5, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	612c      	str	r4, [r5, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htimer2);
 8001e74:	4628      	mov	r0, r5
 8001e76:	f002 ff1f 	bl	8004cb8 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e7e:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8001e80:	a90a      	add	r1, sp, #40	@ 0x28
 8001e82:	4628      	mov	r0, r5
 8001e84:	f003 f882 	bl	8004f8c <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8001e88:	4628      	mov	r0, r5
 8001e8a:	f002 ff64 	bl	8004d56 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	9408      	str	r4, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8001e92:	a908      	add	r1, sp, #32
 8001e94:	4628      	mov	r0, r5
 8001e96:	f003 fbc1 	bl	800561c <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9a:	2660      	movs	r6, #96	@ 0x60
 8001e9c:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8001e9e:	231c      	movs	r3, #28
 8001ea0:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea2:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea4:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	a901      	add	r1, sp, #4
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f002 ffac 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb0:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8001eb2:	2339      	movs	r3, #57	@ 0x39
 8001eb4:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb6:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb8:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001eba:	2204      	movs	r2, #4
 8001ebc:	eb0d 0102 	add.w	r1, sp, r2
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	f002 ffa1 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
}
 8001ec6:	b00e      	add	sp, #56	@ 0x38
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000228c 	.word	0x2000228c

08001ed0 <WS2812_Init>:
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
}

void WS2812_Init()
{
 8001ed0:	b500      	push	{lr}
 8001ed2:	b083      	sub	sp, #12
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <WS2812_Init+0x40>)
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	9b01      	ldr	r3, [sp, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4611      	mov	r1, r2
 8001eec:	200c      	movs	r0, #12
 8001eee:	f001 fc42 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f001 fc3d 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	4611      	mov	r1, r2
 8001f00:	2011      	movs	r0, #17
 8001f02:	f001 fc38 	bl	8003776 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001f06:	f7ff ff9b 	bl	8001e40 <ws2812_timer2_init>
}
 8001f0a:	b003      	add	sp, #12
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f10:	40021000 	.word	0x40021000

08001f14 <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt) {
 8001f14:	b510      	push	{r4, lr}
    volatile unsigned long *CR;
    unsigned short tPIN = pin;
    unsigned short offset = (pin < 8) ? GPIO_CRL : GPIO_CRH;
 8001f16:	2907      	cmp	r1, #7
 8001f18:	d904      	bls.n	8001f24 <Init_GPIO+0x10>

    if (pin >= 8) tPIN -= 8;
 8001f1a:	3908      	subs	r1, #8
 8001f1c:	b289      	uxth	r1, r1
    unsigned short offset = (pin < 8) ? GPIO_CRL : GPIO_CRH;
 8001f1e:	f04f 0e04 	mov.w	lr, #4
 8001f22:	e001      	b.n	8001f28 <Init_GPIO+0x14>
 8001f24:	f04f 0e00 	mov.w	lr, #0

    if (port == 1) {
 8001f28:	2801      	cmp	r0, #1
 8001f2a:	d00d      	beq.n	8001f48 <Init_GPIO+0x34>
        RCC_APB2ENR |= (1 << 2); // Activer PORT A
        CR = (volatile unsigned long *)((unsigned long)GPIO_A + offset);
    } else if (port == 2) {
 8001f2c:	2802      	cmp	r0, #2
 8001f2e:	d029      	beq.n	8001f84 <Init_GPIO+0x70>
        RCC_APB2ENR |= (1 << 3); // Activer PORT B
        CR = (volatile unsigned long *)((unsigned long)GPIO_B + offset);
    } else if (port == 3) {
 8001f30:	2803      	cmp	r0, #3
 8001f32:	d112      	bne.n	8001f5a <Init_GPIO+0x46>
        RCC_APB2ENR |= (1 << 4); // Activer PORT C
 8001f34:	4c18      	ldr	r4, [pc, #96]	@ (8001f98 <Init_GPIO+0x84>)
 8001f36:	69a0      	ldr	r0, [r4, #24]
 8001f38:	f040 0010 	orr.w	r0, r0, #16
 8001f3c:	61a0      	str	r0, [r4, #24]
        CR = (volatile unsigned long *)((unsigned long)GPIO_C + offset);
 8001f3e:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001f42:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 8001f46:	e008      	b.n	8001f5a <Init_GPIO+0x46>
        RCC_APB2ENR |= (1 << 2); // Activer PORT A
 8001f48:	4c13      	ldr	r4, [pc, #76]	@ (8001f98 <Init_GPIO+0x84>)
 8001f4a:	69a0      	ldr	r0, [r4, #24]
 8001f4c:	f040 0004 	orr.w	r0, r0, #4
 8001f50:	61a0      	str	r0, [r4, #24]
        CR = (volatile unsigned long *)((unsigned long)GPIO_A + offset);
 8001f52:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001f56:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
    }

    *CR &= ~(0xF << (tPIN * 4)); // Réinitialiser le pin cible
 8001f5a:	f8dc 0000 	ldr.w	r0, [ip]
 8001f5e:	0089      	lsls	r1, r1, #2
 8001f60:	f04f 0e0f 	mov.w	lr, #15
 8001f64:	fa0e fe01 	lsl.w	lr, lr, r1
 8001f68:	ea20 000e 	bic.w	r0, r0, lr
 8001f6c:	f8cc 0000 	str.w	r0, [ip]
    *CR |= (dir << (tPIN * 4)) | (opt << (tPIN * 4 + 2)); // Configurer la direction et l'option du PIN
 8001f70:	f8dc 0000 	ldr.w	r0, [ip]
 8001f74:	408a      	lsls	r2, r1
 8001f76:	3102      	adds	r1, #2
 8001f78:	408b      	lsls	r3, r1
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4303      	orrs	r3, r0
 8001f7e:	f8cc 3000 	str.w	r3, [ip]
}
 8001f82:	bd10      	pop	{r4, pc}
        RCC_APB2ENR |= (1 << 3); // Activer PORT B
 8001f84:	4c04      	ldr	r4, [pc, #16]	@ (8001f98 <Init_GPIO+0x84>)
 8001f86:	69a0      	ldr	r0, [r4, #24]
 8001f88:	f040 0008 	orr.w	r0, r0, #8
 8001f8c:	61a0      	str	r0, [r4, #24]
        CR = (volatile unsigned long *)((unsigned long)GPIO_B + offset);
 8001f8e:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001f92:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 8001f96:	e7e0      	b.n	8001f5a <Init_GPIO+0x46>
 8001f98:	40021000 	.word	0x40021000

08001f9c <Write_GPIO>:

void Write_GPIO(unsigned short port, unsigned short pin, unsigned short state) {
    volatile unsigned long *ODR;
    unsigned long offset = GPIO_ODR;

    if (port == 1) {
 8001f9c:	2801      	cmp	r0, #1
 8001f9e:	d005      	beq.n	8001fac <Write_GPIO+0x10>
        ODR = (volatile unsigned long *)((unsigned long)GPIO_A + offset);
    } else if (port == 2) {
 8001fa0:	2802      	cmp	r0, #2
 8001fa2:	d00c      	beq.n	8001fbe <Write_GPIO+0x22>
        ODR = (volatile unsigned long *)((unsigned long)GPIO_B + offset);
    } else if (port == 3) {
 8001fa4:	2803      	cmp	r0, #3
 8001fa6:	d102      	bne.n	8001fae <Write_GPIO+0x12>
        ODR = (volatile unsigned long *)((unsigned long)GPIO_C + offset);
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <Write_GPIO+0x38>)
 8001faa:	e000      	b.n	8001fae <Write_GPIO+0x12>
        ODR = (volatile unsigned long *)((unsigned long)GPIO_A + offset);
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <Write_GPIO+0x3c>)
    }

    if (state) {
 8001fae:	b142      	cbz	r2, 8001fc2 <Write_GPIO+0x26>
        *ODR |= (1 << pin);
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	fa00 f101 	lsl.w	r1, r0, r1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	4770      	bx	lr
        ODR = (volatile unsigned long *)((unsigned long)GPIO_B + offset);
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <Write_GPIO+0x40>)
 8001fc0:	e7f5      	b.n	8001fae <Write_GPIO+0x12>
    } else {
        *ODR &= ~(1 << pin);
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f101 	lsl.w	r1, r0, r1
 8001fca:	ea22 0201 	bic.w	r2, r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
    }
}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	4001100c 	.word	0x4001100c
 8001fd8:	4001080c 	.word	0x4001080c
 8001fdc:	40010c0c 	.word	0x40010c0c

08001fe0 <SPI_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"
#include "GAUL_Drivers/Low_Level_Drivers/SPI_driver.h"

#define TIMEOUT 1000  // Timeout value

void SPI_Init(SPI_TypeDef *SPIx) {
 8001fe0:	b508      	push	{r3, lr}
    if(SPIx == SPI1) {
 8001fe2:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <SPI_Init+0x98>)
 8001fe4:	4298      	cmp	r0, r3
 8001fe6:	d003      	beq.n	8001ff0 <SPI_Init+0x10>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1

        Write_GPIO(PA, 4, HIGH);

        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    } else if(SPIx == SPI2) {
 8001fe8:	4b24      	ldr	r3, [pc, #144]	@ (800207c <SPI_Init+0x9c>)
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d027      	beq.n	800203e <SPI_Init+0x5e>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}
 8001fee:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001ff0:	4a23      	ldr	r2, [pc, #140]	@ (8002080 <SPI_Init+0xa0>)
 8001ff2:	6993      	ldr	r3, [r2, #24]
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ff8:	6193      	str	r3, [r2, #24]
        Init_GPIO(PA, 4, OUT50, O_GP_PP); // CS
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	2104      	movs	r1, #4
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff ff87 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PA, 5, OUT50, O_AF_PP); // CLK
 8002006:	2302      	movs	r3, #2
 8002008:	2203      	movs	r2, #3
 800200a:	2105      	movs	r1, #5
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff ff81 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PA, 6, IN, I_PP);    // MISO SPI1
 8002012:	2302      	movs	r3, #2
 8002014:	2200      	movs	r2, #0
 8002016:	2106      	movs	r1, #6
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff ff7b 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1
 800201e:	2302      	movs	r3, #2
 8002020:	2203      	movs	r2, #3
 8002022:	2107      	movs	r1, #7
 8002024:	2001      	movs	r0, #1
 8002026:	f7ff ff75 	bl	8001f14 <Init_GPIO>
        Write_GPIO(PA, 4, HIGH);
 800202a:	2201      	movs	r2, #1
 800202c:	2104      	movs	r1, #4
 800202e:	4610      	mov	r0, r2
 8002030:	f7ff ffb4 	bl	8001f9c <Write_GPIO>
        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 8002034:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <SPI_Init+0x98>)
 8002036:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e7d7      	b.n	8001fee <SPI_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800203e:	4a10      	ldr	r2, [pc, #64]	@ (8002080 <SPI_Init+0xa0>)
 8002040:	69d3      	ldr	r3, [r2, #28]
 8002042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002046:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 13, OUT50, O_AF_PP); // CLK
 8002048:	2302      	movs	r3, #2
 800204a:	2203      	movs	r2, #3
 800204c:	210d      	movs	r1, #13
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff60 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
 8002054:	2302      	movs	r3, #2
 8002056:	2200      	movs	r2, #0
 8002058:	210e      	movs	r1, #14
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff5a 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2
 8002060:	2302      	movs	r3, #2
 8002062:	2203      	movs	r2, #3
 8002064:	210f      	movs	r1, #15
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff54 	bl	8001f14 <Init_GPIO>
        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <SPI_Init+0x9c>)
 800206e:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8002072:	601a      	str	r2, [r3, #0]
}
 8002074:	e7bb      	b.n	8001fee <SPI_Init+0xe>
 8002076:	bf00      	nop
 8002078:	40013000 	.word	0x40013000
 800207c:	40003800 	.word	0x40003800
 8002080:	40021000 	.word	0x40021000

08002084 <SPI_TX>:

int SPI_TX(SPI_TypeDef *SPIx, uint8_t *data, int size) {
    uint32_t timeout = TIMEOUT;
 8002084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
    while (size--) {
 8002088:	f102 3cff 	add.w	ip, r2, #4294967295
 800208c:	b16a      	cbz	r2, 80020aa <SPI_TX+0x26>
        // Attendre que le buffer TX soit vide
        while (!(SPIx->SR & SPI_SR_TXE)) {
 800208e:	6882      	ldr	r2, [r0, #8]
 8002090:	f012 0f02 	tst.w	r2, #2
 8002094:	d104      	bne.n	80020a0 <SPI_TX+0x1c>
            if (--timeout == 0) {
 8002096:	3b01      	subs	r3, #1
 8002098:	d1f9      	bne.n	800208e <SPI_TX+0xa>
                return -1; // Timeout
 800209a:	f04f 30ff 	mov.w	r0, #4294967295
 800209e:	4770      	bx	lr
            }
        }
        SPIx->DR = *data++; // Envoyer les données
 80020a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020a4:	60c2      	str	r2, [r0, #12]
    while (size--) {
 80020a6:	4662      	mov	r2, ip
 80020a8:	e7ee      	b.n	8002088 <SPI_TX+0x4>
    }

    // Attendre que la transmission soit terminée
    timeout = TIMEOUT;
 80020aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
    while (SPIx->SR & SPI_SR_BSY) {
 80020ae:	6881      	ldr	r1, [r0, #8]
 80020b0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80020b4:	d004      	beq.n	80020c0 <SPI_TX+0x3c>
        if (--timeout == 0) {
 80020b6:	3b01      	subs	r3, #1
 80020b8:	d1f9      	bne.n	80020ae <SPI_TX+0x2a>
            return -1; // Timeout
 80020ba:	f04f 30ff 	mov.w	r0, #4294967295
    }

    // Lire le registre pour vider le buffer RX
    (void)SPIx->DR;
    return 0; // Succès
}
 80020be:	4770      	bx	lr
    (void)SPIx->DR;
 80020c0:	68c3      	ldr	r3, [r0, #12]
    return 0; // Succès
 80020c2:	4610      	mov	r0, r2
 80020c4:	4770      	bx	lr

080020c6 <SPI_RX>:

int SPI_RX(SPI_TypeDef *SPIx, uint8_t *data, int size) {
    uint32_t timeout = TIMEOUT;
 80020c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
    while (size--) {
 80020ca:	f102 3cff 	add.w	ip, r2, #4294967295
 80020ce:	b1d2      	cbz	r2, 8002106 <SPI_RX+0x40>
        // Envoyer un dummy byte pour générer un clock et recevoir des données
        while (!(SPIx->SR & SPI_SR_TXE)) {
 80020d0:	6882      	ldr	r2, [r0, #8]
 80020d2:	f012 0f02 	tst.w	r2, #2
 80020d6:	d104      	bne.n	80020e2 <SPI_RX+0x1c>
            if (--timeout == 0) {
 80020d8:	3b01      	subs	r3, #1
 80020da:	d1f9      	bne.n	80020d0 <SPI_RX+0xa>
                return -1; // Timeout
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	4770      	bx	lr
            }
        }
        SPIx->DR = 0xFF; // Dummy byte
 80020e2:	23ff      	movs	r3, #255	@ 0xff
 80020e4:	60c3      	str	r3, [r0, #12]

        // Attendre que le buffer RX contienne des données
        timeout = TIMEOUT;
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        while (!(SPIx->SR & SPI_SR_RXNE)) {
 80020ea:	6882      	ldr	r2, [r0, #8]
 80020ec:	f012 0f01 	tst.w	r2, #1
 80020f0:	d104      	bne.n	80020fc <SPI_RX+0x36>
            if (--timeout == 0) {
 80020f2:	3b01      	subs	r3, #1
 80020f4:	d1f9      	bne.n	80020ea <SPI_RX+0x24>
                return -1; // Timeout
 80020f6:	f04f 30ff 	mov.w	r0, #4294967295
            }
        }
        *data++ = SPIx->DR; // Lire les données
    }
    return 0; // Succès
}
 80020fa:	4770      	bx	lr
        *data++ = SPIx->DR; // Lire les données
 80020fc:	68c2      	ldr	r2, [r0, #12]
 80020fe:	f801 2b01 	strb.w	r2, [r1], #1
    while (size--) {
 8002102:	4662      	mov	r2, ip
 8002104:	e7e1      	b.n	80020ca <SPI_RX+0x4>
    return 0; // Succès
 8002106:	4610      	mov	r0, r2
 8002108:	4770      	bx	lr
	...

0800210c <USART_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

#define TIMEOUT 1000  // Timeout value


void USART_Init(USART_TypeDef *USARTx) {
 800210c:	b508      	push	{r3, lr}

    if(USARTx == USART1) {
 800210e:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <USART_Init+0xd0>)
 8002110:	4298      	cmp	r0, r3
 8002112:	d006      	beq.n	8002122 <USART_Init+0x16>
        Init_GPIO(PB, 7, IN, I_PP); // RX

        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
    } else if(USARTx == USART2) {
 8002114:	4b32      	ldr	r3, [pc, #200]	@ (80021e0 <USART_Init+0xd4>)
 8002116:	4298      	cmp	r0, r3
 8002118:	d022      	beq.n	8002160 <USART_Init+0x54>
        Init_GPIO(PA, 3, IN, I_PP); // RX

        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
    } else if(USARTx == USART3) {
 800211a:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <USART_Init+0xd8>)
 800211c:	4298      	cmp	r0, r3
 800211e:	d03e      	beq.n	800219e <USART_Init+0x92>

        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
    }
}
 8002120:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002122:	4a31      	ldr	r2, [pc, #196]	@ (80021e8 <USART_Init+0xdc>)
 8002124:	6993      	ldr	r3, [r2, #24]
 8002126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212a:	6193      	str	r3, [r2, #24]
        Init_GPIO(PB, 6, OUT50, O_AF_PP); // TX
 800212c:	2302      	movs	r3, #2
 800212e:	2203      	movs	r2, #3
 8002130:	2106      	movs	r1, #6
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff feee 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PB, 7, IN, I_PP); // RX
 8002138:	2302      	movs	r3, #2
 800213a:	2200      	movs	r2, #0
 800213c:	2107      	movs	r1, #7
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fee8 	bl	8001f14 <Init_GPIO>
        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
 8002144:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <USART_Init+0xd0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800214c:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	f042 0208 	orr.w	r2, r2, #8
 8002154:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	f042 0204 	orr.w	r2, r2, #4
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	e7df      	b.n	8002120 <USART_Init+0x14>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002160:	4a21      	ldr	r2, [pc, #132]	@ (80021e8 <USART_Init+0xdc>)
 8002162:	69d3      	ldr	r3, [r2, #28]
 8002164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002168:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 2, OUT50, O_AF_PP); // TX
 800216a:	2302      	movs	r3, #2
 800216c:	2203      	movs	r2, #3
 800216e:	4619      	mov	r1, r3
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff fecf 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PA, 3, IN, I_PP); // RX
 8002176:	2302      	movs	r3, #2
 8002178:	2200      	movs	r2, #0
 800217a:	2103      	movs	r1, #3
 800217c:	2001      	movs	r0, #1
 800217e:	f7ff fec9 	bl	8001f14 <Init_GPIO>
        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <USART_Init+0xd4>)
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800218a:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	f042 0208 	orr.w	r2, r2, #8
 8002192:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	f042 0204 	orr.w	r2, r2, #4
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	e7c0      	b.n	8002120 <USART_Init+0x14>
        RCC->APB1ENR |= RCC_APB1ENR_USART3EN ;
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <USART_Init+0xdc>)
 80021a0:	69d3      	ldr	r3, [r2, #28]
 80021a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a6:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 10, OUT50, O_AF_PP); // TX
 80021a8:	2302      	movs	r3, #2
 80021aa:	2203      	movs	r2, #3
 80021ac:	210a      	movs	r1, #10
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff feb0 	bl	8001f14 <Init_GPIO>
        Init_GPIO(PB, 11, IN, I_PP); // RX
 80021b4:	2302      	movs	r3, #2
 80021b6:	2200      	movs	r2, #0
 80021b8:	210b      	movs	r1, #11
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff feaa 	bl	8001f14 <Init_GPIO>
        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <USART_Init+0xd8>)
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021c8:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	f042 0208 	orr.w	r2, r2, #8
 80021d0:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	f042 0204 	orr.w	r2, r2, #4
 80021d8:	60da      	str	r2, [r3, #12]
}
 80021da:	e7a1      	b.n	8002120 <USART_Init+0x14>
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40004400 	.word	0x40004400
 80021e4:	40004800 	.word	0x40004800
 80021e8:	40021000 	.word	0x40021000

080021ec <USART_TX>:

int USART_TX(USART_TypeDef *USARTx, uint8_t *data, int size) {

	uint32_t timeout = TIMEOUT;
 80021ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	while(size--) {
 80021f0:	f102 3cff 	add.w	ip, r2, #4294967295
 80021f4:	b16a      	cbz	r2, 8002212 <USART_TX+0x26>
		while(!(USARTx->SR & USART_SR_TXE)) {
 80021f6:	6802      	ldr	r2, [r0, #0]
 80021f8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80021fc:	d104      	bne.n	8002208 <USART_TX+0x1c>
			if(--timeout == 0) {
 80021fe:	3b01      	subs	r3, #1
 8002200:	d1f9      	bne.n	80021f6 <USART_TX+0xa>
				return -1;
 8002202:	f04f 30ff 	mov.w	r0, #4294967295
 8002206:	4770      	bx	lr
			}
		}
		USARTx->DR = *data++;
 8002208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800220c:	6042      	str	r2, [r0, #4]
	while(size--) {
 800220e:	4662      	mov	r2, ip
 8002210:	e7ee      	b.n	80021f0 <USART_TX+0x4>
	}

	timeout = TIMEOUT;
 8002212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	while(!(USARTx->SR & USART_SR_TC)) {
 8002216:	6801      	ldr	r1, [r0, #0]
 8002218:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800221c:	d104      	bne.n	8002228 <USART_TX+0x3c>
		if(--timeout == 0) {
 800221e:	3b01      	subs	r3, #1
 8002220:	d1f9      	bne.n	8002216 <USART_TX+0x2a>
			return -1;
 8002222:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}
	(void)USARTx->DR;
	return 0;
}
 8002226:	4770      	bx	lr
	(void)USARTx->DR;
 8002228:	6843      	ldr	r3, [r0, #4]
	return 0;
 800222a:	4610      	mov	r0, r2
 800222c:	4770      	bx	lr
	...

08002230 <SD_PowerOff>:
}

/* 전원 끄기 */
static void SD_PowerOff(void)
{
  PowerFlag = 0;
 8002230:	4b01      	ldr	r3, [pc, #4]	@ (8002238 <SD_PowerOff+0x8>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
}
 8002236:	4770      	bx	lr
 8002238:	200022d4 	.word	0x200022d4

0800223c <SD_CheckPower>:
/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
  /*  0=off, 1=on */
  return PowerFlag;
}
 800223c:	4b01      	ldr	r3, [pc, #4]	@ (8002244 <SD_CheckPower+0x8>)
 800223e:	7818      	ldrb	r0, [r3, #0]
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	200022d4 	.word	0x200022d4

08002248 <SPI_TxByte>:
{
 8002248:	b500      	push	{lr}
 800224a:	b083      	sub	sp, #12
 800224c:	f88d 0007 	strb.w	r0, [sp, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002250:	4807      	ldr	r0, [pc, #28]	@ (8002270 <SPI_TxByte+0x28>)
 8002252:	f002 fc7e 	bl	8004b52 <HAL_SPI_GetState>
 8002256:	2801      	cmp	r0, #1
 8002258:	d1fa      	bne.n	8002250 <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800225a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225e:	2201      	movs	r2, #1
 8002260:	f10d 0107 	add.w	r1, sp, #7
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <SPI_TxByte+0x28>)
 8002266:	f002 f981 	bl	800456c <HAL_SPI_Transmit>
}
 800226a:	b003      	add	sp, #12
 800226c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002270:	20002430 	.word	0x20002430

08002274 <SELECT>:
{
 8002274:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2110      	movs	r1, #16
 800227a:	4802      	ldr	r0, [pc, #8]	@ (8002284 <SELECT+0x10>)
 800227c:	f001 fc44 	bl	8003b08 <HAL_GPIO_WritePin>
}
 8002280:	bd08      	pop	{r3, pc}
 8002282:	bf00      	nop
 8002284:	40010800 	.word	0x40010800

08002288 <DESELECT>:
{
 8002288:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	2110      	movs	r1, #16
 800228e:	4802      	ldr	r0, [pc, #8]	@ (8002298 <DESELECT+0x10>)
 8002290:	f001 fc3a 	bl	8003b08 <HAL_GPIO_WritePin>
}
 8002294:	bd08      	pop	{r3, pc}
 8002296:	bf00      	nop
 8002298:	40010800 	.word	0x40010800

0800229c <SPI_RxByte>:
{
 800229c:	b500      	push	{lr}
 800229e:	b085      	sub	sp, #20
  dummy = 0xFF;
 80022a0:	23ff      	movs	r3, #255	@ 0xff
 80022a2:	f88d 300f 	strb.w	r3, [sp, #15]
  data = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f88d 300e 	strb.w	r3, [sp, #14]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80022ac:	480a      	ldr	r0, [pc, #40]	@ (80022d8 <SPI_RxByte+0x3c>)
 80022ae:	f002 fc50 	bl	8004b52 <HAL_SPI_GetState>
 80022b2:	2801      	cmp	r0, #1
 80022b4:	d1fa      	bne.n	80022ac <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80022b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	f10d 020e 	add.w	r2, sp, #14
 80022c2:	f10d 010f 	add.w	r1, sp, #15
 80022c6:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <SPI_RxByte+0x3c>)
 80022c8:	f002 fa93 	bl	80047f2 <HAL_SPI_TransmitReceive>
}
 80022cc:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80022d0:	b005      	add	sp, #20
 80022d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022d6:	bf00      	nop
 80022d8:	20002430 	.word	0x20002430

080022dc <SD_PowerOn>:
{
 80022dc:	b510      	push	{r4, lr}
 80022de:	b082      	sub	sp, #8
  DESELECT();
 80022e0:	f7ff ffd2 	bl	8002288 <DESELECT>
  for(int i = 0; i < 10; i++)
 80022e4:	2400      	movs	r4, #0
 80022e6:	e003      	b.n	80022f0 <SD_PowerOn+0x14>
    SPI_TxByte(0xFF);
 80022e8:	20ff      	movs	r0, #255	@ 0xff
 80022ea:	f7ff ffad 	bl	8002248 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80022ee:	3401      	adds	r4, #1
 80022f0:	2c09      	cmp	r4, #9
 80022f2:	ddf9      	ble.n	80022e8 <SD_PowerOn+0xc>
  SELECT();
 80022f4:	f7ff ffbe 	bl	8002274 <SELECT>
  cmd_arg[0] = (CMD0 | 0x40);
 80022f8:	2340      	movs	r3, #64	@ 0x40
 80022fa:	f88d 3000 	strb.w	r3, [sp]
  cmd_arg[1] = 0;
 80022fe:	2400      	movs	r4, #0
 8002300:	f88d 4001 	strb.w	r4, [sp, #1]
  cmd_arg[2] = 0;
 8002304:	f88d 4002 	strb.w	r4, [sp, #2]
  cmd_arg[3] = 0;
 8002308:	f88d 4003 	strb.w	r4, [sp, #3]
  cmd_arg[4] = 0;
 800230c:	f88d 4004 	strb.w	r4, [sp, #4]
  cmd_arg[5] = 0x95;
 8002310:	2395      	movs	r3, #149	@ 0x95
 8002312:	f88d 3005 	strb.w	r3, [sp, #5]
  for (int i = 0; i < 6; i++)
 8002316:	e007      	b.n	8002328 <SD_PowerOn+0x4c>
    SPI_TxByte(cmd_arg[i]);
 8002318:	f104 0308 	add.w	r3, r4, #8
 800231c:	446b      	add	r3, sp
 800231e:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8002322:	f7ff ff91 	bl	8002248 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002326:	3401      	adds	r4, #1
 8002328:	2c05      	cmp	r4, #5
 800232a:	ddf5      	ble.n	8002318 <SD_PowerOn+0x3c>
  uint32_t Count = 0x1FFF;
 800232c:	f641 74ff 	movw	r4, #8191	@ 0x1fff
  while ((SPI_RxByte() != 0x01) && Count)
 8002330:	f7ff ffb4 	bl	800229c <SPI_RxByte>
 8002334:	2801      	cmp	r0, #1
 8002336:	d002      	beq.n	800233e <SD_PowerOn+0x62>
 8002338:	b10c      	cbz	r4, 800233e <SD_PowerOn+0x62>
    Count--;
 800233a:	3c01      	subs	r4, #1
 800233c:	e7f8      	b.n	8002330 <SD_PowerOn+0x54>
  DESELECT();
 800233e:	f7ff ffa3 	bl	8002288 <DESELECT>
  SPI_TxByte(0XFF);
 8002342:	20ff      	movs	r0, #255	@ 0xff
 8002344:	f7ff ff80 	bl	8002248 <SPI_TxByte>
  PowerFlag = 1;
 8002348:	4b02      	ldr	r3, [pc, #8]	@ (8002354 <SD_PowerOn+0x78>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
}
 800234e:	b002      	add	sp, #8
 8002350:	bd10      	pop	{r4, pc}
 8002352:	bf00      	nop
 8002354:	200022d4 	.word	0x200022d4

08002358 <SD_ReadyWait>:
{
 8002358:	b508      	push	{r3, lr}
  Timer2 = 50;
 800235a:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <SD_ReadyWait+0x20>)
 800235c:	2232      	movs	r2, #50	@ 0x32
 800235e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8002360:	f7ff ff9c 	bl	800229c <SPI_RxByte>
    res = SPI_RxByte();
 8002364:	f7ff ff9a 	bl	800229c <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 8002368:	28ff      	cmp	r0, #255	@ 0xff
 800236a:	d003      	beq.n	8002374 <SD_ReadyWait+0x1c>
 800236c:	4b02      	ldr	r3, [pc, #8]	@ (8002378 <SD_ReadyWait+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f7      	bne.n	8002364 <SD_ReadyWait+0xc>
}
 8002374:	bd08      	pop	{r3, pc}
 8002376:	bf00      	nop
 8002378:	200024c0 	.word	0x200024c0

0800237c <SD_SendCmd>:
}
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4605      	mov	r5, r0
 8002380:	460c      	mov	r4, r1
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002382:	f7ff ffe9 	bl	8002358 <SD_ReadyWait>
 8002386:	28ff      	cmp	r0, #255	@ 0xff
 8002388:	d001      	beq.n	800238e <SD_SendCmd+0x12>
    return 0xFF;
 800238a:	20ff      	movs	r0, #255	@ 0xff
  {
    res = SPI_RxByte();
  } while ((res & 0x80) && --n);

  return res;
}
 800238c:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(cmd); 			/* Command */
 800238e:	4628      	mov	r0, r5
 8002390:	f7ff ff5a 	bl	8002248 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002394:	0e20      	lsrs	r0, r4, #24
 8002396:	f7ff ff57 	bl	8002248 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800239a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800239e:	f7ff ff53 	bl	8002248 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80023a2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80023a6:	f7ff ff4f 	bl	8002248 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80023aa:	b2e0      	uxtb	r0, r4
 80023ac:	f7ff ff4c 	bl	8002248 <SPI_TxByte>
  if (cmd == CMD0)
 80023b0:	2d40      	cmp	r5, #64	@ 0x40
 80023b2:	d011      	beq.n	80023d8 <SD_SendCmd+0x5c>
  if (cmd == CMD8)
 80023b4:	2d48      	cmp	r5, #72	@ 0x48
 80023b6:	d011      	beq.n	80023dc <SD_SendCmd+0x60>
  crc = 0;
 80023b8:	2000      	movs	r0, #0
  SPI_TxByte(crc);
 80023ba:	f7ff ff45 	bl	8002248 <SPI_TxByte>
  if (cmd == CMD12)
 80023be:	2d4c      	cmp	r5, #76	@ 0x4c
 80023c0:	d00e      	beq.n	80023e0 <SD_SendCmd+0x64>
    crc = 0x95; /* CRC for CMD0(0) */
 80023c2:	240a      	movs	r4, #10
    res = SPI_RxByte();
 80023c4:	f7ff ff6a 	bl	800229c <SPI_RxByte>
  } while ((res & 0x80) && --n);
 80023c8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80023cc:	d0de      	beq.n	800238c <SD_SendCmd+0x10>
 80023ce:	1e63      	subs	r3, r4, #1
 80023d0:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 80023d4:	d1f6      	bne.n	80023c4 <SD_SendCmd+0x48>
 80023d6:	e7d9      	b.n	800238c <SD_SendCmd+0x10>
    crc = 0x95; /* CRC for CMD0(0) */
 80023d8:	2095      	movs	r0, #149	@ 0x95
 80023da:	e7ee      	b.n	80023ba <SD_SendCmd+0x3e>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80023dc:	2087      	movs	r0, #135	@ 0x87
 80023de:	e7ec      	b.n	80023ba <SD_SendCmd+0x3e>
    SPI_RxByte();
 80023e0:	f7ff ff5c 	bl	800229c <SPI_RxByte>
 80023e4:	e7ed      	b.n	80023c2 <SD_SendCmd+0x46>

080023e6 <SPI_RxBytePtr>:
{
 80023e6:	b510      	push	{r4, lr}
 80023e8:	4604      	mov	r4, r0
  *buff = SPI_RxByte();
 80023ea:	f7ff ff57 	bl	800229c <SPI_RxByte>
 80023ee:	7020      	strb	r0, [r4, #0]
}
 80023f0:	bd10      	pop	{r4, pc}
	...

080023f4 <SD_RxDataBlock>:
{
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	4604      	mov	r4, r0
 80023f8:	460e      	mov	r6, r1
  Timer1 = 10;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <SD_RxDataBlock+0x44>)
 80023fc:	220a      	movs	r2, #10
 80023fe:	701a      	strb	r2, [r3, #0]
    token = SPI_RxByte();
 8002400:	f7ff ff4c 	bl	800229c <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 8002404:	28ff      	cmp	r0, #255	@ 0xff
 8002406:	d103      	bne.n	8002410 <SD_RxDataBlock+0x1c>
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <SD_RxDataBlock+0x44>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f7      	bne.n	8002400 <SD_RxDataBlock+0xc>
  if(token != 0xFE)
 8002410:	28fe      	cmp	r0, #254	@ 0xfe
 8002412:	d10f      	bne.n	8002434 <SD_RxDataBlock+0x40>
    SPI_RxBytePtr(buff++);
 8002414:	1c65      	adds	r5, r4, #1
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff ffe5 	bl	80023e6 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800241c:	4628      	mov	r0, r5
 800241e:	3402      	adds	r4, #2
 8002420:	f7ff ffe1 	bl	80023e6 <SPI_RxBytePtr>
  } while(btr -= 2);
 8002424:	3e02      	subs	r6, #2
 8002426:	d1f5      	bne.n	8002414 <SD_RxDataBlock+0x20>
  SPI_RxByte(); /* CRC 무시 */
 8002428:	f7ff ff38 	bl	800229c <SPI_RxByte>
  SPI_RxByte();
 800242c:	f7ff ff36 	bl	800229c <SPI_RxByte>
  return TRUE;
 8002430:	2001      	movs	r0, #1
}
 8002432:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 8002434:	2000      	movs	r0, #0
 8002436:	e7fc      	b.n	8002432 <SD_RxDataBlock+0x3e>
 8002438:	200024c1 	.word	0x200024c1

0800243c <SD_TxDataBlock>:
{
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4605      	mov	r5, r0
 8002440:	460c      	mov	r4, r1
  if (SD_ReadyWait() != 0xFF)
 8002442:	f7ff ff89 	bl	8002358 <SD_ReadyWait>
 8002446:	28ff      	cmp	r0, #255	@ 0xff
 8002448:	d001      	beq.n	800244e <SD_TxDataBlock+0x12>
    return FALSE;
 800244a:	2000      	movs	r0, #0
}
 800244c:	bd70      	pop	{r4, r5, r6, pc}
 800244e:	2600      	movs	r6, #0
  SPI_TxByte(token);
 8002450:	4620      	mov	r0, r4
 8002452:	f7ff fef9 	bl	8002248 <SPI_TxByte>
  if (token != 0xFD)
 8002456:	2cfd      	cmp	r4, #253	@ 0xfd
 8002458:	d01f      	beq.n	800249a <SD_TxDataBlock+0x5e>
    wc = 0;
 800245a:	4634      	mov	r4, r6
      SPI_TxByte(*buff++);
 800245c:	7828      	ldrb	r0, [r5, #0]
 800245e:	f7ff fef3 	bl	8002248 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002462:	7868      	ldrb	r0, [r5, #1]
 8002464:	3502      	adds	r5, #2
 8002466:	f7ff feef 	bl	8002248 <SPI_TxByte>
    } while (--wc);
 800246a:	1e63      	subs	r3, r4, #1
 800246c:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8002470:	d1f4      	bne.n	800245c <SD_TxDataBlock+0x20>
    SPI_RxByte();       /* CRC 무시 */
 8002472:	f7ff ff13 	bl	800229c <SPI_RxByte>
    SPI_RxByte();
 8002476:	f7ff ff11 	bl	800229c <SPI_RxByte>
    while (i <= 64)
 800247a:	2c40      	cmp	r4, #64	@ 0x40
 800247c:	d809      	bhi.n	8002492 <SD_TxDataBlock+0x56>
      resp = SPI_RxByte();
 800247e:	f7ff ff0d 	bl	800229c <SPI_RxByte>
 8002482:	4606      	mov	r6, r0
      if ((resp & 0x1F) == 0x05)
 8002484:	f000 031f 	and.w	r3, r0, #31
 8002488:	2b05      	cmp	r3, #5
 800248a:	d002      	beq.n	8002492 <SD_TxDataBlock+0x56>
      i++;
 800248c:	1c63      	adds	r3, r4, #1
 800248e:	b2dc      	uxtb	r4, r3
 8002490:	e7f3      	b.n	800247a <SD_TxDataBlock+0x3e>
    while (SPI_RxByte() == 0);
 8002492:	f7ff ff03 	bl	800229c <SPI_RxByte>
 8002496:	2800      	cmp	r0, #0
 8002498:	d0fb      	beq.n	8002492 <SD_TxDataBlock+0x56>
  if ((resp & 0x1F) == 0x05)
 800249a:	f006 061f 	and.w	r6, r6, #31
 800249e:	2e05      	cmp	r6, #5
 80024a0:	d001      	beq.n	80024a6 <SD_TxDataBlock+0x6a>
    return FALSE;
 80024a2:	2000      	movs	r0, #0
 80024a4:	e7d2      	b.n	800244c <SD_TxDataBlock+0x10>
    return TRUE;
 80024a6:	2001      	movs	r0, #1
 80024a8:	e7d0      	b.n	800244c <SD_TxDataBlock+0x10>
	...

080024ac <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80024ac:	2800      	cmp	r0, #0
 80024ae:	f040 80b6 	bne.w	800261e <SD_disk_initialize+0x172>
{
 80024b2:	b530      	push	{r4, r5, lr}
 80024b4:	b083      	sub	sp, #12
    return STA_NOINIT;

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80024b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002624 <SD_disk_initialize+0x178>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f013 0402 	ands.w	r4, r3, #2
 80024be:	d004      	beq.n	80024ca <SD_disk_initialize+0x1e>
    return Stat;
 80024c0:	4b58      	ldr	r3, [pc, #352]	@ (8002624 <SD_disk_initialize+0x178>)
 80024c2:	7818      	ldrb	r0, [r3, #0]
 80024c4:	b2c0      	uxtb	r0, r0
    /* Initialization failed */
    SD_PowerOff();
  }

  return Stat;
}
 80024c6:	b003      	add	sp, #12
 80024c8:	bd30      	pop	{r4, r5, pc}
  SD_PowerOn();
 80024ca:	f7ff ff07 	bl	80022dc <SD_PowerOn>
  SELECT();
 80024ce:	f7ff fed1 	bl	8002274 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1)
 80024d2:	2100      	movs	r1, #0
 80024d4:	2040      	movs	r0, #64	@ 0x40
 80024d6:	f7ff ff51 	bl	800237c <SD_SendCmd>
 80024da:	4605      	mov	r5, r0
 80024dc:	2801      	cmp	r0, #1
 80024de:	d011      	beq.n	8002504 <SD_disk_initialize+0x58>
  CardType = type;
 80024e0:	4b51      	ldr	r3, [pc, #324]	@ (8002628 <SD_disk_initialize+0x17c>)
 80024e2:	701c      	strb	r4, [r3, #0]
  DESELECT();
 80024e4:	f7ff fed0 	bl	8002288 <DESELECT>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80024e8:	f7ff fed8 	bl	800229c <SPI_RxByte>
  if (type)
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	f000 8093 	beq.w	8002618 <SD_disk_initialize+0x16c>
    Stat &= ~STA_NOINIT;
 80024f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002624 <SD_disk_initialize+0x178>)
 80024f4:	7813      	ldrb	r3, [r2, #0]
 80024f6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80024fa:	7013      	strb	r3, [r2, #0]
  return Stat;
 80024fc:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <SD_disk_initialize+0x178>)
 80024fe:	7818      	ldrb	r0, [r3, #0]
 8002500:	b2c0      	uxtb	r0, r0
 8002502:	e7e0      	b.n	80024c6 <SD_disk_initialize+0x1a>
    Timer1 = 100;
 8002504:	4b49      	ldr	r3, [pc, #292]	@ (800262c <SD_disk_initialize+0x180>)
 8002506:	2264      	movs	r2, #100	@ 0x64
 8002508:	701a      	strb	r2, [r3, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800250a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800250e:	2048      	movs	r0, #72	@ 0x48
 8002510:	f7ff ff34 	bl	800237c <SD_SendCmd>
 8002514:	2801      	cmp	r0, #1
 8002516:	d146      	bne.n	80025a6 <SD_disk_initialize+0xfa>
      for (n = 0; n < 4; n++)
 8002518:	4625      	mov	r5, r4
 800251a:	e008      	b.n	800252e <SD_disk_initialize+0x82>
        ocr[n] = SPI_RxByte();
 800251c:	f7ff febe 	bl	800229c <SPI_RxByte>
 8002520:	f105 0308 	add.w	r3, r5, #8
 8002524:	446b      	add	r3, sp
 8002526:	f803 0c04 	strb.w	r0, [r3, #-4]
      for (n = 0; n < 4; n++)
 800252a:	3501      	adds	r5, #1
 800252c:	b2ed      	uxtb	r5, r5
 800252e:	2d03      	cmp	r5, #3
 8002530:	d9f4      	bls.n	800251c <SD_disk_initialize+0x70>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002532:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d1d2      	bne.n	80024e0 <SD_disk_initialize+0x34>
 800253a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800253e:	2baa      	cmp	r3, #170	@ 0xaa
 8002540:	d1ce      	bne.n	80024e0 <SD_disk_initialize+0x34>
 8002542:	e002      	b.n	800254a <SD_disk_initialize+0x9e>
        } while (Timer1);
 8002544:	4b39      	ldr	r3, [pc, #228]	@ (800262c <SD_disk_initialize+0x180>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b163      	cbz	r3, 8002564 <SD_disk_initialize+0xb8>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800254a:	2100      	movs	r1, #0
 800254c:	2077      	movs	r0, #119	@ 0x77
 800254e:	f7ff ff15 	bl	800237c <SD_SendCmd>
 8002552:	2801      	cmp	r0, #1
 8002554:	d8f6      	bhi.n	8002544 <SD_disk_initialize+0x98>
 8002556:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800255a:	2069      	movs	r0, #105	@ 0x69
 800255c:	f7ff ff0e 	bl	800237c <SD_SendCmd>
 8002560:	2800      	cmp	r0, #0
 8002562:	d1ef      	bne.n	8002544 <SD_disk_initialize+0x98>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002564:	4b31      	ldr	r3, [pc, #196]	@ (800262c <SD_disk_initialize+0x180>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800256c:	b90b      	cbnz	r3, 8002572 <SD_disk_initialize+0xc6>
  type = 0;
 800256e:	4614      	mov	r4, r2
 8002570:	e7b6      	b.n	80024e0 <SD_disk_initialize+0x34>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002572:	2100      	movs	r1, #0
 8002574:	207a      	movs	r0, #122	@ 0x7a
 8002576:	f7ff ff01 	bl	800237c <SD_SendCmd>
 800257a:	4605      	mov	r5, r0
 800257c:	2800      	cmp	r0, #0
 800257e:	d1af      	bne.n	80024e0 <SD_disk_initialize+0x34>
          for (n = 0; n < 4; n++)
 8002580:	2d03      	cmp	r5, #3
 8002582:	d809      	bhi.n	8002598 <SD_disk_initialize+0xec>
            ocr[n] = SPI_RxByte();
 8002584:	f7ff fe8a 	bl	800229c <SPI_RxByte>
 8002588:	f105 0308 	add.w	r3, r5, #8
 800258c:	446b      	add	r3, sp
 800258e:	f803 0c04 	strb.w	r0, [r3, #-4]
          for (n = 0; n < 4; n++)
 8002592:	3501      	adds	r5, #1
 8002594:	b2ed      	uxtb	r5, r5
 8002596:	e7f3      	b.n	8002580 <SD_disk_initialize+0xd4>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002598:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800259c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80025a0:	d038      	beq.n	8002614 <SD_disk_initialize+0x168>
 80025a2:	2406      	movs	r4, #6
 80025a4:	e79c      	b.n	80024e0 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80025a6:	2100      	movs	r1, #0
 80025a8:	2077      	movs	r0, #119	@ 0x77
 80025aa:	f7ff fee7 	bl	800237c <SD_SendCmd>
 80025ae:	2801      	cmp	r0, #1
 80025b0:	d810      	bhi.n	80025d4 <SD_disk_initialize+0x128>
 80025b2:	2100      	movs	r1, #0
 80025b4:	2069      	movs	r0, #105	@ 0x69
 80025b6:	f7ff fee1 	bl	800237c <SD_SendCmd>
 80025ba:	2801      	cmp	r0, #1
 80025bc:	d80a      	bhi.n	80025d4 <SD_disk_initialize+0x128>
 80025be:	2502      	movs	r5, #2
 80025c0:	e008      	b.n	80025d4 <SD_disk_initialize+0x128>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80025c2:	2100      	movs	r1, #0
 80025c4:	2077      	movs	r0, #119	@ 0x77
 80025c6:	f7ff fed9 	bl	800237c <SD_SendCmd>
 80025ca:	2801      	cmp	r0, #1
 80025cc:	d911      	bls.n	80025f2 <SD_disk_initialize+0x146>
      } while (Timer1);
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <SD_disk_initialize+0x180>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b13b      	cbz	r3, 80025e4 <SD_disk_initialize+0x138>
        if (type == 2)
 80025d4:	2d02      	cmp	r5, #2
 80025d6:	d0f4      	beq.n	80025c2 <SD_disk_initialize+0x116>
          if (SD_SendCmd(CMD1, 0) == 0)
 80025d8:	2100      	movs	r1, #0
 80025da:	2041      	movs	r0, #65	@ 0x41
 80025dc:	f7ff fece 	bl	800237c <SD_SendCmd>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d1f4      	bne.n	80025ce <SD_disk_initialize+0x122>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <SD_disk_initialize+0x180>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80025ec:	b943      	cbnz	r3, 8002600 <SD_disk_initialize+0x154>
        type = 0;
 80025ee:	4614      	mov	r4, r2
 80025f0:	e776      	b.n	80024e0 <SD_disk_initialize+0x34>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80025f2:	2100      	movs	r1, #0
 80025f4:	2069      	movs	r0, #105	@ 0x69
 80025f6:	f7ff fec1 	bl	800237c <SD_SendCmd>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d1e7      	bne.n	80025ce <SD_disk_initialize+0x122>
 80025fe:	e7f1      	b.n	80025e4 <SD_disk_initialize+0x138>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002604:	2050      	movs	r0, #80	@ 0x50
 8002606:	f7ff feb9 	bl	800237c <SD_SendCmd>
 800260a:	2800      	cmp	r0, #0
 800260c:	f47f af68 	bne.w	80024e0 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002610:	462c      	mov	r4, r5
 8002612:	e765      	b.n	80024e0 <SD_disk_initialize+0x34>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002614:	2402      	movs	r4, #2
 8002616:	e763      	b.n	80024e0 <SD_disk_initialize+0x34>
    SD_PowerOff();
 8002618:	f7ff fe0a 	bl	8002230 <SD_PowerOff>
 800261c:	e76e      	b.n	80024fc <SD_disk_initialize+0x50>
    return STA_NOINIT;
 800261e:	2001      	movs	r0, #1
}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000
 8002628:	200022d5 	.word	0x200022d5
 800262c:	200024c1 	.word	0x200024c1

08002630 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
  if (drv)
 8002630:	b918      	cbnz	r0, 800263a <SD_disk_status+0xa>
    return STA_NOINIT;

  return Stat;
 8002632:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <SD_disk_status+0x10>)
 8002634:	7818      	ldrb	r0, [r3, #0]
 8002636:	b2c0      	uxtb	r0, r0
 8002638:	4770      	bx	lr
    return STA_NOINIT;
 800263a:	2001      	movs	r0, #1
}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 8002644:	2800      	cmp	r0, #0
 8002646:	d13e      	bne.n	80026c6 <SD_disk_read+0x82>
{
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	460d      	mov	r5, r1
 800264c:	4616      	mov	r6, r2
 800264e:	461c      	mov	r4, r3
  if (pdrv || !count)
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03a      	beq.n	80026ca <SD_disk_read+0x86>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <SD_disk_read+0x90>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f013 0f01 	tst.w	r3, #1
 800265c:	d137      	bne.n	80026ce <SD_disk_read+0x8a>
    return RES_NOTRDY;

  if (!(CardType & 4))
 800265e:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <SD_disk_read+0x94>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	f013 0f04 	tst.w	r3, #4
 8002666:	d100      	bne.n	800266a <SD_disk_read+0x26>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002668:	0256      	lsls	r6, r2, #9

  SELECT();
 800266a:	f7ff fe03 	bl	8002274 <SELECT>

  if (count == 1)
 800266e:	2c01      	cmp	r4, #1
 8002670:	d01a      	beq.n	80026a8 <SD_disk_read+0x64>
      count = 0;
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002672:	4631      	mov	r1, r6
 8002674:	2052      	movs	r0, #82	@ 0x52
 8002676:	f7ff fe81 	bl	800237c <SD_SendCmd>
 800267a:	b968      	cbnz	r0, 8002698 <SD_disk_read+0x54>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800267c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002680:	4628      	mov	r0, r5
 8002682:	f7ff feb7 	bl	80023f4 <SD_RxDataBlock>
 8002686:	b118      	cbz	r0, 8002690 <SD_disk_read+0x4c>
          break;

        buff += 512;
 8002688:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      } while (--count);
 800268c:	3c01      	subs	r4, #1
 800268e:	d1f5      	bne.n	800267c <SD_disk_read+0x38>

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8002690:	2100      	movs	r1, #0
 8002692:	204c      	movs	r0, #76	@ 0x4c
 8002694:	f7ff fe72 	bl	800237c <SD_SendCmd>
    }
  }

  DESELECT();
 8002698:	f7ff fdf6 	bl	8002288 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800269c:	f7ff fdfe 	bl	800229c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80026a0:	1e20      	subs	r0, r4, #0
 80026a2:	bf18      	it	ne
 80026a4:	2001      	movne	r0, #1
}
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80026a8:	4631      	mov	r1, r6
 80026aa:	2051      	movs	r0, #81	@ 0x51
 80026ac:	f7ff fe66 	bl	800237c <SD_SendCmd>
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d1f1      	bne.n	8002698 <SD_disk_read+0x54>
 80026b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026b8:	4628      	mov	r0, r5
 80026ba:	f7ff fe9b 	bl	80023f4 <SD_RxDataBlock>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d0ea      	beq.n	8002698 <SD_disk_read+0x54>
      count = 0;
 80026c2:	2400      	movs	r4, #0
 80026c4:	e7e8      	b.n	8002698 <SD_disk_read+0x54>
    return RES_PARERR;
 80026c6:	2004      	movs	r0, #4
}
 80026c8:	4770      	bx	lr
    return RES_PARERR;
 80026ca:	2004      	movs	r0, #4
 80026cc:	e7eb      	b.n	80026a6 <SD_disk_read+0x62>
    return RES_NOTRDY;
 80026ce:	2003      	movs	r0, #3
 80026d0:	e7e9      	b.n	80026a6 <SD_disk_read+0x62>
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000
 80026d8:	200022d5 	.word	0x200022d5

080026dc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 80026dc:	2800      	cmp	r0, #0
 80026de:	d152      	bne.n	8002786 <SD_disk_write+0xaa>
{
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	460d      	mov	r5, r1
 80026e4:	4616      	mov	r6, r2
 80026e6:	461c      	mov	r4, r3
  if (pdrv || !count)
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d04e      	beq.n	800278a <SD_disk_write+0xae>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 80026ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002798 <SD_disk_write+0xbc>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f013 0f01 	tst.w	r3, #1
 80026f4:	d14b      	bne.n	800278e <SD_disk_write+0xb2>
    return RES_NOTRDY;

  if (Stat & STA_PROTECT)
 80026f6:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <SD_disk_write+0xbc>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f013 0f04 	tst.w	r3, #4
 80026fe:	d148      	bne.n	8002792 <SD_disk_write+0xb6>
    return RES_WRPRT;

  if (!(CardType & 4))
 8002700:	4b26      	ldr	r3, [pc, #152]	@ (800279c <SD_disk_write+0xc0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	f013 0f04 	tst.w	r3, #4
 8002708:	d100      	bne.n	800270c <SD_disk_write+0x30>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800270a:	0256      	lsls	r6, r2, #9

  SELECT();
 800270c:	f7ff fdb2 	bl	8002274 <SELECT>

  if (count == 1)
 8002710:	2c01      	cmp	r4, #1
 8002712:	d01f      	beq.n	8002754 <SD_disk_write+0x78>
      count = 0;
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <SD_disk_write+0xc0>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	f013 0f02 	tst.w	r3, #2
 800271c:	d128      	bne.n	8002770 <SD_disk_write+0x94>
    {
      SD_SendCmd(CMD55, 0);
      SD_SendCmd(CMD23, count); /* ACMD23 */
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800271e:	4631      	mov	r1, r6
 8002720:	2059      	movs	r0, #89	@ 0x59
 8002722:	f7ff fe2b 	bl	800237c <SD_SendCmd>
 8002726:	b968      	cbnz	r0, 8002744 <SD_disk_write+0x68>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002728:	21fc      	movs	r1, #252	@ 0xfc
 800272a:	4628      	mov	r0, r5
 800272c:	f7ff fe86 	bl	800243c <SD_TxDataBlock>
 8002730:	b118      	cbz	r0, 800273a <SD_disk_write+0x5e>
          break;

        buff += 512;
 8002732:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      } while (--count);
 8002736:	3c01      	subs	r4, #1
 8002738:	d1f6      	bne.n	8002728 <SD_disk_write+0x4c>

      if(!SD_TxDataBlock(0, 0xFD))
 800273a:	21fd      	movs	r1, #253	@ 0xfd
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fe7d 	bl	800243c <SD_TxDataBlock>
 8002742:	b1f0      	cbz	r0, 8002782 <SD_disk_write+0xa6>
        count = 1;
      }
    }
  }

  DESELECT();
 8002744:	f7ff fda0 	bl	8002288 <DESELECT>
  SPI_RxByte();
 8002748:	f7ff fda8 	bl	800229c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800274c:	1e20      	subs	r0, r4, #0
 800274e:	bf18      	it	ne
 8002750:	2001      	movne	r0, #1
}
 8002752:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002754:	4631      	mov	r1, r6
 8002756:	2058      	movs	r0, #88	@ 0x58
 8002758:	f7ff fe10 	bl	800237c <SD_SendCmd>
 800275c:	2800      	cmp	r0, #0
 800275e:	d1f1      	bne.n	8002744 <SD_disk_write+0x68>
 8002760:	21fe      	movs	r1, #254	@ 0xfe
 8002762:	4628      	mov	r0, r5
 8002764:	f7ff fe6a 	bl	800243c <SD_TxDataBlock>
 8002768:	2800      	cmp	r0, #0
 800276a:	d0eb      	beq.n	8002744 <SD_disk_write+0x68>
      count = 0;
 800276c:	2400      	movs	r4, #0
 800276e:	e7e9      	b.n	8002744 <SD_disk_write+0x68>
      SD_SendCmd(CMD55, 0);
 8002770:	2100      	movs	r1, #0
 8002772:	2077      	movs	r0, #119	@ 0x77
 8002774:	f7ff fe02 	bl	800237c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002778:	4621      	mov	r1, r4
 800277a:	2057      	movs	r0, #87	@ 0x57
 800277c:	f7ff fdfe 	bl	800237c <SD_SendCmd>
 8002780:	e7cd      	b.n	800271e <SD_disk_write+0x42>
        count = 1;
 8002782:	2401      	movs	r4, #1
 8002784:	e7de      	b.n	8002744 <SD_disk_write+0x68>
    return RES_PARERR;
 8002786:	2004      	movs	r0, #4
}
 8002788:	4770      	bx	lr
    return RES_PARERR;
 800278a:	2004      	movs	r0, #4
 800278c:	e7e1      	b.n	8002752 <SD_disk_write+0x76>
    return RES_NOTRDY;
 800278e:	2003      	movs	r0, #3
 8002790:	e7df      	b.n	8002752 <SD_disk_write+0x76>
    return RES_WRPRT;
 8002792:	2002      	movs	r0, #2
 8002794:	e7dd      	b.n	8002752 <SD_disk_write+0x76>
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000
 800279c:	200022d5 	.word	0x200022d5

080027a0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	b084      	sub	sp, #16
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;

  if (drv)
 80027a4:	2800      	cmp	r0, #0
 80027a6:	f040 80b7 	bne.w	8002918 <SD_disk_ioctl+0x178>
 80027aa:	460d      	mov	r5, r1
 80027ac:	4616      	mov	r6, r2
 80027ae:	4604      	mov	r4, r0
    return RES_PARERR;

  res = RES_ERROR;

  if (ctrl == CTRL_POWER)
 80027b0:	2905      	cmp	r1, #5
 80027b2:	d013      	beq.n	80027dc <SD_disk_ioctl+0x3c>
      res = RES_PARERR;
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80027b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002920 <SD_disk_ioctl+0x180>)
 80027b6:	781c      	ldrb	r4, [r3, #0]
 80027b8:	f014 0401 	ands.w	r4, r4, #1
 80027bc:	f040 80ae 	bne.w	800291c <SD_disk_ioctl+0x17c>
      return RES_NOTRDY;

    SELECT();
 80027c0:	f7ff fd58 	bl	8002274 <SELECT>

    switch (ctrl)
 80027c4:	2d0d      	cmp	r5, #13
 80027c6:	f200 809b 	bhi.w	8002900 <SD_disk_ioctl+0x160>
 80027ca:	e8df f005 	tbb	[pc, r5]
 80027ce:	2063      	.short	0x2063
 80027d0:	9999995f 	.word	0x9999995f
 80027d4:	99999999 	.word	0x99999999
 80027d8:	87786999 	.word	0x87786999
    switch (*ptr)
 80027dc:	7815      	ldrb	r5, [r2, #0]
 80027de:	2d01      	cmp	r5, #1
 80027e0:	d00e      	beq.n	8002800 <SD_disk_ioctl+0x60>
 80027e2:	2d02      	cmp	r5, #2
 80027e4:	d00f      	beq.n	8002806 <SD_disk_ioctl+0x66>
 80027e6:	b10d      	cbz	r5, 80027ec <SD_disk_ioctl+0x4c>
 80027e8:	2404      	movs	r4, #4
 80027ea:	e08e      	b.n	800290a <SD_disk_ioctl+0x16a>
      if (SD_CheckPower())
 80027ec:	f7ff fd26 	bl	800223c <SD_CheckPower>
 80027f0:	4604      	mov	r4, r0
 80027f2:	2800      	cmp	r0, #0
 80027f4:	f000 8089 	beq.w	800290a <SD_disk_ioctl+0x16a>
        SD_PowerOff();          /* Power Off */
 80027f8:	f7ff fd1a 	bl	8002230 <SD_PowerOff>
      res = RES_OK;
 80027fc:	462c      	mov	r4, r5
 80027fe:	e084      	b.n	800290a <SD_disk_ioctl+0x16a>
      SD_PowerOn();             /* Power On */
 8002800:	f7ff fd6c 	bl	80022dc <SD_PowerOn>
      break;
 8002804:	e081      	b.n	800290a <SD_disk_ioctl+0x16a>
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002806:	f7ff fd19 	bl	800223c <SD_CheckPower>
 800280a:	7070      	strb	r0, [r6, #1]
      break;
 800280c:	e07d      	b.n	800290a <SD_disk_ioctl+0x16a>
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800280e:	2100      	movs	r1, #0
 8002810:	2049      	movs	r0, #73	@ 0x49
 8002812:	f7ff fdb3 	bl	800237c <SD_SendCmd>
 8002816:	4604      	mov	r4, r0
 8002818:	b108      	cbz	r0, 800281e <SD_disk_ioctl+0x7e>
  res = RES_ERROR;
 800281a:	462c      	mov	r4, r5
 800281c:	e071      	b.n	8002902 <SD_disk_ioctl+0x162>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800281e:	2110      	movs	r1, #16
 8002820:	4668      	mov	r0, sp
 8002822:	f7ff fde7 	bl	80023f4 <SD_RxDataBlock>
 8002826:	2800      	cmp	r0, #0
 8002828:	d072      	beq.n	8002910 <SD_disk_ioctl+0x170>
      {
        if ((csd[0] >> 6) == 1)
 800282a:	f89d 3000 	ldrb.w	r3, [sp]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2b01      	cmp	r3, #1
 8002832:	d01f      	beq.n	8002874 <SD_disk_ioctl+0xd4>
          *(DWORD*) buff = (DWORD) csize << 10;
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002834:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002838:	f002 020f 	and.w	r2, r2, #15
 800283c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002840:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8002844:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	f003 0306 	and.w	r3, r3, #6
 800284e:	441a      	add	r2, r3
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002850:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002854:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800285e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8002862:	0289      	lsls	r1, r1, #10
 8002864:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8002868:	440b      	add	r3, r1
 800286a:	3301      	adds	r3, #1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800286c:	3a07      	subs	r2, #7
 800286e:	4093      	lsls	r3, r2
 8002870:	6033      	str	r3, [r6, #0]
 8002872:	e046      	b.n	8002902 <SD_disk_ioctl+0x162>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002874:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002878:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800287c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	3301      	adds	r3, #1
 8002884:	b29b      	uxth	r3, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	6033      	str	r3, [r6, #0]
 800288a:	e03a      	b.n	8002902 <SD_disk_ioctl+0x162>
      }
      break;

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800288c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002890:	8033      	strh	r3, [r6, #0]
      res = RES_OK;
      break;
 8002892:	e036      	b.n	8002902 <SD_disk_ioctl+0x162>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002894:	f7ff fd60 	bl	8002358 <SD_ReadyWait>
 8002898:	28ff      	cmp	r0, #255	@ 0xff
 800289a:	d03b      	beq.n	8002914 <SD_disk_ioctl+0x174>
  res = RES_ERROR;
 800289c:	2401      	movs	r4, #1
 800289e:	e030      	b.n	8002902 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80028a0:	2100      	movs	r1, #0
 80028a2:	2049      	movs	r0, #73	@ 0x49
 80028a4:	f7ff fd6a 	bl	800237c <SD_SendCmd>
 80028a8:	4604      	mov	r4, r0
 80028aa:	b108      	cbz	r0, 80028b0 <SD_disk_ioctl+0x110>
  res = RES_ERROR;
 80028ac:	2401      	movs	r4, #1
 80028ae:	e028      	b.n	8002902 <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80028b0:	2110      	movs	r1, #16
 80028b2:	4630      	mov	r0, r6
 80028b4:	f7ff fd9e 	bl	80023f4 <SD_RxDataBlock>
 80028b8:	bb18      	cbnz	r0, 8002902 <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 80028ba:	2401      	movs	r4, #1
 80028bc:	e021      	b.n	8002902 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80028be:	2100      	movs	r1, #0
 80028c0:	204a      	movs	r0, #74	@ 0x4a
 80028c2:	f7ff fd5b 	bl	800237c <SD_SendCmd>
 80028c6:	4604      	mov	r4, r0
 80028c8:	b108      	cbz	r0, 80028ce <SD_disk_ioctl+0x12e>
  res = RES_ERROR;
 80028ca:	2401      	movs	r4, #1
 80028cc:	e019      	b.n	8002902 <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80028ce:	2110      	movs	r1, #16
 80028d0:	4630      	mov	r0, r6
 80028d2:	f7ff fd8f 	bl	80023f4 <SD_RxDataBlock>
 80028d6:	b9a0      	cbnz	r0, 8002902 <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 80028d8:	2401      	movs	r4, #1
 80028da:	e012      	b.n	8002902 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80028dc:	2100      	movs	r1, #0
 80028de:	207a      	movs	r0, #122	@ 0x7a
 80028e0:	f7ff fd4c 	bl	800237c <SD_SendCmd>
 80028e4:	4604      	mov	r4, r0
 80028e6:	b138      	cbz	r0, 80028f8 <SD_disk_ioctl+0x158>

        res = RES_OK;
      }

    default:
      res = RES_PARERR;
 80028e8:	2404      	movs	r4, #4
 80028ea:	e00a      	b.n	8002902 <SD_disk_ioctl+0x162>
          *ptr++ = SPI_RxByte();
 80028ec:	f7ff fcd6 	bl	800229c <SPI_RxByte>
 80028f0:	f806 0b01 	strb.w	r0, [r6], #1
        for (n = 0; n < 4; n++)
 80028f4:	3401      	adds	r4, #1
 80028f6:	b2e4      	uxtb	r4, r4
 80028f8:	2c03      	cmp	r4, #3
 80028fa:	d9f7      	bls.n	80028ec <SD_disk_ioctl+0x14c>
      res = RES_PARERR;
 80028fc:	2404      	movs	r4, #4
 80028fe:	e000      	b.n	8002902 <SD_disk_ioctl+0x162>
    switch (ctrl)
 8002900:	2404      	movs	r4, #4
    }

    DESELECT();
 8002902:	f7ff fcc1 	bl	8002288 <DESELECT>
    SPI_RxByte();
 8002906:	f7ff fcc9 	bl	800229c <SPI_RxByte>
  }

  return res;
}
 800290a:	4620      	mov	r0, r4
 800290c:	b004      	add	sp, #16
 800290e:	bd70      	pop	{r4, r5, r6, pc}
  res = RES_ERROR;
 8002910:	462c      	mov	r4, r5
 8002912:	e7f6      	b.n	8002902 <SD_disk_ioctl+0x162>
        res = RES_OK;
 8002914:	462c      	mov	r4, r5
 8002916:	e7f4      	b.n	8002902 <SD_disk_ioctl+0x162>
    return RES_PARERR;
 8002918:	2404      	movs	r4, #4
 800291a:	e7f6      	b.n	800290a <SD_disk_ioctl+0x16a>
      return RES_NOTRDY;
 800291c:	2403      	movs	r4, #3
 800291e:	e7f4      	b.n	800290a <SD_disk_ioctl+0x16a>
 8002920:	20000000 	.word	0x20000000

08002924 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002924:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002928:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800292c:	f013 0f01 	tst.w	r3, #1
 8002930:	d011      	beq.n	8002956 <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002932:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002936:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800293a:	f013 0f01 	tst.w	r3, #1
 800293e:	d101      	bne.n	8002944 <ITM_SendChar+0x20>
 8002940:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002942:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002944:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f9      	beq.n	8002942 <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800294e:	b2c3      	uxtb	r3, r0
 8002950:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002954:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8002956:	4770      	bx	lr

08002958 <ROCKET_SetMode>:
    return isDescending;
}

uint8_t ROCKET_SetMode(uint8_t mode) {

	if(mode != MODE_PREFLIGHT && mode != MODE_INFLIGHT && mode != MODE_POSTFLIGHT) {
 8002958:	2802      	cmp	r0, #2
 800295a:	d803      	bhi.n	8002964 <ROCKET_SetMode+0xc>
		return 0;
	}
	rocket_data.header_states.mode = mode;
 800295c:	4b02      	ldr	r3, [pc, #8]	@ (8002968 <ROCKET_SetMode+0x10>)
 800295e:	7018      	strb	r0, [r3, #0]
	return 1; // OK
 8002960:	2001      	movs	r0, #1
 8002962:	4770      	bx	lr
		return 0;
 8002964:	2000      	movs	r0, #0
}
 8002966:	4770      	bx	lr
 8002968:	200022d8 	.word	0x200022d8

0800296c <ROCKET_InitRoutine>:
        */
        default: return "Unknown rocket behavior\r\n";
    }
}

void ROCKET_InitRoutine(void) {
 800296c:	b538      	push	{r3, r4, r5, lr}

	printf("|----------Starting----------|\r\n");
 800296e:	4849      	ldr	r0, [pc, #292]	@ (8002a94 <ROCKET_InitRoutine+0x128>)
 8002970:	f007 fd54 	bl	800a41c <puts>
	//Buzz(&htim3, TIM_CHANNEL_4, START);
	SPI_Init(SPI1);
 8002974:	4848      	ldr	r0, [pc, #288]	@ (8002a98 <ROCKET_InitRoutine+0x12c>)
 8002976:	f7ff fb33 	bl	8001fe0 <SPI_Init>
	printf("(+) SPI1 succeeded...\r\n");
 800297a:	4848      	ldr	r0, [pc, #288]	@ (8002a9c <ROCKET_InitRoutine+0x130>)
 800297c:	f007 fd4e 	bl	800a41c <puts>
	SPI_Init(SPI2);
 8002980:	4d47      	ldr	r5, [pc, #284]	@ (8002aa0 <ROCKET_InitRoutine+0x134>)
 8002982:	4628      	mov	r0, r5
 8002984:	f7ff fb2c 	bl	8001fe0 <SPI_Init>
	printf("(+) SPI2 succeeded...\r\n");
 8002988:	4846      	ldr	r0, [pc, #280]	@ (8002aa4 <ROCKET_InitRoutine+0x138>)
 800298a:	f007 fd47 	bl	800a41c <puts>
	USART_Init(USART1);
 800298e:	4846      	ldr	r0, [pc, #280]	@ (8002aa8 <ROCKET_InitRoutine+0x13c>)
 8002990:	f7ff fbbc 	bl	800210c <USART_Init>
	printf("(+) USART1 succeeded...\r\n");
 8002994:	4845      	ldr	r0, [pc, #276]	@ (8002aac <ROCKET_InitRoutine+0x140>)
 8002996:	f007 fd41 	bl	800a41c <puts>
	USART_Init(USART2);
 800299a:	4845      	ldr	r0, [pc, #276]	@ (8002ab0 <ROCKET_InitRoutine+0x144>)
 800299c:	f7ff fbb6 	bl	800210c <USART_Init>
	printf("(+) USART2 succeeded...\r\n");
 80029a0:	4844      	ldr	r0, [pc, #272]	@ (8002ab4 <ROCKET_InitRoutine+0x148>)
 80029a2:	f007 fd3b 	bl	800a41c <puts>
	USART_Init(USART3);
 80029a6:	4844      	ldr	r0, [pc, #272]	@ (8002ab8 <ROCKET_InitRoutine+0x14c>)
 80029a8:	f7ff fbb0 	bl	800210c <USART_Init>
	printf("(+) USART3 succeeded...\r\n");
 80029ac:	4843      	ldr	r0, [pc, #268]	@ (8002abc <ROCKET_InitRoutine+0x150>)
 80029ae:	f007 fd35 	bl	800a41c <puts>

	printf("|----------Components initialization----------|\r\n");
 80029b2:	4843      	ldr	r0, [pc, #268]	@ (8002ac0 <ROCKET_InitRoutine+0x154>)
 80029b4:	f007 fd32 	bl	800a41c <puts>
	ROCKET_SetMode(MODE_PREFLIGHT);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff ffcd 	bl	8002958 <ROCKET_SetMode>
	printf("(+) Mode flight: %i succeeded...\r\n", rocket_data.header_states.mode);
 80029be:	4c41      	ldr	r4, [pc, #260]	@ (8002ac4 <ROCKET_InitRoutine+0x158>)
 80029c0:	7821      	ldrb	r1, [r4, #0]
 80029c2:	4841      	ldr	r0, [pc, #260]	@ (8002ac8 <ROCKET_InitRoutine+0x15c>)
 80029c4:	f007 fcc2 	bl	800a34c <iprintf>
	// LED RGB
	WS2812_Init();
 80029c8:	f7ff fa82 	bl	8001ed0 <WS2812_Init>
	printf("(+) WS2812 succeeded...\r\n");
 80029cc:	483f      	ldr	r0, [pc, #252]	@ (8002acc <ROCKET_InitRoutine+0x160>)
 80029ce:	f007 fd25 	bl	800a41c <puts>
		printf(" -> Pyro1 state: %i\r\n", rocket_data.header_states.pyro1);
		printf("(+) CD74HC4051 succeeded...\r\n");
	}
	*/
	// Barometer
	bmp_data.SPIx = SPI2;
 80029d2:	483f      	ldr	r0, [pc, #252]	@ (8002ad0 <ROCKET_InitRoutine+0x164>)
 80029d4:	6005      	str	r5, [r0, #0]
	bmp_data.cs_pin = 8;
 80029d6:	2308      	movs	r3, #8
 80029d8:	7103      	strb	r3, [r0, #4]
	bmp_data.cs_port = PA;
 80029da:	2301      	movs	r3, #1
 80029dc:	6083      	str	r3, [r0, #8]
	rocket_data.header_states.barometer = BMP280_Init(&bmp_data) == 1 ? 0x01 : 0x00;
 80029de:	f7fe ff0b 	bl	80017f8 <BMP280_Init>
 80029e2:	2801      	cmp	r0, #1
 80029e4:	bf14      	ite	ne
 80029e6:	2000      	movne	r0, #0
 80029e8:	2001      	moveq	r0, #1
 80029ea:	7120      	strb	r0, [r4, #4]
	printf(rocket_data.header_states.barometer ? "(+) BMP280 succeeded...\r\n" : "(-) BMP280 failed...\r\n");
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d047      	beq.n	8002a80 <ROCKET_InitRoutine+0x114>
 80029f0:	4838      	ldr	r0, [pc, #224]	@ (8002ad4 <ROCKET_InitRoutine+0x168>)
 80029f2:	f007 fcab 	bl	800a34c <iprintf>
	// Accelerometer
	icm_data.SPIx = SPI2;
 80029f6:	4838      	ldr	r0, [pc, #224]	@ (8002ad8 <ROCKET_InitRoutine+0x16c>)
 80029f8:	4b29      	ldr	r3, [pc, #164]	@ (8002aa0 <ROCKET_InitRoutine+0x134>)
 80029fa:	6003      	str	r3, [r0, #0]
	icm_data.cs_pin = 12;
 80029fc:	230c      	movs	r3, #12
 80029fe:	7103      	strb	r3, [r0, #4]
	icm_data.cs_port = PB;
 8002a00:	2302      	movs	r3, #2
 8002a02:	6083      	str	r3, [r0, #8]
	icm_data.int_pin = 10;
 8002a04:	230a      	movs	r3, #10
 8002a06:	7303      	strb	r3, [r0, #12]
	icm_data.int_port = PA;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	6103      	str	r3, [r0, #16]
	rocket_data.header_states.accelerometer = ICM20602_Init(&icm_data) == 0 ? 0x01 : 0x00;
 8002a0c:	f7ff f816 	bl	8001a3c <ICM20602_Init>
 8002a10:	fab0 f080 	clz	r0, r0
 8002a14:	0940      	lsrs	r0, r0, #5
 8002a16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <ROCKET_InitRoutine+0x158>)
 8002a18:	70d8      	strb	r0, [r3, #3]
	printf(rocket_data.header_states.accelerometer ? "(+) ICM20602 succeeded...\r\n" : "(-) ICM20602 failed...\r\n");
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d032      	beq.n	8002a84 <ROCKET_InitRoutine+0x118>
 8002a1e:	482f      	ldr	r0, [pc, #188]	@ (8002adc <ROCKET_InitRoutine+0x170>)
 8002a20:	f007 fc94 	bl	800a34c <iprintf>
	// GPS
	l76_data.USARTx = USART2;
 8002a24:	482e      	ldr	r0, [pc, #184]	@ (8002ae0 <ROCKET_InitRoutine+0x174>)
 8002a26:	4b22      	ldr	r3, [pc, #136]	@ (8002ab0 <ROCKET_InitRoutine+0x144>)
 8002a28:	6003      	str	r3, [r0, #0]
	rocket_data.header_states.gps = L76LM33_Init(&l76_data) == 1 ? 0x01 : 0x00;
 8002a2a:	f7ff f8d5 	bl	8001bd8 <L76LM33_Init>
 8002a2e:	2801      	cmp	r0, #1
 8002a30:	bf14      	ite	ne
 8002a32:	2000      	movne	r0, #0
 8002a34:	2001      	moveq	r0, #1
 8002a36:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <ROCKET_InitRoutine+0x158>)
 8002a38:	7158      	strb	r0, [r3, #5]
	printf(rocket_data.header_states.gps ? "(+) L76LM33 succeeded...\r\n" : "(-) L76LM33 failed...\r\n");
 8002a3a:	b328      	cbz	r0, 8002a88 <ROCKET_InitRoutine+0x11c>
 8002a3c:	4829      	ldr	r0, [pc, #164]	@ (8002ae4 <ROCKET_InitRoutine+0x178>)
 8002a3e:	f007 fc85 	bl	800a34c <iprintf>
	// Radio
	rfd_data.USARTx = USART1;
 8002a42:	4829      	ldr	r0, [pc, #164]	@ (8002ae8 <ROCKET_InitRoutine+0x17c>)
 8002a44:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <ROCKET_InitRoutine+0x13c>)
 8002a46:	6003      	str	r3, [r0, #0]
	rocket_data.header_states.rfd = RFD900_Init(&rfd_data) == 1 ? 0x01 : 0x00;
 8002a48:	f7ff f9f2 	bl	8001e30 <RFD900_Init>
 8002a4c:	2801      	cmp	r0, #1
 8002a4e:	bf14      	ite	ne
 8002a50:	2000      	movne	r0, #0
 8002a52:	2001      	moveq	r0, #1
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <ROCKET_InitRoutine+0x158>)
 8002a56:	7198      	strb	r0, [r3, #6]
	printf(rocket_data.header_states.rfd ? "(+) RFD900 succeeded...\r\n" : "(-) RFD900 failed...\r\n");
 8002a58:	b1c0      	cbz	r0, 8002a8c <ROCKET_InitRoutine+0x120>
 8002a5a:	4824      	ldr	r0, [pc, #144]	@ (8002aec <ROCKET_InitRoutine+0x180>)
 8002a5c:	f007 fc76 	bl	800a34c <iprintf>
	// SD Card
	rocket_data.header_states.sd = MEM2067_Mount("log.txt") == 1 ? 0x01 : 0x00;
 8002a60:	4823      	ldr	r0, [pc, #140]	@ (8002af0 <ROCKET_InitRoutine+0x184>)
 8002a62:	f7ff f97b 	bl	8001d5c <MEM2067_Mount>
 8002a66:	2801      	cmp	r0, #1
 8002a68:	bf14      	ite	ne
 8002a6a:	2000      	movne	r0, #0
 8002a6c:	2001      	moveq	r0, #1
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <ROCKET_InitRoutine+0x158>)
 8002a70:	71d8      	strb	r0, [r3, #7]
	printf(rocket_data.header_states.sd ? "(+) SD card succeeded...\r\n" : "(-) SD card failed...\r\n");
 8002a72:	b168      	cbz	r0, 8002a90 <ROCKET_InitRoutine+0x124>
 8002a74:	481f      	ldr	r0, [pc, #124]	@ (8002af4 <ROCKET_InitRoutine+0x188>)
 8002a76:	f007 fc69 	bl	800a34c <iprintf>
	MEM2067_Infos();
 8002a7a:	f7ff f997 	bl	8001dac <MEM2067_Infos>
	/*
	// Bluetooth
	HM10BLE_Init(&ble_data, BT_USART_PORT);
	*/
	//TODO: MEM2067 Date + Task end time
}
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
	printf(rocket_data.header_states.barometer ? "(+) BMP280 succeeded...\r\n" : "(-) BMP280 failed...\r\n");
 8002a80:	481d      	ldr	r0, [pc, #116]	@ (8002af8 <ROCKET_InitRoutine+0x18c>)
 8002a82:	e7b6      	b.n	80029f2 <ROCKET_InitRoutine+0x86>
	printf(rocket_data.header_states.accelerometer ? "(+) ICM20602 succeeded...\r\n" : "(-) ICM20602 failed...\r\n");
 8002a84:	481d      	ldr	r0, [pc, #116]	@ (8002afc <ROCKET_InitRoutine+0x190>)
 8002a86:	e7cb      	b.n	8002a20 <ROCKET_InitRoutine+0xb4>
	printf(rocket_data.header_states.gps ? "(+) L76LM33 succeeded...\r\n" : "(-) L76LM33 failed...\r\n");
 8002a88:	481d      	ldr	r0, [pc, #116]	@ (8002b00 <ROCKET_InitRoutine+0x194>)
 8002a8a:	e7d8      	b.n	8002a3e <ROCKET_InitRoutine+0xd2>
	printf(rocket_data.header_states.rfd ? "(+) RFD900 succeeded...\r\n" : "(-) RFD900 failed...\r\n");
 8002a8c:	481d      	ldr	r0, [pc, #116]	@ (8002b04 <ROCKET_InitRoutine+0x198>)
 8002a8e:	e7e5      	b.n	8002a5c <ROCKET_InitRoutine+0xf0>
	printf(rocket_data.header_states.sd ? "(+) SD card succeeded...\r\n" : "(-) SD card failed...\r\n");
 8002a90:	481d      	ldr	r0, [pc, #116]	@ (8002b08 <ROCKET_InitRoutine+0x19c>)
 8002a92:	e7f0      	b.n	8002a76 <ROCKET_InitRoutine+0x10a>
 8002a94:	0800d540 	.word	0x0800d540
 8002a98:	40013000 	.word	0x40013000
 8002a9c:	0800d560 	.word	0x0800d560
 8002aa0:	40003800 	.word	0x40003800
 8002aa4:	0800d578 	.word	0x0800d578
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	0800d590 	.word	0x0800d590
 8002ab0:	40004400 	.word	0x40004400
 8002ab4:	0800d5ac 	.word	0x0800d5ac
 8002ab8:	40004800 	.word	0x40004800
 8002abc:	0800d5c8 	.word	0x0800d5c8
 8002ac0:	0800d5e4 	.word	0x0800d5e4
 8002ac4:	200022d8 	.word	0x200022d8
 8002ac8:	0800d618 	.word	0x0800d618
 8002acc:	0800d63c 	.word	0x0800d63c
 8002ad0:	20002354 	.word	0x20002354
 8002ad4:	0800d438 	.word	0x0800d438
 8002ad8:	20002304 	.word	0x20002304
 8002adc:	0800d46c 	.word	0x0800d46c
 8002ae0:	20002300 	.word	0x20002300
 8002ae4:	0800d4a4 	.word	0x0800d4a4
 8002ae8:	200022ec 	.word	0x200022ec
 8002aec:	0800d4d8 	.word	0x0800d4d8
 8002af0:	0800d658 	.word	0x0800d658
 8002af4:	0800d50c 	.word	0x0800d50c
 8002af8:	0800d454 	.word	0x0800d454
 8002afc:	0800d488 	.word	0x0800d488
 8002b00:	0800d4c0 	.word	0x0800d4c0
 8002b04:	0800d4f4 	.word	0x0800d4f4
 8002b08:	0800d528 	.word	0x0800d528

08002b0c <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	460c      	mov	r4, r1
 8002b10:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	2500      	movs	r5, #0
 8002b14:	e004      	b.n	8002b20 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 8002b16:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002b1a:	f7ff ff03 	bl	8002924 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	3501      	adds	r5, #1
 8002b20:	42b5      	cmp	r5, r6
 8002b22:	dbf8      	blt.n	8002b16 <_write+0xa>
	}
	return len;
}
 8002b24:	4630      	mov	r0, r6
 8002b26:	bd70      	pop	{r4, r5, r6, pc}

08002b28 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b28:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <Error_Handler+0x2>

08002b2c <MX_SPI1_Init>:
{
 8002b2c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8002b2e:	480d      	ldr	r0, [pc, #52]	@ (8002b64 <MX_SPI1_Init+0x38>)
 8002b30:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <MX_SPI1_Init+0x3c>)
 8002b32:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b34:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002b38:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b3e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b40:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b42:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b48:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b4e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b50:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b52:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b54:	230a      	movs	r3, #10
 8002b56:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b58:	f001 fc84 	bl	8004464 <HAL_SPI_Init>
 8002b5c:	b900      	cbnz	r0, 8002b60 <MX_SPI1_Init+0x34>
}
 8002b5e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b60:	f7ff ffe2 	bl	8002b28 <Error_Handler>
 8002b64:	20002430 	.word	0x20002430
 8002b68:	40013000 	.word	0x40013000

08002b6c <MX_TIM3_Init>:
{
 8002b6c:	b500      	push	{lr}
 8002b6e:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b70:	2300      	movs	r3, #0
 8002b72:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8002b78:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7a:	9308      	str	r3, [sp, #32]
 8002b7c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	9302      	str	r3, [sp, #8]
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	9304      	str	r3, [sp, #16]
 8002b86:	9305      	str	r3, [sp, #20]
 8002b88:	9306      	str	r3, [sp, #24]
 8002b8a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8002b8c:	481e      	ldr	r0, [pc, #120]	@ (8002c08 <MX_TIM3_Init+0x9c>)
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c0c <MX_TIM3_Init+0xa0>)
 8002b90:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 8002b92:	227f      	movs	r2, #127	@ 0x7f
 8002b94:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b96:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 8002b98:	2214      	movs	r2, #20
 8002b9a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ba0:	f002 f88a 	bl	8004cb8 <HAL_TIM_Base_Init>
 8002ba4:	bb28      	cbnz	r0, 8002bf2 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002baa:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bac:	a90a      	add	r1, sp, #40	@ 0x28
 8002bae:	4816      	ldr	r0, [pc, #88]	@ (8002c08 <MX_TIM3_Init+0x9c>)
 8002bb0:	f002 f9ec 	bl	8004f8c <HAL_TIM_ConfigClockSource>
 8002bb4:	b9f8      	cbnz	r0, 8002bf6 <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bb6:	4814      	ldr	r0, [pc, #80]	@ (8002c08 <MX_TIM3_Init+0x9c>)
 8002bb8:	f002 f8cd 	bl	8004d56 <HAL_TIM_PWM_Init>
 8002bbc:	b9e8      	cbnz	r0, 8002bfa <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bc4:	a908      	add	r1, sp, #32
 8002bc6:	4810      	ldr	r0, [pc, #64]	@ (8002c08 <MX_TIM3_Init+0x9c>)
 8002bc8:	f002 fd28 	bl	800561c <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	b9b8      	cbnz	r0, 8002bfe <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bce:	2360      	movs	r3, #96	@ 0x60
 8002bd0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd6:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bda:	220c      	movs	r2, #12
 8002bdc:	a901      	add	r1, sp, #4
 8002bde:	480a      	ldr	r0, [pc, #40]	@ (8002c08 <MX_TIM3_Init+0x9c>)
 8002be0:	f002 f912 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 8002be4:	b968      	cbnz	r0, 8002c02 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8002be6:	4808      	ldr	r0, [pc, #32]	@ (8002c08 <MX_TIM3_Init+0x9c>)
 8002be8:	f000 f9a0 	bl	8002f2c <HAL_TIM_MspPostInit>
}
 8002bec:	b00f      	add	sp, #60	@ 0x3c
 8002bee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002bf2:	f7ff ff99 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002bf6:	f7ff ff97 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002bfa:	f7ff ff95 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002bfe:	f7ff ff93 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002c02:	f7ff ff91 	bl	8002b28 <Error_Handler>
 8002c06:	bf00      	nop
 8002c08:	200023a0 	.word	0x200023a0
 8002c0c:	40000400 	.word	0x40000400

08002c10 <MX_TIM2_Init>:
{
 8002c10:	b500      	push	{lr}
 8002c12:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c14:	2300      	movs	r3, #0
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	9303      	str	r3, [sp, #12]
 8002c1a:	9304      	str	r3, [sp, #16]
 8002c1c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8002c22:	4814      	ldr	r0, [pc, #80]	@ (8002c74 <MX_TIM2_Init+0x64>)
 8002c24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c28:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 8002c2a:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8002c2e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c30:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8002c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c36:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c38:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c3c:	f002 f83c 	bl	8004cb8 <HAL_TIM_Base_Init>
 8002c40:	b990      	cbnz	r0, 8002c68 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c46:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c48:	a902      	add	r1, sp, #8
 8002c4a:	480a      	ldr	r0, [pc, #40]	@ (8002c74 <MX_TIM2_Init+0x64>)
 8002c4c:	f002 f99e 	bl	8004f8c <HAL_TIM_ConfigClockSource>
 8002c50:	b960      	cbnz	r0, 8002c6c <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c56:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c58:	4669      	mov	r1, sp
 8002c5a:	4806      	ldr	r0, [pc, #24]	@ (8002c74 <MX_TIM2_Init+0x64>)
 8002c5c:	f002 fcde 	bl	800561c <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	b930      	cbnz	r0, 8002c70 <MX_TIM2_Init+0x60>
}
 8002c62:	b007      	add	sp, #28
 8002c64:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002c68:	f7ff ff5e 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002c6c:	f7ff ff5c 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002c70:	f7ff ff5a 	bl	8002b28 <Error_Handler>
 8002c74:	200023e8 	.word	0x200023e8

08002c78 <MX_ADC1_Init>:
{
 8002c78:	b500      	push	{lr}
 8002c7a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8002c84:	480f      	ldr	r0, [pc, #60]	@ (8002cc4 <MX_ADC1_Init+0x4c>)
 8002c86:	4a10      	ldr	r2, [pc, #64]	@ (8002cc8 <MX_ADC1_Init+0x50>)
 8002c88:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c8a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c8c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c8e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c90:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002c94:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c96:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c9c:	f000 fa9e 	bl	80031dc <HAL_ADC_Init>
 8002ca0:	b960      	cbnz	r0, 8002cbc <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002caa:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cac:	a901      	add	r1, sp, #4
 8002cae:	4805      	ldr	r0, [pc, #20]	@ (8002cc4 <MX_ADC1_Init+0x4c>)
 8002cb0:	f000 fb6c 	bl	800338c <HAL_ADC_ConfigChannel>
 8002cb4:	b920      	cbnz	r0, 8002cc0 <MX_ADC1_Init+0x48>
}
 8002cb6:	b005      	add	sp, #20
 8002cb8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002cbc:	f7ff ff34 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002cc0:	f7ff ff32 	bl	8002b28 <Error_Handler>
 8002cc4:	20002490 	.word	0x20002490
 8002cc8:	40012400 	.word	0x40012400

08002ccc <MX_CRC_Init>:
{
 8002ccc:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8002cce:	4804      	ldr	r0, [pc, #16]	@ (8002ce0 <MX_CRC_Init+0x14>)
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <MX_CRC_Init+0x18>)
 8002cd2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002cd4:	f000 fd77 	bl	80037c6 <HAL_CRC_Init>
 8002cd8:	b900      	cbnz	r0, 8002cdc <MX_CRC_Init+0x10>
}
 8002cda:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002cdc:	f7ff ff24 	bl	8002b28 <Error_Handler>
 8002ce0:	20002488 	.word	0x20002488
 8002ce4:	40023000 	.word	0x40023000

08002ce8 <SystemClock_Config>:
{
 8002ce8:	b500      	push	{lr}
 8002cea:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cec:	2228      	movs	r2, #40	@ 0x28
 8002cee:	2100      	movs	r1, #0
 8002cf0:	eb0d 0002 	add.w	r0, sp, r2
 8002cf4:	f007 fc72 	bl	800a5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9305      	str	r3, [sp, #20]
 8002cfc:	9306      	str	r3, [sp, #24]
 8002cfe:	9307      	str	r3, [sp, #28]
 8002d00:	9308      	str	r3, [sp, #32]
 8002d02:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	9302      	str	r3, [sp, #8]
 8002d08:	9303      	str	r3, [sp, #12]
 8002d0a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d14:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002d16:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002d1a:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d1c:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d1e:	2202      	movs	r2, #2
 8002d20:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d22:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d24:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002d28:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d2a:	a80a      	add	r0, sp, #40	@ 0x28
 8002d2c:	f000 ff04 	bl	8003b38 <HAL_RCC_OscConfig>
 8002d30:	b9c8      	cbnz	r0, 8002d66 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d32:	230f      	movs	r3, #15
 8002d34:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d36:	2102      	movs	r1, #2
 8002d38:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d42:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d44:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d46:	a805      	add	r0, sp, #20
 8002d48:	f001 f978 	bl	800403c <HAL_RCC_ClockConfig>
 8002d4c:	b968      	cbnz	r0, 8002d6a <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d56:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d58:	a801      	add	r0, sp, #4
 8002d5a:	f001 facd 	bl	80042f8 <HAL_RCCEx_PeriphCLKConfig>
 8002d5e:	b930      	cbnz	r0, 8002d6e <SystemClock_Config+0x86>
}
 8002d60:	b015      	add	sp, #84	@ 0x54
 8002d62:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002d66:	f7ff fedf 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002d6a:	f7ff fedd 	bl	8002b28 <Error_Handler>
    Error_Handler();
 8002d6e:	f7ff fedb 	bl	8002b28 <Error_Handler>

08002d72 <main>:
{
 8002d72:	b508      	push	{r3, lr}
  ROCKET_InitRoutine();
 8002d74:	f7ff fdfa 	bl	800296c <ROCKET_InitRoutine>
  HAL_Init();
 8002d78:	f000 f9aa 	bl	80030d0 <HAL_Init>
  SystemClock_Config();
 8002d7c:	f7ff ffb4 	bl	8002ce8 <SystemClock_Config>
  MX_SPI1_Init();
 8002d80:	f7ff fed4 	bl	8002b2c <MX_SPI1_Init>
  MX_TIM3_Init();
 8002d84:	f7ff fef2 	bl	8002b6c <MX_TIM3_Init>
  MX_TIM2_Init();
 8002d88:	f7ff ff42 	bl	8002c10 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002d8c:	f7ff ff74 	bl	8002c78 <MX_ADC1_Init>
  MX_CRC_Init();
 8002d90:	f7ff ff9c 	bl	8002ccc <MX_CRC_Init>
  MX_FATFS_Init();
 8002d94:	f002 fca0 	bl	80056d8 <MX_FATFS_Init>
	while (1)
 8002d98:	e7fe      	b.n	8002d98 <main+0x26>
	...

08002d9c <HAL_MspInit>:
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_MspInit+0x3c>)
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	619a      	str	r2, [r3, #24]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	f002 0201 	and.w	r2, r2, #1
 8002dae:	9200      	str	r2, [sp, #0]
 8002db0:	9a00      	ldr	r2, [sp, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002db8:	61da      	str	r2, [r3, #28]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	9b01      	ldr	r3, [sp, #4]
 8002dc4:	4a05      	ldr	r2, [pc, #20]	@ (8002ddc <HAL_MspInit+0x40>)
 8002dc6:	6853      	ldr	r3, [r2, #4]
 8002dc8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	6053      	str	r3, [r2, #4]
 8002dd2:	b002      	add	sp, #8
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010000 	.word	0x40010000

08002de0 <HAL_ADC_MspInit>:
 8002de0:	b500      	push	{lr}
 8002de2:	b087      	sub	sp, #28
 8002de4:	2300      	movs	r3, #0
 8002de6:	9302      	str	r3, [sp, #8]
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	9304      	str	r3, [sp, #16]
 8002dec:	9305      	str	r3, [sp, #20]
 8002dee:	6802      	ldr	r2, [r0, #0]
 8002df0:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <HAL_ADC_MspInit+0x58>)
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d002      	beq.n	8002dfc <HAL_ADC_MspInit+0x1c>
 8002df6:	b007      	add	sp, #28
 8002df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dfc:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e06:	619a      	str	r2, [r3, #24]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	9a00      	ldr	r2, [sp, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	f042 0204 	orr.w	r2, r2, #4
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	9b01      	ldr	r3, [sp, #4]
 8002e24:	2301      	movs	r3, #1
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	2303      	movs	r3, #3
 8002e2a:	9303      	str	r3, [sp, #12]
 8002e2c:	a902      	add	r1, sp, #8
 8002e2e:	4803      	ldr	r0, [pc, #12]	@ (8002e3c <HAL_ADC_MspInit+0x5c>)
 8002e30:	f000 fce6 	bl	8003800 <HAL_GPIO_Init>
 8002e34:	e7df      	b.n	8002df6 <HAL_ADC_MspInit+0x16>
 8002e36:	bf00      	nop
 8002e38:	40012400 	.word	0x40012400
 8002e3c:	40010800 	.word	0x40010800

08002e40 <HAL_CRC_MspInit>:
 8002e40:	6802      	ldr	r2, [r0, #0]
 8002e42:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <HAL_CRC_MspInit+0x28>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d000      	beq.n	8002e4a <HAL_CRC_MspInit+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e56:	615a      	str	r2, [r3, #20]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	9b01      	ldr	r3, [sp, #4]
 8002e62:	b002      	add	sp, #8
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023000 	.word	0x40023000

08002e6c <HAL_SPI_MspInit>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	2300      	movs	r3, #0
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	9303      	str	r3, [sp, #12]
 8002e76:	9304      	str	r3, [sp, #16]
 8002e78:	9305      	str	r3, [sp, #20]
 8002e7a:	6802      	ldr	r2, [r0, #0]
 8002e7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <HAL_SPI_MspInit+0x6c>)
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_SPI_MspInit+0x1a>
 8002e82:	b006      	add	sp, #24
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e90:	619a      	str	r2, [r3, #24]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e98:	9200      	str	r2, [sp, #0]
 8002e9a:	9a00      	ldr	r2, [sp, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	f042 0204 	orr.w	r2, r2, #4
 8002ea2:	619a      	str	r2, [r3, #24]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	9b01      	ldr	r3, [sp, #4]
 8002eae:	23a0      	movs	r3, #160	@ 0xa0
 8002eb0:	9302      	str	r3, [sp, #8]
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	9303      	str	r3, [sp, #12]
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	9305      	str	r3, [sp, #20]
 8002eba:	4c08      	ldr	r4, [pc, #32]	@ (8002edc <HAL_SPI_MspInit+0x70>)
 8002ebc:	a902      	add	r1, sp, #8
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f000 fc9e 	bl	8003800 <HAL_GPIO_Init>
 8002ec4:	2340      	movs	r3, #64	@ 0x40
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9303      	str	r3, [sp, #12]
 8002ecc:	9304      	str	r3, [sp, #16]
 8002ece:	a902      	add	r1, sp, #8
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f000 fc95 	bl	8003800 <HAL_GPIO_Init>
 8002ed6:	e7d4      	b.n	8002e82 <HAL_SPI_MspInit+0x16>
 8002ed8:	40013000 	.word	0x40013000
 8002edc:	40010800 	.word	0x40010800

08002ee0 <HAL_TIM_Base_MspInit>:
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	6803      	ldr	r3, [r0, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIM_Base_MspInit+0x14>
 8002eea:	4a0e      	ldr	r2, [pc, #56]	@ (8002f24 <HAL_TIM_Base_MspInit+0x44>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00d      	beq.n	8002f0c <HAL_TIM_Base_MspInit+0x2c>
 8002ef0:	b002      	add	sp, #8
 8002ef2:	4770      	bx	lr
 8002ef4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	61da      	str	r2, [r3, #28]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	9b00      	ldr	r3, [sp, #0]
 8002f0a:	e7f1      	b.n	8002ef0 <HAL_TIM_Base_MspInit+0x10>
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_TIM_Base_MspInit+0x48>)
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	f042 0202 	orr.w	r2, r2, #2
 8002f14:	61da      	str	r2, [r3, #28]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	9b01      	ldr	r3, [sp, #4]
 8002f20:	e7e6      	b.n	8002ef0 <HAL_TIM_Base_MspInit+0x10>
 8002f22:	bf00      	nop
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_TIM_MspPostInit>:
 8002f2c:	b500      	push	{lr}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	2300      	movs	r3, #0
 8002f32:	9302      	str	r3, [sp, #8]
 8002f34:	9303      	str	r3, [sp, #12]
 8002f36:	9304      	str	r3, [sp, #16]
 8002f38:	9305      	str	r3, [sp, #20]
 8002f3a:	6802      	ldr	r2, [r0, #0]
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <HAL_TIM_MspPostInit+0x44>)
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d002      	beq.n	8002f48 <HAL_TIM_MspPostInit+0x1c>
 8002f42:	b007      	add	sp, #28
 8002f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f48:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	f042 0208 	orr.w	r2, r2, #8
 8002f52:	619a      	str	r2, [r3, #24]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	2302      	movs	r3, #2
 8002f60:	9302      	str	r3, [sp, #8]
 8002f62:	9303      	str	r3, [sp, #12]
 8002f64:	9305      	str	r3, [sp, #20]
 8002f66:	a902      	add	r1, sp, #8
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <HAL_TIM_MspPostInit+0x48>)
 8002f6a:	f000 fc49 	bl	8003800 <HAL_GPIO_Init>
 8002f6e:	e7e8      	b.n	8002f42 <HAL_TIM_MspPostInit+0x16>
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40010c00 	.word	0x40010c00

08002f78 <NMI_Handler>:
 8002f78:	e7fe      	b.n	8002f78 <NMI_Handler>

08002f7a <HardFault_Handler>:
 8002f7a:	e7fe      	b.n	8002f7a <HardFault_Handler>

08002f7c <MemManage_Handler>:
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler>

08002f7e <BusFault_Handler>:
 8002f7e:	e7fe      	b.n	8002f7e <BusFault_Handler>

08002f80 <UsageFault_Handler>:
 8002f80:	e7fe      	b.n	8002f80 <UsageFault_Handler>

08002f82 <SVC_Handler>:
 8002f82:	4770      	bx	lr

08002f84 <DebugMon_Handler>:
 8002f84:	4770      	bx	lr

08002f86 <PendSV_Handler>:
 8002f86:	4770      	bx	lr

08002f88 <SDTimer_Handler>:
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <SDTimer_Handler+0x24>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b123      	cbz	r3, 8002f98 <SDTimer_Handler+0x10>
 8002f8e:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <SDTimer_Handler+0x24>)
 8002f90:	7813      	ldrb	r3, [r2, #0]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	7013      	strb	r3, [r2, #0]
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <SDTimer_Handler+0x28>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b123      	cbz	r3, 8002fa8 <SDTimer_Handler+0x20>
 8002f9e:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <SDTimer_Handler+0x28>)
 8002fa0:	7813      	ldrb	r3, [r2, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	7013      	strb	r3, [r2, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200024c1 	.word	0x200024c1
 8002fb0:	200024c0 	.word	0x200024c0

08002fb4 <SysTick_Handler>:
 8002fb4:	b508      	push	{r3, lr}
 8002fb6:	4a09      	ldr	r2, [pc, #36]	@ (8002fdc <SysTick_Handler+0x28>)
 8002fb8:	7813      	ldrb	r3, [r2, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	7013      	strb	r3, [r2, #0]
 8002fc0:	7813      	ldrb	r3, [r2, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	d802      	bhi.n	8002fce <SysTick_Handler+0x1a>
 8002fc8:	f000 f8c8 	bl	800315c <HAL_IncTick>
 8002fcc:	bd08      	pop	{r3, pc}
 8002fce:	4613      	mov	r3, r2
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	f7ff ffd8 	bl	8002f88 <SDTimer_Handler>
 8002fd8:	e7f6      	b.n	8002fc8 <SysTick_Handler+0x14>
 8002fda:	bf00      	nop
 8002fdc:	200024c2 	.word	0x200024c2

08002fe0 <_getpid>:
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	4770      	bx	lr

08002fe4 <_kill>:
 8002fe4:	b508      	push	{r3, lr}
 8002fe6:	f007 fb5b 	bl	800a6a0 <__errno>
 8002fea:	2316      	movs	r3, #22
 8002fec:	6003      	str	r3, [r0, #0]
 8002fee:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff2:	bd08      	pop	{r3, pc}

08002ff4 <_exit>:
 8002ff4:	b508      	push	{r3, lr}
 8002ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffa:	f7ff fff3 	bl	8002fe4 <_kill>
 8002ffe:	e7fe      	b.n	8002ffe <_exit+0xa>

08003000 <_read>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	460c      	mov	r4, r1
 8003004:	4616      	mov	r6, r2
 8003006:	2500      	movs	r5, #0
 8003008:	e006      	b.n	8003018 <_read+0x18>
 800300a:	f3af 8000 	nop.w
 800300e:	4621      	mov	r1, r4
 8003010:	f801 0b01 	strb.w	r0, [r1], #1
 8003014:	3501      	adds	r5, #1
 8003016:	460c      	mov	r4, r1
 8003018:	42b5      	cmp	r5, r6
 800301a:	dbf6      	blt.n	800300a <_read+0xa>
 800301c:	4630      	mov	r0, r6
 800301e:	bd70      	pop	{r4, r5, r6, pc}

08003020 <_close>:
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	4770      	bx	lr

08003026 <_fstat>:
 8003026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800302a:	604b      	str	r3, [r1, #4]
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr

08003030 <_isatty>:
 8003030:	2001      	movs	r0, #1
 8003032:	4770      	bx	lr

08003034 <_lseek>:
 8003034:	2000      	movs	r0, #0
 8003036:	4770      	bx	lr

08003038 <_sbrk>:
 8003038:	b510      	push	{r4, lr}
 800303a:	4603      	mov	r3, r0
 800303c:	4a0c      	ldr	r2, [pc, #48]	@ (8003070 <_sbrk+0x38>)
 800303e:	490d      	ldr	r1, [pc, #52]	@ (8003074 <_sbrk+0x3c>)
 8003040:	480d      	ldr	r0, [pc, #52]	@ (8003078 <_sbrk+0x40>)
 8003042:	6800      	ldr	r0, [r0, #0]
 8003044:	b140      	cbz	r0, 8003058 <_sbrk+0x20>
 8003046:	480c      	ldr	r0, [pc, #48]	@ (8003078 <_sbrk+0x40>)
 8003048:	6800      	ldr	r0, [r0, #0]
 800304a:	4403      	add	r3, r0
 800304c:	1a52      	subs	r2, r2, r1
 800304e:	4293      	cmp	r3, r2
 8003050:	d806      	bhi.n	8003060 <_sbrk+0x28>
 8003052:	4a09      	ldr	r2, [pc, #36]	@ (8003078 <_sbrk+0x40>)
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	bd10      	pop	{r4, pc}
 8003058:	4807      	ldr	r0, [pc, #28]	@ (8003078 <_sbrk+0x40>)
 800305a:	4c08      	ldr	r4, [pc, #32]	@ (800307c <_sbrk+0x44>)
 800305c:	6004      	str	r4, [r0, #0]
 800305e:	e7f2      	b.n	8003046 <_sbrk+0xe>
 8003060:	f007 fb1e 	bl	800a6a0 <__errno>
 8003064:	230c      	movs	r3, #12
 8003066:	6003      	str	r3, [r0, #0]
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	e7f3      	b.n	8003056 <_sbrk+0x1e>
 800306e:	bf00      	nop
 8003070:	20005000 	.word	0x20005000
 8003074:	00000800 	.word	0x00000800
 8003078:	200024c4 	.word	0x200024c4
 800307c:	20002840 	.word	0x20002840

08003080 <SystemInit>:
 8003080:	4770      	bx	lr
	...

08003084 <Reset_Handler>:
 8003084:	f7ff fffc 	bl	8003080 <SystemInit>
 8003088:	480b      	ldr	r0, [pc, #44]	@ (80030b8 <LoopFillZerobss+0xe>)
 800308a:	490c      	ldr	r1, [pc, #48]	@ (80030bc <LoopFillZerobss+0x12>)
 800308c:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <LoopFillZerobss+0x16>)
 800308e:	2300      	movs	r3, #0
 8003090:	e002      	b.n	8003098 <LoopCopyDataInit>

08003092 <CopyDataInit>:
 8003092:	58d4      	ldr	r4, [r2, r3]
 8003094:	50c4      	str	r4, [r0, r3]
 8003096:	3304      	adds	r3, #4

08003098 <LoopCopyDataInit>:
 8003098:	18c4      	adds	r4, r0, r3
 800309a:	428c      	cmp	r4, r1
 800309c:	d3f9      	bcc.n	8003092 <CopyDataInit>
 800309e:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <LoopFillZerobss+0x1a>)
 80030a0:	4c09      	ldr	r4, [pc, #36]	@ (80030c8 <LoopFillZerobss+0x1e>)
 80030a2:	2300      	movs	r3, #0
 80030a4:	e001      	b.n	80030aa <LoopFillZerobss>

080030a6 <FillZerobss>:
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	3204      	adds	r2, #4

080030aa <LoopFillZerobss>:
 80030aa:	42a2      	cmp	r2, r4
 80030ac:	d3fb      	bcc.n	80030a6 <FillZerobss>
 80030ae:	f007 fafd 	bl	800a6ac <__libc_init_array>
 80030b2:	f7ff fe5e 	bl	8002d72 <main>
 80030b6:	4770      	bx	lr
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000200 	.word	0x20000200
 80030c0:	0800df88 	.word	0x0800df88
 80030c4:	20000200 	.word	0x20000200
 80030c8:	20002840 	.word	0x20002840

080030cc <ADC1_2_IRQHandler>:
 80030cc:	e7fe      	b.n	80030cc <ADC1_2_IRQHandler>
	...

080030d0 <HAL_Init>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_Init+0x28>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <HAL_Init+0x28>)
 80030da:	f043 0310 	orr.w	r3, r3, #16
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	2003      	movs	r0, #3
 80030e2:	f000 fb3d 	bl	8003760 <HAL_NVIC_SetPriorityGrouping>
 80030e6:	200f      	movs	r0, #15
 80030e8:	f000 f808 	bl	80030fc <HAL_InitTick>
 80030ec:	f7ff fe56 	bl	8002d9c <HAL_MspInit>
 80030f0:	2300      	movs	r3, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40022000 	.word	0x40022000

080030fc <HAL_InitTick>:
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_InitTick+0x54>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_InitTick+0x58>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003112:	fbb3 f3f1 	udiv	r3, r3, r1
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fb47 	bl	80037ae <HAL_SYSTICK_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_InitTick+0x2e>
 8003126:	2301      	movs	r3, #1
 8003128:	e00e      	b.n	8003148 <HAL_InitTick+0x4c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d80a      	bhi.n	8003146 <HAL_InitTick+0x4a>
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f000 fb1d 	bl	8003776 <HAL_NVIC_SetPriority>
 800313c:	4a06      	ldr	r2, [pc, #24]	@ (8003158 <HAL_InitTick+0x5c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_InitTick+0x4c>
 8003146:	2301      	movs	r3, #1
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000004 	.word	0x20000004
 8003154:	2000000c 	.word	0x2000000c
 8003158:	20000008 	.word	0x20000008

0800315c <HAL_IncTick>:
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_IncTick+0x1c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <HAL_IncTick+0x20>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a03      	ldr	r2, [pc, #12]	@ (800317c <HAL_IncTick+0x20>)
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	2000000c 	.word	0x2000000c
 800317c:	200024c8 	.word	0x200024c8

08003180 <HAL_GetTick>:
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
 8003184:	4b02      	ldr	r3, [pc, #8]	@ (8003190 <HAL_GetTick+0x10>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	200024c8 	.word	0x200024c8

08003194 <HAL_Delay>:
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	f7ff fff0 	bl	8003180 <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d005      	beq.n	80031ba <HAL_Delay+0x26>
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <HAL_Delay+0x44>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	bf00      	nop
 80031bc:	f7ff ffe0 	bl	8003180 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d8f7      	bhi.n	80031bc <HAL_Delay+0x28>
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000000c 	.word	0x2000000c

080031dc <HAL_ADC_Init>:
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x22>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0be      	b.n	800337c <HAL_ADC_Init+0x1a0>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_ADC_Init+0x44>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fde0 	bl	8002de0 <HAL_ADC_MspInit>
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f9ab 	bl	800357c <ADC_ConversionStop_Disable>
 8003226:	4603      	mov	r3, r0
 8003228:	75fb      	strb	r3, [r7, #23]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 8099 	bne.w	800336a <HAL_ADC_Init+0x18e>
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 8095 	bne.w	800336a <HAL_ADC_Init+0x18e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003248:	f023 0302 	bic.w	r3, r3, #2
 800324c:	f043 0202 	orr.w	r2, r3, #2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7b1b      	ldrb	r3, [r3, #12]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4313      	orrs	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003274:	d003      	beq.n	800327e <HAL_ADC_Init+0xa2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d102      	bne.n	8003284 <HAL_ADC_Init+0xa8>
 800327e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003282:	e000      	b.n	8003286 <HAL_ADC_Init+0xaa>
 8003284:	2300      	movs	r3, #0
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7d1b      	ldrb	r3, [r3, #20]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d119      	bne.n	80032c8 <HAL_ADC_Init+0xec>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7b1b      	ldrb	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_ADC_Init+0xd4>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	035a      	lsls	r2, r3, #13
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e00b      	b.n	80032c8 <HAL_ADC_Init+0xec>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	4b28      	ldr	r3, [pc, #160]	@ (8003384 <HAL_ADC_Init+0x1a8>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f8:	d003      	beq.n	8003302 <HAL_ADC_Init+0x126>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d104      	bne.n	800330c <HAL_ADC_Init+0x130>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	3b01      	subs	r3, #1
 8003308:	051b      	lsls	r3, r3, #20
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	430a      	orrs	r2, r1
 800331e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	4b18      	ldr	r3, [pc, #96]	@ (8003388 <HAL_ADC_Init+0x1ac>)
 8003328:	4013      	ands	r3, r2
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d10b      	bne.n	8003348 <HAL_ADC_Init+0x16c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	629a      	str	r2, [r3, #40]	@ 0x28
 8003346:	e018      	b.n	800337a <HAL_ADC_Init+0x19e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	f023 0312 	bic.w	r3, r3, #18
 8003350:	f043 0210 	orr.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	@ 0x28
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
 8003368:	e007      	b.n	800337a <HAL_ADC_Init+0x19e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	ffe1f7fd 	.word	0xffe1f7fd
 8003388:	ff1f0efe 	.word	0xff1f0efe

0800338c <HAL_ADC_ConfigChannel>:
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x20>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0dc      	b.n	8003566 <HAL_ADC_ConfigChannel+0x1da>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b06      	cmp	r3, #6
 80033ba:	d81c      	bhi.n	80033f6 <HAL_ADC_ConfigChannel+0x6a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	3b05      	subs	r3, #5
 80033ce:	221f      	movs	r2, #31
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	4019      	ands	r1, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b05      	subs	r3, #5
 80033e8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80033f4:	e03c      	b.n	8003470 <HAL_ADC_ConfigChannel+0xe4>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d81c      	bhi.n	8003438 <HAL_ADC_ConfigChannel+0xac>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b23      	subs	r3, #35	@ 0x23
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	4019      	ands	r1, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	3b23      	subs	r3, #35	@ 0x23
 800342a:	fa00 f203 	lsl.w	r2, r0, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	631a      	str	r2, [r3, #48]	@ 0x30
 8003436:	e01b      	b.n	8003470 <HAL_ADC_ConfigChannel+0xe4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b41      	subs	r3, #65	@ 0x41
 800344a:	221f      	movs	r2, #31
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	4019      	ands	r1, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	3b41      	subs	r3, #65	@ 0x41
 8003464:	fa00 f203 	lsl.w	r2, r0, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b09      	cmp	r3, #9
 8003476:	d91c      	bls.n	80034b2 <HAL_ADC_ConfigChannel+0x126>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	3b1e      	subs	r3, #30
 800348a:	2207      	movs	r2, #7
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	4019      	ands	r1, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6898      	ldr	r0, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	3b1e      	subs	r3, #30
 80034a4:	fa00 f203 	lsl.w	r2, r0, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	e019      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x15a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6919      	ldr	r1, [r3, #16]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	2207      	movs	r2, #7
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	4019      	ands	r1, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6898      	ldr	r0, [r3, #8]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	611a      	str	r2, [r3, #16]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d003      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x16a>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b11      	cmp	r3, #17
 80034f4:	d132      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d0>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003570 <HAL_ADC_ConfigChannel+0x1e4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d125      	bne.n	800354c <HAL_ADC_ConfigChannel+0x1c0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d126      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d0>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b10      	cmp	r3, #16
 8003524:	d11a      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d0>
 8003526:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <HAL_ADC_ConfigChannel+0x1e8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a13      	ldr	r2, [pc, #76]	@ (8003578 <HAL_ADC_ConfigChannel+0x1ec>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	0c9a      	lsrs	r2, r3, #18
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	e002      	b.n	8003544 <HAL_ADC_ConfigChannel+0x1b8>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3b01      	subs	r3, #1
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f9      	bne.n	800353e <HAL_ADC_ConfigChannel+0x1b2>
 800354a:	e007      	b.n	800355c <HAL_ADC_ConfigChannel+0x1d0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	@ 0x28
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40012400 	.word	0x40012400
 8003574:	20000004 	.word	0x20000004
 8003578:	431bde83 	.word	0x431bde83

0800357c <ADC_ConversionStop_Disable>:
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b01      	cmp	r3, #1
 8003594:	d12e      	bne.n	80035f4 <ADC_ConversionStop_Disable+0x78>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	f7ff fdeb 	bl	8003180 <HAL_GetTick>
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	e01b      	b.n	80035e6 <ADC_ConversionStop_Disable+0x6a>
 80035ae:	f7ff fde7 	bl	8003180 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d914      	bls.n	80035e6 <ADC_ConversionStop_Disable+0x6a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10d      	bne.n	80035e6 <ADC_ConversionStop_Disable+0x6a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	f043 0210 	orr.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035e2:	2301      	movs	r3, #1
 80035e4:	e007      	b.n	80035f6 <ADC_ConversionStop_Disable+0x7a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d0dc      	beq.n	80035ae <ADC_ConversionStop_Disable+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <__NVIC_SetPriorityGrouping>:
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800362c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4a04      	ldr	r2, [pc, #16]	@ (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	60d3      	str	r3, [r2, #12]
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_GetPriorityGrouping>:
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
 800364c:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_SetPriority>:
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	@ (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <SysTick_Config>:
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800372c:	d301      	bcc.n	8003732 <SysTick_Config+0x16>
 800372e:	2301      	movs	r3, #1
 8003730:	e00f      	b.n	8003752 <SysTick_Config+0x36>
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <SysTick_Config+0x40>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	6053      	str	r3, [r2, #4]
 800373a:	210f      	movs	r1, #15
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	f7ff ff90 	bl	8003664 <__NVIC_SetPriority>
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <SysTick_Config+0x40>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	4b04      	ldr	r3, [pc, #16]	@ (800375c <SysTick_Config+0x40>)
 800374c:	2207      	movs	r2, #7
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	2300      	movs	r3, #0
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010

08003760 <HAL_NVIC_SetPriorityGrouping>:
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff49 	bl	8003600 <__NVIC_SetPriorityGrouping>
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_SetPriority>:
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	f7ff ff5e 	bl	8003648 <__NVIC_GetPriorityGrouping>
 800378c:	6178      	str	r0, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ff90 	bl	80036b8 <NVIC_EncodePriority>
 8003798:	4602      	mov	r2, r0
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff5f 	bl	8003664 <__NVIC_SetPriority>
 80037a6:	bf00      	nop
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SYSTICK_Config>:
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ffb0 	bl	800371c <SysTick_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_CRC_Init>:
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_CRC_Init+0x12>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e00e      	b.n	80037f6 <HAL_CRC_Init+0x30>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	795b      	ldrb	r3, [r3, #5]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_CRC_Init+0x28>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	711a      	strb	r2, [r3, #4]
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fb29 	bl	8002e40 <HAL_CRC_MspInit>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	715a      	strb	r2, [r3, #5]
 80037f4:	2300      	movs	r3, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_GPIO_Init>:
 8003800:	b480      	push	{r7}
 8003802:	b08b      	sub	sp, #44	@ 0x2c
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	e169      	b.n	8003ae8 <HAL_GPIO_Init+0x2e8>
 8003814:	2201      	movs	r2, #1
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	f040 8158 	bne.w	8003ae2 <HAL_GPIO_Init+0x2e2>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a9a      	ldr	r2, [pc, #616]	@ (8003aa0 <HAL_GPIO_Init+0x2a0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d05e      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 800383c:	4a98      	ldr	r2, [pc, #608]	@ (8003aa0 <HAL_GPIO_Init+0x2a0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d875      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 8003842:	4a98      	ldr	r2, [pc, #608]	@ (8003aa4 <HAL_GPIO_Init+0x2a4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d058      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 8003848:	4a96      	ldr	r2, [pc, #600]	@ (8003aa4 <HAL_GPIO_Init+0x2a4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d86f      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 800384e:	4a96      	ldr	r2, [pc, #600]	@ (8003aa8 <HAL_GPIO_Init+0x2a8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d052      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 8003854:	4a94      	ldr	r2, [pc, #592]	@ (8003aa8 <HAL_GPIO_Init+0x2a8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d869      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 800385a:	4a94      	ldr	r2, [pc, #592]	@ (8003aac <HAL_GPIO_Init+0x2ac>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d04c      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 8003860:	4a92      	ldr	r2, [pc, #584]	@ (8003aac <HAL_GPIO_Init+0x2ac>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d863      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 8003866:	4a92      	ldr	r2, [pc, #584]	@ (8003ab0 <HAL_GPIO_Init+0x2b0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d046      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 800386c:	4a90      	ldr	r2, [pc, #576]	@ (8003ab0 <HAL_GPIO_Init+0x2b0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d85d      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 8003872:	2b12      	cmp	r3, #18
 8003874:	d82a      	bhi.n	80038cc <HAL_GPIO_Init+0xcc>
 8003876:	2b12      	cmp	r3, #18
 8003878:	d859      	bhi.n	800392e <HAL_GPIO_Init+0x12e>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <HAL_GPIO_Init+0x80>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038fb 	.word	0x080038fb
 8003884:	080038d5 	.word	0x080038d5
 8003888:	080038e7 	.word	0x080038e7
 800388c:	08003929 	.word	0x08003929
 8003890:	0800392f 	.word	0x0800392f
 8003894:	0800392f 	.word	0x0800392f
 8003898:	0800392f 	.word	0x0800392f
 800389c:	0800392f 	.word	0x0800392f
 80038a0:	0800392f 	.word	0x0800392f
 80038a4:	0800392f 	.word	0x0800392f
 80038a8:	0800392f 	.word	0x0800392f
 80038ac:	0800392f 	.word	0x0800392f
 80038b0:	0800392f 	.word	0x0800392f
 80038b4:	0800392f 	.word	0x0800392f
 80038b8:	0800392f 	.word	0x0800392f
 80038bc:	0800392f 	.word	0x0800392f
 80038c0:	0800392f 	.word	0x0800392f
 80038c4:	080038dd 	.word	0x080038dd
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	4a79      	ldr	r2, [pc, #484]	@ (8003ab4 <HAL_GPIO_Init+0x2b4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0xfa>
 80038d2:	e02c      	b.n	800392e <HAL_GPIO_Init+0x12e>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	e029      	b.n	8003930 <HAL_GPIO_Init+0x130>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	3304      	adds	r3, #4
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	e024      	b.n	8003930 <HAL_GPIO_Init+0x130>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	3308      	adds	r3, #8
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	e01f      	b.n	8003930 <HAL_GPIO_Init+0x130>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	330c      	adds	r3, #12
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	e01a      	b.n	8003930 <HAL_GPIO_Init+0x130>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_GPIO_Init+0x108>
 8003902:	2304      	movs	r3, #4
 8003904:	623b      	str	r3, [r7, #32]
 8003906:	e013      	b.n	8003930 <HAL_GPIO_Init+0x130>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_GPIO_Init+0x11c>
 8003910:	2308      	movs	r3, #8
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	e009      	b.n	8003930 <HAL_GPIO_Init+0x130>
 800391c:	2308      	movs	r3, #8
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	615a      	str	r2, [r3, #20]
 8003926:	e003      	b.n	8003930 <HAL_GPIO_Init+0x130>
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	e000      	b.n	8003930 <HAL_GPIO_Init+0x130>
 800392e:	bf00      	nop
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2bff      	cmp	r3, #255	@ 0xff
 8003934:	d801      	bhi.n	800393a <HAL_GPIO_Init+0x13a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	e001      	b.n	800393e <HAL_GPIO_Init+0x13e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2bff      	cmp	r3, #255	@ 0xff
 8003944:	d802      	bhi.n	800394c <HAL_GPIO_Init+0x14c>
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	e002      	b.n	8003952 <HAL_GPIO_Init+0x152>
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	3b08      	subs	r3, #8
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	210f      	movs	r1, #15
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	6a39      	ldr	r1, [r7, #32]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	431a      	orrs	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80b1 	beq.w	8003ae2 <HAL_GPIO_Init+0x2e2>
 8003980:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <HAL_GPIO_Init+0x2b8>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4a48      	ldr	r2, [pc, #288]	@ (8003abc <HAL_GPIO_Init+0x2bc>)
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	3302      	adds	r3, #2
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a40      	ldr	r2, [pc, #256]	@ (8003ac0 <HAL_GPIO_Init+0x2c0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_GPIO_Init+0x1ec>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac4 <HAL_GPIO_Init+0x2c4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00d      	beq.n	80039e8 <HAL_GPIO_Init+0x1e8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3e      	ldr	r2, [pc, #248]	@ (8003ac8 <HAL_GPIO_Init+0x2c8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <HAL_GPIO_Init+0x1e4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3d      	ldr	r2, [pc, #244]	@ (8003acc <HAL_GPIO_Init+0x2cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_GPIO_Init+0x1e0>
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039e0:	2304      	movs	r3, #4
 80039e2:	e004      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e002      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_GPIO_Init+0x1ee>
 80039ec:	2300      	movs	r3, #0
 80039ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f0:	f002 0203 	and.w	r2, r2, #3
 80039f4:	0092      	lsls	r2, r2, #2
 80039f6:	4093      	lsls	r3, r2
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	492f      	ldr	r1, [pc, #188]	@ (8003abc <HAL_GPIO_Init+0x2bc>)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <HAL_GPIO_Init+0x226>
 8003a18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	492c      	ldr	r1, [pc, #176]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]
 8003a24:	e006      	b.n	8003a34 <HAL_GPIO_Init+0x234>
 8003a26:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	4928      	ldr	r1, [pc, #160]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <HAL_GPIO_Init+0x24e>
 8003a40:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	4922      	ldr	r1, [pc, #136]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60cb      	str	r3, [r1, #12]
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x25c>
 8003a4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	491e      	ldr	r1, [pc, #120]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60cb      	str	r3, [r1, #12]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_GPIO_Init+0x276>
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	4918      	ldr	r1, [pc, #96]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x284>
 8003a76:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	4914      	ldr	r1, [pc, #80]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d021      	beq.n	8003ad4 <HAL_GPIO_Init+0x2d4>
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_GPIO_Init+0x2d0>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e021      	b.n	8003ae2 <HAL_GPIO_Init+0x2e2>
 8003a9e:	bf00      	nop
 8003aa0:	10320000 	.word	0x10320000
 8003aa4:	10310000 	.word	0x10310000
 8003aa8:	10220000 	.word	0x10220000
 8003aac:	10210000 	.word	0x10210000
 8003ab0:	10120000 	.word	0x10120000
 8003ab4:	10110000 	.word	0x10110000
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40010800 	.word	0x40010800
 8003ac4:	40010c00 	.word	0x40010c00
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40011400 	.word	0x40011400
 8003ad0:	40010400 	.word	0x40010400
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	4909      	ldr	r1, [pc, #36]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	fa22 f303 	lsr.w	r3, r2, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f47f ae8e 	bne.w	8003814 <HAL_GPIO_Init+0x14>
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	372c      	adds	r7, #44	@ 0x2c
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_GPIO_WritePin>:
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]
 8003b24:	e003      	b.n	8003b2e <HAL_GPIO_WritePin+0x26>
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	041a      	lsls	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <HAL_RCC_OscConfig>:
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x12>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e272      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8087 	beq.w	8003c66 <HAL_RCC_OscConfig+0x12e>
 8003b58:	4b92      	ldr	r3, [pc, #584]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d00c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x46>
 8003b64:	4b8f      	ldr	r3, [pc, #572]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d112      	bne.n	8003b96 <HAL_RCC_OscConfig+0x5e>
 8003b70:	4b8c      	ldr	r3, [pc, #560]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b7c:	d10b      	bne.n	8003b96 <HAL_RCC_OscConfig+0x5e>
 8003b7e:	4b89      	ldr	r3, [pc, #548]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d06c      	beq.n	8003c64 <HAL_RCC_OscConfig+0x12c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d168      	bne.n	8003c64 <HAL_RCC_OscConfig+0x12c>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e24c      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x76>
 8003ba0:	4b80      	ldr	r3, [pc, #512]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a7f      	ldr	r2, [pc, #508]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e02e      	b.n	8003c0c <HAL_RCC_OscConfig+0xd4>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x98>
 8003bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7a      	ldr	r2, [pc, #488]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b78      	ldr	r3, [pc, #480]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a77      	ldr	r2, [pc, #476]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e01d      	b.n	8003c0c <HAL_RCC_OscConfig+0xd4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xbc>
 8003bda:	4b72      	ldr	r3, [pc, #456]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a71      	ldr	r2, [pc, #452]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xd4>
 8003bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6a      	ldr	r2, [pc, #424]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b68      	ldr	r3, [pc, #416]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a67      	ldr	r2, [pc, #412]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_OscConfig+0x104>
 8003c14:	f7ff fab4 	bl	8003180 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xf6>
 8003c1c:	f7ff fab0 	bl	8003180 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	@ 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xf6>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e200      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0xe4>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x12e>
 8003c3c:	f7ff faa0 	bl	8003180 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x11e>
 8003c44:	f7ff fa9c 	bl	8003180 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	@ 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x11e>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1ec      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003c56:	4b53      	ldr	r3, [pc, #332]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x10c>
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x12e>
 8003c64:	bf00      	nop
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d063      	beq.n	8003d3a <HAL_RCC_OscConfig+0x202>
 8003c72:	4b4c      	ldr	r3, [pc, #304]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x15e>
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d11c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x18c>
 8003c8a:	4b46      	ldr	r3, [pc, #280]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x18c>
 8003c96:	4b43      	ldr	r3, [pc, #268]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x176>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x176>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1c0      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003cae:	4b3d      	ldr	r3, [pc, #244]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4939      	ldr	r1, [pc, #228]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
 8003cc2:	e03a      	b.n	8003d3a <HAL_RCC_OscConfig+0x202>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1d6>
 8003ccc:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_RCC_OscConfig+0x270>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f7ff fa55 	bl	8003180 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x1b4>
 8003cda:	f7ff fa51 	bl	8003180 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x1b4>
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1a1      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003cec:	4b2d      	ldr	r3, [pc, #180]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x1a2>
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4927      	ldr	r1, [pc, #156]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e015      	b.n	8003d3a <HAL_RCC_OscConfig+0x202>
 8003d0e:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <HAL_RCC_OscConfig+0x270>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f7ff fa34 	bl	8003180 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1f6>
 8003d1c:	f7ff fa30 	bl	8003180 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1f6>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e180      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x1e4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d03a      	beq.n	8003dbc <HAL_RCC_OscConfig+0x284>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d019      	beq.n	8003d82 <HAL_RCC_OscConfig+0x24a>
 8003d4e:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <HAL_RCC_OscConfig+0x274>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f7ff fa14 	bl	8003180 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x236>
 8003d5c:	f7ff fa10 	bl	8003180 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x236>
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e160      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x224>
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f000 fa9e 	bl	80042bc <RCC_Delay>
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x284>
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <HAL_RCC_OscConfig+0x274>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f7ff f9fa 	bl	8003180 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCC_OscConfig+0x278>
 8003d90:	f7ff f9f6 	bl	8003180 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d908      	bls.n	8003db0 <HAL_RCC_OscConfig+0x278>
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e146      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	42420000 	.word	0x42420000
 8003dac:	42420480 	.word	0x42420480
 8003db0:	4b92      	ldr	r3, [pc, #584]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e9      	bne.n	8003d90 <HAL_RCC_OscConfig+0x258>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a6 	beq.w	8003f16 <HAL_RCC_OscConfig+0x3de>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
 8003dce:	4b8b      	ldr	r3, [pc, #556]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCC_OscConfig+0x2be>
 8003dda:	4b88      	ldr	r3, [pc, #544]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4a87      	ldr	r2, [pc, #540]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	61d3      	str	r3, [r2, #28]
 8003de6:	4b85      	ldr	r3, [pc, #532]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
 8003df6:	4b82      	ldr	r3, [pc, #520]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d118      	bne.n	8003e34 <HAL_RCC_OscConfig+0x2fc>
 8003e02:	4b7f      	ldr	r3, [pc, #508]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7e      	ldr	r2, [pc, #504]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	f7ff f9b7 	bl	8003180 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x2f0>
 8003e16:	f7ff f9b3 	bl	8003180 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	@ 0x64
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x2f0>
 8003e24:	2303      	movs	r3, #3
 8003e26:	e103      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003e28:	4b75      	ldr	r3, [pc, #468]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2de>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x312>
 8003e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a6e      	ldr	r2, [pc, #440]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	e02d      	b.n	8003ea6 <HAL_RCC_OscConfig+0x36e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x334>
 8003e52:	4b6a      	ldr	r3, [pc, #424]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4a69      	ldr	r2, [pc, #420]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6213      	str	r3, [r2, #32]
 8003e5e:	4b67      	ldr	r3, [pc, #412]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	4a66      	ldr	r2, [pc, #408]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	6213      	str	r3, [r2, #32]
 8003e6a:	e01c      	b.n	8003ea6 <HAL_RCC_OscConfig+0x36e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d10c      	bne.n	8003e8e <HAL_RCC_OscConfig+0x356>
 8003e74:	4b61      	ldr	r3, [pc, #388]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4a60      	ldr	r2, [pc, #384]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e7a:	f043 0304 	orr.w	r3, r3, #4
 8003e7e:	6213      	str	r3, [r2, #32]
 8003e80:	4b5e      	ldr	r3, [pc, #376]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4a5d      	ldr	r2, [pc, #372]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6213      	str	r3, [r2, #32]
 8003e8c:	e00b      	b.n	8003ea6 <HAL_RCC_OscConfig+0x36e>
 8003e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4a5a      	ldr	r2, [pc, #360]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6213      	str	r3, [r2, #32]
 8003e9a:	4b58      	ldr	r3, [pc, #352]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	4a57      	ldr	r2, [pc, #348]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	6213      	str	r3, [r2, #32]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d015      	beq.n	8003eda <HAL_RCC_OscConfig+0x3a2>
 8003eae:	f7ff f967 	bl	8003180 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x394>
 8003eb6:	f7ff f963 	bl	8003180 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x394>
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e0b1      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ee      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x37e>
 8003ed8:	e014      	b.n	8003f04 <HAL_RCC_OscConfig+0x3cc>
 8003eda:	f7ff f951 	bl	8003180 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
 8003ee2:	f7ff f94d 	bl	8003180 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e09b      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003ef8:	4b40      	ldr	r3, [pc, #256]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ee      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3aa>
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3de>
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	61d3      	str	r3, [r2, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8087 	beq.w	800402e <HAL_RCC_OscConfig+0x4f6>
 8003f20:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d061      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4b8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d146      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x48a>
 8003f34:	4b33      	ldr	r3, [pc, #204]	@ (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f7ff f921 	bl	8003180 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x41c>
 8003f42:	f7ff f91d 	bl	8003180 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x41c>
 8003f50:	2303      	movs	r3, #3
 8003f52:	e06d      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003f54:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x40a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f68:	d108      	bne.n	8003f7c <HAL_RCC_OscConfig+0x444>
 8003f6a:	4b24      	ldr	r3, [pc, #144]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4921      	ldr	r1, [pc, #132]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a19      	ldr	r1, [r3, #32]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	491b      	ldr	r1, [pc, #108]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f7ff f8f1 	bl	8003180 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
 8003fa2:	f7ff f8ed 	bl	8003180 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e03d      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x46a>
 8003fc0:	e035      	b.n	800402e <HAL_RCC_OscConfig+0x4f6>
 8003fc2:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f7ff f8da 	bl	8003180 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4aa>
 8003fd0:	f7ff f8d6 	bl	8003180 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x4aa>
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e026      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x498>
 8003fee:	e01e      	b.n	800402e <HAL_RCC_OscConfig+0x4f6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_OscConfig+0x4d0>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e019      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
 8004004:	42420060 	.word	0x42420060
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_OscConfig+0x500>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	429a      	cmp	r2, r3
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x4f2>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x4f6>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 800402e:	2300      	movs	r3, #0
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_RCC_ClockConfig>:
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x14>
 800404c:	2301      	movs	r3, #1
 800404e:	e0d0      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
 8004050:	4b6a      	ldr	r3, [pc, #424]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d910      	bls.n	8004080 <HAL_RCC_ClockConfig+0x44>
 800405e:	4b67      	ldr	r3, [pc, #412]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 0207 	bic.w	r2, r3, #7
 8004066:	4965      	ldr	r1, [pc, #404]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
 800406e:	4b63      	ldr	r3, [pc, #396]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x44>
 800407c:	2301      	movs	r3, #1
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_ClockConfig+0x92>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x68>
 8004098:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a58      	ldr	r2, [pc, #352]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040a2:	6053      	str	r3, [r2, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x80>
 80040b0:	4b53      	ldr	r3, [pc, #332]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a52      	ldr	r2, [pc, #328]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040ba:	6053      	str	r3, [r2, #4]
 80040bc:	4b50      	ldr	r3, [pc, #320]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	494d      	ldr	r1, [pc, #308]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d040      	beq.n	800415c <HAL_RCC_ClockConfig+0x120>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xb6>
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d115      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xce>
 80040fa:	4b41      	ldr	r3, [pc, #260]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
 8004106:	2301      	movs	r3, #1
 8004108:	e073      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
 800410a:	4b3d      	ldr	r3, [pc, #244]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
 8004116:	2301      	movs	r3, #1
 8004118:	e06b      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4936      	ldr	r1, [pc, #216]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	f7ff f828 	bl	8003180 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	e00a      	b.n	800414a <HAL_RCC_ClockConfig+0x10e>
 8004134:	f7ff f824 	bl	8003180 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_ClockConfig+0x10e>
 8004146:	2303      	movs	r3, #3
 8004148:	e053      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
 800414a:	4b2d      	ldr	r3, [pc, #180]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 020c 	and.w	r2, r3, #12
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	429a      	cmp	r2, r3
 800415a:	d1eb      	bne.n	8004134 <HAL_RCC_ClockConfig+0xf8>
 800415c:	4b27      	ldr	r3, [pc, #156]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d210      	bcs.n	800418c <HAL_RCC_ClockConfig+0x150>
 800416a:	4b24      	ldr	r3, [pc, #144]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 0207 	bic.w	r2, r3, #7
 8004172:	4922      	ldr	r1, [pc, #136]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x150>
 8004188:	2301      	movs	r3, #1
 800418a:	e032      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x16e>
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4916      	ldr	r1, [pc, #88]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x18e>
 80041b6:	4b12      	ldr	r3, [pc, #72]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	490e      	ldr	r1, [pc, #56]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490a      	ldr	r1, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x1c8>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <HAL_RCC_ClockConfig+0x1cc>)
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_ClockConfig+0x1d0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe ff86 	bl	80030fc <HAL_InitTick>
 80041f0:	2300      	movs	r3, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40022000 	.word	0x40022000
 8004200:	40021000 	.word	0x40021000
 8004204:	0800d660 	.word	0x0800d660
 8004208:	20000004 	.word	0x20000004
 800420c:	20000008 	.word	0x20000008

08004210 <HAL_RCC_GetSysClockFreq>:
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b04      	cmp	r3, #4
 8004238:	d002      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x30>
 800423a:	2b08      	cmp	r3, #8
 800423c:	d003      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x36>
 800423e:	e027      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x80>
 8004240:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e027      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x86>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	0c9b      	lsrs	r3, r3, #18
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d010      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x70>
 800425e:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0c5b      	lsrs	r3, r3, #17
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	4a11      	ldr	r2, [pc, #68]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004272:	fb03 f202 	mul.w	r2, r3, r2
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e004      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x7a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	e002      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x86>
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	bf00      	nop
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	0800d670 	.word	0x0800d670
 80042b0:	0800d680 	.word	0x0800d680
 80042b4:	003d0900 	.word	0x003d0900
 80042b8:	007a1200 	.word	0x007a1200

080042bc <RCC_Delay>:
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <RCC_Delay+0x34>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0a      	ldr	r2, [pc, #40]	@ (80042f4 <RCC_Delay+0x38>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0a5b      	lsrs	r3, r3, #9
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	bf00      	nop
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	60fa      	str	r2, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f9      	bne.n	80042d8 <RCC_Delay+0x1c>
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	20000004 	.word	0x20000004
 80042f4:	10624dd3 	.word	0x10624dd3

080042f8 <HAL_RCCEx_PeriphCLKConfig>:
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d07d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]
 8004318:	4b4f      	ldr	r3, [pc, #316]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004324:	4b4c      	ldr	r3, [pc, #304]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432e:	61d3      	str	r3, [r2, #28]
 8004330:	4b49      	ldr	r3, [pc, #292]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
 8004340:	4b46      	ldr	r3, [pc, #280]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d118      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x86>
 800434c:	4b43      	ldr	r3, [pc, #268]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a42      	ldr	r2, [pc, #264]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	f7fe ff12 	bl	8003180 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004360:	f7fe ff0e 	bl	8003180 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800436e:	2303      	movs	r3, #3
 8004370:	e06d      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004372:	4b3a      	ldr	r3, [pc, #232]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800437e:	4b36      	ldr	r3, [pc, #216]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d027      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800439c:	4b2e      	ldr	r3, [pc, #184]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6213      	str	r3, [r2, #32]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d014      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043c2:	f7fe fedd 	bl	8003180 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]
 80043c8:	e00a      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80043ca:	f7fe fed9 	bl	8003180 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80043dc:	2303      	movs	r3, #3
 80043de:	e036      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x156>
 80043e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ee      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80043ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4917      	ldr	r1, [pc, #92]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	620b      	str	r3, [r1, #32]
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004404:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4a13      	ldr	r2, [pc, #76]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440e:	61d3      	str	r3, [r2, #28]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800441c:	4b0e      	ldr	r3, [pc, #56]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	490b      	ldr	r1, [pc, #44]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800443a:	4b07      	ldr	r3, [pc, #28]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4904      	ldr	r1, [pc, #16]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
 800444c:	2300      	movs	r3, #0
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	40007000 	.word	0x40007000
 8004460:	42420440 	.word	0x42420440

08004464 <HAL_SPI_Init>:
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_SPI_Init+0x12>
 8004472:	2301      	movs	r3, #1
 8004474:	e076      	b.n	8004564 <HAL_SPI_Init+0x100>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <HAL_SPI_Init+0x2c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004486:	d009      	beq.n	800449c <HAL_SPI_Init+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	61da      	str	r2, [r3, #28]
 800448e:	e005      	b.n	800449c <HAL_SPI_Init+0x38>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	615a      	str	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_SPI_Init+0x58>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fe fcd8 	bl	8002e6c <HAL_SPI_MspInit>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004520:	ea42 0103 	orr.w	r1, r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	0c1a      	lsrs	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f002 0204 	and.w	r2, r2, #4
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004552:	61da      	str	r2, [r3, #28]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	@ 0x54
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004562:	2300      	movs	r3, #0
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_SPI_Transmit>:
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	80fb      	strh	r3, [r7, #6]
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_SPI_Transmit+0x22>
 800458a:	2302      	movs	r3, #2
 800458c:	e12d      	b.n	80047ea <HAL_SPI_Transmit+0x27e>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004596:	f7fe fdf3 	bl	8003180 <HAL_GetTick>
 800459a:	61b8      	str	r0, [r7, #24]
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	82fb      	strh	r3, [r7, #22]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d002      	beq.n	80045b2 <HAL_SPI_Transmit+0x46>
 80045ac:	2302      	movs	r3, #2
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e116      	b.n	80047e0 <HAL_SPI_Transmit+0x274>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_Transmit+0x52>
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <HAL_SPI_Transmit+0x58>
 80045be:	2301      	movs	r3, #1
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e10d      	b.n	80047e0 <HAL_SPI_Transmit+0x274>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2203      	movs	r2, #3
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	869a      	strh	r2, [r3, #52]	@ 0x34
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	@ 0x40
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800460a:	d10f      	bne.n	800462c <HAL_SPI_Transmit+0xc0>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004636:	2b40      	cmp	r3, #64	@ 0x40
 8004638:	d007      	beq.n	800464a <HAL_SPI_Transmit+0xde>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004652:	d14f      	bne.n	80046f4 <HAL_SPI_Transmit+0x188>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_Transmit+0xf6>
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d142      	bne.n	80046e8 <HAL_SPI_Transmit+0x17c>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	1c9a      	adds	r2, r3, #2
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004686:	e02f      	b.n	80046e8 <HAL_SPI_Transmit+0x17c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b02      	cmp	r3, #2
 8004694:	d112      	bne.n	80046bc <HAL_SPI_Transmit+0x150>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046ba:	e015      	b.n	80046e8 <HAL_SPI_Transmit+0x17c>
 80046bc:	f7fe fd60 	bl	8003180 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d803      	bhi.n	80046d4 <HAL_SPI_Transmit+0x168>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Transmit+0x16e>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_SPI_Transmit+0x17c>
 80046da:	2303      	movs	r3, #3
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80046e6:	e07b      	b.n	80047e0 <HAL_SPI_Transmit+0x274>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ca      	bne.n	8004688 <HAL_SPI_Transmit+0x11c>
 80046f2:	e050      	b.n	8004796 <HAL_SPI_Transmit+0x22a>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_SPI_Transmit+0x196>
 80046fc:	8afb      	ldrh	r3, [r7, #22]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d144      	bne.n	800478c <HAL_SPI_Transmit+0x220>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	@ 0x30
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004728:	e030      	b.n	800478c <HAL_SPI_Transmit+0x220>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d113      	bne.n	8004760 <HAL_SPI_Transmit+0x1f4>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800475e:	e015      	b.n	800478c <HAL_SPI_Transmit+0x220>
 8004760:	f7fe fd0e 	bl	8003180 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d803      	bhi.n	8004778 <HAL_SPI_Transmit+0x20c>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d102      	bne.n	800477e <HAL_SPI_Transmit+0x212>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_SPI_Transmit+0x220>
 800477e:	2303      	movs	r3, #3
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800478a:	e029      	b.n	80047e0 <HAL_SPI_Transmit+0x274>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1c9      	bne.n	800472a <HAL_SPI_Transmit+0x1be>
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fa6e 	bl	8004c7c <SPI_EndRxTxTransaction>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_SPI_Transmit+0x240>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <HAL_SPI_Transmit+0x25e>
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_SPI_Transmit+0x26c>
 80047d2:	2301      	movs	r3, #1
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e003      	b.n	80047e0 <HAL_SPI_Transmit+0x274>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80047e8:	7ffb      	ldrb	r3, [r7, #31]
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_SPI_TransmitReceive>:
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b08c      	sub	sp, #48	@ 0x30
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	807b      	strh	r3, [r7, #2]
 8004800:	2301      	movs	r3, #1
 8004802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004804:	2300      	movs	r3, #0
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_SPI_TransmitReceive+0x26>
 8004814:	2302      	movs	r3, #2
 8004816:	e198      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x358>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004820:	f7fe fcae 	bl	8003180 <HAL_GetTick>
 8004824:	6278      	str	r0, [r7, #36]	@ 0x24
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800482c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	837b      	strh	r3, [r7, #26]
 800483a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800483e:	2b01      	cmp	r3, #1
 8004840:	d00f      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x70>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004848:	d107      	bne.n	800485a <HAL_SPI_TransmitReceive+0x68>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <HAL_SPI_TransmitReceive+0x68>
 8004852:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004856:	2b04      	cmp	r3, #4
 8004858:	d003      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x70>
 800485a:	2302      	movs	r3, #2
 800485c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004860:	e16d      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x34c>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x82>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x82>
 800486e:	887b      	ldrh	r3, [r7, #2]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <HAL_SPI_TransmitReceive+0x8a>
 8004874:	2301      	movs	r3, #1
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487a:	e160      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x34c>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b04      	cmp	r3, #4
 8004886:	d003      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x9e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2205      	movs	r2, #5
 800488c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	655a      	str	r2, [r3, #84]	@ 0x54
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	@ 0x38
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	887a      	ldrh	r2, [r7, #2]
 80048a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	887a      	ldrh	r2, [r7, #2]
 80048b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	869a      	strh	r2, [r3, #52]	@ 0x34
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d0:	2b40      	cmp	r3, #64	@ 0x40
 80048d2:	d007      	beq.n	80048e4 <HAL_SPI_TransmitReceive+0xf2>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ec:	d17c      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x1f6>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x10a>
 80048f6:	8b7b      	ldrh	r3, [r7, #26]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d16a      	bne.n	80049d2 <HAL_SPI_TransmitReceive+0x1e0>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	881a      	ldrh	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60da      	str	r2, [r3, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	1c9a      	adds	r2, r3, #2
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	631a      	str	r2, [r3, #48]	@ 0x30
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004920:	e057      	b.n	80049d2 <HAL_SPI_TransmitReceive+0x1e0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b02      	cmp	r3, #2
 800492e:	d11b      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x176>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x176>
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d113      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x176>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004964:	2300      	movs	r3, #0
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b01      	cmp	r3, #1
 8004974:	d119      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x1b8>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d014      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x1b8>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	b292      	uxth	r2, r2
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049a6:	2301      	movs	r3, #1
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049aa:	f7fe fbe9 	bl	8003180 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d80b      	bhi.n	80049d2 <HAL_SPI_TransmitReceive+0x1e0>
 80049ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d007      	beq.n	80049d2 <HAL_SPI_TransmitReceive+0x1e0>
 80049c2:	2303      	movs	r3, #3
 80049c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80049d0:	e0b5      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x34c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1a2      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x130>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d19d      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x130>
 80049e6:	e080      	b.n	8004aea <HAL_SPI_TransmitReceive+0x2f8>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x204>
 80049f0:	8b7b      	ldrh	r3, [r7, #26]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d16f      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x2e4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a1c:	e05b      	b.n	8004ad6 <HAL_SPI_TransmitReceive+0x2e4>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d11c      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x274>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x274>
 8004a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d114      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x274>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a62:	2300      	movs	r3, #0
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d119      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x2b6>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d014      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x2b6>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa8:	f7fe fb6a 	bl	8003180 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d803      	bhi.n	8004ac0 <HAL_SPI_TransmitReceive+0x2ce>
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d102      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x2d4>
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x2e4>
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004ad4:	e033      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x34c>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d19e      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x22c>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d199      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x22c>
 8004aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8c4 	bl	8004c7c <SPI_EndRxTxTransaction>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x316>
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b06:	e01a      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x34c>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x334>
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x344>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b34:	e003      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x34c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004b46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3730      	adds	r7, #48	@ 0x30
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SPI_GetState>:
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <SPI_WaitFlagStateUntilTimeout>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
 8004b7c:	f7fe fb00 	bl	8003180 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	f7fe faf8 	bl	8003180 <HAL_GetTick>
 8004b90:	61b8      	str	r0, [r7, #24]
 8004b92:	4b39      	ldr	r3, [pc, #228]	@ (8004c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	015b      	lsls	r3, r3, #5
 8004b98:	0d1b      	lsrs	r3, r3, #20
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e054      	b.n	8004c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d050      	beq.n	8004c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004bac:	f7fe fae8 	bl	8003180 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d902      	bls.n	8004bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d13d      	bne.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bda:	d111      	bne.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be4:	d004      	beq.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bee:	d107      	bne.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c08:	d10f      	bne.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e017      	b.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0x102>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d19b      	bne.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000004 	.word	0x20000004

08004c7c <SPI_EndRxTxTransaction>:
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2180      	movs	r1, #128	@ 0x80
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7ff ff6a 	bl	8004b6c <SPI_WaitFlagStateUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <SPI_EndRxTxTransaction+0x32>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	655a      	str	r2, [r3, #84]	@ 0x54
 8004caa:	2303      	movs	r3, #3
 8004cac:	e000      	b.n	8004cb0 <SPI_EndRxTxTransaction+0x34>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_Base_Init>:
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_Base_Init+0x12>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e041      	b.n	8004d4e <HAL_TIM_Base_Init+0x96>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_TIM_Base_Init+0x2c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe f8fe 	bl	8002ee0 <HAL_TIM_Base_MspInit>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 fa10 	bl	800511c <TIM_Base_SetConfig>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_PWM_Init>:
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_TIM_PWM_Init+0x12>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e041      	b.n	8004dec <HAL_TIM_PWM_Init+0x96>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_TIM_PWM_Init+0x2c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f839 	bl	8004df4 <HAL_TIM_PWM_MspInit>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 f9c1 	bl	800511c <TIM_Base_SetConfig>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004dea:	2300      	movs	r3, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_PWM_MspInit>:
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_TIM_PWM_ConfigChannel>:
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0ae      	b.n	8004f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b0c      	cmp	r3, #12
 8004e32:	f200 809f 	bhi.w	8004f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004f75 	.word	0x08004f75
 8004e44:	08004f75 	.word	0x08004f75
 8004e48:	08004f75 	.word	0x08004f75
 8004e4c:	08004eb1 	.word	0x08004eb1
 8004e50:	08004f75 	.word	0x08004f75
 8004e54:	08004f75 	.word	0x08004f75
 8004e58:	08004f75 	.word	0x08004f75
 8004e5c:	08004ef3 	.word	0x08004ef3
 8004e60:	08004f75 	.word	0x08004f75
 8004e64:	08004f75 	.word	0x08004f75
 8004e68:	08004f75 	.word	0x08004f75
 8004e6c:	08004f33 	.word	0x08004f33
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f9b2 	bl	80051e0 <TIM_OC1_SetConfig>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0208 	orr.w	r2, r2, #8
 8004e8a:	619a      	str	r2, [r3, #24]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0204 	bic.w	r2, r2, #4
 8004e9a:	619a      	str	r2, [r3, #24]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6999      	ldr	r1, [r3, #24]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	619a      	str	r2, [r3, #24]
 8004eae:	e064      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f9f8 	bl	80052ac <TIM_OC2_SetConfig>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eca:	619a      	str	r2, [r3, #24]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eda:	619a      	str	r2, [r3, #24]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6999      	ldr	r1, [r3, #24]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	021a      	lsls	r2, r3, #8
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	619a      	str	r2, [r3, #24]
 8004ef0:	e043      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fa41 	bl	8005380 <TIM_OC3_SetConfig>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0208 	orr.w	r2, r2, #8
 8004f0c:	61da      	str	r2, [r3, #28]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0204 	bic.w	r2, r2, #4
 8004f1c:	61da      	str	r2, [r3, #28]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69d9      	ldr	r1, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	61da      	str	r2, [r3, #28]
 8004f30:	e023      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fa8b 	bl	8005454 <TIM_OC4_SetConfig>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f4c:	61da      	str	r2, [r3, #28]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f5c:	61da      	str	r2, [r3, #28]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69d9      	ldr	r1, [r3, #28]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	021a      	lsls	r2, r3, #8
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	61da      	str	r2, [r3, #28]
 8004f72:	e002      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004f74:	2301      	movs	r3, #1
 8004f76:	75fb      	strb	r3, [r7, #23]
 8004f78:	bf00      	nop
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_TIM_ConfigClockSource>:
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0b4      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x186>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe0:	d03e      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0xd4>
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe6:	f200 8087 	bhi.w	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	f000 8086 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x172>
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff6:	d87f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b70      	cmp	r3, #112	@ 0x70
 8004ffa:	d01a      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0xa6>
 8004ffc:	2b70      	cmp	r3, #112	@ 0x70
 8004ffe:	d87b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b60      	cmp	r3, #96	@ 0x60
 8005002:	d050      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005004:	2b60      	cmp	r3, #96	@ 0x60
 8005006:	d877      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b50      	cmp	r3, #80	@ 0x50
 800500a:	d03c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0xfa>
 800500c:	2b50      	cmp	r3, #80	@ 0x50
 800500e:	d873      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b40      	cmp	r3, #64	@ 0x40
 8005012:	d058      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005014:	2b40      	cmp	r3, #64	@ 0x40
 8005016:	d86f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b30      	cmp	r3, #48	@ 0x30
 800501a:	d064      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 800501c:	2b30      	cmp	r3, #48	@ 0x30
 800501e:	d86b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d060      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d867      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05c      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 800502c:	2b10      	cmp	r3, #16
 800502e:	d05a      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005030:	e062      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6899      	ldr	r1, [r3, #8]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f000 facc 	bl	80055de <TIM_ETR_SetConfig>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	609a      	str	r2, [r3, #8]
 800505e:	e04f      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f000 fab5 	bl	80055de <TIM_ETR_SetConfig>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	e03c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 fa2c 	bl	80054f0 <TIM_TI1_ConfigInputStage>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2150      	movs	r1, #80	@ 0x50
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fa83 	bl	80055aa <TIM_ITRx_SetConfig>
 80050a4:	e02c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 fa4a 	bl	800554c <TIM_TI2_ConfigInputStage>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2160      	movs	r1, #96	@ 0x60
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa73 	bl	80055aa <TIM_ITRx_SetConfig>
 80050c4:	e01c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 fa0c 	bl	80054f0 <TIM_TI1_ConfigInputStage>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2140      	movs	r1, #64	@ 0x40
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fa63 	bl	80055aa <TIM_ITRx_SetConfig>
 80050e4:	e00c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 fa5a 	bl	80055aa <TIM_ITRx_SetConfig>
 80050f6:	e003      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e000      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
 80050fe:	bf00      	nop
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <TIM_Base_SetConfig>:
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a29      	ldr	r2, [pc, #164]	@ (80051d4 <TIM_Base_SetConfig+0xb8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x30>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x30>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a26      	ldr	r2, [pc, #152]	@ (80051d8 <TIM_Base_SetConfig+0xbc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x30>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a25      	ldr	r2, [pc, #148]	@ (80051dc <TIM_Base_SetConfig+0xc0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x42>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1c      	ldr	r2, [pc, #112]	@ (80051d4 <TIM_Base_SetConfig+0xb8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0x62>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0x62>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <TIM_Base_SetConfig+0xbc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0x62>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <TIM_Base_SetConfig+0xc0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0x74>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a07      	ldr	r2, [pc, #28]	@ (80051d4 <TIM_Base_SetConfig+0xb8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d103      	bne.n	80051c4 <TIM_Base_SetConfig+0xa8>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	615a      	str	r2, [r3, #20]
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800

080051e0 <TIM_OC1_SetConfig>:
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f023 0201 	bic.w	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 0302 	bic.w	r3, r3, #2
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1c      	ldr	r2, [pc, #112]	@ (80052a8 <TIM_OC1_SetConfig+0xc8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10c      	bne.n	8005256 <TIM_OC1_SetConfig+0x76>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0308 	bic.w	r3, r3, #8
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <TIM_OC1_SetConfig+0xc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d111      	bne.n	8005282 <TIM_OC1_SetConfig+0xa2>
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	619a      	str	r2, [r3, #24]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	635a      	str	r2, [r3, #52]	@ 0x34
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	621a      	str	r2, [r3, #32]
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00

080052ac <TIM_OC2_SetConfig>:
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f023 0210 	bic.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	621a      	str	r2, [r3, #32]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0320 	bic.w	r3, r3, #32
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <TIM_OC2_SetConfig+0xd0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d10d      	bne.n	8005328 <TIM_OC2_SetConfig+0x7c>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a14      	ldr	r2, [pc, #80]	@ (800537c <TIM_OC2_SetConfig+0xd0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d113      	bne.n	8005358 <TIM_OC2_SetConfig+0xac>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	619a      	str	r2, [r3, #24]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	@ 0x38
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	40012c00 	.word	0x40012c00

08005380 <TIM_OC3_SetConfig>:
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <TIM_OC3_SetConfig+0xd0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10d      	bne.n	80053fa <TIM_OC3_SetConfig+0x7a>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <TIM_OC3_SetConfig+0xd0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d113      	bne.n	800542a <TIM_OC3_SetConfig+0xaa>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	61da      	str	r2, [r3, #28]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40012c00 	.word	0x40012c00

08005454 <TIM_OC4_SetConfig>:
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	031b      	lsls	r3, r3, #12
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0f      	ldr	r2, [pc, #60]	@ (80054ec <TIM_OC4_SetConfig+0x98>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d109      	bne.n	80054c8 <TIM_OC4_SetConfig+0x74>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	61da      	str	r2, [r3, #28]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	621a      	str	r2, [r3, #32]
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr
 80054ec:	40012c00 	.word	0x40012c00

080054f0 <TIM_TI1_ConfigInputStage>:
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <TIM_TI2_ConfigInputStage>:
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0210 	bic.w	r2, r3, #16
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	031b      	lsls	r3, r3, #12
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	619a      	str	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr

080055de <TIM_ETR_SetConfig>:
 80055de:	b480      	push	{r7}
 80055e0:	b087      	sub	sp, #28
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	021a      	lsls	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	431a      	orrs	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4313      	orrs	r3, r2
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_MasterConfigSynchronization>:
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005630:	2302      	movs	r3, #2
 8005632:	e046      	b.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005680:	d009      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a12      	ldr	r2, [pc, #72]	@ (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a10      	ldr	r2, [pc, #64]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d10c      	bne.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80056c0:	2300      	movs	r3, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800

080056d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80056dc:	4904      	ldr	r1, [pc, #16]	@ (80056f0 <MX_FATFS_Init+0x18>)
 80056de:	4805      	ldr	r0, [pc, #20]	@ (80056f4 <MX_FATFS_Init+0x1c>)
 80056e0:	f003 ffe8 	bl	80096b4 <FATFS_LinkDriver>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	4b03      	ldr	r3, [pc, #12]	@ (80056f8 <MX_FATFS_Init+0x20>)
 80056ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	200024d0 	.word	0x200024d0
 80056f4:	20000010 	.word	0x20000010
 80056f8:	200024cc 	.word	0x200024cc

080056fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005700:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005702:	4618      	mov	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	4603      	mov	r3, r0
 8005712:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc fec8 	bl	80024ac <SD_disk_initialize>
 800571c:	4603      	mov	r3, r0
 800571e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	4618      	mov	r0, r3
 8005736:	f7fc ff7b 	bl	8002630 <SD_disk_status>
 800573a:	4603      	mov	r3, r0
 800573c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005756:	7bf8      	ldrb	r0, [r7, #15]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	f7fc ff71 	bl	8002644 <SD_disk_read>
 8005762:	4603      	mov	r3, r0
 8005764:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800577e:	7bf8      	ldrb	r0, [r7, #15]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	f7fc ffa9 	bl	80026dc <SD_disk_write>
 800578a:	4603      	mov	r3, r0
 800578c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	603a      	str	r2, [r7, #0]
 80057a0:	71fb      	strb	r3, [r7, #7]
 80057a2:	460b      	mov	r3, r1
 80057a4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	79b9      	ldrb	r1, [r7, #6]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fc fff7 	bl	80027a0 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80057b2:	bf00      	nop
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <disk_status+0x30>)
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	79fa      	ldrb	r2, [r7, #7]
 80057d4:	4905      	ldr	r1, [pc, #20]	@ (80057ec <disk_status+0x30>)
 80057d6:	440a      	add	r2, r1
 80057d8:	7a12      	ldrb	r2, [r2, #8]
 80057da:	4610      	mov	r0, r2
 80057dc:	4798      	blx	r3
 80057de:	4603      	mov	r3, r0
 80057e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	200026e8 	.word	0x200026e8

080057f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	4a0d      	ldr	r2, [pc, #52]	@ (8005838 <disk_initialize+0x48>)
 8005802:	5cd3      	ldrb	r3, [r2, r3]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d111      	bne.n	800582c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	4a0b      	ldr	r2, [pc, #44]	@ (8005838 <disk_initialize+0x48>)
 800580c:	2101      	movs	r1, #1
 800580e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <disk_initialize+0x48>)
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	79fa      	ldrb	r2, [r7, #7]
 800581e:	4906      	ldr	r1, [pc, #24]	@ (8005838 <disk_initialize+0x48>)
 8005820:	440a      	add	r2, r1
 8005822:	7a12      	ldrb	r2, [r2, #8]
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200026e8 	.word	0x200026e8

0800583c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	4a0a      	ldr	r2, [pc, #40]	@ (8005878 <disk_read+0x3c>)
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	689c      	ldr	r4, [r3, #8]
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	4a07      	ldr	r2, [pc, #28]	@ (8005878 <disk_read+0x3c>)
 800585c:	4413      	add	r3, r2
 800585e:	7a18      	ldrb	r0, [r3, #8]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	47a0      	blx	r4
 8005868:	4603      	mov	r3, r0
 800586a:	75fb      	strb	r3, [r7, #23]
  return res;
 800586c:	7dfb      	ldrb	r3, [r7, #23]
}
 800586e:	4618      	mov	r0, r3
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}
 8005876:	bf00      	nop
 8005878:	200026e8 	.word	0x200026e8

0800587c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	4a0a      	ldr	r2, [pc, #40]	@ (80058b8 <disk_write+0x3c>)
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68dc      	ldr	r4, [r3, #12]
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	4a07      	ldr	r2, [pc, #28]	@ (80058b8 <disk_write+0x3c>)
 800589c:	4413      	add	r3, r2
 800589e:	7a18      	ldrb	r0, [r3, #8]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	47a0      	blx	r4
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd90      	pop	{r4, r7, pc}
 80058b6:	bf00      	nop
 80058b8:	200026e8 	.word	0x200026e8

080058bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	603a      	str	r2, [r7, #0]
 80058c6:	71fb      	strb	r3, [r7, #7]
 80058c8:	460b      	mov	r3, r1
 80058ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	4a09      	ldr	r2, [pc, #36]	@ (80058f4 <disk_ioctl+0x38>)
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	79fa      	ldrb	r2, [r7, #7]
 80058da:	4906      	ldr	r1, [pc, #24]	@ (80058f4 <disk_ioctl+0x38>)
 80058dc:	440a      	add	r2, r1
 80058de:	7a10      	ldrb	r0, [r2, #8]
 80058e0:	79b9      	ldrb	r1, [r7, #6]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	4798      	blx	r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	200026e8 	.word	0x200026e8

080058f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800590c:	e007      	b.n	800591e <mem_cpy+0x26>
		*d++ = *s++;
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	1c53      	adds	r3, r2, #1
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	1c59      	adds	r1, r3, #1
 8005918:	6179      	str	r1, [r7, #20]
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f2      	bne.n	800590e <mem_cpy+0x16>
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005944:	e005      	b.n	8005952 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	617a      	str	r2, [r7, #20]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f4      	bne.n	8005946 <mem_set+0x12>
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	@ 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005980:	bf00      	nop
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	1e5a      	subs	r2, r3, #1
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00d      	beq.n	80059a8 <mem_cmp+0x40>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	61ba      	str	r2, [r7, #24]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	1acb      	subs	r3, r1, r3
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ec      	beq.n	8005982 <mem_cmp+0x1a>
	return r;
 80059a8:	697b      	ldr	r3, [r7, #20]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3724      	adds	r7, #36	@ 0x24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059be:	e002      	b.n	80059c6 <chk_chr+0x12>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3301      	adds	r3, #1
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <chk_chr+0x26>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d1f2      	bne.n	80059c0 <chk_chr+0xc>
	return *str;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	781b      	ldrb	r3, [r3, #0]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e03b      	b.n	8005a74 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80059fc:	4931      	ldr	r1, [pc, #196]	@ (8005ac4 <chk_lock+0xdc>)
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4613      	mov	r3, r2
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02c      	beq.n	8005a6a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005a10:	492c      	ldr	r1, [pc, #176]	@ (8005ac4 <chk_lock+0xdc>)
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4613      	mov	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d120      	bne.n	8005a6e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005a2c:	4925      	ldr	r1, [pc, #148]	@ (8005ac4 <chk_lock+0xdc>)
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a44:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d111      	bne.n	8005a6e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005a4a:	491e      	ldr	r1, [pc, #120]	@ (8005ac4 <chk_lock+0xdc>)
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3308      	adds	r3, #8
 8005a5a:	881a      	ldrh	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a62:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d102      	bne.n	8005a6e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005a68:	e007      	b.n	8005a7a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0c0      	beq.n	80059fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d109      	bne.n	8005a94 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <chk_lock+0xa4>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d101      	bne.n	8005a90 <chk_lock+0xa8>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e013      	b.n	8005ab8 <chk_lock+0xd0>
 8005a90:	2312      	movs	r3, #18
 8005a92:	e011      	b.n	8005ab8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <chk_lock+0xca>
 8005a9a:	490a      	ldr	r1, [pc, #40]	@ (8005ac4 <chk_lock+0xdc>)
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	330a      	adds	r3, #10
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab0:	d101      	bne.n	8005ab6 <chk_lock+0xce>
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	e000      	b.n	8005ab8 <chk_lock+0xd0>
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	200024dc 	.word	0x200024dc

08005ac8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	e002      	b.n	8005ada <enq_lock+0x12>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <enq_lock+0x2c>
 8005ae0:	490a      	ldr	r1, [pc, #40]	@ (8005b0c <enq_lock+0x44>)
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ef      	bne.n	8005ad4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	200024dc 	.word	0x200024dc

08005b10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e02e      	b.n	8005b7e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005b20:	4958      	ldr	r1, [pc, #352]	@ (8005c84 <inc_lock+0x174>)
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d11d      	bne.n	8005b78 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005b3c:	4951      	ldr	r1, [pc, #324]	@ (8005c84 <inc_lock+0x174>)
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d10e      	bne.n	8005b78 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005b5a:	494a      	ldr	r1, [pc, #296]	@ (8005c84 <inc_lock+0x174>)
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3308      	adds	r3, #8
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b72:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d006      	beq.n	8005b86 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0cd      	beq.n	8005b20 <inc_lock+0x10>
 8005b84:	e000      	b.n	8005b88 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005b86:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d148      	bne.n	8005c20 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e002      	b.n	8005b9a <inc_lock+0x8a>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <inc_lock+0xa4>
 8005ba0:	4938      	ldr	r1, [pc, #224]	@ (8005c84 <inc_lock+0x174>)
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ef      	bne.n	8005b94 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <inc_lock+0xae>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e05d      	b.n	8005c7a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	482f      	ldr	r0, [pc, #188]	@ (8005c84 <inc_lock+0x174>)
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4403      	add	r3, r0
 8005bd4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bdc:	6899      	ldr	r1, [r3, #8]
 8005bde:	4829      	ldr	r0, [pc, #164]	@ (8005c84 <inc_lock+0x174>)
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4403      	add	r3, r0
 8005bec:	3304      	adds	r3, #4
 8005bee:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf6:	88d8      	ldrh	r0, [r3, #6]
 8005bf8:	4922      	ldr	r1, [pc, #136]	@ (8005c84 <inc_lock+0x174>)
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	3308      	adds	r3, #8
 8005c08:	4602      	mov	r2, r0
 8005c0a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c0c:	491d      	ldr	r1, [pc, #116]	@ (8005c84 <inc_lock+0x174>)
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	330a      	adds	r3, #10
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00c      	beq.n	8005c40 <inc_lock+0x130>
 8005c26:	4917      	ldr	r1, [pc, #92]	@ (8005c84 <inc_lock+0x174>)
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	330a      	adds	r3, #10
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <inc_lock+0x130>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e01c      	b.n	8005c7a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <inc_lock+0x14e>
 8005c46:	490f      	ldr	r1, [pc, #60]	@ (8005c84 <inc_lock+0x174>)
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	330a      	adds	r3, #10
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	b299      	uxth	r1, r3
 8005c5c:	e001      	b.n	8005c62 <inc_lock+0x152>
 8005c5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c62:	4808      	ldr	r0, [pc, #32]	@ (8005c84 <inc_lock+0x174>)
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4403      	add	r3, r0
 8005c70:	330a      	adds	r3, #10
 8005c72:	460a      	mov	r2, r1
 8005c74:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr
 8005c84:	200024dc 	.word	0x200024dc

08005c88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d12e      	bne.n	8005cfa <dec_lock+0x72>
		n = Files[i].ctr;
 8005c9c:	491b      	ldr	r1, [pc, #108]	@ (8005d0c <dec_lock+0x84>)
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	330a      	adds	r3, #10
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005cb0:	89fb      	ldrh	r3, [r7, #14]
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb6:	d101      	bne.n	8005cbc <dec_lock+0x34>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005cbc:	89fb      	ldrh	r3, [r7, #14]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <dec_lock+0x40>
 8005cc2:	89fb      	ldrh	r3, [r7, #14]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005cc8:	4910      	ldr	r1, [pc, #64]	@ (8005d0c <dec_lock+0x84>)
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	330a      	adds	r3, #10
 8005cd8:	89fa      	ldrh	r2, [r7, #14]
 8005cda:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005cdc:	89fb      	ldrh	r3, [r7, #14]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d108      	bne.n	8005cf4 <dec_lock+0x6c>
 8005ce2:	490a      	ldr	r1, [pc, #40]	@ (8005d0c <dec_lock+0x84>)
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	737b      	strb	r3, [r7, #13]
 8005cf8:	e001      	b.n	8005cfe <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005cfe:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	200024dc 	.word	0x200024dc

08005d10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e016      	b.n	8005d4c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d1e:	4910      	ldr	r1, [pc, #64]	@ (8005d60 <clear_lock+0x50>)
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d108      	bne.n	8005d46 <clear_lock+0x36>
 8005d34:	490a      	ldr	r1, [pc, #40]	@ (8005d60 <clear_lock+0x50>)
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0e5      	beq.n	8005d1e <clear_lock+0xe>
	}
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	200024dc 	.word	0x200024dc

08005d64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d76:	791b      	ldrb	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d040      	beq.n	8005dfe <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8c:	7858      	ldrb	r0, [r3, #1]
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	2301      	movs	r3, #1
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	f7ff fd72 	bl	800587c <disk_write>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <sync_window+0x40>
			res = FR_DISK_ERR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e02c      	b.n	8005dfe <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005daa:	2200      	movs	r2, #0
 8005dac:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	1ad2      	subs	r2, r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d21b      	bcs.n	8005dfe <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	e012      	b.n	8005df8 <sync_window+0x94>
					wsect += fs->fsize;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4413      	add	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005de6:	7858      	ldrb	r0, [r3, #1]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	2301      	movs	r3, #1
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	f7ff fd45 	bl	800587c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d8e9      	bhi.n	8005dd2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d01e      	beq.n	8005e62 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ff9d 	bl	8005d64 <sync_window>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d116      	bne.n	8005e62 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e3a:	7858      	ldrb	r0, [r3, #1]
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	f7ff fcfb 	bl	800583c <disk_read>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff ff75 	bl	8005d64 <sync_window>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 80ad 	bne.w	8005fe0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	f040 8098 	bne.w	8005fc4 <sync_fs+0x158>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e9a:	795b      	ldrb	r3, [r3, #5]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	f040 8091 	bne.w	8005fc4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eaa:	895b      	ldrh	r3, [r3, #10]
 8005eac:	461a      	mov	r2, r3
 8005eae:	2100      	movs	r1, #0
 8005eb0:	f7ff fd40 	bl	8005934 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2255      	movs	r2, #85	@ 0x55
 8005eb8:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	22aa      	movs	r2, #170	@ 0xaa
 8005ec0:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2252      	movs	r2, #82	@ 0x52
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2252      	movs	r2, #82	@ 0x52
 8005ece:	705a      	strb	r2, [r3, #1]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2261      	movs	r2, #97	@ 0x61
 8005ed4:	709a      	strb	r2, [r3, #2]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2241      	movs	r2, #65	@ 0x41
 8005eda:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2272      	movs	r2, #114	@ 0x72
 8005ee0:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2272      	movs	r2, #114	@ 0x72
 8005ee8:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2241      	movs	r2, #65	@ 0x41
 8005ef0:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2261      	movs	r2, #97	@ 0x61
 8005ef8:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	0e1b      	lsrs	r3, r3, #24
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	0c1b      	lsrs	r3, r3, #16
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	0e1b      	lsrs	r3, r3, #24
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fa8:	7858      	ldrb	r0, [r3, #1]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f7ff fc61 	bl	800587c <disk_write>
			fs->fsi_flag = 0;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fc73 	bl	80058bc <disk_ioctl>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	3b02      	subs	r3, #2
 8005ff8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	3b02      	subs	r3, #2
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d301      	bcc.n	800600e <clust2sect+0x24>
 800600a:	2300      	movs	r3, #0
 800600c:	e00c      	b.n	8006028 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006014:	789b      	ldrb	r3, [r3, #2]
 8006016:	461a      	mov	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	fb03 f202 	mul.w	r2, r3, r2
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	4413      	add	r3, r2
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d906      	bls.n	8006050 <get_fat+0x1e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d302      	bcc.n	8006056 <get_fat+0x24>
		val = 1;	/* Internal error */
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e0e3      	b.n	800621e <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006056:	f04f 33ff 	mov.w	r3, #4294967295
 800605a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b03      	cmp	r3, #3
 8006066:	f000 8097 	beq.w	8006198 <get_fat+0x166>
 800606a:	2b03      	cmp	r3, #3
 800606c:	f300 80cd 	bgt.w	800620a <get_fat+0x1d8>
 8006070:	2b01      	cmp	r3, #1
 8006072:	d002      	beq.n	800607a <get_fat+0x48>
 8006074:	2b02      	cmp	r3, #2
 8006076:	d05e      	beq.n	8006136 <get_fat+0x104>
 8006078:	e0c7      	b.n	800620a <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006096:	895b      	ldrh	r3, [r3, #10]
 8006098:	4619      	mov	r1, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	fbb3 f3f1 	udiv	r3, r3, r1
 80060a0:	4413      	add	r3, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff feaf 	bl	8005e08 <move_window>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 80af 	bne.w	8006210 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	60fa      	str	r2, [r7, #12]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060be:	8952      	ldrh	r2, [r2, #10]
 80060c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060c4:	fb01 f202 	mul.w	r2, r1, r2
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	5cd3      	ldrb	r3, [r2, r3]
 80060ce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060de:	895b      	ldrh	r3, [r3, #10]
 80060e0:	4619      	mov	r1, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80060e8:	4413      	add	r3, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fe8b 	bl	8005e08 <move_window>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f040 808d 	bne.w	8006214 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006100:	895b      	ldrh	r3, [r3, #10]
 8006102:	461a      	mov	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	fbb3 f1f2 	udiv	r1, r3, r2
 800610a:	fb01 f202 	mul.w	r2, r1, r2
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	5cd3      	ldrb	r3, [r2, r3]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4313      	orrs	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <get_fat+0xfa>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	e002      	b.n	8006132 <get_fat+0x100>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006132:	617b      	str	r3, [r7, #20]
			break;
 8006134:	e073      	b.n	800621e <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006144:	895b      	ldrh	r3, [r3, #10]
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	b29b      	uxth	r3, r3
 800614a:	4619      	mov	r1, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006152:	4413      	add	r3, r2
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fe56 	bl	8005e08 <move_window>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d15a      	bne.n	8006218 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800616c:	8952      	ldrh	r2, [r2, #10]
 800616e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006172:	fb01 f202 	mul.w	r2, r1, r2
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4413      	add	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3301      	adds	r3, #1
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	b21a      	sxth	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b21b      	sxth	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b21b      	sxth	r3, r3
 8006192:	b29b      	uxth	r3, r3
 8006194:	617b      	str	r3, [r7, #20]
			break;
 8006196:	e042      	b.n	800621e <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a6:	895b      	ldrh	r3, [r3, #10]
 80061a8:	089b      	lsrs	r3, r3, #2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4619      	mov	r1, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b4:	4413      	add	r3, r2
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fe25 	bl	8005e08 <move_window>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d12b      	bne.n	800621c <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80061ce:	8952      	ldrh	r2, [r2, #10]
 80061d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80061d4:	fb01 f202 	mul.w	r2, r1, r2
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	3303      	adds	r3, #3
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	061a      	lsls	r2, r3, #24
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3302      	adds	r3, #2
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	431a      	orrs	r2, r3
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3301      	adds	r3, #1
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	4313      	orrs	r3, r2
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	4313      	orrs	r3, r2
 8006202:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006206:	617b      	str	r3, [r7, #20]
			break;
 8006208:	e009      	b.n	800621e <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800620a:	2301      	movs	r3, #1
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e006      	b.n	800621e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006210:	bf00      	nop
 8006212:	e004      	b.n	800621e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006214:	bf00      	nop
 8006216:	e002      	b.n	800621e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800621c:	bf00      	nop
		}
	}

	return val;
 800621e:	697b      	ldr	r3, [r7, #20]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d906      	bls.n	8006248 <put_fat+0x20>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	429a      	cmp	r2, r3
 8006246:	d302      	bcc.n	800624e <put_fat+0x26>
		res = FR_INT_ERR;
 8006248:	2302      	movs	r3, #2
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e13a      	b.n	80064c4 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b03      	cmp	r3, #3
 8006258:	f000 80d0 	beq.w	80063fc <put_fat+0x1d4>
 800625c:	2b03      	cmp	r3, #3
 800625e:	f300 8127 	bgt.w	80064b0 <put_fat+0x288>
 8006262:	2b01      	cmp	r3, #1
 8006264:	d003      	beq.n	800626e <put_fat+0x46>
 8006266:	2b02      	cmp	r3, #2
 8006268:	f000 808f 	beq.w	800638a <put_fat+0x162>
 800626c:	e120      	b.n	80064b0 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006282:	6a1a      	ldr	r2, [r3, #32]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800628a:	895b      	ldrh	r3, [r3, #10]
 800628c:	4619      	mov	r1, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	fbb3 f3f1 	udiv	r3, r3, r1
 8006294:	4413      	add	r3, r2
 8006296:	4619      	mov	r1, r3
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7ff fdb5 	bl	8005e08 <move_window>
 800629e:	4603      	mov	r3, r0
 80062a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062a2:	7ffb      	ldrb	r3, [r7, #31]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8106 	bne.w	80064b6 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	617a      	str	r2, [r7, #20]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80062b6:	8952      	ldrh	r2, [r2, #10]
 80062b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80062bc:	fb01 f202 	mul.w	r2, r1, r2
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <put_fat+0xc6>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	b25a      	sxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	b25b      	sxtb	r3, r3
 80062e6:	4313      	orrs	r3, r2
 80062e8:	b25b      	sxtb	r3, r3
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	e001      	b.n	80062f2 <put_fat+0xca>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fc:	2201      	movs	r2, #1
 80062fe:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630e:	895b      	ldrh	r3, [r3, #10]
 8006310:	4619      	mov	r1, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	fbb3 f3f1 	udiv	r3, r3, r1
 8006318:	4413      	add	r3, r2
 800631a:	4619      	mov	r1, r3
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff fd73 	bl	8005e08 <move_window>
 8006322:	4603      	mov	r3, r0
 8006324:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006326:	7ffb      	ldrb	r3, [r7, #31]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 80c6 	bne.w	80064ba <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006334:	895b      	ldrh	r3, [r3, #10]
 8006336:	461a      	mov	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	fbb3 f1f2 	udiv	r1, r3, r2
 800633e:	fb01 f202 	mul.w	r2, r1, r2
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <put_fat+0x134>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e00e      	b.n	800637a <put_fat+0x152>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	b25b      	sxtb	r3, r3
 8006362:	f023 030f 	bic.w	r3, r3, #15
 8006366:	b25a      	sxtb	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	b25b      	sxtb	r3, r3
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	b25b      	sxtb	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b25b      	sxtb	r3, r3
 8006378:	b2db      	uxtb	r3, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006384:	2201      	movs	r2, #1
 8006386:	711a      	strb	r2, [r3, #4]
			break;
 8006388:	e09c      	b.n	80064c4 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006398:	895b      	ldrh	r3, [r3, #10]
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	b29b      	uxth	r3, r3
 800639e:	4619      	mov	r1, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063a6:	4413      	add	r3, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff fd2c 	bl	8005e08 <move_window>
 80063b0:	4603      	mov	r3, r0
 80063b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063b4:	7ffb      	ldrb	r3, [r7, #31]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8081 	bne.w	80064be <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063c6:	8952      	ldrh	r2, [r2, #10]
 80063c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80063cc:	fb01 f202 	mul.w	r2, r1, r2
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	0a1b      	lsrs	r3, r3, #8
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	3301      	adds	r3, #1
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063f6:	2201      	movs	r2, #1
 80063f8:	711a      	strb	r2, [r3, #4]
			break;
 80063fa:	e063      	b.n	80064c4 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800640a:	895b      	ldrh	r3, [r3, #10]
 800640c:	089b      	lsrs	r3, r3, #2
 800640e:	b29b      	uxth	r3, r3
 8006410:	4619      	mov	r1, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	fbb3 f3f1 	udiv	r3, r3, r1
 8006418:	4413      	add	r3, r2
 800641a:	4619      	mov	r1, r3
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff fcf3 	bl	8005e08 <move_window>
 8006422:	4603      	mov	r3, r0
 8006424:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006426:	7ffb      	ldrb	r3, [r7, #31]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d14a      	bne.n	80064c2 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006436:	8952      	ldrh	r2, [r2, #10]
 8006438:	fbb3 f1f2 	udiv	r1, r3, r2
 800643c:	fb01 f202 	mul.w	r2, r1, r2
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	3303      	adds	r3, #3
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	061a      	lsls	r2, r3, #24
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	3302      	adds	r3, #2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	431a      	orrs	r2, r3
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	3301      	adds	r3, #1
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	4313      	orrs	r3, r2
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	4313      	orrs	r3, r2
 800646a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4313      	orrs	r3, r2
 8006472:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	b2da      	uxtb	r2, r3
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	b29b      	uxth	r3, r3
 8006480:	0a1b      	lsrs	r3, r3, #8
 8006482:	b29a      	uxth	r2, r3
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	3301      	adds	r3, #1
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0c1a      	lsrs	r2, r3, #16
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	3302      	adds	r3, #2
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	0e1a      	lsrs	r2, r3, #24
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	3303      	adds	r3, #3
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064aa:	2201      	movs	r2, #1
 80064ac:	711a      	strb	r2, [r3, #4]
			break;
 80064ae:	e009      	b.n	80064c4 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80064b0:	2302      	movs	r3, #2
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e006      	b.n	80064c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80064b6:	bf00      	nop
 80064b8:	e004      	b.n	80064c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80064ba:	bf00      	nop
 80064bc:	e002      	b.n	80064c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80064c2:	bf00      	nop
		}
	}

	return res;
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d906      	bls.n	80064ec <remove_chain+0x1e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <remove_chain+0x24>
		res = FR_INT_ERR;
 80064ec:	2302      	movs	r3, #2
 80064ee:	73fb      	strb	r3, [r7, #15]
 80064f0:	e049      	b.n	8006586 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80064f6:	e03b      	b.n	8006570 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff fd99 	bl	8006032 <get_fat>
 8006500:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d03b      	beq.n	8006580 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d102      	bne.n	8006514 <remove_chain+0x46>
 800650e:	2302      	movs	r3, #2
 8006510:	73fb      	strb	r3, [r7, #15]
 8006512:	e038      	b.n	8006586 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d102      	bne.n	8006522 <remove_chain+0x54>
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
 8006520:	e031      	b.n	8006586 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006522:	2200      	movs	r2, #0
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff fe7e 	bl	8006228 <put_fat>
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d126      	bne.n	8006584 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d013      	beq.n	800656c <remove_chain+0x9e>
				fs->free_clust++;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	3301      	adds	r3, #1
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006554:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800655c:	795b      	ldrb	r3, [r3, #5]
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	b2da      	uxtb	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d3bc      	bcc.n	80064f8 <remove_chain+0x2a>
 800657e:	e002      	b.n	8006586 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8006584:	bf00      	nop
		}
	}

	return res;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d111      	bne.n	80065c4 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d006      	beq.n	80065be <create_chain+0x2e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d31d      	bcc.n	80065fa <create_chain+0x6a>
 80065be:	2301      	movs	r3, #1
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	e01a      	b.n	80065fa <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff fd33 	bl	8006032 <get_fat>
 80065cc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d801      	bhi.n	80065d8 <create_chain+0x48>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e07f      	b.n	80066d8 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d101      	bne.n	80065e4 <create_chain+0x54>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	e079      	b.n	80066d8 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d201      	bcs.n	80065f6 <create_chain+0x66>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	e070      	b.n	80066d8 <create_chain+0x148>
		scl = clst;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	3301      	adds	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	429a      	cmp	r2, r3
 8006610:	d307      	bcc.n	8006622 <create_chain+0x92>
			ncl = 2;
 8006612:	2302      	movs	r3, #2
 8006614:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	429a      	cmp	r2, r3
 800661c:	d901      	bls.n	8006622 <create_chain+0x92>
 800661e:	2300      	movs	r3, #0
 8006620:	e05a      	b.n	80066d8 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fd04 	bl	8006032 <get_fat>
 800662a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d002      	beq.n	8006640 <create_chain+0xb0>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <create_chain+0xb4>
			return cs;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	e049      	b.n	80066d8 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	429a      	cmp	r2, r3
 800664a:	d1d8      	bne.n	80065fe <create_chain+0x6e>
 800664c:	2300      	movs	r3, #0
 800664e:	e043      	b.n	80066d8 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006650:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006652:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fde5 	bl	8006228 <put_fat>
 800665e:	4603      	mov	r3, r0
 8006660:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <create_chain+0xec>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d006      	beq.n	800667c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fdd8 	bl	8006228 <put_fat>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d121      	bne.n	80066c6 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006688:	461a      	mov	r2, r3
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d01c      	beq.n	80066d6 <create_chain+0x146>
			fs->free_clust--;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066ac:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b4:	795b      	ldrb	r3, [r3, #5]
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c2:	715a      	strb	r2, [r3, #5]
 80066c4:	e007      	b.n	80066d6 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d102      	bne.n	80066d2 <create_chain+0x142>
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	e000      	b.n	80066d4 <create_chain+0x144>
 80066d2:	2301      	movs	r3, #1
 80066d4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80066d6:	697b      	ldr	r3, [r7, #20]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f2:	3304      	adds	r3, #4
 80066f4:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006702:	895b      	ldrh	r3, [r3, #10]
 8006704:	461a      	mov	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	fbb3 f3f2 	udiv	r3, r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006718:	7892      	ldrb	r2, [r2, #2]
 800671a:	fbb3 f3f2 	udiv	r3, r3, r2
 800671e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1d1a      	adds	r2, r3, #4
 8006724:	613a      	str	r2, [r7, #16]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <clmt_clust+0x54>
 8006730:	2300      	movs	r3, #0
 8006732:	e010      	b.n	8006756 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d307      	bcc.n	800674c <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3304      	adds	r3, #4
 8006748:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800674a:	e7e9      	b.n	8006720 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800674c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006774:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d009      	beq.n	800679a <dir_sdi+0x3a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	429a      	cmp	r2, r3
 8006798:	d301      	bcc.n	800679e <dir_sdi+0x3e>
		return FR_INT_ERR;
 800679a:	2302      	movs	r3, #2
 800679c:	e0aa      	b.n	80068f4 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d110      	bne.n	80067c6 <dir_sdi+0x66>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d107      	bne.n	80067c6 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d115      	bne.n	80067f8 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d8:	891b      	ldrh	r3, [r3, #8]
 80067da:	461a      	mov	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d301      	bcc.n	80067e6 <dir_sdi+0x86>
			return FR_INT_ERR;
 80067e2:	2302      	movs	r3, #2
 80067e4:	e086      	b.n	80068f4 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e043      	b.n	8006880 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006804:	895b      	ldrh	r3, [r3, #10]
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006818:	789b      	ldrb	r3, [r3, #2]
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006820:	e021      	b.n	8006866 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6979      	ldr	r1, [r7, #20]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fc00 	bl	8006032 <get_fat>
 8006832:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d101      	bne.n	8006840 <dir_sdi+0xe0>
 800683c:	2301      	movs	r3, #1
 800683e:	e059      	b.n	80068f4 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d909      	bls.n	800685a <dir_sdi+0xfa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	429a      	cmp	r2, r3
 8006858:	d301      	bcc.n	800685e <dir_sdi+0xfe>
				return FR_INT_ERR;
 800685a:	2302      	movs	r3, #2
 800685c:	e04a      	b.n	80068f4 <dir_sdi+0x194>
			idx -= ic;
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	429a      	cmp	r2, r3
 800686c:	d2d9      	bcs.n	8006822 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6979      	ldr	r1, [r7, #20]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fbb6 	bl	8005fea <clust2sect>
 800687e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006886:	461a      	mov	r2, r3
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <dir_sdi+0x136>
 8006892:	2302      	movs	r3, #2
 8006894:	e02e      	b.n	80068f4 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a2:	895b      	ldrh	r3, [r3, #10]
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068ba:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d2:	895b      	ldrh	r3, [r3, #10]
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80068e0:	fb01 f202 	mul.w	r2, r1, r2
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	015b      	lsls	r3, r3, #5
 80068e8:	4403      	add	r3, r0
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068f0:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80068fc:	b590      	push	{r4, r7, lr}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800690c:	88db      	ldrh	r3, [r3, #6]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <dir_next+0x2a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <dir_next+0x2e>
		return FR_NO_FILE;
 8006926:	2304      	movs	r3, #4
 8006928:	e12e      	b.n	8006b88 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006936:	895b      	ldrh	r3, [r3, #10]
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	b29b      	uxth	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	fbb3 f1f2 	udiv	r1, r3, r2
 8006944:	fb01 f202 	mul.w	r2, r1, r2
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 80fa 	bne.w	8006b44 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	3301      	adds	r3, #1
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006960:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697a:	891b      	ldrh	r3, [r3, #8]
 800697c:	461a      	mov	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4293      	cmp	r3, r2
 8006982:	f0c0 80df 	bcc.w	8006b44 <dir_next+0x248>
				return FR_NO_FILE;
 8006986:	2304      	movs	r3, #4
 8006988:	e0fe      	b.n	8006b88 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006996:	895b      	ldrh	r3, [r3, #10]
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	b29b      	uxth	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069b0:	7892      	ldrb	r2, [r2, #2]
 80069b2:	3a01      	subs	r2, #1
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f040 80c4 	bne.w	8006b44 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7ff fb2f 	bl	8006032 <get_fat>
 80069d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d801      	bhi.n	80069e0 <dir_next+0xe4>
 80069dc:	2302      	movs	r3, #2
 80069de:	e0d3      	b.n	8006b88 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d101      	bne.n	80069ec <dir_next+0xf0>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0cd      	b.n	8006b88 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	f0c0 808e 	bcc.w	8006b1e <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <dir_next+0x110>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	e0bd      	b.n	8006b88 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f7ff fdb6 	bl	8006590 <create_chain>
 8006a24:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <dir_next+0x134>
 8006a2c:	2307      	movs	r3, #7
 8006a2e:	e0ab      	b.n	8006b88 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <dir_next+0x13e>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e0a6      	b.n	8006b88 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d101      	bne.n	8006a46 <dir_next+0x14a>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e0a0      	b.n	8006b88 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff f988 	bl	8005d64 <sync_window>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <dir_next+0x162>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e094      	b.n	8006b88 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a74:	895b      	ldrh	r3, [r3, #10]
 8006a76:	461a      	mov	r2, r3
 8006a78:	2100      	movs	r1, #0
 8006a7a:	f7fe ff5b 	bl	8005934 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a8c:	681c      	ldr	r4, [r3, #0]
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7ff faaa 	bl	8005fea <clust2sect>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8006a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e021      	b.n	8006ae8 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff f951 	bl	8005d64 <sync_window>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <dir_next+0x1d0>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e05d      	b.n	8006b88 <dir_next+0x28c>
						dp->fs->winsect++;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8006ad8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ada:	3201      	adds	r2, #1
 8006adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af4:	789b      	ldrb	r3, [r3, #2]
 8006af6:	461a      	mov	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d3d2      	bcc.n	8006aa4 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1acb      	subs	r3, r1, r3
 8006b18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b24:	461a      	mov	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fa58 	bl	8005fea <clust2sect>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b42:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b4e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b66:	895b      	ldrh	r3, [r3, #10]
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b74:	fb01 f202 	mul.w	r2, r1, r2
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	015b      	lsls	r3, r3, #5
 8006b7c:	4403      	add	r3, r0
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b84:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd90      	pop	{r4, r7, pc}

08006b90 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff fddf 	bl	8006760 <dir_sdi>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d135      	bne.n	8006c18 <dir_alloc+0x88>
		n = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7ff f920 	bl	8005e08 <move_window>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d121      	bne.n	8006c16 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2be5      	cmp	r3, #229	@ 0xe5
 8006bde:	d006      	beq.n	8006bee <dir_alloc+0x5e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d107      	bne.n	8006bfe <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d102      	bne.n	8006c02 <dir_alloc+0x72>
 8006bfc:	e00c      	b.n	8006c18 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006c02:	2101      	movs	r1, #1
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff fe79 	bl	80068fc <dir_next>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0cd      	beq.n	8006bb0 <dir_alloc+0x20>
 8006c14:	e000      	b.n	8006c18 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006c16:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d101      	bne.n	8006c22 <dir_alloc+0x92>
 8006c1e:	2307      	movs	r3, #7
 8006c20:	73fb      	strb	r3, [r7, #15]
	return res;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	331b      	adds	r3, #27
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	b21a      	sxth	r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	331a      	adds	r3, #26
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b21b      	sxth	r3, r3
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	b21b      	sxth	r3, r3
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d10f      	bne.n	8006c7c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	3315      	adds	r3, #21
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	b21a      	sxth	r2, r3
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	3314      	adds	r3, #20
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	b21b      	sxth	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b21b      	sxth	r3, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

	return cl;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	331a      	adds	r3, #26
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	0a1b      	lsrs	r3, r3, #8
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	331b      	adds	r3, #27
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	0c1a      	lsrs	r2, r3, #16
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3314      	adds	r3, #20
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	0c1b      	lsrs	r3, r3, #16
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3315      	adds	r3, #21
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce6:	1e5a      	subs	r2, r3, #1
 8006ce8:	4613      	mov	r3, r2
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8006dac <cmp_lfn+0xd8>)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4413      	add	r3, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	3301      	adds	r3, #1
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	4413      	add	r3, r2
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	b21a      	sxth	r2, r3
 8006d10:	4926      	ldr	r1, [pc, #152]	@ (8006dac <cmp_lfn+0xd8>)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	440b      	add	r3, r1
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	440b      	add	r3, r1
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	b21b      	sxth	r3, r3
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b21b      	sxth	r3, r3
 8006d26:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006d28:	89fb      	ldrh	r3, [r7, #14]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d019      	beq.n	8006d62 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006d2e:	89bb      	ldrh	r3, [r7, #12]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 fd09 	bl	8009748 <ff_wtoupper>
 8006d36:	4603      	mov	r3, r0
 8006d38:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2bfe      	cmp	r3, #254	@ 0xfe
 8006d3e:	d80e      	bhi.n	8006d5e <cmp_lfn+0x8a>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	617a      	str	r2, [r7, #20]
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f002 fcfa 	bl	8009748 <ff_wtoupper>
 8006d54:	4603      	mov	r3, r0
 8006d56:	461a      	mov	r2, r3
 8006d58:	89fb      	ldrh	r3, [r7, #14]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d008      	beq.n	8006d70 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e01f      	b.n	8006da2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006d62:	89bb      	ldrh	r3, [r7, #12]
 8006d64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d001      	beq.n	8006d70 <cmp_lfn+0x9c>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e018      	b.n	8006da2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3301      	adds	r3, #1
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b0c      	cmp	r3, #12
 8006d7a:	d9bf      	bls.n	8006cfc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <cmp_lfn+0xcc>
 8006d88:	89fb      	ldrh	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d008      	beq.n	8006da0 <cmp_lfn+0xcc>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <cmp_lfn+0xcc>
		return 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e000      	b.n	8006da2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006da0:	2301      	movs	r3, #1
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	0800d704 	.word	0x0800d704

08006db0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	@ 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	71fb      	strb	r3, [r7, #7]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	330d      	adds	r3, #13
 8006dca:	79ba      	ldrb	r2, [r7, #6]
 8006dcc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	330b      	adds	r3, #11
 8006dd2:	220f      	movs	r2, #15
 8006dd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	331a      	adds	r3, #26
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	331b      	adds	r3, #27
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	1e5a      	subs	r2, r3, #1
 8006df2:	4613      	mov	r3, r2
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	82fb      	strh	r3, [r7, #22]
 8006e02:	2300      	movs	r3, #0
 8006e04:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006e06:	8afb      	ldrh	r3, [r7, #22]
 8006e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <fit_lfn+0x70>
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	61fa      	str	r2, [r7, #28]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006e20:	4a1c      	ldr	r2, [pc, #112]	@ (8006e94 <fit_lfn+0xe4>)
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	4413      	add	r3, r2
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	8afa      	ldrh	r2, [r7, #22]
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	8afb      	ldrh	r3, [r7, #22]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b299      	uxth	r1, r3
 8006e3a:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <fit_lfn+0xe4>)
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	4413      	add	r3, r2
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4413      	add	r3, r2
 8006e48:	b2ca      	uxtb	r2, r1
 8006e4a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006e4c:	8afb      	ldrh	r3, [r7, #22]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <fit_lfn+0xa8>
 8006e52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e56:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	d9d0      	bls.n	8006e06 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006e64:	8afb      	ldrh	r3, [r7, #22]
 8006e66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d006      	beq.n	8006e7c <fit_lfn+0xcc>
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <fit_lfn+0xd4>
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e82:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	79fa      	ldrb	r2, [r7, #7]
 8006e88:	701a      	strb	r2, [r3, #0]
}
 8006e8a:	bf00      	nop
 8006e8c:	3724      	adds	r7, #36	@ 0x24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr
 8006e94:	0800d704 	.word	0x0800d704

08006e98 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	@ 0x30
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ea6:	220b      	movs	r2, #11
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7fe fd24 	bl	80058f8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	d92b      	bls.n	8006f0e <gen_numname+0x76>
		sr = seq;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006eba:	e022      	b.n	8006f02 <gen_numname+0x6a>
			wc = *lfn++;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	607a      	str	r2, [r7, #4]
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eca:	e017      	b.n	8006efc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	005a      	lsls	r2, r3, #1
 8006ed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006eda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <gen_numname+0x5e>
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006ef0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006ef4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	3301      	adds	r3, #1
 8006efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	2b0f      	cmp	r3, #15
 8006f00:	d9e4      	bls.n	8006ecc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1d8      	bne.n	8006ebc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006f0e:	2307      	movs	r3, #7
 8006f10:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	3330      	adds	r3, #48	@ 0x30
 8006f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006f22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f26:	2b39      	cmp	r3, #57	@ 0x39
 8006f28:	d904      	bls.n	8006f34 <gen_numname+0x9c>
 8006f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f2e:	3307      	adds	r3, #7
 8006f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	1e5a      	subs	r2, r3, #1
 8006f38:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006f3a:	3330      	adds	r3, #48	@ 0x30
 8006f3c:	443b      	add	r3, r7
 8006f3e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006f42:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	091b      	lsrs	r3, r3, #4
 8006f4a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1df      	bne.n	8006f12 <gen_numname+0x7a>
	ns[i] = '~';
 8006f52:	f107 0214 	add.w	r2, r7, #20
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	4413      	add	r3, r2
 8006f5a:	227e      	movs	r2, #126	@ 0x7e
 8006f5c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006f5e:	2300      	movs	r3, #0
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f62:	e002      	b.n	8006f6a <gen_numname+0xd2>
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	3301      	adds	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d205      	bcs.n	8006f7e <gen_numname+0xe6>
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	4413      	add	r3, r2
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b20      	cmp	r3, #32
 8006f7c:	d1f2      	bne.n	8006f64 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f80:	2b07      	cmp	r3, #7
 8006f82:	d807      	bhi.n	8006f94 <gen_numname+0xfc>
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006f8a:	3330      	adds	r3, #48	@ 0x30
 8006f8c:	443b      	add	r3, r7
 8006f8e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006f92:	e000      	b.n	8006f96 <gen_numname+0xfe>
 8006f94:	2120      	movs	r1, #32
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	460a      	mov	r2, r1
 8006fa2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	2b07      	cmp	r3, #7
 8006fa8:	d9e9      	bls.n	8006f7e <gen_numname+0xe6>
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	3730      	adds	r7, #48	@ 0x30
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006fc0:	230b      	movs	r3, #11
 8006fc2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	0852      	lsrs	r2, r2, #1
 8006fca:	01db      	lsls	r3, r3, #7
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	1c59      	adds	r1, r3, #1
 8006fd4:	6079      	str	r1, [r7, #4]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	4413      	add	r3, r2
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ed      	bne.n	8006fc4 <sum_sfn+0x10>
	return sum;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fbae 	bl	8006760 <dir_sdi>
 8007004:	4603      	mov	r3, r0
 8007006:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <dir_find+0x1e>
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	e0b8      	b.n	8007184 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007012:	23ff      	movs	r3, #255	@ 0xff
 8007014:	753b      	strb	r3, [r7, #20]
 8007016:	7d3b      	ldrb	r3, [r7, #20]
 8007018:	757b      	strb	r3, [r7, #21]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007024:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7fe fee5 	bl	8005e08 <move_window>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 8097 	bne.w	8007178 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800705a:	7dbb      	ldrb	r3, [r7, #22]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <dir_find+0x72>
 8007060:	2304      	movs	r3, #4
 8007062:	75fb      	strb	r3, [r7, #23]
 8007064:	e08d      	b.n	8007182 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	330b      	adds	r3, #11
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007070:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007072:	7dbb      	ldrb	r3, [r7, #22]
 8007074:	2be5      	cmp	r3, #229	@ 0xe5
 8007076:	d007      	beq.n	8007088 <dir_find+0x94>
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <dir_find+0xa6>
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b0f      	cmp	r3, #15
 8007086:	d008      	beq.n	800709a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007088:	23ff      	movs	r3, #255	@ 0xff
 800708a:	757b      	strb	r3, [r7, #21]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007096:	849a      	strh	r2, [r3, #36]	@ 0x24
 8007098:	e063      	b.n	8007162 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b0f      	cmp	r3, #15
 800709e:	d137      	bne.n	8007110 <dir_find+0x11c>
				if (dp->lfn) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d05a      	beq.n	8007162 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80070ac:	7dbb      	ldrb	r3, [r7, #22]
 80070ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d010      	beq.n	80070d8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	7b5b      	ldrb	r3, [r3, #13]
 80070ba:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80070bc:	7dbb      	ldrb	r3, [r7, #22]
 80070be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c2:	75bb      	strb	r3, [r7, #22]
 80070c4:	7dbb      	ldrb	r3, [r7, #22]
 80070c6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ce:	88da      	ldrh	r2, [r3, #6]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d6:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80070d8:	7dba      	ldrb	r2, [r7, #22]
 80070da:	7d7b      	ldrb	r3, [r7, #21]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d114      	bne.n	800710a <dir_find+0x116>
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	330d      	adds	r3, #13
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	7d3a      	ldrb	r2, [r7, #20]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d10e      	bne.n	800710a <dir_find+0x116>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	6939      	ldr	r1, [r7, #16]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fdec 	bl	8006cd4 <cmp_lfn>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <dir_find+0x116>
 8007102:	7d7b      	ldrb	r3, [r7, #21]
 8007104:	3b01      	subs	r3, #1
 8007106:	b2db      	uxtb	r3, r3
 8007108:	e000      	b.n	800710c <dir_find+0x118>
 800710a:	23ff      	movs	r3, #255	@ 0xff
 800710c:	757b      	strb	r3, [r7, #21]
 800710e:	e028      	b.n	8007162 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007110:	7d7b      	ldrb	r3, [r7, #21]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d107      	bne.n	8007126 <dir_find+0x132>
 8007116:	6938      	ldr	r0, [r7, #16]
 8007118:	f7ff ff4c 	bl	8006fb4 <sum_sfn>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	7d3b      	ldrb	r3, [r7, #20]
 8007122:	4293      	cmp	r3, r2
 8007124:	d02a      	beq.n	800717c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	330b      	adds	r3, #11
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <dir_find+0x15e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	220b      	movs	r2, #11
 8007144:	4619      	mov	r1, r3
 8007146:	6938      	ldr	r0, [r7, #16]
 8007148:	f7fe fc0e 	bl	8005968 <mem_cmp>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d016      	beq.n	8007180 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007152:	23ff      	movs	r3, #255	@ 0xff
 8007154:	757b      	strb	r3, [r7, #21]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007160:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007162:	2100      	movs	r1, #0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff fbc9 	bl	80068fc <dir_next>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f43f af58 	beq.w	8007026 <dir_find+0x32>
 8007176:	e004      	b.n	8007182 <dir_find+0x18e>
		if (res != FR_OK) break;
 8007178:	bf00      	nop
 800717a:	e002      	b.n	8007182 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800717c:	bf00      	nop
 800717e:	e000      	b.n	8007182 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007180:	bf00      	nop

	return res;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08c      	sub	sp, #48	@ 0x30
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80071a8:	f107 030c 	add.w	r3, r7, #12
 80071ac:	220c      	movs	r2, #12
 80071ae:	6a39      	ldr	r1, [r7, #32]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fba1 	bl	80058f8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d03b      	beq.n	8007238 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	330b      	adds	r3, #11
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ce:	461a      	mov	r2, r3
 80071d0:	2300      	movs	r3, #0
 80071d2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80071d4:	2301      	movs	r3, #1
 80071d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071d8:	e013      	b.n	8007202 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80071da:	f107 010c 	add.w	r1, r7, #12
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	6a38      	ldr	r0, [r7, #32]
 80071e4:	f7ff fe58 	bl	8006e98 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ff03 	bl	8006ff4 <dir_find>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80071f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	3301      	adds	r3, #1
 8007200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	2b63      	cmp	r3, #99	@ 0x63
 8007206:	d9e8      	bls.n	80071da <dir_register+0x4e>
 8007208:	e000      	b.n	800720c <dir_register+0x80>
			if (res != FR_OK) break;
 800720a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	2b64      	cmp	r3, #100	@ 0x64
 8007210:	d101      	bne.n	8007216 <dir_register+0x8a>
 8007212:	2307      	movs	r3, #7
 8007214:	e0d8      	b.n	80073c8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007216:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800721a:	2b04      	cmp	r3, #4
 800721c:	d002      	beq.n	8007224 <dir_register+0x98>
 800721e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007222:	e0d1      	b.n	80073c8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	330b      	adds	r3, #11
 8007228:	7dfa      	ldrb	r2, [r7, #23]
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007232:	461a      	mov	r2, r3
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d014      	beq.n	800726c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8007242:	2300      	movs	r3, #0
 8007244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007246:	e002      	b.n	800724e <dir_register+0xc2>
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	3301      	adds	r3, #1
 800724c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800724e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f5      	bne.n	8007248 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725e:	3319      	adds	r3, #25
 8007260:	4a5b      	ldr	r2, [pc, #364]	@ (80073d0 <dir_register+0x244>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	627b      	str	r3, [r7, #36]	@ 0x24
 800726a:	e001      	b.n	8007270 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800726c:	2301      	movs	r3, #1
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fc8c 	bl	8006b90 <dir_alloc>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800727e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007282:	2b00      	cmp	r3, #0
 8007284:	d15b      	bne.n	800733e <dir_register+0x1b2>
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	3b01      	subs	r3, #1
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	d055      	beq.n	800733e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007298:	88db      	ldrh	r3, [r3, #6]
 800729a:	461a      	mov	r2, r3
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fa5c 	bl	8006760 <dir_sdi>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80072ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d143      	bne.n	800733e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff fe78 	bl	8006fb4 <sum_sfn>
 80072c4:	4603      	mov	r3, r0
 80072c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe fd94 	bl	8005e08 <move_window>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80072e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d126      	bne.n	800733c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072f4:	6a18      	ldr	r0, [r3, #32]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072fc:	6959      	ldr	r1, [r3, #20]
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	b2da      	uxtb	r2, r3
 8007302:	7efb      	ldrb	r3, [r7, #27]
 8007304:	f7ff fd54 	bl	8006db0 <fit_lfn>
				dp->fs->wflag = 1;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007314:	2201      	movs	r2, #1
 8007316:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8007318:	2100      	movs	r1, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff faee 	bl	80068fc <dir_next>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <dir_register+0x1b2>
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	3b01      	subs	r3, #1
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1c6      	bne.n	80072c8 <dir_register+0x13c>
 800733a:	e000      	b.n	800733e <dir_register+0x1b2>
				if (res != FR_OK) break;
 800733c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800733e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007342:	2b00      	cmp	r3, #0
 8007344:	d13e      	bne.n	80073c4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f7fe fd55 	bl	8005e08 <move_window>
 800735e:	4603      	mov	r3, r0
 8007360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007364:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007368:	2b00      	cmp	r3, #0
 800736a:	d12b      	bne.n	80073c4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	2220      	movs	r2, #32
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fadb 	bl	8005934 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007384:	6958      	ldr	r0, [r3, #20]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	220b      	movs	r2, #11
 8007390:	4619      	mov	r1, r3
 8007392:	f7fe fab1 	bl	80058f8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	330b      	adds	r3, #11
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	330c      	adds	r3, #12
 80073ac:	f002 0218 	and.w	r2, r2, #24
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073c0:	2201      	movs	r2, #1
 80073c2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80073c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3730      	adds	r7, #48	@ 0x30
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	4ec4ec4f 	.word	0x4ec4ec4f

080073d4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	@ 0x28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	e002      	b.n	80073ec <create_name+0x18>
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3301      	adds	r3, #1
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80073f2:	d0f8      	beq.n	80073e6 <create_name+0x12>
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80073fa:	d0f4      	beq.n	80073e6 <create_name+0x12>
	lfn = dp->lfn;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	61ba      	str	r2, [r7, #24]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4413      	add	r3, r2
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800741c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800741e:	2b1f      	cmp	r3, #31
 8007420:	d92f      	bls.n	8007482 <create_name+0xae>
 8007422:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007424:	2b2f      	cmp	r3, #47	@ 0x2f
 8007426:	d02c      	beq.n	8007482 <create_name+0xae>
 8007428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800742a:	2b5c      	cmp	r3, #92	@ 0x5c
 800742c:	d029      	beq.n	8007482 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2bfe      	cmp	r3, #254	@ 0xfe
 8007432:	d901      	bls.n	8007438 <create_name+0x64>
			return FR_INVALID_NAME;
 8007434:	2306      	movs	r3, #6
 8007436:	e186      	b.n	8007746 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007438:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800743a:	b2db      	uxtb	r3, r3
 800743c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800743e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007440:	2101      	movs	r1, #1
 8007442:	4618      	mov	r0, r3
 8007444:	f002 f946 	bl	80096d4 <ff_convert>
 8007448:	4603      	mov	r3, r0
 800744a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800744c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <create_name+0x82>
 8007452:	2306      	movs	r3, #6
 8007454:	e177      	b.n	8007746 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007458:	2b7f      	cmp	r3, #127	@ 0x7f
 800745a:	d809      	bhi.n	8007470 <create_name+0x9c>
 800745c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800745e:	4619      	mov	r1, r3
 8007460:	488e      	ldr	r0, [pc, #568]	@ (800769c <create_name+0x2c8>)
 8007462:	f7fe faa7 	bl	80059b4 <chk_chr>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <create_name+0x9c>
			return FR_INVALID_NAME;
 800746c:	2306      	movs	r3, #6
 800746e:	e16a      	b.n	8007746 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	617a      	str	r2, [r7, #20]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800747e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007480:	e7c5      	b.n	800740e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	441a      	add	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800748c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800748e:	2b1f      	cmp	r3, #31
 8007490:	d801      	bhi.n	8007496 <create_name+0xc2>
 8007492:	2304      	movs	r3, #4
 8007494:	e000      	b.n	8007498 <create_name+0xc4>
 8007496:	2300      	movs	r3, #0
 8007498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800749c:	e011      	b.n	80074c2 <create_name+0xee>
		w = lfn[di - 1];
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80074a4:	3b01      	subs	r3, #1
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80074b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d002      	beq.n	80074bc <create_name+0xe8>
 80074b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ba:	d106      	bne.n	80074ca <create_name+0xf6>
		di--;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3b01      	subs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1ea      	bne.n	800749e <create_name+0xca>
 80074c8:	e000      	b.n	80074cc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80074ca:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <create_name+0x102>
 80074d2:	2306      	movs	r3, #6
 80074d4:	e137      	b.n	8007746 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	2200      	movs	r2, #0
 80074e0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	220b      	movs	r2, #11
 80074ec:	2120      	movs	r1, #32
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fa20 	bl	8005934 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	e002      	b.n	8007500 <create_name+0x12c>
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3301      	adds	r3, #1
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	2b20      	cmp	r3, #32
 800750c:	d0f5      	beq.n	80074fa <create_name+0x126>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	2b2e      	cmp	r3, #46	@ 0x2e
 800751a:	d0ee      	beq.n	80074fa <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <create_name+0x162>
 8007522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007526:	f043 0303 	orr.w	r3, r3, #3
 800752a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800752e:	e002      	b.n	8007536 <create_name+0x162>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	3b01      	subs	r3, #1
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <create_name+0x17c>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007542:	3b01      	subs	r3, #1
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	2b2e      	cmp	r3, #46	@ 0x2e
 800754e:	d1ef      	bne.n	8007530 <create_name+0x15c>

	b = i = 0; ni = 8;
 8007550:	2300      	movs	r3, #0
 8007552:	623b      	str	r3, [r7, #32]
 8007554:	2300      	movs	r3, #0
 8007556:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800755a:	2308      	movs	r3, #8
 800755c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	61ba      	str	r2, [r7, #24]
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800756e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8091 	beq.w	8007698 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007576:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007578:	2b20      	cmp	r3, #32
 800757a:	d006      	beq.n	800758a <create_name+0x1b6>
 800757c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800757e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007580:	d10a      	bne.n	8007598 <create_name+0x1c4>
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	429a      	cmp	r2, r3
 8007588:	d006      	beq.n	8007598 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800758a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800758e:	f043 0303 	orr.w	r3, r3, #3
 8007592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007596:	e07e      	b.n	8007696 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007598:	6a3a      	ldr	r2, [r7, #32]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	429a      	cmp	r2, r3
 800759e:	d203      	bcs.n	80075a8 <create_name+0x1d4>
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d123      	bne.n	80075f0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	2b0b      	cmp	r3, #11
 80075ac:	d106      	bne.n	80075bc <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80075ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075b2:	f043 0303 	orr.w	r3, r3, #3
 80075b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80075ba:	e076      	b.n	80076aa <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d005      	beq.n	80075d0 <create_name+0x1fc>
 80075c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075c8:	f043 0303 	orr.w	r3, r3, #3
 80075cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d867      	bhi.n	80076a8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	2308      	movs	r3, #8
 80075de:	623b      	str	r3, [r7, #32]
 80075e0:	230b      	movs	r3, #11
 80075e2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80075e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80075ee:	e052      	b.n	8007696 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80075f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80075f4:	d914      	bls.n	8007620 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80075f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f002 f86a 	bl	80096d4 <ff_convert>
 8007600:	4603      	mov	r3, r0
 8007602:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007604:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <create_name+0x240>
 800760a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800760c:	3b80      	subs	r3, #128	@ 0x80
 800760e:	4a24      	ldr	r2, [pc, #144]	@ (80076a0 <create_name+0x2cc>)
 8007610:	5cd3      	ldrb	r3, [r2, r3]
 8007612:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007618:	f043 0302 	orr.w	r3, r3, #2
 800761c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <create_name+0x262>
 8007626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007628:	4619      	mov	r1, r3
 800762a:	481e      	ldr	r0, [pc, #120]	@ (80076a4 <create_name+0x2d0>)
 800762c:	f7fe f9c2 	bl	80059b4 <chk_chr>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d008      	beq.n	8007648 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007636:	235f      	movs	r3, #95	@ 0x5f
 8007638:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800763a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800763e:	f043 0303 	orr.w	r3, r3, #3
 8007642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007646:	e01b      	b.n	8007680 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d909      	bls.n	8007662 <create_name+0x28e>
 800764e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007650:	2b5a      	cmp	r3, #90	@ 0x5a
 8007652:	d806      	bhi.n	8007662 <create_name+0x28e>
					b |= 2;
 8007654:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007658:	f043 0302 	orr.w	r3, r3, #2
 800765c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007660:	e00e      	b.n	8007680 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007664:	2b60      	cmp	r3, #96	@ 0x60
 8007666:	d90b      	bls.n	8007680 <create_name+0x2ac>
 8007668:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800766a:	2b7a      	cmp	r3, #122	@ 0x7a
 800766c:	d808      	bhi.n	8007680 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800766e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007672:	f043 0301 	orr.w	r3, r3, #1
 8007676:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800767a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800767c:	3b20      	subs	r3, #32
 800767e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	6239      	str	r1, [r7, #32]
 800768e:	4413      	add	r3, r2
 8007690:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007696:	e762      	b.n	800755e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8007698:	bf00      	nop
 800769a:	e006      	b.n	80076aa <create_name+0x2d6>
 800769c:	0800cfd0 	.word	0x0800cfd0
 80076a0:	0800d684 	.word	0x0800d684
 80076a4:	0800cfdc 	.word	0x0800cfdc
			if (si > di) break;			/* No extension */
 80076a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2be5      	cmp	r3, #229	@ 0xe5
 80076b6:	d105      	bne.n	80076c4 <create_name+0x2f0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	2205      	movs	r2, #5
 80076c2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	d104      	bne.n	80076d4 <create_name+0x300>
 80076ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80076d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076d8:	f003 030c 	and.w	r3, r3, #12
 80076dc:	2b0c      	cmp	r3, #12
 80076de:	d005      	beq.n	80076ec <create_name+0x318>
 80076e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d105      	bne.n	80076f8 <create_name+0x324>
		cf |= NS_LFN;
 80076ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076f0:	f043 0302 	orr.w	r3, r3, #2
 80076f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80076f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d117      	bne.n	8007734 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007704:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	2b01      	cmp	r3, #1
 800770e:	d105      	bne.n	800771c <create_name+0x348>
 8007710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007714:	f043 0310 	orr.w	r3, r3, #16
 8007718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800771c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b04      	cmp	r3, #4
 8007726:	d105      	bne.n	8007734 <create_name+0x360>
 8007728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800772c:	f043 0308 	orr.w	r3, r3, #8
 8007730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	330b      	adds	r3, #11
 800773e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007742:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007744:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8007746:	4618      	mov	r0, r3
 8007748:	3728      	adds	r7, #40	@ 0x28
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop

08007750 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007760:	d003      	beq.n	800776a <follow_path+0x1a>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b5c      	cmp	r3, #92	@ 0x5c
 8007768:	d102      	bne.n	8007770 <follow_path+0x20>
		path++;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007776:	461a      	mov	r2, r3
 8007778:	2300      	movs	r3, #0
 800777a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b1f      	cmp	r3, #31
 8007782:	d80c      	bhi.n	800779e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fe ffea 	bl	8006760 <dir_sdi>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007796:	461a      	mov	r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	6153      	str	r3, [r2, #20]
 800779c:	e049      	b.n	8007832 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800779e:	463b      	mov	r3, r7
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff fe16 	bl	80073d4 <create_name>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d13a      	bne.n	8007828 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff fc1e 	bl	8006ff4 <dir_find>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	7adb      	ldrb	r3, [r3, #11]
 80077c6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d12b      	bne.n	800782c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d126      	bne.n	800782c <follow_path+0xdc>
 80077de:	2305      	movs	r3, #5
 80077e0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80077e2:	e023      	b.n	800782c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d120      	bne.n	8007830 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	330b      	adds	r3, #11
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8007806:	2305      	movs	r3, #5
 8007808:	73fb      	strb	r3, [r7, #15]
 800780a:	e012      	b.n	8007832 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fa08 	bl	8006c2c <ld_clust>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007824:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007826:	e7ba      	b.n	800779e <follow_path+0x4e>
			if (res != FR_OK) break;
 8007828:	bf00      	nop
 800782a:	e002      	b.n	8007832 <follow_path+0xe2>
				break;
 800782c:	bf00      	nop
 800782e:	e000      	b.n	8007832 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007830:	bf00      	nop
		}
	}

	return res;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007844:	f04f 33ff 	mov.w	r3, #4294967295
 8007848:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d031      	beq.n	80078b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	e002      	b.n	8007860 <get_ldnumber+0x24>
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	3301      	adds	r3, #1
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b1f      	cmp	r3, #31
 8007866:	d903      	bls.n	8007870 <get_ldnumber+0x34>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b3a      	cmp	r3, #58	@ 0x3a
 800786e:	d1f4      	bne.n	800785a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b3a      	cmp	r3, #58	@ 0x3a
 8007876:	d11c      	bne.n	80078b2 <get_ldnumber+0x76>
			tp = *path;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	60fa      	str	r2, [r7, #12]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	3b30      	subs	r3, #48	@ 0x30
 8007888:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b09      	cmp	r3, #9
 800788e:	d80e      	bhi.n	80078ae <get_ldnumber+0x72>
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	429a      	cmp	r2, r3
 8007896:	d10a      	bne.n	80078ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <get_ldnumber+0x72>
					vol = (int)i;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	3301      	adds	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	e002      	b.n	80078b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80078b6:	693b      	ldr	r3, [r7, #16]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr
	...

080078c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078d4:	2200      	movs	r2, #0
 80078d6:	711a      	strb	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078de:	461a      	mov	r2, r3
 80078e0:	f04f 33ff 	mov.w	r3, #4294967295
 80078e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7fe fa8d 	bl	8005e08 <move_window>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <check_fs+0x34>
		return 3;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e04a      	b.n	800798e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80078fe:	3301      	adds	r3, #1
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	b21a      	sxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800790c:	b21b      	sxth	r3, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	b21b      	sxth	r3, r3
 8007912:	4a21      	ldr	r2, [pc, #132]	@ (8007998 <check_fs+0xd4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d001      	beq.n	800791c <check_fs+0x58>
		return 2;
 8007918:	2302      	movs	r3, #2
 800791a:	e038      	b.n	800798e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3336      	adds	r3, #54	@ 0x36
 8007920:	3303      	adds	r3, #3
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	061a      	lsls	r2, r3, #24
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3336      	adds	r3, #54	@ 0x36
 800792a:	3302      	adds	r3, #2
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	041b      	lsls	r3, r3, #16
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3336      	adds	r3, #54	@ 0x36
 8007936:	3301      	adds	r3, #1
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	4313      	orrs	r3, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8007944:	4313      	orrs	r3, r2
 8007946:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800794a:	4a14      	ldr	r2, [pc, #80]	@ (800799c <check_fs+0xd8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d101      	bne.n	8007954 <check_fs+0x90>
		return 0;
 8007950:	2300      	movs	r3, #0
 8007952:	e01c      	b.n	800798e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3352      	adds	r3, #82	@ 0x52
 8007958:	3303      	adds	r3, #3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	061a      	lsls	r2, r3, #24
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3352      	adds	r3, #82	@ 0x52
 8007962:	3302      	adds	r3, #2
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	431a      	orrs	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3352      	adds	r3, #82	@ 0x52
 800796e:	3301      	adds	r3, #1
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	4313      	orrs	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800797c:	4313      	orrs	r3, r2
 800797e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007982:	4a06      	ldr	r2, [pc, #24]	@ (800799c <check_fs+0xd8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d101      	bne.n	800798c <check_fs+0xc8>
		return 0;
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <check_fs+0xca>

	return 1;
 800798c:	2301      	movs	r3, #1
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	ffffaa55 	.word	0xffffaa55
 800799c:	00544146 	.word	0x00544146

080079a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b096      	sub	sp, #88	@ 0x58
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079b4:	68b8      	ldr	r0, [r7, #8]
 80079b6:	f7ff ff41 	bl	800783c <get_ldnumber>
 80079ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da01      	bge.n	80079c6 <find_volume+0x26>
 80079c2:	230b      	movs	r3, #11
 80079c4:	e311      	b.n	8007fea <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079c6:	4a98      	ldr	r2, [pc, #608]	@ (8007c28 <find_volume+0x288>)
 80079c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <find_volume+0x3a>
 80079d6:	230c      	movs	r3, #12
 80079d8:	e307      	b.n	8007fea <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079de:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01c      	beq.n	8007a26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fd fee1 	bl	80057bc <disk_status>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10c      	bne.n	8007a26 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <find_volume+0x82>
 8007a12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a1e:	230a      	movs	r3, #10
 8007a20:	e2e3      	b.n	8007fea <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007a22:	2300      	movs	r3, #0
 8007a24:	e2e1      	b.n	8007fea <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fd fed3 	bl	80057f0 <disk_initialize>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007a50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e2c4      	b.n	8007fea <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007a60:	79fb      	ldrb	r3, [r7, #7]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <find_volume+0xd6>
 8007a66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007a72:	230a      	movs	r3, #10
 8007a74:	e2b9      	b.n	8007fea <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a7c:	7858      	ldrb	r0, [r3, #1]
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a84:	330a      	adds	r3, #10
 8007a86:	461a      	mov	r2, r3
 8007a88:	2102      	movs	r1, #2
 8007a8a:	f7fd ff17 	bl	80058bc <disk_ioctl>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10d      	bne.n	8007ab0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a9a:	895b      	ldrh	r3, [r3, #10]
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa0:	d306      	bcc.n	8007ab0 <find_volume+0x110>
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aa8:	895b      	ldrh	r3, [r3, #10]
 8007aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aae:	d901      	bls.n	8007ab4 <find_volume+0x114>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e29a      	b.n	8007fea <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007ab8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007aba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007abc:	f7ff ff02 	bl	80078c4 <check_fs>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007ac6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d153      	bne.n	8007b76 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007ace:	2300      	movs	r3, #0
 8007ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ad2:	e028      	b.n	8007b26 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007ade:	4413      	add	r3, r2
 8007ae0:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <find_volume+0x172>
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	330b      	adds	r3, #11
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	061a      	lsls	r2, r3, #24
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	330a      	adds	r3, #10
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	431a      	orrs	r2, r3
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	3309      	adds	r3, #9
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	4313      	orrs	r3, r2
 8007b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b0a:	3208      	adds	r2, #8
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	e000      	b.n	8007b14 <find_volume+0x174>
 8007b12:	2200      	movs	r2, #0
 8007b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	3358      	adds	r3, #88	@ 0x58
 8007b1a:	443b      	add	r3, r7
 8007b1c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b22:	3301      	adds	r3, #1
 8007b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d9d3      	bls.n	8007ad4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <find_volume+0x19c>
 8007b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	3358      	adds	r3, #88	@ 0x58
 8007b42:	443b      	add	r3, r7
 8007b44:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007b48:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <find_volume+0x1bc>
 8007b50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b54:	f7ff feb6 	bl	80078c4 <check_fs>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	e000      	b.n	8007b5e <find_volume+0x1be>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007b62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <find_volume+0x1d6>
 8007b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d9e2      	bls.n	8007b3c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d101      	bne.n	8007b82 <find_volume+0x1e2>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e233      	b.n	8007fea <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007b82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <find_volume+0x1ee>
 8007b8a:	230d      	movs	r3, #13
 8007b8c:	e22d      	b.n	8007fea <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	7b1b      	ldrb	r3, [r3, #12]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	b21a      	sxth	r2, r3
 8007b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b98:	7adb      	ldrb	r3, [r3, #11]
 8007b9a:	b21b      	sxth	r3, r3
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	b21a      	sxth	r2, r3
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba6:	895b      	ldrh	r3, [r3, #10]
 8007ba8:	b21b      	sxth	r3, r3
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d001      	beq.n	8007bb2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007bae:	230d      	movs	r3, #13
 8007bb0:	e21b      	b.n	8007fea <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	7ddb      	ldrb	r3, [r3, #23]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	b21a      	sxth	r2, r3
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	7d9b      	ldrb	r3, [r3, #22]
 8007bbe:	b21b      	sxth	r3, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	b21b      	sxth	r3, r3
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d112      	bne.n	8007bf4 <find_volume+0x254>
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007bd4:	061a      	lsls	r2, r3, #24
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007bdc:	041b      	lsls	r3, r3, #16
 8007bde:	431a      	orrs	r2, r3
 8007be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	4313      	orrs	r3, r2
 8007bea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bec:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfe:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c02:	7c1a      	ldrb	r2, [r3, #16]
 8007c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c0a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c12:	78db      	ldrb	r3, [r3, #3]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d009      	beq.n	8007c2c <find_volume+0x28c>
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c1e:	78db      	ldrb	r3, [r3, #3]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d003      	beq.n	8007c2c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007c24:	230d      	movs	r3, #13
 8007c26:	e1e0      	b.n	8007fea <find_volume+0x64a>
 8007c28:	200024d4 	.word	0x200024d4
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c40:	7b5a      	ldrb	r2, [r3, #13]
 8007c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c48:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c50:	789b      	ldrb	r3, [r3, #2]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00c      	beq.n	8007c70 <find_volume+0x2d0>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c5c:	789b      	ldrb	r3, [r3, #2]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c66:	789b      	ldrb	r3, [r3, #2]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007c70:	230d      	movs	r3, #13
 8007c72:	e1ba      	b.n	8007fea <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c76:	7c9b      	ldrb	r3, [r3, #18]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	b21a      	sxth	r2, r3
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7e:	7c5b      	ldrb	r3, [r3, #17]
 8007c80:	b21b      	sxth	r3, r3
 8007c82:	4313      	orrs	r3, r2
 8007c84:	b21b      	sxth	r3, r3
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c8e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c96:	891b      	ldrh	r3, [r3, #8]
 8007c98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c9e:	8952      	ldrh	r2, [r2, #10]
 8007ca0:	0952      	lsrs	r2, r2, #5
 8007ca2:	b292      	uxth	r2, r2
 8007ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ca8:	fb01 f202 	mul.w	r2, r1, r2
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007cb4:	230d      	movs	r3, #13
 8007cb6:	e198      	b.n	8007fea <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cba:	7d1b      	ldrb	r3, [r3, #20]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b21a      	sxth	r2, r3
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	7cdb      	ldrb	r3, [r3, #19]
 8007cc4:	b21b      	sxth	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b21b      	sxth	r3, r3
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d112      	bne.n	8007cfa <find_volume+0x35a>
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007cda:	061a      	lsls	r2, r3, #24
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cde:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007ce2:	041b      	lsls	r3, r3, #16
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cf2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	7bdb      	ldrb	r3, [r3, #15]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	b21a      	sxth	r2, r3
 8007d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d04:	7b9b      	ldrb	r3, [r3, #14]
 8007d06:	b21b      	sxth	r3, r3
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	b21b      	sxth	r3, r3
 8007d0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007d0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <find_volume+0x378>
 8007d14:	230d      	movs	r3, #13
 8007d16:	e168      	b.n	8007fea <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007d18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d1c:	4413      	add	r3, r2
 8007d1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d24:	8911      	ldrh	r1, [r2, #8]
 8007d26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d2c:	8952      	ldrh	r2, [r2, #10]
 8007d2e:	0952      	lsrs	r2, r2, #5
 8007d30:	b292      	uxth	r2, r2
 8007d32:	fbb1 f2f2 	udiv	r2, r1, r2
 8007d36:	b292      	uxth	r2, r2
 8007d38:	4413      	add	r3, r2
 8007d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d201      	bcs.n	8007d48 <find_volume+0x3a8>
 8007d44:	230d      	movs	r3, #13
 8007d46:	e150      	b.n	8007fea <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007d48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d54:	7892      	ldrb	r2, [r2, #2]
 8007d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d5a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <find_volume+0x3c6>
 8007d62:	230d      	movs	r3, #13
 8007d64:	e141      	b.n	8007fea <find_volume+0x64a>
	fmt = FS_FAT12;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d902      	bls.n	8007d7c <find_volume+0x3dc>
 8007d76:	2302      	movs	r3, #2
 8007d78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d902      	bls.n	8007d8c <find_volume+0x3ec>
 8007d86:	2303      	movs	r3, #3
 8007d88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	3302      	adds	r3, #2
 8007d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d96:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007da2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007da4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007da8:	4413      	add	r3, r2
 8007daa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007db0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007db2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db6:	4413      	add	r3, r2
 8007db8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007dbe:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8007dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d124      	bne.n	8007e12 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dce:	891b      	ldrh	r3, [r3, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <find_volume+0x438>
 8007dd4:	230d      	movs	r3, #13
 8007dd6:	e108      	b.n	8007fea <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dda:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007dde:	061a      	lsls	r2, r3, #24
 8007de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	431a      	orrs	r2, r3
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	4313      	orrs	r3, r2
 8007df4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007df6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e02:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e10:	e02b      	b.n	8007e6a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e18:	891b      	ldrh	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <find_volume+0x482>
 8007e1e:	230d      	movs	r3, #13
 8007e20:	e0e3      	b.n	8007fea <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e28:	6a1a      	ldr	r2, [r3, #32]
 8007e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e2c:	4413      	add	r3, r2
 8007e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e34:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d105      	bne.n	8007e4a <find_volume+0x4aa>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	e00e      	b.n	8007e68 <find_volume+0x4c8>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e50:	695a      	ldr	r2, [r3, #20]
 8007e52:	4613      	mov	r3, r2
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	085a      	lsrs	r2, r3, #1
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007e68:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e78:	895b      	ldrh	r3, [r3, #10]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e7e:	440b      	add	r3, r1
 8007e80:	3b01      	subs	r3, #1
 8007e82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e84:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8007e88:	8949      	ldrh	r1, [r1, #10]
 8007e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d201      	bcs.n	8007e96 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007e92:	230d      	movs	r3, #13
 8007e94:	e0a9      	b.n	8007fea <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea2:	6113      	str	r3, [r2, #16]
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007eae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007eb2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eba:	2280      	movs	r2, #128	@ 0x80
 8007ebc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007ebe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d17a      	bne.n	8007fbc <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	b21a      	sxth	r2, r3
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ed6:	b21b      	sxth	r3, r3
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	b21b      	sxth	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d16d      	bne.n	8007fbc <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ee8:	f7fd ff8e 	bl	8005e08 <move_window>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d164      	bne.n	8007fbc <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ef8:	2200      	movs	r2, #0
 8007efa:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efe:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	b21a      	sxth	r2, r3
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007f0c:	b21b      	sxth	r3, r3
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	b21b      	sxth	r3, r3
 8007f12:	4a38      	ldr	r2, [pc, #224]	@ (8007ff4 <find_volume+0x654>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d151      	bne.n	8007fbc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	78db      	ldrb	r3, [r3, #3]
 8007f1c:	061a      	lsls	r2, r3, #24
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f20:	789b      	ldrb	r3, [r3, #2]
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	431a      	orrs	r2, r3
 8007f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	021b      	lsls	r3, r3, #8
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f30:	7812      	ldrb	r2, [r2, #0]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	4a30      	ldr	r2, [pc, #192]	@ (8007ff8 <find_volume+0x658>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d140      	bne.n	8007fbc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8007f40:	061a      	lsls	r2, r3, #24
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	4313      	orrs	r3, r2
 8007f56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f58:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	4a27      	ldr	r2, [pc, #156]	@ (8007ffc <find_volume+0x65c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d12b      	bne.n	8007fbc <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f66:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8007f6a:	061a      	lsls	r2, r3, #24
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	431a      	orrs	r2, r3
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f82:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8007f86:	4313      	orrs	r3, r2
 8007f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f8e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f92:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8007f96:	061a      	lsls	r2, r3, #24
 8007f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9a:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa4:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	4313      	orrs	r3, r2
 8007fac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fae:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007fba:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fc8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <find_volume+0x660>)
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008000 <find_volume+0x660>)
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008000 <find_volume+0x660>)
 8007fd8:	881a      	ldrh	r2, [r3, #0]
 8007fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fe0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007fe2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fe4:	f7fd fe94 	bl	8005d10 <clear_lock>
#endif

	return FR_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3758      	adds	r7, #88	@ 0x58
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	ffffaa55 	.word	0xffffaa55
 8007ff8:	41615252 	.word	0x41615252
 8007ffc:	61417272 	.word	0x61417272
 8008000:	200024d8 	.word	0x200024d8

08008004 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d02a      	beq.n	800806c <validate+0x68>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d024      	beq.n	800806c <validate+0x68>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01b      	beq.n	800806c <validate+0x68>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008040:	88da      	ldrh	r2, [r3, #6]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008048:	889b      	ldrh	r3, [r3, #4]
 800804a:	429a      	cmp	r2, r3
 800804c:	d10e      	bne.n	800806c <validate+0x68>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd fbad 	bl	80057bc <disk_status>
 8008062:	4603      	mov	r3, r0
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800806c:	2309      	movs	r3, #9
 800806e:	e000      	b.n	8008072 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800808e:	f107 0310 	add.w	r3, r7, #16
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff fbd2 	bl	800783c <get_ldnumber>
 8008098:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	da01      	bge.n	80080a4 <f_mount+0x28>
 80080a0:	230b      	movs	r3, #11
 80080a2:	e02f      	b.n	8008104 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080a4:	4a19      	ldr	r2, [pc, #100]	@ (800810c <f_mount+0x90>)
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80080b4:	69b8      	ldr	r0, [r7, #24]
 80080b6:	f7fd fe2b 	bl	8005d10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	490d      	ldr	r1, [pc, #52]	@ (800810c <f_mount+0x90>)
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <f_mount+0x6e>
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d001      	beq.n	80080ee <f_mount+0x72>
 80080ea:	2300      	movs	r3, #0
 80080ec:	e00a      	b.n	8008104 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80080ee:	f107 0108 	add.w	r1, r7, #8
 80080f2:	f107 030c 	add.w	r3, r7, #12
 80080f6:	2200      	movs	r2, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff fc51 	bl	80079a0 <find_volume>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	200024d4 	.word	0x200024d4

08008110 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800811e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8008122:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008126:	f843 1c50 	str.w	r1, [r3, #-80]
 800812a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800812e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008132:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008136:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <f_open+0x32>
 800813e:	2309      	movs	r3, #9
 8008140:	e2f3      	b.n	800872a <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8008142:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008146:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800814a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800814e:	461a      	mov	r2, r3
 8008150:	2300      	movs	r3, #0
 8008152:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008154:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008158:	461a      	mov	r2, r3
 800815a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800815e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800816a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800816e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008172:	f023 0301 	bic.w	r3, r3, #1
 8008176:	b2da      	uxtb	r2, r3
 8008178:	f107 0118 	add.w	r1, r7, #24
 800817c:	3910      	subs	r1, #16
 800817e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008182:	3b18      	subs	r3, #24
 8008184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff fc09 	bl	80079a0 <find_volume>
 800818e:	4603      	mov	r3, r0
 8008190:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008194:	f102 0217 	add.w	r2, r2, #23
 8008198:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800819a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800819e:	f103 0317 	add.w	r3, r3, #23
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f040 82bb 	bne.w	8008720 <f_open+0x610>
		INIT_BUF(dj);
 80081aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80081ae:	461a      	mov	r2, r3
 80081b0:	f107 0318 	add.w	r3, r7, #24
 80081b4:	3b04      	subs	r3, #4
 80081b6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 80081ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80081be:	461a      	mov	r2, r3
 80081c0:	4bd3      	ldr	r3, [pc, #844]	@ (8008510 <f_open+0x400>)
 80081c2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80081c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80081ca:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80081ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80081d2:	3b18      	subs	r3, #24
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff faba 	bl	8007750 <follow_path>
 80081dc:	4603      	mov	r3, r0
 80081de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80081e2:	f102 0217 	add.w	r2, r2, #23
 80081e6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80081e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80081ec:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80081f0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80081f4:	f102 0210 	add.w	r2, r2, #16
 80081f8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80081fe:	f103 0317 	add.w	r3, r3, #23
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d124      	bne.n	8008252 <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8008208:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800820c:	f103 0310 	add.w	r3, r3, #16
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <f_open+0x114>
				res = FR_INVALID_NAME;
 8008216:	2306      	movs	r3, #6
 8008218:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800821c:	f102 0217 	add.w	r2, r2, #23
 8008220:	7013      	strb	r3, [r2, #0]
 8008222:	e016      	b.n	8008252 <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008224:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008228:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800822c:	2b01      	cmp	r3, #1
 800822e:	bf8c      	ite	hi
 8008230:	2301      	movhi	r3, #1
 8008232:	2300      	movls	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	461a      	mov	r2, r3
 8008238:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800823c:	3b18      	subs	r3, #24
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f7fd fbd1 	bl	80059e8 <chk_lock>
 8008246:	4603      	mov	r3, r0
 8008248:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800824c:	f102 0217 	add.w	r2, r2, #23
 8008250:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008252:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008256:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800825a:	f003 031c 	and.w	r3, r3, #28
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 813c 	beq.w	80084dc <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8008264:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008268:	f103 0317 	add.w	r3, r3, #23
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d02e      	beq.n	80082d0 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008272:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008276:	f103 0317 	add.w	r3, r3, #23
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b04      	cmp	r3, #4
 800827e:	d112      	bne.n	80082a6 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008280:	f7fd fc22 	bl	8005ac8 <enq_lock>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <f_open+0x18a>
 800828a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800828e:	3b18      	subs	r3, #24
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe ff7b 	bl	800718c <dir_register>
 8008296:	4603      	mov	r3, r0
 8008298:	e000      	b.n	800829c <f_open+0x18c>
 800829a:	2312      	movs	r3, #18
 800829c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80082a0:	f102 0217 	add.w	r2, r2, #23
 80082a4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80082aa:	461a      	mov	r2, r3
 80082ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80082b0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80082b4:	f043 0308 	orr.w	r3, r3, #8
 80082b8:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80082bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80082c0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80082c4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80082c8:	f102 0210 	add.w	r2, r2, #16
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	e01f      	b.n	8008310 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80082d4:	f103 0310 	add.w	r3, r3, #16
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	330b      	adds	r3, #11
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	f003 0311 	and.w	r3, r3, #17
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d006      	beq.n	80082f4 <f_open+0x1e4>
					res = FR_DENIED;
 80082e6:	2307      	movs	r3, #7
 80082e8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80082ec:	f102 0217 	add.w	r2, r2, #23
 80082f0:	7013      	strb	r3, [r2, #0]
 80082f2:	e00d      	b.n	8008310 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80082f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80082f8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <f_open+0x200>
						res = FR_EXIST;
 8008304:	2308      	movs	r3, #8
 8008306:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800830a:	f102 0217 	add.w	r2, r2, #23
 800830e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008310:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008314:	f103 0317 	add.w	r3, r3, #23
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f040 8113 	bne.w	8008546 <f_open+0x436>
 8008320:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008324:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 810a 	beq.w	8008546 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8008332:	f7fd f9e3 	bl	80056fc <get_fattime>
 8008336:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800833a:	f103 030c 	add.w	r3, r3, #12
 800833e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008340:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008344:	f103 0310 	add.w	r3, r3, #16
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	330e      	adds	r3, #14
 800834c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008350:	f102 020c 	add.w	r2, r2, #12
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800835e:	f103 030c 	add.w	r3, r3, #12
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	b29b      	uxth	r3, r3
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	b29a      	uxth	r2, r3
 800836a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800836e:	f103 0310 	add.w	r3, r3, #16
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	330f      	adds	r3, #15
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800837e:	f103 030c 	add.w	r3, r3, #12
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	0c1a      	lsrs	r2, r3, #16
 8008386:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800838a:	f103 0310 	add.w	r3, r3, #16
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3310      	adds	r3, #16
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800839a:	f103 030c 	add.w	r3, r3, #12
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	0e1a      	lsrs	r2, r3, #24
 80083a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80083a6:	f103 0310 	add.w	r3, r3, #16
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3311      	adds	r3, #17
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80083b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80083b6:	f103 0310 	add.w	r3, r3, #16
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330b      	adds	r3, #11
 80083be:	2200      	movs	r2, #0
 80083c0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80083c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80083c6:	f103 0310 	add.w	r3, r3, #16
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	331c      	adds	r3, #28
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80083d6:	f103 0310 	add.w	r3, r3, #16
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	331d      	adds	r3, #29
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80083e6:	f103 0310 	add.w	r3, r3, #16
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	331e      	adds	r3, #30
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80083f6:	f103 0310 	add.w	r3, r3, #16
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	331f      	adds	r3, #31
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008402:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008406:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800840a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800840e:	f102 0210 	add.w	r2, r2, #16
 8008412:	6811      	ldr	r1, [r2, #0]
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fc09 	bl	8006c2c <ld_clust>
 800841a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800841e:	f103 0308 	add.w	r3, r3, #8
 8008422:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008424:	2100      	movs	r1, #0
 8008426:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800842a:	f103 0310 	add.w	r3, r3, #16
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	f7fe fc2a 	bl	8006c88 <st_clust>
				dj.fs->wflag = 1;
 8008434:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008438:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800843c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008440:	2201      	movs	r2, #1
 8008442:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008444:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008448:	f103 0308 	add.w	r3, r3, #8
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d079      	beq.n	8008546 <f_open+0x436>
					dw = dj.fs->winsect;
 8008452:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008456:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800845a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008460:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008464:	f102 020c 	add.w	r2, r2, #12
 8008468:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800846a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800846e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8008472:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008476:	f102 0208 	add.w	r2, r2, #8
 800847a:	6811      	ldr	r1, [r2, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe f826 	bl	80064ce <remove_chain>
 8008482:	4603      	mov	r3, r0
 8008484:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008488:	f102 0217 	add.w	r2, r2, #23
 800848c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800848e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008492:	f103 0317 	add.w	r3, r3, #23
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d154      	bne.n	8008546 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800849c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80084a0:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 80084a4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80084a8:	f103 0308 	add.w	r3, r3, #8
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80084b4:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80084b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80084ba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80084be:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80084c2:	f102 020c 	add.w	r2, r2, #12
 80084c6:	6811      	ldr	r1, [r2, #0]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fd fc9d 	bl	8005e08 <move_window>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80084d4:	f102 0217 	add.w	r2, r2, #23
 80084d8:	7013      	strb	r3, [r2, #0]
 80084da:	e034      	b.n	8008546 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80084dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80084e0:	f103 0317 	add.w	r3, r3, #23
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d12d      	bne.n	8008546 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80084ea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80084ee:	f103 0310 	add.w	r3, r3, #16
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330b      	adds	r3, #11
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <f_open+0x404>
					res = FR_NO_FILE;
 8008500:	2304      	movs	r3, #4
 8008502:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008506:	f102 0217 	add.w	r2, r2, #23
 800850a:	7013      	strb	r3, [r2, #0]
 800850c:	e01b      	b.n	8008546 <f_open+0x436>
 800850e:	bf00      	nop
 8008510:	200024e8 	.word	0x200024e8
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008514:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008518:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d010      	beq.n	8008546 <f_open+0x436>
 8008524:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008528:	f103 0310 	add.w	r3, r3, #16
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	330b      	adds	r3, #11
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <f_open+0x436>
						res = FR_DENIED;
 800853a:	2307      	movs	r3, #7
 800853c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008540:	f102 0217 	add.w	r2, r2, #23
 8008544:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008546:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800854a:	f103 0317 	add.w	r3, r3, #23
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d155      	bne.n	8008600 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008554:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008558:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800855c:	f003 0308 	and.w	r3, r3, #8
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00a      	beq.n	800857a <f_open+0x46a>
				mode |= FA__WRITTEN;
 8008564:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008568:	461a      	mov	r2, r3
 800856a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800856e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008572:	f043 0320 	orr.w	r3, r3, #32
 8008576:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800857a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800857e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8008582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008588:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800858c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008590:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008594:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008596:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800859a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800859e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085a2:	461a      	mov	r2, r3
 80085a4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80085a8:	f103 0310 	add.w	r3, r3, #16
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80085b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80085b4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	bf8c      	ite	hi
 80085bc:	2301      	movhi	r3, #1
 80085be:	2300      	movls	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80085c8:	3b18      	subs	r3, #24
 80085ca:	4611      	mov	r1, r2
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fd fa9f 	bl	8005b10 <inc_lock>
 80085d2:	4602      	mov	r2, r0
 80085d4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80085d8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085e0:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80085e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80085e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <f_open+0x4f0>
 80085f4:	2302      	movs	r3, #2
 80085f6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80085fa:	f102 0217 	add.w	r2, r2, #23
 80085fe:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008600:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008604:	f103 0317 	add.w	r3, r3, #23
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f040 8088 	bne.w	8008720 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 8008610:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008614:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800861c:	461a      	mov	r2, r3
 800861e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008622:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008626:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008628:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800862c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008634:	2200      	movs	r2, #0
 8008636:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008638:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800863c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8008640:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008644:	f102 0210 	add.w	r2, r2, #16
 8008648:	6811      	ldr	r1, [r2, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe faee 	bl	8006c2c <ld_clust>
 8008650:	4602      	mov	r2, r0
 8008652:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008656:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800865a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800865e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008660:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008664:	f103 0310 	add.w	r3, r3, #16
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	331f      	adds	r3, #31
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	061a      	lsls	r2, r3, #24
 8008670:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008674:	f103 0310 	add.w	r3, r3, #16
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	331e      	adds	r3, #30
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	041b      	lsls	r3, r3, #16
 8008680:	431a      	orrs	r2, r3
 8008682:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008686:	f103 0310 	add.w	r3, r3, #16
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	331d      	adds	r3, #29
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	4313      	orrs	r3, r2
 8008694:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008698:	f102 0210 	add.w	r2, r2, #16
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	321c      	adds	r2, #28
 80086a0:	7812      	ldrb	r2, [r2, #0]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80086a8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80086ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80086b0:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80086b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80086b6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086be:	461a      	mov	r2, r3
 80086c0:	2300      	movs	r3, #0
 80086c2:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80086c4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80086c8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086d0:	461a      	mov	r2, r3
 80086d2:	2300      	movs	r3, #0
 80086d4:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80086d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80086da:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086e2:	461a      	mov	r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80086e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80086ec:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80086f0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80086f4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80086f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80086fc:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80086fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008702:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008710:	88da      	ldrh	r2, [r3, #6]
 8008712:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8008716:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800871a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800871e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008720:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008724:	f103 0317 	add.w	r3, r3, #23
 8008728:	781b      	ldrb	r3, [r3, #0]
}
 800872a:	4618      	mov	r0, r3
 800872c:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop

08008738 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	@ 0x28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fc57 	bl	8008004 <validate>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <f_write+0x2c>
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	e21e      	b.n	8008ba2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800876a:	79db      	ldrb	r3, [r3, #7]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008776:	79db      	ldrb	r3, [r3, #7]
 8008778:	e213      	b.n	8008ba2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008780:	799b      	ldrb	r3, [r3, #6]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800878a:	2307      	movs	r3, #7
 800878c:	e209      	b.n	8008ba2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	f080 81d9 	bcs.w	8008b5a <f_write+0x422>
 80087a8:	2300      	movs	r3, #0
 80087aa:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80087ac:	e1d5      	b.n	8008b5a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087c2:	8952      	ldrh	r2, [r2, #10]
 80087c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80087c8:	fb01 f202 	mul.w	r2, r1, r2
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f040 8169 	bne.w	8008aa6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087e8:	8952      	ldrh	r2, [r2, #10]
 80087ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087fc:	789b      	ldrb	r3, [r3, #2]
 80087fe:	3b01      	subs	r3, #1
 8008800:	b2db      	uxtb	r3, r3
 8008802:	4013      	ands	r3, r2
 8008804:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008806:	7dbb      	ldrb	r3, [r7, #22]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d15f      	bne.n	80088cc <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d111      	bne.n	800883c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d126      	bne.n	8008876 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f7fd feac 	bl	8006590 <create_chain>
 8008838:	6278      	str	r0, [r7, #36]	@ 0x24
 800883a:	e01c      	b.n	8008876 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	4619      	mov	r1, r3
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7fd ff44 	bl	80066e0 <clmt_clust>
 8008858:	6278      	str	r0, [r7, #36]	@ 0x24
 800885a:	e00c      	b.n	8008876 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	4619      	mov	r1, r3
 800886e:	4610      	mov	r0, r2
 8008870:	f7fd fe8e 	bl	8006590 <create_chain>
 8008874:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 8173 	beq.w	8008b64 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	2b01      	cmp	r3, #1
 8008882:	d106      	bne.n	8008892 <f_write+0x15a>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800888a:	2202      	movs	r2, #2
 800888c:	71da      	strb	r2, [r3, #7]
 800888e:	2302      	movs	r3, #2
 8008890:	e187      	b.n	8008ba2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d106      	bne.n	80088a8 <f_write+0x170>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088a0:	2201      	movs	r2, #1
 80088a2:	71da      	strb	r2, [r3, #7]
 80088a4:	2301      	movs	r3, #1
 80088a6:	e17c      	b.n	8008ba2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088ae:	461a      	mov	r2, r3
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d105      	bne.n	80088cc <f_write+0x194>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088c6:	461a      	mov	r2, r3
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088d2:	799b      	ldrb	r3, [r3, #6]
 80088d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d023      	beq.n	8008924 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088e8:	7858      	ldrb	r0, [r3, #1]
 80088ea:	68f9      	ldr	r1, [r7, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f2:	699a      	ldr	r2, [r3, #24]
 80088f4:	2301      	movs	r3, #1
 80088f6:	f7fc ffc1 	bl	800587c <disk_write>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d006      	beq.n	800890e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008906:	2201      	movs	r2, #1
 8008908:	71da      	strb	r2, [r3, #7]
 800890a:	2301      	movs	r3, #1
 800890c:	e149      	b.n	8008ba2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008914:	799b      	ldrb	r3, [r3, #6]
 8008916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800891a:	b2da      	uxtb	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008922:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fd fb57 	bl	8005fea <clust2sect>
 800893c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d106      	bne.n	8008952 <f_write+0x21a>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800894a:	2202      	movs	r2, #2
 800894c:	71da      	strb	r2, [r3, #7]
 800894e:	2302      	movs	r3, #2
 8008950:	e127      	b.n	8008ba2 <f_write+0x46a>
			sect += csect;
 8008952:	7dbb      	ldrb	r3, [r7, #22]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4413      	add	r3, r2
 8008958:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008966:	895b      	ldrh	r3, [r3, #10]
 8008968:	461a      	mov	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008970:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d069      	beq.n	8008a4c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008978:	7dba      	ldrb	r2, [r7, #22]
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800898a:	7892      	ldrb	r2, [r2, #2]
 800898c:	4293      	cmp	r3, r2
 800898e:	d90a      	bls.n	80089a6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899c:	789b      	ldrb	r3, [r3, #2]
 800899e:	461a      	mov	r2, r3
 80089a0:	7dbb      	ldrb	r3, [r7, #22]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089b2:	7858      	ldrb	r0, [r3, #1]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	69b9      	ldr	r1, [r7, #24]
 80089ba:	f7fc ff5f 	bl	800587c <disk_write>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ca:	2201      	movs	r2, #1
 80089cc:	71da      	strb	r2, [r3, #7]
 80089ce:	2301      	movs	r3, #1
 80089d0:	e0e7      	b.n	8008ba2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d926      	bls.n	8008a32 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80089fe:	8952      	ldrh	r2, [r2, #10]
 8008a00:	fb02 f303 	mul.w	r3, r2, r3
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	18d1      	adds	r1, r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a14:	895b      	ldrh	r3, [r3, #10]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f7fc ff6e 	bl	80058f8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a22:	799b      	ldrb	r3, [r3, #6]
 8008a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a30:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a3e:	895b      	ldrh	r3, [r3, #10]
 8008a40:	461a      	mov	r2, r3
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	fb02 f303 	mul.w	r3, r2, r3
 8008a48:	623b      	str	r3, [r7, #32]
				continue;
 8008a4a:	e06e      	b.n	8008b2a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d01f      	beq.n	8008a9a <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d215      	bcs.n	8008a9a <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a7a:	7858      	ldrb	r0, [r3, #1]
 8008a7c:	68f9      	ldr	r1, [r7, #12]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	f7fc fedb 	bl	800583c <disk_read>
 8008a86:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d006      	beq.n	8008a9a <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a92:	2201      	movs	r2, #1
 8008a94:	71da      	strb	r2, [r3, #7]
 8008a96:	2301      	movs	r3, #1
 8008a98:	e083      	b.n	8008ba2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ab2:	895b      	ldrh	r3, [r3, #10]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008aca:	8952      	ldrh	r2, [r2, #10]
 8008acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ad0:	fb01 f202 	mul.w	r2, r1, r2
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	1ac3      	subs	r3, r0, r3
 8008ad8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008ada:	6a3a      	ldr	r2, [r7, #32]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d901      	bls.n	8008ae6 <f_write+0x3ae>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008af4:	6812      	ldr	r2, [r2, #0]
 8008af6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008afa:	8952      	ldrh	r2, [r2, #10]
 8008afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b00:	fb01 f202 	mul.w	r2, r1, r2
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	6a3a      	ldr	r2, [r7, #32]
 8008b0c:	69b9      	ldr	r1, [r7, #24]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fc fef2 	bl	80058f8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b1a:	799b      	ldrb	r3, [r3, #6]
 8008b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b28:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	4413      	add	r3, r2
 8008b30:	61bb      	str	r3, [r7, #24]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008b44:	6093      	str	r3, [r2, #8]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	441a      	add	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f47f ae26 	bne.w	80087ae <f_write+0x76>
 8008b62:	e000      	b.n	8008b66 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b64:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d907      	bls.n	8008b8a <f_write+0x452>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008b88:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b90:	799b      	ldrb	r3, [r3, #6]
 8008b92:	f043 0320 	orr.w	r3, r3, #32
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b9e:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3728      	adds	r7, #40	@ 0x28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fa26 	bl	8008004 <validate>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f040 80bc 	bne.w	8008d3c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bca:	799b      	ldrb	r3, [r3, #6]
 8008bcc:	f003 0320 	and.w	r3, r3, #32
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 80b3 	beq.w	8008d3c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bdc:	799b      	ldrb	r3, [r3, #6]
 8008bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d01e      	beq.n	8008c24 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bf2:	7858      	ldrb	r0, [r3, #1]
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bfc:	699a      	ldr	r2, [r3, #24]
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f7fc fe3c 	bl	800587c <disk_write>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e097      	b.n	8008d3e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c14:	799b      	ldrb	r3, [r3, #6]
 8008c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c22:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fd f8e6 	bl	8005e08 <move_window>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d17a      	bne.n	8008d3c <f_sync+0x192>
				dir = fp->dir_ptr;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	330b      	adds	r3, #11
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	330b      	adds	r3, #11
 8008c5a:	f042 0220 	orr.w	r2, r2, #32
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	331c      	adds	r3, #28
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	331d      	adds	r3, #29
 8008c84:	b2d2      	uxtb	r2, r2
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	0c1a      	lsrs	r2, r3, #16
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	331e      	adds	r3, #30
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	0e1a      	lsrs	r2, r3, #24
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	331f      	adds	r3, #31
 8008ca8:	b2d2      	uxtb	r2, r2
 8008caa:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f7fd ffe6 	bl	8006c88 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008cbc:	f7fc fd1e 	bl	80056fc <get_fattime>
 8008cc0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3316      	adds	r3, #22
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	3317      	adds	r3, #23
 8008cd8:	b2d2      	uxtb	r2, r2
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	0c1a      	lsrs	r2, r3, #16
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3318      	adds	r3, #24
 8008ce4:	b2d2      	uxtb	r2, r2
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	0e1a      	lsrs	r2, r3, #24
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	3319      	adds	r3, #25
 8008cf0:	b2d2      	uxtb	r2, r2
 8008cf2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3312      	adds	r3, #18
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	3313      	adds	r3, #19
 8008d00:	2200      	movs	r2, #0
 8008d02:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d0a:	799b      	ldrb	r3, [r3, #6]
 8008d0c:	f023 0320 	bic.w	r3, r3, #32
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d18:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d26:	2201      	movs	r2, #1
 8008d28:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fd f89a 	bl	8005e6c <sync_fs>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff ff2b 	bl	8008baa <f_sync>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d119      	bne.n	8008d92 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff f950 	bl	8008004 <validate>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d111      	bne.n	8008d92 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fc ff86 	bl	8005c88 <dec_lock>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2300      	movs	r3, #0
 8008d90:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b090      	sub	sp, #64	@ 0x40
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff f92c 	bl	8008004 <validate>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008db2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <f_lseek+0x24>
 8008dba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008dbe:	e2da      	b.n	8009376 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dc6:	79db      	ldrb	r3, [r3, #7]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dd2:	79db      	ldrb	r3, [r3, #7]
 8008dd4:	e2cf      	b.n	8009376 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 8124 	beq.w	800902c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d16c      	bne.n	8008ec6 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	1d1a      	adds	r2, r3, #4
 8008dfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	2302      	movs	r3, #2
 8008e02:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d046      	beq.n	8008ea2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	3302      	adds	r3, #2
 8008e20:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e28:	3301      	adds	r3, #1
 8008e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd f8fb 	bl	8006032 <get_fat>
 8008e3c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d806      	bhi.n	8008e52 <f_lseek+0xb6>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	71da      	strb	r2, [r3, #7]
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e291      	b.n	8009376 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e58:	d106      	bne.n	8008e68 <f_lseek+0xcc>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e60:	2201      	movs	r2, #1
 8008e62:	71da      	strb	r2, [r3, #7]
 8008e64:	2301      	movs	r3, #1
 8008e66:	e286      	b.n	8009376 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d0d7      	beq.n	8008e22 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d809      	bhi.n	8008e8e <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	1d1a      	adds	r2, r3, #4
 8008e88:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d3b8      	bcc.n	8008e14 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008eae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d803      	bhi.n	8008ebe <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e259      	b.n	8009372 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008ebe:	2311      	movs	r3, #17
 8008ec0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008ec4:	e255      	b.n	8009372 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d904      	bls.n	8008ede <f_lseek+0x142>
				ofs = fp->fsize;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8240 	beq.w	8009372 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7fd fbf1 	bl	80066e0 <clmt_clust>
 8008efe:	4602      	mov	r2, r0
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f06:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7fd f865 	bl	8005fea <clust2sect>
 8008f20:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <f_lseek+0x19a>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f2e:	2202      	movs	r2, #2
 8008f30:	71da      	strb	r2, [r3, #7]
 8008f32:	2302      	movs	r3, #2
 8008f34:	e21f      	b.n	8009376 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f40:	6812      	ldr	r2, [r2, #0]
 8008f42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f46:	8952      	ldrh	r2, [r2, #10]
 8008f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f52:	6812      	ldr	r2, [r2, #0]
 8008f54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f58:	7892      	ldrb	r2, [r2, #2]
 8008f5a:	3a01      	subs	r2, #1
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	4413      	add	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f72:	6812      	ldr	r2, [r2, #0]
 8008f74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f78:	8952      	ldrh	r2, [r2, #10]
 8008f7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f7e:	fb01 f202 	mul.w	r2, r1, r2
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 81f4 	beq.w	8009372 <f_lseek+0x5d6>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	f000 81ec 	beq.w	8009372 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fa0:	799b      	ldrb	r3, [r3, #6]
 8008fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d023      	beq.n	8008ff2 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fb6:	7858      	ldrb	r0, [r3, #1]
 8008fb8:	6879      	ldr	r1, [r7, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	f7fc fc5a 	bl	800587c <disk_write>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	71da      	strb	r2, [r3, #7]
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e1cc      	b.n	8009376 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fe2:	799b      	ldrb	r3, [r3, #6]
 8008fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ff0:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ffe:	7858      	ldrb	r0, [r3, #1]
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	2301      	movs	r3, #1
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	f7fc fc19 	bl	800583c <disk_read>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d006      	beq.n	800901e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009016:	2201      	movs	r2, #1
 8009018:	71da      	strb	r2, [r3, #7]
 800901a:	2301      	movs	r3, #1
 800901c:	e1ab      	b.n	8009376 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009024:	461a      	mov	r2, r3
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	6193      	str	r3, [r2, #24]
 800902a:	e1a2      	b.n	8009372 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d90c      	bls.n	8009054 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009040:	799b      	ldrb	r3, [r3, #6]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009068:	461a      	mov	r2, r3
 800906a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906c:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8100 	beq.w	8009276 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009082:	789b      	ldrb	r3, [r3, #2]
 8009084:	461a      	mov	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009092:	895b      	ldrh	r3, [r3, #10]
 8009094:	fb02 f303 	mul.w	r3, r2, r3
 8009098:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d021      	beq.n	80090e4 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	1e5a      	subs	r2, r3, #1
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	1e59      	subs	r1, r3, #1
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d315      	bcc.n	80090e4 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	1e5a      	subs	r2, r3, #1
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	425b      	negs	r3, r3
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80090c8:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090e2:	e031      	b.n	8009148 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80090ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d123      	bne.n	800913c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2100      	movs	r1, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fd fa46 	bl	8006590 <create_chain>
 8009104:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009108:	2b01      	cmp	r3, #1
 800910a:	d106      	bne.n	800911a <f_lseek+0x37e>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009112:	2202      	movs	r2, #2
 8009114:	71da      	strb	r2, [r3, #7]
 8009116:	2302      	movs	r3, #2
 8009118:	e12d      	b.n	8009376 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800911a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009120:	d106      	bne.n	8009130 <f_lseek+0x394>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009128:	2201      	movs	r2, #1
 800912a:	71da      	strb	r2, [r3, #7]
 800912c:	2301      	movs	r3, #1
 800912e:	e122      	b.n	8009376 <f_lseek+0x5da>
					fp->sclust = clst;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009136:	461a      	mov	r2, r3
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009142:	461a      	mov	r2, r3
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8009148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8093 	beq.w	8009276 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8009150:	e052      	b.n	80091f8 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009158:	799b      	ldrb	r3, [r3, #6]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00e      	beq.n	8009180 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800916c:	4618      	mov	r0, r3
 800916e:	f7fd fa0f 	bl	8006590 <create_chain>
 8009172:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10b      	bne.n	8009192 <f_lseek+0x3f6>
							ofs = bcs; break;
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	603b      	str	r3, [r7, #0]
 800917e:	e03f      	b.n	8009200 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800918a:	4618      	mov	r0, r3
 800918c:	f7fc ff51 	bl	8006032 <get_fat>
 8009190:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009198:	d106      	bne.n	80091a8 <f_lseek+0x40c>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091a0:	2201      	movs	r2, #1
 80091a2:	71da      	strb	r2, [r3, #7]
 80091a4:	2301      	movs	r3, #1
 80091a6:	e0e6      	b.n	8009376 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80091a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d909      	bls.n	80091c2 <f_lseek+0x426>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091be:	429a      	cmp	r2, r3
 80091c0:	d306      	bcc.n	80091d0 <f_lseek+0x434>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091c8:	2202      	movs	r2, #2
 80091ca:	71da      	strb	r2, [r3, #7]
 80091cc:	2302      	movs	r3, #2
 80091ce:	e0d2      	b.n	8009376 <f_lseek+0x5da>
					fp->clust = clst;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091d6:	461a      	mov	r2, r3
 80091d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091da:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	4413      	add	r3, r2
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80091ee:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d8a8      	bhi.n	8009152 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	4413      	add	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009212:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009220:	895b      	ldrh	r3, [r3, #10]
 8009222:	461a      	mov	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	fbb3 f1f2 	udiv	r1, r3, r2
 800922a:	fb01 f202 	mul.w	r2, r1, r2
 800922e:	1a9b      	subs	r3, r3, r2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d020      	beq.n	8009276 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800923e:	4618      	mov	r0, r3
 8009240:	f7fc fed3 	bl	8005fea <clust2sect>
 8009244:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <f_lseek+0x4be>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009252:	2202      	movs	r2, #2
 8009254:	71da      	strb	r2, [r3, #7]
 8009256:	2302      	movs	r3, #2
 8009258:	e08d      	b.n	8009376 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009266:	895b      	ldrh	r3, [r3, #10]
 8009268:	461a      	mov	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009272:	4413      	add	r3, r2
 8009274:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009284:	6812      	ldr	r2, [r2, #0]
 8009286:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800928a:	8952      	ldrh	r2, [r2, #10]
 800928c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009290:	fb01 f202 	mul.w	r2, r1, r2
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d04e      	beq.n	8009338 <f_lseek+0x59c>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d047      	beq.n	8009338 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092ae:	799b      	ldrb	r3, [r3, #6]
 80092b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d023      	beq.n	8009300 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092c4:	7858      	ldrb	r0, [r3, #1]
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092ce:	699a      	ldr	r2, [r3, #24]
 80092d0:	2301      	movs	r3, #1
 80092d2:	f7fc fad3 	bl	800587c <disk_write>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d006      	beq.n	80092ea <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092e2:	2201      	movs	r2, #1
 80092e4:	71da      	strb	r2, [r3, #7]
 80092e6:	2301      	movs	r3, #1
 80092e8:	e045      	b.n	8009376 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092f0:	799b      	ldrb	r3, [r3, #6]
 80092f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092fe:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800930c:	7858      	ldrb	r0, [r3, #1]
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	2301      	movs	r3, #1
 8009312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009314:	f7fc fa92 	bl	800583c <disk_read>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d006      	beq.n	800932c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009324:	2201      	movs	r2, #1
 8009326:	71da      	strb	r2, [r3, #7]
 8009328:	2301      	movs	r3, #1
 800932a:	e024      	b.n	8009376 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009332:	461a      	mov	r2, r3
 8009334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009336:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	429a      	cmp	r2, r3
 800934a:	d912      	bls.n	8009372 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800935a:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009362:	799b      	ldrb	r3, [r3, #6]
 8009364:	f043 0320 	orr.w	r3, r3, #32
 8009368:	b2da      	uxtb	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009370:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009372:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009376:	4618      	mov	r0, r3
 8009378:	3740      	adds	r7, #64	@ 0x40
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b08e      	sub	sp, #56	@ 0x38
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800938a:	f107 030c 	add.w	r3, r7, #12
 800938e:	2200      	movs	r2, #0
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fe fb04 	bl	80079a0 <find_volume>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80093a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f040 80bc 	bne.w	8009526 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093b4:	691a      	ldr	r2, [r3, #16]
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	3b02      	subs	r3, #2
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d806      	bhi.n	80093d2 <f_getfree+0x54>
			*nclst = fs->free_clust;
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	e0a9      	b.n	8009526 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 80093e0:	7efb      	ldrb	r3, [r7, #27]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d126      	bne.n	8009434 <f_getfree+0xb6>
				clst = 2;
 80093e6:	2302      	movs	r3, #2
 80093e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 80093ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093ec:	69f8      	ldr	r0, [r7, #28]
 80093ee:	f7fc fe20 	bl	8006032 <get_fat>
 80093f2:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d103      	bne.n	8009404 <f_getfree+0x86>
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009402:	e07c      	b.n	80094fe <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d103      	bne.n	8009412 <f_getfree+0x94>
 800940a:	2302      	movs	r3, #2
 800940c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009410:	e075      	b.n	80094fe <f_getfree+0x180>
					if (stat == 0) n++;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <f_getfree+0xa0>
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	3301      	adds	r3, #1
 800941c:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 800941e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009420:	3301      	adds	r3, #1
 8009422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800942e:	429a      	cmp	r2, r3
 8009430:	d3db      	bcc.n	80093ea <f_getfree+0x6c>
 8009432:	e064      	b.n	80094fe <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
 800944c:	2300      	movs	r3, #0
 800944e:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8009450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009452:	2b00      	cmp	r3, #0
 8009454:	d114      	bne.n	8009480 <f_getfree+0x102>
						res = move_window(fs, sect++);
 8009456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800945c:	4619      	mov	r1, r3
 800945e:	69f8      	ldr	r0, [r7, #28]
 8009460:	f7fc fcd2 	bl	8005e08 <move_window>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 800946a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800946e:	2b00      	cmp	r3, #0
 8009470:	d144      	bne.n	80094fc <f_getfree+0x17e>
						p = fs->win.d8;
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8009480:	7efb      	ldrb	r3, [r7, #27]
 8009482:	2b02      	cmp	r3, #2
 8009484:	d115      	bne.n	80094b2 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	3301      	adds	r3, #1
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	b21a      	sxth	r2, r3
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	b21b      	sxth	r3, r3
 8009496:	4313      	orrs	r3, r2
 8009498:	b21b      	sxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d102      	bne.n	80094a4 <f_getfree+0x126>
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	3301      	adds	r3, #1
 80094a2:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	3302      	adds	r3, #2
 80094a8:	623b      	str	r3, [r7, #32]
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ac:	3b02      	subs	r3, #2
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b0:	e01d      	b.n	80094ee <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	3303      	adds	r3, #3
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	061a      	lsls	r2, r3, #24
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	3302      	adds	r3, #2
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	041b      	lsls	r3, r3, #16
 80094c2:	431a      	orrs	r2, r3
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	3301      	adds	r3, #1
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	021b      	lsls	r3, r3, #8
 80094cc:	4313      	orrs	r3, r2
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	7812      	ldrb	r2, [r2, #0]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <f_getfree+0x164>
 80094dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094de:	3301      	adds	r3, #1
 80094e0:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	3304      	adds	r3, #4
 80094e6:	623b      	str	r3, [r7, #32]
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	3b04      	subs	r3, #4
 80094ec:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	3b01      	subs	r3, #1
 80094f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1aa      	bne.n	8009450 <f_getfree+0xd2>
 80094fa:	e000      	b.n	80094fe <f_getfree+0x180>
						if (res != FR_OK) break;
 80094fc:	bf00      	nop
			}
			fs->free_clust = n;
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009504:	461a      	mov	r2, r3
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009510:	795b      	ldrb	r3, [r3, #5]
 8009512:	f043 0301 	orr.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800951e:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009524:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8009526:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800952a:	4618      	mov	r0, r3
 800952c:	3738      	adds	r7, #56	@ 0x38
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	460b      	mov	r3, r1
 800953c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	2b0a      	cmp	r3, #10
 8009542:	d103      	bne.n	800954c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009544:	210d      	movs	r1, #13
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff fff3 	bl	8009532 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	db25      	blt.n	80095a4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	60fa      	str	r2, [r7, #12]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4413      	add	r3, r2
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b3c      	cmp	r3, #60	@ 0x3c
 800956a:	dd12      	ble.n	8009592 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f103 010c 	add.w	r1, r3, #12
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	f107 0308 	add.w	r3, r7, #8
 800957c:	f7ff f8dc 	bl	8008738 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	429a      	cmp	r2, r3
 8009586:	d101      	bne.n	800958c <putc_bfd+0x5a>
 8009588:	2300      	movs	r3, #0
 800958a:	e001      	b.n	8009590 <putc_bfd+0x5e>
 800958c:	f04f 33ff 	mov.w	r3, #4294967295
 8009590:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	609a      	str	r2, [r3, #8]
 80095a2:	e000      	b.n	80095a6 <putc_bfd+0x74>
	if (i < 0) return;
 80095a4:	bf00      	nop
}
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b097      	sub	sp, #92	@ 0x5c
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80095c2:	e009      	b.n	80095d8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	607a      	str	r2, [r7, #4]
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	f107 030c 	add.w	r3, r7, #12
 80095d0:	4611      	mov	r1, r2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff ffad 	bl	8009532 <putc_bfd>
	while (*str)			/* Put the string */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f1      	bne.n	80095c4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	db15      	blt.n	8009612 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	461c      	mov	r4, r3
 80095ec:	f107 0208 	add.w	r2, r7, #8
 80095f0:	f107 030c 	add.w	r3, r7, #12
 80095f4:	f103 010c 	add.w	r1, r3, #12
 80095f8:	4613      	mov	r3, r2
 80095fa:	4622      	mov	r2, r4
 80095fc:	f7ff f89c 	bl	8008738 <f_write>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d105      	bne.n	8009612 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4293      	cmp	r3, r2
 800960c:	d101      	bne.n	8009612 <f_puts+0x66>
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	e001      	b.n	8009616 <f_puts+0x6a>
	return EOF;
 8009612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009616:	4618      	mov	r0, r3
 8009618:	375c      	adds	r7, #92	@ 0x5c
 800961a:	46bd      	mov	sp, r7
 800961c:	bd90      	pop	{r4, r7, pc}
	...

08009620 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800962e:	2301      	movs	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009636:	4b1e      	ldr	r3, [pc, #120]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 8009638:	7a5b      	ldrb	r3, [r3, #9]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b01      	cmp	r3, #1
 800963e:	d831      	bhi.n	80096a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009640:	4b1b      	ldr	r3, [pc, #108]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 8009642:	7a5b      	ldrb	r3, [r3, #9]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	4b19      	ldr	r3, [pc, #100]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 800964a:	2100      	movs	r1, #0
 800964c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800964e:	4b18      	ldr	r3, [pc, #96]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 8009650:	7a5b      	ldrb	r3, [r3, #9]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	4a16      	ldr	r2, [pc, #88]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800965e:	4b14      	ldr	r3, [pc, #80]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 8009660:	7a5b      	ldrb	r3, [r3, #9]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	4b12      	ldr	r3, [pc, #72]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 8009668:	4413      	add	r3, r2
 800966a:	79fa      	ldrb	r2, [r7, #7]
 800966c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800966e:	4b10      	ldr	r3, [pc, #64]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 8009670:	7a5b      	ldrb	r3, [r3, #9]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	b2d1      	uxtb	r1, r2
 8009678:	4a0d      	ldr	r2, [pc, #52]	@ (80096b0 <FATFS_LinkDriverEx+0x90>)
 800967a:	7251      	strb	r1, [r2, #9]
 800967c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800967e:	7dbb      	ldrb	r3, [r7, #22]
 8009680:	3330      	adds	r3, #48	@ 0x30
 8009682:	b2da      	uxtb	r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	3301      	adds	r3, #1
 800968c:	223a      	movs	r2, #58	@ 0x3a
 800968e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3302      	adds	r3, #2
 8009694:	222f      	movs	r2, #47	@ 0x2f
 8009696:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	3303      	adds	r3, #3
 800969c:	2200      	movs	r2, #0
 800969e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr
 80096b0:	200026e8 	.word	0x200026e8

080096b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096be:	2200      	movs	r2, #0
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff ffac 	bl	8009620 <FATFS_LinkDriverEx>
 80096c8:	4603      	mov	r3, r0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80096e0:	88fb      	ldrh	r3, [r7, #6]
 80096e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80096e4:	d802      	bhi.n	80096ec <ff_convert+0x18>
		c = chr;
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	81fb      	strh	r3, [r7, #14]
 80096ea:	e025      	b.n	8009738 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00b      	beq.n	800970a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80096f2:	88fb      	ldrh	r3, [r7, #6]
 80096f4:	2bff      	cmp	r3, #255	@ 0xff
 80096f6:	d805      	bhi.n	8009704 <ff_convert+0x30>
 80096f8:	88fb      	ldrh	r3, [r7, #6]
 80096fa:	3b80      	subs	r3, #128	@ 0x80
 80096fc:	4a11      	ldr	r2, [pc, #68]	@ (8009744 <ff_convert+0x70>)
 80096fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009702:	e000      	b.n	8009706 <ff_convert+0x32>
 8009704:	2300      	movs	r3, #0
 8009706:	81fb      	strh	r3, [r7, #14]
 8009708:	e016      	b.n	8009738 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800970a:	2300      	movs	r3, #0
 800970c:	81fb      	strh	r3, [r7, #14]
 800970e:	e009      	b.n	8009724 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009710:	89fb      	ldrh	r3, [r7, #14]
 8009712:	4a0c      	ldr	r2, [pc, #48]	@ (8009744 <ff_convert+0x70>)
 8009714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009718:	88fa      	ldrh	r2, [r7, #6]
 800971a:	429a      	cmp	r2, r3
 800971c:	d006      	beq.n	800972c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800971e:	89fb      	ldrh	r3, [r7, #14]
 8009720:	3301      	adds	r3, #1
 8009722:	81fb      	strh	r3, [r7, #14]
 8009724:	89fb      	ldrh	r3, [r7, #14]
 8009726:	2b7f      	cmp	r3, #127	@ 0x7f
 8009728:	d9f2      	bls.n	8009710 <ff_convert+0x3c>
 800972a:	e000      	b.n	800972e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800972c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800972e:	89fb      	ldrh	r3, [r7, #14]
 8009730:	3380      	adds	r3, #128	@ 0x80
 8009732:	b29b      	uxth	r3, r3
 8009734:	b2db      	uxtb	r3, r3
 8009736:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009738:	89fb      	ldrh	r3, [r7, #14]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr
 8009744:	0800d714 	.word	0x0800d714

08009748 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	e002      	b.n	800975e <ff_wtoupper+0x16>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3301      	adds	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	4a0f      	ldr	r2, [pc, #60]	@ (800979c <ff_wtoupper+0x54>)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d006      	beq.n	8009778 <ff_wtoupper+0x30>
 800976a:	4a0c      	ldr	r2, [pc, #48]	@ (800979c <ff_wtoupper+0x54>)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	429a      	cmp	r2, r3
 8009776:	d1ef      	bne.n	8009758 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009778:	4a08      	ldr	r2, [pc, #32]	@ (800979c <ff_wtoupper+0x54>)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <ff_wtoupper+0x46>
 8009784:	4a06      	ldr	r2, [pc, #24]	@ (80097a0 <ff_wtoupper+0x58>)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978c:	e000      	b.n	8009790 <ff_wtoupper+0x48>
 800978e:	88fb      	ldrh	r3, [r7, #6]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	0800d814 	.word	0x0800d814
 80097a0:	0800d9f4 	.word	0x0800d9f4

080097a4 <malloc>:
 80097a4:	4b02      	ldr	r3, [pc, #8]	@ (80097b0 <malloc+0xc>)
 80097a6:	4601      	mov	r1, r0
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	f000 b825 	b.w	80097f8 <_malloc_r>
 80097ae:	bf00      	nop
 80097b0:	2000019c 	.word	0x2000019c

080097b4 <sbrk_aligned>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	4e0f      	ldr	r6, [pc, #60]	@ (80097f4 <sbrk_aligned+0x40>)
 80097b8:	460c      	mov	r4, r1
 80097ba:	6831      	ldr	r1, [r6, #0]
 80097bc:	4605      	mov	r5, r0
 80097be:	b911      	cbnz	r1, 80097c6 <sbrk_aligned+0x12>
 80097c0:	f000 ff4c 	bl	800a65c <_sbrk_r>
 80097c4:	6030      	str	r0, [r6, #0]
 80097c6:	4621      	mov	r1, r4
 80097c8:	4628      	mov	r0, r5
 80097ca:	f000 ff47 	bl	800a65c <_sbrk_r>
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	d103      	bne.n	80097da <sbrk_aligned+0x26>
 80097d2:	f04f 34ff 	mov.w	r4, #4294967295
 80097d6:	4620      	mov	r0, r4
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
 80097da:	1cc4      	adds	r4, r0, #3
 80097dc:	f024 0403 	bic.w	r4, r4, #3
 80097e0:	42a0      	cmp	r0, r4
 80097e2:	d0f8      	beq.n	80097d6 <sbrk_aligned+0x22>
 80097e4:	1a21      	subs	r1, r4, r0
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 ff38 	bl	800a65c <_sbrk_r>
 80097ec:	3001      	adds	r0, #1
 80097ee:	d1f2      	bne.n	80097d6 <sbrk_aligned+0x22>
 80097f0:	e7ef      	b.n	80097d2 <sbrk_aligned+0x1e>
 80097f2:	bf00      	nop
 80097f4:	200026f4 	.word	0x200026f4

080097f8 <_malloc_r>:
 80097f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fc:	1ccd      	adds	r5, r1, #3
 80097fe:	f025 0503 	bic.w	r5, r5, #3
 8009802:	3508      	adds	r5, #8
 8009804:	2d0c      	cmp	r5, #12
 8009806:	bf38      	it	cc
 8009808:	250c      	movcc	r5, #12
 800980a:	2d00      	cmp	r5, #0
 800980c:	4606      	mov	r6, r0
 800980e:	db01      	blt.n	8009814 <_malloc_r+0x1c>
 8009810:	42a9      	cmp	r1, r5
 8009812:	d904      	bls.n	800981e <_malloc_r+0x26>
 8009814:	230c      	movs	r3, #12
 8009816:	6033      	str	r3, [r6, #0]
 8009818:	2000      	movs	r0, #0
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098f4 <_malloc_r+0xfc>
 8009822:	f000 f869 	bl	80098f8 <__malloc_lock>
 8009826:	f8d8 3000 	ldr.w	r3, [r8]
 800982a:	461c      	mov	r4, r3
 800982c:	bb44      	cbnz	r4, 8009880 <_malloc_r+0x88>
 800982e:	4629      	mov	r1, r5
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff ffbf 	bl	80097b4 <sbrk_aligned>
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	4604      	mov	r4, r0
 800983a:	d158      	bne.n	80098ee <_malloc_r+0xf6>
 800983c:	f8d8 4000 	ldr.w	r4, [r8]
 8009840:	4627      	mov	r7, r4
 8009842:	2f00      	cmp	r7, #0
 8009844:	d143      	bne.n	80098ce <_malloc_r+0xd6>
 8009846:	2c00      	cmp	r4, #0
 8009848:	d04b      	beq.n	80098e2 <_malloc_r+0xea>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	4639      	mov	r1, r7
 800984e:	4630      	mov	r0, r6
 8009850:	eb04 0903 	add.w	r9, r4, r3
 8009854:	f000 ff02 	bl	800a65c <_sbrk_r>
 8009858:	4581      	cmp	r9, r0
 800985a:	d142      	bne.n	80098e2 <_malloc_r+0xea>
 800985c:	6821      	ldr	r1, [r4, #0]
 800985e:	4630      	mov	r0, r6
 8009860:	1a6d      	subs	r5, r5, r1
 8009862:	4629      	mov	r1, r5
 8009864:	f7ff ffa6 	bl	80097b4 <sbrk_aligned>
 8009868:	3001      	adds	r0, #1
 800986a:	d03a      	beq.n	80098e2 <_malloc_r+0xea>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	442b      	add	r3, r5
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	f8d8 3000 	ldr.w	r3, [r8]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	bb62      	cbnz	r2, 80098d4 <_malloc_r+0xdc>
 800987a:	f8c8 7000 	str.w	r7, [r8]
 800987e:	e00f      	b.n	80098a0 <_malloc_r+0xa8>
 8009880:	6822      	ldr	r2, [r4, #0]
 8009882:	1b52      	subs	r2, r2, r5
 8009884:	d420      	bmi.n	80098c8 <_malloc_r+0xd0>
 8009886:	2a0b      	cmp	r2, #11
 8009888:	d917      	bls.n	80098ba <_malloc_r+0xc2>
 800988a:	1961      	adds	r1, r4, r5
 800988c:	42a3      	cmp	r3, r4
 800988e:	6025      	str	r5, [r4, #0]
 8009890:	bf18      	it	ne
 8009892:	6059      	strne	r1, [r3, #4]
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	bf08      	it	eq
 8009898:	f8c8 1000 	streq.w	r1, [r8]
 800989c:	5162      	str	r2, [r4, r5]
 800989e:	604b      	str	r3, [r1, #4]
 80098a0:	4630      	mov	r0, r6
 80098a2:	f000 f82f 	bl	8009904 <__malloc_unlock>
 80098a6:	f104 000b 	add.w	r0, r4, #11
 80098aa:	1d23      	adds	r3, r4, #4
 80098ac:	f020 0007 	bic.w	r0, r0, #7
 80098b0:	1ac2      	subs	r2, r0, r3
 80098b2:	bf1c      	itt	ne
 80098b4:	1a1b      	subne	r3, r3, r0
 80098b6:	50a3      	strne	r3, [r4, r2]
 80098b8:	e7af      	b.n	800981a <_malloc_r+0x22>
 80098ba:	6862      	ldr	r2, [r4, #4]
 80098bc:	42a3      	cmp	r3, r4
 80098be:	bf0c      	ite	eq
 80098c0:	f8c8 2000 	streq.w	r2, [r8]
 80098c4:	605a      	strne	r2, [r3, #4]
 80098c6:	e7eb      	b.n	80098a0 <_malloc_r+0xa8>
 80098c8:	4623      	mov	r3, r4
 80098ca:	6864      	ldr	r4, [r4, #4]
 80098cc:	e7ae      	b.n	800982c <_malloc_r+0x34>
 80098ce:	463c      	mov	r4, r7
 80098d0:	687f      	ldr	r7, [r7, #4]
 80098d2:	e7b6      	b.n	8009842 <_malloc_r+0x4a>
 80098d4:	461a      	mov	r2, r3
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d1fb      	bne.n	80098d4 <_malloc_r+0xdc>
 80098dc:	2300      	movs	r3, #0
 80098de:	6053      	str	r3, [r2, #4]
 80098e0:	e7de      	b.n	80098a0 <_malloc_r+0xa8>
 80098e2:	230c      	movs	r3, #12
 80098e4:	4630      	mov	r0, r6
 80098e6:	6033      	str	r3, [r6, #0]
 80098e8:	f000 f80c 	bl	8009904 <__malloc_unlock>
 80098ec:	e794      	b.n	8009818 <_malloc_r+0x20>
 80098ee:	6005      	str	r5, [r0, #0]
 80098f0:	e7d6      	b.n	80098a0 <_malloc_r+0xa8>
 80098f2:	bf00      	nop
 80098f4:	200026f8 	.word	0x200026f8

080098f8 <__malloc_lock>:
 80098f8:	4801      	ldr	r0, [pc, #4]	@ (8009900 <__malloc_lock+0x8>)
 80098fa:	f000 befc 	b.w	800a6f6 <__retarget_lock_acquire_recursive>
 80098fe:	bf00      	nop
 8009900:	2000283c 	.word	0x2000283c

08009904 <__malloc_unlock>:
 8009904:	4801      	ldr	r0, [pc, #4]	@ (800990c <__malloc_unlock+0x8>)
 8009906:	f000 bef7 	b.w	800a6f8 <__retarget_lock_release_recursive>
 800990a:	bf00      	nop
 800990c:	2000283c 	.word	0x2000283c

08009910 <__cvt>:
 8009910:	2b00      	cmp	r3, #0
 8009912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009916:	461d      	mov	r5, r3
 8009918:	bfbb      	ittet	lt
 800991a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800991e:	461d      	movlt	r5, r3
 8009920:	2300      	movge	r3, #0
 8009922:	232d      	movlt	r3, #45	@ 0x2d
 8009924:	b088      	sub	sp, #32
 8009926:	4614      	mov	r4, r2
 8009928:	bfb8      	it	lt
 800992a:	4614      	movlt	r4, r2
 800992c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800992e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009930:	7013      	strb	r3, [r2, #0]
 8009932:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009934:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009938:	f023 0820 	bic.w	r8, r3, #32
 800993c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009940:	d005      	beq.n	800994e <__cvt+0x3e>
 8009942:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009946:	d100      	bne.n	800994a <__cvt+0x3a>
 8009948:	3601      	adds	r6, #1
 800994a:	2302      	movs	r3, #2
 800994c:	e000      	b.n	8009950 <__cvt+0x40>
 800994e:	2303      	movs	r3, #3
 8009950:	aa07      	add	r2, sp, #28
 8009952:	9204      	str	r2, [sp, #16]
 8009954:	aa06      	add	r2, sp, #24
 8009956:	e9cd a202 	strd	sl, r2, [sp, #8]
 800995a:	e9cd 3600 	strd	r3, r6, [sp]
 800995e:	4622      	mov	r2, r4
 8009960:	462b      	mov	r3, r5
 8009962:	f000 ff8d 	bl	800a880 <_dtoa_r>
 8009966:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800996a:	4607      	mov	r7, r0
 800996c:	d119      	bne.n	80099a2 <__cvt+0x92>
 800996e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009970:	07db      	lsls	r3, r3, #31
 8009972:	d50e      	bpl.n	8009992 <__cvt+0x82>
 8009974:	eb00 0906 	add.w	r9, r0, r6
 8009978:	2200      	movs	r2, #0
 800997a:	2300      	movs	r3, #0
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	f7f7 f812 	bl	80009a8 <__aeabi_dcmpeq>
 8009984:	b108      	cbz	r0, 800998a <__cvt+0x7a>
 8009986:	f8cd 901c 	str.w	r9, [sp, #28]
 800998a:	2230      	movs	r2, #48	@ 0x30
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	454b      	cmp	r3, r9
 8009990:	d31e      	bcc.n	80099d0 <__cvt+0xc0>
 8009992:	4638      	mov	r0, r7
 8009994:	9b07      	ldr	r3, [sp, #28]
 8009996:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009998:	1bdb      	subs	r3, r3, r7
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	b008      	add	sp, #32
 800999e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099a6:	eb00 0906 	add.w	r9, r0, r6
 80099aa:	d1e5      	bne.n	8009978 <__cvt+0x68>
 80099ac:	7803      	ldrb	r3, [r0, #0]
 80099ae:	2b30      	cmp	r3, #48	@ 0x30
 80099b0:	d10a      	bne.n	80099c8 <__cvt+0xb8>
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f6 fff5 	bl	80009a8 <__aeabi_dcmpeq>
 80099be:	b918      	cbnz	r0, 80099c8 <__cvt+0xb8>
 80099c0:	f1c6 0601 	rsb	r6, r6, #1
 80099c4:	f8ca 6000 	str.w	r6, [sl]
 80099c8:	f8da 3000 	ldr.w	r3, [sl]
 80099cc:	4499      	add	r9, r3
 80099ce:	e7d3      	b.n	8009978 <__cvt+0x68>
 80099d0:	1c59      	adds	r1, r3, #1
 80099d2:	9107      	str	r1, [sp, #28]
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	e7d9      	b.n	800998c <__cvt+0x7c>

080099d8 <__exponent>:
 80099d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099da:	2900      	cmp	r1, #0
 80099dc:	bfb6      	itet	lt
 80099de:	232d      	movlt	r3, #45	@ 0x2d
 80099e0:	232b      	movge	r3, #43	@ 0x2b
 80099e2:	4249      	neglt	r1, r1
 80099e4:	2909      	cmp	r1, #9
 80099e6:	7002      	strb	r2, [r0, #0]
 80099e8:	7043      	strb	r3, [r0, #1]
 80099ea:	dd29      	ble.n	8009a40 <__exponent+0x68>
 80099ec:	f10d 0307 	add.w	r3, sp, #7
 80099f0:	461d      	mov	r5, r3
 80099f2:	270a      	movs	r7, #10
 80099f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80099f8:	461a      	mov	r2, r3
 80099fa:	fb07 1416 	mls	r4, r7, r6, r1
 80099fe:	3430      	adds	r4, #48	@ 0x30
 8009a00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a04:	460c      	mov	r4, r1
 8009a06:	2c63      	cmp	r4, #99	@ 0x63
 8009a08:	4631      	mov	r1, r6
 8009a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a0e:	dcf1      	bgt.n	80099f4 <__exponent+0x1c>
 8009a10:	3130      	adds	r1, #48	@ 0x30
 8009a12:	1e94      	subs	r4, r2, #2
 8009a14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a18:	4623      	mov	r3, r4
 8009a1a:	1c41      	adds	r1, r0, #1
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	d30a      	bcc.n	8009a36 <__exponent+0x5e>
 8009a20:	f10d 0309 	add.w	r3, sp, #9
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	42ac      	cmp	r4, r5
 8009a28:	bf88      	it	hi
 8009a2a:	2300      	movhi	r3, #0
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	4403      	add	r3, r0
 8009a30:	1a18      	subs	r0, r3, r0
 8009a32:	b003      	add	sp, #12
 8009a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a3e:	e7ed      	b.n	8009a1c <__exponent+0x44>
 8009a40:	2330      	movs	r3, #48	@ 0x30
 8009a42:	3130      	adds	r1, #48	@ 0x30
 8009a44:	7083      	strb	r3, [r0, #2]
 8009a46:	70c1      	strb	r1, [r0, #3]
 8009a48:	1d03      	adds	r3, r0, #4
 8009a4a:	e7f1      	b.n	8009a30 <__exponent+0x58>

08009a4c <_printf_float>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	b091      	sub	sp, #68	@ 0x44
 8009a52:	460c      	mov	r4, r1
 8009a54:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009a58:	4616      	mov	r6, r2
 8009a5a:	461f      	mov	r7, r3
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	f000 fdc5 	bl	800a5ec <_localeconv_r>
 8009a62:	6803      	ldr	r3, [r0, #0]
 8009a64:	4618      	mov	r0, r3
 8009a66:	9308      	str	r3, [sp, #32]
 8009a68:	f7f6 fb72 	bl	8000150 <strlen>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a70:	f8d8 3000 	ldr.w	r3, [r8]
 8009a74:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a76:	3307      	adds	r3, #7
 8009a78:	f023 0307 	bic.w	r3, r3, #7
 8009a7c:	f103 0208 	add.w	r2, r3, #8
 8009a80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a84:	f8d4 b000 	ldr.w	fp, [r4]
 8009a88:	f8c8 2000 	str.w	r2, [r8]
 8009a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a96:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009aa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8009d18 <_printf_float+0x2cc>)
 8009aa8:	f7f6 ffb0 	bl	8000a0c <__aeabi_dcmpun>
 8009aac:	bb70      	cbnz	r0, 8009b0c <_printf_float+0xc0>
 8009aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab6:	4b98      	ldr	r3, [pc, #608]	@ (8009d18 <_printf_float+0x2cc>)
 8009ab8:	f7f6 ff8a 	bl	80009d0 <__aeabi_dcmple>
 8009abc:	bb30      	cbnz	r0, 8009b0c <_printf_float+0xc0>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	4649      	mov	r1, r9
 8009ac6:	f7f6 ff79 	bl	80009bc <__aeabi_dcmplt>
 8009aca:	b110      	cbz	r0, 8009ad2 <_printf_float+0x86>
 8009acc:	232d      	movs	r3, #45	@ 0x2d
 8009ace:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ad2:	4a92      	ldr	r2, [pc, #584]	@ (8009d1c <_printf_float+0x2d0>)
 8009ad4:	4b92      	ldr	r3, [pc, #584]	@ (8009d20 <_printf_float+0x2d4>)
 8009ad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ada:	bf94      	ite	ls
 8009adc:	4690      	movls	r8, r2
 8009ade:	4698      	movhi	r8, r3
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	f04f 0900 	mov.w	r9, #0
 8009ae6:	6123      	str	r3, [r4, #16]
 8009ae8:	f02b 0304 	bic.w	r3, fp, #4
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	4633      	mov	r3, r6
 8009af0:	4621      	mov	r1, r4
 8009af2:	4628      	mov	r0, r5
 8009af4:	9700      	str	r7, [sp, #0]
 8009af6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009af8:	f000 f9d4 	bl	8009ea4 <_printf_common>
 8009afc:	3001      	adds	r0, #1
 8009afe:	f040 8090 	bne.w	8009c22 <_printf_float+0x1d6>
 8009b02:	f04f 30ff 	mov.w	r0, #4294967295
 8009b06:	b011      	add	sp, #68	@ 0x44
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f6 ff7a 	bl	8000a0c <__aeabi_dcmpun>
 8009b18:	b148      	cbz	r0, 8009b2e <_printf_float+0xe2>
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bfb8      	it	lt
 8009b20:	232d      	movlt	r3, #45	@ 0x2d
 8009b22:	4a80      	ldr	r2, [pc, #512]	@ (8009d24 <_printf_float+0x2d8>)
 8009b24:	bfb8      	it	lt
 8009b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8009d28 <_printf_float+0x2dc>)
 8009b2c:	e7d3      	b.n	8009ad6 <_printf_float+0x8a>
 8009b2e:	6863      	ldr	r3, [r4, #4]
 8009b30:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	d13f      	bne.n	8009bb8 <_printf_float+0x16c>
 8009b38:	2306      	movs	r3, #6
 8009b3a:	6063      	str	r3, [r4, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009b42:	6023      	str	r3, [r4, #0]
 8009b44:	9206      	str	r2, [sp, #24]
 8009b46:	aa0e      	add	r2, sp, #56	@ 0x38
 8009b48:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009b4c:	aa0d      	add	r2, sp, #52	@ 0x34
 8009b4e:	9203      	str	r2, [sp, #12]
 8009b50:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009b54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	4628      	mov	r0, r5
 8009b60:	464b      	mov	r3, r9
 8009b62:	910a      	str	r1, [sp, #40]	@ 0x28
 8009b64:	f7ff fed4 	bl	8009910 <__cvt>
 8009b68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	2947      	cmp	r1, #71	@ 0x47
 8009b6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009b70:	d128      	bne.n	8009bc4 <_printf_float+0x178>
 8009b72:	1cc8      	adds	r0, r1, #3
 8009b74:	db02      	blt.n	8009b7c <_printf_float+0x130>
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	dd40      	ble.n	8009bfe <_printf_float+0x1b2>
 8009b7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b80:	fa5f fa8a 	uxtb.w	sl, sl
 8009b84:	4652      	mov	r2, sl
 8009b86:	3901      	subs	r1, #1
 8009b88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8009b8e:	f7ff ff23 	bl	80099d8 <__exponent>
 8009b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b94:	4681      	mov	r9, r0
 8009b96:	1813      	adds	r3, r2, r0
 8009b98:	2a01      	cmp	r2, #1
 8009b9a:	6123      	str	r3, [r4, #16]
 8009b9c:	dc02      	bgt.n	8009ba4 <_printf_float+0x158>
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	07d2      	lsls	r2, r2, #31
 8009ba2:	d501      	bpl.n	8009ba8 <_printf_float+0x15c>
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	6123      	str	r3, [r4, #16]
 8009ba8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d09e      	beq.n	8009aee <_printf_float+0xa2>
 8009bb0:	232d      	movs	r3, #45	@ 0x2d
 8009bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bb6:	e79a      	b.n	8009aee <_printf_float+0xa2>
 8009bb8:	2947      	cmp	r1, #71	@ 0x47
 8009bba:	d1bf      	bne.n	8009b3c <_printf_float+0xf0>
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1bd      	bne.n	8009b3c <_printf_float+0xf0>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7ba      	b.n	8009b3a <_printf_float+0xee>
 8009bc4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bc8:	d9dc      	bls.n	8009b84 <_printf_float+0x138>
 8009bca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bce:	d118      	bne.n	8009c02 <_printf_float+0x1b6>
 8009bd0:	2900      	cmp	r1, #0
 8009bd2:	6863      	ldr	r3, [r4, #4]
 8009bd4:	dd0b      	ble.n	8009bee <_printf_float+0x1a2>
 8009bd6:	6121      	str	r1, [r4, #16]
 8009bd8:	b913      	cbnz	r3, 8009be0 <_printf_float+0x194>
 8009bda:	6822      	ldr	r2, [r4, #0]
 8009bdc:	07d0      	lsls	r0, r2, #31
 8009bde:	d502      	bpl.n	8009be6 <_printf_float+0x19a>
 8009be0:	3301      	adds	r3, #1
 8009be2:	440b      	add	r3, r1
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	f04f 0900 	mov.w	r9, #0
 8009bea:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bec:	e7dc      	b.n	8009ba8 <_printf_float+0x15c>
 8009bee:	b913      	cbnz	r3, 8009bf6 <_printf_float+0x1aa>
 8009bf0:	6822      	ldr	r2, [r4, #0]
 8009bf2:	07d2      	lsls	r2, r2, #31
 8009bf4:	d501      	bpl.n	8009bfa <_printf_float+0x1ae>
 8009bf6:	3302      	adds	r3, #2
 8009bf8:	e7f4      	b.n	8009be4 <_printf_float+0x198>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e7f2      	b.n	8009be4 <_printf_float+0x198>
 8009bfe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c04:	4299      	cmp	r1, r3
 8009c06:	db05      	blt.n	8009c14 <_printf_float+0x1c8>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	6121      	str	r1, [r4, #16]
 8009c0c:	07d8      	lsls	r0, r3, #31
 8009c0e:	d5ea      	bpl.n	8009be6 <_printf_float+0x19a>
 8009c10:	1c4b      	adds	r3, r1, #1
 8009c12:	e7e7      	b.n	8009be4 <_printf_float+0x198>
 8009c14:	2900      	cmp	r1, #0
 8009c16:	bfcc      	ite	gt
 8009c18:	2201      	movgt	r2, #1
 8009c1a:	f1c1 0202 	rsble	r2, r1, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	e7e0      	b.n	8009be4 <_printf_float+0x198>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	055a      	lsls	r2, r3, #21
 8009c26:	d407      	bmi.n	8009c38 <_printf_float+0x1ec>
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	4642      	mov	r2, r8
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	d12b      	bne.n	8009c8e <_printf_float+0x242>
 8009c36:	e764      	b.n	8009b02 <_printf_float+0xb6>
 8009c38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c3c:	f240 80dc 	bls.w	8009df8 <_printf_float+0x3ac>
 8009c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c44:	2200      	movs	r2, #0
 8009c46:	2300      	movs	r3, #0
 8009c48:	f7f6 feae 	bl	80009a8 <__aeabi_dcmpeq>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d033      	beq.n	8009cb8 <_printf_float+0x26c>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4631      	mov	r1, r6
 8009c54:	4628      	mov	r0, r5
 8009c56:	4a35      	ldr	r2, [pc, #212]	@ (8009d2c <_printf_float+0x2e0>)
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f43f af51 	beq.w	8009b02 <_printf_float+0xb6>
 8009c60:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009c64:	4543      	cmp	r3, r8
 8009c66:	db02      	blt.n	8009c6e <_printf_float+0x222>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	07d8      	lsls	r0, r3, #31
 8009c6c:	d50f      	bpl.n	8009c8e <_printf_float+0x242>
 8009c6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f af42 	beq.w	8009b02 <_printf_float+0xb6>
 8009c7e:	f04f 0900 	mov.w	r9, #0
 8009c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c86:	f104 0a1a 	add.w	sl, r4, #26
 8009c8a:	45c8      	cmp	r8, r9
 8009c8c:	dc09      	bgt.n	8009ca2 <_printf_float+0x256>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	079b      	lsls	r3, r3, #30
 8009c92:	f100 8102 	bmi.w	8009e9a <_printf_float+0x44e>
 8009c96:	68e0      	ldr	r0, [r4, #12]
 8009c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9a:	4298      	cmp	r0, r3
 8009c9c:	bfb8      	it	lt
 8009c9e:	4618      	movlt	r0, r3
 8009ca0:	e731      	b.n	8009b06 <_printf_float+0xba>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f af28 	beq.w	8009b02 <_printf_float+0xb6>
 8009cb2:	f109 0901 	add.w	r9, r9, #1
 8009cb6:	e7e8      	b.n	8009c8a <_printf_float+0x23e>
 8009cb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	dc38      	bgt.n	8009d30 <_printf_float+0x2e4>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	4a19      	ldr	r2, [pc, #100]	@ (8009d2c <_printf_float+0x2e0>)
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f43f af1a 	beq.w	8009b02 <_printf_float+0xb6>
 8009cce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009cd2:	ea59 0303 	orrs.w	r3, r9, r3
 8009cd6:	d102      	bne.n	8009cde <_printf_float+0x292>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	07d9      	lsls	r1, r3, #31
 8009cdc:	d5d7      	bpl.n	8009c8e <_printf_float+0x242>
 8009cde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	47b8      	blx	r7
 8009ce8:	3001      	adds	r0, #1
 8009cea:	f43f af0a 	beq.w	8009b02 <_printf_float+0xb6>
 8009cee:	f04f 0a00 	mov.w	sl, #0
 8009cf2:	f104 0b1a 	add.w	fp, r4, #26
 8009cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cf8:	425b      	negs	r3, r3
 8009cfa:	4553      	cmp	r3, sl
 8009cfc:	dc01      	bgt.n	8009d02 <_printf_float+0x2b6>
 8009cfe:	464b      	mov	r3, r9
 8009d00:	e793      	b.n	8009c2a <_printf_float+0x1de>
 8009d02:	2301      	movs	r3, #1
 8009d04:	465a      	mov	r2, fp
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	f43f aef8 	beq.w	8009b02 <_printf_float+0xb6>
 8009d12:	f10a 0a01 	add.w	sl, sl, #1
 8009d16:	e7ee      	b.n	8009cf6 <_printf_float+0x2aa>
 8009d18:	7fefffff 	.word	0x7fefffff
 8009d1c:	0800dbd4 	.word	0x0800dbd4
 8009d20:	0800dbd8 	.word	0x0800dbd8
 8009d24:	0800dbdc 	.word	0x0800dbdc
 8009d28:	0800dbe0 	.word	0x0800dbe0
 8009d2c:	0800dbe4 	.word	0x0800dbe4
 8009d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d32:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009d36:	4553      	cmp	r3, sl
 8009d38:	bfa8      	it	ge
 8009d3a:	4653      	movge	r3, sl
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	4699      	mov	r9, r3
 8009d40:	dc36      	bgt.n	8009db0 <_printf_float+0x364>
 8009d42:	f04f 0b00 	mov.w	fp, #0
 8009d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d4a:	f104 021a 	add.w	r2, r4, #26
 8009d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d52:	eba3 0309 	sub.w	r3, r3, r9
 8009d56:	455b      	cmp	r3, fp
 8009d58:	dc31      	bgt.n	8009dbe <_printf_float+0x372>
 8009d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d5c:	459a      	cmp	sl, r3
 8009d5e:	dc3a      	bgt.n	8009dd6 <_printf_float+0x38a>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	07da      	lsls	r2, r3, #31
 8009d64:	d437      	bmi.n	8009dd6 <_printf_float+0x38a>
 8009d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d68:	ebaa 0903 	sub.w	r9, sl, r3
 8009d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8009d72:	4599      	cmp	r9, r3
 8009d74:	bfa8      	it	ge
 8009d76:	4699      	movge	r9, r3
 8009d78:	f1b9 0f00 	cmp.w	r9, #0
 8009d7c:	dc33      	bgt.n	8009de6 <_printf_float+0x39a>
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d86:	f104 0b1a 	add.w	fp, r4, #26
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8009d90:	eba3 0309 	sub.w	r3, r3, r9
 8009d94:	4543      	cmp	r3, r8
 8009d96:	f77f af7a 	ble.w	8009c8e <_printf_float+0x242>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	465a      	mov	r2, fp
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b8      	blx	r7
 8009da4:	3001      	adds	r0, #1
 8009da6:	f43f aeac 	beq.w	8009b02 <_printf_float+0xb6>
 8009daa:	f108 0801 	add.w	r8, r8, #1
 8009dae:	e7ec      	b.n	8009d8a <_printf_float+0x33e>
 8009db0:	4642      	mov	r2, r8
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	d1c2      	bne.n	8009d42 <_printf_float+0x2f6>
 8009dbc:	e6a1      	b.n	8009b02 <_printf_float+0xb6>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	920a      	str	r2, [sp, #40]	@ 0x28
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f43f ae9a 	beq.w	8009b02 <_printf_float+0xb6>
 8009dce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dd0:	f10b 0b01 	add.w	fp, fp, #1
 8009dd4:	e7bb      	b.n	8009d4e <_printf_float+0x302>
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	d1c0      	bne.n	8009d66 <_printf_float+0x31a>
 8009de4:	e68d      	b.n	8009b02 <_printf_float+0xb6>
 8009de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009de8:	464b      	mov	r3, r9
 8009dea:	4631      	mov	r1, r6
 8009dec:	4628      	mov	r0, r5
 8009dee:	4442      	add	r2, r8
 8009df0:	47b8      	blx	r7
 8009df2:	3001      	adds	r0, #1
 8009df4:	d1c3      	bne.n	8009d7e <_printf_float+0x332>
 8009df6:	e684      	b.n	8009b02 <_printf_float+0xb6>
 8009df8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009dfc:	f1ba 0f01 	cmp.w	sl, #1
 8009e00:	dc01      	bgt.n	8009e06 <_printf_float+0x3ba>
 8009e02:	07db      	lsls	r3, r3, #31
 8009e04:	d536      	bpl.n	8009e74 <_printf_float+0x428>
 8009e06:	2301      	movs	r3, #1
 8009e08:	4642      	mov	r2, r8
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b8      	blx	r7
 8009e10:	3001      	adds	r0, #1
 8009e12:	f43f ae76 	beq.w	8009b02 <_printf_float+0xb6>
 8009e16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b8      	blx	r7
 8009e20:	3001      	adds	r0, #1
 8009e22:	f43f ae6e 	beq.w	8009b02 <_printf_float+0xb6>
 8009e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e32:	f7f6 fdb9 	bl	80009a8 <__aeabi_dcmpeq>
 8009e36:	b9c0      	cbnz	r0, 8009e6a <_printf_float+0x41e>
 8009e38:	4653      	mov	r3, sl
 8009e3a:	f108 0201 	add.w	r2, r8, #1
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b8      	blx	r7
 8009e44:	3001      	adds	r0, #1
 8009e46:	d10c      	bne.n	8009e62 <_printf_float+0x416>
 8009e48:	e65b      	b.n	8009b02 <_printf_float+0xb6>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	465a      	mov	r2, fp
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	f43f ae54 	beq.w	8009b02 <_printf_float+0xb6>
 8009e5a:	f108 0801 	add.w	r8, r8, #1
 8009e5e:	45d0      	cmp	r8, sl
 8009e60:	dbf3      	blt.n	8009e4a <_printf_float+0x3fe>
 8009e62:	464b      	mov	r3, r9
 8009e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e68:	e6e0      	b.n	8009c2c <_printf_float+0x1e0>
 8009e6a:	f04f 0800 	mov.w	r8, #0
 8009e6e:	f104 0b1a 	add.w	fp, r4, #26
 8009e72:	e7f4      	b.n	8009e5e <_printf_float+0x412>
 8009e74:	2301      	movs	r3, #1
 8009e76:	4642      	mov	r2, r8
 8009e78:	e7e1      	b.n	8009e3e <_printf_float+0x3f2>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	464a      	mov	r2, r9
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	f43f ae3c 	beq.w	8009b02 <_printf_float+0xb6>
 8009e8a:	f108 0801 	add.w	r8, r8, #1
 8009e8e:	68e3      	ldr	r3, [r4, #12]
 8009e90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009e92:	1a5b      	subs	r3, r3, r1
 8009e94:	4543      	cmp	r3, r8
 8009e96:	dcf0      	bgt.n	8009e7a <_printf_float+0x42e>
 8009e98:	e6fd      	b.n	8009c96 <_printf_float+0x24a>
 8009e9a:	f04f 0800 	mov.w	r8, #0
 8009e9e:	f104 0919 	add.w	r9, r4, #25
 8009ea2:	e7f4      	b.n	8009e8e <_printf_float+0x442>

08009ea4 <_printf_common>:
 8009ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	4698      	mov	r8, r3
 8009eac:	688a      	ldr	r2, [r1, #8]
 8009eae:	690b      	ldr	r3, [r1, #16]
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	bfb8      	it	lt
 8009eb6:	4613      	movlt	r3, r2
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ec4:	b10a      	cbz	r2, 8009eca <_printf_common+0x26>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	6033      	str	r3, [r6, #0]
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	0699      	lsls	r1, r3, #26
 8009ece:	bf42      	ittt	mi
 8009ed0:	6833      	ldrmi	r3, [r6, #0]
 8009ed2:	3302      	addmi	r3, #2
 8009ed4:	6033      	strmi	r3, [r6, #0]
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	f015 0506 	ands.w	r5, r5, #6
 8009edc:	d106      	bne.n	8009eec <_printf_common+0x48>
 8009ede:	f104 0a19 	add.w	sl, r4, #25
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	6832      	ldr	r2, [r6, #0]
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	dc2b      	bgt.n	8009f44 <_printf_common+0xa0>
 8009eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ef0:	6822      	ldr	r2, [r4, #0]
 8009ef2:	3b00      	subs	r3, #0
 8009ef4:	bf18      	it	ne
 8009ef6:	2301      	movne	r3, #1
 8009ef8:	0692      	lsls	r2, r2, #26
 8009efa:	d430      	bmi.n	8009f5e <_printf_common+0xba>
 8009efc:	4641      	mov	r1, r8
 8009efe:	4638      	mov	r0, r7
 8009f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f04:	47c8      	blx	r9
 8009f06:	3001      	adds	r0, #1
 8009f08:	d023      	beq.n	8009f52 <_printf_common+0xae>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	6922      	ldr	r2, [r4, #16]
 8009f0e:	f003 0306 	and.w	r3, r3, #6
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	bf14      	ite	ne
 8009f16:	2500      	movne	r5, #0
 8009f18:	6833      	ldreq	r3, [r6, #0]
 8009f1a:	f04f 0600 	mov.w	r6, #0
 8009f1e:	bf08      	it	eq
 8009f20:	68e5      	ldreq	r5, [r4, #12]
 8009f22:	f104 041a 	add.w	r4, r4, #26
 8009f26:	bf08      	it	eq
 8009f28:	1aed      	subeq	r5, r5, r3
 8009f2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009f2e:	bf08      	it	eq
 8009f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f34:	4293      	cmp	r3, r2
 8009f36:	bfc4      	itt	gt
 8009f38:	1a9b      	subgt	r3, r3, r2
 8009f3a:	18ed      	addgt	r5, r5, r3
 8009f3c:	42b5      	cmp	r5, r6
 8009f3e:	d11a      	bne.n	8009f76 <_printf_common+0xd2>
 8009f40:	2000      	movs	r0, #0
 8009f42:	e008      	b.n	8009f56 <_printf_common+0xb2>
 8009f44:	2301      	movs	r3, #1
 8009f46:	4652      	mov	r2, sl
 8009f48:	4641      	mov	r1, r8
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	47c8      	blx	r9
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d103      	bne.n	8009f5a <_printf_common+0xb6>
 8009f52:	f04f 30ff 	mov.w	r0, #4294967295
 8009f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5a:	3501      	adds	r5, #1
 8009f5c:	e7c1      	b.n	8009ee2 <_printf_common+0x3e>
 8009f5e:	2030      	movs	r0, #48	@ 0x30
 8009f60:	18e1      	adds	r1, r4, r3
 8009f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f6c:	4422      	add	r2, r4
 8009f6e:	3302      	adds	r3, #2
 8009f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f74:	e7c2      	b.n	8009efc <_printf_common+0x58>
 8009f76:	2301      	movs	r3, #1
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4641      	mov	r1, r8
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	47c8      	blx	r9
 8009f80:	3001      	adds	r0, #1
 8009f82:	d0e6      	beq.n	8009f52 <_printf_common+0xae>
 8009f84:	3601      	adds	r6, #1
 8009f86:	e7d9      	b.n	8009f3c <_printf_common+0x98>

08009f88 <_printf_i>:
 8009f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	7e0f      	ldrb	r7, [r1, #24]
 8009f8e:	4691      	mov	r9, r2
 8009f90:	2f78      	cmp	r7, #120	@ 0x78
 8009f92:	4680      	mov	r8, r0
 8009f94:	460c      	mov	r4, r1
 8009f96:	469a      	mov	sl, r3
 8009f98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f9e:	d807      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fa0:	2f62      	cmp	r7, #98	@ 0x62
 8009fa2:	d80a      	bhi.n	8009fba <_printf_i+0x32>
 8009fa4:	2f00      	cmp	r7, #0
 8009fa6:	f000 80d3 	beq.w	800a150 <_printf_i+0x1c8>
 8009faa:	2f58      	cmp	r7, #88	@ 0x58
 8009fac:	f000 80ba 	beq.w	800a124 <_printf_i+0x19c>
 8009fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fb8:	e03a      	b.n	800a030 <_printf_i+0xa8>
 8009fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fbe:	2b15      	cmp	r3, #21
 8009fc0:	d8f6      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8009fc8 <_printf_i+0x40>)
 8009fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc8:	0800a021 	.word	0x0800a021
 8009fcc:	0800a035 	.word	0x0800a035
 8009fd0:	08009fb1 	.word	0x08009fb1
 8009fd4:	08009fb1 	.word	0x08009fb1
 8009fd8:	08009fb1 	.word	0x08009fb1
 8009fdc:	08009fb1 	.word	0x08009fb1
 8009fe0:	0800a035 	.word	0x0800a035
 8009fe4:	08009fb1 	.word	0x08009fb1
 8009fe8:	08009fb1 	.word	0x08009fb1
 8009fec:	08009fb1 	.word	0x08009fb1
 8009ff0:	08009fb1 	.word	0x08009fb1
 8009ff4:	0800a137 	.word	0x0800a137
 8009ff8:	0800a05f 	.word	0x0800a05f
 8009ffc:	0800a0f1 	.word	0x0800a0f1
 800a000:	08009fb1 	.word	0x08009fb1
 800a004:	08009fb1 	.word	0x08009fb1
 800a008:	0800a159 	.word	0x0800a159
 800a00c:	08009fb1 	.word	0x08009fb1
 800a010:	0800a05f 	.word	0x0800a05f
 800a014:	08009fb1 	.word	0x08009fb1
 800a018:	08009fb1 	.word	0x08009fb1
 800a01c:	0800a0f9 	.word	0x0800a0f9
 800a020:	6833      	ldr	r3, [r6, #0]
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6032      	str	r2, [r6, #0]
 800a028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a02c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a030:	2301      	movs	r3, #1
 800a032:	e09e      	b.n	800a172 <_printf_i+0x1ea>
 800a034:	6833      	ldr	r3, [r6, #0]
 800a036:	6820      	ldr	r0, [r4, #0]
 800a038:	1d19      	adds	r1, r3, #4
 800a03a:	6031      	str	r1, [r6, #0]
 800a03c:	0606      	lsls	r6, r0, #24
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0xbc>
 800a040:	681d      	ldr	r5, [r3, #0]
 800a042:	e003      	b.n	800a04c <_printf_i+0xc4>
 800a044:	0645      	lsls	r5, r0, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0xb8>
 800a048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	da03      	bge.n	800a058 <_printf_i+0xd0>
 800a050:	232d      	movs	r3, #45	@ 0x2d
 800a052:	426d      	negs	r5, r5
 800a054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a058:	230a      	movs	r3, #10
 800a05a:	4859      	ldr	r0, [pc, #356]	@ (800a1c0 <_printf_i+0x238>)
 800a05c:	e011      	b.n	800a082 <_printf_i+0xfa>
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	6833      	ldr	r3, [r6, #0]
 800a062:	0608      	lsls	r0, r1, #24
 800a064:	f853 5b04 	ldr.w	r5, [r3], #4
 800a068:	d402      	bmi.n	800a070 <_printf_i+0xe8>
 800a06a:	0649      	lsls	r1, r1, #25
 800a06c:	bf48      	it	mi
 800a06e:	b2ad      	uxthmi	r5, r5
 800a070:	2f6f      	cmp	r7, #111	@ 0x6f
 800a072:	6033      	str	r3, [r6, #0]
 800a074:	bf14      	ite	ne
 800a076:	230a      	movne	r3, #10
 800a078:	2308      	moveq	r3, #8
 800a07a:	4851      	ldr	r0, [pc, #324]	@ (800a1c0 <_printf_i+0x238>)
 800a07c:	2100      	movs	r1, #0
 800a07e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a082:	6866      	ldr	r6, [r4, #4]
 800a084:	2e00      	cmp	r6, #0
 800a086:	bfa8      	it	ge
 800a088:	6821      	ldrge	r1, [r4, #0]
 800a08a:	60a6      	str	r6, [r4, #8]
 800a08c:	bfa4      	itt	ge
 800a08e:	f021 0104 	bicge.w	r1, r1, #4
 800a092:	6021      	strge	r1, [r4, #0]
 800a094:	b90d      	cbnz	r5, 800a09a <_printf_i+0x112>
 800a096:	2e00      	cmp	r6, #0
 800a098:	d04b      	beq.n	800a132 <_printf_i+0x1aa>
 800a09a:	4616      	mov	r6, r2
 800a09c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0a0:	fb03 5711 	mls	r7, r3, r1, r5
 800a0a4:	5dc7      	ldrb	r7, [r0, r7]
 800a0a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0aa:	462f      	mov	r7, r5
 800a0ac:	42bb      	cmp	r3, r7
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	d9f4      	bls.n	800a09c <_printf_i+0x114>
 800a0b2:	2b08      	cmp	r3, #8
 800a0b4:	d10b      	bne.n	800a0ce <_printf_i+0x146>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	07df      	lsls	r7, r3, #31
 800a0ba:	d508      	bpl.n	800a0ce <_printf_i+0x146>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	6861      	ldr	r1, [r4, #4]
 800a0c0:	4299      	cmp	r1, r3
 800a0c2:	bfde      	ittt	le
 800a0c4:	2330      	movle	r3, #48	@ 0x30
 800a0c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0ce:	1b92      	subs	r2, r2, r6
 800a0d0:	6122      	str	r2, [r4, #16]
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f8cd a000 	str.w	sl, [sp]
 800a0dc:	aa03      	add	r2, sp, #12
 800a0de:	f7ff fee1 	bl	8009ea4 <_printf_common>
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	d14a      	bne.n	800a17c <_printf_i+0x1f4>
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ea:	b004      	add	sp, #16
 800a0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	f043 0320 	orr.w	r3, r3, #32
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	2778      	movs	r7, #120	@ 0x78
 800a0fa:	4832      	ldr	r0, [pc, #200]	@ (800a1c4 <_printf_i+0x23c>)
 800a0fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	6831      	ldr	r1, [r6, #0]
 800a104:	061f      	lsls	r7, r3, #24
 800a106:	f851 5b04 	ldr.w	r5, [r1], #4
 800a10a:	d402      	bmi.n	800a112 <_printf_i+0x18a>
 800a10c:	065f      	lsls	r7, r3, #25
 800a10e:	bf48      	it	mi
 800a110:	b2ad      	uxthmi	r5, r5
 800a112:	6031      	str	r1, [r6, #0]
 800a114:	07d9      	lsls	r1, r3, #31
 800a116:	bf44      	itt	mi
 800a118:	f043 0320 	orrmi.w	r3, r3, #32
 800a11c:	6023      	strmi	r3, [r4, #0]
 800a11e:	b11d      	cbz	r5, 800a128 <_printf_i+0x1a0>
 800a120:	2310      	movs	r3, #16
 800a122:	e7ab      	b.n	800a07c <_printf_i+0xf4>
 800a124:	4826      	ldr	r0, [pc, #152]	@ (800a1c0 <_printf_i+0x238>)
 800a126:	e7e9      	b.n	800a0fc <_printf_i+0x174>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	f023 0320 	bic.w	r3, r3, #32
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	e7f6      	b.n	800a120 <_printf_i+0x198>
 800a132:	4616      	mov	r6, r2
 800a134:	e7bd      	b.n	800a0b2 <_printf_i+0x12a>
 800a136:	6833      	ldr	r3, [r6, #0]
 800a138:	6825      	ldr	r5, [r4, #0]
 800a13a:	1d18      	adds	r0, r3, #4
 800a13c:	6961      	ldr	r1, [r4, #20]
 800a13e:	6030      	str	r0, [r6, #0]
 800a140:	062e      	lsls	r6, r5, #24
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	d501      	bpl.n	800a14a <_printf_i+0x1c2>
 800a146:	6019      	str	r1, [r3, #0]
 800a148:	e002      	b.n	800a150 <_printf_i+0x1c8>
 800a14a:	0668      	lsls	r0, r5, #25
 800a14c:	d5fb      	bpl.n	800a146 <_printf_i+0x1be>
 800a14e:	8019      	strh	r1, [r3, #0]
 800a150:	2300      	movs	r3, #0
 800a152:	4616      	mov	r6, r2
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	e7bc      	b.n	800a0d2 <_printf_i+0x14a>
 800a158:	6833      	ldr	r3, [r6, #0]
 800a15a:	2100      	movs	r1, #0
 800a15c:	1d1a      	adds	r2, r3, #4
 800a15e:	6032      	str	r2, [r6, #0]
 800a160:	681e      	ldr	r6, [r3, #0]
 800a162:	6862      	ldr	r2, [r4, #4]
 800a164:	4630      	mov	r0, r6
 800a166:	f000 fac8 	bl	800a6fa <memchr>
 800a16a:	b108      	cbz	r0, 800a170 <_printf_i+0x1e8>
 800a16c:	1b80      	subs	r0, r0, r6
 800a16e:	6060      	str	r0, [r4, #4]
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	6123      	str	r3, [r4, #16]
 800a174:	2300      	movs	r3, #0
 800a176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a17a:	e7aa      	b.n	800a0d2 <_printf_i+0x14a>
 800a17c:	4632      	mov	r2, r6
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	47d0      	blx	sl
 800a186:	3001      	adds	r0, #1
 800a188:	d0ad      	beq.n	800a0e6 <_printf_i+0x15e>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	079b      	lsls	r3, r3, #30
 800a18e:	d413      	bmi.n	800a1b8 <_printf_i+0x230>
 800a190:	68e0      	ldr	r0, [r4, #12]
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	4298      	cmp	r0, r3
 800a196:	bfb8      	it	lt
 800a198:	4618      	movlt	r0, r3
 800a19a:	e7a6      	b.n	800a0ea <_printf_i+0x162>
 800a19c:	2301      	movs	r3, #1
 800a19e:	4632      	mov	r2, r6
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	47d0      	blx	sl
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d09d      	beq.n	800a0e6 <_printf_i+0x15e>
 800a1aa:	3501      	adds	r5, #1
 800a1ac:	68e3      	ldr	r3, [r4, #12]
 800a1ae:	9903      	ldr	r1, [sp, #12]
 800a1b0:	1a5b      	subs	r3, r3, r1
 800a1b2:	42ab      	cmp	r3, r5
 800a1b4:	dcf2      	bgt.n	800a19c <_printf_i+0x214>
 800a1b6:	e7eb      	b.n	800a190 <_printf_i+0x208>
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	f104 0619 	add.w	r6, r4, #25
 800a1be:	e7f5      	b.n	800a1ac <_printf_i+0x224>
 800a1c0:	0800dbe6 	.word	0x0800dbe6
 800a1c4:	0800dbf7 	.word	0x0800dbf7

0800a1c8 <std>:
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a1d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d6:	6083      	str	r3, [r0, #8]
 800a1d8:	8181      	strh	r1, [r0, #12]
 800a1da:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1dc:	81c2      	strh	r2, [r0, #14]
 800a1de:	6183      	str	r3, [r0, #24]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	2208      	movs	r2, #8
 800a1e4:	305c      	adds	r0, #92	@ 0x5c
 800a1e6:	f000 f9f9 	bl	800a5dc <memset>
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a220 <std+0x58>)
 800a1ec:	6224      	str	r4, [r4, #32]
 800a1ee:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a224 <std+0x5c>)
 800a1f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a228 <std+0x60>)
 800a1f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a22c <std+0x64>)
 800a1fa:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a230 <std+0x68>)
 800a1fe:	429c      	cmp	r4, r3
 800a200:	d006      	beq.n	800a210 <std+0x48>
 800a202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a206:	4294      	cmp	r4, r2
 800a208:	d002      	beq.n	800a210 <std+0x48>
 800a20a:	33d0      	adds	r3, #208	@ 0xd0
 800a20c:	429c      	cmp	r4, r3
 800a20e:	d105      	bne.n	800a21c <std+0x54>
 800a210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a218:	f000 ba6c 	b.w	800a6f4 <__retarget_lock_init_recursive>
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	bf00      	nop
 800a220:	0800a42d 	.word	0x0800a42d
 800a224:	0800a44f 	.word	0x0800a44f
 800a228:	0800a487 	.word	0x0800a487
 800a22c:	0800a4ab 	.word	0x0800a4ab
 800a230:	200026fc 	.word	0x200026fc

0800a234 <stdio_exit_handler>:
 800a234:	4a02      	ldr	r2, [pc, #8]	@ (800a240 <stdio_exit_handler+0xc>)
 800a236:	4903      	ldr	r1, [pc, #12]	@ (800a244 <stdio_exit_handler+0x10>)
 800a238:	4803      	ldr	r0, [pc, #12]	@ (800a248 <stdio_exit_handler+0x14>)
 800a23a:	f000 b869 	b.w	800a310 <_fwalk_sglue>
 800a23e:	bf00      	nop
 800a240:	20000024 	.word	0x20000024
 800a244:	0800bf5d 	.word	0x0800bf5d
 800a248:	200001a0 	.word	0x200001a0

0800a24c <cleanup_stdio>:
 800a24c:	6841      	ldr	r1, [r0, #4]
 800a24e:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <cleanup_stdio+0x34>)
 800a250:	b510      	push	{r4, lr}
 800a252:	4299      	cmp	r1, r3
 800a254:	4604      	mov	r4, r0
 800a256:	d001      	beq.n	800a25c <cleanup_stdio+0x10>
 800a258:	f001 fe80 	bl	800bf5c <_fflush_r>
 800a25c:	68a1      	ldr	r1, [r4, #8]
 800a25e:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <cleanup_stdio+0x38>)
 800a260:	4299      	cmp	r1, r3
 800a262:	d002      	beq.n	800a26a <cleanup_stdio+0x1e>
 800a264:	4620      	mov	r0, r4
 800a266:	f001 fe79 	bl	800bf5c <_fflush_r>
 800a26a:	68e1      	ldr	r1, [r4, #12]
 800a26c:	4b06      	ldr	r3, [pc, #24]	@ (800a288 <cleanup_stdio+0x3c>)
 800a26e:	4299      	cmp	r1, r3
 800a270:	d004      	beq.n	800a27c <cleanup_stdio+0x30>
 800a272:	4620      	mov	r0, r4
 800a274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a278:	f001 be70 	b.w	800bf5c <_fflush_r>
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	bf00      	nop
 800a280:	200026fc 	.word	0x200026fc
 800a284:	20002764 	.word	0x20002764
 800a288:	200027cc 	.word	0x200027cc

0800a28c <global_stdio_init.part.0>:
 800a28c:	b510      	push	{r4, lr}
 800a28e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2bc <global_stdio_init.part.0+0x30>)
 800a290:	4c0b      	ldr	r4, [pc, #44]	@ (800a2c0 <global_stdio_init.part.0+0x34>)
 800a292:	4a0c      	ldr	r2, [pc, #48]	@ (800a2c4 <global_stdio_init.part.0+0x38>)
 800a294:	4620      	mov	r0, r4
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	2104      	movs	r1, #4
 800a29a:	2200      	movs	r2, #0
 800a29c:	f7ff ff94 	bl	800a1c8 <std>
 800a2a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	2109      	movs	r1, #9
 800a2a8:	f7ff ff8e 	bl	800a1c8 <std>
 800a2ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b6:	2112      	movs	r1, #18
 800a2b8:	f7ff bf86 	b.w	800a1c8 <std>
 800a2bc:	20002834 	.word	0x20002834
 800a2c0:	200026fc 	.word	0x200026fc
 800a2c4:	0800a235 	.word	0x0800a235

0800a2c8 <__sfp_lock_acquire>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	@ (800a2d0 <__sfp_lock_acquire+0x8>)
 800a2ca:	f000 ba14 	b.w	800a6f6 <__retarget_lock_acquire_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	2000283d 	.word	0x2000283d

0800a2d4 <__sfp_lock_release>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	@ (800a2dc <__sfp_lock_release+0x8>)
 800a2d6:	f000 ba0f 	b.w	800a6f8 <__retarget_lock_release_recursive>
 800a2da:	bf00      	nop
 800a2dc:	2000283d 	.word	0x2000283d

0800a2e0 <__sinit>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	f7ff fff0 	bl	800a2c8 <__sfp_lock_acquire>
 800a2e8:	6a23      	ldr	r3, [r4, #32]
 800a2ea:	b11b      	cbz	r3, 800a2f4 <__sinit+0x14>
 800a2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f0:	f7ff bff0 	b.w	800a2d4 <__sfp_lock_release>
 800a2f4:	4b04      	ldr	r3, [pc, #16]	@ (800a308 <__sinit+0x28>)
 800a2f6:	6223      	str	r3, [r4, #32]
 800a2f8:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <__sinit+0x2c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1f5      	bne.n	800a2ec <__sinit+0xc>
 800a300:	f7ff ffc4 	bl	800a28c <global_stdio_init.part.0>
 800a304:	e7f2      	b.n	800a2ec <__sinit+0xc>
 800a306:	bf00      	nop
 800a308:	0800a24d 	.word	0x0800a24d
 800a30c:	20002834 	.word	0x20002834

0800a310 <_fwalk_sglue>:
 800a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a314:	4607      	mov	r7, r0
 800a316:	4688      	mov	r8, r1
 800a318:	4614      	mov	r4, r2
 800a31a:	2600      	movs	r6, #0
 800a31c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a320:	f1b9 0901 	subs.w	r9, r9, #1
 800a324:	d505      	bpl.n	800a332 <_fwalk_sglue+0x22>
 800a326:	6824      	ldr	r4, [r4, #0]
 800a328:	2c00      	cmp	r4, #0
 800a32a:	d1f7      	bne.n	800a31c <_fwalk_sglue+0xc>
 800a32c:	4630      	mov	r0, r6
 800a32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d907      	bls.n	800a348 <_fwalk_sglue+0x38>
 800a338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a33c:	3301      	adds	r3, #1
 800a33e:	d003      	beq.n	800a348 <_fwalk_sglue+0x38>
 800a340:	4629      	mov	r1, r5
 800a342:	4638      	mov	r0, r7
 800a344:	47c0      	blx	r8
 800a346:	4306      	orrs	r6, r0
 800a348:	3568      	adds	r5, #104	@ 0x68
 800a34a:	e7e9      	b.n	800a320 <_fwalk_sglue+0x10>

0800a34c <iprintf>:
 800a34c:	b40f      	push	{r0, r1, r2, r3}
 800a34e:	b507      	push	{r0, r1, r2, lr}
 800a350:	4906      	ldr	r1, [pc, #24]	@ (800a36c <iprintf+0x20>)
 800a352:	ab04      	add	r3, sp, #16
 800a354:	6808      	ldr	r0, [r1, #0]
 800a356:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35a:	6881      	ldr	r1, [r0, #8]
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	f001 fc65 	bl	800bc2c <_vfiprintf_r>
 800a362:	b003      	add	sp, #12
 800a364:	f85d eb04 	ldr.w	lr, [sp], #4
 800a368:	b004      	add	sp, #16
 800a36a:	4770      	bx	lr
 800a36c:	2000019c 	.word	0x2000019c

0800a370 <_puts_r>:
 800a370:	6a03      	ldr	r3, [r0, #32]
 800a372:	b570      	push	{r4, r5, r6, lr}
 800a374:	4605      	mov	r5, r0
 800a376:	460e      	mov	r6, r1
 800a378:	6884      	ldr	r4, [r0, #8]
 800a37a:	b90b      	cbnz	r3, 800a380 <_puts_r+0x10>
 800a37c:	f7ff ffb0 	bl	800a2e0 <__sinit>
 800a380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a382:	07db      	lsls	r3, r3, #31
 800a384:	d405      	bmi.n	800a392 <_puts_r+0x22>
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	0598      	lsls	r0, r3, #22
 800a38a:	d402      	bmi.n	800a392 <_puts_r+0x22>
 800a38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a38e:	f000 f9b2 	bl	800a6f6 <__retarget_lock_acquire_recursive>
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	0719      	lsls	r1, r3, #28
 800a396:	d502      	bpl.n	800a39e <_puts_r+0x2e>
 800a398:	6923      	ldr	r3, [r4, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d135      	bne.n	800a40a <_puts_r+0x9a>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f000 f8c5 	bl	800a530 <__swsetup_r>
 800a3a6:	b380      	cbz	r0, 800a40a <_puts_r+0x9a>
 800a3a8:	f04f 35ff 	mov.w	r5, #4294967295
 800a3ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3ae:	07da      	lsls	r2, r3, #31
 800a3b0:	d405      	bmi.n	800a3be <_puts_r+0x4e>
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	059b      	lsls	r3, r3, #22
 800a3b6:	d402      	bmi.n	800a3be <_puts_r+0x4e>
 800a3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ba:	f000 f99d 	bl	800a6f8 <__retarget_lock_release_recursive>
 800a3be:	4628      	mov	r0, r5
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	da04      	bge.n	800a3d0 <_puts_r+0x60>
 800a3c6:	69a2      	ldr	r2, [r4, #24]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	dc17      	bgt.n	800a3fc <_puts_r+0x8c>
 800a3cc:	290a      	cmp	r1, #10
 800a3ce:	d015      	beq.n	800a3fc <_puts_r+0x8c>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	6022      	str	r2, [r4, #0]
 800a3d6:	7019      	strb	r1, [r3, #0]
 800a3d8:	68a3      	ldr	r3, [r4, #8]
 800a3da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	60a3      	str	r3, [r4, #8]
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d1ed      	bne.n	800a3c2 <_puts_r+0x52>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da11      	bge.n	800a40e <_puts_r+0x9e>
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	210a      	movs	r1, #10
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 f85f 	bl	800a4b2 <__swbuf_r>
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d0d7      	beq.n	800a3a8 <_puts_r+0x38>
 800a3f8:	250a      	movs	r5, #10
 800a3fa:	e7d7      	b.n	800a3ac <_puts_r+0x3c>
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 f857 	bl	800a4b2 <__swbuf_r>
 800a404:	3001      	adds	r0, #1
 800a406:	d1e7      	bne.n	800a3d8 <_puts_r+0x68>
 800a408:	e7ce      	b.n	800a3a8 <_puts_r+0x38>
 800a40a:	3e01      	subs	r6, #1
 800a40c:	e7e4      	b.n	800a3d8 <_puts_r+0x68>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	6022      	str	r2, [r4, #0]
 800a414:	220a      	movs	r2, #10
 800a416:	701a      	strb	r2, [r3, #0]
 800a418:	e7ee      	b.n	800a3f8 <_puts_r+0x88>
	...

0800a41c <puts>:
 800a41c:	4b02      	ldr	r3, [pc, #8]	@ (800a428 <puts+0xc>)
 800a41e:	4601      	mov	r1, r0
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	f7ff bfa5 	b.w	800a370 <_puts_r>
 800a426:	bf00      	nop
 800a428:	2000019c 	.word	0x2000019c

0800a42c <__sread>:
 800a42c:	b510      	push	{r4, lr}
 800a42e:	460c      	mov	r4, r1
 800a430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a434:	f000 f900 	bl	800a638 <_read_r>
 800a438:	2800      	cmp	r0, #0
 800a43a:	bfab      	itete	ge
 800a43c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a43e:	89a3      	ldrhlt	r3, [r4, #12]
 800a440:	181b      	addge	r3, r3, r0
 800a442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a446:	bfac      	ite	ge
 800a448:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a44a:	81a3      	strhlt	r3, [r4, #12]
 800a44c:	bd10      	pop	{r4, pc}

0800a44e <__swrite>:
 800a44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a452:	461f      	mov	r7, r3
 800a454:	898b      	ldrh	r3, [r1, #12]
 800a456:	4605      	mov	r5, r0
 800a458:	05db      	lsls	r3, r3, #23
 800a45a:	460c      	mov	r4, r1
 800a45c:	4616      	mov	r6, r2
 800a45e:	d505      	bpl.n	800a46c <__swrite+0x1e>
 800a460:	2302      	movs	r3, #2
 800a462:	2200      	movs	r2, #0
 800a464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a468:	f000 f8d4 	bl	800a614 <_lseek_r>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	4632      	mov	r2, r6
 800a470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a474:	81a3      	strh	r3, [r4, #12]
 800a476:	4628      	mov	r0, r5
 800a478:	463b      	mov	r3, r7
 800a47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a482:	f000 b8fb 	b.w	800a67c <_write_r>

0800a486 <__sseek>:
 800a486:	b510      	push	{r4, lr}
 800a488:	460c      	mov	r4, r1
 800a48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48e:	f000 f8c1 	bl	800a614 <_lseek_r>
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	bf15      	itete	ne
 800a498:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a49a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a49e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4a2:	81a3      	strheq	r3, [r4, #12]
 800a4a4:	bf18      	it	ne
 800a4a6:	81a3      	strhne	r3, [r4, #12]
 800a4a8:	bd10      	pop	{r4, pc}

0800a4aa <__sclose>:
 800a4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ae:	f000 b8a1 	b.w	800a5f4 <_close_r>

0800a4b2 <__swbuf_r>:
 800a4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b4:	460e      	mov	r6, r1
 800a4b6:	4614      	mov	r4, r2
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	b118      	cbz	r0, 800a4c4 <__swbuf_r+0x12>
 800a4bc:	6a03      	ldr	r3, [r0, #32]
 800a4be:	b90b      	cbnz	r3, 800a4c4 <__swbuf_r+0x12>
 800a4c0:	f7ff ff0e 	bl	800a2e0 <__sinit>
 800a4c4:	69a3      	ldr	r3, [r4, #24]
 800a4c6:	60a3      	str	r3, [r4, #8]
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	071a      	lsls	r2, r3, #28
 800a4cc:	d501      	bpl.n	800a4d2 <__swbuf_r+0x20>
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	b943      	cbnz	r3, 800a4e4 <__swbuf_r+0x32>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 f82b 	bl	800a530 <__swsetup_r>
 800a4da:	b118      	cbz	r0, 800a4e4 <__swbuf_r+0x32>
 800a4dc:	f04f 37ff 	mov.w	r7, #4294967295
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	6922      	ldr	r2, [r4, #16]
 800a4e8:	b2f6      	uxtb	r6, r6
 800a4ea:	1a98      	subs	r0, r3, r2
 800a4ec:	6963      	ldr	r3, [r4, #20]
 800a4ee:	4637      	mov	r7, r6
 800a4f0:	4283      	cmp	r3, r0
 800a4f2:	dc05      	bgt.n	800a500 <__swbuf_r+0x4e>
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f001 fd30 	bl	800bf5c <_fflush_r>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d1ed      	bne.n	800a4dc <__swbuf_r+0x2a>
 800a500:	68a3      	ldr	r3, [r4, #8]
 800a502:	3b01      	subs	r3, #1
 800a504:	60a3      	str	r3, [r4, #8]
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	6022      	str	r2, [r4, #0]
 800a50c:	701e      	strb	r6, [r3, #0]
 800a50e:	6962      	ldr	r2, [r4, #20]
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	429a      	cmp	r2, r3
 800a514:	d004      	beq.n	800a520 <__swbuf_r+0x6e>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	07db      	lsls	r3, r3, #31
 800a51a:	d5e1      	bpl.n	800a4e0 <__swbuf_r+0x2e>
 800a51c:	2e0a      	cmp	r6, #10
 800a51e:	d1df      	bne.n	800a4e0 <__swbuf_r+0x2e>
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f001 fd1a 	bl	800bf5c <_fflush_r>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d0d9      	beq.n	800a4e0 <__swbuf_r+0x2e>
 800a52c:	e7d6      	b.n	800a4dc <__swbuf_r+0x2a>
	...

0800a530 <__swsetup_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4b29      	ldr	r3, [pc, #164]	@ (800a5d8 <__swsetup_r+0xa8>)
 800a534:	4605      	mov	r5, r0
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	460c      	mov	r4, r1
 800a53a:	b118      	cbz	r0, 800a544 <__swsetup_r+0x14>
 800a53c:	6a03      	ldr	r3, [r0, #32]
 800a53e:	b90b      	cbnz	r3, 800a544 <__swsetup_r+0x14>
 800a540:	f7ff fece 	bl	800a2e0 <__sinit>
 800a544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a548:	0719      	lsls	r1, r3, #28
 800a54a:	d422      	bmi.n	800a592 <__swsetup_r+0x62>
 800a54c:	06da      	lsls	r2, r3, #27
 800a54e:	d407      	bmi.n	800a560 <__swsetup_r+0x30>
 800a550:	2209      	movs	r2, #9
 800a552:	602a      	str	r2, [r5, #0]
 800a554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a558:	f04f 30ff 	mov.w	r0, #4294967295
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	e033      	b.n	800a5c8 <__swsetup_r+0x98>
 800a560:	0758      	lsls	r0, r3, #29
 800a562:	d512      	bpl.n	800a58a <__swsetup_r+0x5a>
 800a564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a566:	b141      	cbz	r1, 800a57a <__swsetup_r+0x4a>
 800a568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a56c:	4299      	cmp	r1, r3
 800a56e:	d002      	beq.n	800a576 <__swsetup_r+0x46>
 800a570:	4628      	mov	r0, r5
 800a572:	f000 ff4d 	bl	800b410 <_free_r>
 800a576:	2300      	movs	r3, #0
 800a578:	6363      	str	r3, [r4, #52]	@ 0x34
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	2300      	movs	r3, #0
 800a584:	6063      	str	r3, [r4, #4]
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	f043 0308 	orr.w	r3, r3, #8
 800a590:	81a3      	strh	r3, [r4, #12]
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	b94b      	cbnz	r3, 800a5aa <__swsetup_r+0x7a>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a59c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5a0:	d003      	beq.n	800a5aa <__swsetup_r+0x7a>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f001 fd38 	bl	800c01a <__smakebuf_r>
 800a5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ae:	f013 0201 	ands.w	r2, r3, #1
 800a5b2:	d00a      	beq.n	800a5ca <__swsetup_r+0x9a>
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	60a2      	str	r2, [r4, #8]
 800a5b8:	6962      	ldr	r2, [r4, #20]
 800a5ba:	4252      	negs	r2, r2
 800a5bc:	61a2      	str	r2, [r4, #24]
 800a5be:	6922      	ldr	r2, [r4, #16]
 800a5c0:	b942      	cbnz	r2, 800a5d4 <__swsetup_r+0xa4>
 800a5c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5c6:	d1c5      	bne.n	800a554 <__swsetup_r+0x24>
 800a5c8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ca:	0799      	lsls	r1, r3, #30
 800a5cc:	bf58      	it	pl
 800a5ce:	6962      	ldrpl	r2, [r4, #20]
 800a5d0:	60a2      	str	r2, [r4, #8]
 800a5d2:	e7f4      	b.n	800a5be <__swsetup_r+0x8e>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e7f7      	b.n	800a5c8 <__swsetup_r+0x98>
 800a5d8:	2000019c 	.word	0x2000019c

0800a5dc <memset>:
 800a5dc:	4603      	mov	r3, r0
 800a5de:	4402      	add	r2, r0
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d100      	bne.n	800a5e6 <memset+0xa>
 800a5e4:	4770      	bx	lr
 800a5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ea:	e7f9      	b.n	800a5e0 <memset+0x4>

0800a5ec <_localeconv_r>:
 800a5ec:	4800      	ldr	r0, [pc, #0]	@ (800a5f0 <_localeconv_r+0x4>)
 800a5ee:	4770      	bx	lr
 800a5f0:	20000120 	.word	0x20000120

0800a5f4 <_close_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	4d05      	ldr	r5, [pc, #20]	@ (800a610 <_close_r+0x1c>)
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	602b      	str	r3, [r5, #0]
 800a600:	f7f8 fd0e 	bl	8003020 <_close>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_close_r+0x1a>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_close_r+0x1a>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	20002838 	.word	0x20002838

0800a614 <_lseek_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	4611      	mov	r1, r2
 800a61c:	2200      	movs	r2, #0
 800a61e:	4d05      	ldr	r5, [pc, #20]	@ (800a634 <_lseek_r+0x20>)
 800a620:	602a      	str	r2, [r5, #0]
 800a622:	461a      	mov	r2, r3
 800a624:	f7f8 fd06 	bl	8003034 <_lseek>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_lseek_r+0x1e>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_lseek_r+0x1e>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	20002838 	.word	0x20002838

0800a638 <_read_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	4611      	mov	r1, r2
 800a640:	2200      	movs	r2, #0
 800a642:	4d05      	ldr	r5, [pc, #20]	@ (800a658 <_read_r+0x20>)
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7f8 fcda 	bl	8003000 <_read>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_read_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_read_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20002838 	.word	0x20002838

0800a65c <_sbrk_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	2300      	movs	r3, #0
 800a660:	4d05      	ldr	r5, [pc, #20]	@ (800a678 <_sbrk_r+0x1c>)
 800a662:	4604      	mov	r4, r0
 800a664:	4608      	mov	r0, r1
 800a666:	602b      	str	r3, [r5, #0]
 800a668:	f7f8 fce6 	bl	8003038 <_sbrk>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_sbrk_r+0x1a>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_sbrk_r+0x1a>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	20002838 	.word	0x20002838

0800a67c <_write_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	4611      	mov	r1, r2
 800a684:	2200      	movs	r2, #0
 800a686:	4d05      	ldr	r5, [pc, #20]	@ (800a69c <_write_r+0x20>)
 800a688:	602a      	str	r2, [r5, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f7f8 fa3e 	bl	8002b0c <_write>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_write_r+0x1e>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_write_r+0x1e>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20002838 	.word	0x20002838

0800a6a0 <__errno>:
 800a6a0:	4b01      	ldr	r3, [pc, #4]	@ (800a6a8 <__errno+0x8>)
 800a6a2:	6818      	ldr	r0, [r3, #0]
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	2000019c 	.word	0x2000019c

0800a6ac <__libc_init_array>:
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	2600      	movs	r6, #0
 800a6b0:	4d0c      	ldr	r5, [pc, #48]	@ (800a6e4 <__libc_init_array+0x38>)
 800a6b2:	4c0d      	ldr	r4, [pc, #52]	@ (800a6e8 <__libc_init_array+0x3c>)
 800a6b4:	1b64      	subs	r4, r4, r5
 800a6b6:	10a4      	asrs	r4, r4, #2
 800a6b8:	42a6      	cmp	r6, r4
 800a6ba:	d109      	bne.n	800a6d0 <__libc_init_array+0x24>
 800a6bc:	f002 fc7a 	bl	800cfb4 <_init>
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	4d0a      	ldr	r5, [pc, #40]	@ (800a6ec <__libc_init_array+0x40>)
 800a6c4:	4c0a      	ldr	r4, [pc, #40]	@ (800a6f0 <__libc_init_array+0x44>)
 800a6c6:	1b64      	subs	r4, r4, r5
 800a6c8:	10a4      	asrs	r4, r4, #2
 800a6ca:	42a6      	cmp	r6, r4
 800a6cc:	d105      	bne.n	800a6da <__libc_init_array+0x2e>
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}
 800a6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d4:	4798      	blx	r3
 800a6d6:	3601      	adds	r6, #1
 800a6d8:	e7ee      	b.n	800a6b8 <__libc_init_array+0xc>
 800a6da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6de:	4798      	blx	r3
 800a6e0:	3601      	adds	r6, #1
 800a6e2:	e7f2      	b.n	800a6ca <__libc_init_array+0x1e>
 800a6e4:	0800df80 	.word	0x0800df80
 800a6e8:	0800df80 	.word	0x0800df80
 800a6ec:	0800df80 	.word	0x0800df80
 800a6f0:	0800df84 	.word	0x0800df84

0800a6f4 <__retarget_lock_init_recursive>:
 800a6f4:	4770      	bx	lr

0800a6f6 <__retarget_lock_acquire_recursive>:
 800a6f6:	4770      	bx	lr

0800a6f8 <__retarget_lock_release_recursive>:
 800a6f8:	4770      	bx	lr

0800a6fa <memchr>:
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	b2c9      	uxtb	r1, r1
 800a700:	4402      	add	r2, r0
 800a702:	4293      	cmp	r3, r2
 800a704:	4618      	mov	r0, r3
 800a706:	d101      	bne.n	800a70c <memchr+0x12>
 800a708:	2000      	movs	r0, #0
 800a70a:	e003      	b.n	800a714 <memchr+0x1a>
 800a70c:	7804      	ldrb	r4, [r0, #0]
 800a70e:	3301      	adds	r3, #1
 800a710:	428c      	cmp	r4, r1
 800a712:	d1f6      	bne.n	800a702 <memchr+0x8>
 800a714:	bd10      	pop	{r4, pc}

0800a716 <memcpy>:
 800a716:	440a      	add	r2, r1
 800a718:	4291      	cmp	r1, r2
 800a71a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a71e:	d100      	bne.n	800a722 <memcpy+0xc>
 800a720:	4770      	bx	lr
 800a722:	b510      	push	{r4, lr}
 800a724:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a728:	4291      	cmp	r1, r2
 800a72a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a72e:	d1f9      	bne.n	800a724 <memcpy+0xe>
 800a730:	bd10      	pop	{r4, pc}
	...

0800a734 <__assert_func>:
 800a734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a736:	4614      	mov	r4, r2
 800a738:	461a      	mov	r2, r3
 800a73a:	4b09      	ldr	r3, [pc, #36]	@ (800a760 <__assert_func+0x2c>)
 800a73c:	4605      	mov	r5, r0
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68d8      	ldr	r0, [r3, #12]
 800a742:	b954      	cbnz	r4, 800a75a <__assert_func+0x26>
 800a744:	4b07      	ldr	r3, [pc, #28]	@ (800a764 <__assert_func+0x30>)
 800a746:	461c      	mov	r4, r3
 800a748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a74c:	9100      	str	r1, [sp, #0]
 800a74e:	462b      	mov	r3, r5
 800a750:	4905      	ldr	r1, [pc, #20]	@ (800a768 <__assert_func+0x34>)
 800a752:	f001 fc2b 	bl	800bfac <fiprintf>
 800a756:	f001 fcbf 	bl	800c0d8 <abort>
 800a75a:	4b04      	ldr	r3, [pc, #16]	@ (800a76c <__assert_func+0x38>)
 800a75c:	e7f4      	b.n	800a748 <__assert_func+0x14>
 800a75e:	bf00      	nop
 800a760:	2000019c 	.word	0x2000019c
 800a764:	0800dc4d 	.word	0x0800dc4d
 800a768:	0800dc1f 	.word	0x0800dc1f
 800a76c:	0800dc12 	.word	0x0800dc12

0800a770 <quorem>:
 800a770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	6903      	ldr	r3, [r0, #16]
 800a776:	690c      	ldr	r4, [r1, #16]
 800a778:	4607      	mov	r7, r0
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	db7e      	blt.n	800a87c <quorem+0x10c>
 800a77e:	3c01      	subs	r4, #1
 800a780:	00a3      	lsls	r3, r4, #2
 800a782:	f100 0514 	add.w	r5, r0, #20
 800a786:	f101 0814 	add.w	r8, r1, #20
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a79a:	3301      	adds	r3, #1
 800a79c:	429a      	cmp	r2, r3
 800a79e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7a6:	d32e      	bcc.n	800a806 <quorem+0x96>
 800a7a8:	f04f 0a00 	mov.w	sl, #0
 800a7ac:	46c4      	mov	ip, r8
 800a7ae:	46ae      	mov	lr, r5
 800a7b0:	46d3      	mov	fp, sl
 800a7b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7b6:	b298      	uxth	r0, r3
 800a7b8:	fb06 a000 	mla	r0, r6, r0, sl
 800a7bc:	0c1b      	lsrs	r3, r3, #16
 800a7be:	0c02      	lsrs	r2, r0, #16
 800a7c0:	fb06 2303 	mla	r3, r6, r3, r2
 800a7c4:	f8de 2000 	ldr.w	r2, [lr]
 800a7c8:	b280      	uxth	r0, r0
 800a7ca:	b292      	uxth	r2, r2
 800a7cc:	1a12      	subs	r2, r2, r0
 800a7ce:	445a      	add	r2, fp
 800a7d0:	f8de 0000 	ldr.w	r0, [lr]
 800a7d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a7de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a7e2:	b292      	uxth	r2, r2
 800a7e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7e8:	45e1      	cmp	r9, ip
 800a7ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7ee:	f84e 2b04 	str.w	r2, [lr], #4
 800a7f2:	d2de      	bcs.n	800a7b2 <quorem+0x42>
 800a7f4:	9b00      	ldr	r3, [sp, #0]
 800a7f6:	58eb      	ldr	r3, [r5, r3]
 800a7f8:	b92b      	cbnz	r3, 800a806 <quorem+0x96>
 800a7fa:	9b01      	ldr	r3, [sp, #4]
 800a7fc:	3b04      	subs	r3, #4
 800a7fe:	429d      	cmp	r5, r3
 800a800:	461a      	mov	r2, r3
 800a802:	d32f      	bcc.n	800a864 <quorem+0xf4>
 800a804:	613c      	str	r4, [r7, #16]
 800a806:	4638      	mov	r0, r7
 800a808:	f001 f8d4 	bl	800b9b4 <__mcmp>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	db25      	blt.n	800a85c <quorem+0xec>
 800a810:	4629      	mov	r1, r5
 800a812:	2000      	movs	r0, #0
 800a814:	f858 2b04 	ldr.w	r2, [r8], #4
 800a818:	f8d1 c000 	ldr.w	ip, [r1]
 800a81c:	fa1f fe82 	uxth.w	lr, r2
 800a820:	fa1f f38c 	uxth.w	r3, ip
 800a824:	eba3 030e 	sub.w	r3, r3, lr
 800a828:	4403      	add	r3, r0
 800a82a:	0c12      	lsrs	r2, r2, #16
 800a82c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a830:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a834:	b29b      	uxth	r3, r3
 800a836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a83a:	45c1      	cmp	r9, r8
 800a83c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a840:	f841 3b04 	str.w	r3, [r1], #4
 800a844:	d2e6      	bcs.n	800a814 <quorem+0xa4>
 800a846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a84a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a84e:	b922      	cbnz	r2, 800a85a <quorem+0xea>
 800a850:	3b04      	subs	r3, #4
 800a852:	429d      	cmp	r5, r3
 800a854:	461a      	mov	r2, r3
 800a856:	d30b      	bcc.n	800a870 <quorem+0x100>
 800a858:	613c      	str	r4, [r7, #16]
 800a85a:	3601      	adds	r6, #1
 800a85c:	4630      	mov	r0, r6
 800a85e:	b003      	add	sp, #12
 800a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a864:	6812      	ldr	r2, [r2, #0]
 800a866:	3b04      	subs	r3, #4
 800a868:	2a00      	cmp	r2, #0
 800a86a:	d1cb      	bne.n	800a804 <quorem+0x94>
 800a86c:	3c01      	subs	r4, #1
 800a86e:	e7c6      	b.n	800a7fe <quorem+0x8e>
 800a870:	6812      	ldr	r2, [r2, #0]
 800a872:	3b04      	subs	r3, #4
 800a874:	2a00      	cmp	r2, #0
 800a876:	d1ef      	bne.n	800a858 <quorem+0xe8>
 800a878:	3c01      	subs	r4, #1
 800a87a:	e7ea      	b.n	800a852 <quorem+0xe2>
 800a87c:	2000      	movs	r0, #0
 800a87e:	e7ee      	b.n	800a85e <quorem+0xee>

0800a880 <_dtoa_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	4614      	mov	r4, r2
 800a886:	461d      	mov	r5, r3
 800a888:	69c7      	ldr	r7, [r0, #28]
 800a88a:	b097      	sub	sp, #92	@ 0x5c
 800a88c:	4683      	mov	fp, r0
 800a88e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a892:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a894:	b97f      	cbnz	r7, 800a8b6 <_dtoa_r+0x36>
 800a896:	2010      	movs	r0, #16
 800a898:	f7fe ff84 	bl	80097a4 <malloc>
 800a89c:	4602      	mov	r2, r0
 800a89e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a8a2:	b920      	cbnz	r0, 800a8ae <_dtoa_r+0x2e>
 800a8a4:	21ef      	movs	r1, #239	@ 0xef
 800a8a6:	4ba8      	ldr	r3, [pc, #672]	@ (800ab48 <_dtoa_r+0x2c8>)
 800a8a8:	48a8      	ldr	r0, [pc, #672]	@ (800ab4c <_dtoa_r+0x2cc>)
 800a8aa:	f7ff ff43 	bl	800a734 <__assert_func>
 800a8ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a8b2:	6007      	str	r7, [r0, #0]
 800a8b4:	60c7      	str	r7, [r0, #12]
 800a8b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8ba:	6819      	ldr	r1, [r3, #0]
 800a8bc:	b159      	cbz	r1, 800a8d6 <_dtoa_r+0x56>
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	4093      	lsls	r3, r2
 800a8c4:	604a      	str	r2, [r1, #4]
 800a8c6:	608b      	str	r3, [r1, #8]
 800a8c8:	4658      	mov	r0, fp
 800a8ca:	f000 fe3b 	bl	800b544 <_Bfree>
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	1e2b      	subs	r3, r5, #0
 800a8d8:	bfaf      	iteee	ge
 800a8da:	2300      	movge	r3, #0
 800a8dc:	2201      	movlt	r2, #1
 800a8de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a8e2:	9303      	strlt	r3, [sp, #12]
 800a8e4:	bfa8      	it	ge
 800a8e6:	6033      	strge	r3, [r6, #0]
 800a8e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a8ec:	4b98      	ldr	r3, [pc, #608]	@ (800ab50 <_dtoa_r+0x2d0>)
 800a8ee:	bfb8      	it	lt
 800a8f0:	6032      	strlt	r2, [r6, #0]
 800a8f2:	ea33 0308 	bics.w	r3, r3, r8
 800a8f6:	d112      	bne.n	800a91e <_dtoa_r+0x9e>
 800a8f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a904:	4323      	orrs	r3, r4
 800a906:	f000 8550 	beq.w	800b3aa <_dtoa_r+0xb2a>
 800a90a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a90c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800ab54 <_dtoa_r+0x2d4>
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 8552 	beq.w	800b3ba <_dtoa_r+0xb3a>
 800a916:	f10a 0303 	add.w	r3, sl, #3
 800a91a:	f000 bd4c 	b.w	800b3b6 <_dtoa_r+0xb36>
 800a91e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a922:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a92a:	2200      	movs	r2, #0
 800a92c:	2300      	movs	r3, #0
 800a92e:	f7f6 f83b 	bl	80009a8 <__aeabi_dcmpeq>
 800a932:	4607      	mov	r7, r0
 800a934:	b158      	cbz	r0, 800a94e <_dtoa_r+0xce>
 800a936:	2301      	movs	r3, #1
 800a938:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a93e:	b113      	cbz	r3, 800a946 <_dtoa_r+0xc6>
 800a940:	4b85      	ldr	r3, [pc, #532]	@ (800ab58 <_dtoa_r+0x2d8>)
 800a942:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800ab5c <_dtoa_r+0x2dc>
 800a94a:	f000 bd36 	b.w	800b3ba <_dtoa_r+0xb3a>
 800a94e:	ab14      	add	r3, sp, #80	@ 0x50
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	ab15      	add	r3, sp, #84	@ 0x54
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	4658      	mov	r0, fp
 800a958:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a95c:	f001 f8da 	bl	800bb14 <__d2b>
 800a960:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a964:	4681      	mov	r9, r0
 800a966:	2e00      	cmp	r6, #0
 800a968:	d077      	beq.n	800aa5a <_dtoa_r+0x1da>
 800a96a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a96e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a970:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a978:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a97c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a980:	9712      	str	r7, [sp, #72]	@ 0x48
 800a982:	4619      	mov	r1, r3
 800a984:	2200      	movs	r2, #0
 800a986:	4b76      	ldr	r3, [pc, #472]	@ (800ab60 <_dtoa_r+0x2e0>)
 800a988:	f7f5 fbee 	bl	8000168 <__aeabi_dsub>
 800a98c:	a368      	add	r3, pc, #416	@ (adr r3, 800ab30 <_dtoa_r+0x2b0>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fda1 	bl	80004d8 <__aeabi_dmul>
 800a996:	a368      	add	r3, pc, #416	@ (adr r3, 800ab38 <_dtoa_r+0x2b8>)
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f7f5 fbe6 	bl	800016c <__adddf3>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	460d      	mov	r5, r1
 800a9a6:	f7f5 fd2d 	bl	8000404 <__aeabi_i2d>
 800a9aa:	a365      	add	r3, pc, #404	@ (adr r3, 800ab40 <_dtoa_r+0x2c0>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fd92 	bl	80004d8 <__aeabi_dmul>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f7f5 fbd6 	bl	800016c <__adddf3>
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	f7f6 f838 	bl	8000a38 <__aeabi_d2iz>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4607      	mov	r7, r0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f7f5 fff3 	bl	80009bc <__aeabi_dcmplt>
 800a9d6:	b140      	cbz	r0, 800a9ea <_dtoa_r+0x16a>
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7f5 fd13 	bl	8000404 <__aeabi_i2d>
 800a9de:	4622      	mov	r2, r4
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	f7f5 ffe1 	bl	80009a8 <__aeabi_dcmpeq>
 800a9e6:	b900      	cbnz	r0, 800a9ea <_dtoa_r+0x16a>
 800a9e8:	3f01      	subs	r7, #1
 800a9ea:	2f16      	cmp	r7, #22
 800a9ec:	d853      	bhi.n	800aa96 <_dtoa_r+0x216>
 800a9ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9f2:	4b5c      	ldr	r3, [pc, #368]	@ (800ab64 <_dtoa_r+0x2e4>)
 800a9f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f7f5 ffde 	bl	80009bc <__aeabi_dcmplt>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d04a      	beq.n	800aa9a <_dtoa_r+0x21a>
 800aa04:	2300      	movs	r3, #0
 800aa06:	3f01      	subs	r7, #1
 800aa08:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa0c:	1b9b      	subs	r3, r3, r6
 800aa0e:	1e5a      	subs	r2, r3, #1
 800aa10:	bf46      	itte	mi
 800aa12:	f1c3 0801 	rsbmi	r8, r3, #1
 800aa16:	2300      	movmi	r3, #0
 800aa18:	f04f 0800 	movpl.w	r8, #0
 800aa1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa1e:	bf48      	it	mi
 800aa20:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800aa22:	2f00      	cmp	r7, #0
 800aa24:	db3b      	blt.n	800aa9e <_dtoa_r+0x21e>
 800aa26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa28:	970e      	str	r7, [sp, #56]	@ 0x38
 800aa2a:	443b      	add	r3, r7
 800aa2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa2e:	2300      	movs	r3, #0
 800aa30:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa34:	2b09      	cmp	r3, #9
 800aa36:	d866      	bhi.n	800ab06 <_dtoa_r+0x286>
 800aa38:	2b05      	cmp	r3, #5
 800aa3a:	bfc4      	itt	gt
 800aa3c:	3b04      	subgt	r3, #4
 800aa3e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800aa40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa42:	bfc8      	it	gt
 800aa44:	2400      	movgt	r4, #0
 800aa46:	f1a3 0302 	sub.w	r3, r3, #2
 800aa4a:	bfd8      	it	le
 800aa4c:	2401      	movle	r4, #1
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d864      	bhi.n	800ab1c <_dtoa_r+0x29c>
 800aa52:	e8df f003 	tbb	[pc, r3]
 800aa56:	382b      	.short	0x382b
 800aa58:	5636      	.short	0x5636
 800aa5a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aa5e:	441e      	add	r6, r3
 800aa60:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa64:	2b20      	cmp	r3, #32
 800aa66:	bfc1      	itttt	gt
 800aa68:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa70:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa74:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa78:	bfd6      	itet	le
 800aa7a:	f1c3 0320 	rsble	r3, r3, #32
 800aa7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa82:	fa04 f003 	lslle.w	r0, r4, r3
 800aa86:	f7f5 fcad 	bl	80003e4 <__aeabi_ui2d>
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa90:	3e01      	subs	r6, #1
 800aa92:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa94:	e775      	b.n	800a982 <_dtoa_r+0x102>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e7b6      	b.n	800aa08 <_dtoa_r+0x188>
 800aa9a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800aa9c:	e7b5      	b.n	800aa0a <_dtoa_r+0x18a>
 800aa9e:	427b      	negs	r3, r7
 800aaa0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	eba8 0807 	sub.w	r8, r8, r7
 800aaa8:	930e      	str	r3, [sp, #56]	@ 0x38
 800aaaa:	e7c2      	b.n	800aa32 <_dtoa_r+0x1b2>
 800aaac:	2300      	movs	r3, #0
 800aaae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aab0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	dc35      	bgt.n	800ab22 <_dtoa_r+0x2a2>
 800aab6:	2301      	movs	r3, #1
 800aab8:	461a      	mov	r2, r3
 800aaba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aabe:	9221      	str	r2, [sp, #132]	@ 0x84
 800aac0:	e00b      	b.n	800aada <_dtoa_r+0x25a>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e7f3      	b.n	800aaae <_dtoa_r+0x22e>
 800aac6:	2300      	movs	r3, #0
 800aac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aacc:	18fb      	adds	r3, r7, r3
 800aace:	9308      	str	r3, [sp, #32]
 800aad0:	3301      	adds	r3, #1
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	9307      	str	r3, [sp, #28]
 800aad6:	bfb8      	it	lt
 800aad8:	2301      	movlt	r3, #1
 800aada:	2100      	movs	r1, #0
 800aadc:	2204      	movs	r2, #4
 800aade:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aae2:	f102 0514 	add.w	r5, r2, #20
 800aae6:	429d      	cmp	r5, r3
 800aae8:	d91f      	bls.n	800ab2a <_dtoa_r+0x2aa>
 800aaea:	6041      	str	r1, [r0, #4]
 800aaec:	4658      	mov	r0, fp
 800aaee:	f000 fce9 	bl	800b4c4 <_Balloc>
 800aaf2:	4682      	mov	sl, r0
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d139      	bne.n	800ab6c <_dtoa_r+0x2ec>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	f240 11af 	movw	r1, #431	@ 0x1af
 800aafe:	4b1a      	ldr	r3, [pc, #104]	@ (800ab68 <_dtoa_r+0x2e8>)
 800ab00:	e6d2      	b.n	800a8a8 <_dtoa_r+0x28>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e7e0      	b.n	800aac8 <_dtoa_r+0x248>
 800ab06:	2401      	movs	r4, #1
 800ab08:	2300      	movs	r3, #0
 800ab0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab0c:	9320      	str	r3, [sp, #128]	@ 0x80
 800ab0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab12:	2200      	movs	r2, #0
 800ab14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab18:	2312      	movs	r3, #18
 800ab1a:	e7d0      	b.n	800aabe <_dtoa_r+0x23e>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab20:	e7f5      	b.n	800ab0e <_dtoa_r+0x28e>
 800ab22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab28:	e7d7      	b.n	800aada <_dtoa_r+0x25a>
 800ab2a:	3101      	adds	r1, #1
 800ab2c:	0052      	lsls	r2, r2, #1
 800ab2e:	e7d8      	b.n	800aae2 <_dtoa_r+0x262>
 800ab30:	636f4361 	.word	0x636f4361
 800ab34:	3fd287a7 	.word	0x3fd287a7
 800ab38:	8b60c8b3 	.word	0x8b60c8b3
 800ab3c:	3fc68a28 	.word	0x3fc68a28
 800ab40:	509f79fb 	.word	0x509f79fb
 800ab44:	3fd34413 	.word	0x3fd34413
 800ab48:	0800dc5b 	.word	0x0800dc5b
 800ab4c:	0800dc72 	.word	0x0800dc72
 800ab50:	7ff00000 	.word	0x7ff00000
 800ab54:	0800dc57 	.word	0x0800dc57
 800ab58:	0800dbe5 	.word	0x0800dbe5
 800ab5c:	0800dbe4 	.word	0x0800dbe4
 800ab60:	3ff80000 	.word	0x3ff80000
 800ab64:	0800dd68 	.word	0x0800dd68
 800ab68:	0800dcca 	.word	0x0800dcca
 800ab6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab70:	6018      	str	r0, [r3, #0]
 800ab72:	9b07      	ldr	r3, [sp, #28]
 800ab74:	2b0e      	cmp	r3, #14
 800ab76:	f200 80a4 	bhi.w	800acc2 <_dtoa_r+0x442>
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	f000 80a1 	beq.w	800acc2 <_dtoa_r+0x442>
 800ab80:	2f00      	cmp	r7, #0
 800ab82:	dd33      	ble.n	800abec <_dtoa_r+0x36c>
 800ab84:	4b86      	ldr	r3, [pc, #536]	@ (800ada0 <_dtoa_r+0x520>)
 800ab86:	f007 020f 	and.w	r2, r7, #15
 800ab8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab8e:	05f8      	lsls	r0, r7, #23
 800ab90:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab94:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab9c:	d516      	bpl.n	800abcc <_dtoa_r+0x34c>
 800ab9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aba2:	4b80      	ldr	r3, [pc, #512]	@ (800ada4 <_dtoa_r+0x524>)
 800aba4:	2603      	movs	r6, #3
 800aba6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abaa:	f7f5 fdbf 	bl	800072c <__aeabi_ddiv>
 800abae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb2:	f004 040f 	and.w	r4, r4, #15
 800abb6:	4d7b      	ldr	r5, [pc, #492]	@ (800ada4 <_dtoa_r+0x524>)
 800abb8:	b954      	cbnz	r4, 800abd0 <_dtoa_r+0x350>
 800abba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abc2:	f7f5 fdb3 	bl	800072c <__aeabi_ddiv>
 800abc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abca:	e028      	b.n	800ac1e <_dtoa_r+0x39e>
 800abcc:	2602      	movs	r6, #2
 800abce:	e7f2      	b.n	800abb6 <_dtoa_r+0x336>
 800abd0:	07e1      	lsls	r1, r4, #31
 800abd2:	d508      	bpl.n	800abe6 <_dtoa_r+0x366>
 800abd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abdc:	f7f5 fc7c 	bl	80004d8 <__aeabi_dmul>
 800abe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abe4:	3601      	adds	r6, #1
 800abe6:	1064      	asrs	r4, r4, #1
 800abe8:	3508      	adds	r5, #8
 800abea:	e7e5      	b.n	800abb8 <_dtoa_r+0x338>
 800abec:	f000 80d2 	beq.w	800ad94 <_dtoa_r+0x514>
 800abf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abf4:	427c      	negs	r4, r7
 800abf6:	4b6a      	ldr	r3, [pc, #424]	@ (800ada0 <_dtoa_r+0x520>)
 800abf8:	f004 020f 	and.w	r2, r4, #15
 800abfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	f7f5 fc68 	bl	80004d8 <__aeabi_dmul>
 800ac08:	2602      	movs	r6, #2
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac10:	4d64      	ldr	r5, [pc, #400]	@ (800ada4 <_dtoa_r+0x524>)
 800ac12:	1124      	asrs	r4, r4, #4
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	f040 80b2 	bne.w	800ad7e <_dtoa_r+0x4fe>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1d3      	bne.n	800abc6 <_dtoa_r+0x346>
 800ac1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 80b7 	beq.w	800ad98 <_dtoa_r+0x518>
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	4b5d      	ldr	r3, [pc, #372]	@ (800ada8 <_dtoa_r+0x528>)
 800ac32:	f7f5 fec3 	bl	80009bc <__aeabi_dcmplt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f000 80ae 	beq.w	800ad98 <_dtoa_r+0x518>
 800ac3c:	9b07      	ldr	r3, [sp, #28]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 80aa 	beq.w	800ad98 <_dtoa_r+0x518>
 800ac44:	9b08      	ldr	r3, [sp, #32]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dd37      	ble.n	800acba <_dtoa_r+0x43a>
 800ac4a:	1e7b      	subs	r3, r7, #1
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	9304      	str	r3, [sp, #16]
 800ac50:	2200      	movs	r2, #0
 800ac52:	4629      	mov	r1, r5
 800ac54:	4b55      	ldr	r3, [pc, #340]	@ (800adac <_dtoa_r+0x52c>)
 800ac56:	f7f5 fc3f 	bl	80004d8 <__aeabi_dmul>
 800ac5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac5e:	9c08      	ldr	r4, [sp, #32]
 800ac60:	3601      	adds	r6, #1
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7f5 fbce 	bl	8000404 <__aeabi_i2d>
 800ac68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac6c:	f7f5 fc34 	bl	80004d8 <__aeabi_dmul>
 800ac70:	2200      	movs	r2, #0
 800ac72:	4b4f      	ldr	r3, [pc, #316]	@ (800adb0 <_dtoa_r+0x530>)
 800ac74:	f7f5 fa7a 	bl	800016c <__adddf3>
 800ac78:	4605      	mov	r5, r0
 800ac7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac7e:	2c00      	cmp	r4, #0
 800ac80:	f040 809a 	bne.w	800adb8 <_dtoa_r+0x538>
 800ac84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4b4a      	ldr	r3, [pc, #296]	@ (800adb4 <_dtoa_r+0x534>)
 800ac8c:	f7f5 fa6c 	bl	8000168 <__aeabi_dsub>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac98:	462a      	mov	r2, r5
 800ac9a:	4633      	mov	r3, r6
 800ac9c:	f7f5 feac 	bl	80009f8 <__aeabi_dcmpgt>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f040 828e 	bne.w	800b1c2 <_dtoa_r+0x942>
 800aca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acaa:	462a      	mov	r2, r5
 800acac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800acb0:	f7f5 fe84 	bl	80009bc <__aeabi_dcmplt>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f040 8127 	bne.w	800af08 <_dtoa_r+0x688>
 800acba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800acbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800acc2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f2c0 8163 	blt.w	800af90 <_dtoa_r+0x710>
 800acca:	2f0e      	cmp	r7, #14
 800accc:	f300 8160 	bgt.w	800af90 <_dtoa_r+0x710>
 800acd0:	4b33      	ldr	r3, [pc, #204]	@ (800ada0 <_dtoa_r+0x520>)
 800acd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800acde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da03      	bge.n	800acec <_dtoa_r+0x46c>
 800ace4:	9b07      	ldr	r3, [sp, #28]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f340 8100 	ble.w	800aeec <_dtoa_r+0x66c>
 800acec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acf0:	4656      	mov	r6, sl
 800acf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acf6:	4620      	mov	r0, r4
 800acf8:	4629      	mov	r1, r5
 800acfa:	f7f5 fd17 	bl	800072c <__aeabi_ddiv>
 800acfe:	f7f5 fe9b 	bl	8000a38 <__aeabi_d2iz>
 800ad02:	4680      	mov	r8, r0
 800ad04:	f7f5 fb7e 	bl	8000404 <__aeabi_i2d>
 800ad08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad0c:	f7f5 fbe4 	bl	80004d8 <__aeabi_dmul>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4620      	mov	r0, r4
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f5 fa26 	bl	8000168 <__aeabi_dsub>
 800ad1c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad20:	9d07      	ldr	r5, [sp, #28]
 800ad22:	f806 4b01 	strb.w	r4, [r6], #1
 800ad26:	eba6 040a 	sub.w	r4, r6, sl
 800ad2a:	42a5      	cmp	r5, r4
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	f040 8116 	bne.w	800af60 <_dtoa_r+0x6e0>
 800ad34:	f7f5 fa1a 	bl	800016c <__adddf3>
 800ad38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	460d      	mov	r5, r1
 800ad40:	f7f5 fe5a 	bl	80009f8 <__aeabi_dcmpgt>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	f040 80f8 	bne.w	800af3a <_dtoa_r+0x6ba>
 800ad4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fe29 	bl	80009a8 <__aeabi_dcmpeq>
 800ad56:	b118      	cbz	r0, 800ad60 <_dtoa_r+0x4e0>
 800ad58:	f018 0f01 	tst.w	r8, #1
 800ad5c:	f040 80ed 	bne.w	800af3a <_dtoa_r+0x6ba>
 800ad60:	4649      	mov	r1, r9
 800ad62:	4658      	mov	r0, fp
 800ad64:	f000 fbee 	bl	800b544 <_Bfree>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	7033      	strb	r3, [r6, #0]
 800ad6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ad6e:	3701      	adds	r7, #1
 800ad70:	601f      	str	r7, [r3, #0]
 800ad72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8320 	beq.w	800b3ba <_dtoa_r+0xb3a>
 800ad7a:	601e      	str	r6, [r3, #0]
 800ad7c:	e31d      	b.n	800b3ba <_dtoa_r+0xb3a>
 800ad7e:	07e2      	lsls	r2, r4, #31
 800ad80:	d505      	bpl.n	800ad8e <_dtoa_r+0x50e>
 800ad82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad86:	f7f5 fba7 	bl	80004d8 <__aeabi_dmul>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	3601      	adds	r6, #1
 800ad8e:	1064      	asrs	r4, r4, #1
 800ad90:	3508      	adds	r5, #8
 800ad92:	e73f      	b.n	800ac14 <_dtoa_r+0x394>
 800ad94:	2602      	movs	r6, #2
 800ad96:	e742      	b.n	800ac1e <_dtoa_r+0x39e>
 800ad98:	9c07      	ldr	r4, [sp, #28]
 800ad9a:	9704      	str	r7, [sp, #16]
 800ad9c:	e761      	b.n	800ac62 <_dtoa_r+0x3e2>
 800ad9e:	bf00      	nop
 800ada0:	0800dd68 	.word	0x0800dd68
 800ada4:	0800dd40 	.word	0x0800dd40
 800ada8:	3ff00000 	.word	0x3ff00000
 800adac:	40240000 	.word	0x40240000
 800adb0:	401c0000 	.word	0x401c0000
 800adb4:	40140000 	.word	0x40140000
 800adb8:	4b70      	ldr	r3, [pc, #448]	@ (800af7c <_dtoa_r+0x6fc>)
 800adba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adc4:	4454      	add	r4, sl
 800adc6:	2900      	cmp	r1, #0
 800adc8:	d045      	beq.n	800ae56 <_dtoa_r+0x5d6>
 800adca:	2000      	movs	r0, #0
 800adcc:	496c      	ldr	r1, [pc, #432]	@ (800af80 <_dtoa_r+0x700>)
 800adce:	f7f5 fcad 	bl	800072c <__aeabi_ddiv>
 800add2:	4633      	mov	r3, r6
 800add4:	462a      	mov	r2, r5
 800add6:	f7f5 f9c7 	bl	8000168 <__aeabi_dsub>
 800adda:	4656      	mov	r6, sl
 800addc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ade0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade4:	f7f5 fe28 	bl	8000a38 <__aeabi_d2iz>
 800ade8:	4605      	mov	r5, r0
 800adea:	f7f5 fb0b 	bl	8000404 <__aeabi_i2d>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adf6:	f7f5 f9b7 	bl	8000168 <__aeabi_dsub>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	3530      	adds	r5, #48	@ 0x30
 800ae00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae08:	f806 5b01 	strb.w	r5, [r6], #1
 800ae0c:	f7f5 fdd6 	bl	80009bc <__aeabi_dcmplt>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d163      	bne.n	800aedc <_dtoa_r+0x65c>
 800ae14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae18:	2000      	movs	r0, #0
 800ae1a:	495a      	ldr	r1, [pc, #360]	@ (800af84 <_dtoa_r+0x704>)
 800ae1c:	f7f5 f9a4 	bl	8000168 <__aeabi_dsub>
 800ae20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae24:	f7f5 fdca 	bl	80009bc <__aeabi_dcmplt>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f040 8087 	bne.w	800af3c <_dtoa_r+0x6bc>
 800ae2e:	42a6      	cmp	r6, r4
 800ae30:	f43f af43 	beq.w	800acba <_dtoa_r+0x43a>
 800ae34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae38:	2200      	movs	r2, #0
 800ae3a:	4b53      	ldr	r3, [pc, #332]	@ (800af88 <_dtoa_r+0x708>)
 800ae3c:	f7f5 fb4c 	bl	80004d8 <__aeabi_dmul>
 800ae40:	2200      	movs	r2, #0
 800ae42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae4a:	4b4f      	ldr	r3, [pc, #316]	@ (800af88 <_dtoa_r+0x708>)
 800ae4c:	f7f5 fb44 	bl	80004d8 <__aeabi_dmul>
 800ae50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae54:	e7c4      	b.n	800ade0 <_dtoa_r+0x560>
 800ae56:	4631      	mov	r1, r6
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f7f5 fb3d 	bl	80004d8 <__aeabi_dmul>
 800ae5e:	4656      	mov	r6, sl
 800ae60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae64:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ae66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae6a:	f7f5 fde5 	bl	8000a38 <__aeabi_d2iz>
 800ae6e:	4605      	mov	r5, r0
 800ae70:	f7f5 fac8 	bl	8000404 <__aeabi_i2d>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7c:	f7f5 f974 	bl	8000168 <__aeabi_dsub>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	3530      	adds	r5, #48	@ 0x30
 800ae86:	f806 5b01 	strb.w	r5, [r6], #1
 800ae8a:	42a6      	cmp	r6, r4
 800ae8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae90:	f04f 0200 	mov.w	r2, #0
 800ae94:	d124      	bne.n	800aee0 <_dtoa_r+0x660>
 800ae96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae9a:	4b39      	ldr	r3, [pc, #228]	@ (800af80 <_dtoa_r+0x700>)
 800ae9c:	f7f5 f966 	bl	800016c <__adddf3>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aea8:	f7f5 fda6 	bl	80009f8 <__aeabi_dcmpgt>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d145      	bne.n	800af3c <_dtoa_r+0x6bc>
 800aeb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	4932      	ldr	r1, [pc, #200]	@ (800af80 <_dtoa_r+0x700>)
 800aeb8:	f7f5 f956 	bl	8000168 <__aeabi_dsub>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aec4:	f7f5 fd7a 	bl	80009bc <__aeabi_dcmplt>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f43f aef6 	beq.w	800acba <_dtoa_r+0x43a>
 800aece:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aed0:	1e73      	subs	r3, r6, #1
 800aed2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aed4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aed8:	2b30      	cmp	r3, #48	@ 0x30
 800aeda:	d0f8      	beq.n	800aece <_dtoa_r+0x64e>
 800aedc:	9f04      	ldr	r7, [sp, #16]
 800aede:	e73f      	b.n	800ad60 <_dtoa_r+0x4e0>
 800aee0:	4b29      	ldr	r3, [pc, #164]	@ (800af88 <_dtoa_r+0x708>)
 800aee2:	f7f5 faf9 	bl	80004d8 <__aeabi_dmul>
 800aee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeea:	e7bc      	b.n	800ae66 <_dtoa_r+0x5e6>
 800aeec:	d10c      	bne.n	800af08 <_dtoa_r+0x688>
 800aeee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef2:	2200      	movs	r2, #0
 800aef4:	4b25      	ldr	r3, [pc, #148]	@ (800af8c <_dtoa_r+0x70c>)
 800aef6:	f7f5 faef 	bl	80004d8 <__aeabi_dmul>
 800aefa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aefe:	f7f5 fd71 	bl	80009e4 <__aeabi_dcmpge>
 800af02:	2800      	cmp	r0, #0
 800af04:	f000 815b 	beq.w	800b1be <_dtoa_r+0x93e>
 800af08:	2400      	movs	r4, #0
 800af0a:	4625      	mov	r5, r4
 800af0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af0e:	4656      	mov	r6, sl
 800af10:	43db      	mvns	r3, r3
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	2700      	movs	r7, #0
 800af16:	4621      	mov	r1, r4
 800af18:	4658      	mov	r0, fp
 800af1a:	f000 fb13 	bl	800b544 <_Bfree>
 800af1e:	2d00      	cmp	r5, #0
 800af20:	d0dc      	beq.n	800aedc <_dtoa_r+0x65c>
 800af22:	b12f      	cbz	r7, 800af30 <_dtoa_r+0x6b0>
 800af24:	42af      	cmp	r7, r5
 800af26:	d003      	beq.n	800af30 <_dtoa_r+0x6b0>
 800af28:	4639      	mov	r1, r7
 800af2a:	4658      	mov	r0, fp
 800af2c:	f000 fb0a 	bl	800b544 <_Bfree>
 800af30:	4629      	mov	r1, r5
 800af32:	4658      	mov	r0, fp
 800af34:	f000 fb06 	bl	800b544 <_Bfree>
 800af38:	e7d0      	b.n	800aedc <_dtoa_r+0x65c>
 800af3a:	9704      	str	r7, [sp, #16]
 800af3c:	4633      	mov	r3, r6
 800af3e:	461e      	mov	r6, r3
 800af40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af44:	2a39      	cmp	r2, #57	@ 0x39
 800af46:	d107      	bne.n	800af58 <_dtoa_r+0x6d8>
 800af48:	459a      	cmp	sl, r3
 800af4a:	d1f8      	bne.n	800af3e <_dtoa_r+0x6be>
 800af4c:	9a04      	ldr	r2, [sp, #16]
 800af4e:	3201      	adds	r2, #1
 800af50:	9204      	str	r2, [sp, #16]
 800af52:	2230      	movs	r2, #48	@ 0x30
 800af54:	f88a 2000 	strb.w	r2, [sl]
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	3201      	adds	r2, #1
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	e7bd      	b.n	800aedc <_dtoa_r+0x65c>
 800af60:	2200      	movs	r2, #0
 800af62:	4b09      	ldr	r3, [pc, #36]	@ (800af88 <_dtoa_r+0x708>)
 800af64:	f7f5 fab8 	bl	80004d8 <__aeabi_dmul>
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	4604      	mov	r4, r0
 800af6e:	460d      	mov	r5, r1
 800af70:	f7f5 fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 800af74:	2800      	cmp	r0, #0
 800af76:	f43f aebc 	beq.w	800acf2 <_dtoa_r+0x472>
 800af7a:	e6f1      	b.n	800ad60 <_dtoa_r+0x4e0>
 800af7c:	0800dd68 	.word	0x0800dd68
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	3ff00000 	.word	0x3ff00000
 800af88:	40240000 	.word	0x40240000
 800af8c:	40140000 	.word	0x40140000
 800af90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af92:	2a00      	cmp	r2, #0
 800af94:	f000 80db 	beq.w	800b14e <_dtoa_r+0x8ce>
 800af98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800af9a:	2a01      	cmp	r2, #1
 800af9c:	f300 80bf 	bgt.w	800b11e <_dtoa_r+0x89e>
 800afa0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800afa2:	2a00      	cmp	r2, #0
 800afa4:	f000 80b7 	beq.w	800b116 <_dtoa_r+0x896>
 800afa8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800afac:	4646      	mov	r6, r8
 800afae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afb2:	2101      	movs	r1, #1
 800afb4:	441a      	add	r2, r3
 800afb6:	4658      	mov	r0, fp
 800afb8:	4498      	add	r8, r3
 800afba:	9209      	str	r2, [sp, #36]	@ 0x24
 800afbc:	f000 fb76 	bl	800b6ac <__i2b>
 800afc0:	4605      	mov	r5, r0
 800afc2:	b15e      	cbz	r6, 800afdc <_dtoa_r+0x75c>
 800afc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dd08      	ble.n	800afdc <_dtoa_r+0x75c>
 800afca:	42b3      	cmp	r3, r6
 800afcc:	bfa8      	it	ge
 800afce:	4633      	movge	r3, r6
 800afd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd2:	eba8 0803 	sub.w	r8, r8, r3
 800afd6:	1af6      	subs	r6, r6, r3
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	9309      	str	r3, [sp, #36]	@ 0x24
 800afdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afde:	b1f3      	cbz	r3, 800b01e <_dtoa_r+0x79e>
 800afe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 80b7 	beq.w	800b156 <_dtoa_r+0x8d6>
 800afe8:	b18c      	cbz	r4, 800b00e <_dtoa_r+0x78e>
 800afea:	4629      	mov	r1, r5
 800afec:	4622      	mov	r2, r4
 800afee:	4658      	mov	r0, fp
 800aff0:	f000 fc1a 	bl	800b828 <__pow5mult>
 800aff4:	464a      	mov	r2, r9
 800aff6:	4601      	mov	r1, r0
 800aff8:	4605      	mov	r5, r0
 800affa:	4658      	mov	r0, fp
 800affc:	f000 fb6c 	bl	800b6d8 <__multiply>
 800b000:	4649      	mov	r1, r9
 800b002:	9004      	str	r0, [sp, #16]
 800b004:	4658      	mov	r0, fp
 800b006:	f000 fa9d 	bl	800b544 <_Bfree>
 800b00a:	9b04      	ldr	r3, [sp, #16]
 800b00c:	4699      	mov	r9, r3
 800b00e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b010:	1b1a      	subs	r2, r3, r4
 800b012:	d004      	beq.n	800b01e <_dtoa_r+0x79e>
 800b014:	4649      	mov	r1, r9
 800b016:	4658      	mov	r0, fp
 800b018:	f000 fc06 	bl	800b828 <__pow5mult>
 800b01c:	4681      	mov	r9, r0
 800b01e:	2101      	movs	r1, #1
 800b020:	4658      	mov	r0, fp
 800b022:	f000 fb43 	bl	800b6ac <__i2b>
 800b026:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b028:	4604      	mov	r4, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 81c9 	beq.w	800b3c2 <_dtoa_r+0xb42>
 800b030:	461a      	mov	r2, r3
 800b032:	4601      	mov	r1, r0
 800b034:	4658      	mov	r0, fp
 800b036:	f000 fbf7 	bl	800b828 <__pow5mult>
 800b03a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b03c:	4604      	mov	r4, r0
 800b03e:	2b01      	cmp	r3, #1
 800b040:	f300 808f 	bgt.w	800b162 <_dtoa_r+0x8e2>
 800b044:	9b02      	ldr	r3, [sp, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 8087 	bne.w	800b15a <_dtoa_r+0x8da>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b052:	2b00      	cmp	r3, #0
 800b054:	f040 8083 	bne.w	800b15e <_dtoa_r+0x8de>
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b05e:	0d1b      	lsrs	r3, r3, #20
 800b060:	051b      	lsls	r3, r3, #20
 800b062:	b12b      	cbz	r3, 800b070 <_dtoa_r+0x7f0>
 800b064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b066:	f108 0801 	add.w	r8, r8, #1
 800b06a:	3301      	adds	r3, #1
 800b06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b06e:	2301      	movs	r3, #1
 800b070:	930a      	str	r3, [sp, #40]	@ 0x28
 800b072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 81aa 	beq.w	800b3ce <_dtoa_r+0xb4e>
 800b07a:	6923      	ldr	r3, [r4, #16]
 800b07c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b080:	6918      	ldr	r0, [r3, #16]
 800b082:	f000 fac7 	bl	800b614 <__hi0bits>
 800b086:	f1c0 0020 	rsb	r0, r0, #32
 800b08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b08c:	4418      	add	r0, r3
 800b08e:	f010 001f 	ands.w	r0, r0, #31
 800b092:	d071      	beq.n	800b178 <_dtoa_r+0x8f8>
 800b094:	f1c0 0320 	rsb	r3, r0, #32
 800b098:	2b04      	cmp	r3, #4
 800b09a:	dd65      	ble.n	800b168 <_dtoa_r+0x8e8>
 800b09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b09e:	f1c0 001c 	rsb	r0, r0, #28
 800b0a2:	4403      	add	r3, r0
 800b0a4:	4480      	add	r8, r0
 800b0a6:	4406      	add	r6, r0
 800b0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0aa:	f1b8 0f00 	cmp.w	r8, #0
 800b0ae:	dd05      	ble.n	800b0bc <_dtoa_r+0x83c>
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	4642      	mov	r2, r8
 800b0b4:	4658      	mov	r0, fp
 800b0b6:	f000 fc11 	bl	800b8dc <__lshift>
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	dd05      	ble.n	800b0ce <_dtoa_r+0x84e>
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4658      	mov	r0, fp
 800b0c8:	f000 fc08 	bl	800b8dc <__lshift>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d053      	beq.n	800b17c <_dtoa_r+0x8fc>
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4648      	mov	r0, r9
 800b0d8:	f000 fc6c 	bl	800b9b4 <__mcmp>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	da4d      	bge.n	800b17c <_dtoa_r+0x8fc>
 800b0e0:	1e7b      	subs	r3, r7, #1
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	220a      	movs	r2, #10
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4658      	mov	r0, fp
 800b0ec:	f000 fa4c 	bl	800b588 <__multadd>
 800b0f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0f2:	4681      	mov	r9, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 816c 	beq.w	800b3d2 <_dtoa_r+0xb52>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	220a      	movs	r2, #10
 800b100:	4658      	mov	r0, fp
 800b102:	f000 fa41 	bl	800b588 <__multadd>
 800b106:	9b08      	ldr	r3, [sp, #32]
 800b108:	4605      	mov	r5, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dc61      	bgt.n	800b1d2 <_dtoa_r+0x952>
 800b10e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b110:	2b02      	cmp	r3, #2
 800b112:	dc3b      	bgt.n	800b18c <_dtoa_r+0x90c>
 800b114:	e05d      	b.n	800b1d2 <_dtoa_r+0x952>
 800b116:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b118:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b11c:	e746      	b.n	800afac <_dtoa_r+0x72c>
 800b11e:	9b07      	ldr	r3, [sp, #28]
 800b120:	1e5c      	subs	r4, r3, #1
 800b122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b124:	42a3      	cmp	r3, r4
 800b126:	bfbf      	itttt	lt
 800b128:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b12a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b12c:	1ae3      	sublt	r3, r4, r3
 800b12e:	18d2      	addlt	r2, r2, r3
 800b130:	bfa8      	it	ge
 800b132:	1b1c      	subge	r4, r3, r4
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	bfbe      	ittt	lt
 800b138:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b13a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b13c:	2400      	movlt	r4, #0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bfb5      	itete	lt
 800b142:	eba8 0603 	sublt.w	r6, r8, r3
 800b146:	4646      	movge	r6, r8
 800b148:	2300      	movlt	r3, #0
 800b14a:	9b07      	ldrge	r3, [sp, #28]
 800b14c:	e730      	b.n	800afb0 <_dtoa_r+0x730>
 800b14e:	4646      	mov	r6, r8
 800b150:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b152:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b154:	e735      	b.n	800afc2 <_dtoa_r+0x742>
 800b156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b158:	e75c      	b.n	800b014 <_dtoa_r+0x794>
 800b15a:	2300      	movs	r3, #0
 800b15c:	e788      	b.n	800b070 <_dtoa_r+0x7f0>
 800b15e:	9b02      	ldr	r3, [sp, #8]
 800b160:	e786      	b.n	800b070 <_dtoa_r+0x7f0>
 800b162:	2300      	movs	r3, #0
 800b164:	930a      	str	r3, [sp, #40]	@ 0x28
 800b166:	e788      	b.n	800b07a <_dtoa_r+0x7fa>
 800b168:	d09f      	beq.n	800b0aa <_dtoa_r+0x82a>
 800b16a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b16c:	331c      	adds	r3, #28
 800b16e:	441a      	add	r2, r3
 800b170:	4498      	add	r8, r3
 800b172:	441e      	add	r6, r3
 800b174:	9209      	str	r2, [sp, #36]	@ 0x24
 800b176:	e798      	b.n	800b0aa <_dtoa_r+0x82a>
 800b178:	4603      	mov	r3, r0
 800b17a:	e7f6      	b.n	800b16a <_dtoa_r+0x8ea>
 800b17c:	9b07      	ldr	r3, [sp, #28]
 800b17e:	9704      	str	r7, [sp, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	dc20      	bgt.n	800b1c6 <_dtoa_r+0x946>
 800b184:	9308      	str	r3, [sp, #32]
 800b186:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b188:	2b02      	cmp	r3, #2
 800b18a:	dd1e      	ble.n	800b1ca <_dtoa_r+0x94a>
 800b18c:	9b08      	ldr	r3, [sp, #32]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f47f aebc 	bne.w	800af0c <_dtoa_r+0x68c>
 800b194:	4621      	mov	r1, r4
 800b196:	2205      	movs	r2, #5
 800b198:	4658      	mov	r0, fp
 800b19a:	f000 f9f5 	bl	800b588 <__multadd>
 800b19e:	4601      	mov	r1, r0
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	4648      	mov	r0, r9
 800b1a4:	f000 fc06 	bl	800b9b4 <__mcmp>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	f77f aeaf 	ble.w	800af0c <_dtoa_r+0x68c>
 800b1ae:	2331      	movs	r3, #49	@ 0x31
 800b1b0:	4656      	mov	r6, sl
 800b1b2:	f806 3b01 	strb.w	r3, [r6], #1
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	9304      	str	r3, [sp, #16]
 800b1bc:	e6aa      	b.n	800af14 <_dtoa_r+0x694>
 800b1be:	9c07      	ldr	r4, [sp, #28]
 800b1c0:	9704      	str	r7, [sp, #16]
 800b1c2:	4625      	mov	r5, r4
 800b1c4:	e7f3      	b.n	800b1ae <_dtoa_r+0x92e>
 800b1c6:	9b07      	ldr	r3, [sp, #28]
 800b1c8:	9308      	str	r3, [sp, #32]
 800b1ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 8104 	beq.w	800b3da <_dtoa_r+0xb5a>
 800b1d2:	2e00      	cmp	r6, #0
 800b1d4:	dd05      	ble.n	800b1e2 <_dtoa_r+0x962>
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4632      	mov	r2, r6
 800b1da:	4658      	mov	r0, fp
 800b1dc:	f000 fb7e 	bl	800b8dc <__lshift>
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d05a      	beq.n	800b29e <_dtoa_r+0xa1e>
 800b1e8:	4658      	mov	r0, fp
 800b1ea:	6869      	ldr	r1, [r5, #4]
 800b1ec:	f000 f96a 	bl	800b4c4 <_Balloc>
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	b928      	cbnz	r0, 800b200 <_dtoa_r+0x980>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1fa:	4b83      	ldr	r3, [pc, #524]	@ (800b408 <_dtoa_r+0xb88>)
 800b1fc:	f7ff bb54 	b.w	800a8a8 <_dtoa_r+0x28>
 800b200:	692a      	ldr	r2, [r5, #16]
 800b202:	f105 010c 	add.w	r1, r5, #12
 800b206:	3202      	adds	r2, #2
 800b208:	0092      	lsls	r2, r2, #2
 800b20a:	300c      	adds	r0, #12
 800b20c:	f7ff fa83 	bl	800a716 <memcpy>
 800b210:	2201      	movs	r2, #1
 800b212:	4631      	mov	r1, r6
 800b214:	4658      	mov	r0, fp
 800b216:	f000 fb61 	bl	800b8dc <__lshift>
 800b21a:	462f      	mov	r7, r5
 800b21c:	4605      	mov	r5, r0
 800b21e:	f10a 0301 	add.w	r3, sl, #1
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	9b08      	ldr	r3, [sp, #32]
 800b226:	4453      	add	r3, sl
 800b228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	930a      	str	r3, [sp, #40]	@ 0x28
 800b232:	9b07      	ldr	r3, [sp, #28]
 800b234:	4621      	mov	r1, r4
 800b236:	3b01      	subs	r3, #1
 800b238:	4648      	mov	r0, r9
 800b23a:	9302      	str	r3, [sp, #8]
 800b23c:	f7ff fa98 	bl	800a770 <quorem>
 800b240:	4639      	mov	r1, r7
 800b242:	9008      	str	r0, [sp, #32]
 800b244:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b248:	4648      	mov	r0, r9
 800b24a:	f000 fbb3 	bl	800b9b4 <__mcmp>
 800b24e:	462a      	mov	r2, r5
 800b250:	9009      	str	r0, [sp, #36]	@ 0x24
 800b252:	4621      	mov	r1, r4
 800b254:	4658      	mov	r0, fp
 800b256:	f000 fbc9 	bl	800b9ec <__mdiff>
 800b25a:	68c2      	ldr	r2, [r0, #12]
 800b25c:	4606      	mov	r6, r0
 800b25e:	bb02      	cbnz	r2, 800b2a2 <_dtoa_r+0xa22>
 800b260:	4601      	mov	r1, r0
 800b262:	4648      	mov	r0, r9
 800b264:	f000 fba6 	bl	800b9b4 <__mcmp>
 800b268:	4602      	mov	r2, r0
 800b26a:	4631      	mov	r1, r6
 800b26c:	4658      	mov	r0, fp
 800b26e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b270:	f000 f968 	bl	800b544 <_Bfree>
 800b274:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b276:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b278:	9e07      	ldr	r6, [sp, #28]
 800b27a:	ea43 0102 	orr.w	r1, r3, r2
 800b27e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b280:	4319      	orrs	r1, r3
 800b282:	d110      	bne.n	800b2a6 <_dtoa_r+0xa26>
 800b284:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b288:	d029      	beq.n	800b2de <_dtoa_r+0xa5e>
 800b28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dd02      	ble.n	800b296 <_dtoa_r+0xa16>
 800b290:	9b08      	ldr	r3, [sp, #32]
 800b292:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	f883 8000 	strb.w	r8, [r3]
 800b29c:	e63b      	b.n	800af16 <_dtoa_r+0x696>
 800b29e:	4628      	mov	r0, r5
 800b2a0:	e7bb      	b.n	800b21a <_dtoa_r+0x99a>
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	e7e1      	b.n	800b26a <_dtoa_r+0x9ea>
 800b2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	db04      	blt.n	800b2b6 <_dtoa_r+0xa36>
 800b2ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b2ae:	430b      	orrs	r3, r1
 800b2b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2b2:	430b      	orrs	r3, r1
 800b2b4:	d120      	bne.n	800b2f8 <_dtoa_r+0xa78>
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	dded      	ble.n	800b296 <_dtoa_r+0xa16>
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	2201      	movs	r2, #1
 800b2be:	4658      	mov	r0, fp
 800b2c0:	f000 fb0c 	bl	800b8dc <__lshift>
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4681      	mov	r9, r0
 800b2c8:	f000 fb74 	bl	800b9b4 <__mcmp>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	dc03      	bgt.n	800b2d8 <_dtoa_r+0xa58>
 800b2d0:	d1e1      	bne.n	800b296 <_dtoa_r+0xa16>
 800b2d2:	f018 0f01 	tst.w	r8, #1
 800b2d6:	d0de      	beq.n	800b296 <_dtoa_r+0xa16>
 800b2d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2dc:	d1d8      	bne.n	800b290 <_dtoa_r+0xa10>
 800b2de:	2339      	movs	r3, #57	@ 0x39
 800b2e0:	9a02      	ldr	r2, [sp, #8]
 800b2e2:	7013      	strb	r3, [r2, #0]
 800b2e4:	4633      	mov	r3, r6
 800b2e6:	461e      	mov	r6, r3
 800b2e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	2a39      	cmp	r2, #57	@ 0x39
 800b2f0:	d052      	beq.n	800b398 <_dtoa_r+0xb18>
 800b2f2:	3201      	adds	r2, #1
 800b2f4:	701a      	strb	r2, [r3, #0]
 800b2f6:	e60e      	b.n	800af16 <_dtoa_r+0x696>
 800b2f8:	2a00      	cmp	r2, #0
 800b2fa:	dd07      	ble.n	800b30c <_dtoa_r+0xa8c>
 800b2fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b300:	d0ed      	beq.n	800b2de <_dtoa_r+0xa5e>
 800b302:	9a02      	ldr	r2, [sp, #8]
 800b304:	f108 0301 	add.w	r3, r8, #1
 800b308:	7013      	strb	r3, [r2, #0]
 800b30a:	e604      	b.n	800af16 <_dtoa_r+0x696>
 800b30c:	9b07      	ldr	r3, [sp, #28]
 800b30e:	9a07      	ldr	r2, [sp, #28]
 800b310:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b316:	4293      	cmp	r3, r2
 800b318:	d028      	beq.n	800b36c <_dtoa_r+0xaec>
 800b31a:	4649      	mov	r1, r9
 800b31c:	2300      	movs	r3, #0
 800b31e:	220a      	movs	r2, #10
 800b320:	4658      	mov	r0, fp
 800b322:	f000 f931 	bl	800b588 <__multadd>
 800b326:	42af      	cmp	r7, r5
 800b328:	4681      	mov	r9, r0
 800b32a:	f04f 0300 	mov.w	r3, #0
 800b32e:	f04f 020a 	mov.w	r2, #10
 800b332:	4639      	mov	r1, r7
 800b334:	4658      	mov	r0, fp
 800b336:	d107      	bne.n	800b348 <_dtoa_r+0xac8>
 800b338:	f000 f926 	bl	800b588 <__multadd>
 800b33c:	4607      	mov	r7, r0
 800b33e:	4605      	mov	r5, r0
 800b340:	9b07      	ldr	r3, [sp, #28]
 800b342:	3301      	adds	r3, #1
 800b344:	9307      	str	r3, [sp, #28]
 800b346:	e774      	b.n	800b232 <_dtoa_r+0x9b2>
 800b348:	f000 f91e 	bl	800b588 <__multadd>
 800b34c:	4629      	mov	r1, r5
 800b34e:	4607      	mov	r7, r0
 800b350:	2300      	movs	r3, #0
 800b352:	220a      	movs	r2, #10
 800b354:	4658      	mov	r0, fp
 800b356:	f000 f917 	bl	800b588 <__multadd>
 800b35a:	4605      	mov	r5, r0
 800b35c:	e7f0      	b.n	800b340 <_dtoa_r+0xac0>
 800b35e:	9b08      	ldr	r3, [sp, #32]
 800b360:	2700      	movs	r7, #0
 800b362:	2b00      	cmp	r3, #0
 800b364:	bfcc      	ite	gt
 800b366:	461e      	movgt	r6, r3
 800b368:	2601      	movle	r6, #1
 800b36a:	4456      	add	r6, sl
 800b36c:	4649      	mov	r1, r9
 800b36e:	2201      	movs	r2, #1
 800b370:	4658      	mov	r0, fp
 800b372:	f000 fab3 	bl	800b8dc <__lshift>
 800b376:	4621      	mov	r1, r4
 800b378:	4681      	mov	r9, r0
 800b37a:	f000 fb1b 	bl	800b9b4 <__mcmp>
 800b37e:	2800      	cmp	r0, #0
 800b380:	dcb0      	bgt.n	800b2e4 <_dtoa_r+0xa64>
 800b382:	d102      	bne.n	800b38a <_dtoa_r+0xb0a>
 800b384:	f018 0f01 	tst.w	r8, #1
 800b388:	d1ac      	bne.n	800b2e4 <_dtoa_r+0xa64>
 800b38a:	4633      	mov	r3, r6
 800b38c:	461e      	mov	r6, r3
 800b38e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b392:	2a30      	cmp	r2, #48	@ 0x30
 800b394:	d0fa      	beq.n	800b38c <_dtoa_r+0xb0c>
 800b396:	e5be      	b.n	800af16 <_dtoa_r+0x696>
 800b398:	459a      	cmp	sl, r3
 800b39a:	d1a4      	bne.n	800b2e6 <_dtoa_r+0xa66>
 800b39c:	9b04      	ldr	r3, [sp, #16]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	2331      	movs	r3, #49	@ 0x31
 800b3a4:	f88a 3000 	strb.w	r3, [sl]
 800b3a8:	e5b5      	b.n	800af16 <_dtoa_r+0x696>
 800b3aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b3ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b40c <_dtoa_r+0xb8c>
 800b3b0:	b11b      	cbz	r3, 800b3ba <_dtoa_r+0xb3a>
 800b3b2:	f10a 0308 	add.w	r3, sl, #8
 800b3b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	4650      	mov	r0, sl
 800b3bc:	b017      	add	sp, #92	@ 0x5c
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	f77f ae3d 	ble.w	800b044 <_dtoa_r+0x7c4>
 800b3ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	e65b      	b.n	800b08a <_dtoa_r+0x80a>
 800b3d2:	9b08      	ldr	r3, [sp, #32]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f77f aed6 	ble.w	800b186 <_dtoa_r+0x906>
 800b3da:	4656      	mov	r6, sl
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4648      	mov	r0, r9
 800b3e0:	f7ff f9c6 	bl	800a770 <quorem>
 800b3e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3e8:	9b08      	ldr	r3, [sp, #32]
 800b3ea:	f806 8b01 	strb.w	r8, [r6], #1
 800b3ee:	eba6 020a 	sub.w	r2, r6, sl
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	ddb3      	ble.n	800b35e <_dtoa_r+0xade>
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	220a      	movs	r2, #10
 800b3fc:	4658      	mov	r0, fp
 800b3fe:	f000 f8c3 	bl	800b588 <__multadd>
 800b402:	4681      	mov	r9, r0
 800b404:	e7ea      	b.n	800b3dc <_dtoa_r+0xb5c>
 800b406:	bf00      	nop
 800b408:	0800dcca 	.word	0x0800dcca
 800b40c:	0800dc4e 	.word	0x0800dc4e

0800b410 <_free_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4605      	mov	r5, r0
 800b414:	2900      	cmp	r1, #0
 800b416:	d040      	beq.n	800b49a <_free_r+0x8a>
 800b418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b41c:	1f0c      	subs	r4, r1, #4
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfb8      	it	lt
 800b422:	18e4      	addlt	r4, r4, r3
 800b424:	f7fe fa68 	bl	80098f8 <__malloc_lock>
 800b428:	4a1c      	ldr	r2, [pc, #112]	@ (800b49c <_free_r+0x8c>)
 800b42a:	6813      	ldr	r3, [r2, #0]
 800b42c:	b933      	cbnz	r3, 800b43c <_free_r+0x2c>
 800b42e:	6063      	str	r3, [r4, #4]
 800b430:	6014      	str	r4, [r2, #0]
 800b432:	4628      	mov	r0, r5
 800b434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b438:	f7fe ba64 	b.w	8009904 <__malloc_unlock>
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d908      	bls.n	800b452 <_free_r+0x42>
 800b440:	6820      	ldr	r0, [r4, #0]
 800b442:	1821      	adds	r1, r4, r0
 800b444:	428b      	cmp	r3, r1
 800b446:	bf01      	itttt	eq
 800b448:	6819      	ldreq	r1, [r3, #0]
 800b44a:	685b      	ldreq	r3, [r3, #4]
 800b44c:	1809      	addeq	r1, r1, r0
 800b44e:	6021      	streq	r1, [r4, #0]
 800b450:	e7ed      	b.n	800b42e <_free_r+0x1e>
 800b452:	461a      	mov	r2, r3
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	b10b      	cbz	r3, 800b45c <_free_r+0x4c>
 800b458:	42a3      	cmp	r3, r4
 800b45a:	d9fa      	bls.n	800b452 <_free_r+0x42>
 800b45c:	6811      	ldr	r1, [r2, #0]
 800b45e:	1850      	adds	r0, r2, r1
 800b460:	42a0      	cmp	r0, r4
 800b462:	d10b      	bne.n	800b47c <_free_r+0x6c>
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	4401      	add	r1, r0
 800b468:	1850      	adds	r0, r2, r1
 800b46a:	4283      	cmp	r3, r0
 800b46c:	6011      	str	r1, [r2, #0]
 800b46e:	d1e0      	bne.n	800b432 <_free_r+0x22>
 800b470:	6818      	ldr	r0, [r3, #0]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	4408      	add	r0, r1
 800b476:	6010      	str	r0, [r2, #0]
 800b478:	6053      	str	r3, [r2, #4]
 800b47a:	e7da      	b.n	800b432 <_free_r+0x22>
 800b47c:	d902      	bls.n	800b484 <_free_r+0x74>
 800b47e:	230c      	movs	r3, #12
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	e7d6      	b.n	800b432 <_free_r+0x22>
 800b484:	6820      	ldr	r0, [r4, #0]
 800b486:	1821      	adds	r1, r4, r0
 800b488:	428b      	cmp	r3, r1
 800b48a:	bf01      	itttt	eq
 800b48c:	6819      	ldreq	r1, [r3, #0]
 800b48e:	685b      	ldreq	r3, [r3, #4]
 800b490:	1809      	addeq	r1, r1, r0
 800b492:	6021      	streq	r1, [r4, #0]
 800b494:	6063      	str	r3, [r4, #4]
 800b496:	6054      	str	r4, [r2, #4]
 800b498:	e7cb      	b.n	800b432 <_free_r+0x22>
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	200026f8 	.word	0x200026f8

0800b4a0 <__ascii_mbtowc>:
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	b901      	cbnz	r1, 800b4a6 <__ascii_mbtowc+0x6>
 800b4a4:	a901      	add	r1, sp, #4
 800b4a6:	b142      	cbz	r2, 800b4ba <__ascii_mbtowc+0x1a>
 800b4a8:	b14b      	cbz	r3, 800b4be <__ascii_mbtowc+0x1e>
 800b4aa:	7813      	ldrb	r3, [r2, #0]
 800b4ac:	600b      	str	r3, [r1, #0]
 800b4ae:	7812      	ldrb	r2, [r2, #0]
 800b4b0:	1e10      	subs	r0, r2, #0
 800b4b2:	bf18      	it	ne
 800b4b4:	2001      	movne	r0, #1
 800b4b6:	b002      	add	sp, #8
 800b4b8:	4770      	bx	lr
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	e7fb      	b.n	800b4b6 <__ascii_mbtowc+0x16>
 800b4be:	f06f 0001 	mvn.w	r0, #1
 800b4c2:	e7f8      	b.n	800b4b6 <__ascii_mbtowc+0x16>

0800b4c4 <_Balloc>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	69c6      	ldr	r6, [r0, #28]
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	b976      	cbnz	r6, 800b4ec <_Balloc+0x28>
 800b4ce:	2010      	movs	r0, #16
 800b4d0:	f7fe f968 	bl	80097a4 <malloc>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	61e0      	str	r0, [r4, #28]
 800b4d8:	b920      	cbnz	r0, 800b4e4 <_Balloc+0x20>
 800b4da:	216b      	movs	r1, #107	@ 0x6b
 800b4dc:	4b17      	ldr	r3, [pc, #92]	@ (800b53c <_Balloc+0x78>)
 800b4de:	4818      	ldr	r0, [pc, #96]	@ (800b540 <_Balloc+0x7c>)
 800b4e0:	f7ff f928 	bl	800a734 <__assert_func>
 800b4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4e8:	6006      	str	r6, [r0, #0]
 800b4ea:	60c6      	str	r6, [r0, #12]
 800b4ec:	69e6      	ldr	r6, [r4, #28]
 800b4ee:	68f3      	ldr	r3, [r6, #12]
 800b4f0:	b183      	cbz	r3, 800b514 <_Balloc+0x50>
 800b4f2:	69e3      	ldr	r3, [r4, #28]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4fa:	b9b8      	cbnz	r0, 800b52c <_Balloc+0x68>
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	fa01 f605 	lsl.w	r6, r1, r5
 800b502:	1d72      	adds	r2, r6, #5
 800b504:	4620      	mov	r0, r4
 800b506:	0092      	lsls	r2, r2, #2
 800b508:	f000 fded 	bl	800c0e6 <_calloc_r>
 800b50c:	b160      	cbz	r0, 800b528 <_Balloc+0x64>
 800b50e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b512:	e00e      	b.n	800b532 <_Balloc+0x6e>
 800b514:	2221      	movs	r2, #33	@ 0x21
 800b516:	2104      	movs	r1, #4
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 fde4 	bl	800c0e6 <_calloc_r>
 800b51e:	69e3      	ldr	r3, [r4, #28]
 800b520:	60f0      	str	r0, [r6, #12]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e4      	bne.n	800b4f2 <_Balloc+0x2e>
 800b528:	2000      	movs	r0, #0
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	6802      	ldr	r2, [r0, #0]
 800b52e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b532:	2300      	movs	r3, #0
 800b534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b538:	e7f7      	b.n	800b52a <_Balloc+0x66>
 800b53a:	bf00      	nop
 800b53c:	0800dc5b 	.word	0x0800dc5b
 800b540:	0800dcdb 	.word	0x0800dcdb

0800b544 <_Bfree>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	69c6      	ldr	r6, [r0, #28]
 800b548:	4605      	mov	r5, r0
 800b54a:	460c      	mov	r4, r1
 800b54c:	b976      	cbnz	r6, 800b56c <_Bfree+0x28>
 800b54e:	2010      	movs	r0, #16
 800b550:	f7fe f928 	bl	80097a4 <malloc>
 800b554:	4602      	mov	r2, r0
 800b556:	61e8      	str	r0, [r5, #28]
 800b558:	b920      	cbnz	r0, 800b564 <_Bfree+0x20>
 800b55a:	218f      	movs	r1, #143	@ 0x8f
 800b55c:	4b08      	ldr	r3, [pc, #32]	@ (800b580 <_Bfree+0x3c>)
 800b55e:	4809      	ldr	r0, [pc, #36]	@ (800b584 <_Bfree+0x40>)
 800b560:	f7ff f8e8 	bl	800a734 <__assert_func>
 800b564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b568:	6006      	str	r6, [r0, #0]
 800b56a:	60c6      	str	r6, [r0, #12]
 800b56c:	b13c      	cbz	r4, 800b57e <_Bfree+0x3a>
 800b56e:	69eb      	ldr	r3, [r5, #28]
 800b570:	6862      	ldr	r2, [r4, #4]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b578:	6021      	str	r1, [r4, #0]
 800b57a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	0800dc5b 	.word	0x0800dc5b
 800b584:	0800dcdb 	.word	0x0800dcdb

0800b588 <__multadd>:
 800b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58c:	4607      	mov	r7, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	461e      	mov	r6, r3
 800b592:	2000      	movs	r0, #0
 800b594:	690d      	ldr	r5, [r1, #16]
 800b596:	f101 0c14 	add.w	ip, r1, #20
 800b59a:	f8dc 3000 	ldr.w	r3, [ip]
 800b59e:	3001      	adds	r0, #1
 800b5a0:	b299      	uxth	r1, r3
 800b5a2:	fb02 6101 	mla	r1, r2, r1, r6
 800b5a6:	0c1e      	lsrs	r6, r3, #16
 800b5a8:	0c0b      	lsrs	r3, r1, #16
 800b5aa:	fb02 3306 	mla	r3, r2, r6, r3
 800b5ae:	b289      	uxth	r1, r1
 800b5b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5b4:	4285      	cmp	r5, r0
 800b5b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b5be:	dcec      	bgt.n	800b59a <__multadd+0x12>
 800b5c0:	b30e      	cbz	r6, 800b606 <__multadd+0x7e>
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	dc19      	bgt.n	800b5fc <__multadd+0x74>
 800b5c8:	6861      	ldr	r1, [r4, #4]
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	3101      	adds	r1, #1
 800b5ce:	f7ff ff79 	bl	800b4c4 <_Balloc>
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	b928      	cbnz	r0, 800b5e2 <__multadd+0x5a>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	21ba      	movs	r1, #186	@ 0xba
 800b5da:	4b0c      	ldr	r3, [pc, #48]	@ (800b60c <__multadd+0x84>)
 800b5dc:	480c      	ldr	r0, [pc, #48]	@ (800b610 <__multadd+0x88>)
 800b5de:	f7ff f8a9 	bl	800a734 <__assert_func>
 800b5e2:	6922      	ldr	r2, [r4, #16]
 800b5e4:	f104 010c 	add.w	r1, r4, #12
 800b5e8:	3202      	adds	r2, #2
 800b5ea:	0092      	lsls	r2, r2, #2
 800b5ec:	300c      	adds	r0, #12
 800b5ee:	f7ff f892 	bl	800a716 <memcpy>
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff ffa5 	bl	800b544 <_Bfree>
 800b5fa:	4644      	mov	r4, r8
 800b5fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b600:	3501      	adds	r5, #1
 800b602:	615e      	str	r6, [r3, #20]
 800b604:	6125      	str	r5, [r4, #16]
 800b606:	4620      	mov	r0, r4
 800b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60c:	0800dcca 	.word	0x0800dcca
 800b610:	0800dcdb 	.word	0x0800dcdb

0800b614 <__hi0bits>:
 800b614:	4603      	mov	r3, r0
 800b616:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b61a:	bf3a      	itte	cc
 800b61c:	0403      	lslcc	r3, r0, #16
 800b61e:	2010      	movcc	r0, #16
 800b620:	2000      	movcs	r0, #0
 800b622:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b626:	bf3c      	itt	cc
 800b628:	021b      	lslcc	r3, r3, #8
 800b62a:	3008      	addcc	r0, #8
 800b62c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b630:	bf3c      	itt	cc
 800b632:	011b      	lslcc	r3, r3, #4
 800b634:	3004      	addcc	r0, #4
 800b636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b63a:	bf3c      	itt	cc
 800b63c:	009b      	lslcc	r3, r3, #2
 800b63e:	3002      	addcc	r0, #2
 800b640:	2b00      	cmp	r3, #0
 800b642:	db05      	blt.n	800b650 <__hi0bits+0x3c>
 800b644:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b648:	f100 0001 	add.w	r0, r0, #1
 800b64c:	bf08      	it	eq
 800b64e:	2020      	moveq	r0, #32
 800b650:	4770      	bx	lr

0800b652 <__lo0bits>:
 800b652:	6803      	ldr	r3, [r0, #0]
 800b654:	4602      	mov	r2, r0
 800b656:	f013 0007 	ands.w	r0, r3, #7
 800b65a:	d00b      	beq.n	800b674 <__lo0bits+0x22>
 800b65c:	07d9      	lsls	r1, r3, #31
 800b65e:	d421      	bmi.n	800b6a4 <__lo0bits+0x52>
 800b660:	0798      	lsls	r0, r3, #30
 800b662:	bf49      	itett	mi
 800b664:	085b      	lsrmi	r3, r3, #1
 800b666:	089b      	lsrpl	r3, r3, #2
 800b668:	2001      	movmi	r0, #1
 800b66a:	6013      	strmi	r3, [r2, #0]
 800b66c:	bf5c      	itt	pl
 800b66e:	2002      	movpl	r0, #2
 800b670:	6013      	strpl	r3, [r2, #0]
 800b672:	4770      	bx	lr
 800b674:	b299      	uxth	r1, r3
 800b676:	b909      	cbnz	r1, 800b67c <__lo0bits+0x2a>
 800b678:	2010      	movs	r0, #16
 800b67a:	0c1b      	lsrs	r3, r3, #16
 800b67c:	b2d9      	uxtb	r1, r3
 800b67e:	b909      	cbnz	r1, 800b684 <__lo0bits+0x32>
 800b680:	3008      	adds	r0, #8
 800b682:	0a1b      	lsrs	r3, r3, #8
 800b684:	0719      	lsls	r1, r3, #28
 800b686:	bf04      	itt	eq
 800b688:	091b      	lsreq	r3, r3, #4
 800b68a:	3004      	addeq	r0, #4
 800b68c:	0799      	lsls	r1, r3, #30
 800b68e:	bf04      	itt	eq
 800b690:	089b      	lsreq	r3, r3, #2
 800b692:	3002      	addeq	r0, #2
 800b694:	07d9      	lsls	r1, r3, #31
 800b696:	d403      	bmi.n	800b6a0 <__lo0bits+0x4e>
 800b698:	085b      	lsrs	r3, r3, #1
 800b69a:	f100 0001 	add.w	r0, r0, #1
 800b69e:	d003      	beq.n	800b6a8 <__lo0bits+0x56>
 800b6a0:	6013      	str	r3, [r2, #0]
 800b6a2:	4770      	bx	lr
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	4770      	bx	lr
 800b6a8:	2020      	movs	r0, #32
 800b6aa:	4770      	bx	lr

0800b6ac <__i2b>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	f7ff ff07 	bl	800b4c4 <_Balloc>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	b928      	cbnz	r0, 800b6c6 <__i2b+0x1a>
 800b6ba:	f240 1145 	movw	r1, #325	@ 0x145
 800b6be:	4b04      	ldr	r3, [pc, #16]	@ (800b6d0 <__i2b+0x24>)
 800b6c0:	4804      	ldr	r0, [pc, #16]	@ (800b6d4 <__i2b+0x28>)
 800b6c2:	f7ff f837 	bl	800a734 <__assert_func>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	6144      	str	r4, [r0, #20]
 800b6ca:	6103      	str	r3, [r0, #16]
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	bf00      	nop
 800b6d0:	0800dcca 	.word	0x0800dcca
 800b6d4:	0800dcdb 	.word	0x0800dcdb

0800b6d8 <__multiply>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	4614      	mov	r4, r2
 800b6de:	690a      	ldr	r2, [r1, #16]
 800b6e0:	6923      	ldr	r3, [r4, #16]
 800b6e2:	460f      	mov	r7, r1
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	bfa2      	ittt	ge
 800b6e8:	4623      	movge	r3, r4
 800b6ea:	460c      	movge	r4, r1
 800b6ec:	461f      	movge	r7, r3
 800b6ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b6f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b6f6:	68a3      	ldr	r3, [r4, #8]
 800b6f8:	6861      	ldr	r1, [r4, #4]
 800b6fa:	eb0a 0609 	add.w	r6, sl, r9
 800b6fe:	42b3      	cmp	r3, r6
 800b700:	b085      	sub	sp, #20
 800b702:	bfb8      	it	lt
 800b704:	3101      	addlt	r1, #1
 800b706:	f7ff fedd 	bl	800b4c4 <_Balloc>
 800b70a:	b930      	cbnz	r0, 800b71a <__multiply+0x42>
 800b70c:	4602      	mov	r2, r0
 800b70e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b712:	4b43      	ldr	r3, [pc, #268]	@ (800b820 <__multiply+0x148>)
 800b714:	4843      	ldr	r0, [pc, #268]	@ (800b824 <__multiply+0x14c>)
 800b716:	f7ff f80d 	bl	800a734 <__assert_func>
 800b71a:	f100 0514 	add.w	r5, r0, #20
 800b71e:	462b      	mov	r3, r5
 800b720:	2200      	movs	r2, #0
 800b722:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b726:	4543      	cmp	r3, r8
 800b728:	d321      	bcc.n	800b76e <__multiply+0x96>
 800b72a:	f107 0114 	add.w	r1, r7, #20
 800b72e:	f104 0214 	add.w	r2, r4, #20
 800b732:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b736:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b73a:	9302      	str	r3, [sp, #8]
 800b73c:	1b13      	subs	r3, r2, r4
 800b73e:	3b15      	subs	r3, #21
 800b740:	f023 0303 	bic.w	r3, r3, #3
 800b744:	3304      	adds	r3, #4
 800b746:	f104 0715 	add.w	r7, r4, #21
 800b74a:	42ba      	cmp	r2, r7
 800b74c:	bf38      	it	cc
 800b74e:	2304      	movcc	r3, #4
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	9b02      	ldr	r3, [sp, #8]
 800b754:	9103      	str	r1, [sp, #12]
 800b756:	428b      	cmp	r3, r1
 800b758:	d80c      	bhi.n	800b774 <__multiply+0x9c>
 800b75a:	2e00      	cmp	r6, #0
 800b75c:	dd03      	ble.n	800b766 <__multiply+0x8e>
 800b75e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b762:	2b00      	cmp	r3, #0
 800b764:	d05a      	beq.n	800b81c <__multiply+0x144>
 800b766:	6106      	str	r6, [r0, #16]
 800b768:	b005      	add	sp, #20
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	f843 2b04 	str.w	r2, [r3], #4
 800b772:	e7d8      	b.n	800b726 <__multiply+0x4e>
 800b774:	f8b1 a000 	ldrh.w	sl, [r1]
 800b778:	f1ba 0f00 	cmp.w	sl, #0
 800b77c:	d023      	beq.n	800b7c6 <__multiply+0xee>
 800b77e:	46a9      	mov	r9, r5
 800b780:	f04f 0c00 	mov.w	ip, #0
 800b784:	f104 0e14 	add.w	lr, r4, #20
 800b788:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b78c:	f8d9 3000 	ldr.w	r3, [r9]
 800b790:	fa1f fb87 	uxth.w	fp, r7
 800b794:	b29b      	uxth	r3, r3
 800b796:	fb0a 330b 	mla	r3, sl, fp, r3
 800b79a:	4463      	add	r3, ip
 800b79c:	f8d9 c000 	ldr.w	ip, [r9]
 800b7a0:	0c3f      	lsrs	r7, r7, #16
 800b7a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b7a6:	fb0a c707 	mla	r7, sl, r7, ip
 800b7aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7b4:	4572      	cmp	r2, lr
 800b7b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b7ba:	f849 3b04 	str.w	r3, [r9], #4
 800b7be:	d8e3      	bhi.n	800b788 <__multiply+0xb0>
 800b7c0:	9b01      	ldr	r3, [sp, #4]
 800b7c2:	f845 c003 	str.w	ip, [r5, r3]
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	3104      	adds	r1, #4
 800b7ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7ce:	f1b9 0f00 	cmp.w	r9, #0
 800b7d2:	d021      	beq.n	800b818 <__multiply+0x140>
 800b7d4:	46ae      	mov	lr, r5
 800b7d6:	f04f 0a00 	mov.w	sl, #0
 800b7da:	682b      	ldr	r3, [r5, #0]
 800b7dc:	f104 0c14 	add.w	ip, r4, #20
 800b7e0:	f8bc b000 	ldrh.w	fp, [ip]
 800b7e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	fb09 770b 	mla	r7, r9, fp, r7
 800b7ee:	4457      	add	r7, sl
 800b7f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7f4:	f84e 3b04 	str.w	r3, [lr], #4
 800b7f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b800:	f8be 3000 	ldrh.w	r3, [lr]
 800b804:	4562      	cmp	r2, ip
 800b806:	fb09 330a 	mla	r3, r9, sl, r3
 800b80a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b80e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b812:	d8e5      	bhi.n	800b7e0 <__multiply+0x108>
 800b814:	9f01      	ldr	r7, [sp, #4]
 800b816:	51eb      	str	r3, [r5, r7]
 800b818:	3504      	adds	r5, #4
 800b81a:	e79a      	b.n	800b752 <__multiply+0x7a>
 800b81c:	3e01      	subs	r6, #1
 800b81e:	e79c      	b.n	800b75a <__multiply+0x82>
 800b820:	0800dcca 	.word	0x0800dcca
 800b824:	0800dcdb 	.word	0x0800dcdb

0800b828 <__pow5mult>:
 800b828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b82c:	4615      	mov	r5, r2
 800b82e:	f012 0203 	ands.w	r2, r2, #3
 800b832:	4607      	mov	r7, r0
 800b834:	460e      	mov	r6, r1
 800b836:	d007      	beq.n	800b848 <__pow5mult+0x20>
 800b838:	4c25      	ldr	r4, [pc, #148]	@ (800b8d0 <__pow5mult+0xa8>)
 800b83a:	3a01      	subs	r2, #1
 800b83c:	2300      	movs	r3, #0
 800b83e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b842:	f7ff fea1 	bl	800b588 <__multadd>
 800b846:	4606      	mov	r6, r0
 800b848:	10ad      	asrs	r5, r5, #2
 800b84a:	d03d      	beq.n	800b8c8 <__pow5mult+0xa0>
 800b84c:	69fc      	ldr	r4, [r7, #28]
 800b84e:	b97c      	cbnz	r4, 800b870 <__pow5mult+0x48>
 800b850:	2010      	movs	r0, #16
 800b852:	f7fd ffa7 	bl	80097a4 <malloc>
 800b856:	4602      	mov	r2, r0
 800b858:	61f8      	str	r0, [r7, #28]
 800b85a:	b928      	cbnz	r0, 800b868 <__pow5mult+0x40>
 800b85c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b860:	4b1c      	ldr	r3, [pc, #112]	@ (800b8d4 <__pow5mult+0xac>)
 800b862:	481d      	ldr	r0, [pc, #116]	@ (800b8d8 <__pow5mult+0xb0>)
 800b864:	f7fe ff66 	bl	800a734 <__assert_func>
 800b868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b86c:	6004      	str	r4, [r0, #0]
 800b86e:	60c4      	str	r4, [r0, #12]
 800b870:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b878:	b94c      	cbnz	r4, 800b88e <__pow5mult+0x66>
 800b87a:	f240 2171 	movw	r1, #625	@ 0x271
 800b87e:	4638      	mov	r0, r7
 800b880:	f7ff ff14 	bl	800b6ac <__i2b>
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	f8c8 0008 	str.w	r0, [r8, #8]
 800b88c:	6003      	str	r3, [r0, #0]
 800b88e:	f04f 0900 	mov.w	r9, #0
 800b892:	07eb      	lsls	r3, r5, #31
 800b894:	d50a      	bpl.n	800b8ac <__pow5mult+0x84>
 800b896:	4631      	mov	r1, r6
 800b898:	4622      	mov	r2, r4
 800b89a:	4638      	mov	r0, r7
 800b89c:	f7ff ff1c 	bl	800b6d8 <__multiply>
 800b8a0:	4680      	mov	r8, r0
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7ff fe4d 	bl	800b544 <_Bfree>
 800b8aa:	4646      	mov	r6, r8
 800b8ac:	106d      	asrs	r5, r5, #1
 800b8ae:	d00b      	beq.n	800b8c8 <__pow5mult+0xa0>
 800b8b0:	6820      	ldr	r0, [r4, #0]
 800b8b2:	b938      	cbnz	r0, 800b8c4 <__pow5mult+0x9c>
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff ff0d 	bl	800b6d8 <__multiply>
 800b8be:	6020      	str	r0, [r4, #0]
 800b8c0:	f8c0 9000 	str.w	r9, [r0]
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	e7e4      	b.n	800b892 <__pow5mult+0x6a>
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ce:	bf00      	nop
 800b8d0:	0800dd34 	.word	0x0800dd34
 800b8d4:	0800dc5b 	.word	0x0800dc5b
 800b8d8:	0800dcdb 	.word	0x0800dcdb

0800b8dc <__lshift>:
 800b8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	4607      	mov	r7, r0
 800b8e4:	4691      	mov	r9, r2
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6849      	ldr	r1, [r1, #4]
 800b8ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8ee:	68a3      	ldr	r3, [r4, #8]
 800b8f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8f4:	f108 0601 	add.w	r6, r8, #1
 800b8f8:	42b3      	cmp	r3, r6
 800b8fa:	db0b      	blt.n	800b914 <__lshift+0x38>
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f7ff fde1 	bl	800b4c4 <_Balloc>
 800b902:	4605      	mov	r5, r0
 800b904:	b948      	cbnz	r0, 800b91a <__lshift+0x3e>
 800b906:	4602      	mov	r2, r0
 800b908:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b90c:	4b27      	ldr	r3, [pc, #156]	@ (800b9ac <__lshift+0xd0>)
 800b90e:	4828      	ldr	r0, [pc, #160]	@ (800b9b0 <__lshift+0xd4>)
 800b910:	f7fe ff10 	bl	800a734 <__assert_func>
 800b914:	3101      	adds	r1, #1
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	e7ee      	b.n	800b8f8 <__lshift+0x1c>
 800b91a:	2300      	movs	r3, #0
 800b91c:	f100 0114 	add.w	r1, r0, #20
 800b920:	f100 0210 	add.w	r2, r0, #16
 800b924:	4618      	mov	r0, r3
 800b926:	4553      	cmp	r3, sl
 800b928:	db33      	blt.n	800b992 <__lshift+0xb6>
 800b92a:	6920      	ldr	r0, [r4, #16]
 800b92c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b930:	f104 0314 	add.w	r3, r4, #20
 800b934:	f019 091f 	ands.w	r9, r9, #31
 800b938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b93c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b940:	d02b      	beq.n	800b99a <__lshift+0xbe>
 800b942:	468a      	mov	sl, r1
 800b944:	2200      	movs	r2, #0
 800b946:	f1c9 0e20 	rsb	lr, r9, #32
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	fa00 f009 	lsl.w	r0, r0, r9
 800b950:	4310      	orrs	r0, r2
 800b952:	f84a 0b04 	str.w	r0, [sl], #4
 800b956:	f853 2b04 	ldr.w	r2, [r3], #4
 800b95a:	459c      	cmp	ip, r3
 800b95c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b960:	d8f3      	bhi.n	800b94a <__lshift+0x6e>
 800b962:	ebac 0304 	sub.w	r3, ip, r4
 800b966:	3b15      	subs	r3, #21
 800b968:	f023 0303 	bic.w	r3, r3, #3
 800b96c:	3304      	adds	r3, #4
 800b96e:	f104 0015 	add.w	r0, r4, #21
 800b972:	4584      	cmp	ip, r0
 800b974:	bf38      	it	cc
 800b976:	2304      	movcc	r3, #4
 800b978:	50ca      	str	r2, [r1, r3]
 800b97a:	b10a      	cbz	r2, 800b980 <__lshift+0xa4>
 800b97c:	f108 0602 	add.w	r6, r8, #2
 800b980:	3e01      	subs	r6, #1
 800b982:	4638      	mov	r0, r7
 800b984:	4621      	mov	r1, r4
 800b986:	612e      	str	r6, [r5, #16]
 800b988:	f7ff fddc 	bl	800b544 <_Bfree>
 800b98c:	4628      	mov	r0, r5
 800b98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b992:	f842 0f04 	str.w	r0, [r2, #4]!
 800b996:	3301      	adds	r3, #1
 800b998:	e7c5      	b.n	800b926 <__lshift+0x4a>
 800b99a:	3904      	subs	r1, #4
 800b99c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a0:	459c      	cmp	ip, r3
 800b9a2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9a6:	d8f9      	bhi.n	800b99c <__lshift+0xc0>
 800b9a8:	e7ea      	b.n	800b980 <__lshift+0xa4>
 800b9aa:	bf00      	nop
 800b9ac:	0800dcca 	.word	0x0800dcca
 800b9b0:	0800dcdb 	.word	0x0800dcdb

0800b9b4 <__mcmp>:
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	690a      	ldr	r2, [r1, #16]
 800b9b8:	6900      	ldr	r0, [r0, #16]
 800b9ba:	b530      	push	{r4, r5, lr}
 800b9bc:	1a80      	subs	r0, r0, r2
 800b9be:	d10e      	bne.n	800b9de <__mcmp+0x2a>
 800b9c0:	3314      	adds	r3, #20
 800b9c2:	3114      	adds	r1, #20
 800b9c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9d4:	4295      	cmp	r5, r2
 800b9d6:	d003      	beq.n	800b9e0 <__mcmp+0x2c>
 800b9d8:	d205      	bcs.n	800b9e6 <__mcmp+0x32>
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295
 800b9de:	bd30      	pop	{r4, r5, pc}
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	d3f3      	bcc.n	800b9cc <__mcmp+0x18>
 800b9e4:	e7fb      	b.n	800b9de <__mcmp+0x2a>
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	e7f9      	b.n	800b9de <__mcmp+0x2a>
	...

0800b9ec <__mdiff>:
 800b9ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f0:	4689      	mov	r9, r1
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	4648      	mov	r0, r9
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	f7ff ffdb 	bl	800b9b4 <__mcmp>
 800b9fe:	1e05      	subs	r5, r0, #0
 800ba00:	d112      	bne.n	800ba28 <__mdiff+0x3c>
 800ba02:	4629      	mov	r1, r5
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff fd5d 	bl	800b4c4 <_Balloc>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	b928      	cbnz	r0, 800ba1a <__mdiff+0x2e>
 800ba0e:	f240 2137 	movw	r1, #567	@ 0x237
 800ba12:	4b3e      	ldr	r3, [pc, #248]	@ (800bb0c <__mdiff+0x120>)
 800ba14:	483e      	ldr	r0, [pc, #248]	@ (800bb10 <__mdiff+0x124>)
 800ba16:	f7fe fe8d 	bl	800a734 <__assert_func>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba20:	4610      	mov	r0, r2
 800ba22:	b003      	add	sp, #12
 800ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba28:	bfbc      	itt	lt
 800ba2a:	464b      	movlt	r3, r9
 800ba2c:	46a1      	movlt	r9, r4
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba34:	bfba      	itte	lt
 800ba36:	461c      	movlt	r4, r3
 800ba38:	2501      	movlt	r5, #1
 800ba3a:	2500      	movge	r5, #0
 800ba3c:	f7ff fd42 	bl	800b4c4 <_Balloc>
 800ba40:	4602      	mov	r2, r0
 800ba42:	b918      	cbnz	r0, 800ba4c <__mdiff+0x60>
 800ba44:	f240 2145 	movw	r1, #581	@ 0x245
 800ba48:	4b30      	ldr	r3, [pc, #192]	@ (800bb0c <__mdiff+0x120>)
 800ba4a:	e7e3      	b.n	800ba14 <__mdiff+0x28>
 800ba4c:	f100 0b14 	add.w	fp, r0, #20
 800ba50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba54:	f109 0310 	add.w	r3, r9, #16
 800ba58:	60c5      	str	r5, [r0, #12]
 800ba5a:	f04f 0c00 	mov.w	ip, #0
 800ba5e:	f109 0514 	add.w	r5, r9, #20
 800ba62:	46d9      	mov	r9, fp
 800ba64:	6926      	ldr	r6, [r4, #16]
 800ba66:	f104 0e14 	add.w	lr, r4, #20
 800ba6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	9b01      	ldr	r3, [sp, #4]
 800ba76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba7e:	b281      	uxth	r1, r0
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	fa1f f38a 	uxth.w	r3, sl
 800ba86:	1a5b      	subs	r3, r3, r1
 800ba88:	0c00      	lsrs	r0, r0, #16
 800ba8a:	4463      	add	r3, ip
 800ba8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba9a:	4576      	cmp	r6, lr
 800ba9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baa0:	f849 3b04 	str.w	r3, [r9], #4
 800baa4:	d8e6      	bhi.n	800ba74 <__mdiff+0x88>
 800baa6:	1b33      	subs	r3, r6, r4
 800baa8:	3b15      	subs	r3, #21
 800baaa:	f023 0303 	bic.w	r3, r3, #3
 800baae:	3415      	adds	r4, #21
 800bab0:	3304      	adds	r3, #4
 800bab2:	42a6      	cmp	r6, r4
 800bab4:	bf38      	it	cc
 800bab6:	2304      	movcc	r3, #4
 800bab8:	441d      	add	r5, r3
 800baba:	445b      	add	r3, fp
 800babc:	461e      	mov	r6, r3
 800babe:	462c      	mov	r4, r5
 800bac0:	4544      	cmp	r4, r8
 800bac2:	d30e      	bcc.n	800bae2 <__mdiff+0xf6>
 800bac4:	f108 0103 	add.w	r1, r8, #3
 800bac8:	1b49      	subs	r1, r1, r5
 800baca:	f021 0103 	bic.w	r1, r1, #3
 800bace:	3d03      	subs	r5, #3
 800bad0:	45a8      	cmp	r8, r5
 800bad2:	bf38      	it	cc
 800bad4:	2100      	movcc	r1, #0
 800bad6:	440b      	add	r3, r1
 800bad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800badc:	b199      	cbz	r1, 800bb06 <__mdiff+0x11a>
 800bade:	6117      	str	r7, [r2, #16]
 800bae0:	e79e      	b.n	800ba20 <__mdiff+0x34>
 800bae2:	46e6      	mov	lr, ip
 800bae4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bae8:	fa1f fc81 	uxth.w	ip, r1
 800baec:	44f4      	add	ip, lr
 800baee:	0c08      	lsrs	r0, r1, #16
 800baf0:	4471      	add	r1, lr
 800baf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800baf6:	b289      	uxth	r1, r1
 800baf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bafc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb00:	f846 1b04 	str.w	r1, [r6], #4
 800bb04:	e7dc      	b.n	800bac0 <__mdiff+0xd4>
 800bb06:	3f01      	subs	r7, #1
 800bb08:	e7e6      	b.n	800bad8 <__mdiff+0xec>
 800bb0a:	bf00      	nop
 800bb0c:	0800dcca 	.word	0x0800dcca
 800bb10:	0800dcdb 	.word	0x0800dcdb

0800bb14 <__d2b>:
 800bb14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bb18:	2101      	movs	r1, #1
 800bb1a:	4690      	mov	r8, r2
 800bb1c:	4699      	mov	r9, r3
 800bb1e:	9e08      	ldr	r6, [sp, #32]
 800bb20:	f7ff fcd0 	bl	800b4c4 <_Balloc>
 800bb24:	4604      	mov	r4, r0
 800bb26:	b930      	cbnz	r0, 800bb36 <__d2b+0x22>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb2e:	4b23      	ldr	r3, [pc, #140]	@ (800bbbc <__d2b+0xa8>)
 800bb30:	4823      	ldr	r0, [pc, #140]	@ (800bbc0 <__d2b+0xac>)
 800bb32:	f7fe fdff 	bl	800a734 <__assert_func>
 800bb36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb3e:	b10d      	cbz	r5, 800bb44 <__d2b+0x30>
 800bb40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	f1b8 0300 	subs.w	r3, r8, #0
 800bb4a:	d024      	beq.n	800bb96 <__d2b+0x82>
 800bb4c:	4668      	mov	r0, sp
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	f7ff fd7f 	bl	800b652 <__lo0bits>
 800bb54:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb58:	b1d8      	cbz	r0, 800bb92 <__d2b+0x7e>
 800bb5a:	f1c0 0320 	rsb	r3, r0, #32
 800bb5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb62:	430b      	orrs	r3, r1
 800bb64:	40c2      	lsrs	r2, r0
 800bb66:	6163      	str	r3, [r4, #20]
 800bb68:	9201      	str	r2, [sp, #4]
 800bb6a:	9b01      	ldr	r3, [sp, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bf0c      	ite	eq
 800bb70:	2201      	moveq	r2, #1
 800bb72:	2202      	movne	r2, #2
 800bb74:	61a3      	str	r3, [r4, #24]
 800bb76:	6122      	str	r2, [r4, #16]
 800bb78:	b1ad      	cbz	r5, 800bba6 <__d2b+0x92>
 800bb7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb7e:	4405      	add	r5, r0
 800bb80:	6035      	str	r5, [r6, #0]
 800bb82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb88:	6018      	str	r0, [r3, #0]
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	b002      	add	sp, #8
 800bb8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bb92:	6161      	str	r1, [r4, #20]
 800bb94:	e7e9      	b.n	800bb6a <__d2b+0x56>
 800bb96:	a801      	add	r0, sp, #4
 800bb98:	f7ff fd5b 	bl	800b652 <__lo0bits>
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	6163      	str	r3, [r4, #20]
 800bba2:	3020      	adds	r0, #32
 800bba4:	e7e7      	b.n	800bb76 <__d2b+0x62>
 800bba6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbae:	6030      	str	r0, [r6, #0]
 800bbb0:	6918      	ldr	r0, [r3, #16]
 800bbb2:	f7ff fd2f 	bl	800b614 <__hi0bits>
 800bbb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbba:	e7e4      	b.n	800bb86 <__d2b+0x72>
 800bbbc:	0800dcca 	.word	0x0800dcca
 800bbc0:	0800dcdb 	.word	0x0800dcdb

0800bbc4 <__ascii_wctomb>:
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	4608      	mov	r0, r1
 800bbc8:	b141      	cbz	r1, 800bbdc <__ascii_wctomb+0x18>
 800bbca:	2aff      	cmp	r2, #255	@ 0xff
 800bbcc:	d904      	bls.n	800bbd8 <__ascii_wctomb+0x14>
 800bbce:	228a      	movs	r2, #138	@ 0x8a
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	4770      	bx	lr
 800bbd8:	2001      	movs	r0, #1
 800bbda:	700a      	strb	r2, [r1, #0]
 800bbdc:	4770      	bx	lr

0800bbde <__sfputc_r>:
 800bbde:	6893      	ldr	r3, [r2, #8]
 800bbe0:	b410      	push	{r4}
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	6093      	str	r3, [r2, #8]
 800bbe8:	da07      	bge.n	800bbfa <__sfputc_r+0x1c>
 800bbea:	6994      	ldr	r4, [r2, #24]
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	db01      	blt.n	800bbf4 <__sfputc_r+0x16>
 800bbf0:	290a      	cmp	r1, #10
 800bbf2:	d102      	bne.n	800bbfa <__sfputc_r+0x1c>
 800bbf4:	bc10      	pop	{r4}
 800bbf6:	f7fe bc5c 	b.w	800a4b2 <__swbuf_r>
 800bbfa:	6813      	ldr	r3, [r2, #0]
 800bbfc:	1c58      	adds	r0, r3, #1
 800bbfe:	6010      	str	r0, [r2, #0]
 800bc00:	7019      	strb	r1, [r3, #0]
 800bc02:	4608      	mov	r0, r1
 800bc04:	bc10      	pop	{r4}
 800bc06:	4770      	bx	lr

0800bc08 <__sfputs_r>:
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	4614      	mov	r4, r2
 800bc10:	18d5      	adds	r5, r2, r3
 800bc12:	42ac      	cmp	r4, r5
 800bc14:	d101      	bne.n	800bc1a <__sfputs_r+0x12>
 800bc16:	2000      	movs	r0, #0
 800bc18:	e007      	b.n	800bc2a <__sfputs_r+0x22>
 800bc1a:	463a      	mov	r2, r7
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc22:	f7ff ffdc 	bl	800bbde <__sfputc_r>
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	d1f3      	bne.n	800bc12 <__sfputs_r+0xa>
 800bc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc2c <_vfiprintf_r>:
 800bc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc30:	460d      	mov	r5, r1
 800bc32:	4614      	mov	r4, r2
 800bc34:	4698      	mov	r8, r3
 800bc36:	4606      	mov	r6, r0
 800bc38:	b09d      	sub	sp, #116	@ 0x74
 800bc3a:	b118      	cbz	r0, 800bc44 <_vfiprintf_r+0x18>
 800bc3c:	6a03      	ldr	r3, [r0, #32]
 800bc3e:	b90b      	cbnz	r3, 800bc44 <_vfiprintf_r+0x18>
 800bc40:	f7fe fb4e 	bl	800a2e0 <__sinit>
 800bc44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc46:	07d9      	lsls	r1, r3, #31
 800bc48:	d405      	bmi.n	800bc56 <_vfiprintf_r+0x2a>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	059a      	lsls	r2, r3, #22
 800bc4e:	d402      	bmi.n	800bc56 <_vfiprintf_r+0x2a>
 800bc50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc52:	f7fe fd50 	bl	800a6f6 <__retarget_lock_acquire_recursive>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	071b      	lsls	r3, r3, #28
 800bc5a:	d501      	bpl.n	800bc60 <_vfiprintf_r+0x34>
 800bc5c:	692b      	ldr	r3, [r5, #16]
 800bc5e:	b99b      	cbnz	r3, 800bc88 <_vfiprintf_r+0x5c>
 800bc60:	4629      	mov	r1, r5
 800bc62:	4630      	mov	r0, r6
 800bc64:	f7fe fc64 	bl	800a530 <__swsetup_r>
 800bc68:	b170      	cbz	r0, 800bc88 <_vfiprintf_r+0x5c>
 800bc6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc6c:	07dc      	lsls	r4, r3, #31
 800bc6e:	d504      	bpl.n	800bc7a <_vfiprintf_r+0x4e>
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	b01d      	add	sp, #116	@ 0x74
 800bc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	0598      	lsls	r0, r3, #22
 800bc7e:	d4f7      	bmi.n	800bc70 <_vfiprintf_r+0x44>
 800bc80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc82:	f7fe fd39 	bl	800a6f8 <__retarget_lock_release_recursive>
 800bc86:	e7f3      	b.n	800bc70 <_vfiprintf_r+0x44>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc8c:	2320      	movs	r3, #32
 800bc8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc92:	2330      	movs	r3, #48	@ 0x30
 800bc94:	f04f 0901 	mov.w	r9, #1
 800bc98:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800be48 <_vfiprintf_r+0x21c>
 800bca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bca4:	4623      	mov	r3, r4
 800bca6:	469a      	mov	sl, r3
 800bca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcac:	b10a      	cbz	r2, 800bcb2 <_vfiprintf_r+0x86>
 800bcae:	2a25      	cmp	r2, #37	@ 0x25
 800bcb0:	d1f9      	bne.n	800bca6 <_vfiprintf_r+0x7a>
 800bcb2:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb6:	d00b      	beq.n	800bcd0 <_vfiprintf_r+0xa4>
 800bcb8:	465b      	mov	r3, fp
 800bcba:	4622      	mov	r2, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7ff ffa2 	bl	800bc08 <__sfputs_r>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f000 80a7 	beq.w	800be18 <_vfiprintf_r+0x1ec>
 800bcca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bccc:	445a      	add	r2, fp
 800bcce:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 809f 	beq.w	800be18 <_vfiprintf_r+0x1ec>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce4:	f10a 0a01 	add.w	sl, sl, #1
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	9307      	str	r3, [sp, #28]
 800bcec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcf2:	4654      	mov	r4, sl
 800bcf4:	2205      	movs	r2, #5
 800bcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfa:	4853      	ldr	r0, [pc, #332]	@ (800be48 <_vfiprintf_r+0x21c>)
 800bcfc:	f7fe fcfd 	bl	800a6fa <memchr>
 800bd00:	9a04      	ldr	r2, [sp, #16]
 800bd02:	b9d8      	cbnz	r0, 800bd3c <_vfiprintf_r+0x110>
 800bd04:	06d1      	lsls	r1, r2, #27
 800bd06:	bf44      	itt	mi
 800bd08:	2320      	movmi	r3, #32
 800bd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd0e:	0713      	lsls	r3, r2, #28
 800bd10:	bf44      	itt	mi
 800bd12:	232b      	movmi	r3, #43	@ 0x2b
 800bd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd18:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd1e:	d015      	beq.n	800bd4c <_vfiprintf_r+0x120>
 800bd20:	4654      	mov	r4, sl
 800bd22:	2000      	movs	r0, #0
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	9a07      	ldr	r2, [sp, #28]
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd30:	3b30      	subs	r3, #48	@ 0x30
 800bd32:	2b09      	cmp	r3, #9
 800bd34:	d94b      	bls.n	800bdce <_vfiprintf_r+0x1a2>
 800bd36:	b1b0      	cbz	r0, 800bd66 <_vfiprintf_r+0x13a>
 800bd38:	9207      	str	r2, [sp, #28]
 800bd3a:	e014      	b.n	800bd66 <_vfiprintf_r+0x13a>
 800bd3c:	eba0 0308 	sub.w	r3, r0, r8
 800bd40:	fa09 f303 	lsl.w	r3, r9, r3
 800bd44:	4313      	orrs	r3, r2
 800bd46:	46a2      	mov	sl, r4
 800bd48:	9304      	str	r3, [sp, #16]
 800bd4a:	e7d2      	b.n	800bcf2 <_vfiprintf_r+0xc6>
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	1d19      	adds	r1, r3, #4
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	9103      	str	r1, [sp, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	bfbb      	ittet	lt
 800bd58:	425b      	neglt	r3, r3
 800bd5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5e:	9307      	strge	r3, [sp, #28]
 800bd60:	9307      	strlt	r3, [sp, #28]
 800bd62:	bfb8      	it	lt
 800bd64:	9204      	strlt	r2, [sp, #16]
 800bd66:	7823      	ldrb	r3, [r4, #0]
 800bd68:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd6a:	d10a      	bne.n	800bd82 <_vfiprintf_r+0x156>
 800bd6c:	7863      	ldrb	r3, [r4, #1]
 800bd6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd70:	d132      	bne.n	800bdd8 <_vfiprintf_r+0x1ac>
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	3402      	adds	r4, #2
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	9203      	str	r2, [sp, #12]
 800bd7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd80:	9305      	str	r3, [sp, #20]
 800bd82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800be4c <_vfiprintf_r+0x220>
 800bd86:	2203      	movs	r2, #3
 800bd88:	4650      	mov	r0, sl
 800bd8a:	7821      	ldrb	r1, [r4, #0]
 800bd8c:	f7fe fcb5 	bl	800a6fa <memchr>
 800bd90:	b138      	cbz	r0, 800bda2 <_vfiprintf_r+0x176>
 800bd92:	2240      	movs	r2, #64	@ 0x40
 800bd94:	9b04      	ldr	r3, [sp, #16]
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	4082      	lsls	r2, r0
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	3401      	adds	r4, #1
 800bda0:	9304      	str	r3, [sp, #16]
 800bda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda6:	2206      	movs	r2, #6
 800bda8:	4829      	ldr	r0, [pc, #164]	@ (800be50 <_vfiprintf_r+0x224>)
 800bdaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdae:	f7fe fca4 	bl	800a6fa <memchr>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d03f      	beq.n	800be36 <_vfiprintf_r+0x20a>
 800bdb6:	4b27      	ldr	r3, [pc, #156]	@ (800be54 <_vfiprintf_r+0x228>)
 800bdb8:	bb1b      	cbnz	r3, 800be02 <_vfiprintf_r+0x1d6>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	3307      	adds	r3, #7
 800bdbe:	f023 0307 	bic.w	r3, r3, #7
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	9303      	str	r3, [sp, #12]
 800bdc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc8:	443b      	add	r3, r7
 800bdca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdcc:	e76a      	b.n	800bca4 <_vfiprintf_r+0x78>
 800bdce:	460c      	mov	r4, r1
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd6:	e7a8      	b.n	800bd2a <_vfiprintf_r+0xfe>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f04f 0c0a 	mov.w	ip, #10
 800bdde:	4619      	mov	r1, r3
 800bde0:	3401      	adds	r4, #1
 800bde2:	9305      	str	r3, [sp, #20]
 800bde4:	4620      	mov	r0, r4
 800bde6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdea:	3a30      	subs	r2, #48	@ 0x30
 800bdec:	2a09      	cmp	r2, #9
 800bdee:	d903      	bls.n	800bdf8 <_vfiprintf_r+0x1cc>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d0c6      	beq.n	800bd82 <_vfiprintf_r+0x156>
 800bdf4:	9105      	str	r1, [sp, #20]
 800bdf6:	e7c4      	b.n	800bd82 <_vfiprintf_r+0x156>
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800be00:	e7f0      	b.n	800bde4 <_vfiprintf_r+0x1b8>
 800be02:	ab03      	add	r3, sp, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	462a      	mov	r2, r5
 800be08:	4630      	mov	r0, r6
 800be0a:	4b13      	ldr	r3, [pc, #76]	@ (800be58 <_vfiprintf_r+0x22c>)
 800be0c:	a904      	add	r1, sp, #16
 800be0e:	f7fd fe1d 	bl	8009a4c <_printf_float>
 800be12:	4607      	mov	r7, r0
 800be14:	1c78      	adds	r0, r7, #1
 800be16:	d1d6      	bne.n	800bdc6 <_vfiprintf_r+0x19a>
 800be18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be1a:	07d9      	lsls	r1, r3, #31
 800be1c:	d405      	bmi.n	800be2a <_vfiprintf_r+0x1fe>
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	059a      	lsls	r2, r3, #22
 800be22:	d402      	bmi.n	800be2a <_vfiprintf_r+0x1fe>
 800be24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be26:	f7fe fc67 	bl	800a6f8 <__retarget_lock_release_recursive>
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	065b      	lsls	r3, r3, #25
 800be2e:	f53f af1f 	bmi.w	800bc70 <_vfiprintf_r+0x44>
 800be32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be34:	e71e      	b.n	800bc74 <_vfiprintf_r+0x48>
 800be36:	ab03      	add	r3, sp, #12
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	462a      	mov	r2, r5
 800be3c:	4630      	mov	r0, r6
 800be3e:	4b06      	ldr	r3, [pc, #24]	@ (800be58 <_vfiprintf_r+0x22c>)
 800be40:	a904      	add	r1, sp, #16
 800be42:	f7fe f8a1 	bl	8009f88 <_printf_i>
 800be46:	e7e4      	b.n	800be12 <_vfiprintf_r+0x1e6>
 800be48:	0800df31 	.word	0x0800df31
 800be4c:	0800df37 	.word	0x0800df37
 800be50:	0800df3b 	.word	0x0800df3b
 800be54:	08009a4d 	.word	0x08009a4d
 800be58:	0800bc09 	.word	0x0800bc09

0800be5c <__sflush_r>:
 800be5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	0716      	lsls	r6, r2, #28
 800be64:	4605      	mov	r5, r0
 800be66:	460c      	mov	r4, r1
 800be68:	d454      	bmi.n	800bf14 <__sflush_r+0xb8>
 800be6a:	684b      	ldr	r3, [r1, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	dc02      	bgt.n	800be76 <__sflush_r+0x1a>
 800be70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be72:	2b00      	cmp	r3, #0
 800be74:	dd48      	ble.n	800bf08 <__sflush_r+0xac>
 800be76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be78:	2e00      	cmp	r6, #0
 800be7a:	d045      	beq.n	800bf08 <__sflush_r+0xac>
 800be7c:	2300      	movs	r3, #0
 800be7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be82:	682f      	ldr	r7, [r5, #0]
 800be84:	6a21      	ldr	r1, [r4, #32]
 800be86:	602b      	str	r3, [r5, #0]
 800be88:	d030      	beq.n	800beec <__sflush_r+0x90>
 800be8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	0759      	lsls	r1, r3, #29
 800be90:	d505      	bpl.n	800be9e <__sflush_r+0x42>
 800be92:	6863      	ldr	r3, [r4, #4]
 800be94:	1ad2      	subs	r2, r2, r3
 800be96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be98:	b10b      	cbz	r3, 800be9e <__sflush_r+0x42>
 800be9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be9c:	1ad2      	subs	r2, r2, r3
 800be9e:	2300      	movs	r3, #0
 800bea0:	4628      	mov	r0, r5
 800bea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bea4:	6a21      	ldr	r1, [r4, #32]
 800bea6:	47b0      	blx	r6
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	d106      	bne.n	800bebc <__sflush_r+0x60>
 800beae:	6829      	ldr	r1, [r5, #0]
 800beb0:	291d      	cmp	r1, #29
 800beb2:	d82b      	bhi.n	800bf0c <__sflush_r+0xb0>
 800beb4:	4a28      	ldr	r2, [pc, #160]	@ (800bf58 <__sflush_r+0xfc>)
 800beb6:	410a      	asrs	r2, r1
 800beb8:	07d6      	lsls	r6, r2, #31
 800beba:	d427      	bmi.n	800bf0c <__sflush_r+0xb0>
 800bebc:	2200      	movs	r2, #0
 800bebe:	6062      	str	r2, [r4, #4]
 800bec0:	6922      	ldr	r2, [r4, #16]
 800bec2:	04d9      	lsls	r1, r3, #19
 800bec4:	6022      	str	r2, [r4, #0]
 800bec6:	d504      	bpl.n	800bed2 <__sflush_r+0x76>
 800bec8:	1c42      	adds	r2, r0, #1
 800beca:	d101      	bne.n	800bed0 <__sflush_r+0x74>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	b903      	cbnz	r3, 800bed2 <__sflush_r+0x76>
 800bed0:	6560      	str	r0, [r4, #84]	@ 0x54
 800bed2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bed4:	602f      	str	r7, [r5, #0]
 800bed6:	b1b9      	cbz	r1, 800bf08 <__sflush_r+0xac>
 800bed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bedc:	4299      	cmp	r1, r3
 800bede:	d002      	beq.n	800bee6 <__sflush_r+0x8a>
 800bee0:	4628      	mov	r0, r5
 800bee2:	f7ff fa95 	bl	800b410 <_free_r>
 800bee6:	2300      	movs	r3, #0
 800bee8:	6363      	str	r3, [r4, #52]	@ 0x34
 800beea:	e00d      	b.n	800bf08 <__sflush_r+0xac>
 800beec:	2301      	movs	r3, #1
 800beee:	4628      	mov	r0, r5
 800bef0:	47b0      	blx	r6
 800bef2:	4602      	mov	r2, r0
 800bef4:	1c50      	adds	r0, r2, #1
 800bef6:	d1c9      	bne.n	800be8c <__sflush_r+0x30>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0c6      	beq.n	800be8c <__sflush_r+0x30>
 800befe:	2b1d      	cmp	r3, #29
 800bf00:	d001      	beq.n	800bf06 <__sflush_r+0xaa>
 800bf02:	2b16      	cmp	r3, #22
 800bf04:	d11d      	bne.n	800bf42 <__sflush_r+0xe6>
 800bf06:	602f      	str	r7, [r5, #0]
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e021      	b.n	800bf50 <__sflush_r+0xf4>
 800bf0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf10:	b21b      	sxth	r3, r3
 800bf12:	e01a      	b.n	800bf4a <__sflush_r+0xee>
 800bf14:	690f      	ldr	r7, [r1, #16]
 800bf16:	2f00      	cmp	r7, #0
 800bf18:	d0f6      	beq.n	800bf08 <__sflush_r+0xac>
 800bf1a:	0793      	lsls	r3, r2, #30
 800bf1c:	bf18      	it	ne
 800bf1e:	2300      	movne	r3, #0
 800bf20:	680e      	ldr	r6, [r1, #0]
 800bf22:	bf08      	it	eq
 800bf24:	694b      	ldreq	r3, [r1, #20]
 800bf26:	1bf6      	subs	r6, r6, r7
 800bf28:	600f      	str	r7, [r1, #0]
 800bf2a:	608b      	str	r3, [r1, #8]
 800bf2c:	2e00      	cmp	r6, #0
 800bf2e:	ddeb      	ble.n	800bf08 <__sflush_r+0xac>
 800bf30:	4633      	mov	r3, r6
 800bf32:	463a      	mov	r2, r7
 800bf34:	4628      	mov	r0, r5
 800bf36:	6a21      	ldr	r1, [r4, #32]
 800bf38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bf3c:	47e0      	blx	ip
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	dc07      	bgt.n	800bf52 <__sflush_r+0xf6>
 800bf42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4e:	81a3      	strh	r3, [r4, #12]
 800bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf52:	4407      	add	r7, r0
 800bf54:	1a36      	subs	r6, r6, r0
 800bf56:	e7e9      	b.n	800bf2c <__sflush_r+0xd0>
 800bf58:	dfbffffe 	.word	0xdfbffffe

0800bf5c <_fflush_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	690b      	ldr	r3, [r1, #16]
 800bf60:	4605      	mov	r5, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	b913      	cbnz	r3, 800bf6c <_fflush_r+0x10>
 800bf66:	2500      	movs	r5, #0
 800bf68:	4628      	mov	r0, r5
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	b118      	cbz	r0, 800bf76 <_fflush_r+0x1a>
 800bf6e:	6a03      	ldr	r3, [r0, #32]
 800bf70:	b90b      	cbnz	r3, 800bf76 <_fflush_r+0x1a>
 800bf72:	f7fe f9b5 	bl	800a2e0 <__sinit>
 800bf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f3      	beq.n	800bf66 <_fflush_r+0xa>
 800bf7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf80:	07d0      	lsls	r0, r2, #31
 800bf82:	d404      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf84:	0599      	lsls	r1, r3, #22
 800bf86:	d402      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf8a:	f7fe fbb4 	bl	800a6f6 <__retarget_lock_acquire_recursive>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	4621      	mov	r1, r4
 800bf92:	f7ff ff63 	bl	800be5c <__sflush_r>
 800bf96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf98:	4605      	mov	r5, r0
 800bf9a:	07da      	lsls	r2, r3, #31
 800bf9c:	d4e4      	bmi.n	800bf68 <_fflush_r+0xc>
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	059b      	lsls	r3, r3, #22
 800bfa2:	d4e1      	bmi.n	800bf68 <_fflush_r+0xc>
 800bfa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfa6:	f7fe fba7 	bl	800a6f8 <__retarget_lock_release_recursive>
 800bfaa:	e7dd      	b.n	800bf68 <_fflush_r+0xc>

0800bfac <fiprintf>:
 800bfac:	b40e      	push	{r1, r2, r3}
 800bfae:	b503      	push	{r0, r1, lr}
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	ab03      	add	r3, sp, #12
 800bfb4:	4805      	ldr	r0, [pc, #20]	@ (800bfcc <fiprintf+0x20>)
 800bfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	f7ff fe35 	bl	800bc2c <_vfiprintf_r>
 800bfc2:	b002      	add	sp, #8
 800bfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfc8:	b003      	add	sp, #12
 800bfca:	4770      	bx	lr
 800bfcc:	2000019c 	.word	0x2000019c

0800bfd0 <__swhatbuf_r>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd8:	4615      	mov	r5, r2
 800bfda:	2900      	cmp	r1, #0
 800bfdc:	461e      	mov	r6, r3
 800bfde:	b096      	sub	sp, #88	@ 0x58
 800bfe0:	da0c      	bge.n	800bffc <__swhatbuf_r+0x2c>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfea:	bf14      	ite	ne
 800bfec:	2340      	movne	r3, #64	@ 0x40
 800bfee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bff2:	2000      	movs	r0, #0
 800bff4:	6031      	str	r1, [r6, #0]
 800bff6:	602b      	str	r3, [r5, #0]
 800bff8:	b016      	add	sp, #88	@ 0x58
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	466a      	mov	r2, sp
 800bffe:	f000 f849 	bl	800c094 <_fstat_r>
 800c002:	2800      	cmp	r0, #0
 800c004:	dbed      	blt.n	800bfe2 <__swhatbuf_r+0x12>
 800c006:	9901      	ldr	r1, [sp, #4]
 800c008:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c00c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c010:	4259      	negs	r1, r3
 800c012:	4159      	adcs	r1, r3
 800c014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c018:	e7eb      	b.n	800bff2 <__swhatbuf_r+0x22>

0800c01a <__smakebuf_r>:
 800c01a:	898b      	ldrh	r3, [r1, #12]
 800c01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c01e:	079d      	lsls	r5, r3, #30
 800c020:	4606      	mov	r6, r0
 800c022:	460c      	mov	r4, r1
 800c024:	d507      	bpl.n	800c036 <__smakebuf_r+0x1c>
 800c026:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c02a:	6023      	str	r3, [r4, #0]
 800c02c:	6123      	str	r3, [r4, #16]
 800c02e:	2301      	movs	r3, #1
 800c030:	6163      	str	r3, [r4, #20]
 800c032:	b003      	add	sp, #12
 800c034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c036:	466a      	mov	r2, sp
 800c038:	ab01      	add	r3, sp, #4
 800c03a:	f7ff ffc9 	bl	800bfd0 <__swhatbuf_r>
 800c03e:	9f00      	ldr	r7, [sp, #0]
 800c040:	4605      	mov	r5, r0
 800c042:	4639      	mov	r1, r7
 800c044:	4630      	mov	r0, r6
 800c046:	f7fd fbd7 	bl	80097f8 <_malloc_r>
 800c04a:	b948      	cbnz	r0, 800c060 <__smakebuf_r+0x46>
 800c04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c050:	059a      	lsls	r2, r3, #22
 800c052:	d4ee      	bmi.n	800c032 <__smakebuf_r+0x18>
 800c054:	f023 0303 	bic.w	r3, r3, #3
 800c058:	f043 0302 	orr.w	r3, r3, #2
 800c05c:	81a3      	strh	r3, [r4, #12]
 800c05e:	e7e2      	b.n	800c026 <__smakebuf_r+0xc>
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c06a:	81a3      	strh	r3, [r4, #12]
 800c06c:	9b01      	ldr	r3, [sp, #4]
 800c06e:	6020      	str	r0, [r4, #0]
 800c070:	b15b      	cbz	r3, 800c08a <__smakebuf_r+0x70>
 800c072:	4630      	mov	r0, r6
 800c074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c078:	f000 f81e 	bl	800c0b8 <_isatty_r>
 800c07c:	b128      	cbz	r0, 800c08a <__smakebuf_r+0x70>
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	f023 0303 	bic.w	r3, r3, #3
 800c084:	f043 0301 	orr.w	r3, r3, #1
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	431d      	orrs	r5, r3
 800c08e:	81a5      	strh	r5, [r4, #12]
 800c090:	e7cf      	b.n	800c032 <__smakebuf_r+0x18>
	...

0800c094 <_fstat_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	2300      	movs	r3, #0
 800c098:	4d06      	ldr	r5, [pc, #24]	@ (800c0b4 <_fstat_r+0x20>)
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	4611      	mov	r1, r2
 800c0a0:	602b      	str	r3, [r5, #0]
 800c0a2:	f7f6 ffc0 	bl	8003026 <_fstat>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	d102      	bne.n	800c0b0 <_fstat_r+0x1c>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	b103      	cbz	r3, 800c0b0 <_fstat_r+0x1c>
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	bd38      	pop	{r3, r4, r5, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20002838 	.word	0x20002838

0800c0b8 <_isatty_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	4d05      	ldr	r5, [pc, #20]	@ (800c0d4 <_isatty_r+0x1c>)
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f6 ffb4 	bl	8003030 <_isatty>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_isatty_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_isatty_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20002838 	.word	0x20002838

0800c0d8 <abort>:
 800c0d8:	2006      	movs	r0, #6
 800c0da:	b508      	push	{r3, lr}
 800c0dc:	f000 f840 	bl	800c160 <raise>
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	f7f6 ff87 	bl	8002ff4 <_exit>

0800c0e6 <_calloc_r>:
 800c0e6:	b570      	push	{r4, r5, r6, lr}
 800c0e8:	fba1 5402 	umull	r5, r4, r1, r2
 800c0ec:	b93c      	cbnz	r4, 800c0fe <_calloc_r+0x18>
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7fd fb82 	bl	80097f8 <_malloc_r>
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	b928      	cbnz	r0, 800c104 <_calloc_r+0x1e>
 800c0f8:	2600      	movs	r6, #0
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	220c      	movs	r2, #12
 800c100:	6002      	str	r2, [r0, #0]
 800c102:	e7f9      	b.n	800c0f8 <_calloc_r+0x12>
 800c104:	462a      	mov	r2, r5
 800c106:	4621      	mov	r1, r4
 800c108:	f7fe fa68 	bl	800a5dc <memset>
 800c10c:	e7f5      	b.n	800c0fa <_calloc_r+0x14>

0800c10e <_raise_r>:
 800c10e:	291f      	cmp	r1, #31
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	4605      	mov	r5, r0
 800c114:	460c      	mov	r4, r1
 800c116:	d904      	bls.n	800c122 <_raise_r+0x14>
 800c118:	2316      	movs	r3, #22
 800c11a:	6003      	str	r3, [r0, #0]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	bd38      	pop	{r3, r4, r5, pc}
 800c122:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c124:	b112      	cbz	r2, 800c12c <_raise_r+0x1e>
 800c126:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c12a:	b94b      	cbnz	r3, 800c140 <_raise_r+0x32>
 800c12c:	4628      	mov	r0, r5
 800c12e:	f000 f831 	bl	800c194 <_getpid_r>
 800c132:	4622      	mov	r2, r4
 800c134:	4601      	mov	r1, r0
 800c136:	4628      	mov	r0, r5
 800c138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c13c:	f000 b818 	b.w	800c170 <_kill_r>
 800c140:	2b01      	cmp	r3, #1
 800c142:	d00a      	beq.n	800c15a <_raise_r+0x4c>
 800c144:	1c59      	adds	r1, r3, #1
 800c146:	d103      	bne.n	800c150 <_raise_r+0x42>
 800c148:	2316      	movs	r3, #22
 800c14a:	6003      	str	r3, [r0, #0]
 800c14c:	2001      	movs	r0, #1
 800c14e:	e7e7      	b.n	800c120 <_raise_r+0x12>
 800c150:	2100      	movs	r1, #0
 800c152:	4620      	mov	r0, r4
 800c154:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c158:	4798      	blx	r3
 800c15a:	2000      	movs	r0, #0
 800c15c:	e7e0      	b.n	800c120 <_raise_r+0x12>
	...

0800c160 <raise>:
 800c160:	4b02      	ldr	r3, [pc, #8]	@ (800c16c <raise+0xc>)
 800c162:	4601      	mov	r1, r0
 800c164:	6818      	ldr	r0, [r3, #0]
 800c166:	f7ff bfd2 	b.w	800c10e <_raise_r>
 800c16a:	bf00      	nop
 800c16c:	2000019c 	.word	0x2000019c

0800c170 <_kill_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	2300      	movs	r3, #0
 800c174:	4d06      	ldr	r5, [pc, #24]	@ (800c190 <_kill_r+0x20>)
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	4611      	mov	r1, r2
 800c17c:	602b      	str	r3, [r5, #0]
 800c17e:	f7f6 ff31 	bl	8002fe4 <_kill>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	d102      	bne.n	800c18c <_kill_r+0x1c>
 800c186:	682b      	ldr	r3, [r5, #0]
 800c188:	b103      	cbz	r3, 800c18c <_kill_r+0x1c>
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	bd38      	pop	{r3, r4, r5, pc}
 800c18e:	bf00      	nop
 800c190:	20002838 	.word	0x20002838

0800c194 <_getpid_r>:
 800c194:	f7f6 bf24 	b.w	8002fe0 <_getpid>

0800c198 <pow>:
 800c198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c19c:	4614      	mov	r4, r2
 800c19e:	461d      	mov	r5, r3
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	4689      	mov	r9, r1
 800c1a4:	f000 f940 	bl	800c428 <__ieee754_pow>
 800c1a8:	4622      	mov	r2, r4
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	462b      	mov	r3, r5
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	f7f4 fc2a 	bl	8000a0c <__aeabi_dcmpun>
 800c1b8:	bbc8      	cbnz	r0, 800c22e <pow+0x96>
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4640      	mov	r0, r8
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	f7f4 fbf1 	bl	80009a8 <__aeabi_dcmpeq>
 800c1c6:	b1b8      	cbz	r0, 800c1f8 <pow+0x60>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 fbea 	bl	80009a8 <__aeabi_dcmpeq>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d141      	bne.n	800c25c <pow+0xc4>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f000 f848 	bl	800c270 <finite>
 800c1e0:	b328      	cbz	r0, 800c22e <pow+0x96>
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7f4 fbe7 	bl	80009bc <__aeabi_dcmplt>
 800c1ee:	b1f0      	cbz	r0, 800c22e <pow+0x96>
 800c1f0:	f7fe fa56 	bl	800a6a0 <__errno>
 800c1f4:	2322      	movs	r3, #34	@ 0x22
 800c1f6:	e019      	b.n	800c22c <pow+0x94>
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f000 f838 	bl	800c270 <finite>
 800c200:	b9c8      	cbnz	r0, 800c236 <pow+0x9e>
 800c202:	4640      	mov	r0, r8
 800c204:	4649      	mov	r1, r9
 800c206:	f000 f833 	bl	800c270 <finite>
 800c20a:	b1a0      	cbz	r0, 800c236 <pow+0x9e>
 800c20c:	4620      	mov	r0, r4
 800c20e:	4629      	mov	r1, r5
 800c210:	f000 f82e 	bl	800c270 <finite>
 800c214:	b178      	cbz	r0, 800c236 <pow+0x9e>
 800c216:	4632      	mov	r2, r6
 800c218:	463b      	mov	r3, r7
 800c21a:	4630      	mov	r0, r6
 800c21c:	4639      	mov	r1, r7
 800c21e:	f7f4 fbf5 	bl	8000a0c <__aeabi_dcmpun>
 800c222:	2800      	cmp	r0, #0
 800c224:	d0e4      	beq.n	800c1f0 <pow+0x58>
 800c226:	f7fe fa3b 	bl	800a6a0 <__errno>
 800c22a:	2321      	movs	r3, #33	@ 0x21
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	4630      	mov	r0, r6
 800c230:	4639      	mov	r1, r7
 800c232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c236:	2200      	movs	r2, #0
 800c238:	2300      	movs	r3, #0
 800c23a:	4630      	mov	r0, r6
 800c23c:	4639      	mov	r1, r7
 800c23e:	f7f4 fbb3 	bl	80009a8 <__aeabi_dcmpeq>
 800c242:	2800      	cmp	r0, #0
 800c244:	d0f3      	beq.n	800c22e <pow+0x96>
 800c246:	4640      	mov	r0, r8
 800c248:	4649      	mov	r1, r9
 800c24a:	f000 f811 	bl	800c270 <finite>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d0ed      	beq.n	800c22e <pow+0x96>
 800c252:	4620      	mov	r0, r4
 800c254:	4629      	mov	r1, r5
 800c256:	f000 f80b 	bl	800c270 <finite>
 800c25a:	e7c8      	b.n	800c1ee <pow+0x56>
 800c25c:	2600      	movs	r6, #0
 800c25e:	4f01      	ldr	r7, [pc, #4]	@ (800c264 <pow+0xcc>)
 800c260:	e7e5      	b.n	800c22e <pow+0x96>
 800c262:	bf00      	nop
 800c264:	3ff00000 	.word	0x3ff00000

0800c268 <fabs>:
 800c268:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c26c:	4619      	mov	r1, r3
 800c26e:	4770      	bx	lr

0800c270 <finite>:
 800c270:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800c274:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c278:	0fc0      	lsrs	r0, r0, #31
 800c27a:	4770      	bx	lr

0800c27c <__ieee754_sqrt>:
 800c27c:	4a67      	ldr	r2, [pc, #412]	@ (800c41c <__ieee754_sqrt+0x1a0>)
 800c27e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c282:	438a      	bics	r2, r1
 800c284:	4606      	mov	r6, r0
 800c286:	460f      	mov	r7, r1
 800c288:	460b      	mov	r3, r1
 800c28a:	4604      	mov	r4, r0
 800c28c:	d10e      	bne.n	800c2ac <__ieee754_sqrt+0x30>
 800c28e:	4602      	mov	r2, r0
 800c290:	f7f4 f922 	bl	80004d8 <__aeabi_dmul>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f3 ff66 	bl	800016c <__adddf3>
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	460f      	mov	r7, r1
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	dc0c      	bgt.n	800c2ca <__ieee754_sqrt+0x4e>
 800c2b0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c2b4:	4302      	orrs	r2, r0
 800c2b6:	d0f5      	beq.n	800c2a4 <__ieee754_sqrt+0x28>
 800c2b8:	b189      	cbz	r1, 800c2de <__ieee754_sqrt+0x62>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	f7f3 ff54 	bl	8000168 <__aeabi_dsub>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	f7f4 fa32 	bl	800072c <__aeabi_ddiv>
 800c2c8:	e7ea      	b.n	800c2a0 <__ieee754_sqrt+0x24>
 800c2ca:	150a      	asrs	r2, r1, #20
 800c2cc:	d115      	bne.n	800c2fa <__ieee754_sqrt+0x7e>
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	e009      	b.n	800c2e6 <__ieee754_sqrt+0x6a>
 800c2d2:	0ae3      	lsrs	r3, r4, #11
 800c2d4:	3a15      	subs	r2, #21
 800c2d6:	0564      	lsls	r4, r4, #21
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0fa      	beq.n	800c2d2 <__ieee754_sqrt+0x56>
 800c2dc:	e7f7      	b.n	800c2ce <__ieee754_sqrt+0x52>
 800c2de:	460a      	mov	r2, r1
 800c2e0:	e7fa      	b.n	800c2d8 <__ieee754_sqrt+0x5c>
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	3101      	adds	r1, #1
 800c2e6:	02d8      	lsls	r0, r3, #11
 800c2e8:	d5fb      	bpl.n	800c2e2 <__ieee754_sqrt+0x66>
 800c2ea:	1e48      	subs	r0, r1, #1
 800c2ec:	1a12      	subs	r2, r2, r0
 800c2ee:	f1c1 0020 	rsb	r0, r1, #32
 800c2f2:	fa24 f000 	lsr.w	r0, r4, r0
 800c2f6:	4303      	orrs	r3, r0
 800c2f8:	408c      	lsls	r4, r1
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c300:	2116      	movs	r1, #22
 800c302:	07d2      	lsls	r2, r2, #31
 800c304:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c308:	4632      	mov	r2, r6
 800c30a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c30e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c312:	bf5c      	itt	pl
 800c314:	005b      	lslpl	r3, r3, #1
 800c316:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c31a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c31e:	bf58      	it	pl
 800c320:	0064      	lslpl	r4, r4, #1
 800c322:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c326:	107f      	asrs	r7, r7, #1
 800c328:	0064      	lsls	r4, r4, #1
 800c32a:	1815      	adds	r5, r2, r0
 800c32c:	429d      	cmp	r5, r3
 800c32e:	bfde      	ittt	le
 800c330:	182a      	addle	r2, r5, r0
 800c332:	1b5b      	suble	r3, r3, r5
 800c334:	1836      	addle	r6, r6, r0
 800c336:	0fe5      	lsrs	r5, r4, #31
 800c338:	3901      	subs	r1, #1
 800c33a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c33e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c342:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c346:	d1f0      	bne.n	800c32a <__ieee754_sqrt+0xae>
 800c348:	460d      	mov	r5, r1
 800c34a:	f04f 0a20 	mov.w	sl, #32
 800c34e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c352:	429a      	cmp	r2, r3
 800c354:	eb01 0c00 	add.w	ip, r1, r0
 800c358:	db02      	blt.n	800c360 <__ieee754_sqrt+0xe4>
 800c35a:	d113      	bne.n	800c384 <__ieee754_sqrt+0x108>
 800c35c:	45a4      	cmp	ip, r4
 800c35e:	d811      	bhi.n	800c384 <__ieee754_sqrt+0x108>
 800c360:	f1bc 0f00 	cmp.w	ip, #0
 800c364:	eb0c 0100 	add.w	r1, ip, r0
 800c368:	da42      	bge.n	800c3f0 <__ieee754_sqrt+0x174>
 800c36a:	2900      	cmp	r1, #0
 800c36c:	db40      	blt.n	800c3f0 <__ieee754_sqrt+0x174>
 800c36e:	f102 0e01 	add.w	lr, r2, #1
 800c372:	1a9b      	subs	r3, r3, r2
 800c374:	4672      	mov	r2, lr
 800c376:	45a4      	cmp	ip, r4
 800c378:	bf88      	it	hi
 800c37a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c37e:	eba4 040c 	sub.w	r4, r4, ip
 800c382:	4405      	add	r5, r0
 800c384:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c388:	f1ba 0a01 	subs.w	sl, sl, #1
 800c38c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c390:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c394:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c398:	d1db      	bne.n	800c352 <__ieee754_sqrt+0xd6>
 800c39a:	431c      	orrs	r4, r3
 800c39c:	d01a      	beq.n	800c3d4 <__ieee754_sqrt+0x158>
 800c39e:	4c20      	ldr	r4, [pc, #128]	@ (800c420 <__ieee754_sqrt+0x1a4>)
 800c3a0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c424 <__ieee754_sqrt+0x1a8>
 800c3a4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c3a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3ac:	f7f3 fedc 	bl	8000168 <__aeabi_dsub>
 800c3b0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	f7f4 fb08 	bl	80009d0 <__aeabi_dcmple>
 800c3c0:	b140      	cbz	r0, 800c3d4 <__ieee754_sqrt+0x158>
 800c3c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c3c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c3ce:	d111      	bne.n	800c3f4 <__ieee754_sqrt+0x178>
 800c3d0:	4655      	mov	r5, sl
 800c3d2:	3601      	adds	r6, #1
 800c3d4:	1072      	asrs	r2, r6, #1
 800c3d6:	086b      	lsrs	r3, r5, #1
 800c3d8:	07f1      	lsls	r1, r6, #31
 800c3da:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c3de:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c3e2:	bf48      	it	mi
 800c3e4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c3ee:	e757      	b.n	800c2a0 <__ieee754_sqrt+0x24>
 800c3f0:	4696      	mov	lr, r2
 800c3f2:	e7be      	b.n	800c372 <__ieee754_sqrt+0xf6>
 800c3f4:	f7f3 feba 	bl	800016c <__adddf3>
 800c3f8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	4640      	mov	r0, r8
 800c402:	4649      	mov	r1, r9
 800c404:	f7f4 fada 	bl	80009bc <__aeabi_dcmplt>
 800c408:	b120      	cbz	r0, 800c414 <__ieee754_sqrt+0x198>
 800c40a:	1ca8      	adds	r0, r5, #2
 800c40c:	bf08      	it	eq
 800c40e:	3601      	addeq	r6, #1
 800c410:	3502      	adds	r5, #2
 800c412:	e7df      	b.n	800c3d4 <__ieee754_sqrt+0x158>
 800c414:	1c6b      	adds	r3, r5, #1
 800c416:	f023 0501 	bic.w	r5, r3, #1
 800c41a:	e7db      	b.n	800c3d4 <__ieee754_sqrt+0x158>
 800c41c:	7ff00000 	.word	0x7ff00000
 800c420:	200001f8 	.word	0x200001f8
 800c424:	200001f0 	.word	0x200001f0

0800c428 <__ieee754_pow>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	b091      	sub	sp, #68	@ 0x44
 800c42e:	e9cd 2300 	strd	r2, r3, [sp]
 800c432:	468b      	mov	fp, r1
 800c434:	e9dd 1800 	ldrd	r1, r8, [sp]
 800c438:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800c43c:	4682      	mov	sl, r0
 800c43e:	ea57 0001 	orrs.w	r0, r7, r1
 800c442:	d112      	bne.n	800c46a <__ieee754_pow+0x42>
 800c444:	4653      	mov	r3, sl
 800c446:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800c44a:	18db      	adds	r3, r3, r3
 800c44c:	4152      	adcs	r2, r2
 800c44e:	4298      	cmp	r0, r3
 800c450:	4b91      	ldr	r3, [pc, #580]	@ (800c698 <__ieee754_pow+0x270>)
 800c452:	4193      	sbcs	r3, r2
 800c454:	f080 84ce 	bcs.w	800cdf4 <__ieee754_pow+0x9cc>
 800c458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c45c:	4650      	mov	r0, sl
 800c45e:	4659      	mov	r1, fp
 800c460:	f7f3 fe84 	bl	800016c <__adddf3>
 800c464:	b011      	add	sp, #68	@ 0x44
 800c466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46a:	4b8c      	ldr	r3, [pc, #560]	@ (800c69c <__ieee754_pow+0x274>)
 800c46c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800c470:	429e      	cmp	r6, r3
 800c472:	465d      	mov	r5, fp
 800c474:	46d1      	mov	r9, sl
 800c476:	d807      	bhi.n	800c488 <__ieee754_pow+0x60>
 800c478:	d102      	bne.n	800c480 <__ieee754_pow+0x58>
 800c47a:	f1ba 0f00 	cmp.w	sl, #0
 800c47e:	d1eb      	bne.n	800c458 <__ieee754_pow+0x30>
 800c480:	429f      	cmp	r7, r3
 800c482:	d801      	bhi.n	800c488 <__ieee754_pow+0x60>
 800c484:	d10f      	bne.n	800c4a6 <__ieee754_pow+0x7e>
 800c486:	b171      	cbz	r1, 800c4a6 <__ieee754_pow+0x7e>
 800c488:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c48c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c490:	ea55 0509 	orrs.w	r5, r5, r9
 800c494:	d1e0      	bne.n	800c458 <__ieee754_pow+0x30>
 800c496:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c49a:	18db      	adds	r3, r3, r3
 800c49c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c4a0:	4152      	adcs	r2, r2
 800c4a2:	429d      	cmp	r5, r3
 800c4a4:	e7d4      	b.n	800c450 <__ieee754_pow+0x28>
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	4633      	mov	r3, r6
 800c4aa:	da39      	bge.n	800c520 <__ieee754_pow+0xf8>
 800c4ac:	4a7c      	ldr	r2, [pc, #496]	@ (800c6a0 <__ieee754_pow+0x278>)
 800c4ae:	4297      	cmp	r7, r2
 800c4b0:	d84e      	bhi.n	800c550 <__ieee754_pow+0x128>
 800c4b2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c4b6:	4297      	cmp	r7, r2
 800c4b8:	f240 84ab 	bls.w	800ce12 <__ieee754_pow+0x9ea>
 800c4bc:	153a      	asrs	r2, r7, #20
 800c4be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c4c2:	2a14      	cmp	r2, #20
 800c4c4:	dd0f      	ble.n	800c4e6 <__ieee754_pow+0xbe>
 800c4c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c4ca:	fa21 f402 	lsr.w	r4, r1, r2
 800c4ce:	fa04 f202 	lsl.w	r2, r4, r2
 800c4d2:	428a      	cmp	r2, r1
 800c4d4:	f040 849d 	bne.w	800ce12 <__ieee754_pow+0x9ea>
 800c4d8:	f004 0401 	and.w	r4, r4, #1
 800c4dc:	f1c4 0402 	rsb	r4, r4, #2
 800c4e0:	2900      	cmp	r1, #0
 800c4e2:	d15a      	bne.n	800c59a <__ieee754_pow+0x172>
 800c4e4:	e00e      	b.n	800c504 <__ieee754_pow+0xdc>
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d156      	bne.n	800c598 <__ieee754_pow+0x170>
 800c4ea:	f1c2 0214 	rsb	r2, r2, #20
 800c4ee:	fa47 f402 	asr.w	r4, r7, r2
 800c4f2:	fa04 f202 	lsl.w	r2, r4, r2
 800c4f6:	42ba      	cmp	r2, r7
 800c4f8:	f040 8488 	bne.w	800ce0c <__ieee754_pow+0x9e4>
 800c4fc:	f004 0401 	and.w	r4, r4, #1
 800c500:	f1c4 0402 	rsb	r4, r4, #2
 800c504:	4a67      	ldr	r2, [pc, #412]	@ (800c6a4 <__ieee754_pow+0x27c>)
 800c506:	4297      	cmp	r7, r2
 800c508:	d130      	bne.n	800c56c <__ieee754_pow+0x144>
 800c50a:	f1b8 0f00 	cmp.w	r8, #0
 800c50e:	f280 8479 	bge.w	800ce04 <__ieee754_pow+0x9dc>
 800c512:	4652      	mov	r2, sl
 800c514:	465b      	mov	r3, fp
 800c516:	2000      	movs	r0, #0
 800c518:	4962      	ldr	r1, [pc, #392]	@ (800c6a4 <__ieee754_pow+0x27c>)
 800c51a:	f7f4 f907 	bl	800072c <__aeabi_ddiv>
 800c51e:	e7a1      	b.n	800c464 <__ieee754_pow+0x3c>
 800c520:	2400      	movs	r4, #0
 800c522:	2900      	cmp	r1, #0
 800c524:	d139      	bne.n	800c59a <__ieee754_pow+0x172>
 800c526:	4a5d      	ldr	r2, [pc, #372]	@ (800c69c <__ieee754_pow+0x274>)
 800c528:	4297      	cmp	r7, r2
 800c52a:	d1eb      	bne.n	800c504 <__ieee754_pow+0xdc>
 800c52c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800c530:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800c534:	ea53 0309 	orrs.w	r3, r3, r9
 800c538:	f000 845c 	beq.w	800cdf4 <__ieee754_pow+0x9cc>
 800c53c:	4b5a      	ldr	r3, [pc, #360]	@ (800c6a8 <__ieee754_pow+0x280>)
 800c53e:	429e      	cmp	r6, r3
 800c540:	d908      	bls.n	800c554 <__ieee754_pow+0x12c>
 800c542:	f1b8 0f00 	cmp.w	r8, #0
 800c546:	f2c0 8459 	blt.w	800cdfc <__ieee754_pow+0x9d4>
 800c54a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c54e:	e789      	b.n	800c464 <__ieee754_pow+0x3c>
 800c550:	2402      	movs	r4, #2
 800c552:	e7e6      	b.n	800c522 <__ieee754_pow+0xfa>
 800c554:	f1b8 0f00 	cmp.w	r8, #0
 800c558:	f04f 0000 	mov.w	r0, #0
 800c55c:	f04f 0100 	mov.w	r1, #0
 800c560:	da80      	bge.n	800c464 <__ieee754_pow+0x3c>
 800c562:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c566:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c56a:	e77b      	b.n	800c464 <__ieee754_pow+0x3c>
 800c56c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800c570:	d106      	bne.n	800c580 <__ieee754_pow+0x158>
 800c572:	4652      	mov	r2, sl
 800c574:	465b      	mov	r3, fp
 800c576:	4650      	mov	r0, sl
 800c578:	4659      	mov	r1, fp
 800c57a:	f7f3 ffad 	bl	80004d8 <__aeabi_dmul>
 800c57e:	e771      	b.n	800c464 <__ieee754_pow+0x3c>
 800c580:	4a4a      	ldr	r2, [pc, #296]	@ (800c6ac <__ieee754_pow+0x284>)
 800c582:	4590      	cmp	r8, r2
 800c584:	d109      	bne.n	800c59a <__ieee754_pow+0x172>
 800c586:	2d00      	cmp	r5, #0
 800c588:	db07      	blt.n	800c59a <__ieee754_pow+0x172>
 800c58a:	4650      	mov	r0, sl
 800c58c:	4659      	mov	r1, fp
 800c58e:	b011      	add	sp, #68	@ 0x44
 800c590:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	f7ff be72 	b.w	800c27c <__ieee754_sqrt>
 800c598:	2400      	movs	r4, #0
 800c59a:	4650      	mov	r0, sl
 800c59c:	4659      	mov	r1, fp
 800c59e:	9302      	str	r3, [sp, #8]
 800c5a0:	f7ff fe62 	bl	800c268 <fabs>
 800c5a4:	9b02      	ldr	r3, [sp, #8]
 800c5a6:	f1b9 0f00 	cmp.w	r9, #0
 800c5aa:	d127      	bne.n	800c5fc <__ieee754_pow+0x1d4>
 800c5ac:	4a3d      	ldr	r2, [pc, #244]	@ (800c6a4 <__ieee754_pow+0x27c>)
 800c5ae:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800c5b2:	4594      	cmp	ip, r2
 800c5b4:	d000      	beq.n	800c5b8 <__ieee754_pow+0x190>
 800c5b6:	bb0e      	cbnz	r6, 800c5fc <__ieee754_pow+0x1d4>
 800c5b8:	f1b8 0f00 	cmp.w	r8, #0
 800c5bc:	da05      	bge.n	800c5ca <__ieee754_pow+0x1a2>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	4937      	ldr	r1, [pc, #220]	@ (800c6a4 <__ieee754_pow+0x27c>)
 800c5c6:	f7f4 f8b1 	bl	800072c <__aeabi_ddiv>
 800c5ca:	2d00      	cmp	r5, #0
 800c5cc:	f6bf af4a 	bge.w	800c464 <__ieee754_pow+0x3c>
 800c5d0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800c5d4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800c5d8:	4326      	orrs	r6, r4
 800c5da:	d108      	bne.n	800c5ee <__ieee754_pow+0x1c6>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	f7f3 fdc0 	bl	8000168 <__aeabi_dsub>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	e795      	b.n	800c51a <__ieee754_pow+0xf2>
 800c5ee:	2c01      	cmp	r4, #1
 800c5f0:	f47f af38 	bne.w	800c464 <__ieee754_pow+0x3c>
 800c5f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	e733      	b.n	800c464 <__ieee754_pow+0x3c>
 800c5fc:	0fea      	lsrs	r2, r5, #31
 800c5fe:	3a01      	subs	r2, #1
 800c600:	ea52 0c04 	orrs.w	ip, r2, r4
 800c604:	d102      	bne.n	800c60c <__ieee754_pow+0x1e4>
 800c606:	4652      	mov	r2, sl
 800c608:	465b      	mov	r3, fp
 800c60a:	e7e9      	b.n	800c5e0 <__ieee754_pow+0x1b8>
 800c60c:	f04f 0900 	mov.w	r9, #0
 800c610:	3c01      	subs	r4, #1
 800c612:	4314      	orrs	r4, r2
 800c614:	bf14      	ite	ne
 800c616:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800c6a4 <__ieee754_pow+0x27c>
 800c61a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800c6b0 <__ieee754_pow+0x288>
 800c61e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800c622:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800c626:	f240 8107 	bls.w	800c838 <__ieee754_pow+0x410>
 800c62a:	4b22      	ldr	r3, [pc, #136]	@ (800c6b4 <__ieee754_pow+0x28c>)
 800c62c:	429f      	cmp	r7, r3
 800c62e:	4b1e      	ldr	r3, [pc, #120]	@ (800c6a8 <__ieee754_pow+0x280>)
 800c630:	d913      	bls.n	800c65a <__ieee754_pow+0x232>
 800c632:	429e      	cmp	r6, r3
 800c634:	d808      	bhi.n	800c648 <__ieee754_pow+0x220>
 800c636:	f1b8 0f00 	cmp.w	r8, #0
 800c63a:	da08      	bge.n	800c64e <__ieee754_pow+0x226>
 800c63c:	2000      	movs	r0, #0
 800c63e:	b011      	add	sp, #68	@ 0x44
 800c640:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	f000 bcb0 	b.w	800cfa8 <__math_oflow>
 800c648:	f1b8 0f00 	cmp.w	r8, #0
 800c64c:	dcf6      	bgt.n	800c63c <__ieee754_pow+0x214>
 800c64e:	2000      	movs	r0, #0
 800c650:	b011      	add	sp, #68	@ 0x44
 800c652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c656:	f000 bca2 	b.w	800cf9e <__math_uflow>
 800c65a:	429e      	cmp	r6, r3
 800c65c:	d20c      	bcs.n	800c678 <__ieee754_pow+0x250>
 800c65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c662:	2200      	movs	r2, #0
 800c664:	2300      	movs	r3, #0
 800c666:	f7f4 f9a9 	bl	80009bc <__aeabi_dcmplt>
 800c66a:	3800      	subs	r0, #0
 800c66c:	bf18      	it	ne
 800c66e:	2001      	movne	r0, #1
 800c670:	f1b8 0f00 	cmp.w	r8, #0
 800c674:	daec      	bge.n	800c650 <__ieee754_pow+0x228>
 800c676:	e7e2      	b.n	800c63e <__ieee754_pow+0x216>
 800c678:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a4 <__ieee754_pow+0x27c>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	429e      	cmp	r6, r3
 800c67e:	d91b      	bls.n	800c6b8 <__ieee754_pow+0x290>
 800c680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c684:	2300      	movs	r3, #0
 800c686:	f7f4 f999 	bl	80009bc <__aeabi_dcmplt>
 800c68a:	3800      	subs	r0, #0
 800c68c:	bf18      	it	ne
 800c68e:	2001      	movne	r0, #1
 800c690:	f1b8 0f00 	cmp.w	r8, #0
 800c694:	dcd3      	bgt.n	800c63e <__ieee754_pow+0x216>
 800c696:	e7db      	b.n	800c650 <__ieee754_pow+0x228>
 800c698:	fff00000 	.word	0xfff00000
 800c69c:	7ff00000 	.word	0x7ff00000
 800c6a0:	433fffff 	.word	0x433fffff
 800c6a4:	3ff00000 	.word	0x3ff00000
 800c6a8:	3fefffff 	.word	0x3fefffff
 800c6ac:	3fe00000 	.word	0x3fe00000
 800c6b0:	bff00000 	.word	0xbff00000
 800c6b4:	43f00000 	.word	0x43f00000
 800c6b8:	4b5b      	ldr	r3, [pc, #364]	@ (800c828 <__ieee754_pow+0x400>)
 800c6ba:	f7f3 fd55 	bl	8000168 <__aeabi_dsub>
 800c6be:	a352      	add	r3, pc, #328	@ (adr r3, 800c808 <__ieee754_pow+0x3e0>)
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	460d      	mov	r5, r1
 800c6c8:	f7f3 ff06 	bl	80004d8 <__aeabi_dmul>
 800c6cc:	a350      	add	r3, pc, #320	@ (adr r3, 800c810 <__ieee754_pow+0x3e8>)
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	460f      	mov	r7, r1
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7f3 fefd 	bl	80004d8 <__aeabi_dmul>
 800c6de:	2200      	movs	r2, #0
 800c6e0:	4682      	mov	sl, r0
 800c6e2:	468b      	mov	fp, r1
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4b50      	ldr	r3, [pc, #320]	@ (800c82c <__ieee754_pow+0x404>)
 800c6ea:	f7f3 fef5 	bl	80004d8 <__aeabi_dmul>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	a149      	add	r1, pc, #292	@ (adr r1, 800c818 <__ieee754_pow+0x3f0>)
 800c6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6f8:	f7f3 fd36 	bl	8000168 <__aeabi_dsub>
 800c6fc:	4622      	mov	r2, r4
 800c6fe:	462b      	mov	r3, r5
 800c700:	f7f3 feea 	bl	80004d8 <__aeabi_dmul>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	2000      	movs	r0, #0
 800c70a:	4949      	ldr	r1, [pc, #292]	@ (800c830 <__ieee754_pow+0x408>)
 800c70c:	f7f3 fd2c 	bl	8000168 <__aeabi_dsub>
 800c710:	4622      	mov	r2, r4
 800c712:	4680      	mov	r8, r0
 800c714:	4689      	mov	r9, r1
 800c716:	462b      	mov	r3, r5
 800c718:	4620      	mov	r0, r4
 800c71a:	4629      	mov	r1, r5
 800c71c:	f7f3 fedc 	bl	80004d8 <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4640      	mov	r0, r8
 800c726:	4649      	mov	r1, r9
 800c728:	f7f3 fed6 	bl	80004d8 <__aeabi_dmul>
 800c72c:	a33c      	add	r3, pc, #240	@ (adr r3, 800c820 <__ieee754_pow+0x3f8>)
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f7f3 fed1 	bl	80004d8 <__aeabi_dmul>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4650      	mov	r0, sl
 800c73c:	4659      	mov	r1, fp
 800c73e:	f7f3 fd13 	bl	8000168 <__aeabi_dsub>
 800c742:	2400      	movs	r4, #0
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	4680      	mov	r8, r0
 800c74a:	4689      	mov	r9, r1
 800c74c:	4630      	mov	r0, r6
 800c74e:	4639      	mov	r1, r7
 800c750:	f7f3 fd0c 	bl	800016c <__adddf3>
 800c754:	4632      	mov	r2, r6
 800c756:	463b      	mov	r3, r7
 800c758:	4620      	mov	r0, r4
 800c75a:	460d      	mov	r5, r1
 800c75c:	f7f3 fd04 	bl	8000168 <__aeabi_dsub>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4640      	mov	r0, r8
 800c766:	4649      	mov	r1, r9
 800c768:	f7f3 fcfe 	bl	8000168 <__aeabi_dsub>
 800c76c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c770:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c774:	2300      	movs	r3, #0
 800c776:	9304      	str	r3, [sp, #16]
 800c778:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c77c:	4606      	mov	r6, r0
 800c77e:	460f      	mov	r7, r1
 800c780:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c784:	4652      	mov	r2, sl
 800c786:	465b      	mov	r3, fp
 800c788:	f7f3 fcee 	bl	8000168 <__aeabi_dsub>
 800c78c:	4622      	mov	r2, r4
 800c78e:	462b      	mov	r3, r5
 800c790:	f7f3 fea2 	bl	80004d8 <__aeabi_dmul>
 800c794:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c798:	4680      	mov	r8, r0
 800c79a:	4689      	mov	r9, r1
 800c79c:	4630      	mov	r0, r6
 800c79e:	4639      	mov	r1, r7
 800c7a0:	f7f3 fe9a 	bl	80004d8 <__aeabi_dmul>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	f7f3 fcde 	bl	800016c <__adddf3>
 800c7b0:	4652      	mov	r2, sl
 800c7b2:	465b      	mov	r3, fp
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	460f      	mov	r7, r1
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	f7f3 fe8c 	bl	80004d8 <__aeabi_dmul>
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	4680      	mov	r8, r0
 800c7c6:	4689      	mov	r9, r1
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f7f3 fcce 	bl	800016c <__adddf3>
 800c7d0:	4b18      	ldr	r3, [pc, #96]	@ (800c834 <__ieee754_pow+0x40c>)
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	4299      	cmp	r1, r3
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	468a      	mov	sl, r1
 800c7da:	468b      	mov	fp, r1
 800c7dc:	f340 82e0 	ble.w	800cda0 <__ieee754_pow+0x978>
 800c7e0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c7e4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c7e8:	4303      	orrs	r3, r0
 800c7ea:	f000 81df 	beq.w	800cbac <__ieee754_pow+0x784>
 800c7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f7f4 f8e1 	bl	80009bc <__aeabi_dcmplt>
 800c7fa:	3800      	subs	r0, #0
 800c7fc:	bf18      	it	ne
 800c7fe:	2001      	movne	r0, #1
 800c800:	e71d      	b.n	800c63e <__ieee754_pow+0x216>
 800c802:	bf00      	nop
 800c804:	f3af 8000 	nop.w
 800c808:	60000000 	.word	0x60000000
 800c80c:	3ff71547 	.word	0x3ff71547
 800c810:	f85ddf44 	.word	0xf85ddf44
 800c814:	3e54ae0b 	.word	0x3e54ae0b
 800c818:	55555555 	.word	0x55555555
 800c81c:	3fd55555 	.word	0x3fd55555
 800c820:	652b82fe 	.word	0x652b82fe
 800c824:	3ff71547 	.word	0x3ff71547
 800c828:	3ff00000 	.word	0x3ff00000
 800c82c:	3fd00000 	.word	0x3fd00000
 800c830:	3fe00000 	.word	0x3fe00000
 800c834:	408fffff 	.word	0x408fffff
 800c838:	4ad3      	ldr	r2, [pc, #844]	@ (800cb88 <__ieee754_pow+0x760>)
 800c83a:	402a      	ands	r2, r5
 800c83c:	2a00      	cmp	r2, #0
 800c83e:	f040 817a 	bne.w	800cb36 <__ieee754_pow+0x70e>
 800c842:	4bd2      	ldr	r3, [pc, #840]	@ (800cb8c <__ieee754_pow+0x764>)
 800c844:	2200      	movs	r2, #0
 800c846:	f7f3 fe47 	bl	80004d8 <__aeabi_dmul>
 800c84a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800c84e:	460b      	mov	r3, r1
 800c850:	151a      	asrs	r2, r3, #20
 800c852:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c856:	4422      	add	r2, r4
 800c858:	920a      	str	r2, [sp, #40]	@ 0x28
 800c85a:	4acd      	ldr	r2, [pc, #820]	@ (800cb90 <__ieee754_pow+0x768>)
 800c85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c860:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800c864:	4293      	cmp	r3, r2
 800c866:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c86a:	dd08      	ble.n	800c87e <__ieee754_pow+0x456>
 800c86c:	4ac9      	ldr	r2, [pc, #804]	@ (800cb94 <__ieee754_pow+0x76c>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	f340 8163 	ble.w	800cb3a <__ieee754_pow+0x712>
 800c874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c876:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c87a:	3301      	adds	r3, #1
 800c87c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c87e:	2600      	movs	r6, #0
 800c880:	00f3      	lsls	r3, r6, #3
 800c882:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c884:	4bc4      	ldr	r3, [pc, #784]	@ (800cb98 <__ieee754_pow+0x770>)
 800c886:	4629      	mov	r1, r5
 800c888:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c88c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c890:	461a      	mov	r2, r3
 800c892:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c896:	4623      	mov	r3, r4
 800c898:	4682      	mov	sl, r0
 800c89a:	f7f3 fc65 	bl	8000168 <__aeabi_dsub>
 800c89e:	4652      	mov	r2, sl
 800c8a0:	462b      	mov	r3, r5
 800c8a2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c8a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8aa:	f7f3 fc5f 	bl	800016c <__adddf3>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	49b9      	ldr	r1, [pc, #740]	@ (800cb9c <__ieee754_pow+0x774>)
 800c8b6:	f7f3 ff39 	bl	800072c <__aeabi_ddiv>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c8c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8c6:	f7f3 fe07 	bl	80004d8 <__aeabi_dmul>
 800c8ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c8ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c8d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	2200      	movs	r2, #0
 800c8da:	46ab      	mov	fp, r5
 800c8dc:	106d      	asrs	r5, r5, #1
 800c8de:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c8e2:	9304      	str	r3, [sp, #16]
 800c8e4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c8e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c8ec:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c8f0:	4640      	mov	r0, r8
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	4614      	mov	r4, r2
 800c8f6:	461d      	mov	r5, r3
 800c8f8:	f7f3 fdee 	bl	80004d8 <__aeabi_dmul>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c904:	f7f3 fc30 	bl	8000168 <__aeabi_dsub>
 800c908:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	4620      	mov	r0, r4
 800c912:	4629      	mov	r1, r5
 800c914:	f7f3 fc28 	bl	8000168 <__aeabi_dsub>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4650      	mov	r0, sl
 800c91e:	4659      	mov	r1, fp
 800c920:	f7f3 fc22 	bl	8000168 <__aeabi_dsub>
 800c924:	4642      	mov	r2, r8
 800c926:	464b      	mov	r3, r9
 800c928:	f7f3 fdd6 	bl	80004d8 <__aeabi_dmul>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4630      	mov	r0, r6
 800c932:	4639      	mov	r1, r7
 800c934:	f7f3 fc18 	bl	8000168 <__aeabi_dsub>
 800c938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c93c:	f7f3 fdcc 	bl	80004d8 <__aeabi_dmul>
 800c940:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c944:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c948:	4610      	mov	r0, r2
 800c94a:	4619      	mov	r1, r3
 800c94c:	f7f3 fdc4 	bl	80004d8 <__aeabi_dmul>
 800c950:	a37b      	add	r3, pc, #492	@ (adr r3, 800cb40 <__ieee754_pow+0x718>)
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	4604      	mov	r4, r0
 800c958:	460d      	mov	r5, r1
 800c95a:	f7f3 fdbd 	bl	80004d8 <__aeabi_dmul>
 800c95e:	a37a      	add	r3, pc, #488	@ (adr r3, 800cb48 <__ieee754_pow+0x720>)
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	f7f3 fc02 	bl	800016c <__adddf3>
 800c968:	4622      	mov	r2, r4
 800c96a:	462b      	mov	r3, r5
 800c96c:	f7f3 fdb4 	bl	80004d8 <__aeabi_dmul>
 800c970:	a377      	add	r3, pc, #476	@ (adr r3, 800cb50 <__ieee754_pow+0x728>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	f7f3 fbf9 	bl	800016c <__adddf3>
 800c97a:	4622      	mov	r2, r4
 800c97c:	462b      	mov	r3, r5
 800c97e:	f7f3 fdab 	bl	80004d8 <__aeabi_dmul>
 800c982:	a375      	add	r3, pc, #468	@ (adr r3, 800cb58 <__ieee754_pow+0x730>)
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	f7f3 fbf0 	bl	800016c <__adddf3>
 800c98c:	4622      	mov	r2, r4
 800c98e:	462b      	mov	r3, r5
 800c990:	f7f3 fda2 	bl	80004d8 <__aeabi_dmul>
 800c994:	a372      	add	r3, pc, #456	@ (adr r3, 800cb60 <__ieee754_pow+0x738>)
 800c996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99a:	f7f3 fbe7 	bl	800016c <__adddf3>
 800c99e:	4622      	mov	r2, r4
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	f7f3 fd99 	bl	80004d8 <__aeabi_dmul>
 800c9a6:	a370      	add	r3, pc, #448	@ (adr r3, 800cb68 <__ieee754_pow+0x740>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	f7f3 fbde 	bl	800016c <__adddf3>
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	f7f3 fd8c 	bl	80004d8 <__aeabi_dmul>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	f7f3 fd86 	bl	80004d8 <__aeabi_dmul>
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	460d      	mov	r5, r1
 800c9d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9d4:	4642      	mov	r2, r8
 800c9d6:	464b      	mov	r3, r9
 800c9d8:	f7f3 fbc8 	bl	800016c <__adddf3>
 800c9dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c9e0:	f7f3 fd7a 	bl	80004d8 <__aeabi_dmul>
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	462b      	mov	r3, r5
 800c9e8:	f7f3 fbc0 	bl	800016c <__adddf3>
 800c9ec:	4642      	mov	r2, r8
 800c9ee:	4682      	mov	sl, r0
 800c9f0:	468b      	mov	fp, r1
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	f7f3 fd6e 	bl	80004d8 <__aeabi_dmul>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	4b68      	ldr	r3, [pc, #416]	@ (800cba0 <__ieee754_pow+0x778>)
 800ca00:	4606      	mov	r6, r0
 800ca02:	460f      	mov	r7, r1
 800ca04:	f7f3 fbb2 	bl	800016c <__adddf3>
 800ca08:	4652      	mov	r2, sl
 800ca0a:	465b      	mov	r3, fp
 800ca0c:	f7f3 fbae 	bl	800016c <__adddf3>
 800ca10:	2400      	movs	r4, #0
 800ca12:	460d      	mov	r5, r1
 800ca14:	4622      	mov	r2, r4
 800ca16:	460b      	mov	r3, r1
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	f7f3 fd5c 	bl	80004d8 <__aeabi_dmul>
 800ca20:	2200      	movs	r2, #0
 800ca22:	4680      	mov	r8, r0
 800ca24:	4689      	mov	r9, r1
 800ca26:	4620      	mov	r0, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4b5d      	ldr	r3, [pc, #372]	@ (800cba0 <__ieee754_pow+0x778>)
 800ca2c:	f7f3 fb9c 	bl	8000168 <__aeabi_dsub>
 800ca30:	4632      	mov	r2, r6
 800ca32:	463b      	mov	r3, r7
 800ca34:	f7f3 fb98 	bl	8000168 <__aeabi_dsub>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	4650      	mov	r0, sl
 800ca3e:	4659      	mov	r1, fp
 800ca40:	f7f3 fb92 	bl	8000168 <__aeabi_dsub>
 800ca44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca48:	f7f3 fd46 	bl	80004d8 <__aeabi_dmul>
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	4606      	mov	r6, r0
 800ca50:	460f      	mov	r7, r1
 800ca52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca56:	462b      	mov	r3, r5
 800ca58:	f7f3 fd3e 	bl	80004d8 <__aeabi_dmul>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	4630      	mov	r0, r6
 800ca62:	4639      	mov	r1, r7
 800ca64:	f7f3 fb82 	bl	800016c <__adddf3>
 800ca68:	2400      	movs	r4, #0
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f7f3 fb79 	bl	800016c <__adddf3>
 800ca7a:	a33d      	add	r3, pc, #244	@ (adr r3, 800cb70 <__ieee754_pow+0x748>)
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	4620      	mov	r0, r4
 800ca82:	460d      	mov	r5, r1
 800ca84:	f7f3 fd28 	bl	80004d8 <__aeabi_dmul>
 800ca88:	4642      	mov	r2, r8
 800ca8a:	464b      	mov	r3, r9
 800ca8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca90:	4620      	mov	r0, r4
 800ca92:	4629      	mov	r1, r5
 800ca94:	f7f3 fb68 	bl	8000168 <__aeabi_dsub>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	4639      	mov	r1, r7
 800caa0:	f7f3 fb62 	bl	8000168 <__aeabi_dsub>
 800caa4:	a334      	add	r3, pc, #208	@ (adr r3, 800cb78 <__ieee754_pow+0x750>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fd15 	bl	80004d8 <__aeabi_dmul>
 800caae:	a334      	add	r3, pc, #208	@ (adr r3, 800cb80 <__ieee754_pow+0x758>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	4620      	mov	r0, r4
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f3 fd0c 	bl	80004d8 <__aeabi_dmul>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4630      	mov	r0, r6
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f3 fb50 	bl	800016c <__adddf3>
 800cacc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cace:	4b35      	ldr	r3, [pc, #212]	@ (800cba4 <__ieee754_pow+0x77c>)
 800cad0:	2400      	movs	r4, #0
 800cad2:	4413      	add	r3, r2
 800cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad8:	f7f3 fb48 	bl	800016c <__adddf3>
 800cadc:	4682      	mov	sl, r0
 800cade:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cae0:	468b      	mov	fp, r1
 800cae2:	f7f3 fc8f 	bl	8000404 <__aeabi_i2d>
 800cae6:	4606      	mov	r6, r0
 800cae8:	460f      	mov	r7, r1
 800caea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800caec:	4b2e      	ldr	r3, [pc, #184]	@ (800cba8 <__ieee754_pow+0x780>)
 800caee:	4413      	add	r3, r2
 800caf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800caf4:	4652      	mov	r2, sl
 800caf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cafa:	465b      	mov	r3, fp
 800cafc:	f7f3 fb36 	bl	800016c <__adddf3>
 800cb00:	4642      	mov	r2, r8
 800cb02:	464b      	mov	r3, r9
 800cb04:	f7f3 fb32 	bl	800016c <__adddf3>
 800cb08:	4632      	mov	r2, r6
 800cb0a:	463b      	mov	r3, r7
 800cb0c:	f7f3 fb2e 	bl	800016c <__adddf3>
 800cb10:	4632      	mov	r2, r6
 800cb12:	463b      	mov	r3, r7
 800cb14:	4620      	mov	r0, r4
 800cb16:	460d      	mov	r5, r1
 800cb18:	f7f3 fb26 	bl	8000168 <__aeabi_dsub>
 800cb1c:	4642      	mov	r2, r8
 800cb1e:	464b      	mov	r3, r9
 800cb20:	f7f3 fb22 	bl	8000168 <__aeabi_dsub>
 800cb24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb28:	f7f3 fb1e 	bl	8000168 <__aeabi_dsub>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4650      	mov	r0, sl
 800cb32:	4659      	mov	r1, fp
 800cb34:	e618      	b.n	800c768 <__ieee754_pow+0x340>
 800cb36:	2400      	movs	r4, #0
 800cb38:	e68a      	b.n	800c850 <__ieee754_pow+0x428>
 800cb3a:	2601      	movs	r6, #1
 800cb3c:	e6a0      	b.n	800c880 <__ieee754_pow+0x458>
 800cb3e:	bf00      	nop
 800cb40:	4a454eef 	.word	0x4a454eef
 800cb44:	3fca7e28 	.word	0x3fca7e28
 800cb48:	93c9db65 	.word	0x93c9db65
 800cb4c:	3fcd864a 	.word	0x3fcd864a
 800cb50:	a91d4101 	.word	0xa91d4101
 800cb54:	3fd17460 	.word	0x3fd17460
 800cb58:	518f264d 	.word	0x518f264d
 800cb5c:	3fd55555 	.word	0x3fd55555
 800cb60:	db6fabff 	.word	0xdb6fabff
 800cb64:	3fdb6db6 	.word	0x3fdb6db6
 800cb68:	33333303 	.word	0x33333303
 800cb6c:	3fe33333 	.word	0x3fe33333
 800cb70:	e0000000 	.word	0xe0000000
 800cb74:	3feec709 	.word	0x3feec709
 800cb78:	dc3a03fd 	.word	0xdc3a03fd
 800cb7c:	3feec709 	.word	0x3feec709
 800cb80:	145b01f5 	.word	0x145b01f5
 800cb84:	be3e2fe0 	.word	0xbe3e2fe0
 800cb88:	7ff00000 	.word	0x7ff00000
 800cb8c:	43400000 	.word	0x43400000
 800cb90:	0003988e 	.word	0x0003988e
 800cb94:	000bb679 	.word	0x000bb679
 800cb98:	0800df68 	.word	0x0800df68
 800cb9c:	3ff00000 	.word	0x3ff00000
 800cba0:	40080000 	.word	0x40080000
 800cba4:	0800df48 	.word	0x0800df48
 800cba8:	0800df58 	.word	0x0800df58
 800cbac:	a39a      	add	r3, pc, #616	@ (adr r3, 800ce18 <__ieee754_pow+0x9f0>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	f7f3 fad9 	bl	800016c <__adddf3>
 800cbba:	4642      	mov	r2, r8
 800cbbc:	e9cd 0100 	strd	r0, r1, [sp]
 800cbc0:	464b      	mov	r3, r9
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	f7f3 facf 	bl	8000168 <__aeabi_dsub>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbd2:	f7f3 ff11 	bl	80009f8 <__aeabi_dcmpgt>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	f47f ae09 	bne.w	800c7ee <__ieee754_pow+0x3c6>
 800cbdc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cbe0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800cbe4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800cbe8:	fa43 fa0a 	asr.w	sl, r3, sl
 800cbec:	44da      	add	sl, fp
 800cbee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cbf2:	489b      	ldr	r0, [pc, #620]	@ (800ce60 <__ieee754_pow+0xa38>)
 800cbf4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cbf8:	4108      	asrs	r0, r1
 800cbfa:	ea00 030a 	and.w	r3, r0, sl
 800cbfe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cc02:	f1c1 0114 	rsb	r1, r1, #20
 800cc06:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	fa4a fa01 	asr.w	sl, sl, r1
 800cc10:	f1bb 0f00 	cmp.w	fp, #0
 800cc14:	4649      	mov	r1, r9
 800cc16:	f04f 0200 	mov.w	r2, #0
 800cc1a:	bfb8      	it	lt
 800cc1c:	f1ca 0a00 	rsblt	sl, sl, #0
 800cc20:	f7f3 faa2 	bl	8000168 <__aeabi_dsub>
 800cc24:	4680      	mov	r8, r0
 800cc26:	4689      	mov	r9, r1
 800cc28:	2400      	movs	r4, #0
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	463b      	mov	r3, r7
 800cc2e:	4640      	mov	r0, r8
 800cc30:	4649      	mov	r1, r9
 800cc32:	f7f3 fa9b 	bl	800016c <__adddf3>
 800cc36:	a37a      	add	r3, pc, #488	@ (adr r3, 800ce20 <__ieee754_pow+0x9f8>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	460d      	mov	r5, r1
 800cc40:	f7f3 fc4a 	bl	80004d8 <__aeabi_dmul>
 800cc44:	4642      	mov	r2, r8
 800cc46:	464b      	mov	r3, r9
 800cc48:	e9cd 0100 	strd	r0, r1, [sp]
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7f3 fa8a 	bl	8000168 <__aeabi_dsub>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	f7f3 fa84 	bl	8000168 <__aeabi_dsub>
 800cc60:	a371      	add	r3, pc, #452	@ (adr r3, 800ce28 <__ieee754_pow+0xa00>)
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	f7f3 fc37 	bl	80004d8 <__aeabi_dmul>
 800cc6a:	a371      	add	r3, pc, #452	@ (adr r3, 800ce30 <__ieee754_pow+0xa08>)
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	4680      	mov	r8, r0
 800cc72:	4689      	mov	r9, r1
 800cc74:	4620      	mov	r0, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	f7f3 fc2e 	bl	80004d8 <__aeabi_dmul>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	4640      	mov	r0, r8
 800cc82:	4649      	mov	r1, r9
 800cc84:	f7f3 fa72 	bl	800016c <__adddf3>
 800cc88:	4604      	mov	r4, r0
 800cc8a:	460d      	mov	r5, r1
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc94:	f7f3 fa6a 	bl	800016c <__adddf3>
 800cc98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	4689      	mov	r9, r1
 800cca0:	f7f3 fa62 	bl	8000168 <__aeabi_dsub>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4620      	mov	r0, r4
 800ccaa:	4629      	mov	r1, r5
 800ccac:	f7f3 fa5c 	bl	8000168 <__aeabi_dsub>
 800ccb0:	4642      	mov	r2, r8
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	464b      	mov	r3, r9
 800ccb8:	4640      	mov	r0, r8
 800ccba:	4649      	mov	r1, r9
 800ccbc:	f7f3 fc0c 	bl	80004d8 <__aeabi_dmul>
 800ccc0:	a35d      	add	r3, pc, #372	@ (adr r3, 800ce38 <__ieee754_pow+0xa10>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	460d      	mov	r5, r1
 800ccca:	f7f3 fc05 	bl	80004d8 <__aeabi_dmul>
 800ccce:	a35c      	add	r3, pc, #368	@ (adr r3, 800ce40 <__ieee754_pow+0xa18>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	f7f3 fa48 	bl	8000168 <__aeabi_dsub>
 800ccd8:	4622      	mov	r2, r4
 800ccda:	462b      	mov	r3, r5
 800ccdc:	f7f3 fbfc 	bl	80004d8 <__aeabi_dmul>
 800cce0:	a359      	add	r3, pc, #356	@ (adr r3, 800ce48 <__ieee754_pow+0xa20>)
 800cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce6:	f7f3 fa41 	bl	800016c <__adddf3>
 800ccea:	4622      	mov	r2, r4
 800ccec:	462b      	mov	r3, r5
 800ccee:	f7f3 fbf3 	bl	80004d8 <__aeabi_dmul>
 800ccf2:	a357      	add	r3, pc, #348	@ (adr r3, 800ce50 <__ieee754_pow+0xa28>)
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	f7f3 fa36 	bl	8000168 <__aeabi_dsub>
 800ccfc:	4622      	mov	r2, r4
 800ccfe:	462b      	mov	r3, r5
 800cd00:	f7f3 fbea 	bl	80004d8 <__aeabi_dmul>
 800cd04:	a354      	add	r3, pc, #336	@ (adr r3, 800ce58 <__ieee754_pow+0xa30>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	f7f3 fa2f 	bl	800016c <__adddf3>
 800cd0e:	4622      	mov	r2, r4
 800cd10:	462b      	mov	r3, r5
 800cd12:	f7f3 fbe1 	bl	80004d8 <__aeabi_dmul>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	4649      	mov	r1, r9
 800cd1e:	f7f3 fa23 	bl	8000168 <__aeabi_dsub>
 800cd22:	4604      	mov	r4, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4640      	mov	r0, r8
 800cd2c:	4649      	mov	r1, r9
 800cd2e:	f7f3 fbd3 	bl	80004d8 <__aeabi_dmul>
 800cd32:	2200      	movs	r2, #0
 800cd34:	e9cd 0100 	strd	r0, r1, [sp]
 800cd38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	4629      	mov	r1, r5
 800cd40:	f7f3 fa12 	bl	8000168 <__aeabi_dsub>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd4c:	f7f3 fcee 	bl	800072c <__aeabi_ddiv>
 800cd50:	4632      	mov	r2, r6
 800cd52:	4604      	mov	r4, r0
 800cd54:	460d      	mov	r5, r1
 800cd56:	463b      	mov	r3, r7
 800cd58:	4640      	mov	r0, r8
 800cd5a:	4649      	mov	r1, r9
 800cd5c:	f7f3 fbbc 	bl	80004d8 <__aeabi_dmul>
 800cd60:	4632      	mov	r2, r6
 800cd62:	463b      	mov	r3, r7
 800cd64:	f7f3 fa02 	bl	800016c <__adddf3>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	4629      	mov	r1, r5
 800cd70:	f7f3 f9fa 	bl	8000168 <__aeabi_dsub>
 800cd74:	4642      	mov	r2, r8
 800cd76:	464b      	mov	r3, r9
 800cd78:	f7f3 f9f6 	bl	8000168 <__aeabi_dsub>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	2000      	movs	r0, #0
 800cd82:	4938      	ldr	r1, [pc, #224]	@ (800ce64 <__ieee754_pow+0xa3c>)
 800cd84:	f7f3 f9f0 	bl	8000168 <__aeabi_dsub>
 800cd88:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cd8c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800cd90:	da2e      	bge.n	800cdf0 <__ieee754_pow+0x9c8>
 800cd92:	4652      	mov	r2, sl
 800cd94:	f000 f870 	bl	800ce78 <scalbn>
 800cd98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd9c:	f7ff bbed 	b.w	800c57a <__ieee754_pow+0x152>
 800cda0:	4c31      	ldr	r4, [pc, #196]	@ (800ce68 <__ieee754_pow+0xa40>)
 800cda2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cda6:	42a3      	cmp	r3, r4
 800cda8:	d91a      	bls.n	800cde0 <__ieee754_pow+0x9b8>
 800cdaa:	4b30      	ldr	r3, [pc, #192]	@ (800ce6c <__ieee754_pow+0xa44>)
 800cdac:	440b      	add	r3, r1
 800cdae:	4303      	orrs	r3, r0
 800cdb0:	d009      	beq.n	800cdc6 <__ieee754_pow+0x99e>
 800cdb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f7f3 fdff 	bl	80009bc <__aeabi_dcmplt>
 800cdbe:	3800      	subs	r0, #0
 800cdc0:	bf18      	it	ne
 800cdc2:	2001      	movne	r0, #1
 800cdc4:	e444      	b.n	800c650 <__ieee754_pow+0x228>
 800cdc6:	4642      	mov	r2, r8
 800cdc8:	464b      	mov	r3, r9
 800cdca:	f7f3 f9cd 	bl	8000168 <__aeabi_dsub>
 800cdce:	4632      	mov	r2, r6
 800cdd0:	463b      	mov	r3, r7
 800cdd2:	f7f3 fe07 	bl	80009e4 <__aeabi_dcmpge>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d1eb      	bne.n	800cdb2 <__ieee754_pow+0x98a>
 800cdda:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800ce70 <__ieee754_pow+0xa48>
 800cdde:	e6fd      	b.n	800cbdc <__ieee754_pow+0x7b4>
 800cde0:	469a      	mov	sl, r3
 800cde2:	4b24      	ldr	r3, [pc, #144]	@ (800ce74 <__ieee754_pow+0xa4c>)
 800cde4:	459a      	cmp	sl, r3
 800cde6:	f63f aef9 	bhi.w	800cbdc <__ieee754_pow+0x7b4>
 800cdea:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cdee:	e71b      	b.n	800cc28 <__ieee754_pow+0x800>
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	e7d1      	b.n	800cd98 <__ieee754_pow+0x970>
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	491b      	ldr	r1, [pc, #108]	@ (800ce64 <__ieee754_pow+0xa3c>)
 800cdf8:	f7ff bb34 	b.w	800c464 <__ieee754_pow+0x3c>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	2100      	movs	r1, #0
 800ce00:	f7ff bb30 	b.w	800c464 <__ieee754_pow+0x3c>
 800ce04:	4650      	mov	r0, sl
 800ce06:	4659      	mov	r1, fp
 800ce08:	f7ff bb2c 	b.w	800c464 <__ieee754_pow+0x3c>
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	f7ff bb79 	b.w	800c504 <__ieee754_pow+0xdc>
 800ce12:	2400      	movs	r4, #0
 800ce14:	f7ff bb64 	b.w	800c4e0 <__ieee754_pow+0xb8>
 800ce18:	652b82fe 	.word	0x652b82fe
 800ce1c:	3c971547 	.word	0x3c971547
 800ce20:	00000000 	.word	0x00000000
 800ce24:	3fe62e43 	.word	0x3fe62e43
 800ce28:	fefa39ef 	.word	0xfefa39ef
 800ce2c:	3fe62e42 	.word	0x3fe62e42
 800ce30:	0ca86c39 	.word	0x0ca86c39
 800ce34:	be205c61 	.word	0xbe205c61
 800ce38:	72bea4d0 	.word	0x72bea4d0
 800ce3c:	3e663769 	.word	0x3e663769
 800ce40:	c5d26bf1 	.word	0xc5d26bf1
 800ce44:	3ebbbd41 	.word	0x3ebbbd41
 800ce48:	af25de2c 	.word	0xaf25de2c
 800ce4c:	3f11566a 	.word	0x3f11566a
 800ce50:	16bebd93 	.word	0x16bebd93
 800ce54:	3f66c16c 	.word	0x3f66c16c
 800ce58:	5555553e 	.word	0x5555553e
 800ce5c:	3fc55555 	.word	0x3fc55555
 800ce60:	fff00000 	.word	0xfff00000
 800ce64:	3ff00000 	.word	0x3ff00000
 800ce68:	4090cbff 	.word	0x4090cbff
 800ce6c:	3f6f3400 	.word	0x3f6f3400
 800ce70:	4090cc00 	.word	0x4090cc00
 800ce74:	3fe00000 	.word	0x3fe00000

0800ce78 <scalbn>:
 800ce78:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800ce7c:	4616      	mov	r6, r2
 800ce7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce82:	4683      	mov	fp, r0
 800ce84:	468c      	mov	ip, r1
 800ce86:	460b      	mov	r3, r1
 800ce88:	b982      	cbnz	r2, 800ceac <scalbn+0x34>
 800ce8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ce8e:	4303      	orrs	r3, r0
 800ce90:	d039      	beq.n	800cf06 <scalbn+0x8e>
 800ce92:	4b2f      	ldr	r3, [pc, #188]	@ (800cf50 <scalbn+0xd8>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	f7f3 fb1f 	bl	80004d8 <__aeabi_dmul>
 800ce9a:	4b2e      	ldr	r3, [pc, #184]	@ (800cf54 <scalbn+0xdc>)
 800ce9c:	4683      	mov	fp, r0
 800ce9e:	429e      	cmp	r6, r3
 800cea0:	468c      	mov	ip, r1
 800cea2:	da0d      	bge.n	800cec0 <scalbn+0x48>
 800cea4:	a326      	add	r3, pc, #152	@ (adr r3, 800cf40 <scalbn+0xc8>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	e01b      	b.n	800cee4 <scalbn+0x6c>
 800ceac:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800ceb0:	42ba      	cmp	r2, r7
 800ceb2:	d109      	bne.n	800cec8 <scalbn+0x50>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	f7f3 f959 	bl	800016c <__adddf3>
 800ceba:	4683      	mov	fp, r0
 800cebc:	468c      	mov	ip, r1
 800cebe:	e022      	b.n	800cf06 <scalbn+0x8e>
 800cec0:	460b      	mov	r3, r1
 800cec2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cec6:	3a36      	subs	r2, #54	@ 0x36
 800cec8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cecc:	428e      	cmp	r6, r1
 800cece:	dd0c      	ble.n	800ceea <scalbn+0x72>
 800ced0:	a31d      	add	r3, pc, #116	@ (adr r3, 800cf48 <scalbn+0xd0>)
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	461c      	mov	r4, r3
 800ced8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800cedc:	f361 74df 	bfi	r4, r1, #31, #1
 800cee0:	4621      	mov	r1, r4
 800cee2:	481d      	ldr	r0, [pc, #116]	@ (800cf58 <scalbn+0xe0>)
 800cee4:	f7f3 faf8 	bl	80004d8 <__aeabi_dmul>
 800cee8:	e7e7      	b.n	800ceba <scalbn+0x42>
 800ceea:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ceee:	4432      	add	r2, r6
 800cef0:	428a      	cmp	r2, r1
 800cef2:	dced      	bgt.n	800ced0 <scalbn+0x58>
 800cef4:	2a00      	cmp	r2, #0
 800cef6:	dd0a      	ble.n	800cf0e <scalbn+0x96>
 800cef8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cefc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf04:	46ac      	mov	ip, r5
 800cf06:	4658      	mov	r0, fp
 800cf08:	4661      	mov	r1, ip
 800cf0a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800cf0e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cf12:	da09      	bge.n	800cf28 <scalbn+0xb0>
 800cf14:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800cf18:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800cf1c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800cf20:	480e      	ldr	r0, [pc, #56]	@ (800cf5c <scalbn+0xe4>)
 800cf22:	f041 011f 	orr.w	r1, r1, #31
 800cf26:	e7bd      	b.n	800cea4 <scalbn+0x2c>
 800cf28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cf2c:	3236      	adds	r2, #54	@ 0x36
 800cf2e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf36:	4658      	mov	r0, fp
 800cf38:	4629      	mov	r1, r5
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	4b08      	ldr	r3, [pc, #32]	@ (800cf60 <scalbn+0xe8>)
 800cf3e:	e7d1      	b.n	800cee4 <scalbn+0x6c>
 800cf40:	c2f8f359 	.word	0xc2f8f359
 800cf44:	01a56e1f 	.word	0x01a56e1f
 800cf48:	8800759c 	.word	0x8800759c
 800cf4c:	7e37e43c 	.word	0x7e37e43c
 800cf50:	43500000 	.word	0x43500000
 800cf54:	ffff3cb0 	.word	0xffff3cb0
 800cf58:	8800759c 	.word	0x8800759c
 800cf5c:	c2f8f359 	.word	0xc2f8f359
 800cf60:	3c900000 	.word	0x3c900000

0800cf64 <with_errno>:
 800cf64:	b570      	push	{r4, r5, r6, lr}
 800cf66:	4604      	mov	r4, r0
 800cf68:	460d      	mov	r5, r1
 800cf6a:	4616      	mov	r6, r2
 800cf6c:	f7fd fb98 	bl	800a6a0 <__errno>
 800cf70:	4629      	mov	r1, r5
 800cf72:	6006      	str	r6, [r0, #0]
 800cf74:	4620      	mov	r0, r4
 800cf76:	bd70      	pop	{r4, r5, r6, pc}

0800cf78 <xflow>:
 800cf78:	b513      	push	{r0, r1, r4, lr}
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4610      	mov	r0, r2
 800cf80:	b10c      	cbz	r4, 800cf86 <xflow+0xe>
 800cf82:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cf86:	e9cd 2300 	strd	r2, r3, [sp]
 800cf8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf8e:	f7f3 faa3 	bl	80004d8 <__aeabi_dmul>
 800cf92:	2222      	movs	r2, #34	@ 0x22
 800cf94:	b002      	add	sp, #8
 800cf96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf9a:	f7ff bfe3 	b.w	800cf64 <with_errno>

0800cf9e <__math_uflow>:
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cfa4:	f7ff bfe8 	b.w	800cf78 <xflow>

0800cfa8 <__math_oflow>:
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800cfae:	f7ff bfe3 	b.w	800cf78 <xflow>
	...

0800cfb4 <_init>:
 800cfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb6:	bf00      	nop
 800cfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfba:	bc08      	pop	{r3}
 800cfbc:	469e      	mov	lr, r3
 800cfbe:	4770      	bx	lr

0800cfc0 <_fini>:
 800cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc2:	bf00      	nop
 800cfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc6:	bc08      	pop	{r3}
 800cfc8:	469e      	mov	lr, r3
 800cfca:	4770      	bx	lr
