
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009168  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009dc  08009278  08009278  0000a278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c54  08009c54  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c54  08009c54  0000ac54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c5c  08009c5c  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c5c  08009c5c  0000ac5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c60  08009c60  0000ac60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009c64  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001430  200001e8  08009e4c  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001618  08009e4c  0000b618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8a0  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffa  00000000  00000000  00015ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000fd3  00000000  00000000  00017aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00018a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004a2  00000000  00000000  0001908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba46  00000000  00000000  00019530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df3a  00000000  00000000  00034f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095f6c  00000000  00000000  00042eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d8e1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000261c  00000000  00000000  000d8e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009260 	.word	0x08009260

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009260 	.word	0x08009260

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b99b 	b.w	800137c <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f835 	bl	80010c4 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f828 	bl	80010c4 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f817 	bl	80010c4 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f809 	bl	80010c4 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9d08      	ldr	r5, [sp, #32]
 80010ca:	460c      	mov	r4, r1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d14e      	bne.n	800116e <__udivmoddi4+0xaa>
 80010d0:	4694      	mov	ip, r2
 80010d2:	458c      	cmp	ip, r1
 80010d4:	4686      	mov	lr, r0
 80010d6:	fab2 f282 	clz	r2, r2
 80010da:	d962      	bls.n	80011a2 <__udivmoddi4+0xde>
 80010dc:	b14a      	cbz	r2, 80010f2 <__udivmoddi4+0x2e>
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	4091      	lsls	r1, r2
 80010e4:	fa20 f303 	lsr.w	r3, r0, r3
 80010e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010ec:	4319      	orrs	r1, r3
 80010ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80010fa:	fb07 1114 	mls	r1, r7, r4, r1
 80010fe:	fa1f f68c 	uxth.w	r6, ip
 8001102:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001106:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800110a:	fb04 f106 	mul.w	r1, r4, r6
 800110e:	4299      	cmp	r1, r3
 8001110:	d90a      	bls.n	8001128 <__udivmoddi4+0x64>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f104 30ff 	add.w	r0, r4, #4294967295
 800111a:	f080 8110 	bcs.w	800133e <__udivmoddi4+0x27a>
 800111e:	4299      	cmp	r1, r3
 8001120:	f240 810d 	bls.w	800133e <__udivmoddi4+0x27a>
 8001124:	3c02      	subs	r4, #2
 8001126:	4463      	add	r3, ip
 8001128:	1a59      	subs	r1, r3, r1
 800112a:	fbb1 f0f7 	udiv	r0, r1, r7
 800112e:	fb07 1110 	mls	r1, r7, r0, r1
 8001132:	fb00 f606 	mul.w	r6, r0, r6
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800113e:	429e      	cmp	r6, r3
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0303 	adds.w	r3, ip, r3
 8001146:	f100 31ff 	add.w	r1, r0, #4294967295
 800114a:	f080 80fa 	bcs.w	8001342 <__udivmoddi4+0x27e>
 800114e:	429e      	cmp	r6, r3
 8001150:	f240 80f7 	bls.w	8001342 <__udivmoddi4+0x27e>
 8001154:	4463      	add	r3, ip
 8001156:	3802      	subs	r0, #2
 8001158:	2100      	movs	r1, #0
 800115a:	1b9b      	subs	r3, r3, r6
 800115c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001160:	b11d      	cbz	r5, 800116a <__udivmoddi4+0xa6>
 8001162:	40d3      	lsrs	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e9c5 3200 	strd	r3, r2, [r5]
 800116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116e:	428b      	cmp	r3, r1
 8001170:	d905      	bls.n	800117e <__udivmoddi4+0xba>
 8001172:	b10d      	cbz	r5, 8001178 <__udivmoddi4+0xb4>
 8001174:	e9c5 0100 	strd	r0, r1, [r5]
 8001178:	2100      	movs	r1, #0
 800117a:	4608      	mov	r0, r1
 800117c:	e7f5      	b.n	800116a <__udivmoddi4+0xa6>
 800117e:	fab3 f183 	clz	r1, r3
 8001182:	2900      	cmp	r1, #0
 8001184:	d146      	bne.n	8001214 <__udivmoddi4+0x150>
 8001186:	42a3      	cmp	r3, r4
 8001188:	d302      	bcc.n	8001190 <__udivmoddi4+0xcc>
 800118a:	4290      	cmp	r0, r2
 800118c:	f0c0 80ee 	bcc.w	800136c <__udivmoddi4+0x2a8>
 8001190:	1a86      	subs	r6, r0, r2
 8001192:	eb64 0303 	sbc.w	r3, r4, r3
 8001196:	2001      	movs	r0, #1
 8001198:	2d00      	cmp	r5, #0
 800119a:	d0e6      	beq.n	800116a <__udivmoddi4+0xa6>
 800119c:	e9c5 6300 	strd	r6, r3, [r5]
 80011a0:	e7e3      	b.n	800116a <__udivmoddi4+0xa6>
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	f040 808f 	bne.w	80012c6 <__udivmoddi4+0x202>
 80011a8:	eba1 040c 	sub.w	r4, r1, ip
 80011ac:	2101      	movs	r1, #1
 80011ae:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011b2:	fa1f f78c 	uxth.w	r7, ip
 80011b6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011ba:	fb08 4416 	mls	r4, r8, r6, r4
 80011be:	fb07 f006 	mul.w	r0, r7, r6
 80011c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ca:	4298      	cmp	r0, r3
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x11c>
 80011ce:	eb1c 0303 	adds.w	r3, ip, r3
 80011d2:	f106 34ff 	add.w	r4, r6, #4294967295
 80011d6:	d202      	bcs.n	80011de <__udivmoddi4+0x11a>
 80011d8:	4298      	cmp	r0, r3
 80011da:	f200 80cb 	bhi.w	8001374 <__udivmoddi4+0x2b0>
 80011de:	4626      	mov	r6, r4
 80011e0:	1a1c      	subs	r4, r3, r0
 80011e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011e6:	fb08 4410 	mls	r4, r8, r0, r4
 80011ea:	fb00 f707 	mul.w	r7, r0, r7
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011f6:	429f      	cmp	r7, r3
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x148>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 34ff 	add.w	r4, r0, #4294967295
 8001202:	d202      	bcs.n	800120a <__udivmoddi4+0x146>
 8001204:	429f      	cmp	r7, r3
 8001206:	f200 80ae 	bhi.w	8001366 <__udivmoddi4+0x2a2>
 800120a:	4620      	mov	r0, r4
 800120c:	1bdb      	subs	r3, r3, r7
 800120e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001212:	e7a5      	b.n	8001160 <__udivmoddi4+0x9c>
 8001214:	f1c1 0720 	rsb	r7, r1, #32
 8001218:	408b      	lsls	r3, r1
 800121a:	fa22 fc07 	lsr.w	ip, r2, r7
 800121e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001222:	fa24 f607 	lsr.w	r6, r4, r7
 8001226:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800122a:	fbb6 f8f9 	udiv	r8, r6, r9
 800122e:	fa1f fe8c 	uxth.w	lr, ip
 8001232:	fb09 6618 	mls	r6, r9, r8, r6
 8001236:	fa20 f307 	lsr.w	r3, r0, r7
 800123a:	408c      	lsls	r4, r1
 800123c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001240:	fb08 f00e 	mul.w	r0, r8, lr
 8001244:	431c      	orrs	r4, r3
 8001246:	0c23      	lsrs	r3, r4, #16
 8001248:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800124c:	4298      	cmp	r0, r3
 800124e:	fa02 f201 	lsl.w	r2, r2, r1
 8001252:	d90a      	bls.n	800126a <__udivmoddi4+0x1a6>
 8001254:	eb1c 0303 	adds.w	r3, ip, r3
 8001258:	f108 36ff 	add.w	r6, r8, #4294967295
 800125c:	f080 8081 	bcs.w	8001362 <__udivmoddi4+0x29e>
 8001260:	4298      	cmp	r0, r3
 8001262:	d97e      	bls.n	8001362 <__udivmoddi4+0x29e>
 8001264:	f1a8 0802 	sub.w	r8, r8, #2
 8001268:	4463      	add	r3, ip
 800126a:	1a1e      	subs	r6, r3, r0
 800126c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001270:	fb09 6613 	mls	r6, r9, r3, r6
 8001274:	fb03 fe0e 	mul.w	lr, r3, lr
 8001278:	b2a4      	uxth	r4, r4
 800127a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800127e:	45a6      	cmp	lr, r4
 8001280:	d908      	bls.n	8001294 <__udivmoddi4+0x1d0>
 8001282:	eb1c 0404 	adds.w	r4, ip, r4
 8001286:	f103 30ff 	add.w	r0, r3, #4294967295
 800128a:	d266      	bcs.n	800135a <__udivmoddi4+0x296>
 800128c:	45a6      	cmp	lr, r4
 800128e:	d964      	bls.n	800135a <__udivmoddi4+0x296>
 8001290:	3b02      	subs	r3, #2
 8001292:	4464      	add	r4, ip
 8001294:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001298:	fba0 8302 	umull	r8, r3, r0, r2
 800129c:	eba4 040e 	sub.w	r4, r4, lr
 80012a0:	429c      	cmp	r4, r3
 80012a2:	46c6      	mov	lr, r8
 80012a4:	461e      	mov	r6, r3
 80012a6:	d350      	bcc.n	800134a <__udivmoddi4+0x286>
 80012a8:	d04d      	beq.n	8001346 <__udivmoddi4+0x282>
 80012aa:	b155      	cbz	r5, 80012c2 <__udivmoddi4+0x1fe>
 80012ac:	ebba 030e 	subs.w	r3, sl, lr
 80012b0:	eb64 0406 	sbc.w	r4, r4, r6
 80012b4:	fa04 f707 	lsl.w	r7, r4, r7
 80012b8:	40cb      	lsrs	r3, r1
 80012ba:	431f      	orrs	r7, r3
 80012bc:	40cc      	lsrs	r4, r1
 80012be:	e9c5 7400 	strd	r7, r4, [r5]
 80012c2:	2100      	movs	r1, #0
 80012c4:	e751      	b.n	800116a <__udivmoddi4+0xa6>
 80012c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ca:	f1c2 0320 	rsb	r3, r2, #32
 80012ce:	40d9      	lsrs	r1, r3
 80012d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012d4:	fa20 f303 	lsr.w	r3, r0, r3
 80012d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1110 	mls	r1, r8, r0, r1
 80012e4:	4094      	lsls	r4, r2
 80012e6:	431c      	orrs	r4, r3
 80012e8:	fa1f f78c 	uxth.w	r7, ip
 80012ec:	0c23      	lsrs	r3, r4, #16
 80012ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012f2:	fb00 f107 	mul.w	r1, r0, r7
 80012f6:	4299      	cmp	r1, r3
 80012f8:	d908      	bls.n	800130c <__udivmoddi4+0x248>
 80012fa:	eb1c 0303 	adds.w	r3, ip, r3
 80012fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8001302:	d22c      	bcs.n	800135e <__udivmoddi4+0x29a>
 8001304:	4299      	cmp	r1, r3
 8001306:	d92a      	bls.n	800135e <__udivmoddi4+0x29a>
 8001308:	3802      	subs	r0, #2
 800130a:	4463      	add	r3, ip
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001312:	fb08 3311 	mls	r3, r8, r1, r3
 8001316:	b2a4      	uxth	r4, r4
 8001318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800131c:	fb01 f307 	mul.w	r3, r1, r7
 8001320:	42a3      	cmp	r3, r4
 8001322:	d908      	bls.n	8001336 <__udivmoddi4+0x272>
 8001324:	eb1c 0404 	adds.w	r4, ip, r4
 8001328:	f101 36ff 	add.w	r6, r1, #4294967295
 800132c:	d213      	bcs.n	8001356 <__udivmoddi4+0x292>
 800132e:	42a3      	cmp	r3, r4
 8001330:	d911      	bls.n	8001356 <__udivmoddi4+0x292>
 8001332:	3902      	subs	r1, #2
 8001334:	4464      	add	r4, ip
 8001336:	1ae4      	subs	r4, r4, r3
 8001338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800133c:	e73b      	b.n	80011b6 <__udivmoddi4+0xf2>
 800133e:	4604      	mov	r4, r0
 8001340:	e6f2      	b.n	8001128 <__udivmoddi4+0x64>
 8001342:	4608      	mov	r0, r1
 8001344:	e708      	b.n	8001158 <__udivmoddi4+0x94>
 8001346:	45c2      	cmp	sl, r8
 8001348:	d2af      	bcs.n	80012aa <__udivmoddi4+0x1e6>
 800134a:	ebb8 0e02 	subs.w	lr, r8, r2
 800134e:	eb63 060c 	sbc.w	r6, r3, ip
 8001352:	3801      	subs	r0, #1
 8001354:	e7a9      	b.n	80012aa <__udivmoddi4+0x1e6>
 8001356:	4631      	mov	r1, r6
 8001358:	e7ed      	b.n	8001336 <__udivmoddi4+0x272>
 800135a:	4603      	mov	r3, r0
 800135c:	e79a      	b.n	8001294 <__udivmoddi4+0x1d0>
 800135e:	4630      	mov	r0, r6
 8001360:	e7d4      	b.n	800130c <__udivmoddi4+0x248>
 8001362:	46b0      	mov	r8, r6
 8001364:	e781      	b.n	800126a <__udivmoddi4+0x1a6>
 8001366:	4463      	add	r3, ip
 8001368:	3802      	subs	r0, #2
 800136a:	e74f      	b.n	800120c <__udivmoddi4+0x148>
 800136c:	4606      	mov	r6, r0
 800136e:	4623      	mov	r3, r4
 8001370:	4608      	mov	r0, r1
 8001372:	e711      	b.n	8001198 <__udivmoddi4+0xd4>
 8001374:	3e02      	subs	r6, #2
 8001376:	4463      	add	r3, ip
 8001378:	e732      	b.n	80011e0 <__udivmoddi4+0x11c>
 800137a:	bf00      	nop

0800137c <__aeabi_idiv0>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <BMP280_ReadRegister>:

    float altitude = (T0 / alpha) * (1 - pow((pressure / P0), (1 / beta)));
    return altitude;
}

uint8_t BMP280_ReadRegister(uint8_t reg) {
 8001380:	b500      	push	{lr}
 8001382:	b085      	sub	sp, #20
 8001384:	f88d 0007 	strb.w	r0, [sp, #7]

    uint8_t received_data;
    Write_GPIO(PA, 8, LOW); // Disable CS
 8001388:	2200      	movs	r2, #0
 800138a:	2108      	movs	r1, #8
 800138c:	2001      	movs	r0, #1
 800138e:	f000 fd9d 	bl	8001ecc <Write_GPIO>
    SPI2_TX(&reg, 1);
 8001392:	2101      	movs	r1, #1
 8001394:	f10d 0007 	add.w	r0, sp, #7
 8001398:	f000 fe1c 	bl	8001fd4 <SPI2_TX>
    SPI2_RX(&received_data, 1);
 800139c:	2101      	movs	r1, #1
 800139e:	f10d 000f 	add.w	r0, sp, #15
 80013a2:	f000 fe35 	bl	8002010 <SPI2_RX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 80013a6:	2201      	movs	r2, #1
 80013a8:	2108      	movs	r1, #8
 80013aa:	4610      	mov	r0, r2
 80013ac:	f000 fd8e 	bl	8001ecc <Write_GPIO>
    return received_data;
}
 80013b0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80013b4:	b005      	add	sp, #20
 80013b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080013bc <BMP280_ReadTemperature>:
float BMP280_ReadTemperature(BMP280 *devBMP) {
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	4604      	mov	r4, r0
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013c0:	20fa      	movs	r0, #250	@ 0xfa
 80013c2:	f7ff ffdd 	bl	8001380 <BMP280_ReadRegister>
 80013c6:	0305      	lsls	r5, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_TEMP_LSB) << 4) |
 80013c8:	20fb      	movs	r0, #251	@ 0xfb
 80013ca:	f7ff ffd9 	bl	8001380 <BMP280_ReadRegister>
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013ce:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
                    (BMP280_ReadRegister(BMP280_REG_TEMP_XLSB) >> 4);
 80013d2:	20fc      	movs	r0, #252	@ 0xfc
 80013d4:	f7ff ffd4 	bl	8001380 <BMP280_ReadRegister>
 80013d8:	f3c0 1007 	ubfx	r0, r0, #4, #8
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013dc:	4328      	orrs	r0, r5
    int32_t var1 = ((((adc_T >> 3) - ((int32_t)devBMP->calib_data.dig_T1 << 1))) * ((int32_t)devBMP->calib_data.dig_T2)) >> 11;
 80013de:	8923      	ldrh	r3, [r4, #8]
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 80013e6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80013ea:	fb01 f202 	mul.w	r2, r1, r2
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1)) * ((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1))) >> 12) * ((int32_t)devBMP->calib_data.dig_T3)) >> 14;
 80013ee:	ebc3 1320 	rsb	r3, r3, r0, asr #4
 80013f2:	fb03 f303 	mul.w	r3, r3, r3
 80013f6:	131b      	asrs	r3, r3, #12
 80013f8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	139b      	asrs	r3, r3, #14
    devBMP->t_fine = var1 + var2;
 8001402:	eb03 23e2 	add.w	r3, r3, r2, asr #11
 8001406:	6223      	str	r3, [r4, #32]
    float T = (devBMP->t_fine * 5 + 128) >> 8;
 8001408:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800140c:	3380      	adds	r3, #128	@ 0x80
 800140e:	1218      	asrs	r0, r3, #8
 8001410:	f7ff fc44 	bl	8000c9c <__aeabi_i2f>
    return (T / 100.0) + devBMP->temperature_ref;
 8001414:	f7ff f808 	bl	8000428 <__aeabi_f2d>
 8001418:	2200      	movs	r2, #0
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <BMP280_ReadTemperature+0x80>)
 800141c:	f7ff f986 	bl	800072c <__aeabi_ddiv>
 8001420:	4606      	mov	r6, r0
 8001422:	460f      	mov	r7, r1
 8001424:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001426:	f7fe ffff 	bl	8000428 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4630      	mov	r0, r6
 8001430:	4639      	mov	r1, r7
 8001432:	f7fe fe9b 	bl	800016c <__adddf3>
 8001436:	f7ff fb27 	bl	8000a88 <__aeabi_d2f>
}
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800143c:	40590000 	.word	0x40590000

08001440 <BMP280_ReadPressure>:
float BMP280_ReadPressure(BMP280 *devBMP) {
 8001440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001444:	4604      	mov	r4, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 8001446:	20f3      	movs	r0, #243	@ 0xf3
 8001448:	f7ff ff9a 	bl	8001380 <BMP280_ReadRegister>
 800144c:	f010 0f04 	tst.w	r0, #4
 8001450:	d1f9      	bne.n	8001446 <BMP280_ReadPressure+0x6>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 8001452:	20f7      	movs	r0, #247	@ 0xf7
 8001454:	f7ff ff94 	bl	8001380 <BMP280_ReadRegister>
 8001458:	0305      	lsls	r5, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_PRESS_LSB) << 4) |
 800145a:	20f8      	movs	r0, #248	@ 0xf8
 800145c:	f7ff ff90 	bl	8001380 <BMP280_ReadRegister>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 8001460:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
                    (BMP280_ReadRegister(BMP280_REG_PRESS_XLSB) >> 4);
 8001464:	20f9      	movs	r0, #249	@ 0xf9
 8001466:	f7ff ff8b 	bl	8001380 <BMP280_ReadRegister>
 800146a:	f3c0 1007 	ubfx	r0, r0, #4, #8
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 800146e:	ea45 0100 	orr.w	r1, r5, r0
    int64_t var1 = ((int64_t)devBMP->t_fine) - 128000;
 8001472:	6a20      	ldr	r0, [r4, #32]
 8001474:	17c3      	asrs	r3, r0, #31
 8001476:	f5b0 30fa 	subs.w	r0, r0, #128000	@ 0x1f400
 800147a:	f143 33ff 	adc.w	r3, r3, #4294967295
    int64_t var2 = var1 * var1 * (int64_t)devBMP->calib_data.dig_P6;
 800147e:	fb00 f503 	mul.w	r5, r0, r3
 8001482:	fba0 2600 	umull	r2, r6, r0, r0
 8001486:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 800148a:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 800148e:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8001492:	fb02 fe0e 	mul.w	lr, r2, lr
 8001496:	fb05 ee06 	mla	lr, r5, r6, lr
 800149a:	fba2 7505 	umull	r7, r5, r2, r5
 800149e:	44ae      	add	lr, r5
    var2 = var2 + ((var1 * (int64_t)devBMP->calib_data.dig_P5) << 17);
 80014a0:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80014a4:	ea4f 78ec 	mov.w	r8, ip, asr #31
 80014a8:	fb0c f503 	mul.w	r5, ip, r3
 80014ac:	fb00 5508 	mla	r5, r0, r8, r5
 80014b0:	fbac c800 	umull	ip, r8, ip, r0
 80014b4:	4445      	add	r5, r8
 80014b6:	046d      	lsls	r5, r5, #17
 80014b8:	ea45 35dc 	orr.w	r5, r5, ip, lsr #15
 80014bc:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 80014c0:	eb1c 0c07 	adds.w	ip, ip, r7
 80014c4:	eb4e 0e05 	adc.w	lr, lr, r5
    var2 = var2 + (((int64_t)devBMP->calib_data.dig_P4) << 35);
 80014c8:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 80014cc:	eb0e 0ec5 	add.w	lr, lr, r5, lsl #3
    var1 = ((var1 * var1 * (int64_t)devBMP->calib_data.dig_P3) >> 8) + ((var1 * (int64_t)devBMP->calib_data.dig_P2) << 12);
 80014d0:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
 80014d4:	17ef      	asrs	r7, r5, #31
 80014d6:	fb02 f707 	mul.w	r7, r2, r7
 80014da:	fb05 7606 	mla	r6, r5, r6, r7
 80014de:	fba2 2505 	umull	r2, r5, r2, r5
 80014e2:	442e      	add	r6, r5
 80014e4:	0a12      	lsrs	r2, r2, #8
 80014e6:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 80014ea:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80014ee:	17ef      	asrs	r7, r5, #31
 80014f0:	fb05 f303 	mul.w	r3, r5, r3
 80014f4:	fb00 3307 	mla	r3, r0, r7, r3
 80014f8:	fba5 5000 	umull	r5, r0, r5, r0
 80014fc:	4403      	add	r3, r0
 80014fe:	031b      	lsls	r3, r3, #12
 8001500:	ea43 5315 	orr.w	r3, r3, r5, lsr #20
 8001504:	032d      	lsls	r5, r5, #12
 8001506:	1952      	adds	r2, r2, r5
 8001508:	eb43 2326 	adc.w	r3, r3, r6, asr #8
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)devBMP->calib_data.dig_P1) >> 33;
 800150c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001510:	89e5      	ldrh	r5, [r4, #14]
 8001512:	fba2 2005 	umull	r2, r0, r2, r5
 8001516:	fb05 0003 	mla	r0, r5, r3, r0
 800151a:	1042      	asrs	r2, r0, #1
 800151c:	17c3      	asrs	r3, r0, #31
    if (var1 == 0) {
 800151e:	ea53 0060 	orrs.w	r0, r3, r0, asr #1
 8001522:	d07d      	beq.n	8001620 <BMP280_ReadPressure+0x1e0>
    int64_t p = 1048576 - adc_P;
 8001524:	f5c1 1580 	rsb	r5, r1, #1048576	@ 0x100000
    p = (((p << 31) - var2) * 3125) / var1;
 8001528:	1069      	asrs	r1, r5, #1
 800152a:	07ed      	lsls	r5, r5, #31
 800152c:	ebb5 050c 	subs.w	r5, r5, ip
 8001530:	eb61 0e0e 	sbc.w	lr, r1, lr
 8001534:	eb15 0c05 	adds.w	ip, r5, r5
 8001538:	eb4e 010e 	adc.w	r1, lr, lr
 800153c:	eb1c 0c05 	adds.w	ip, ip, r5
 8001540:	eb4e 0101 	adc.w	r1, lr, r1
 8001544:	0188      	lsls	r0, r1, #6
 8001546:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 800154a:	ea4f 168c 	mov.w	r6, ip, lsl #6
 800154e:	eb1c 0c06 	adds.w	ip, ip, r6
 8001552:	eb41 0100 	adc.w	r1, r1, r0
 8001556:	0089      	lsls	r1, r1, #2
 8001558:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 800155c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001560:	eb1c 0005 	adds.w	r0, ip, r5
 8001564:	eb4e 0101 	adc.w	r1, lr, r1
 8001568:	0089      	lsls	r1, r1, #2
 800156a:	ea41 7190 	orr.w	r1, r1, r0, lsr #30
 800156e:	0080      	lsls	r0, r0, #2
 8001570:	1940      	adds	r0, r0, r5
 8001572:	eb4e 0101 	adc.w	r1, lr, r1
 8001576:	f7ff fd55 	bl	8001024 <__aeabi_ldivmod>
 800157a:	4603      	mov	r3, r0
    var1 = (((int64_t)devBMP->calib_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800157c:	f9b4 501e 	ldrsh.w	r5, [r4, #30]
 8001580:	17ee      	asrs	r6, r5, #31
 8001582:	0b42      	lsrs	r2, r0, #13
 8001584:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001588:	ea4f 3c61 	mov.w	ip, r1, asr #13
 800158c:	fb05 f70c 	mul.w	r7, r5, ip
 8001590:	fb02 7706 	mla	r7, r2, r6, r7
 8001594:	fba5 6502 	umull	r6, r5, r5, r2
 8001598:	443d      	add	r5, r7
 800159a:	fb02 f505 	mul.w	r5, r2, r5
 800159e:	fb06 550c 	mla	r5, r6, ip, r5
 80015a2:	fba2 2606 	umull	r2, r6, r2, r6
 80015a6:	4435      	add	r5, r6
 80015a8:	0e52      	lsrs	r2, r2, #25
 80015aa:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    var2 = (((int64_t)devBMP->calib_data.dig_P8) * p) >> 19;
 80015ae:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
 80015b2:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80015b6:	fb06 f701 	mul.w	r7, r6, r1
 80015ba:	fb0c 7000 	mla	r0, ip, r0, r7
 80015be:	fba6 6703 	umull	r6, r7, r6, r3
 80015c2:	4438      	add	r0, r7
 80015c4:	0cf6      	lsrs	r6, r6, #19
 80015c6:	ea46 3640 	orr.w	r6, r6, r0, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)devBMP->calib_data.dig_P7) << 4);
 80015ca:	189b      	adds	r3, r3, r2
 80015cc:	eb41 6165 	adc.w	r1, r1, r5, asr #25
 80015d0:	199b      	adds	r3, r3, r6
 80015d2:	eb41 42e0 	adc.w	r2, r1, r0, asr #19
 80015d6:	0a18      	lsrs	r0, r3, #8
 80015d8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80015dc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80015e0:	17d9      	asrs	r1, r3, #31
 80015e2:	0109      	lsls	r1, r1, #4
 80015e4:	ea41 7113 	orr.w	r1, r1, r3, lsr #28
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	18c0      	adds	r0, r0, r3
    return ((float)p / 256.09) + devBMP->pressure_ref;
 80015ec:	eb41 2122 	adc.w	r1, r1, r2, asr #8
 80015f0:	f7ff fb6a 	bl	8000cc8 <__aeabi_l2f>
 80015f4:	f7fe ff18 	bl	8000428 <__aeabi_f2d>
 80015f8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001628 <BMP280_ReadPressure+0x1e8>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f895 	bl	800072c <__aeabi_ddiv>
 8001602:	4606      	mov	r6, r0
 8001604:	460f      	mov	r7, r1
 8001606:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001608:	f7fe ff0e 	bl	8000428 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4630      	mov	r0, r6
 8001612:	4639      	mov	r1, r7
 8001614:	f7fe fdaa 	bl	800016c <__adddf3>
 8001618:	f7ff fa36 	bl	8000a88 <__aeabi_d2f>
}
 800161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0; // avoid exception caused by division by zero
 8001620:	2000      	movs	r0, #0
 8001622:	e7fb      	b.n	800161c <BMP280_ReadPressure+0x1dc>
 8001624:	f3af 8000 	nop.w
 8001628:	a3d70a3d 	.word	0xa3d70a3d
 800162c:	40700170 	.word	0x40700170

08001630 <BMP280_MeasureReference>:
uint8_t BMP280_MeasureReference(BMP280 *devBMP, float temp_ref, float press_ref) {
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	4604      	mov	r4, r0
 8001634:	460e      	mov	r6, r1
 8001636:	4615      	mov	r5, r2
	devBMP->temperature_ref = BMP280_ReadTemperature(devBMP) - temp_ref;
 8001638:	f7ff fec0 	bl	80013bc <BMP280_ReadTemperature>
 800163c:	4631      	mov	r1, r6
 800163e:	f7ff fa77 	bl	8000b30 <__aeabi_fsub>
 8001642:	6260      	str	r0, [r4, #36]	@ 0x24
	devBMP->pressure_ref = BMP280_ReadPressure(devBMP) - press_ref;
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fefb 	bl	8001440 <BMP280_ReadPressure>
 800164a:	4629      	mov	r1, r5
 800164c:	f7ff fa70 	bl	8000b30 <__aeabi_fsub>
 8001650:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 8001652:	2001      	movs	r0, #1
 8001654:	bd70      	pop	{r4, r5, r6, pc}

08001656 <BMP280_ReadCalibrationData>:
void BMP280_ReadCalibrationData(BMP280 *devBMP) {
 8001656:	b530      	push	{r4, r5, lr}
 8001658:	b089      	sub	sp, #36	@ 0x24
 800165a:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 800165c:	20f3      	movs	r0, #243	@ 0xf3
 800165e:	f7ff fe8f 	bl	8001380 <BMP280_ReadRegister>
 8001662:	f010 0f04 	tst.w	r0, #4
 8001666:	d1f9      	bne.n	800165c <BMP280_ReadCalibrationData+0x6>
    for (int i = 0; i < 26; i++) {
 8001668:	2400      	movs	r4, #0
 800166a:	e00a      	b.n	8001682 <BMP280_ReadCalibrationData+0x2c>
        calib[i] = BMP280_ReadRegister(BMP280_REG_CALIB_00 + i);
 800166c:	f1a4 0078 	sub.w	r0, r4, #120	@ 0x78
 8001670:	b2c0      	uxtb	r0, r0
 8001672:	f7ff fe85 	bl	8001380 <BMP280_ReadRegister>
 8001676:	f104 0320 	add.w	r3, r4, #32
 800167a:	446b      	add	r3, sp
 800167c:	f803 0c1c 	strb.w	r0, [r3, #-28]
    for (int i = 0; i < 26; i++) {
 8001680:	3401      	adds	r4, #1
 8001682:	2c19      	cmp	r4, #25
 8001684:	ddf2      	ble.n	800166c <BMP280_ReadCalibrationData+0x16>
    devBMP->calib_data.dig_T1 = (calib[1] << 8) | calib[0];
 8001686:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800168a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800168e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001692:	812b      	strh	r3, [r5, #8]
    devBMP->calib_data.dig_T2 = (calib[3] << 8) | calib[2];
 8001694:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001698:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800169c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016a0:	816b      	strh	r3, [r5, #10]
    devBMP->calib_data.dig_T3 = (calib[5] << 8) | calib[4];
 80016a2:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80016a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80016aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016ae:	81ab      	strh	r3, [r5, #12]
    devBMP->calib_data.dig_P1 = (calib[7] << 8) | calib[6];
 80016b0:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80016b4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80016b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016bc:	81eb      	strh	r3, [r5, #14]
    devBMP->calib_data.dig_P2 = (calib[9] << 8) | calib[8];
 80016be:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80016c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80016c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016ca:	822b      	strh	r3, [r5, #16]
    devBMP->calib_data.dig_P3 = (calib[11] << 8) | calib[10];
 80016cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80016d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80016d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016d8:	826b      	strh	r3, [r5, #18]
    devBMP->calib_data.dig_P4 = (calib[13] << 8) | calib[12];
 80016da:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80016de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80016e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e6:	82ab      	strh	r3, [r5, #20]
    devBMP->calib_data.dig_P5 = (calib[15] << 8) | calib[14];
 80016e8:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80016ec:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80016f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016f4:	82eb      	strh	r3, [r5, #22]
    devBMP->calib_data.dig_P6 = (calib[17] << 8) | calib[16];
 80016f6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80016fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80016fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001702:	832b      	strh	r3, [r5, #24]
    devBMP->calib_data.dig_P7 = (calib[19] << 8) | calib[18];
 8001704:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8001708:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800170c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001710:	836b      	strh	r3, [r5, #26]
    devBMP->calib_data.dig_P8 = (calib[21] << 8) | calib[20];
 8001712:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8001716:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800171a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800171e:	83ab      	strh	r3, [r5, #28]
    devBMP->calib_data.dig_P9 = (calib[23] << 8) | calib[22];
 8001720:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8001724:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001728:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800172c:	83eb      	strh	r3, [r5, #30]
}
 800172e:	b009      	add	sp, #36	@ 0x24
 8001730:	bd30      	pop	{r4, r5, pc}

08001732 <BMP280_WriteRegister>:

uint8_t BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8001732:	b500      	push	{lr}
 8001734:	b083      	sub	sp, #12

    uint8_t data[2] = {reg, value};
 8001736:	f88d 0004 	strb.w	r0, [sp, #4]
 800173a:	f88d 1005 	strb.w	r1, [sp, #5]
    Write_GPIO(PA, 8, LOW); // Disable CS
 800173e:	2200      	movs	r2, #0
 8001740:	2108      	movs	r1, #8
 8001742:	2001      	movs	r0, #1
 8001744:	f000 fbc2 	bl	8001ecc <Write_GPIO>
    SPI2_TX(data, 2);
 8001748:	2102      	movs	r1, #2
 800174a:	a801      	add	r0, sp, #4
 800174c:	f000 fc42 	bl	8001fd4 <SPI2_TX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 8001750:	2201      	movs	r2, #1
 8001752:	2108      	movs	r1, #8
 8001754:	4610      	mov	r0, r2
 8001756:	f000 fbb9 	bl	8001ecc <Write_GPIO>
    return 1; // OK
}
 800175a:	2001      	movs	r0, #1
 800175c:	b003      	add	sp, #12
 800175e:	f85d fb04 	ldr.w	pc, [sp], #4

08001762 <BMP280_Init>:
uint8_t BMP280_Init(BMP280 *devBMP, float temp_ref, float press_ref) {
 8001762:	b570      	push	{r4, r5, r6, lr}
 8001764:	4604      	mov	r4, r0
 8001766:	460d      	mov	r5, r1
 8001768:	4616      	mov	r6, r2
	SPI_Init(2);
 800176a:	2002      	movs	r0, #2
 800176c:	f000 fbce 	bl	8001f0c <SPI_Init>
    BMP280_WriteRegister(BMP280_REG_RESET, BMP280_RESET_WORD); // Reset
 8001770:	21b6      	movs	r1, #182	@ 0xb6
 8001772:	20e0      	movs	r0, #224	@ 0xe0
 8001774:	f7ff ffdd 	bl	8001732 <BMP280_WriteRegister>
    if (BMP280_ReadRegister(BMP280_REG_ID) != BMP280_DEVICE_ID) {
 8001778:	20d0      	movs	r0, #208	@ 0xd0
 800177a:	f7ff fe01 	bl	8001380 <BMP280_ReadRegister>
 800177e:	2858      	cmp	r0, #88	@ 0x58
 8001780:	d001      	beq.n	8001786 <BMP280_Init+0x24>
        return 0; // Error
 8001782:	2000      	movs	r0, #0
}
 8001784:	bd70      	pop	{r4, r5, r6, pc}
    BMP280_ReadCalibrationData(devBMP);
 8001786:	4620      	mov	r0, r4
 8001788:	f7ff ff65 	bl	8001656 <BMP280_ReadCalibrationData>
    BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, BMP280_SETTING_CTRL_MEAS_NORMAL);
 800178c:	2157      	movs	r1, #87	@ 0x57
 800178e:	20f4      	movs	r0, #244	@ 0xf4
 8001790:	f7ff ffcf 	bl	8001732 <BMP280_WriteRegister>
    BMP280_WriteRegister(BMP280_REG_CONFIG, BMP280_SETTING_CONFIG);
 8001794:	2108      	movs	r1, #8
 8001796:	20f5      	movs	r0, #245	@ 0xf5
 8001798:	f7ff ffcb 	bl	8001732 <BMP280_WriteRegister>
    BMP280_MeasureReference(devBMP, temp_ref, press_ref);
 800179c:	4632      	mov	r2, r6
 800179e:	4629      	mov	r1, r5
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff ff45 	bl	8001630 <BMP280_MeasureReference>
    return 1;
 80017a6:	2001      	movs	r0, #1
 80017a8:	e7ec      	b.n	8001784 <BMP280_Init+0x22>

080017aa <CD74HC4051_Init>:
#include "GAUL_Drivers/Pyros.h"
#include "GAUL_Drivers/Low_Level_Drivers/ADC_driver.h"

uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {

	if (hadc == NULL) {
 80017aa:	b370      	cbz	r0, 800180a <CD74HC4051_Init+0x60>
uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {
 80017ac:	b510      	push	{r4, lr}
 80017ae:	4604      	mov	r4, r0
		return 0; // Error
	}
	// Read pin
	Init_GPIO(PA, 0, IN, I_AN); // MUL_AN
 80017b0:	2300      	movs	r3, #0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4619      	mov	r1, r3
 80017b6:	2001      	movs	r0, #1
 80017b8:	f000 fb3e 	bl	8001e38 <Init_GPIO>
	// Batteries
	Init_GPIO(PC, 13, OUT2, O_GP_PP); // MUL_S0
 80017bc:	2300      	movs	r3, #0
 80017be:	2202      	movs	r2, #2
 80017c0:	210d      	movs	r1, #13
 80017c2:	2003      	movs	r0, #3
 80017c4:	f000 fb38 	bl	8001e38 <Init_GPIO>
	Init_GPIO(PC, 14, OUT2, O_GP_PP); // MUL_S1
 80017c8:	2300      	movs	r3, #0
 80017ca:	2202      	movs	r2, #2
 80017cc:	210e      	movs	r1, #14
 80017ce:	2003      	movs	r0, #3
 80017d0:	f000 fb32 	bl	8001e38 <Init_GPIO>
	Init_GPIO(PC, 15, OUT2, O_GP_PP); // MUL_S2
 80017d4:	2300      	movs	r3, #0
 80017d6:	2202      	movs	r2, #2
 80017d8:	210f      	movs	r1, #15
 80017da:	2003      	movs	r0, #3
 80017dc:	f000 fb2c 	bl	8001e38 <Init_GPIO>
	Init_GPIO(PB, 8, OUT2, O_GP_PP); // MUL_E~
 80017e0:	2300      	movs	r3, #0
 80017e2:	2202      	movs	r2, #2
 80017e4:	2108      	movs	r1, #8
 80017e6:	4610      	mov	r0, r2
 80017e8:	f000 fb26 	bl	8001e38 <Init_GPIO>
	// Set MUL_E~ (inverse)
	Write_GPIO(PB, 8, HIGH);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2108      	movs	r1, #8
 80017f0:	2002      	movs	r0, #2
 80017f2:	f000 fb6b 	bl	8001ecc <Write_GPIO>
	// Pyros
	Pyro_Init();
 80017f6:	f000 fa67 	bl	8001cc8 <Pyro_Init>

	//ADC calibration
	ADC_Stop(hadc);
 80017fa:	4620      	mov	r0, r4
 80017fc:	f000 fafc 	bl	8001df8 <ADC_Stop>
	ADC_Calibration(hadc);
 8001800:	4620      	mov	r0, r4
 8001802:	f000 faf4 	bl	8001dee <ADC_Calibration>

	return 1; // OK
 8001806:	2001      	movs	r0, #1
}
 8001808:	bd10      	pop	{r4, pc}
		return 0; // Error
 800180a:	2000      	movs	r0, #0
}
 800180c:	4770      	bx	lr
	...

08001810 <CD74HC4051_AnRead>:

uint16_t CD74HC4051_AnRead(ADC_HandleTypeDef *hadc, uint8_t channel, uint8_t pyro_channel, float vref) {

	if (hadc == NULL) {
 8001810:	2800      	cmp	r0, #0
 8001812:	d060      	beq.n	80018d6 <CD74HC4051_AnRead+0xc6>
uint16_t CD74HC4051_AnRead(ADC_HandleTypeDef *hadc, uint8_t channel, uint8_t pyro_channel, float vref) {
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	460c      	mov	r4, r1
 8001818:	4615      	mov	r5, r2
 800181a:	461e      	mov	r6, r3
 800181c:	4607      	mov	r7, r0
		return 0;
	}
	if(channel == CHANNEL_1 || channel == CHANNEL_7) {
 800181e:	2901      	cmp	r1, #1
 8001820:	d05b      	beq.n	80018da <CD74HC4051_AnRead+0xca>
		return 0;
	}

	ADC_Start(hadc);
 8001822:	f000 fadf 	bl	8001de4 <ADC_Start>

	Write_GPIO(PB, 8, HIGH); // MUL_E~ (inverse)
 8001826:	2201      	movs	r2, #1
 8001828:	2108      	movs	r1, #8
 800182a:	2002      	movs	r0, #2
 800182c:	f000 fb4e 	bl	8001ecc <Write_GPIO>
	Write_GPIO(PA, 15, LOW); // Pyro_Test (inverse)
 8001830:	2200      	movs	r2, #0
 8001832:	210f      	movs	r1, #15
 8001834:	2001      	movs	r0, #1
 8001836:	f000 fb49 	bl	8001ecc <Write_GPIO>
	if(channel == CHANNEL_0) {
 800183a:	b98c      	cbnz	r4, 8001860 <CD74HC4051_AnRead+0x50>
		if(pyro_channel == PYRO_CHANNEL_0) {
 800183c:	2d01      	cmp	r5, #1
 800183e:	d003      	beq.n	8001848 <CD74HC4051_AnRead+0x38>
			Write_GPIO(PB, 4, HIGH); // Pyro_ON0
		} else if (pyro_channel == PYRO_CHANNEL_1) {
 8001840:	2d02      	cmp	r5, #2
 8001842:	d007      	beq.n	8001854 <CD74HC4051_AnRead+0x44>
			Write_GPIO(PB, 5, HIGH); // Pyro_ON1
		} else {
			return 0;
 8001844:	2000      	movs	r0, #0
 8001846:	e045      	b.n	80018d4 <CD74HC4051_AnRead+0xc4>
			Write_GPIO(PB, 4, HIGH); // Pyro_ON0
 8001848:	2201      	movs	r2, #1
 800184a:	2104      	movs	r1, #4
 800184c:	2002      	movs	r0, #2
 800184e:	f000 fb3d 	bl	8001ecc <Write_GPIO>
 8001852:	e017      	b.n	8001884 <CD74HC4051_AnRead+0x74>
			Write_GPIO(PB, 5, HIGH); // Pyro_ON1
 8001854:	2201      	movs	r2, #1
 8001856:	2105      	movs	r1, #5
 8001858:	2002      	movs	r0, #2
 800185a:	f000 fb37 	bl	8001ecc <Write_GPIO>
 800185e:	e011      	b.n	8001884 <CD74HC4051_AnRead+0x74>
		}
	} else {
		// Set channel
		Write_GPIO(PC, 13, (channel & 0x01) ? HIGH : LOW);
 8001860:	f004 0201 	and.w	r2, r4, #1
 8001864:	210d      	movs	r1, #13
 8001866:	2003      	movs	r0, #3
 8001868:	f000 fb30 	bl	8001ecc <Write_GPIO>
		Write_GPIO(PC, 14, (channel & 0x02) ? HIGH : LOW);
 800186c:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8001870:	210e      	movs	r1, #14
 8001872:	2003      	movs	r0, #3
 8001874:	f000 fb2a 	bl	8001ecc <Write_GPIO>
		Write_GPIO(PC, 15, (channel & 0x04) ? HIGH : LOW);
 8001878:	f3c4 0280 	ubfx	r2, r4, #2, #1
 800187c:	210f      	movs	r1, #15
 800187e:	2003      	movs	r0, #3
 8001880:	f000 fb24 	bl	8001ecc <Write_GPIO>
	}
	// Reactiver multiplexer pour lecture
	Write_GPIO(PB, 8, LOW); // MUL_E~ (inverse)
 8001884:	2200      	movs	r2, #0
 8001886:	2108      	movs	r1, #8
 8001888:	2002      	movs	r0, #2
 800188a:	f000 fb1f 	bl	8001ecc <Write_GPIO>
	// Lecture
	uint32_t adc_value = ADC_Sampling(hadc);
 800188e:	4638      	mov	r0, r7
 8001890:	f000 fab8 	bl	8001e04 <ADC_Sampling>
 8001894:	4604      	mov	r4, r0
	// Desactiver pyros (ordre important)
	Write_GPIO(PB, 4, LOW); // Pyro_ON0
 8001896:	2200      	movs	r2, #0
 8001898:	2104      	movs	r1, #4
 800189a:	2002      	movs	r0, #2
 800189c:	f000 fb16 	bl	8001ecc <Write_GPIO>
	Write_GPIO(PB, 5, LOW); // Pyro_ON1
 80018a0:	2200      	movs	r2, #0
 80018a2:	2105      	movs	r1, #5
 80018a4:	2002      	movs	r0, #2
 80018a6:	f000 fb11 	bl	8001ecc <Write_GPIO>
	Write_GPIO(PA, 15, HIGH); // Pyro_Test~
 80018aa:	2201      	movs	r2, #1
 80018ac:	210f      	movs	r1, #15
 80018ae:	4610      	mov	r0, r2
 80018b0:	f000 fb0c 	bl	8001ecc <Write_GPIO>

	return (uint16_t)((adc_value * vref / 4096) * 1000); // millivolts
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff f9ed 	bl	8000c94 <__aeabi_ui2f>
 80018ba:	4631      	mov	r1, r6
 80018bc:	f7ff fa42 	bl	8000d44 <__aeabi_fmul>
 80018c0:	f04f 5166 	mov.w	r1, #964689920	@ 0x39800000
 80018c4:	f7ff fa3e 	bl	8000d44 <__aeabi_fmul>
 80018c8:	4905      	ldr	r1, [pc, #20]	@ (80018e0 <CD74HC4051_AnRead+0xd0>)
 80018ca:	f7ff fa3b 	bl	8000d44 <__aeabi_fmul>
 80018ce:	f7ff fb89 	bl	8000fe4 <__aeabi_f2uiz>
 80018d2:	b280      	uxth	r0, r0
}
 80018d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 80018d6:	2000      	movs	r0, #0
}
 80018d8:	4770      	bx	lr
		return 0;
 80018da:	2000      	movs	r0, #0
 80018dc:	e7fa      	b.n	80018d4 <CD74HC4051_AnRead+0xc4>
 80018de:	bf00      	nop
 80018e0:	447a0000 	.word	0x447a0000

080018e4 <ICM20602_Read>:
{
	return Read_GPIO(PA, 10);
}

void ICM20602_Read(uint8_t address, uint8_t rxData[], uint8_t size)
{
 80018e4:	b530      	push	{r4, r5, lr}
 80018e6:	b083      	sub	sp, #12
 80018e8:	460c      	mov	r4, r1
 80018ea:	4615      	mov	r5, r2
 80018ec:	f88d 0007 	strb.w	r0, [sp, #7]
	address |= 0x80;  // read operation
 80018f0:	b2c3      	uxtb	r3, r0
 80018f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018f6:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(PB, 12, LOW);
 80018fa:	2200      	movs	r2, #0
 80018fc:	210c      	movs	r1, #12
 80018fe:	2002      	movs	r0, #2
 8001900:	f000 fae4 	bl	8001ecc <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8001904:	2101      	movs	r1, #1
 8001906:	f10d 0007 	add.w	r0, sp, #7
 800190a:	f000 fb63 	bl	8001fd4 <SPI2_TX>
	SPI2_RX(rxData, size);  // receive 6 bytes data
 800190e:	4629      	mov	r1, r5
 8001910:	4620      	mov	r0, r4
 8001912:	f000 fb7d 	bl	8002010 <SPI2_RX>
	Write_GPIO(PB, 12, HIGH);
 8001916:	2201      	movs	r2, #1
 8001918:	210c      	movs	r1, #12
 800191a:	2002      	movs	r0, #2
 800191c:	f000 fad6 	bl	8001ecc <Write_GPIO>
}
 8001920:	b003      	add	sp, #12
 8001922:	bd30      	pop	{r4, r5, pc}

08001924 <ICM20602_Write>:

void ICM20602_Write(uint8_t address, uint8_t value)
{
 8001924:	b500      	push	{lr}
 8001926:	b083      	sub	sp, #12
 8001928:	f88d 0007 	strb.w	r0, [sp, #7]
 800192c:	f88d 1006 	strb.w	r1, [sp, #6]
	Write_GPIO(PB, 12, LOW);
 8001930:	2200      	movs	r2, #0
 8001932:	210c      	movs	r1, #12
 8001934:	2002      	movs	r0, #2
 8001936:	f000 fac9 	bl	8001ecc <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 800193a:	2101      	movs	r1, #1
 800193c:	f10d 0007 	add.w	r0, sp, #7
 8001940:	f000 fb48 	bl	8001fd4 <SPI2_TX>
	SPI2_TX(&value, 1);  // send value
 8001944:	2101      	movs	r1, #1
 8001946:	f10d 0006 	add.w	r0, sp, #6
 800194a:	f000 fb43 	bl	8001fd4 <SPI2_TX>
	Write_GPIO(PB, 12, HIGH);
 800194e:	2201      	movs	r2, #1
 8001950:	210c      	movs	r1, #12
 8001952:	2002      	movs	r0, #2
 8001954:	f000 faba 	bl	8001ecc <Write_GPIO>
	HAL_Delay(20);
 8001958:	2014      	movs	r0, #20
 800195a:	f001 f905 	bl	8002b68 <HAL_Delay>
}
 800195e:	b003      	add	sp, #12
 8001960:	f85d fb04 	ldr.w	pc, [sp], #4

08001964 <ICM20602_Remove_DC_Offset>:
{
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	460d      	mov	r5, r1
	int16_t offset[3] = {0,0,0};
 800196c:	2400      	movs	r4, #0
 800196e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8001972:	f8ad 400a 	strh.w	r4, [sp, #10]
 8001976:	f8ad 400c 	strh.w	r4, [sp, #12]
	for(i = 0; i < mean; i++)
 800197a:	e027      	b.n	80019cc <ICM20602_Remove_DC_Offset+0x68>
		ICM20602_Read(ICM20602_REG_GYRO_XOUT_H, rxData, 6);
 800197c:	2206      	movs	r2, #6
 800197e:	4669      	mov	r1, sp
 8001980:	2043      	movs	r0, #67	@ 0x43
 8001982:	f7ff ffaf 	bl	80018e4 <ICM20602_Read>
		offset[0] += (rxData[0] << 8) | rxData[1];
 8001986:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800198a:	f89d 1000 	ldrb.w	r1, [sp]
 800198e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001992:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001996:	4413      	add	r3, r2
 8001998:	f8ad 3008 	strh.w	r3, [sp, #8]
		offset[1] += (rxData[2] << 8) | rxData[3];
 800199c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80019a0:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80019a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80019a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019ac:	4413      	add	r3, r2
 80019ae:	f8ad 300a 	strh.w	r3, [sp, #10]
		offset[2] += (rxData[4] << 8) | rxData[5];
 80019b2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80019b6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80019ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80019be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019c2:	4413      	add	r3, r2
 80019c4:	f8ad 300c 	strh.w	r3, [sp, #12]
	for(i = 0; i < mean; i++)
 80019c8:	3401      	adds	r4, #1
 80019ca:	b264      	sxtb	r4, r4
 80019cc:	42ac      	cmp	r4, r5
 80019ce:	dbd5      	blt.n	800197c <ICM20602_Remove_DC_Offset+0x18>
	offset[0] /= mean;
 80019d0:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 80019d4:	fb97 f7f5 	sdiv	r7, r7, r5
 80019d8:	b239      	sxth	r1, r7
 80019da:	f8ad 1008 	strh.w	r1, [sp, #8]
	offset[1] /= mean;
 80019de:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 80019e2:	fb96 f6f5 	sdiv	r6, r6, r5
 80019e6:	fa0f f886 	sxth.w	r8, r6
 80019ea:	f8ad 800a 	strh.w	r8, [sp, #10]
	offset[2] /= mean;
 80019ee:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 80019f2:	fb94 f4f5 	sdiv	r4, r4, r5
 80019f6:	b225      	sxth	r5, r4
 80019f8:	f8ad 500c 	strh.w	r5, [sp, #12]
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRH, (offset[0]*-2)>>8);
 80019fc:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
 8001a00:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8001a04:	2013      	movs	r0, #19
 8001a06:	f7ff ff8d 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRL, offset[0]*-2);
 8001a0a:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
 8001a0e:	0079      	lsls	r1, r7, #1
 8001a10:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001a14:	2014      	movs	r0, #20
 8001a16:	f7ff ff85 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRH, (offset[1]*-2)>>8);
 8001a1a:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8001a1e:	f3c8 11c7 	ubfx	r1, r8, #7, #8
 8001a22:	2015      	movs	r0, #21
 8001a24:	f7ff ff7e 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRL, offset[1]*-2);
 8001a28:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
 8001a2c:	0071      	lsls	r1, r6, #1
 8001a2e:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001a32:	2016      	movs	r0, #22
 8001a34:	f7ff ff76 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRH, (offset[2]*-2)>>8);
 8001a38:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8001a3c:	f3c5 11c7 	ubfx	r1, r5, #7, #8
 8001a40:	2017      	movs	r0, #23
 8001a42:	f7ff ff6f 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRL, offset[2]*-2);
 8001a46:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 8001a4a:	0061      	lsls	r1, r4, #1
 8001a4c:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001a50:	2018      	movs	r0, #24
 8001a52:	f7ff ff67 	bl	8001924 <ICM20602_Write>
}
 8001a56:	b004      	add	sp, #16
 8001a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a5c <ICM20602_Init>:
{
 8001a5c:	b530      	push	{r4, r5, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	4604      	mov	r4, r0
	dev->gyroXRaw = 	0.0f;
 8001a62:	2500      	movs	r5, #0
 8001a64:	8005      	strh	r5, [r0, #0]
	dev->gyroYRaw = 	0.0f;
 8001a66:	8045      	strh	r5, [r0, #2]
	dev->gyroZRaw = 	0.0f;
 8001a68:	8085      	strh	r5, [r0, #4]
	dev->accXRaw = 		0.0f;
 8001a6a:	80c5      	strh	r5, [r0, #6]
	dev->accYRaw = 		0.0f;
 8001a6c:	8105      	strh	r5, [r0, #8]
	dev->accZRaw = 		0.0f;
 8001a6e:	8145      	strh	r5, [r0, #10]
	dev->temperatureC = 0.0f;
 8001a70:	2300      	movs	r3, #0
 8001a72:	6243      	str	r3, [r0, #36]	@ 0x24
	Init_GPIO(PA,  10, IN, I_PP); // Init GPIO for the interrupt
 8001a74:	2302      	movs	r3, #2
 8001a76:	462a      	mov	r2, r5
 8001a78:	210a      	movs	r1, #10
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f000 f9dc 	bl	8001e38 <Init_GPIO>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x80);
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	206b      	movs	r0, #107	@ 0x6b
 8001a84:	f7ff ff4e 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_I2C_IF, 0x40);
 8001a88:	2140      	movs	r1, #64	@ 0x40
 8001a8a:	2070      	movs	r0, #112	@ 0x70
 8001a8c:	f7ff ff4a 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x01);
 8001a90:	2101      	movs	r1, #1
 8001a92:	206b      	movs	r0, #107	@ 0x6b
 8001a94:	f7ff ff46 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_SMPLRT_DIV, 0x00);
 8001a98:	4629      	mov	r1, r5
 8001a9a:	2019      	movs	r0, #25
 8001a9c:	f7ff ff42 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_CONFIG, 0x05);
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	201a      	movs	r0, #26
 8001aa4:	f7ff ff3e 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_GYRO_CONFIG, 0x018);
 8001aa8:	2118      	movs	r1, #24
 8001aaa:	201b      	movs	r0, #27
 8001aac:	f7ff ff3a 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG, 0x18);
 8001ab0:	2118      	movs	r1, #24
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f7ff ff36 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001ab8:	2103      	movs	r1, #3
 8001aba:	201d      	movs	r0, #29
 8001abc:	f7ff ff32 	bl	8001924 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_INT_ENABLE, 0x01);
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	2038      	movs	r0, #56	@ 0x38
 8001ac4:	f7ff ff2e 	bl	8001924 <ICM20602_Write>
	ICM20602_Read(ICM20602_REG_WHO_AM_I, rxData, 1);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	a901      	add	r1, sp, #4
 8001acc:	2075      	movs	r0, #117	@ 0x75
 8001ace:	f7ff ff09 	bl	80018e4 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_I2C_IF, rxData, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	a901      	add	r1, sp, #4
 8001ad6:	2070      	movs	r0, #112	@ 0x70
 8001ad8:	f7ff ff04 	bl	80018e4 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_PWR_MGMT_1, rxData, 1);
 8001adc:	2201      	movs	r2, #1
 8001ade:	a901      	add	r1, sp, #4
 8001ae0:	206b      	movs	r0, #107	@ 0x6b
 8001ae2:	f7ff feff 	bl	80018e4 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_SMPLRT_DIV, rxData, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	a901      	add	r1, sp, #4
 8001aea:	2019      	movs	r0, #25
 8001aec:	f7ff fefa 	bl	80018e4 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_CONFIG, rxData, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	a901      	add	r1, sp, #4
 8001af4:	201a      	movs	r0, #26
 8001af6:	f7ff fef5 	bl	80018e4 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG, rxData, 1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	a901      	add	r1, sp, #4
 8001afe:	201c      	movs	r0, #28
 8001b00:	f7ff fef0 	bl	80018e4 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG2, rxData, 1);
 8001b04:	2201      	movs	r2, #1
 8001b06:	a901      	add	r1, sp, #4
 8001b08:	201d      	movs	r0, #29
 8001b0a:	f7ff feeb 	bl	80018e4 <ICM20602_Read>
	ICM20602_Remove_DC_Offset(dev,2);
 8001b0e:	2102      	movs	r1, #2
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff ff27 	bl	8001964 <ICM20602_Remove_DC_Offset>
}
 8001b16:	4628      	mov	r0, r5
 8001b18:	b003      	add	sp, #12
 8001b1a:	bd30      	pop	{r4, r5, pc}

08001b1c <L76LM33_SendCommand>:
	return 1; // OK
}

uint8_t L76LM33_SendCommand(char *command) {

    if (command == NULL) {
 8001b1c:	b150      	cbz	r0, 8001b34 <L76LM33_SendCommand+0x18>
uint8_t L76LM33_SendCommand(char *command) {
 8001b1e:	b510      	push	{r4, lr}
 8001b20:	4604      	mov	r4, r0
        return 0; // Error
    }
    USART_TX(2, (uint8_t*)command, strlen(command));
 8001b22:	f7fe fb15 	bl	8000150 <strlen>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4621      	mov	r1, r4
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f000 fb00 	bl	8002130 <USART_TX>
    return 1; // OK
 8001b30:	2001      	movs	r0, #1
}
 8001b32:	bd10      	pop	{r4, pc}
        return 0; // Error
 8001b34:	2000      	movs	r0, #0
}
 8001b36:	4770      	bx	lr

08001b38 <L76LM33_Init>:
uint8_t L76LM33_Init (void) {
 8001b38:	b530      	push	{r4, r5, lr}
 8001b3a:	b09b      	sub	sp, #108	@ 0x6c
	char PROTOCOL_SETRMS[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*35\r\n";
 8001b3c:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8001b40:	4c15      	ldr	r4, [pc, #84]	@ (8001b98 <L76LM33_Init+0x60>)
 8001b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b58:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8001b5c:	f8ac 2000 	strh.w	r2, [ip]
	char PROTOCOL_GPSSEARCHONLY[] = "$PMTK353,1,0,0,0,0*2A\r\n";
 8001b60:	ac05      	add	r4, sp, #20
 8001b62:	4d0e      	ldr	r5, [pc, #56]	@ (8001b9c <L76LM33_Init+0x64>)
 8001b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b6c:	e884 0003 	stmia.w	r4, {r0, r1}
	char PROTOCOL_NAVMODE[] = "PMTK886,2*2A\r\n";
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <L76LM33_Init+0x68>)
 8001b72:	ac01      	add	r4, sp, #4
 8001b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b76:	c407      	stmia	r4!, {r0, r1, r2}
 8001b78:	f824 3b02 	strh.w	r3, [r4], #2
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	7023      	strb	r3, [r4, #0]
	L76LM33_SendCommand(PROTOCOL_SETRMS);
 8001b80:	a80b      	add	r0, sp, #44	@ 0x2c
 8001b82:	f7ff ffcb 	bl	8001b1c <L76LM33_SendCommand>
	L76LM33_SendCommand(PROTOCOL_GPSSEARCHONLY);
 8001b86:	a805      	add	r0, sp, #20
 8001b88:	f7ff ffc8 	bl	8001b1c <L76LM33_SendCommand>
	L76LM33_SendCommand(PROTOCOL_NAVMODE);
 8001b8c:	a801      	add	r0, sp, #4
 8001b8e:	f7ff ffc5 	bl	8001b1c <L76LM33_SendCommand>
}
 8001b92:	2001      	movs	r0, #1
 8001b94:	b01b      	add	sp, #108	@ 0x6c
 8001b96:	bd30      	pop	{r4, r5, pc}
 8001b98:	08009278 	.word	0x08009278
 8001b9c:	080092b4 	.word	0x080092b4
 8001ba0:	080092cc 	.word	0x080092cc

08001ba4 <FATFS_ErrorToString>:
extern char USERPath[4];

// Dedebugging
const char* FATFS_ErrorToString(FRESULT result) {

    switch (result) {
 8001ba4:	2813      	cmp	r0, #19
 8001ba6:	d831      	bhi.n	8001c0c <FATFS_ErrorToString+0x68>
 8001ba8:	e8df f000 	tbb	[pc, r0]
 8001bac:	0e0c320a 	.word	0x0e0c320a
 8001bb0:	16141210 	.word	0x16141210
 8001bb4:	1e1c1a18 	.word	0x1e1c1a18
 8001bb8:	26242220 	.word	0x26242220
 8001bbc:	2e2c2a28 	.word	0x2e2c2a28
 8001bc0:	4814      	ldr	r0, [pc, #80]	@ (8001c14 <FATFS_ErrorToString+0x70>)
 8001bc2:	4770      	bx	lr
        case FR_OK: return "Succeeded";
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer";
        case FR_INT_ERR: return "Assertion failed";
 8001bc4:	4814      	ldr	r0, [pc, #80]	@ (8001c18 <FATFS_ErrorToString+0x74>)
 8001bc6:	4770      	bx	lr
        case FR_NOT_READY: return "The physical drive cannot work";
 8001bc8:	4814      	ldr	r0, [pc, #80]	@ (8001c1c <FATFS_ErrorToString+0x78>)
 8001bca:	4770      	bx	lr
        case FR_NO_FILE: return "Could not find the file";
 8001bcc:	4814      	ldr	r0, [pc, #80]	@ (8001c20 <FATFS_ErrorToString+0x7c>)
 8001bce:	4770      	bx	lr
        case FR_NO_PATH: return "Could not find the path";
 8001bd0:	4814      	ldr	r0, [pc, #80]	@ (8001c24 <FATFS_ErrorToString+0x80>)
 8001bd2:	4770      	bx	lr
        case FR_INVALID_NAME: return "The path name format is invalid";
 8001bd4:	4814      	ldr	r0, [pc, #80]	@ (8001c28 <FATFS_ErrorToString+0x84>)
 8001bd6:	4770      	bx	lr
        case FR_DENIED: return "Access denied due to prohibited access or directory full";
 8001bd8:	4814      	ldr	r0, [pc, #80]	@ (8001c2c <FATFS_ErrorToString+0x88>)
 8001bda:	4770      	bx	lr
        case FR_EXIST: return "Access denied due to prohibited access";
 8001bdc:	4814      	ldr	r0, [pc, #80]	@ (8001c30 <FATFS_ErrorToString+0x8c>)
 8001bde:	4770      	bx	lr
        case FR_INVALID_OBJECT: return "The file/directory object is invalid";
 8001be0:	4814      	ldr	r0, [pc, #80]	@ (8001c34 <FATFS_ErrorToString+0x90>)
 8001be2:	4770      	bx	lr
        case FR_WRITE_PROTECTED: return "The physical drive is write protected";
 8001be4:	4814      	ldr	r0, [pc, #80]	@ (8001c38 <FATFS_ErrorToString+0x94>)
 8001be6:	4770      	bx	lr
        case FR_INVALID_DRIVE: return "The logical drive number is invalid";
 8001be8:	4814      	ldr	r0, [pc, #80]	@ (8001c3c <FATFS_ErrorToString+0x98>)
 8001bea:	4770      	bx	lr
        case FR_NOT_ENABLED: return "The volume has no work area";
 8001bec:	4814      	ldr	r0, [pc, #80]	@ (8001c40 <FATFS_ErrorToString+0x9c>)
 8001bee:	4770      	bx	lr
        case FR_NO_FILESYSTEM: return "There is no valid FAT volume";
 8001bf0:	4814      	ldr	r0, [pc, #80]	@ (8001c44 <FATFS_ErrorToString+0xa0>)
 8001bf2:	4770      	bx	lr
        case FR_MKFS_ABORTED: return "The f_mkfs() aborted due to any parameter error";
 8001bf4:	4814      	ldr	r0, [pc, #80]	@ (8001c48 <FATFS_ErrorToString+0xa4>)
 8001bf6:	4770      	bx	lr
        case FR_TIMEOUT: return "Could not get a grant to access the volume within defined period";
 8001bf8:	4814      	ldr	r0, [pc, #80]	@ (8001c4c <FATFS_ErrorToString+0xa8>)
 8001bfa:	4770      	bx	lr
        case FR_LOCKED: return "The operation is rejected according to the file sharing policy";
 8001bfc:	4814      	ldr	r0, [pc, #80]	@ (8001c50 <FATFS_ErrorToString+0xac>)
 8001bfe:	4770      	bx	lr
        case FR_NOT_ENOUGH_CORE: return "LFN working buffer could not be allocated";
 8001c00:	4814      	ldr	r0, [pc, #80]	@ (8001c54 <FATFS_ErrorToString+0xb0>)
 8001c02:	4770      	bx	lr
        case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_SHARE";
 8001c04:	4814      	ldr	r0, [pc, #80]	@ (8001c58 <FATFS_ErrorToString+0xb4>)
 8001c06:	4770      	bx	lr
        case FR_INVALID_PARAMETER: return "Given parameter is invalid";
 8001c08:	4814      	ldr	r0, [pc, #80]	@ (8001c5c <FATFS_ErrorToString+0xb8>)
 8001c0a:	4770      	bx	lr
        default: return "Unknown error";
 8001c0c:	4814      	ldr	r0, [pc, #80]	@ (8001c60 <FATFS_ErrorToString+0xbc>)
 8001c0e:	4770      	bx	lr
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer";
 8001c10:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <FATFS_ErrorToString+0xc0>)
    }
}
 8001c12:	4770      	bx	lr
 8001c14:	080092dc 	.word	0x080092dc
 8001c18:	08009320 	.word	0x08009320
 8001c1c:	08009334 	.word	0x08009334
 8001c20:	08009354 	.word	0x08009354
 8001c24:	0800936c 	.word	0x0800936c
 8001c28:	08009384 	.word	0x08009384
 8001c2c:	080093a4 	.word	0x080093a4
 8001c30:	080093e0 	.word	0x080093e0
 8001c34:	08009408 	.word	0x08009408
 8001c38:	08009430 	.word	0x08009430
 8001c3c:	08009458 	.word	0x08009458
 8001c40:	0800947c 	.word	0x0800947c
 8001c44:	08009498 	.word	0x08009498
 8001c48:	080094b8 	.word	0x080094b8
 8001c4c:	080094e8 	.word	0x080094e8
 8001c50:	0800952c 	.word	0x0800952c
 8001c54:	0800956c 	.word	0x0800956c
 8001c58:	08009598 	.word	0x08009598
 8001c5c:	080095bc 	.word	0x080095bc
 8001c60:	080095d8 	.word	0x080095d8
 8001c64:	080092e8 	.word	0x080092e8

08001c68 <MEM2067_SDCardDetection>:

    f_close(&file);
    return 1; // OK
}

uint8_t MEM2067_SDCardDetection(void) {
 8001c68:	b510      	push	{r4, lr}

	memset(&USERFatFS, 0, sizeof(USERFatFS));
 8001c6a:	4c12      	ldr	r4, [pc, #72]	@ (8001cb4 <MEM2067_SDCardDetection+0x4c>)
 8001c6c:	f241 0230 	movw	r2, #4144	@ 0x1030
 8001c70:	2100      	movs	r1, #0
 8001c72:	4620      	mov	r0, r4
 8001c74:	f005 fd14 	bl	80076a0 <memset>
	memset(USERPath, 0, sizeof(USERPath));
 8001c78:	490f      	ldr	r1, [pc, #60]	@ (8001cb8 <MEM2067_SDCardDetection+0x50>)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	600b      	str	r3, [r1, #0]

    FRESULT res = f_mount(&USERFatFS, USERPath, 1);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4620      	mov	r0, r4
 8001c82:	f004 fd4d 	bl	8006720 <f_mount>
    if (res == FR_OK) {
 8001c86:	b940      	cbnz	r0, 8001c9a <MEM2067_SDCardDetection+0x32>
        f_mount(NULL, USERPath, 1);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	490b      	ldr	r1, [pc, #44]	@ (8001cb8 <MEM2067_SDCardDetection+0x50>)
 8001c8c:	f004 fd48 	bl	8006720 <f_mount>
        printf(" -> SD card detected\r\n");
 8001c90:	480a      	ldr	r0, [pc, #40]	@ (8001cbc <MEM2067_SDCardDetection+0x54>)
 8001c92:	f005 fc25 	bl	80074e0 <puts>
        return 1; // OK
 8001c96:	2001      	movs	r0, #1
    } else {
        printf(" -> No SD card detected\r\n");
        printf(" -> SD card error, result: %s\n", FATFS_ErrorToString(res));
        return 0;
    }
}
 8001c98:	bd10      	pop	{r4, pc}
 8001c9a:	4604      	mov	r4, r0
        printf(" -> No SD card detected\r\n");
 8001c9c:	4808      	ldr	r0, [pc, #32]	@ (8001cc0 <MEM2067_SDCardDetection+0x58>)
 8001c9e:	f005 fc1f 	bl	80074e0 <puts>
        printf(" -> SD card error, result: %s\n", FATFS_ErrorToString(res));
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff ff7e 	bl	8001ba4 <FATFS_ErrorToString>
 8001ca8:	4601      	mov	r1, r0
 8001caa:	4806      	ldr	r0, [pc, #24]	@ (8001cc4 <MEM2067_SDCardDetection+0x5c>)
 8001cac:	f005 fbb0 	bl	8007410 <iprintf>
        return 0;
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	e7f1      	b.n	8001c98 <MEM2067_SDCardDetection+0x30>
 8001cb4:	20000470 	.word	0x20000470
 8001cb8:	2000046c 	.word	0x2000046c
 8001cbc:	080095e8 	.word	0x080095e8
 8001cc0:	08009600 	.word	0x08009600
 8001cc4:	0800961c 	.word	0x0800961c

08001cc8 <Pyro_Init>:
 *      Author: gagno
 */

#include "GAUL_Drivers/Pyros.h"

void Pyro_Init(void) {
 8001cc8:	b508      	push	{r3, lr}
	// Pyros
	Init_GPIO(PB, 4, OUT2, O_GP_PP); // PyroON0
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2202      	movs	r2, #2
 8001cce:	2104      	movs	r1, #4
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f000 f8b1 	bl	8001e38 <Init_GPIO>
	Init_GPIO(PB, 5, OUT2, O_GP_PP); // PyroON1
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2202      	movs	r2, #2
 8001cda:	2105      	movs	r1, #5
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f000 f8ab 	bl	8001e38 <Init_GPIO>
	Init_GPIO(PA, 15, OUT2, O_GP_PP); // Pyro_Test~
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f000 f8a5 	bl	8001e38 <Init_GPIO>
	// Set Pyro_Test~ (inverse) et Pyros_ON LOW
	Write_GPIO(PA, 15, HIGH);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 f8ea 	bl	8001ecc <Write_GPIO>
	Write_GPIO(PB, 4, LOW);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f000 f8e5 	bl	8001ecc <Write_GPIO>
	Write_GPIO(PB, 5, LOW);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	2002      	movs	r0, #2
 8001d08:	f000 f8e0 	bl	8001ecc <Write_GPIO>
}
 8001d0c:	bd08      	pop	{r3, pc}
	...

08001d10 <ws2812_timer2_init>:
static uint16_t ws2812_gpio_set_bits = 0;
static uint16_t dma_buffer[DMA_BUFFER_SIZE];


static void ws2812_timer2_init(void)
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	b08e      	sub	sp, #56	@ 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d14:	2400      	movs	r4, #0
 8001d16:	940a      	str	r4, [sp, #40]	@ 0x28
 8001d18:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001d1a:	940c      	str	r4, [sp, #48]	@ 0x30
 8001d1c:	940d      	str	r4, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	9408      	str	r4, [sp, #32]
 8001d20:	9409      	str	r4, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	9401      	str	r4, [sp, #4]
 8001d24:	9402      	str	r4, [sp, #8]
 8001d26:	9403      	str	r4, [sp, #12]
 8001d28:	9404      	str	r4, [sp, #16]
 8001d2a:	9405      	str	r4, [sp, #20]
 8001d2c:	9406      	str	r4, [sp, #24]
 8001d2e:	9407      	str	r4, [sp, #28]

    htimer2.Instance = TIM2;
 8001d30:	4d1a      	ldr	r5, [pc, #104]	@ (8001d9c <ws2812_timer2_init+0x8c>)
 8001d32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d36:	602b      	str	r3, [r5, #0]
    htimer2.Init.Prescaler = 0;
 8001d38:	606c      	str	r4, [r5, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	60ac      	str	r4, [r5, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8001d3c:	235a      	movs	r3, #90	@ 0x5a
 8001d3e:	60eb      	str	r3, [r5, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	612c      	str	r4, [r5, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htimer2);
 8001d44:	4628      	mov	r0, r5
 8001d46:	f002 fd17 	bl	8004778 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4e:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8001d50:	a90a      	add	r1, sp, #40	@ 0x28
 8001d52:	4628      	mov	r0, r5
 8001d54:	f002 fe7a 	bl	8004a4c <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f002 fd5c 	bl	8004816 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5e:	9408      	str	r4, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d60:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8001d62:	a908      	add	r1, sp, #32
 8001d64:	4628      	mov	r0, r5
 8001d66:	f003 f9b9 	bl	80050dc <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6a:	2660      	movs	r6, #96	@ 0x60
 8001d6c:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8001d6e:	231c      	movs	r3, #28
 8001d70:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d72:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d74:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001d76:	4622      	mov	r2, r4
 8001d78:	a901      	add	r1, sp, #4
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f002 fda4 	bl	80048c8 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d80:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8001d82:	2339      	movs	r3, #57	@ 0x39
 8001d84:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d86:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d88:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	eb0d 0102 	add.w	r1, sp, r2
 8001d90:	4628      	mov	r0, r5
 8001d92:	f002 fd99 	bl	80048c8 <HAL_TIM_PWM_ConfigChannel>
}
 8001d96:	b00e      	add	sp, #56	@ 0x38
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000204 	.word	0x20000204

08001da0 <WS2812_Init>:
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
}

void WS2812_Init()
{
 8001da0:	b500      	push	{lr}
 8001da2:	b083      	sub	sp, #12
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001da4:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <WS2812_Init+0x40>)
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	9b01      	ldr	r3, [sp, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	4611      	mov	r1, r2
 8001dbc:	200c      	movs	r0, #12
 8001dbe:	f001 fcd4 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f001 fccf 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4611      	mov	r1, r2
 8001dd0:	2011      	movs	r0, #17
 8001dd2:	f001 fcca 	bl	800376a <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001dd6:	f7ff ff9b 	bl	8001d10 <ws2812_timer2_init>
}
 8001dda:	b003      	add	sp, #12
 8001ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001de0:	40021000 	.word	0x40021000

08001de4 <ADC_Start>:


#include "GAUL_Drivers/Low_Level_Drivers/ADC_driver.h"


uint8_t ADC_Start(ADC_HandleTypeDef *hadc) {
 8001de4:	b508      	push	{r3, lr}

	HAL_ADC_Start(hadc);
 8001de6:	f000 ffbb 	bl	8002d60 <HAL_ADC_Start>

	return 0;
}
 8001dea:	2000      	movs	r0, #0
 8001dec:	bd08      	pop	{r3, pc}

08001dee <ADC_Calibration>:

uint8_t ADC_Calibration(ADC_HandleTypeDef *hadc) {
 8001dee:	b508      	push	{r3, lr}

	HAL_ADCEx_Calibration_Start(hadc);
 8001df0:	f001 fb36 	bl	8003460 <HAL_ADCEx_Calibration_Start>

	return 0;
}
 8001df4:	2000      	movs	r0, #0
 8001df6:	bd08      	pop	{r3, pc}

08001df8 <ADC_Stop>:

uint8_t ADC_Stop(ADC_HandleTypeDef *hadc) {
 8001df8:	b508      	push	{r3, lr}

	HAL_ADC_Stop(hadc);
 8001dfa:	f001 f85f 	bl	8002ebc <HAL_ADC_Stop>

	return 0;
}
 8001dfe:	2000      	movs	r0, #0
 8001e00:	bd08      	pop	{r3, pc}
	...

08001e04 <ADC_Sampling>:

uint32_t ADC_Sampling (ADC_HandleTypeDef *hadc) {
 8001e04:	b538      	push	{r3, r4, r5, lr}

	if (!(ADC1->CR2 & ADC_CR2_ADON)) {
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <ADC_Sampling+0x30>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f013 0f01 	tst.w	r3, #1
 8001e0e:	d00d      	beq.n	8001e2c <ADC_Sampling+0x28>
 8001e10:	4604      	mov	r4, r0
		return 0xFFFF;
	}
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY); // Timeout peut etre ajuste
 8001e12:	f04f 31ff 	mov.w	r1, #4294967295
 8001e16:	f001 f87d 	bl	8002f14 <HAL_ADC_PollForConversion>
	uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f001 f980 	bl	8003120 <HAL_ADC_GetValue>
 8001e20:	4605      	mov	r5, r0
	HAL_ADC_Stop(hadc);
 8001e22:	4620      	mov	r0, r4
 8001e24:	f001 f84a 	bl	8002ebc <HAL_ADC_Stop>

	return adc_value;
}
 8001e28:	4628      	mov	r0, r5
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFFFF;
 8001e2c:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8001e30:	e7fa      	b.n	8001e28 <ADC_Sampling+0x24>
 8001e32:	bf00      	nop
 8001e34:	40012400 	.word	0x40012400

08001e38 <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8001e38:	b510      	push	{r4, lr}
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 unsigned short offset = 0x00;

	if(pin > 7)
 8001e3a:	2907      	cmp	r1, #7
 8001e3c:	d904      	bls.n	8001e48 <Init_GPIO+0x10>
		{
			tPIN -= 8;
 8001e3e:	3908      	subs	r1, #8
 8001e40:	b289      	uxth	r1, r1
			offset = 0x01;
 8001e42:	f04f 0e01 	mov.w	lr, #1
 8001e46:	e001      	b.n	8001e4c <Init_GPIO+0x14>
 unsigned short offset = 0x00;
 8001e48:	f04f 0e00 	mov.w	lr, #0
		}

	if(port == 1)
 8001e4c:	2801      	cmp	r0, #1
 8001e4e:	d00f      	beq.n	8001e70 <Init_GPIO+0x38>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8001e50:	2802      	cmp	r0, #2
 8001e52:	d02d      	beq.n	8001eb0 <Init_GPIO+0x78>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001e54:	2803      	cmp	r0, #3
 8001e56:	d116      	bne.n	8001e86 <Init_GPIO+0x4e>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 8001e58:	4c1b      	ldr	r4, [pc, #108]	@ (8001ec8 <Init_GPIO+0x90>)
 8001e5a:	69a0      	ldr	r0, [r4, #24]
 8001e5c:	f040 0010 	orr.w	r0, r0, #16
 8001e60:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 8001e62:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001e66:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001e6a:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 8001e6e:	e00a      	b.n	8001e86 <Init_GPIO+0x4e>
			RCC_APB2ENR |= 4; //// Enabling PORT A
 8001e70:	4c15      	ldr	r4, [pc, #84]	@ (8001ec8 <Init_GPIO+0x90>)
 8001e72:	69a0      	ldr	r0, [r4, #24]
 8001e74:	f040 0004 	orr.w	r0, r0, #4
 8001e78:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 8001e7a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001e7e:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001e82:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 8001e86:	f8dc 0000 	ldr.w	r0, [ip]
 8001e8a:	0089      	lsls	r1, r1, #2
 8001e8c:	f04f 0e0f 	mov.w	lr, #15
 8001e90:	fa0e fe01 	lsl.w	lr, lr, r1
 8001e94:	ea20 000e 	bic.w	r0, r0, lr
 8001e98:	f8cc 0000 	str.w	r0, [ip]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8001e9c:	f8dc 0000 	ldr.w	r0, [ip]
 8001ea0:	408a      	lsls	r2, r1
 8001ea2:	3102      	adds	r1, #2
 8001ea4:	408b      	lsls	r3, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	4302      	orrs	r2, r0
 8001eaa:	f8cc 2000 	str.w	r2, [ip]
}
 8001eae:	bd10      	pop	{r4, pc}
			RCC_APB2ENR |= 8; //// Enabling PORT A
 8001eb0:	4c05      	ldr	r4, [pc, #20]	@ (8001ec8 <Init_GPIO+0x90>)
 8001eb2:	69a0      	ldr	r0, [r4, #24]
 8001eb4:	f040 0008 	orr.w	r0, r0, #8
 8001eb8:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 8001eba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ebe:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001ec2:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 8001ec6:	e7de      	b.n	8001e86 <Init_GPIO+0x4e>
 8001ec8:	40021000 	.word	0x40021000

08001ecc <Write_GPIO>:
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
 8001ecc:	2801      	cmp	r0, #1
 8001ece:	d005      	beq.n	8001edc <Write_GPIO+0x10>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8001ed0:	2802      	cmp	r0, #2
 8001ed2:	d00a      	beq.n	8001eea <Write_GPIO+0x1e>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001ed4:	2803      	cmp	r0, #3
 8001ed6:	d102      	bne.n	8001ede <Write_GPIO+0x12>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <Write_GPIO+0x34>)
 8001eda:	e000      	b.n	8001ede <Write_GPIO+0x12>
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <Write_GPIO+0x38>)
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8001ede:	b132      	cbz	r2, 8001eee <Write_GPIO+0x22>
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	408a      	lsls	r2, r1
 8001ee4:	4302      	orrs	r2, r0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4770      	bx	lr
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <Write_GPIO+0x3c>)
 8001eec:	e7f7      	b.n	8001ede <Write_GPIO+0x12>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f101 	lsl.w	r1, r0, r1
 8001ef6:	ea22 0201 	bic.w	r2, r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	4001100c 	.word	0x4001100c
 8001f04:	4001080c 	.word	0x4001080c
 8001f08:	40010c0c 	.word	0x40010c0c

08001f0c <SPI_Init>:

#include "main.h"
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"
#include "GAUL_Drivers/Low_Level_Drivers/SPI_driver.h"

void SPI_Init(unsigned short spi) {
 8001f0c:	b508      	push	{r3, lr}
    if(spi == 1) {
 8001f0e:	2801      	cmp	r0, #1
 8001f10:	d002      	beq.n	8001f18 <SPI_Init+0xc>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1

        Write_GPIO(PA, 4, HIGH);

        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    } else if(spi == 2) {
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d026      	beq.n	8001f64 <SPI_Init+0x58>
        Write_GPIO(PA, 8, HIGH);
        Write_GPIO(PB, 12, HIGH);

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}
 8001f16:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001f18:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc8 <SPI_Init+0xbc>)
 8001f1a:	6993      	ldr	r3, [r2, #24]
 8001f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f20:	6193      	str	r3, [r2, #24]
        Init_GPIO(PA, 4, OUT50, O_GP_PP); // CS
 8001f22:	2300      	movs	r3, #0
 8001f24:	2203      	movs	r2, #3
 8001f26:	2104      	movs	r1, #4
 8001f28:	f7ff ff86 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PA, 5, OUT50, O_AF_PP); // CLK
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	2203      	movs	r2, #3
 8001f30:	2105      	movs	r1, #5
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7ff ff80 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PA, 6, IN, I_PP);    // MISO SPI1
 8001f38:	2302      	movs	r3, #2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2106      	movs	r1, #6
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff ff7a 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1
 8001f44:	2302      	movs	r3, #2
 8001f46:	2203      	movs	r2, #3
 8001f48:	2107      	movs	r1, #7
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff ff74 	bl	8001e38 <Init_GPIO>
        Write_GPIO(PA, 4, HIGH);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2104      	movs	r1, #4
 8001f54:	4610      	mov	r0, r2
 8001f56:	f7ff ffb9 	bl	8001ecc <Write_GPIO>
        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <SPI_Init+0xc0>)
 8001f5c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e7d8      	b.n	8001f16 <SPI_Init+0xa>
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001f64:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <SPI_Init+0xbc>)
 8001f66:	69d3      	ldr	r3, [r2, #28]
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6c:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 8, OUT50, O_GP_PP); // CS (optionnel)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2203      	movs	r2, #3
 8001f72:	2108      	movs	r1, #8
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7ff ff5f 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PB, 12, OUT50, O_GP_PP); // CS
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	210c      	movs	r1, #12
 8001f80:	2002      	movs	r0, #2
 8001f82:	f7ff ff59 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PB, 13, OUT50, O_AF_PP); // CLK
 8001f86:	2302      	movs	r3, #2
 8001f88:	2203      	movs	r2, #3
 8001f8a:	210d      	movs	r1, #13
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff53 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
 8001f92:	2302      	movs	r3, #2
 8001f94:	2200      	movs	r2, #0
 8001f96:	210e      	movs	r1, #14
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff4d 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff47 	bl	8001e38 <Init_GPIO>
        Write_GPIO(PA, 8, HIGH);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2108      	movs	r1, #8
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f7ff ff8c 	bl	8001ecc <Write_GPIO>
        Write_GPIO(PB, 12, HIGH);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	210c      	movs	r1, #12
 8001fb8:	2002      	movs	r0, #2
 8001fba:	f7ff ff87 	bl	8001ecc <Write_GPIO>
        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 8001fbe:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <SPI_Init+0xc4>)
 8001fc0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	e7a6      	b.n	8001f16 <SPI_Init+0xa>
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40013000 	.word	0x40013000
 8001fd0:	40003800 	.word	0x40003800

08001fd4 <SPI2_TX>:

    uint8_t temp = SPI1->DR;
    temp = SPI1->SR;
}

void SPI2_TX(uint8_t *data, int size) {
 8001fd4:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	e008      	b.n	8001fec <SPI2_TX+0x18>
        while (!(SPI2->SR & SPI_SR_TXE)) {}
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <SPI2_TX+0x38>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f013 0f02 	tst.w	r3, #2
 8001fe2:	d0fa      	beq.n	8001fda <SPI2_TX+0x6>
        SPI2->DR = data[i];
 8001fe4:	5c81      	ldrb	r1, [r0, r2]
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <SPI2_TX+0x38>)
 8001fe8:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 8001fea:	3201      	adds	r2, #1
 8001fec:	4562      	cmp	r2, ip
 8001fee:	dbf4      	blt.n	8001fda <SPI2_TX+0x6>
    }

    while (!(SPI2->SR & SPI_SR_TXE)) {}
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <SPI2_TX+0x38>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f013 0f02 	tst.w	r3, #2
 8001ff8:	d0fa      	beq.n	8001ff0 <SPI2_TX+0x1c>
    while (SPI2->SR & SPI_SR_BSY) {}
 8001ffa:	4b04      	ldr	r3, [pc, #16]	@ (800200c <SPI2_TX+0x38>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002002:	d1fa      	bne.n	8001ffa <SPI2_TX+0x26>

    uint8_t temp = SPI2->DR;
 8002004:	4b01      	ldr	r3, [pc, #4]	@ (800200c <SPI2_TX+0x38>)
 8002006:	68da      	ldr	r2, [r3, #12]
    temp = SPI2->SR;
 8002008:	689b      	ldr	r3, [r3, #8]
}
 800200a:	4770      	bx	lr
 800200c:	40003800 	.word	0x40003800

08002010 <SPI2_RX>:
    }
}

void SPI2_RX(uint8_t *data, int size) {

    while (size) {
 8002010:	e011      	b.n	8002036 <SPI2_RX+0x26>
        while (SPI2->SR & SPI_SR_BSY) {}
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <SPI2_RX+0x2c>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800201a:	d1fa      	bne.n	8002012 <SPI2_RX+0x2>
        SPI2->DR = 0;
 800201c:	4b07      	ldr	r3, [pc, #28]	@ (800203c <SPI2_RX+0x2c>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
        while (!(SPI2->SR & SPI_SR_RXNE)) {}
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <SPI2_RX+0x2c>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f013 0f01 	tst.w	r3, #1
 800202a:	d0fa      	beq.n	8002022 <SPI2_RX+0x12>
        *data++ = SPI2->DR;
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <SPI2_RX+0x2c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 8002034:	3901      	subs	r1, #1
    while (size) {
 8002036:	2900      	cmp	r1, #0
 8002038:	d1eb      	bne.n	8002012 <SPI2_RX+0x2>
    }
}
 800203a:	4770      	bx	lr
 800203c:	40003800 	.word	0x40003800

08002040 <USART_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/USART_driver.h"
#include "main.h"


void USART_Init(unsigned short usart)
{
 8002040:	b508      	push	{r3, lr}
    if(usart == 1) {
 8002042:	2801      	cmp	r0, #1
 8002044:	d004      	beq.n	8002050 <USART_Init+0x10>
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART1
        NVIC_EnableIRQ(USART1_IRQn);
    }
    else if(usart == 2) {
 8002046:	2802      	cmp	r0, #2
 8002048:	d024      	beq.n	8002094 <USART_Init+0x54>
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART2
        NVIC_EnableIRQ(USART2_IRQn);
    }
    else if(usart == 3) {
 800204a:	2803      	cmp	r0, #3
 800204c:	d044      	beq.n	80020d8 <USART_Init+0x98>
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART3
        NVIC_EnableIRQ(USART3_IRQn);
    }
}
 800204e:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002050:	4a32      	ldr	r2, [pc, #200]	@ (800211c <USART_Init+0xdc>)
 8002052:	6993      	ldr	r3, [r2, #24]
 8002054:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002058:	6193      	str	r3, [r2, #24]
        Init_GPIO(PB, 6, OUT50, O_AF_PP); // TX
 800205a:	2302      	movs	r3, #2
 800205c:	2203      	movs	r2, #3
 800205e:	2106      	movs	r1, #6
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fee9 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PB, 7, IN, I_PP); // RX
 8002066:	2302      	movs	r3, #2
 8002068:	2200      	movs	r2, #0
 800206a:	2107      	movs	r1, #7
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fee3 	bl	8001e38 <Init_GPIO>
        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
 8002072:	4b2b      	ldr	r3, [pc, #172]	@ (8002120 <USART_Init+0xe0>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800207a:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	f042 0204 	orr.w	r2, r2, #4
 800208a:	60da      	str	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <USART_Init+0xe4>)
 800208e:	2220      	movs	r2, #32
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	e7dc      	b.n	800204e <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002094:	4a21      	ldr	r2, [pc, #132]	@ (800211c <USART_Init+0xdc>)
 8002096:	69d3      	ldr	r3, [r2, #28]
 8002098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209c:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 2, OUT50, O_AF_PP); // TX
 800209e:	2302      	movs	r3, #2
 80020a0:	2203      	movs	r2, #3
 80020a2:	4619      	mov	r1, r3
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7ff fec7 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PA, 3, IN, I_PP); // RX
 80020aa:	2302      	movs	r3, #2
 80020ac:	2200      	movs	r2, #0
 80020ae:	2103      	movs	r1, #3
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7ff fec1 	bl	8001e38 <Init_GPIO>
        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <USART_Init+0xe8>)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020be:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	f042 0208 	orr.w	r2, r2, #8
 80020c6:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	f042 0204 	orr.w	r2, r2, #4
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <USART_Init+0xe4>)
 80020d2:	2240      	movs	r2, #64	@ 0x40
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e7ba      	b.n	800204e <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART3EN ;
 80020d8:	4a10      	ldr	r2, [pc, #64]	@ (800211c <USART_Init+0xdc>)
 80020da:	69d3      	ldr	r3, [r2, #28]
 80020dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e0:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 10, OUT50, O_AF_PP); // TX
 80020e2:	2302      	movs	r3, #2
 80020e4:	2203      	movs	r2, #3
 80020e6:	210a      	movs	r1, #10
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fea5 	bl	8001e38 <Init_GPIO>
        Init_GPIO(PB, 11, IN, I_PP); // RX
 80020ee:	2302      	movs	r3, #2
 80020f0:	2200      	movs	r2, #0
 80020f2:	210b      	movs	r1, #11
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fe9f 	bl	8001e38 <Init_GPIO>
        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
 80020fa:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <USART_Init+0xec>)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002102:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	f042 0208 	orr.w	r2, r2, #8
 800210a:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	f042 0204 	orr.w	r2, r2, #4
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <USART_Init+0xe4>)
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	605a      	str	r2, [r3, #4]
}
 800211a:	e798      	b.n	800204e <USART_Init+0xe>
 800211c:	40021000 	.word	0x40021000
 8002120:	40013800 	.word	0x40013800
 8002124:	e000e100 	.word	0xe000e100
 8002128:	40004400 	.word	0x40004400
 800212c:	40004800 	.word	0x40004800

08002130 <USART_TX>:

void USART_TX(unsigned short usart, const uint8_t *data, int size) {
 8002130:	b410      	push	{r4}

    if (usart == 1) {
 8002132:	2801      	cmp	r0, #1
 8002134:	d027      	beq.n	8002186 <USART_TX+0x56>
        for (int i = 0; i < size; i++) {
            while (!(USART1->SR & USART_SR_TXE));
            USART1->DR = data[i];
            while (!(USART1->SR & USART_SR_TC));
        }
    } else if (usart == 2) {
 8002136:	2802      	cmp	r0, #2
 8002138:	d038      	beq.n	80021ac <USART_TX+0x7c>
        for (int i = 0; i < size; i++) {
            while (!(USART2->SR & USART_SR_TXE));
            USART2->DR = data[i];
            while (!(USART2->SR & USART_SR_TC));
        }
    } else if (usart == 3) {
 800213a:	2803      	cmp	r0, #3
 800213c:	d121      	bne.n	8002182 <USART_TX+0x52>
        for (int i = 0; i < size; i++) {
 800213e:	2000      	movs	r0, #0
 8002140:	4290      	cmp	r0, r2
 8002142:	da1e      	bge.n	8002182 <USART_TX+0x52>
            while (!(USART3->SR & USART_SR_TXE));
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <USART_TX+0x80>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800214c:	d0fa      	beq.n	8002144 <USART_TX+0x14>
            USART3->DR = data[i];
 800214e:	5c0c      	ldrb	r4, [r1, r0]
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <USART_TX+0x80>)
 8002152:	605c      	str	r4, [r3, #4]
            while (!(USART3->SR & USART_SR_TC));
 8002154:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <USART_TX+0x80>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800215c:	d0fa      	beq.n	8002154 <USART_TX+0x24>
        for (int i = 0; i < size; i++) {
 800215e:	3001      	adds	r0, #1
 8002160:	e7ee      	b.n	8002140 <USART_TX+0x10>
            while (!(USART1->SR & USART_SR_TXE));
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <USART_TX+0x84>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800216a:	d0fa      	beq.n	8002162 <USART_TX+0x32>
            USART1->DR = data[i];
 800216c:	5c0c      	ldrb	r4, [r1, r0]
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <USART_TX+0x84>)
 8002170:	605c      	str	r4, [r3, #4]
            while (!(USART1->SR & USART_SR_TC));
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <USART_TX+0x84>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800217a:	d0fa      	beq.n	8002172 <USART_TX+0x42>
        for (int i = 0; i < size; i++) {
 800217c:	3001      	adds	r0, #1
 800217e:	4290      	cmp	r0, r2
 8002180:	dbef      	blt.n	8002162 <USART_TX+0x32>
        }
    }
}
 8002182:	bc10      	pop	{r4}
 8002184:	4770      	bx	lr
        for (int i = 0; i < size; i++) {
 8002186:	2000      	movs	r0, #0
 8002188:	e7f9      	b.n	800217e <USART_TX+0x4e>
            while (!(USART2->SR & USART_SR_TXE));
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <USART_TX+0x88>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002192:	d0fa      	beq.n	800218a <USART_TX+0x5a>
            USART2->DR = data[i];
 8002194:	5c0c      	ldrb	r4, [r1, r0]
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <USART_TX+0x88>)
 8002198:	605c      	str	r4, [r3, #4]
            while (!(USART2->SR & USART_SR_TC));
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <USART_TX+0x88>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80021a2:	d0fa      	beq.n	800219a <USART_TX+0x6a>
        for (int i = 0; i < size; i++) {
 80021a4:	3001      	adds	r0, #1
 80021a6:	4290      	cmp	r0, r2
 80021a8:	dbef      	blt.n	800218a <USART_TX+0x5a>
 80021aa:	e7ea      	b.n	8002182 <USART_TX+0x52>
 80021ac:	2000      	movs	r0, #0
 80021ae:	e7fa      	b.n	80021a6 <USART_TX+0x76>
 80021b0:	40004800 	.word	0x40004800
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40004400 	.word	0x40004400

080021bc <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80021bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80021c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80021c4:	f013 0f01 	tst.w	r3, #1
 80021c8:	d011      	beq.n	80021ee <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80021ca:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80021ce:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80021d2:	f013 0f01 	tst.w	r3, #1
 80021d6:	d101      	bne.n	80021dc <ITM_SendChar+0x20>
 80021d8:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80021da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80021dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f9      	beq.n	80021da <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80021e6:	b2c3      	uxtb	r3, r0
 80021e8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80021ec:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 80021ee:	4770      	bx	lr

080021f0 <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	460c      	mov	r4, r1
 80021f4:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	2500      	movs	r5, #0
 80021f8:	e004      	b.n	8002204 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 80021fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80021fe:	f7ff ffdd 	bl	80021bc <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	3501      	adds	r5, #1
 8002204:	42b5      	cmp	r5, r6
 8002206:	dbf8      	blt.n	80021fa <_write+0xa>
	}
	return len;
}
 8002208:	4630      	mov	r0, r6
 800220a:	bd70      	pop	{r4, r5, r6, pc}

0800220c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800220c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800220e:	e7fe      	b.n	800220e <Error_Handler+0x2>

08002210 <MX_USART1_UART_Init>:
{
 8002210:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002212:	480a      	ldr	r0, [pc, #40]	@ (800223c <MX_USART1_UART_Init+0x2c>)
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <MX_USART1_UART_Init+0x30>)
 8002216:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002218:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800221c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	2300      	movs	r3, #0
 8002220:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002222:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002224:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002226:	220c      	movs	r2, #12
 8002228:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800222e:	f002 ffb3 	bl	8005198 <HAL_UART_Init>
 8002232:	b900      	cbnz	r0, 8002236 <MX_USART1_UART_Init+0x26>
}
 8002234:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002236:	f7ff ffe9 	bl	800220c <Error_Handler>
 800223a:	bf00      	nop
 800223c:	20000350 	.word	0x20000350
 8002240:	40013800 	.word	0x40013800

08002244 <MX_USART2_UART_Init>:
{
 8002244:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002246:	480a      	ldr	r0, [pc, #40]	@ (8002270 <MX_USART2_UART_Init+0x2c>)
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <MX_USART2_UART_Init+0x30>)
 800224a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 800224c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002250:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	2300      	movs	r3, #0
 8002254:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002256:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002258:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800225a:	220c      	movs	r2, #12
 800225c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002262:	f002 ff99 	bl	8005198 <HAL_UART_Init>
 8002266:	b900      	cbnz	r0, 800226a <MX_USART2_UART_Init+0x26>
}
 8002268:	bd08      	pop	{r3, pc}
    Error_Handler();
 800226a:	f7ff ffcf 	bl	800220c <Error_Handler>
 800226e:	bf00      	nop
 8002270:	20000308 	.word	0x20000308
 8002274:	40004400 	.word	0x40004400

08002278 <MX_USART3_UART_Init>:
{
 8002278:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800227a:	480a      	ldr	r0, [pc, #40]	@ (80022a4 <MX_USART3_UART_Init+0x2c>)
 800227c:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <MX_USART3_UART_Init+0x30>)
 800227e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8002280:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002284:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002286:	2300      	movs	r3, #0
 8002288:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800228a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800228c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800228e:	220c      	movs	r2, #12
 8002290:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002296:	f002 ff7f 	bl	8005198 <HAL_UART_Init>
 800229a:	b900      	cbnz	r0, 800229e <MX_USART3_UART_Init+0x26>
}
 800229c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800229e:	f7ff ffb5 	bl	800220c <Error_Handler>
 80022a2:	bf00      	nop
 80022a4:	200002c0 	.word	0x200002c0
 80022a8:	40004800 	.word	0x40004800

080022ac <MX_TIM3_Init>:
{
 80022ac:	b500      	push	{lr}
 80022ae:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b0:	2300      	movs	r3, #0
 80022b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80022b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80022b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80022b8:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ba:	9308      	str	r3, [sp, #32]
 80022bc:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	9302      	str	r3, [sp, #8]
 80022c2:	9303      	str	r3, [sp, #12]
 80022c4:	9304      	str	r3, [sp, #16]
 80022c6:	9305      	str	r3, [sp, #20]
 80022c8:	9306      	str	r3, [sp, #24]
 80022ca:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80022cc:	481e      	ldr	r0, [pc, #120]	@ (8002348 <MX_TIM3_Init+0x9c>)
 80022ce:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <MX_TIM3_Init+0xa0>)
 80022d0:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 80022d2:	227f      	movs	r2, #127	@ 0x7f
 80022d4:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 80022d8:	2214      	movs	r2, #20
 80022da:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022dc:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e0:	f002 fa4a 	bl	8004778 <HAL_TIM_Base_Init>
 80022e4:	bb28      	cbnz	r0, 8002332 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ea:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022ec:	a90a      	add	r1, sp, #40	@ 0x28
 80022ee:	4816      	ldr	r0, [pc, #88]	@ (8002348 <MX_TIM3_Init+0x9c>)
 80022f0:	f002 fbac 	bl	8004a4c <HAL_TIM_ConfigClockSource>
 80022f4:	b9f8      	cbnz	r0, 8002336 <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022f6:	4814      	ldr	r0, [pc, #80]	@ (8002348 <MX_TIM3_Init+0x9c>)
 80022f8:	f002 fa8d 	bl	8004816 <HAL_TIM_PWM_Init>
 80022fc:	b9e8      	cbnz	r0, 800233a <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002302:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002304:	a908      	add	r1, sp, #32
 8002306:	4810      	ldr	r0, [pc, #64]	@ (8002348 <MX_TIM3_Init+0x9c>)
 8002308:	f002 fee8 	bl	80050dc <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	b9b8      	cbnz	r0, 800233e <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230e:	2360      	movs	r3, #96	@ 0x60
 8002310:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002316:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002318:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800231a:	220c      	movs	r2, #12
 800231c:	a901      	add	r1, sp, #4
 800231e:	480a      	ldr	r0, [pc, #40]	@ (8002348 <MX_TIM3_Init+0x9c>)
 8002320:	f002 fad2 	bl	80048c8 <HAL_TIM_PWM_ConfigChannel>
 8002324:	b968      	cbnz	r0, 8002342 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8002326:	4808      	ldr	r0, [pc, #32]	@ (8002348 <MX_TIM3_Init+0x9c>)
 8002328:	f000 fa40 	bl	80027ac <HAL_TIM_MspPostInit>
}
 800232c:	b00f      	add	sp, #60	@ 0x3c
 800232e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002332:	f7ff ff6b 	bl	800220c <Error_Handler>
    Error_Handler();
 8002336:	f7ff ff69 	bl	800220c <Error_Handler>
    Error_Handler();
 800233a:	f7ff ff67 	bl	800220c <Error_Handler>
    Error_Handler();
 800233e:	f7ff ff65 	bl	800220c <Error_Handler>
    Error_Handler();
 8002342:	f7ff ff63 	bl	800220c <Error_Handler>
 8002346:	bf00      	nop
 8002348:	20000398 	.word	0x20000398
 800234c:	40000400 	.word	0x40000400

08002350 <MX_TIM2_Init>:
{
 8002350:	b500      	push	{lr}
 8002352:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002354:	2300      	movs	r3, #0
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	9303      	str	r3, [sp, #12]
 800235a:	9304      	str	r3, [sp, #16]
 800235c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8002362:	4814      	ldr	r0, [pc, #80]	@ (80023b4 <MX_TIM2_Init+0x64>)
 8002364:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002368:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 800236a:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 800236e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8002372:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002376:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002378:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800237c:	f002 f9fc 	bl	8004778 <HAL_TIM_Base_Init>
 8002380:	b990      	cbnz	r0, 80023a8 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002386:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002388:	a902      	add	r1, sp, #8
 800238a:	480a      	ldr	r0, [pc, #40]	@ (80023b4 <MX_TIM2_Init+0x64>)
 800238c:	f002 fb5e 	bl	8004a4c <HAL_TIM_ConfigClockSource>
 8002390:	b960      	cbnz	r0, 80023ac <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002396:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002398:	4669      	mov	r1, sp
 800239a:	4806      	ldr	r0, [pc, #24]	@ (80023b4 <MX_TIM2_Init+0x64>)
 800239c:	f002 fe9e 	bl	80050dc <HAL_TIMEx_MasterConfigSynchronization>
 80023a0:	b930      	cbnz	r0, 80023b0 <MX_TIM2_Init+0x60>
}
 80023a2:	b007      	add	sp, #28
 80023a4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80023a8:	f7ff ff30 	bl	800220c <Error_Handler>
    Error_Handler();
 80023ac:	f7ff ff2e 	bl	800220c <Error_Handler>
    Error_Handler();
 80023b0:	f7ff ff2c 	bl	800220c <Error_Handler>
 80023b4:	200003e0 	.word	0x200003e0

080023b8 <MX_ADC1_Init>:
{
 80023b8:	b500      	push	{lr}
 80023ba:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80023bc:	2300      	movs	r3, #0
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	9302      	str	r3, [sp, #8]
 80023c2:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80023c4:	480f      	ldr	r0, [pc, #60]	@ (8002404 <MX_ADC1_Init+0x4c>)
 80023c6:	4a10      	ldr	r2, [pc, #64]	@ (8002408 <MX_ADC1_Init+0x50>)
 80023c8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023ca:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023cc:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ce:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80023d4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023d6:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80023d8:	2301      	movs	r3, #1
 80023da:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023dc:	f000 fbe8 	bl	8002bb0 <HAL_ADC_Init>
 80023e0:	b960      	cbnz	r0, 80023fc <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023e6:	2201      	movs	r2, #1
 80023e8:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023ea:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ec:	a901      	add	r1, sp, #4
 80023ee:	4805      	ldr	r0, [pc, #20]	@ (8002404 <MX_ADC1_Init+0x4c>)
 80023f0:	f000 fea2 	bl	8003138 <HAL_ADC_ConfigChannel>
 80023f4:	b920      	cbnz	r0, 8002400 <MX_ADC1_Init+0x48>
}
 80023f6:	b005      	add	sp, #20
 80023f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80023fc:	f7ff ff06 	bl	800220c <Error_Handler>
    Error_Handler();
 8002400:	f7ff ff04 	bl	800220c <Error_Handler>
 8002404:	20000430 	.word	0x20000430
 8002408:	40012400 	.word	0x40012400

0800240c <MX_CRC_Init>:
{
 800240c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800240e:	4804      	ldr	r0, [pc, #16]	@ (8002420 <MX_CRC_Init+0x14>)
 8002410:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <MX_CRC_Init+0x18>)
 8002412:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002414:	f001 f9df 	bl	80037d6 <HAL_CRC_Init>
 8002418:	b900      	cbnz	r0, 800241c <MX_CRC_Init+0x10>
}
 800241a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800241c:	f7ff fef6 	bl	800220c <Error_Handler>
 8002420:	20000428 	.word	0x20000428
 8002424:	40023000 	.word	0x40023000

08002428 <SystemClock_Config>:
{
 8002428:	b500      	push	{lr}
 800242a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242c:	2228      	movs	r2, #40	@ 0x28
 800242e:	2100      	movs	r1, #0
 8002430:	eb0d 0002 	add.w	r0, sp, r2
 8002434:	f005 f934 	bl	80076a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002438:	2300      	movs	r3, #0
 800243a:	9305      	str	r3, [sp, #20]
 800243c:	9306      	str	r3, [sp, #24]
 800243e:	9307      	str	r3, [sp, #28]
 8002440:	9308      	str	r3, [sp, #32]
 8002442:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	9303      	str	r3, [sp, #12]
 800244a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800244c:	2201      	movs	r2, #1
 800244e:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002454:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002456:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800245a:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800245c:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245e:	2202      	movs	r2, #2
 8002460:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002462:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002464:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002468:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800246a:	a80a      	add	r0, sp, #40	@ 0x28
 800246c:	f001 fc06 	bl	8003c7c <HAL_RCC_OscConfig>
 8002470:	b9c8      	cbnz	r0, 80024a6 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002472:	230f      	movs	r3, #15
 8002474:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002476:	2102      	movs	r1, #2
 8002478:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800247a:	2300      	movs	r3, #0
 800247c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800247e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002482:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002484:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002486:	a805      	add	r0, sp, #20
 8002488:	f001 fe7a 	bl	8004180 <HAL_RCC_ClockConfig>
 800248c:	b968      	cbnz	r0, 80024aa <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800248e:	2302      	movs	r3, #2
 8002490:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002496:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	a801      	add	r0, sp, #4
 800249a:	f002 f801 	bl	80044a0 <HAL_RCCEx_PeriphCLKConfig>
 800249e:	b930      	cbnz	r0, 80024ae <SystemClock_Config+0x86>
}
 80024a0:	b015      	add	sp, #84	@ 0x54
 80024a2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80024a6:	f7ff feb1 	bl	800220c <Error_Handler>
    Error_Handler();
 80024aa:	f7ff feaf 	bl	800220c <Error_Handler>
    Error_Handler();
 80024ae:	f7ff fead 	bl	800220c <Error_Handler>
	...

080024b4 <STM32_InitRoutine>:
void STM32_InitRoutine(void) {
 80024b4:	b570      	push	{r4, r5, r6, lr}
	HAL_Init();
 80024b6:	f000 faf5 	bl	8002aa4 <HAL_Init>
	SystemClock_Config();
 80024ba:	f7ff ffb5 	bl	8002428 <SystemClock_Config>
	MX_USART1_UART_Init();
 80024be:	f7ff fea7 	bl	8002210 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80024c2:	f7ff febf 	bl	8002244 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80024c6:	f7ff fed7 	bl	8002278 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80024ca:	f7ff feef 	bl	80022ac <MX_TIM3_Init>
	MX_TIM2_Init();
 80024ce:	f7ff ff3f 	bl	8002350 <MX_TIM2_Init>
	MX_ADC1_Init();
 80024d2:	f7ff ff71 	bl	80023b8 <MX_ADC1_Init>
	MX_CRC_Init();
 80024d6:	f7ff ff99 	bl	800240c <MX_CRC_Init>
	MX_FATFS_Init();
 80024da:	f003 fb8f 	bl	8005bfc <MX_FATFS_Init>
	printf("|----------Starting----------|\r\n");
 80024de:	484e      	ldr	r0, [pc, #312]	@ (8002618 <STM32_InitRoutine+0x164>)
 80024e0:	f004 fffe 	bl	80074e0 <puts>
	SPI_Init(1);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff fd11 	bl	8001f0c <SPI_Init>
	printf("(+) SPI1 succeeded...\r\n");
 80024ea:	484c      	ldr	r0, [pc, #304]	@ (800261c <STM32_InitRoutine+0x168>)
 80024ec:	f004 fff8 	bl	80074e0 <puts>
	SPI_Init(2);
 80024f0:	2002      	movs	r0, #2
 80024f2:	f7ff fd0b 	bl	8001f0c <SPI_Init>
	printf("(+) SPI2 succeeded...\r\n");
 80024f6:	484a      	ldr	r0, [pc, #296]	@ (8002620 <STM32_InitRoutine+0x16c>)
 80024f8:	f004 fff2 	bl	80074e0 <puts>
	USART_Init(1);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fd9f 	bl	8002040 <USART_Init>
	printf("(+) USART1 succeeded...\r\n");
 8002502:	4848      	ldr	r0, [pc, #288]	@ (8002624 <STM32_InitRoutine+0x170>)
 8002504:	f004 ffec 	bl	80074e0 <puts>
	USART_Init(2);
 8002508:	2002      	movs	r0, #2
 800250a:	f7ff fd99 	bl	8002040 <USART_Init>
	printf("(+) USART2 succeeded...\r\n");
 800250e:	4846      	ldr	r0, [pc, #280]	@ (8002628 <STM32_InitRoutine+0x174>)
 8002510:	f004 ffe6 	bl	80074e0 <puts>
	USART_Init(3);
 8002514:	2003      	movs	r0, #3
 8002516:	f7ff fd93 	bl	8002040 <USART_Init>
	printf("(+) USART3 succeeded...\r\n");
 800251a:	4844      	ldr	r0, [pc, #272]	@ (800262c <STM32_InitRoutine+0x178>)
 800251c:	f004 ffe0 	bl	80074e0 <puts>
	printf("|----------Components initialization----------|\r\n");
 8002520:	4843      	ldr	r0, [pc, #268]	@ (8002630 <STM32_InitRoutine+0x17c>)
 8002522:	f004 ffdd 	bl	80074e0 <puts>
	packet.header_states.mode = MODE_PREFLIGHT;
 8002526:	2100      	movs	r1, #0
 8002528:	4b42      	ldr	r3, [pc, #264]	@ (8002634 <STM32_InitRoutine+0x180>)
 800252a:	7019      	strb	r1, [r3, #0]
	printf("(+) Mode flight: %i succeeded...\r\n", packet.header_states.mode);
 800252c:	4842      	ldr	r0, [pc, #264]	@ (8002638 <STM32_InitRoutine+0x184>)
 800252e:	f004 ff6f 	bl	8007410 <iprintf>
	WS2812_Init();
 8002532:	f7ff fc35 	bl	8001da0 <WS2812_Init>
	printf("(+) WS2812 succeeded...\r\n");
 8002536:	4841      	ldr	r0, [pc, #260]	@ (800263c <STM32_InitRoutine+0x188>)
 8002538:	f004 ffd2 	bl	80074e0 <puts>
	if (CD74HC4051_Init(&hadc1) != 1) {
 800253c:	4840      	ldr	r0, [pc, #256]	@ (8002640 <STM32_InitRoutine+0x18c>)
 800253e:	f7ff f934 	bl	80017aa <CD74HC4051_Init>
 8002542:	2801      	cmp	r0, #1
 8002544:	d02f      	beq.n	80025a6 <STM32_InitRoutine+0xf2>
	  printf("(-) CD74HC4051 failed...\r\n");
 8002546:	483f      	ldr	r0, [pc, #252]	@ (8002644 <STM32_InitRoutine+0x190>)
 8002548:	f004 ffca 	bl	80074e0 <puts>
	if (BMP280_Init(&bmp_data, T0 - 273.15, P0) != 1) {
 800254c:	4a3e      	ldr	r2, [pc, #248]	@ (8002648 <STM32_InitRoutine+0x194>)
 800254e:	493f      	ldr	r1, [pc, #252]	@ (800264c <STM32_InitRoutine+0x198>)
 8002550:	483f      	ldr	r0, [pc, #252]	@ (8002650 <STM32_InitRoutine+0x19c>)
 8002552:	f7ff f906 	bl	8001762 <BMP280_Init>
 8002556:	2801      	cmp	r0, #1
 8002558:	d042      	beq.n	80025e0 <STM32_InitRoutine+0x12c>
		packet.header_states.barometer = 0x00;
 800255a:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <STM32_InitRoutine+0x180>)
 800255c:	2200      	movs	r2, #0
 800255e:	711a      	strb	r2, [r3, #4]
		printf("(-) BMP280 failed...\r\n");
 8002560:	483c      	ldr	r0, [pc, #240]	@ (8002654 <STM32_InitRoutine+0x1a0>)
 8002562:	f004 ffbd 	bl	80074e0 <puts>
	if (ICM20602_Init(&icm_data) != 0) {
 8002566:	483c      	ldr	r0, [pc, #240]	@ (8002658 <STM32_InitRoutine+0x1a4>)
 8002568:	f7ff fa78 	bl	8001a5c <ICM20602_Init>
 800256c:	2800      	cmp	r0, #0
 800256e:	d03e      	beq.n	80025ee <STM32_InitRoutine+0x13a>
		packet.header_states.accelerometer = 0x00;
 8002570:	4b30      	ldr	r3, [pc, #192]	@ (8002634 <STM32_InitRoutine+0x180>)
 8002572:	2200      	movs	r2, #0
 8002574:	70da      	strb	r2, [r3, #3]
		printf("(-) ICM20602 failed...\r\n");
 8002576:	4839      	ldr	r0, [pc, #228]	@ (800265c <STM32_InitRoutine+0x1a8>)
 8002578:	f004 ffb2 	bl	80074e0 <puts>
	if(L76LM33_Init() != 1) {
 800257c:	f7ff fadc 	bl	8001b38 <L76LM33_Init>
 8002580:	2801      	cmp	r0, #1
 8002582:	d03b      	beq.n	80025fc <STM32_InitRoutine+0x148>
		packet.header_states.gps = 0x00;
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <STM32_InitRoutine+0x180>)
 8002586:	2200      	movs	r2, #0
 8002588:	715a      	strb	r2, [r3, #5]
		printf("(-) L76LM33 failed...\r\n");
 800258a:	4835      	ldr	r0, [pc, #212]	@ (8002660 <STM32_InitRoutine+0x1ac>)
 800258c:	f004 ffa8 	bl	80074e0 <puts>
	if (MEM2067_SDCardDetection() != 1) {
 8002590:	f7ff fb6a 	bl	8001c68 <MEM2067_SDCardDetection>
 8002594:	2801      	cmp	r0, #1
 8002596:	d038      	beq.n	800260a <STM32_InitRoutine+0x156>
		packet.header_states.sd = 0x00;
 8002598:	4b26      	ldr	r3, [pc, #152]	@ (8002634 <STM32_InitRoutine+0x180>)
 800259a:	2200      	movs	r2, #0
 800259c:	719a      	strb	r2, [r3, #6]
		printf("(-) No SD card detected in MEM2067...\r\n");
 800259e:	4831      	ldr	r0, [pc, #196]	@ (8002664 <STM32_InitRoutine+0x1b0>)
 80025a0:	f004 ff9e 	bl	80074e0 <puts>
}
 80025a4:	bd70      	pop	{r4, r5, r6, pc}
		packet.header_states.pyro0 = CD74HC4051_AnRead(&hadc1, CHANNEL_0, PYRO_CHANNEL_0, VREF12); // TODO: Verifier vref
 80025a6:	4e30      	ldr	r6, [pc, #192]	@ (8002668 <STM32_InitRoutine+0x1b4>)
 80025a8:	4d25      	ldr	r5, [pc, #148]	@ (8002640 <STM32_InitRoutine+0x18c>)
 80025aa:	4633      	mov	r3, r6
 80025ac:	2201      	movs	r2, #1
 80025ae:	2100      	movs	r1, #0
 80025b0:	4628      	mov	r0, r5
 80025b2:	f7ff f92d 	bl	8001810 <CD74HC4051_AnRead>
 80025b6:	4c1f      	ldr	r4, [pc, #124]	@ (8002634 <STM32_InitRoutine+0x180>)
 80025b8:	7060      	strb	r0, [r4, #1]
		packet.header_states.pyro1 = CD74HC4051_AnRead(&hadc1, CHANNEL_0, PYRO_CHANNEL_1, VREF12); // TODO: Verifier vref
 80025ba:	4633      	mov	r3, r6
 80025bc:	2202      	movs	r2, #2
 80025be:	2100      	movs	r1, #0
 80025c0:	4628      	mov	r0, r5
 80025c2:	f7ff f925 	bl	8001810 <CD74HC4051_AnRead>
 80025c6:	70a0      	strb	r0, [r4, #2]
		printf(" -> Pyro0 state: %i\r\n", packet.header_states.pyro0);
 80025c8:	7861      	ldrb	r1, [r4, #1]
 80025ca:	4828      	ldr	r0, [pc, #160]	@ (800266c <STM32_InitRoutine+0x1b8>)
 80025cc:	f004 ff20 	bl	8007410 <iprintf>
		printf(" -> Pyro1 state: %i\r\n", packet.header_states.pyro1);
 80025d0:	78a1      	ldrb	r1, [r4, #2]
 80025d2:	4827      	ldr	r0, [pc, #156]	@ (8002670 <STM32_InitRoutine+0x1bc>)
 80025d4:	f004 ff1c 	bl	8007410 <iprintf>
		printf("(+) CD74HC4051 succeeded...\r\n");
 80025d8:	4826      	ldr	r0, [pc, #152]	@ (8002674 <STM32_InitRoutine+0x1c0>)
 80025da:	f004 ff81 	bl	80074e0 <puts>
 80025de:	e7b5      	b.n	800254c <STM32_InitRoutine+0x98>
		packet.header_states.barometer = 0x01;
 80025e0:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <STM32_InitRoutine+0x180>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	711a      	strb	r2, [r3, #4]
		printf("(+) BMP280 succeeded...\r\n");
 80025e6:	4824      	ldr	r0, [pc, #144]	@ (8002678 <STM32_InitRoutine+0x1c4>)
 80025e8:	f004 ff7a 	bl	80074e0 <puts>
 80025ec:	e7bb      	b.n	8002566 <STM32_InitRoutine+0xb2>
		packet.header_states.accelerometer = 0x01;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <STM32_InitRoutine+0x180>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	70da      	strb	r2, [r3, #3]
		printf("(+) ICM20602 succeeded...\r\n");
 80025f4:	4821      	ldr	r0, [pc, #132]	@ (800267c <STM32_InitRoutine+0x1c8>)
 80025f6:	f004 ff73 	bl	80074e0 <puts>
 80025fa:	e7bf      	b.n	800257c <STM32_InitRoutine+0xc8>
		packet.header_states.gps = 0x01;
 80025fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <STM32_InitRoutine+0x180>)
 80025fe:	2201      	movs	r2, #1
 8002600:	715a      	strb	r2, [r3, #5]
		printf("(+) L76LM33 succeeded...\r\n");
 8002602:	481f      	ldr	r0, [pc, #124]	@ (8002680 <STM32_InitRoutine+0x1cc>)
 8002604:	f004 ff6c 	bl	80074e0 <puts>
 8002608:	e7c2      	b.n	8002590 <STM32_InitRoutine+0xdc>
		packet.header_states.sd = 0x01;
 800260a:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <STM32_InitRoutine+0x180>)
 800260c:	2201      	movs	r2, #1
 800260e:	719a      	strb	r2, [r3, #6]
		printf("(+) SD card detected in MEM2067...\r\n");
 8002610:	481c      	ldr	r0, [pc, #112]	@ (8002684 <STM32_InitRoutine+0x1d0>)
 8002612:	f004 ff65 	bl	80074e0 <puts>
}
 8002616:	e7c5      	b.n	80025a4 <STM32_InitRoutine+0xf0>
 8002618:	0800963c 	.word	0x0800963c
 800261c:	0800965c 	.word	0x0800965c
 8002620:	08009674 	.word	0x08009674
 8002624:	0800968c 	.word	0x0800968c
 8002628:	080096a8 	.word	0x080096a8
 800262c:	080096c4 	.word	0x080096c4
 8002630:	080096e0 	.word	0x080096e0
 8002634:	2000024c 	.word	0x2000024c
 8002638:	08009714 	.word	0x08009714
 800263c:	08009738 	.word	0x08009738
 8002640:	20000430 	.word	0x20000430
 8002644:	08009754 	.word	0x08009754
 8002648:	47c5e680 	.word	0x47c5e680
 800264c:	41700000 	.word	0x41700000
 8002650:	20000294 	.word	0x20000294
 8002654:	080097c0 	.word	0x080097c0
 8002658:	2000025c 	.word	0x2000025c
 800265c:	080097f4 	.word	0x080097f4
 8002660:	08009828 	.word	0x08009828
 8002664:	0800985c 	.word	0x0800985c
 8002668:	41400000 	.word	0x41400000
 800266c:	08009770 	.word	0x08009770
 8002670:	08009788 	.word	0x08009788
 8002674:	080097a0 	.word	0x080097a0
 8002678:	080097d8 	.word	0x080097d8
 800267c:	0800980c 	.word	0x0800980c
 8002680:	08009840 	.word	0x08009840
 8002684:	08009884 	.word	0x08009884

08002688 <main>:
{
 8002688:	b508      	push	{r3, lr}
	STM32_InitRoutine();
 800268a:	f7ff ff13 	bl	80024b4 <STM32_InitRoutine>
  while (1)
 800268e:	e7fe      	b.n	800268e <main+0x6>

08002690 <HAL_MspInit>:
 8002690:	b082      	sub	sp, #8
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <HAL_MspInit+0x3c>)
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	619a      	str	r2, [r3, #24]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	f002 0201 	and.w	r2, r2, #1
 80026a2:	9200      	str	r2, [sp, #0]
 80026a4:	9a00      	ldr	r2, [sp, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026ac:	61da      	str	r2, [r3, #28]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	9b01      	ldr	r3, [sp, #4]
 80026b8:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <HAL_MspInit+0x40>)
 80026ba:	6853      	ldr	r3, [r2, #4]
 80026bc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026c4:	6053      	str	r3, [r2, #4]
 80026c6:	b002      	add	sp, #8
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000

080026d4 <HAL_ADC_MspInit>:
 80026d4:	b500      	push	{lr}
 80026d6:	b087      	sub	sp, #28
 80026d8:	2300      	movs	r3, #0
 80026da:	9302      	str	r3, [sp, #8]
 80026dc:	9303      	str	r3, [sp, #12]
 80026de:	9304      	str	r3, [sp, #16]
 80026e0:	9305      	str	r3, [sp, #20]
 80026e2:	6802      	ldr	r2, [r0, #0]
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_ADC_MspInit+0x58>)
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d002      	beq.n	80026f0 <HAL_ADC_MspInit+0x1c>
 80026ea:	b007      	add	sp, #28
 80026ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80026f0:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fa:	619a      	str	r2, [r3, #24]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002702:	9200      	str	r2, [sp, #0]
 8002704:	9a00      	ldr	r2, [sp, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	f042 0204 	orr.w	r2, r2, #4
 800270c:	619a      	str	r2, [r3, #24]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	9b01      	ldr	r3, [sp, #4]
 8002718:	2301      	movs	r3, #1
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	2303      	movs	r3, #3
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	a902      	add	r1, sp, #8
 8002722:	4803      	ldr	r0, [pc, #12]	@ (8002730 <HAL_ADC_MspInit+0x5c>)
 8002724:	f001 f926 	bl	8003974 <HAL_GPIO_Init>
 8002728:	e7df      	b.n	80026ea <HAL_ADC_MspInit+0x16>
 800272a:	bf00      	nop
 800272c:	40012400 	.word	0x40012400
 8002730:	40010800 	.word	0x40010800

08002734 <HAL_CRC_MspInit>:
 8002734:	6802      	ldr	r2, [r0, #0]
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_CRC_MspInit+0x28>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d000      	beq.n	800273e <HAL_CRC_MspInit+0xa>
 800273c:	4770      	bx	lr
 800273e:	b082      	sub	sp, #8
 8002740:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800274a:	615a      	str	r2, [r3, #20]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9b01      	ldr	r3, [sp, #4]
 8002756:	b002      	add	sp, #8
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023000 	.word	0x40023000

08002760 <HAL_TIM_Base_MspInit>:
 8002760:	b082      	sub	sp, #8
 8002762:	6803      	ldr	r3, [r0, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002768:	d004      	beq.n	8002774 <HAL_TIM_Base_MspInit+0x14>
 800276a:	4a0e      	ldr	r2, [pc, #56]	@ (80027a4 <HAL_TIM_Base_MspInit+0x44>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00d      	beq.n	800278c <HAL_TIM_Base_MspInit+0x2c>
 8002770:	b002      	add	sp, #8
 8002772:	4770      	bx	lr
 8002774:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	61da      	str	r2, [r3, #28]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	9b00      	ldr	r3, [sp, #0]
 800278a:	e7f1      	b.n	8002770 <HAL_TIM_Base_MspInit+0x10>
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_TIM_Base_MspInit+0x48>)
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	f042 0202 	orr.w	r2, r2, #2
 8002794:	61da      	str	r2, [r3, #28]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	9b01      	ldr	r3, [sp, #4]
 80027a0:	e7e6      	b.n	8002770 <HAL_TIM_Base_MspInit+0x10>
 80027a2:	bf00      	nop
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40021000 	.word	0x40021000

080027ac <HAL_TIM_MspPostInit>:
 80027ac:	b500      	push	{lr}
 80027ae:	b087      	sub	sp, #28
 80027b0:	2300      	movs	r3, #0
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	9303      	str	r3, [sp, #12]
 80027b6:	9304      	str	r3, [sp, #16]
 80027b8:	9305      	str	r3, [sp, #20]
 80027ba:	6802      	ldr	r2, [r0, #0]
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <HAL_TIM_MspPostInit+0x44>)
 80027be:	429a      	cmp	r2, r3
 80027c0:	d002      	beq.n	80027c8 <HAL_TIM_MspPostInit+0x1c>
 80027c2:	b007      	add	sp, #28
 80027c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027c8:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	f042 0208 	orr.w	r2, r2, #8
 80027d2:	619a      	str	r2, [r3, #24]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	9b01      	ldr	r3, [sp, #4]
 80027de:	2302      	movs	r3, #2
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	9303      	str	r3, [sp, #12]
 80027e4:	9305      	str	r3, [sp, #20]
 80027e6:	a902      	add	r1, sp, #8
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <HAL_TIM_MspPostInit+0x48>)
 80027ea:	f001 f8c3 	bl	8003974 <HAL_GPIO_Init>
 80027ee:	e7e8      	b.n	80027c2 <HAL_TIM_MspPostInit+0x16>
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40010c00 	.word	0x40010c00

080027f8 <HAL_UART_MspInit>:
 80027f8:	b530      	push	{r4, r5, lr}
 80027fa:	b08b      	sub	sp, #44	@ 0x2c
 80027fc:	2300      	movs	r3, #0
 80027fe:	9306      	str	r3, [sp, #24]
 8002800:	9307      	str	r3, [sp, #28]
 8002802:	9308      	str	r3, [sp, #32]
 8002804:	9309      	str	r3, [sp, #36]	@ 0x24
 8002806:	6803      	ldr	r3, [r0, #0]
 8002808:	4a51      	ldr	r2, [pc, #324]	@ (8002950 <HAL_UART_MspInit+0x158>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_UART_MspInit+0x26>
 800280e:	4a51      	ldr	r2, [pc, #324]	@ (8002954 <HAL_UART_MspInit+0x15c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d03b      	beq.n	800288c <HAL_UART_MspInit+0x94>
 8002814:	4a50      	ldr	r2, [pc, #320]	@ (8002958 <HAL_UART_MspInit+0x160>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d068      	beq.n	80028ec <HAL_UART_MspInit+0xf4>
 800281a:	b00b      	add	sp, #44	@ 0x2c
 800281c:	bd30      	pop	{r4, r5, pc}
 800281e:	4b4f      	ldr	r3, [pc, #316]	@ (800295c <HAL_UART_MspInit+0x164>)
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002826:	619a      	str	r2, [r3, #24]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800282e:	9200      	str	r2, [sp, #0]
 8002830:	9a00      	ldr	r2, [sp, #0]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	f042 0208 	orr.w	r2, r2, #8
 8002838:	619a      	str	r2, [r3, #24]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	2340      	movs	r3, #64	@ 0x40
 8002846:	9306      	str	r3, [sp, #24]
 8002848:	2302      	movs	r3, #2
 800284a:	9307      	str	r3, [sp, #28]
 800284c:	2303      	movs	r3, #3
 800284e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002850:	4d43      	ldr	r5, [pc, #268]	@ (8002960 <HAL_UART_MspInit+0x168>)
 8002852:	a906      	add	r1, sp, #24
 8002854:	4628      	mov	r0, r5
 8002856:	f001 f88d 	bl	8003974 <HAL_GPIO_Init>
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	9306      	str	r3, [sp, #24]
 800285e:	2400      	movs	r4, #0
 8002860:	9407      	str	r4, [sp, #28]
 8002862:	9408      	str	r4, [sp, #32]
 8002864:	a906      	add	r1, sp, #24
 8002866:	4628      	mov	r0, r5
 8002868:	f001 f884 	bl	8003974 <HAL_GPIO_Init>
 800286c:	4a3d      	ldr	r2, [pc, #244]	@ (8002964 <HAL_UART_MspInit+0x16c>)
 800286e:	6853      	ldr	r3, [r2, #4]
 8002870:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6053      	str	r3, [r2, #4]
 800287a:	4622      	mov	r2, r4
 800287c:	4621      	mov	r1, r4
 800287e:	2025      	movs	r0, #37	@ 0x25
 8002880:	f000 ff73 	bl	800376a <HAL_NVIC_SetPriority>
 8002884:	2025      	movs	r0, #37	@ 0x25
 8002886:	f000 ff8c 	bl	80037a2 <HAL_NVIC_EnableIRQ>
 800288a:	e7c6      	b.n	800281a <HAL_UART_MspInit+0x22>
 800288c:	4b33      	ldr	r3, [pc, #204]	@ (800295c <HAL_UART_MspInit+0x164>)
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002894:	61da      	str	r2, [r3, #28]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800289c:	9202      	str	r2, [sp, #8]
 800289e:	9a02      	ldr	r2, [sp, #8]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	f042 0204 	orr.w	r2, r2, #4
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	9303      	str	r3, [sp, #12]
 80028b0:	9b03      	ldr	r3, [sp, #12]
 80028b2:	2304      	movs	r3, #4
 80028b4:	9306      	str	r3, [sp, #24]
 80028b6:	2302      	movs	r3, #2
 80028b8:	9307      	str	r3, [sp, #28]
 80028ba:	2303      	movs	r3, #3
 80028bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80028be:	4d2a      	ldr	r5, [pc, #168]	@ (8002968 <HAL_UART_MspInit+0x170>)
 80028c0:	a906      	add	r1, sp, #24
 80028c2:	4628      	mov	r0, r5
 80028c4:	f001 f856 	bl	8003974 <HAL_GPIO_Init>
 80028c8:	2308      	movs	r3, #8
 80028ca:	9306      	str	r3, [sp, #24]
 80028cc:	2400      	movs	r4, #0
 80028ce:	9407      	str	r4, [sp, #28]
 80028d0:	9408      	str	r4, [sp, #32]
 80028d2:	a906      	add	r1, sp, #24
 80028d4:	4628      	mov	r0, r5
 80028d6:	f001 f84d 	bl	8003974 <HAL_GPIO_Init>
 80028da:	4622      	mov	r2, r4
 80028dc:	4621      	mov	r1, r4
 80028de:	2026      	movs	r0, #38	@ 0x26
 80028e0:	f000 ff43 	bl	800376a <HAL_NVIC_SetPriority>
 80028e4:	2026      	movs	r0, #38	@ 0x26
 80028e6:	f000 ff5c 	bl	80037a2 <HAL_NVIC_EnableIRQ>
 80028ea:	e796      	b.n	800281a <HAL_UART_MspInit+0x22>
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <HAL_UART_MspInit+0x164>)
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80028f4:	61da      	str	r2, [r3, #28]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80028fc:	9204      	str	r2, [sp, #16]
 80028fe:	9a04      	ldr	r2, [sp, #16]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	f042 0208 	orr.w	r2, r2, #8
 8002906:	619a      	str	r2, [r3, #24]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	9305      	str	r3, [sp, #20]
 8002910:	9b05      	ldr	r3, [sp, #20]
 8002912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002916:	9306      	str	r3, [sp, #24]
 8002918:	2302      	movs	r3, #2
 800291a:	9307      	str	r3, [sp, #28]
 800291c:	2303      	movs	r3, #3
 800291e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002920:	4d0f      	ldr	r5, [pc, #60]	@ (8002960 <HAL_UART_MspInit+0x168>)
 8002922:	a906      	add	r1, sp, #24
 8002924:	4628      	mov	r0, r5
 8002926:	f001 f825 	bl	8003974 <HAL_GPIO_Init>
 800292a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800292e:	9306      	str	r3, [sp, #24]
 8002930:	2400      	movs	r4, #0
 8002932:	9407      	str	r4, [sp, #28]
 8002934:	9408      	str	r4, [sp, #32]
 8002936:	a906      	add	r1, sp, #24
 8002938:	4628      	mov	r0, r5
 800293a:	f001 f81b 	bl	8003974 <HAL_GPIO_Init>
 800293e:	4622      	mov	r2, r4
 8002940:	4621      	mov	r1, r4
 8002942:	2027      	movs	r0, #39	@ 0x27
 8002944:	f000 ff11 	bl	800376a <HAL_NVIC_SetPriority>
 8002948:	2027      	movs	r0, #39	@ 0x27
 800294a:	f000 ff2a 	bl	80037a2 <HAL_NVIC_EnableIRQ>
 800294e:	e764      	b.n	800281a <HAL_UART_MspInit+0x22>
 8002950:	40013800 	.word	0x40013800
 8002954:	40004400 	.word	0x40004400
 8002958:	40004800 	.word	0x40004800
 800295c:	40021000 	.word	0x40021000
 8002960:	40010c00 	.word	0x40010c00
 8002964:	40010000 	.word	0x40010000
 8002968:	40010800 	.word	0x40010800

0800296c <NMI_Handler>:
 800296c:	e7fe      	b.n	800296c <NMI_Handler>

0800296e <HardFault_Handler>:
 800296e:	e7fe      	b.n	800296e <HardFault_Handler>

08002970 <MemManage_Handler>:
 8002970:	e7fe      	b.n	8002970 <MemManage_Handler>

08002972 <BusFault_Handler>:
 8002972:	e7fe      	b.n	8002972 <BusFault_Handler>

08002974 <UsageFault_Handler>:
 8002974:	e7fe      	b.n	8002974 <UsageFault_Handler>

08002976 <SVC_Handler>:
 8002976:	4770      	bx	lr

08002978 <DebugMon_Handler>:
 8002978:	4770      	bx	lr

0800297a <PendSV_Handler>:
 800297a:	4770      	bx	lr

0800297c <SysTick_Handler>:
 800297c:	b508      	push	{r3, lr}
 800297e:	f000 f8d7 	bl	8002b30 <HAL_IncTick>
 8002982:	bd08      	pop	{r3, pc}

08002984 <USART1_IRQHandler>:
 8002984:	b508      	push	{r3, lr}
 8002986:	4802      	ldr	r0, [pc, #8]	@ (8002990 <USART1_IRQHandler+0xc>)
 8002988:	f002 fc56 	bl	8005238 <HAL_UART_IRQHandler>
 800298c:	bd08      	pop	{r3, pc}
 800298e:	bf00      	nop
 8002990:	20000350 	.word	0x20000350

08002994 <USART2_IRQHandler>:
 8002994:	b508      	push	{r3, lr}
 8002996:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <USART2_IRQHandler+0xc>)
 8002998:	f002 fc4e 	bl	8005238 <HAL_UART_IRQHandler>
 800299c:	bd08      	pop	{r3, pc}
 800299e:	bf00      	nop
 80029a0:	20000308 	.word	0x20000308

080029a4 <USART3_IRQHandler>:
 80029a4:	b508      	push	{r3, lr}
 80029a6:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <USART3_IRQHandler+0xc>)
 80029a8:	f002 fc46 	bl	8005238 <HAL_UART_IRQHandler>
 80029ac:	bd08      	pop	{r3, pc}
 80029ae:	bf00      	nop
 80029b0:	200002c0 	.word	0x200002c0

080029b4 <_getpid>:
 80029b4:	2001      	movs	r0, #1
 80029b6:	4770      	bx	lr

080029b8 <_kill>:
 80029b8:	b508      	push	{r3, lr}
 80029ba:	f004 fed3 	bl	8007764 <__errno>
 80029be:	2316      	movs	r3, #22
 80029c0:	6003      	str	r3, [r0, #0]
 80029c2:	f04f 30ff 	mov.w	r0, #4294967295
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <_exit>:
 80029c8:	b508      	push	{r3, lr}
 80029ca:	f04f 31ff 	mov.w	r1, #4294967295
 80029ce:	f7ff fff3 	bl	80029b8 <_kill>
 80029d2:	e7fe      	b.n	80029d2 <_exit+0xa>

080029d4 <_read>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	460c      	mov	r4, r1
 80029d8:	4616      	mov	r6, r2
 80029da:	2500      	movs	r5, #0
 80029dc:	e006      	b.n	80029ec <_read+0x18>
 80029de:	f3af 8000 	nop.w
 80029e2:	4621      	mov	r1, r4
 80029e4:	f801 0b01 	strb.w	r0, [r1], #1
 80029e8:	3501      	adds	r5, #1
 80029ea:	460c      	mov	r4, r1
 80029ec:	42b5      	cmp	r5, r6
 80029ee:	dbf6      	blt.n	80029de <_read+0xa>
 80029f0:	4630      	mov	r0, r6
 80029f2:	bd70      	pop	{r4, r5, r6, pc}

080029f4 <_close>:
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	4770      	bx	lr

080029fa <_fstat>:
 80029fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	2000      	movs	r0, #0
 8002a02:	4770      	bx	lr

08002a04 <_isatty>:
 8002a04:	2001      	movs	r0, #1
 8002a06:	4770      	bx	lr

08002a08 <_lseek>:
 8002a08:	2000      	movs	r0, #0
 8002a0a:	4770      	bx	lr

08002a0c <_sbrk>:
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4a0c      	ldr	r2, [pc, #48]	@ (8002a44 <_sbrk+0x38>)
 8002a12:	490d      	ldr	r1, [pc, #52]	@ (8002a48 <_sbrk+0x3c>)
 8002a14:	480d      	ldr	r0, [pc, #52]	@ (8002a4c <_sbrk+0x40>)
 8002a16:	6800      	ldr	r0, [r0, #0]
 8002a18:	b140      	cbz	r0, 8002a2c <_sbrk+0x20>
 8002a1a:	480c      	ldr	r0, [pc, #48]	@ (8002a4c <_sbrk+0x40>)
 8002a1c:	6800      	ldr	r0, [r0, #0]
 8002a1e:	4403      	add	r3, r0
 8002a20:	1a52      	subs	r2, r2, r1
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d806      	bhi.n	8002a34 <_sbrk+0x28>
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <_sbrk+0x40>)
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	bd10      	pop	{r4, pc}
 8002a2c:	4807      	ldr	r0, [pc, #28]	@ (8002a4c <_sbrk+0x40>)
 8002a2e:	4c08      	ldr	r4, [pc, #32]	@ (8002a50 <_sbrk+0x44>)
 8002a30:	6004      	str	r4, [r0, #0]
 8002a32:	e7f2      	b.n	8002a1a <_sbrk+0xe>
 8002a34:	f004 fe96 	bl	8007764 <__errno>
 8002a38:	230c      	movs	r3, #12
 8002a3a:	6003      	str	r3, [r0, #0]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	e7f3      	b.n	8002a2a <_sbrk+0x1e>
 8002a42:	bf00      	nop
 8002a44:	20005000 	.word	0x20005000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	20000460 	.word	0x20000460
 8002a50:	20001618 	.word	0x20001618

08002a54 <SystemInit>:
 8002a54:	4770      	bx	lr
	...

08002a58 <Reset_Handler>:
 8002a58:	f7ff fffc 	bl	8002a54 <SystemInit>
 8002a5c:	480b      	ldr	r0, [pc, #44]	@ (8002a8c <LoopFillZerobss+0xe>)
 8002a5e:	490c      	ldr	r1, [pc, #48]	@ (8002a90 <LoopFillZerobss+0x12>)
 8002a60:	4a0c      	ldr	r2, [pc, #48]	@ (8002a94 <LoopFillZerobss+0x16>)
 8002a62:	2300      	movs	r3, #0
 8002a64:	e002      	b.n	8002a6c <LoopCopyDataInit>

08002a66 <CopyDataInit>:
 8002a66:	58d4      	ldr	r4, [r2, r3]
 8002a68:	50c4      	str	r4, [r0, r3]
 8002a6a:	3304      	adds	r3, #4

08002a6c <LoopCopyDataInit>:
 8002a6c:	18c4      	adds	r4, r0, r3
 8002a6e:	428c      	cmp	r4, r1
 8002a70:	d3f9      	bcc.n	8002a66 <CopyDataInit>
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <LoopFillZerobss+0x1a>)
 8002a74:	4c09      	ldr	r4, [pc, #36]	@ (8002a9c <LoopFillZerobss+0x1e>)
 8002a76:	2300      	movs	r3, #0
 8002a78:	e001      	b.n	8002a7e <LoopFillZerobss>

08002a7a <FillZerobss>:
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	3204      	adds	r2, #4

08002a7e <LoopFillZerobss>:
 8002a7e:	42a2      	cmp	r2, r4
 8002a80:	d3fb      	bcc.n	8002a7a <FillZerobss>
 8002a82:	f004 fe75 	bl	8007770 <__libc_init_array>
 8002a86:	f7ff fdff 	bl	8002688 <main>
 8002a8a:	4770      	bx	lr
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	200001e8 	.word	0x200001e8
 8002a94:	08009c64 	.word	0x08009c64
 8002a98:	200001e8 	.word	0x200001e8
 8002a9c:	20001618 	.word	0x20001618

08002aa0 <ADC1_2_IRQHandler>:
 8002aa0:	e7fe      	b.n	8002aa0 <ADC1_2_IRQHandler>
	...

08002aa4 <HAL_Init>:
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <HAL_Init+0x28>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a07      	ldr	r2, [pc, #28]	@ (8002acc <HAL_Init+0x28>)
 8002aae:	f043 0310 	orr.w	r3, r3, #16
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 fe4d 	bl	8003754 <HAL_NVIC_SetPriorityGrouping>
 8002aba:	200f      	movs	r0, #15
 8002abc:	f000 f808 	bl	8002ad0 <HAL_InitTick>
 8002ac0:	f7ff fde6 	bl	8002690 <HAL_MspInit>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40022000 	.word	0x40022000

08002ad0 <HAL_InitTick>:
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_InitTick+0x54>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <HAL_InitTick+0x58>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fe65 	bl	80037be <HAL_SYSTICK_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_InitTick+0x2e>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00e      	b.n	8002b1c <HAL_InitTick+0x4c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d80a      	bhi.n	8002b1a <HAL_InitTick+0x4a>
 8002b04:	2200      	movs	r2, #0
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f000 fe2d 	bl	800376a <HAL_NVIC_SetPriority>
 8002b10:	4a06      	ldr	r2, [pc, #24]	@ (8002b2c <HAL_InitTick+0x5c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x4c>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000008 	.word	0x20000008
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_IncTick>:
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_IncTick+0x1c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a03      	ldr	r2, [pc, #12]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000008 	.word	0x20000008
 8002b50:	20000464 	.word	0x20000464

08002b54 <HAL_GetTick>:
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4b02      	ldr	r3, [pc, #8]	@ (8002b64 <HAL_GetTick+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000464 	.word	0x20000464

08002b68 <HAL_Delay>:
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	f7ff fff0 	bl	8002b54 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d005      	beq.n	8002b8e <HAL_Delay+0x26>
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_Delay+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	bf00      	nop
 8002b90:	f7ff ffe0 	bl	8002b54 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d8f7      	bhi.n	8002b90 <HAL_Delay+0x28>
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000008 	.word	0x20000008

08002bb0 <HAL_ADC_Init>:
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	75fb      	strb	r3, [r7, #23]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_Init+0x22>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0be      	b.n	8002d50 <HAL_ADC_Init+0x1a0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d109      	bne.n	8002bf4 <HAL_ADC_Init+0x44>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fd70 	bl	80026d4 <HAL_ADC_MspInit>
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fbf1 	bl	80033dc <ADC_ConversionStop_Disable>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8099 	bne.w	8002d3e <HAL_ADC_Init+0x18e>
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 8095 	bne.w	8002d3e <HAL_ADC_Init+0x18e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c1c:	f023 0302 	bic.w	r3, r3, #2
 8002c20:	f043 0202 	orr.w	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7b1b      	ldrb	r3, [r3, #12]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c48:	d003      	beq.n	8002c52 <HAL_ADC_Init+0xa2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_ADC_Init+0xa8>
 8002c52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c56:	e000      	b.n	8002c5a <HAL_ADC_Init+0xaa>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7d1b      	ldrb	r3, [r3, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d119      	bne.n	8002c9c <HAL_ADC_Init+0xec>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_ADC_Init+0xd4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	035a      	lsls	r2, r3, #13
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e00b      	b.n	8002c9c <HAL_ADC_Init+0xec>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <HAL_ADC_Init+0x1a8>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6093      	str	r3, [r2, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ccc:	d003      	beq.n	8002cd6 <HAL_ADC_Init+0x126>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d104      	bne.n	8002ce0 <HAL_ADC_Init+0x130>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	051b      	lsls	r3, r3, #20
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	4b18      	ldr	r3, [pc, #96]	@ (8002d5c <HAL_ADC_Init+0x1ac>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d10b      	bne.n	8002d1c <HAL_ADC_Init+0x16c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d1a:	e018      	b.n	8002d4e <HAL_ADC_Init+0x19e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	f023 0312 	bic.w	r3, r3, #18
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
 8002d3c:	e007      	b.n	8002d4e <HAL_ADC_Init+0x19e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	ffe1f7fd 	.word	0xffe1f7fd
 8002d5c:	ff1f0efe 	.word	0xff1f0efe

08002d60 <HAL_ADC_Start>:
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Start+0x1a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e098      	b.n	8002eac <HAL_ADC_Start+0x14c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fad0 	bl	8003328 <ADC_Enable>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 8087 	bne.w	8002ea2 <HAL_ADC_Start+0x142>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a41      	ldr	r2, [pc, #260]	@ (8002eb4 <HAL_ADC_Start+0x154>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d105      	bne.n	8002dbe <HAL_ADC_Start+0x5e>
 8002db2:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <HAL_ADC_Start+0x158>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_ADC_Start+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d026      	beq.n	8002e26 <HAL_ADC_Start+0xc6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002de0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002de8:	e01d      	b.n	8002e26 <HAL_ADC_Start+0xc6>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb8 <HAL_ADC_Start+0x158>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_ADC_Start+0xaa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb4 <HAL_ADC_Start+0x154>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10d      	bne.n	8002e26 <HAL_ADC_Start+0xc6>
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb8 <HAL_ADC_Start+0x158>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_ADC_Start+0xc6>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <HAL_ADC_Start+0xe0>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	f023 0206 	bic.w	r2, r3, #6
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e3e:	e002      	b.n	8002e46 <HAL_ADC_Start+0xe6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f06f 0202 	mvn.w	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e62:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e66:	d113      	bne.n	8002e90 <HAL_ADC_Start+0x130>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	@ (8002eb4 <HAL_ADC_Start+0x154>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d105      	bne.n	8002e7e <HAL_ADC_Start+0x11e>
 8002e72:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <HAL_ADC_Start+0x158>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d108      	bne.n	8002e90 <HAL_ADC_Start+0x130>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	e00c      	b.n	8002eaa <HAL_ADC_Start+0x14a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e003      	b.n	8002eaa <HAL_ADC_Start+0x14a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40012800 	.word	0x40012800
 8002eb8:	40012400 	.word	0x40012400

08002ebc <HAL_ADC_Stop>:
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Stop+0x1a>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e01a      	b.n	8002f0c <HAL_ADC_Stop+0x50>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fa7c 	bl	80033dc <ADC_ConversionStop_Disable>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_ADC_Stop+0x46>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_ADC_PollForConversion>:
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	f7ff fe13 	bl	8002b54 <HAL_GetTick>
 8002f2e:	6178      	str	r0, [r7, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_ADC_PollForConversion+0x42>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0d3      	b.n	80030fe <HAL_ADC_PollForConversion+0x1ea>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d131      	bne.n	8002fc8 <HAL_ADC_PollForConversion+0xb4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d12a      	bne.n	8002fc8 <HAL_ADC_PollForConversion+0xb4>
 8002f72:	e021      	b.n	8002fb8 <HAL_ADC_PollForConversion+0xa4>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_ADC_PollForConversion+0xa4>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_ADC_PollForConversion+0x7e>
 8002f82:	f7ff fde7 	bl	8002b54 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d212      	bcs.n	8002fb8 <HAL_ADC_PollForConversion+0xa4>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_ADC_PollForConversion+0xa4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0a2      	b.n	80030fe <HAL_ADC_PollForConversion+0x1ea>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0d6      	beq.n	8002f74 <HAL_ADC_PollForConversion+0x60>
 8002fc6:	e070      	b.n	80030aa <HAL_ADC_PollForConversion+0x196>
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003108 <HAL_ADC_PollForConversion+0x1f4>)
 8002fca:	681c      	ldr	r4, [r3, #0]
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f001 fb1d 	bl	800460c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	fbb4 f2f3 	udiv	r2, r4, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	4b4b      	ldr	r3, [pc, #300]	@ (800310c <HAL_ADC_PollForConversion+0x1f8>)
 8002fe0:	400b      	ands	r3, r1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_ADC_PollForConversion+0x104>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68d9      	ldr	r1, [r3, #12]
 8002fec:	4b48      	ldr	r3, [pc, #288]	@ (8003110 <HAL_ADC_PollForConversion+0x1fc>)
 8002fee:	400b      	ands	r3, r1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d111      	bne.n	8003018 <HAL_ADC_PollForConversion+0x104>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6919      	ldr	r1, [r3, #16]
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_ADC_PollForConversion+0x200>)
 8002ffc:	400b      	ands	r3, r1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_ADC_PollForConversion+0x100>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68d9      	ldr	r1, [r3, #12]
 8003008:	4b43      	ldr	r3, [pc, #268]	@ (8003118 <HAL_ADC_PollForConversion+0x204>)
 800300a:	400b      	ands	r3, r1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_ADC_PollForConversion+0x100>
 8003010:	2314      	movs	r3, #20
 8003012:	e020      	b.n	8003056 <HAL_ADC_PollForConversion+0x142>
 8003014:	2329      	movs	r3, #41	@ 0x29
 8003016:	e01e      	b.n	8003056 <HAL_ADC_PollForConversion+0x142>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6919      	ldr	r1, [r3, #16]
 800301e:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <HAL_ADC_PollForConversion+0x200>)
 8003020:	400b      	ands	r3, r1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_ADC_PollForConversion+0x120>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68d9      	ldr	r1, [r3, #12]
 800302c:	4b3a      	ldr	r3, [pc, #232]	@ (8003118 <HAL_ADC_PollForConversion+0x204>)
 800302e:	400b      	ands	r3, r1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <HAL_ADC_PollForConversion+0x13c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	4b38      	ldr	r3, [pc, #224]	@ (800311c <HAL_ADC_PollForConversion+0x208>)
 800303c:	400b      	ands	r3, r1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <HAL_ADC_PollForConversion+0x140>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	4b34      	ldr	r3, [pc, #208]	@ (800311c <HAL_ADC_PollForConversion+0x208>)
 800304a:	400b      	ands	r3, r1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_PollForConversion+0x140>
 8003050:	2354      	movs	r3, #84	@ 0x54
 8003052:	e000      	b.n	8003056 <HAL_ADC_PollForConversion+0x142>
 8003054:	23fc      	movs	r3, #252	@ 0xfc
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	e021      	b.n	80030a2 <HAL_ADC_PollForConversion+0x18e>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d01a      	beq.n	800309c <HAL_ADC_PollForConversion+0x188>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_ADC_PollForConversion+0x168>
 800306c:	f7ff fd72 	bl	8002b54 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d20f      	bcs.n	800309c <HAL_ADC_PollForConversion+0x188>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d90b      	bls.n	800309c <HAL_ADC_PollForConversion+0x188>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003098:	2303      	movs	r3, #3
 800309a:	e030      	b.n	80030fe <HAL_ADC_PollForConversion+0x1ea>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d8d9      	bhi.n	800305e <HAL_ADC_PollForConversion+0x14a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f06f 0212 	mvn.w	r2, #18
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80030ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80030ce:	d115      	bne.n	80030fc <HAL_ADC_PollForConversion+0x1e8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7b1b      	ldrb	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <HAL_ADC_PollForConversion+0x1e8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_PollForConversion+0x1e8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80030fc:	2300      	movs	r3, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd90      	pop	{r4, r7, pc}
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000
 800310c:	24924924 	.word	0x24924924
 8003110:	00924924 	.word	0x00924924
 8003114:	12492492 	.word	0x12492492
 8003118:	00492492 	.word	0x00492492
 800311c:	00249249 	.word	0x00249249

08003120 <HAL_ADC_GetValue>:
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_ADC_ConfigChannel>:
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x20>
 8003154:	2302      	movs	r3, #2
 8003156:	e0dc      	b.n	8003312 <HAL_ADC_ConfigChannel+0x1da>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b06      	cmp	r3, #6
 8003166:	d81c      	bhi.n	80031a2 <HAL_ADC_ConfigChannel+0x6a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	3b05      	subs	r3, #5
 800317a:	221f      	movs	r2, #31
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	4019      	ands	r1, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	3b05      	subs	r3, #5
 8003194:	fa00 f203 	lsl.w	r2, r0, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	635a      	str	r2, [r3, #52]	@ 0x34
 80031a0:	e03c      	b.n	800321c <HAL_ADC_ConfigChannel+0xe4>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d81c      	bhi.n	80031e4 <HAL_ADC_ConfigChannel+0xac>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b23      	subs	r3, #35	@ 0x23
 80031bc:	221f      	movs	r2, #31
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	4019      	ands	r1, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b23      	subs	r3, #35	@ 0x23
 80031d6:	fa00 f203 	lsl.w	r2, r0, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80031e2:	e01b      	b.n	800321c <HAL_ADC_ConfigChannel+0xe4>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	3b41      	subs	r3, #65	@ 0x41
 80031f6:	221f      	movs	r2, #31
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	4019      	ands	r1, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b41      	subs	r3, #65	@ 0x41
 8003210:	fa00 f203 	lsl.w	r2, r0, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b09      	cmp	r3, #9
 8003222:	d91c      	bls.n	800325e <HAL_ADC_ConfigChannel+0x126>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68d9      	ldr	r1, [r3, #12]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	3b1e      	subs	r3, #30
 8003236:	2207      	movs	r2, #7
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	4019      	ands	r1, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6898      	ldr	r0, [r3, #8]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	3b1e      	subs	r3, #30
 8003250:	fa00 f203 	lsl.w	r2, r0, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	e019      	b.n	8003292 <HAL_ADC_ConfigChannel+0x15a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6919      	ldr	r1, [r3, #16]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	2207      	movs	r2, #7
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	4019      	ands	r1, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6898      	ldr	r0, [r3, #8]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	fa00 f203 	lsl.w	r2, r0, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	611a      	str	r2, [r3, #16]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b10      	cmp	r3, #16
 8003298:	d003      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x16a>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b11      	cmp	r3, #17
 80032a0:	d132      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1d0>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	@ (800331c <HAL_ADC_ConfigChannel+0x1e4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d125      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1c0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d126      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1d0>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d11a      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1d0>
 80032d2:	4b13      	ldr	r3, [pc, #76]	@ (8003320 <HAL_ADC_ConfigChannel+0x1e8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <HAL_ADC_ConfigChannel+0x1ec>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	0c9a      	lsrs	r2, r3, #18
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	e002      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x1b8>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f9      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x1b2>
 80032f6:	e007      	b.n	8003308 <HAL_ADC_ConfigChannel+0x1d0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	@ 0x28
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012400 	.word	0x40012400
 8003320:	20000000 	.word	0x20000000
 8003324:	431bde83 	.word	0x431bde83

08003328 <ADC_Enable>:
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d040      	beq.n	80033c8 <ADC_Enable+0xa0>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	4b1f      	ldr	r3, [pc, #124]	@ (80033d4 <ADC_Enable+0xac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <ADC_Enable+0xb0>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	0c9b      	lsrs	r3, r3, #18
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	e002      	b.n	800336c <ADC_Enable+0x44>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <ADC_Enable+0x3e>
 8003372:	f7ff fbef 	bl	8002b54 <HAL_GetTick>
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	e01f      	b.n	80033ba <ADC_Enable+0x92>
 800337a:	f7ff fbeb 	bl	8002b54 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d918      	bls.n	80033ba <ADC_Enable+0x92>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b01      	cmp	r3, #1
 8003394:	d011      	beq.n	80033ba <ADC_Enable+0x92>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	f043 0210 	orr.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <ADC_Enable+0xa2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d1d8      	bne.n	800337a <ADC_Enable+0x52>
 80033c8:	2300      	movs	r3, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000000 	.word	0x20000000
 80033d8:	431bde83 	.word	0x431bde83

080033dc <ADC_ConversionStop_Disable>:
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d12e      	bne.n	8003454 <ADC_ConversionStop_Disable+0x78>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	f7ff fba5 	bl	8002b54 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	e01b      	b.n	8003446 <ADC_ConversionStop_Disable+0x6a>
 800340e:	f7ff fba1 	bl	8002b54 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d914      	bls.n	8003446 <ADC_ConversionStop_Disable+0x6a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d10d      	bne.n	8003446 <ADC_ConversionStop_Disable+0x6a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	629a      	str	r2, [r3, #40]	@ 0x28
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <ADC_ConversionStop_Disable+0x7a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d0dc      	beq.n	800340e <ADC_ConversionStop_Disable+0x32>
 8003454:	2300      	movs	r3, #0
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_ADCEx_Calibration_Start>:
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	2300      	movs	r3, #0
 800346a:	75fb      	strb	r3, [r7, #23]
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_ADCEx_Calibration_Start+0x1e>
 800347a:	2302      	movs	r3, #2
 800347c:	e097      	b.n	80035ae <HAL_ADCEx_Calibration_Start+0x14e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffa8 	bl	80033dc <ADC_ConversionStop_Disable>
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff49 	bl	8003328 <ADC_Enable>
 8003496:	4603      	mov	r3, r0
 8003498:	75fb      	strb	r3, [r7, #23]
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 8081 	bne.w	80035a4 <HAL_ADCEx_Calibration_Start+0x144>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034aa:	f023 0302 	bic.w	r3, r3, #2
 80034ae:	f043 0202 	orr.w	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80034b6:	4b40      	ldr	r3, [pc, #256]	@ (80035b8 <HAL_ADCEx_Calibration_Start+0x158>)
 80034b8:	681c      	ldr	r4, [r3, #0]
 80034ba:	2002      	movs	r0, #2
 80034bc:	f001 f8a6 	bl	800460c <HAL_RCCEx_GetPeriphCLKFreq>
 80034c0:	4603      	mov	r3, r0
 80034c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e002      	b.n	80034d2 <HAL_ADCEx_Calibration_Start+0x72>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f9      	bne.n	80034cc <HAL_ADCEx_Calibration_Start+0x6c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0208 	orr.w	r2, r2, #8
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	f7ff fb34 	bl	8002b54 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]
 80034ee:	e01b      	b.n	8003528 <HAL_ADCEx_Calibration_Start+0xc8>
 80034f0:	f7ff fb30 	bl	8002b54 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b0a      	cmp	r3, #10
 80034fc:	d914      	bls.n	8003528 <HAL_ADCEx_Calibration_Start+0xc8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <HAL_ADCEx_Calibration_Start+0xc8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	f023 0312 	bic.w	r3, r3, #18
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	@ 0x28
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003524:	2301      	movs	r3, #1
 8003526:	e042      	b.n	80035ae <HAL_ADCEx_Calibration_Start+0x14e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1dc      	bne.n	80034f0 <HAL_ADCEx_Calibration_Start+0x90>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0204 	orr.w	r2, r2, #4
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	f7ff fb05 	bl	8002b54 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]
 800354c:	e01b      	b.n	8003586 <HAL_ADCEx_Calibration_Start+0x126>
 800354e:	f7ff fb01 	bl	8002b54 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b0a      	cmp	r3, #10
 800355a:	d914      	bls.n	8003586 <HAL_ADCEx_Calibration_Start+0x126>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <HAL_ADCEx_Calibration_Start+0x126>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	f023 0312 	bic.w	r3, r3, #18
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	@ 0x28
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003582:	2301      	movs	r3, #1
 8003584:	e013      	b.n	80035ae <HAL_ADCEx_Calibration_Start+0x14e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1dc      	bne.n	800354e <HAL_ADCEx_Calibration_Start+0xee>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	f023 0303 	bic.w	r3, r3, #3
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	4618      	mov	r0, r3
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000000 	.word	0x20000000

080035bc <__NVIC_SetPriorityGrouping>:
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <__NVIC_SetPriorityGrouping+0x44>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <__NVIC_SetPriorityGrouping+0x44>)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	60d3      	str	r3, [r2, #12]
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_GetPriorityGrouping>:
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <__NVIC_GetPriorityGrouping+0x18>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_EnableIRQ>:
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	2b00      	cmp	r3, #0
 8003630:	db0b      	blt.n	800364a <__NVIC_EnableIRQ+0x2a>
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4906      	ldr	r1, [pc, #24]	@ (8003654 <__NVIC_EnableIRQ+0x34>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	2001      	movs	r0, #1
 8003642:	fa00 f202 	lsl.w	r2, r0, r2
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100

08003658 <__NVIC_SetPriority>:
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db0a      	blt.n	8003682 <__NVIC_SetPriority+0x2a>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	490c      	ldr	r1, [pc, #48]	@ (80036a4 <__NVIC_SetPriority+0x4c>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	440b      	add	r3, r1
 800367c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003680:	e00a      	b.n	8003698 <__NVIC_SetPriority+0x40>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4908      	ldr	r1, [pc, #32]	@ (80036a8 <__NVIC_SetPriority+0x50>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3b04      	subs	r3, #4
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	440b      	add	r3, r1
 8003696:	761a      	strb	r2, [r3, #24]
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <NVIC_EncodePriority>:
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	@ 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f1c3 0307 	rsb	r3, r3, #7
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	bf28      	it	cs
 80036ca:	2304      	movcs	r3, #4
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d902      	bls.n	80036dc <NVIC_EncodePriority+0x30>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3b03      	subs	r3, #3
 80036da:	e000      	b.n	80036de <NVIC_EncodePriority+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	401a      	ands	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	409a      	lsls	r2, r3
 80036f4:	f04f 31ff 	mov.w	r1, #4294967295
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43d9      	mvns	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	400b      	ands	r3, r1
 8003704:	4313      	orrs	r3, r2
 8003706:	4618      	mov	r0, r3
 8003708:	3724      	adds	r7, #36	@ 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <SysTick_Config>:
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003720:	d301      	bcc.n	8003726 <SysTick_Config+0x16>
 8003722:	2301      	movs	r3, #1
 8003724:	e00f      	b.n	8003746 <SysTick_Config+0x36>
 8003726:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <SysTick_Config+0x40>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	6053      	str	r3, [r2, #4]
 800372e:	210f      	movs	r1, #15
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f7ff ff90 	bl	8003658 <__NVIC_SetPriority>
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <SysTick_Config+0x40>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <SysTick_Config+0x40>)
 8003740:	2207      	movs	r2, #7
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	e000e010 	.word	0xe000e010

08003754 <HAL_NVIC_SetPriorityGrouping>:
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ff2d 	bl	80035bc <__NVIC_SetPriorityGrouping>
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_SetPriority>:
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f7ff ff42 	bl	8003604 <__NVIC_GetPriorityGrouping>
 8003780:	6178      	str	r0, [r7, #20]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff ff90 	bl	80036ac <NVIC_EncodePriority>
 800378c:	4602      	mov	r2, r0
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff5f 	bl	8003658 <__NVIC_SetPriority>
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_EnableIRQ>:
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	71fb      	strb	r3, [r7, #7]
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff35 	bl	8003620 <__NVIC_EnableIRQ>
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SYSTICK_Config>:
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffa2 	bl	8003710 <SysTick_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_CRC_Init>:
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_CRC_Init+0x12>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e00e      	b.n	8003806 <HAL_CRC_Init+0x30>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	795b      	ldrb	r3, [r3, #5]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <HAL_CRC_Init+0x28>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	711a      	strb	r2, [r3, #4]
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7fe ff9b 	bl	8002734 <HAL_CRC_MspInit>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	715a      	strb	r2, [r3, #5]
 8003804:	2300      	movs	r3, #0
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_DMA_Abort>:
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d008      	beq.n	8003838 <HAL_DMA_Abort+0x2a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2204      	movs	r2, #4
 800382a:	639a      	str	r2, [r3, #56]	@ 0x38
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2020 	strb.w	r2, [r3, #32]
 8003834:	2301      	movs	r3, #1
 8003836:	e020      	b.n	800387a <HAL_DMA_Abort+0x6c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 020e 	bic.w	r2, r2, #14
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2020 	strb.w	r2, [r3, #32]
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <HAL_DMA_Abort_IT>:
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d005      	beq.n	80038a8 <HAL_DMA_Abort_IT+0x24>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2204      	movs	r2, #4
 80038a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e051      	b.n	800394c <HAL_DMA_Abort_IT+0xc8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 020e 	bic.w	r2, r2, #14
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a22      	ldr	r2, [pc, #136]	@ (8003958 <HAL_DMA_Abort_IT+0xd4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d029      	beq.n	8003926 <HAL_DMA_Abort_IT+0xa2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	@ (800395c <HAL_DMA_Abort_IT+0xd8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_DMA_Abort_IT+0x9e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003960 <HAL_DMA_Abort_IT+0xdc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01a      	beq.n	800391c <HAL_DMA_Abort_IT+0x98>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <HAL_DMA_Abort_IT+0xe0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d012      	beq.n	8003916 <HAL_DMA_Abort_IT+0x92>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_DMA_Abort_IT+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00a      	beq.n	8003910 <HAL_DMA_Abort_IT+0x8c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <HAL_DMA_Abort_IT+0xe8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d102      	bne.n	800390a <HAL_DMA_Abort_IT+0x86>
 8003904:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003908:	e00e      	b.n	8003928 <HAL_DMA_Abort_IT+0xa4>
 800390a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800390e:	e00b      	b.n	8003928 <HAL_DMA_Abort_IT+0xa4>
 8003910:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003914:	e008      	b.n	8003928 <HAL_DMA_Abort_IT+0xa4>
 8003916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800391a:	e005      	b.n	8003928 <HAL_DMA_Abort_IT+0xa4>
 800391c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003920:	e002      	b.n	8003928 <HAL_DMA_Abort_IT+0xa4>
 8003922:	2310      	movs	r3, #16
 8003924:	e000      	b.n	8003928 <HAL_DMA_Abort_IT+0xa4>
 8003926:	2301      	movs	r3, #1
 8003928:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <HAL_DMA_Abort_IT+0xec>)
 800392a:	6053      	str	r3, [r2, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2020 	strb.w	r2, [r3, #32]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_Abort_IT+0xc8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40020008 	.word	0x40020008
 800395c:	4002001c 	.word	0x4002001c
 8003960:	40020030 	.word	0x40020030
 8003964:	40020044 	.word	0x40020044
 8003968:	40020058 	.word	0x40020058
 800396c:	4002006c 	.word	0x4002006c
 8003970:	40020000 	.word	0x40020000

08003974 <HAL_GPIO_Init>:
 8003974:	b480      	push	{r7}
 8003976:	b08b      	sub	sp, #44	@ 0x2c
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	e169      	b.n	8003c5c <HAL_GPIO_Init+0x2e8>
 8003988:	2201      	movs	r2, #1
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f040 8158 	bne.w	8003c56 <HAL_GPIO_Init+0x2e2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a9a      	ldr	r2, [pc, #616]	@ (8003c14 <HAL_GPIO_Init+0x2a0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d05e      	beq.n	8003a6e <HAL_GPIO_Init+0xfa>
 80039b0:	4a98      	ldr	r2, [pc, #608]	@ (8003c14 <HAL_GPIO_Init+0x2a0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d875      	bhi.n	8003aa2 <HAL_GPIO_Init+0x12e>
 80039b6:	4a98      	ldr	r2, [pc, #608]	@ (8003c18 <HAL_GPIO_Init+0x2a4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d058      	beq.n	8003a6e <HAL_GPIO_Init+0xfa>
 80039bc:	4a96      	ldr	r2, [pc, #600]	@ (8003c18 <HAL_GPIO_Init+0x2a4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d86f      	bhi.n	8003aa2 <HAL_GPIO_Init+0x12e>
 80039c2:	4a96      	ldr	r2, [pc, #600]	@ (8003c1c <HAL_GPIO_Init+0x2a8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d052      	beq.n	8003a6e <HAL_GPIO_Init+0xfa>
 80039c8:	4a94      	ldr	r2, [pc, #592]	@ (8003c1c <HAL_GPIO_Init+0x2a8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d869      	bhi.n	8003aa2 <HAL_GPIO_Init+0x12e>
 80039ce:	4a94      	ldr	r2, [pc, #592]	@ (8003c20 <HAL_GPIO_Init+0x2ac>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04c      	beq.n	8003a6e <HAL_GPIO_Init+0xfa>
 80039d4:	4a92      	ldr	r2, [pc, #584]	@ (8003c20 <HAL_GPIO_Init+0x2ac>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d863      	bhi.n	8003aa2 <HAL_GPIO_Init+0x12e>
 80039da:	4a92      	ldr	r2, [pc, #584]	@ (8003c24 <HAL_GPIO_Init+0x2b0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d046      	beq.n	8003a6e <HAL_GPIO_Init+0xfa>
 80039e0:	4a90      	ldr	r2, [pc, #576]	@ (8003c24 <HAL_GPIO_Init+0x2b0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d85d      	bhi.n	8003aa2 <HAL_GPIO_Init+0x12e>
 80039e6:	2b12      	cmp	r3, #18
 80039e8:	d82a      	bhi.n	8003a40 <HAL_GPIO_Init+0xcc>
 80039ea:	2b12      	cmp	r3, #18
 80039ec:	d859      	bhi.n	8003aa2 <HAL_GPIO_Init+0x12e>
 80039ee:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <HAL_GPIO_Init+0x80>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a6f 	.word	0x08003a6f
 80039f8:	08003a49 	.word	0x08003a49
 80039fc:	08003a5b 	.word	0x08003a5b
 8003a00:	08003a9d 	.word	0x08003a9d
 8003a04:	08003aa3 	.word	0x08003aa3
 8003a08:	08003aa3 	.word	0x08003aa3
 8003a0c:	08003aa3 	.word	0x08003aa3
 8003a10:	08003aa3 	.word	0x08003aa3
 8003a14:	08003aa3 	.word	0x08003aa3
 8003a18:	08003aa3 	.word	0x08003aa3
 8003a1c:	08003aa3 	.word	0x08003aa3
 8003a20:	08003aa3 	.word	0x08003aa3
 8003a24:	08003aa3 	.word	0x08003aa3
 8003a28:	08003aa3 	.word	0x08003aa3
 8003a2c:	08003aa3 	.word	0x08003aa3
 8003a30:	08003aa3 	.word	0x08003aa3
 8003a34:	08003aa3 	.word	0x08003aa3
 8003a38:	08003a51 	.word	0x08003a51
 8003a3c:	08003a65 	.word	0x08003a65
 8003a40:	4a79      	ldr	r2, [pc, #484]	@ (8003c28 <HAL_GPIO_Init+0x2b4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_GPIO_Init+0xfa>
 8003a46:	e02c      	b.n	8003aa2 <HAL_GPIO_Init+0x12e>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	e029      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	3304      	adds	r3, #4
 8003a56:	623b      	str	r3, [r7, #32]
 8003a58:	e024      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	623b      	str	r3, [r7, #32]
 8003a62:	e01f      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	e01a      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_GPIO_Init+0x108>
 8003a76:	2304      	movs	r3, #4
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	e013      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_GPIO_Init+0x11c>
 8003a84:	2308      	movs	r3, #8
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	611a      	str	r2, [r3, #16]
 8003a8e:	e009      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003a90:	2308      	movs	r3, #8
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	615a      	str	r2, [r3, #20]
 8003a9a:	e003      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	e000      	b.n	8003aa4 <HAL_GPIO_Init+0x130>
 8003aa2:	bf00      	nop
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2bff      	cmp	r3, #255	@ 0xff
 8003aa8:	d801      	bhi.n	8003aae <HAL_GPIO_Init+0x13a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	e001      	b.n	8003ab2 <HAL_GPIO_Init+0x13e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2bff      	cmp	r3, #255	@ 0xff
 8003ab8:	d802      	bhi.n	8003ac0 <HAL_GPIO_Init+0x14c>
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	e002      	b.n	8003ac6 <HAL_GPIO_Init+0x152>
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	3b08      	subs	r3, #8
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	210f      	movs	r1, #15
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80b1 	beq.w	8003c56 <HAL_GPIO_Init+0x2e2>
 8003af4:	4b4d      	ldr	r3, [pc, #308]	@ (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	4a4c      	ldr	r2, [pc, #304]	@ (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6193      	str	r3, [r2, #24]
 8003b00:	4b4a      	ldr	r3, [pc, #296]	@ (8003c2c <HAL_GPIO_Init+0x2b8>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4a48      	ldr	r2, [pc, #288]	@ (8003c30 <HAL_GPIO_Init+0x2bc>)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3302      	adds	r3, #2
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a40      	ldr	r2, [pc, #256]	@ (8003c34 <HAL_GPIO_Init+0x2c0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <HAL_GPIO_Init+0x1ec>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c38 <HAL_GPIO_Init+0x2c4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00d      	beq.n	8003b5c <HAL_GPIO_Init+0x1e8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3e      	ldr	r2, [pc, #248]	@ (8003c3c <HAL_GPIO_Init+0x2c8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <HAL_GPIO_Init+0x1e4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8003c40 <HAL_GPIO_Init+0x2cc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_GPIO_Init+0x1e0>
 8003b50:	2303      	movs	r3, #3
 8003b52:	e006      	b.n	8003b62 <HAL_GPIO_Init+0x1ee>
 8003b54:	2304      	movs	r3, #4
 8003b56:	e004      	b.n	8003b62 <HAL_GPIO_Init+0x1ee>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e002      	b.n	8003b62 <HAL_GPIO_Init+0x1ee>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <HAL_GPIO_Init+0x1ee>
 8003b60:	2300      	movs	r3, #0
 8003b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b64:	f002 0203 	and.w	r2, r2, #3
 8003b68:	0092      	lsls	r2, r2, #2
 8003b6a:	4093      	lsls	r3, r2
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	492f      	ldr	r1, [pc, #188]	@ (8003c30 <HAL_GPIO_Init+0x2bc>)
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	3302      	adds	r3, #2
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d006      	beq.n	8003b9a <HAL_GPIO_Init+0x226>
 8003b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	492c      	ldr	r1, [pc, #176]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]
 8003b98:	e006      	b.n	8003ba8 <HAL_GPIO_Init+0x234>
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	4928      	ldr	r1, [pc, #160]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	608b      	str	r3, [r1, #8]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d006      	beq.n	8003bc2 <HAL_GPIO_Init+0x24e>
 8003bb4:	4b23      	ldr	r3, [pc, #140]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4922      	ldr	r1, [pc, #136]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60cb      	str	r3, [r1, #12]
 8003bc0:	e006      	b.n	8003bd0 <HAL_GPIO_Init+0x25c>
 8003bc2:	4b20      	ldr	r3, [pc, #128]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	491e      	ldr	r1, [pc, #120]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60cb      	str	r3, [r1, #12]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <HAL_GPIO_Init+0x276>
 8003bdc:	4b19      	ldr	r3, [pc, #100]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	4918      	ldr	r1, [pc, #96]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_Init+0x284>
 8003bea:	4b16      	ldr	r3, [pc, #88]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	4914      	ldr	r1, [pc, #80]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d021      	beq.n	8003c48 <HAL_GPIO_Init+0x2d4>
 8003c04:	4b0f      	ldr	r3, [pc, #60]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	490e      	ldr	r1, [pc, #56]	@ (8003c44 <HAL_GPIO_Init+0x2d0>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]
 8003c10:	e021      	b.n	8003c56 <HAL_GPIO_Init+0x2e2>
 8003c12:	bf00      	nop
 8003c14:	10320000 	.word	0x10320000
 8003c18:	10310000 	.word	0x10310000
 8003c1c:	10220000 	.word	0x10220000
 8003c20:	10210000 	.word	0x10210000
 8003c24:	10120000 	.word	0x10120000
 8003c28:	10110000 	.word	0x10110000
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010800 	.word	0x40010800
 8003c38:	40010c00 	.word	0x40010c00
 8003c3c:	40011000 	.word	0x40011000
 8003c40:	40011400 	.word	0x40011400
 8003c44:	40010400 	.word	0x40010400
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_GPIO_Init+0x304>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	4909      	ldr	r1, [pc, #36]	@ (8003c78 <HAL_GPIO_Init+0x304>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	3301      	adds	r3, #1
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f47f ae8e 	bne.w	8003988 <HAL_GPIO_Init+0x14>
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	372c      	adds	r7, #44	@ 0x2c
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	40010400 	.word	0x40010400

08003c7c <HAL_RCC_OscConfig>:
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e272      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8087 	beq.w	8003daa <HAL_RCC_OscConfig+0x12e>
 8003c9c:	4b92      	ldr	r3, [pc, #584]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x46>
 8003ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d112      	bne.n	8003cda <HAL_RCC_OscConfig+0x5e>
 8003cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc0:	d10b      	bne.n	8003cda <HAL_RCC_OscConfig+0x5e>
 8003cc2:	4b89      	ldr	r3, [pc, #548]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d06c      	beq.n	8003da8 <HAL_RCC_OscConfig+0x12c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d168      	bne.n	8003da8 <HAL_RCC_OscConfig+0x12c>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e24c      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x76>
 8003ce4:	4b80      	ldr	r3, [pc, #512]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	e02e      	b.n	8003d50 <HAL_RCC_OscConfig+0xd4>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x98>
 8003cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7a      	ldr	r2, [pc, #488]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b78      	ldr	r3, [pc, #480]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a77      	ldr	r2, [pc, #476]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e01d      	b.n	8003d50 <HAL_RCC_OscConfig+0xd4>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0xbc>
 8003d1e:	4b72      	ldr	r3, [pc, #456]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a71      	ldr	r2, [pc, #452]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0xd4>
 8003d38:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b68      	ldr	r3, [pc, #416]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a67      	ldr	r2, [pc, #412]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <HAL_RCC_OscConfig+0x104>
 8003d58:	f7fe fefc 	bl	8002b54 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0xf6>
 8003d60:	f7fe fef8 	bl	8002b54 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	@ 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0xf6>
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e200      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003d72:	4b5d      	ldr	r3, [pc, #372]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0xe4>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x12e>
 8003d80:	f7fe fee8 	bl	8002b54 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x11e>
 8003d88:	f7fe fee4 	bl	8002b54 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	@ 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x11e>
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1ec      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003d9a:	4b53      	ldr	r3, [pc, #332]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x10c>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x12e>
 8003da8:	bf00      	nop
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d063      	beq.n	8003e7e <HAL_RCC_OscConfig+0x202>
 8003db6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_RCC_OscConfig+0x15e>
 8003dc2:	4b49      	ldr	r3, [pc, #292]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x18c>
 8003dce:	4b46      	ldr	r3, [pc, #280]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <HAL_RCC_OscConfig+0x18c>
 8003dda:	4b43      	ldr	r3, [pc, #268]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_RCC_OscConfig+0x176>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x176>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e1c0      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003df2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4939      	ldr	r1, [pc, #228]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
 8003e06:	e03a      	b.n	8003e7e <HAL_RCC_OscConfig+0x202>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d020      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1d6>
 8003e10:	4b36      	ldr	r3, [pc, #216]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f7fe fe9d 	bl	8002b54 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x1b4>
 8003e1e:	f7fe fe99 	bl	8002b54 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x1b4>
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e1a1      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003e30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1a2>
 8003e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4927      	ldr	r1, [pc, #156]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x202>
 8003e52:	4b26      	ldr	r3, [pc, #152]	@ (8003eec <HAL_RCC_OscConfig+0x270>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f7fe fe7c 	bl	8002b54 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x1f6>
 8003e60:	f7fe fe78 	bl	8002b54 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x1f6>
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e180      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003e72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x1e4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03a      	beq.n	8003f00 <HAL_RCC_OscConfig+0x284>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d019      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x24a>
 8003e92:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <HAL_RCC_OscConfig+0x274>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f7fe fe5c 	bl	8002b54 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x236>
 8003ea0:	f7fe fe58 	bl	8002b54 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x236>
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e160      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x224>
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f000 fad0 	bl	8004464 <RCC_Delay>
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCC_OscConfig+0x284>
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef0 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f7fe fe42 	bl	8002b54 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]
 8003ed2:	e00f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x278>
 8003ed4:	f7fe fe3e 	bl	8002b54 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d908      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x278>
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e146      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	42420000 	.word	0x42420000
 8003ef0:	42420480 	.word	0x42420480
 8003ef4:	4b92      	ldr	r3, [pc, #584]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e9      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x258>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a6 	beq.w	800405a <HAL_RCC_OscConfig+0x3de>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	75fb      	strb	r3, [r7, #23]
 8003f12:	4b8b      	ldr	r3, [pc, #556]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2be>
 8003f1e:	4b88      	ldr	r3, [pc, #544]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	4a87      	ldr	r2, [pc, #540]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	61d3      	str	r3, [r2, #28]
 8003f2a:	4b85      	ldr	r3, [pc, #532]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
 8003f3a:	4b82      	ldr	r3, [pc, #520]	@ (8004144 <HAL_RCC_OscConfig+0x4c8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_RCC_OscConfig+0x2fc>
 8003f46:	4b7f      	ldr	r3, [pc, #508]	@ (8004144 <HAL_RCC_OscConfig+0x4c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004144 <HAL_RCC_OscConfig+0x4c8>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	f7fe fdff 	bl	8002b54 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
 8003f5a:	f7fe fdfb 	bl	8002b54 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b64      	cmp	r3, #100	@ 0x64
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x2f0>
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e103      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8003f6c:	4b75      	ldr	r3, [pc, #468]	@ (8004144 <HAL_RCC_OscConfig+0x4c8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2de>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x312>
 8003f80:	4b6f      	ldr	r3, [pc, #444]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	4a6e      	ldr	r2, [pc, #440]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6213      	str	r3, [r2, #32]
 8003f8c:	e02d      	b.n	8003fea <HAL_RCC_OscConfig+0x36e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x334>
 8003f96:	4b6a      	ldr	r3, [pc, #424]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a69      	ldr	r2, [pc, #420]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6213      	str	r3, [r2, #32]
 8003fa2:	4b67      	ldr	r3, [pc, #412]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4a66      	ldr	r2, [pc, #408]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	6213      	str	r3, [r2, #32]
 8003fae:	e01c      	b.n	8003fea <HAL_RCC_OscConfig+0x36e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x356>
 8003fb8:	4b61      	ldr	r3, [pc, #388]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4a60      	ldr	r2, [pc, #384]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	6213      	str	r3, [r2, #32]
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6213      	str	r3, [r2, #32]
 8003fd0:	e00b      	b.n	8003fea <HAL_RCC_OscConfig+0x36e>
 8003fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6213      	str	r3, [r2, #32]
 8003fde:	4b58      	ldr	r3, [pc, #352]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4a57      	ldr	r2, [pc, #348]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	6213      	str	r3, [r2, #32]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d015      	beq.n	800401e <HAL_RCC_OscConfig+0x3a2>
 8003ff2:	f7fe fdaf 	bl	8002b54 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_OscConfig+0x394>
 8003ffa:	f7fe fdab 	bl	8002b54 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x394>
 800400c:	2303      	movs	r3, #3
 800400e:	e0b1      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8004010:	4b4b      	ldr	r3, [pc, #300]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ee      	beq.n	8003ffa <HAL_RCC_OscConfig+0x37e>
 800401c:	e014      	b.n	8004048 <HAL_RCC_OscConfig+0x3cc>
 800401e:	f7fe fd99 	bl	8002b54 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]
 8004024:	e00a      	b.n	800403c <HAL_RCC_OscConfig+0x3c0>
 8004026:	f7fe fd95 	bl	8002b54 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x3c0>
 8004038:	2303      	movs	r3, #3
 800403a:	e09b      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 800403c:	4b40      	ldr	r3, [pc, #256]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ee      	bne.n	8004026 <HAL_RCC_OscConfig+0x3aa>
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <HAL_RCC_OscConfig+0x3de>
 800404e:	4b3c      	ldr	r3, [pc, #240]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4a3b      	ldr	r2, [pc, #236]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004058:	61d3      	str	r3, [r2, #28]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8087 	beq.w	8004172 <HAL_RCC_OscConfig+0x4f6>
 8004064:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d061      	beq.n	8004134 <HAL_RCC_OscConfig+0x4b8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d146      	bne.n	8004106 <HAL_RCC_OscConfig+0x48a>
 8004078:	4b33      	ldr	r3, [pc, #204]	@ (8004148 <HAL_RCC_OscConfig+0x4cc>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f7fe fd69 	bl	8002b54 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x41c>
 8004086:	f7fe fd65 	bl	8002b54 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x41c>
 8004094:	2303      	movs	r3, #3
 8004096:	e06d      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8004098:	4b29      	ldr	r3, [pc, #164]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x40a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ac:	d108      	bne.n	80040c0 <HAL_RCC_OscConfig+0x444>
 80040ae:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	4921      	ldr	r1, [pc, #132]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a19      	ldr	r1, [r3, #32]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	430b      	orrs	r3, r1
 80040d2:	491b      	ldr	r1, [pc, #108]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <HAL_RCC_OscConfig+0x4cc>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f7fe fd39 	bl	8002b54 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x47c>
 80040e6:	f7fe fd35 	bl	8002b54 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x47c>
 80040f4:	2303      	movs	r3, #3
 80040f6:	e03d      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x46a>
 8004104:	e035      	b.n	8004172 <HAL_RCC_OscConfig+0x4f6>
 8004106:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <HAL_RCC_OscConfig+0x4cc>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f7fe fd22 	bl	8002b54 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x4aa>
 8004114:	f7fe fd1e 	bl	8002b54 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x4aa>
 8004122:	2303      	movs	r3, #3
 8004124:	e026      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8004126:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x498>
 8004132:	e01e      	b.n	8004172 <HAL_RCC_OscConfig+0x4f6>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x4d0>
 800413c:	2301      	movs	r3, #1
 800413e:	e019      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8004140:	40021000 	.word	0x40021000
 8004144:	40007000 	.word	0x40007000
 8004148:	42420060 	.word	0x42420060
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_RCC_OscConfig+0x500>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	429a      	cmp	r2, r3
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x4f2>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <HAL_RCC_OscConfig+0x4f6>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_RCC_OscConfig+0x4f8>
 8004172:	2300      	movs	r3, #0
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000

08004180 <HAL_RCC_ClockConfig>:
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x14>
 8004190:	2301      	movs	r3, #1
 8004192:	e0d0      	b.n	8004336 <HAL_RCC_ClockConfig+0x1b6>
 8004194:	4b6a      	ldr	r3, [pc, #424]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d910      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x44>
 80041a2:	4b67      	ldr	r3, [pc, #412]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 0207 	bic.w	r2, r3, #7
 80041aa:	4965      	ldr	r1, [pc, #404]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
 80041b2:	4b63      	ldr	r3, [pc, #396]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x44>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0b8      	b.n	8004336 <HAL_RCC_ClockConfig+0x1b6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_ClockConfig+0x92>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x68>
 80041dc:	4b59      	ldr	r3, [pc, #356]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a58      	ldr	r2, [pc, #352]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80041e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041e6:	6053      	str	r3, [r2, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_ClockConfig+0x80>
 80041f4:	4b53      	ldr	r3, [pc, #332]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4a52      	ldr	r2, [pc, #328]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80041fe:	6053      	str	r3, [r2, #4]
 8004200:	4b50      	ldr	r3, [pc, #320]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	494d      	ldr	r1, [pc, #308]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d040      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x120>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xb6>
 8004226:	4b47      	ldr	r3, [pc, #284]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d115      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
 8004232:	2301      	movs	r3, #1
 8004234:	e07f      	b.n	8004336 <HAL_RCC_ClockConfig+0x1b6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xce>
 800423e:	4b41      	ldr	r3, [pc, #260]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
 800424a:	2301      	movs	r3, #1
 800424c:	e073      	b.n	8004336 <HAL_RCC_ClockConfig+0x1b6>
 800424e:	4b3d      	ldr	r3, [pc, #244]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
 800425a:	2301      	movs	r3, #1
 800425c:	e06b      	b.n	8004336 <HAL_RCC_ClockConfig+0x1b6>
 800425e:	4b39      	ldr	r3, [pc, #228]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4936      	ldr	r1, [pc, #216]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]
 8004270:	f7fe fc70 	bl	8002b54 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x10e>
 8004278:	f7fe fc6c 	bl	8002b54 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x10e>
 800428a:	2303      	movs	r3, #3
 800428c:	e053      	b.n	8004336 <HAL_RCC_ClockConfig+0x1b6>
 800428e:	4b2d      	ldr	r3, [pc, #180]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 020c 	and.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d1eb      	bne.n	8004278 <HAL_RCC_ClockConfig+0xf8>
 80042a0:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d210      	bcs.n	80042d0 <HAL_RCC_ClockConfig+0x150>
 80042ae:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 0207 	bic.w	r2, r3, #7
 80042b6:	4922      	ldr	r1, [pc, #136]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
 80042be:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x150>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e032      	b.n	8004336 <HAL_RCC_ClockConfig+0x1b6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCC_ClockConfig+0x16e>
 80042dc:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4916      	ldr	r1, [pc, #88]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_RCC_ClockConfig+0x18e>
 80042fa:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	490e      	ldr	r1, [pc, #56]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
 800430e:	f000 f821 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004312:	4602      	mov	r2, r0
 8004314:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	490a      	ldr	r1, [pc, #40]	@ (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004320:	5ccb      	ldrb	r3, [r1, r3]
 8004322:	fa22 f303 	lsr.w	r3, r2, r3
 8004326:	4a09      	ldr	r2, [pc, #36]	@ (800434c <HAL_RCC_ClockConfig+0x1cc>)
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_ClockConfig+0x1d0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fbce 	bl	8002ad0 <HAL_InitTick>
 8004334:	2300      	movs	r3, #0
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40022000 	.word	0x40022000
 8004344:	40021000 	.word	0x40021000
 8004348:	080098b0 	.word	0x080098b0
 800434c:	20000000 	.word	0x20000000
 8004350:	20000004 	.word	0x20000004

08004354 <HAL_RCC_GetSysClockFreq>:
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	4b1e      	ldr	r3, [pc, #120]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d002      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x30>
 800437e:	2b08      	cmp	r3, #8
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x36>
 8004382:	e027      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x80>
 8004384:	4b19      	ldr	r3, [pc, #100]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x98>)
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e027      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x86>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	0c9b      	lsrs	r3, r3, #18
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004394:	5cd3      	ldrb	r3, [r2, r3]
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d010      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x70>
 80043a2:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0c5b      	lsrs	r3, r3, #17
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	4a11      	ldr	r2, [pc, #68]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043ae:	5cd3      	ldrb	r3, [r2, r3]
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x98>)
 80043b6:	fb03 f202 	mul.w	r2, r3, r2
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e004      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x7a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0c      	ldr	r2, [pc, #48]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x86>
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCC_GetSysClockFreq+0xa8>)
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	bf00      	nop
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4618      	mov	r0, r3
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	080098c0 	.word	0x080098c0
 80043f4:	080098d0 	.word	0x080098d0
 80043f8:	003d0900 	.word	0x003d0900
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
 8004404:	4b02      	ldr	r3, [pc, #8]	@ (8004410 <HAL_RCC_GetHCLKFreq+0x10>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	20000000 	.word	0x20000000

08004414 <HAL_RCC_GetPCLK1Freq>:
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
 8004418:	f7ff fff2 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4903      	ldr	r1, [pc, #12]	@ (8004438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	080098a8 	.word	0x080098a8

0800443c <HAL_RCC_GetPCLK2Freq>:
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
 8004440:	f7ff ffde 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	0adb      	lsrs	r3, r3, #11
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	@ (8004460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	080098a8 	.word	0x080098a8

08004464 <RCC_Delay>:
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <RCC_Delay+0x34>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0a      	ldr	r2, [pc, #40]	@ (800449c <RCC_Delay+0x38>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	0a5b      	lsrs	r3, r3, #9
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	bf00      	nop
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	60fa      	str	r2, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f9      	bne.n	8004480 <RCC_Delay+0x1c>
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	20000000 	.word	0x20000000
 800449c:	10624dd3 	.word	0x10624dd3

080044a0 <HAL_RCCEx_PeriphCLKConfig>:
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d07d      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80044bc:	2300      	movs	r3, #0
 80044be:	75fb      	strb	r3, [r7, #23]
 80044c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80044cc:	4b4c      	ldr	r3, [pc, #304]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	61d3      	str	r3, [r2, #28]
 80044d8:	4b49      	ldr	r3, [pc, #292]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
 80044e8:	4b46      	ldr	r3, [pc, #280]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d118      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80044f4:	4b43      	ldr	r3, [pc, #268]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a42      	ldr	r2, [pc, #264]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	f7fe fb28 	bl	8002b54 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]
 8004506:	e008      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004508:	f7fe fb24 	bl	8002b54 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	@ 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004516:	2303      	movs	r3, #3
 8004518:	e06d      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 800451a:	4b3a      	ldr	r3, [pc, #232]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004526:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02e      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d027      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004544:	4b2e      	ldr	r3, [pc, #184]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	4b2e      	ldr	r3, [pc, #184]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	4b2c      	ldr	r3, [pc, #176]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	4a29      	ldr	r2, [pc, #164]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6213      	str	r3, [r2, #32]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800456a:	f7fe faf3 	bl	8002b54 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]
 8004570:	e00a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004572:	f7fe faef 	bl	8002b54 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004588:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ee      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004594:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4917      	ldr	r1, [pc, #92]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	620b      	str	r3, [r1, #32]
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80045ac:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	61d3      	str	r3, [r2, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	490b      	ldr	r1, [pc, #44]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	4904      	ldr	r1, [pc, #16]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	2300      	movs	r3, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
 8004608:	42420440 	.word	0x42420440

0800460c <HAL_RCCEx_GetPeriphCLKFreq>:
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b10      	cmp	r3, #16
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b10      	cmp	r3, #16
 8004632:	f200 8089 	bhi.w	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d045      	beq.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d074      	beq.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004642:	e081      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004644:	4b45      	ldr	r3, [pc, #276]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b44      	ldr	r3, [pc, #272]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d07a      	beq.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	0c9b      	lsrs	r3, r3, #18
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	4a40      	ldr	r2, [pc, #256]	@ (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004660:	5cd3      	ldrb	r3, [r2, r3]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 800466e:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	0c5b      	lsrs	r3, r3, #17
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	4a3a      	ldr	r2, [pc, #232]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800467a:	5cd3      	ldrb	r3, [r2, r3]
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004688:	4a37      	ldr	r2, [pc, #220]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e004      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4a33      	ldr	r2, [pc, #204]	@ (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	4b2d      	ldr	r3, [pc, #180]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046b0:	d102      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e049      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e041      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d8:	d108      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e01e      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f6:	d109      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80046f8:	4b18      	ldr	r3, [pc, #96]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004704:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e00e      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004716:	d11b      	bne.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004718:	4b10      	ldr	r3, [pc, #64]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004724:	4b13      	ldr	r3, [pc, #76]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e012      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800472a:	e011      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800472c:	f7ff fe86 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	0b9b      	lsrs	r3, r3, #14
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	3301      	adds	r3, #1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e004      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004748:	bf00      	nop
 800474a:	e002      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800474c:	bf00      	nop
 800474e:	e000      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004750:	bf00      	nop
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	080098d4 	.word	0x080098d4
 8004764:	080098e4 	.word	0x080098e4
 8004768:	00f42400 	.word	0x00f42400
 800476c:	003d0900 	.word	0x003d0900
 8004770:	aaaaaaab 	.word	0xaaaaaaab
 8004774:	0001e848 	.word	0x0001e848

08004778 <HAL_TIM_Base_Init>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_Base_Init+0x12>
 8004786:	2301      	movs	r3, #1
 8004788:	e041      	b.n	800480e <HAL_TIM_Base_Init+0x96>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_Base_Init+0x2c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fd ffde 	bl	8002760 <HAL_TIM_Base_MspInit>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 fa10 	bl	8004bdc <TIM_Base_SetConfig>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800480c:	2300      	movs	r3, #0
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_PWM_Init>:
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_TIM_PWM_Init+0x12>
 8004824:	2301      	movs	r3, #1
 8004826:	e041      	b.n	80048ac <HAL_TIM_PWM_Init+0x96>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <HAL_TIM_PWM_Init+0x2c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f839 	bl	80048b4 <HAL_TIM_PWM_MspInit>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f000 f9c1 	bl	8004bdc <TIM_Base_SetConfig>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048aa:	2300      	movs	r3, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_PWM_MspInit>:
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_TIM_PWM_ConfigChannel>:
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	2300      	movs	r3, #0
 80048d6:	75fb      	strb	r3, [r7, #23]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e0ae      	b.n	8004a44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	f200 809f 	bhi.w	8004a34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048f6:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004a35 	.word	0x08004a35
 8004904:	08004a35 	.word	0x08004a35
 8004908:	08004a35 	.word	0x08004a35
 800490c:	08004971 	.word	0x08004971
 8004910:	08004a35 	.word	0x08004a35
 8004914:	08004a35 	.word	0x08004a35
 8004918:	08004a35 	.word	0x08004a35
 800491c:	080049b3 	.word	0x080049b3
 8004920:	08004a35 	.word	0x08004a35
 8004924:	08004a35 	.word	0x08004a35
 8004928:	08004a35 	.word	0x08004a35
 800492c:	080049f3 	.word	0x080049f3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f9b2 	bl	8004ca0 <TIM_OC1_SetConfig>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0208 	orr.w	r2, r2, #8
 800494a:	619a      	str	r2, [r3, #24]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0204 	bic.w	r2, r2, #4
 800495a:	619a      	str	r2, [r3, #24]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6999      	ldr	r1, [r3, #24]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	619a      	str	r2, [r3, #24]
 800496e:	e064      	b.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f9f8 	bl	8004d6c <TIM_OC2_SetConfig>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800498a:	619a      	str	r2, [r3, #24]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499a:	619a      	str	r2, [r3, #24]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6999      	ldr	r1, [r3, #24]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	021a      	lsls	r2, r3, #8
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	619a      	str	r2, [r3, #24]
 80049b0:	e043      	b.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x172>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fa41 	bl	8004e40 <TIM_OC3_SetConfig>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0208 	orr.w	r2, r2, #8
 80049cc:	61da      	str	r2, [r3, #28]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0204 	bic.w	r2, r2, #4
 80049dc:	61da      	str	r2, [r3, #28]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69d9      	ldr	r1, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	61da      	str	r2, [r3, #28]
 80049f0:	e023      	b.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x172>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fa8b 	bl	8004f14 <TIM_OC4_SetConfig>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a0c:	61da      	str	r2, [r3, #28]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a1c:	61da      	str	r2, [r3, #28]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69d9      	ldr	r1, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	61da      	str	r2, [r3, #28]
 8004a32:	e002      	b.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
 8004a38:	bf00      	nop
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_ConfigClockSource>:
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIM_ConfigClockSource+0x1c>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0b4      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x186>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa0:	d03e      	beq.n	8004b20 <HAL_TIM_ConfigClockSource+0xd4>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa6:	f200 8087 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aae:	f000 8086 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x172>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab6:	d87f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b70      	cmp	r3, #112	@ 0x70
 8004aba:	d01a      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xa6>
 8004abc:	2b70      	cmp	r3, #112	@ 0x70
 8004abe:	d87b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b60      	cmp	r3, #96	@ 0x60
 8004ac2:	d050      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x11a>
 8004ac4:	2b60      	cmp	r3, #96	@ 0x60
 8004ac6:	d877      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b50      	cmp	r3, #80	@ 0x50
 8004aca:	d03c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xfa>
 8004acc:	2b50      	cmp	r3, #80	@ 0x50
 8004ace:	d873      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b40      	cmp	r3, #64	@ 0x40
 8004ad2:	d058      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x13a>
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d86f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b30      	cmp	r3, #48	@ 0x30
 8004ada:	d064      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004adc:	2b30      	cmp	r3, #48	@ 0x30
 8004ade:	d86b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d060      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d867      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d05a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004af0:	e062      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 facc 	bl	800509e <TIM_ETR_SetConfig>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	e04f      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f000 fab5 	bl	800509e <TIM_ETR_SetConfig>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	e03c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fa2c 	bl	8004fb0 <TIM_TI1_ConfigInputStage>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2150      	movs	r1, #80	@ 0x50
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fa83 	bl	800506a <TIM_ITRx_SetConfig>
 8004b64:	e02c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 fa4a 	bl	800500c <TIM_TI2_ConfigInputStage>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2160      	movs	r1, #96	@ 0x60
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa73 	bl	800506a <TIM_ITRx_SetConfig>
 8004b84:	e01c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 fa0c 	bl	8004fb0 <TIM_TI1_ConfigInputStage>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2140      	movs	r1, #64	@ 0x40
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fa63 	bl	800506a <TIM_ITRx_SetConfig>
 8004ba4:	e00c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fa5a 	bl	800506a <TIM_ITRx_SetConfig>
 8004bb6:	e003      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
 8004bbe:	bf00      	nop
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <TIM_Base_SetConfig>:
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a29      	ldr	r2, [pc, #164]	@ (8004c94 <TIM_Base_SetConfig+0xb8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0x30>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0x30>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a26      	ldr	r2, [pc, #152]	@ (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x30>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a25      	ldr	r2, [pc, #148]	@ (8004c9c <TIM_Base_SetConfig+0xc0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <TIM_Base_SetConfig+0x42>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	@ (8004c94 <TIM_Base_SetConfig+0xb8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_Base_SetConfig+0x62>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0x62>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a19      	ldr	r2, [pc, #100]	@ (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0x62>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <TIM_Base_SetConfig+0xc0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0x74>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a07      	ldr	r2, [pc, #28]	@ (8004c94 <TIM_Base_SetConfig+0xb8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d103      	bne.n	8004c84 <TIM_Base_SetConfig+0xa8>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	615a      	str	r2, [r3, #20]
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800

08004ca0 <TIM_OC1_SetConfig>:
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f023 0201 	bic.w	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	621a      	str	r2, [r3, #32]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0302 	bic.w	r3, r3, #2
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <TIM_OC1_SetConfig+0xc8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10c      	bne.n	8004d16 <TIM_OC1_SetConfig+0x76>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0308 	bic.w	r3, r3, #8
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f023 0304 	bic.w	r3, r3, #4
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a13      	ldr	r2, [pc, #76]	@ (8004d68 <TIM_OC1_SetConfig+0xc8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d111      	bne.n	8004d42 <TIM_OC1_SetConfig+0xa2>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	619a      	str	r2, [r3, #24]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	621a      	str	r2, [r3, #32]
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40012c00 	.word	0x40012c00

08004d6c <TIM_OC2_SetConfig>:
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f023 0210 	bic.w	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0320 	bic.w	r3, r3, #32
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e3c <TIM_OC2_SetConfig+0xd0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10d      	bne.n	8004de8 <TIM_OC2_SetConfig+0x7c>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a14      	ldr	r2, [pc, #80]	@ (8004e3c <TIM_OC2_SetConfig+0xd0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d113      	bne.n	8004e18 <TIM_OC2_SetConfig+0xac>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	619a      	str	r2, [r3, #24]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	621a      	str	r2, [r3, #32]
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	40012c00 	.word	0x40012c00

08004e40 <TIM_OC3_SetConfig>:
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	621a      	str	r2, [r3, #32]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	@ (8004f10 <TIM_OC3_SetConfig+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10d      	bne.n	8004eba <TIM_OC3_SetConfig+0x7a>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <TIM_OC3_SetConfig+0xd0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d113      	bne.n	8004eea <TIM_OC3_SetConfig+0xaa>
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	61da      	str	r2, [r3, #28]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	621a      	str	r2, [r3, #32]
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00

08004f14 <TIM_OC4_SetConfig>:
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	031b      	lsls	r3, r3, #12
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8004fac <TIM_OC4_SetConfig+0x98>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d109      	bne.n	8004f88 <TIM_OC4_SetConfig+0x74>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	61da      	str	r2, [r3, #28]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	621a      	str	r2, [r3, #32]
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr
 8004fac:	40012c00 	.word	0x40012c00

08004fb0 <TIM_TI1_ConfigInputStage>:
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 030a 	bic.w	r3, r3, #10
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <TIM_TI2_ConfigInputStage>:
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0210 	bic.w	r2, r3, #16
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	031b      	lsls	r3, r3, #12
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	619a      	str	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	621a      	str	r2, [r3, #32]
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <TIM_ITRx_SetConfig>:
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	f043 0307 	orr.w	r3, r3, #7
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <TIM_ETR_SetConfig>:
 800509e:	b480      	push	{r7}
 80050a0:	b087      	sub	sp, #28
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	021a      	lsls	r2, r3, #8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <HAL_TIMEx_MasterConfigSynchronization>:
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e046      	b.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a16      	ldr	r2, [pc, #88]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005140:	d009      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a12      	ldr	r2, [pc, #72]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a10      	ldr	r2, [pc, #64]	@ (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10c      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005180:	2300      	movs	r3, #0
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800

08005198 <HAL_UART_Init>:
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e042      	b.n	8005230 <HAL_UART_Init+0x98>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_UART_Init+0x2c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fd fb1a 	bl	80027f8 <HAL_UART_MspInit>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	@ 0x24
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051da:	60da      	str	r2, [r3, #12]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fc7f 	bl	8005ae0 <UART_SetConfig>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051f0:	611a      	str	r2, [r3, #16]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005200:	615a      	str	r2, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	645a      	str	r2, [r3, #68]	@ 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	635a      	str	r2, [r3, #52]	@ 0x34
 800522e:	2300      	movs	r3, #0
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_IRQHandler>:
 8005238:	b580      	push	{r7, lr}
 800523a:	b0ba      	sub	sp, #232	@ 0xe8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005264:	2300      	movs	r3, #0
 8005266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10f      	bne.n	800529e <HAL_UART_IRQHandler+0x66>
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_UART_IRQHandler+0x66>
 800528a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_UART_IRQHandler+0x66>
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fb63 	bl	8005962 <UART_Receive_IT>
 800529c:	e25b      	b.n	8005756 <HAL_UART_IRQHandler+0x51e>
 800529e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80de 	beq.w	8005464 <HAL_UART_IRQHandler+0x22c>
 80052a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_UART_IRQHandler+0x8a>
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80d1 	beq.w	8005464 <HAL_UART_IRQHandler+0x22c>
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <HAL_UART_IRQHandler+0xae>
 80052ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_UART_IRQHandler+0xae>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_UART_IRQHandler+0xd2>
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_UART_IRQHandler+0xd2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_UART_IRQHandler+0xf6>
 8005316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_UART_IRQHandler+0xf6>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	f043 0204 	orr.w	r2, r3, #4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	645a      	str	r2, [r3, #68]	@ 0x44
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <HAL_UART_IRQHandler+0x126>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <HAL_UART_IRQHandler+0x11a>
 8005346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0x126>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005356:	f043 0208 	orr.w	r2, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 81f2 	beq.w	800574c <HAL_UART_IRQHandler+0x514>
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_UART_IRQHandler+0x14e>
 8005374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_UART_IRQHandler+0x14e>
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 faee 	bl	8005962 <UART_Receive_IT>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <HAL_UART_IRQHandler+0x17a>
 80053aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d04f      	beq.n	8005452 <HAL_UART_IRQHandler+0x21a>
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f9f8 	bl	80057a8 <UART_EndRxTransfer>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d041      	beq.n	800544a <HAL_UART_IRQHandler+0x212>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3314      	adds	r3, #20
 80053cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800540a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1d9      	bne.n	80053c6 <HAL_UART_IRQHandler+0x18e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d013      	beq.n	8005442 <HAL_UART_IRQHandler+0x20a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	4a7e      	ldr	r2, [pc, #504]	@ (8005618 <HAL_UART_IRQHandler+0x3e0>)
 8005420:	635a      	str	r2, [r3, #52]	@ 0x34
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fa2c 	bl	8003884 <HAL_DMA_Abort_IT>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <HAL_UART_IRQHandler+0x228>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800543c:	4610      	mov	r0, r2
 800543e:	4798      	blx	r3
 8005440:	e00e      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f99c 	bl	8005780 <HAL_UART_ErrorCallback>
 8005448:	e00a      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f998 	bl	8005780 <HAL_UART_ErrorCallback>
 8005450:	e006      	b.n	8005460 <HAL_UART_IRQHandler+0x228>
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f994 	bl	8005780 <HAL_UART_ErrorCallback>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	645a      	str	r2, [r3, #68]	@ 0x44
 800545e:	e175      	b.n	800574c <HAL_UART_IRQHandler+0x514>
 8005460:	bf00      	nop
 8005462:	e173      	b.n	800574c <HAL_UART_IRQHandler+0x514>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 814f 	bne.w	800570c <HAL_UART_IRQHandler+0x4d4>
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8148 	beq.w	800570c <HAL_UART_IRQHandler+0x4d4>
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8141 	beq.w	800570c <HAL_UART_IRQHandler+0x4d4>
 800548a:	2300      	movs	r3, #0
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80b6 	beq.w	800561c <HAL_UART_IRQHandler+0x3e4>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80054bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8145 	beq.w	8005750 <HAL_UART_IRQHandler+0x518>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054ce:	429a      	cmp	r2, r3
 80054d0:	f080 813e 	bcs.w	8005750 <HAL_UART_IRQHandler+0x518>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054da:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	f000 8088 	beq.w	80055f8 <HAL_UART_IRQHandler+0x3c0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005502:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005506:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005514:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800551c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005520:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800552c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1d9      	bne.n	80054e8 <HAL_UART_IRQHandler+0x2b0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3314      	adds	r3, #20
 800553a:	677b      	str	r3, [r7, #116]	@ 0x74
 800553c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	673b      	str	r3, [r7, #112]	@ 0x70
 8005544:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3314      	adds	r3, #20
 8005554:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005558:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800555c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800555e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005560:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	67bb      	str	r3, [r7, #120]	@ 0x78
 800556a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e1      	bne.n	8005534 <HAL_UART_IRQHandler+0x2fc>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3314      	adds	r3, #20
 8005576:	663b      	str	r3, [r7, #96]	@ 0x60
 8005578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005594:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005596:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005598:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800559a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80055a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e3      	bne.n	8005570 <HAL_UART_IRQHandler+0x338>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055c8:	f023 0310 	bic.w	r3, r3, #16
 80055cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80055de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e3      	bne.n	80055b6 <HAL_UART_IRQHandler+0x37e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe f90b 	bl	800380e <HAL_DMA_Abort>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005606:	b29b      	uxth	r3, r3
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8bf 	bl	8005792 <HAL_UARTEx_RxEventCallback>
 8005614:	e09c      	b.n	8005750 <HAL_UART_IRQHandler+0x518>
 8005616:	bf00      	nop
 8005618:	0800586d 	.word	0x0800586d
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005624:	b29b      	uxth	r3, r3
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 808e 	beq.w	8005754 <HAL_UART_IRQHandler+0x51c>
 8005638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8089 	beq.w	8005754 <HAL_UART_IRQHandler+0x51c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	330c      	adds	r3, #12
 8005648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	637b      	str	r3, [r7, #52]	@ 0x34
 8005652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005658:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005666:	647a      	str	r2, [r7, #68]	@ 0x44
 8005668:	643b      	str	r3, [r7, #64]	@ 0x40
 800566a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800566c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e3      	bne.n	8005642 <HAL_UART_IRQHandler+0x40a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800569e:	633a      	str	r2, [r7, #48]	@ 0x30
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e3      	bne.n	800567a <HAL_UART_IRQHandler+0x442>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0310 	bic.w	r3, r3, #16
 80056d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056e4:	61fa      	str	r2, [r7, #28]
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e3      	bne.n	80056c0 <HAL_UART_IRQHandler+0x488>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80056fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f844 	bl	8005792 <HAL_UARTEx_RxEventCallback>
 800570a:	e023      	b.n	8005754 <HAL_UART_IRQHandler+0x51c>
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_UART_IRQHandler+0x4f4>
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_UART_IRQHandler+0x4f4>
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f8b5 	bl	8005894 <UART_Transmit_IT>
 800572a:	e014      	b.n	8005756 <HAL_UART_IRQHandler+0x51e>
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00e      	beq.n	8005756 <HAL_UART_IRQHandler+0x51e>
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_UART_IRQHandler+0x51e>
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8f4 	bl	8005932 <UART_EndTransmit_IT>
 800574a:	e004      	b.n	8005756 <HAL_UART_IRQHandler+0x51e>
 800574c:	bf00      	nop
 800574e:	e002      	b.n	8005756 <HAL_UART_IRQHandler+0x51e>
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <HAL_UART_IRQHandler+0x51e>
 8005754:	bf00      	nop
 8005756:	37e8      	adds	r7, #232	@ 0xe8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_TxCpltCallback>:
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <HAL_UART_RxCpltCallback>:
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <HAL_UART_ErrorCallback>:
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <HAL_UARTEx_RxEventCallback>:
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	807b      	strh	r3, [r7, #2]
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <UART_EndRxTransfer>:
 80057a8:	b480      	push	{r7}
 80057aa:	b095      	sub	sp, #84	@ 0x54
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	633b      	str	r3, [r7, #48]	@ 0x30
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <UART_EndRxTransfer+0x8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005804:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x3c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d119      	bne.n	8005854 <UART_EndRxTransfer+0xac>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60bb      	str	r3, [r7, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f023 0310 	bic.w	r3, r3, #16
 8005836:	647b      	str	r3, [r7, #68]	@ 0x44
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005840:	61ba      	str	r2, [r7, #24]
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	6979      	ldr	r1, [r7, #20]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_EndRxTransfer+0x78>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
 8005862:	bf00      	nop
 8005864:	3754      	adds	r7, #84	@ 0x54
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <UART_DMAAbortOnError>:
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff ff7a 	bl	8005780 <HAL_UART_ErrorCallback>
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <UART_Transmit_IT>:
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b21      	cmp	r3, #33	@ 0x21
 80058a6:	d13e      	bne.n	8005926 <UART_Transmit_IT+0x92>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b0:	d114      	bne.n	80058dc <UART_Transmit_IT+0x48>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d110      	bne.n	80058dc <UART_Transmit_IT+0x48>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ce:	605a      	str	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	1c9a      	adds	r2, r3, #2
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	621a      	str	r2, [r3, #32]
 80058da:	e008      	b.n	80058ee <UART_Transmit_IT+0x5a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6211      	str	r1, [r2, #32]
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4619      	mov	r1, r3
 80058fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10f      	bne.n	8005922 <UART_Transmit_IT+0x8e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <UART_Transmit_IT+0x94>
 8005926:	2302      	movs	r3, #2
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <UART_EndTransmit_IT>:
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff ff02 	bl	800575c <HAL_UART_TxCpltCallback>
 8005958:	2300      	movs	r3, #0
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <UART_Receive_IT>:
 8005962:	b580      	push	{r7, lr}
 8005964:	b08c      	sub	sp, #48	@ 0x30
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b22      	cmp	r3, #34	@ 0x22
 8005974:	f040 80ae 	bne.w	8005ad4 <UART_Receive_IT+0x172>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005980:	d117      	bne.n	80059b2 <UART_Receive_IT+0x50>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <UART_Receive_IT+0x50>
 800598a:	2300      	movs	r3, #0
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80059b0:	e026      	b.n	8005a00 <UART_Receive_IT+0x9e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059b8:	2300      	movs	r3, #0
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c4:	d007      	beq.n	80059d6 <UART_Receive_IT+0x74>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <UART_Receive_IT+0x82>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <UART_Receive_IT+0x82>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e008      	b.n	80059f6 <UART_Receive_IT+0x94>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d15d      	bne.n	8005ad0 <UART_Receive_IT+0x16e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0220 	bic.w	r2, r2, #32
 8005a22:	60da      	str	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	615a      	str	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d135      	bne.n	8005ac6 <UART_Receive_IT+0x164>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f023 0310 	bic.w	r3, r3, #16
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a80:	623a      	str	r2, [r7, #32]
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	69f9      	ldr	r1, [r7, #28]
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_Receive_IT+0xfe>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d10a      	bne.n	8005ab8 <UART_Receive_IT+0x156>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fe67 	bl	8005792 <HAL_UARTEx_RxEventCallback>
 8005ac4:	e002      	b.n	8005acc <UART_Receive_IT+0x16a>
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fe51 	bl	800576e <HAL_UART_RxCpltCallback>
 8005acc:	2300      	movs	r3, #0
 8005ace:	e002      	b.n	8005ad6 <UART_Receive_IT+0x174>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <UART_Receive_IT+0x174>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3730      	adds	r7, #48	@ 0x30
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_SetConfig>:
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	611a      	str	r2, [r3, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b1a:	f023 030c 	bic.w	r3, r3, #12
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	430b      	orrs	r3, r1
 8005b26:	60d3      	str	r3, [r2, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	615a      	str	r2, [r3, #20]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf4 <UART_SetConfig+0x114>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d103      	bne.n	8005b50 <UART_SetConfig+0x70>
 8005b48:	f7fe fc78 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	e002      	b.n	8005b56 <UART_SetConfig+0x76>
 8005b50:	f7fe fc60 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009a      	lsls	r2, r3, #2
 8005b60:	441a      	add	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	4a22      	ldr	r2, [pc, #136]	@ (8005bf8 <UART_SetConfig+0x118>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	0119      	lsls	r1, r3, #4
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009a      	lsls	r2, r3, #2
 8005b80:	441a      	add	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <UART_SetConfig+0x118>)
 8005b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	2064      	movs	r0, #100	@ 0x64
 8005b96:	fb00 f303 	mul.w	r3, r0, r3
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	3332      	adds	r3, #50	@ 0x32
 8005ba0:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <UART_SetConfig+0x118>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bac:	4419      	add	r1, r3
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009a      	lsls	r2, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <UART_SetConfig+0x118>)
 8005bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2064      	movs	r0, #100	@ 0x64
 8005bce:	fb00 f303 	mul.w	r3, r0, r3
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	3332      	adds	r3, #50	@ 0x32
 8005bd8:	4a07      	ldr	r2, [pc, #28]	@ (8005bf8 <UART_SetConfig+0x118>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	440a      	add	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40013800 	.word	0x40013800
 8005bf8:	51eb851f 	.word	0x51eb851f

08005bfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c00:	4904      	ldr	r1, [pc, #16]	@ (8005c14 <MX_FATFS_Init+0x18>)
 8005c02:	4805      	ldr	r0, [pc, #20]	@ (8005c18 <MX_FATFS_Init+0x1c>)
 8005c04:	f000 fe20 	bl	8006848 <FATFS_LinkDriver>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b03      	ldr	r3, [pc, #12]	@ (8005c1c <MX_FATFS_Init+0x20>)
 8005c0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c10:	bf00      	nop
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	2000046c 	.word	0x2000046c
 8005c18:	2000000c 	.word	0x2000000c
 8005c1c:	20000468 	.word	0x20000468

08005c20 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005c2a:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <USER_initialize+0x20>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005c30:	4b03      	ldr	r3, [pc, #12]	@ (8005c40 <USER_initialize+0x20>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr
 8005c40:	20000009 	.word	0x20000009

08005c44 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005c4e:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <USER_status+0x20>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005c54:	4b03      	ldr	r3, [pc, #12]	@ (8005c64 <USER_status+0x20>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr
 8005c64:	20000009 	.word	0x20000009

08005c68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005c78:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005c94:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	603a      	str	r2, [r7, #0]
 8005caa:	71fb      	strb	r3, [r7, #7]
 8005cac:	460b      	mov	r3, r1
 8005cae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
    return res;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	4a08      	ldr	r2, [pc, #32]	@ (8005cf0 <disk_status+0x30>)
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	79fa      	ldrb	r2, [r7, #7]
 8005cd8:	4905      	ldr	r1, [pc, #20]	@ (8005cf0 <disk_status+0x30>)
 8005cda:	440a      	add	r2, r1
 8005cdc:	7a12      	ldrb	r2, [r2, #8]
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4798      	blx	r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	200014c0 	.word	0x200014c0

08005cf4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	4a0d      	ldr	r2, [pc, #52]	@ (8005d3c <disk_initialize+0x48>)
 8005d06:	5cd3      	ldrb	r3, [r2, r3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d111      	bne.n	8005d30 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8005d3c <disk_initialize+0x48>)
 8005d10:	2101      	movs	r1, #1
 8005d12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	4a09      	ldr	r2, [pc, #36]	@ (8005d3c <disk_initialize+0x48>)
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	79fa      	ldrb	r2, [r7, #7]
 8005d22:	4906      	ldr	r1, [pc, #24]	@ (8005d3c <disk_initialize+0x48>)
 8005d24:	440a      	add	r2, r1
 8005d26:	7a12      	ldrb	r2, [r2, #8]
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200014c0 	.word	0x200014c0

08005d40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	4a0a      	ldr	r2, [pc, #40]	@ (8005d7c <disk_read+0x3c>)
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	689c      	ldr	r4, [r3, #8]
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	4a07      	ldr	r2, [pc, #28]	@ (8005d7c <disk_read+0x3c>)
 8005d60:	4413      	add	r3, r2
 8005d62:	7a18      	ldrb	r0, [r3, #8]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	47a0      	blx	r4
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd90      	pop	{r4, r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200014c0 	.word	0x200014c0

08005d80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	4a0a      	ldr	r2, [pc, #40]	@ (8005dbc <disk_write+0x3c>)
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68dc      	ldr	r4, [r3, #12]
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	4a07      	ldr	r2, [pc, #28]	@ (8005dbc <disk_write+0x3c>)
 8005da0:	4413      	add	r3, r2
 8005da2:	7a18      	ldrb	r0, [r3, #8]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	47a0      	blx	r4
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]
  return res;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd90      	pop	{r4, r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200014c0 	.word	0x200014c0

08005dc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	603a      	str	r2, [r7, #0]
 8005dca:	71fb      	strb	r3, [r7, #7]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <disk_ioctl+0x38>)
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	79fa      	ldrb	r2, [r7, #7]
 8005dde:	4906      	ldr	r1, [pc, #24]	@ (8005df8 <disk_ioctl+0x38>)
 8005de0:	440a      	add	r2, r1
 8005de2:	7a10      	ldrb	r0, [r2, #8]
 8005de4:	79b9      	ldrb	r1, [r7, #6]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4798      	blx	r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]
  return res;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	200014c0 	.word	0x200014c0

08005dfc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e016      	b.n	8005e38 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e0a:	4910      	ldr	r1, [pc, #64]	@ (8005e4c <clear_lock+0x50>)
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d108      	bne.n	8005e32 <clear_lock+0x36>
 8005e20:	490a      	ldr	r1, [pc, #40]	@ (8005e4c <clear_lock+0x50>)
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d9e5      	bls.n	8005e0a <clear_lock+0xe>
	}
}
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	200014a8 	.word	0x200014a8

08005e50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e62:	791b      	ldrb	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d040      	beq.n	8005eea <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e78:	7858      	ldrb	r0, [r3, #1]
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	f7ff ff7e 	bl	8005d80 <disk_write>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <sync_window+0x40>
			res = FR_DISK_ERR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
 8005e8e:	e02c      	b.n	8005eea <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e96:	2200      	movs	r2, #0
 8005e98:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	1ad2      	subs	r2, r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d21b      	bcs.n	8005eea <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb8:	78db      	ldrb	r3, [r3, #3]
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e012      	b.n	8005ee4 <sync_window+0x94>
					wsect += fs->fsize;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4413      	add	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed2:	7858      	ldrb	r0, [r3, #1]
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	f7ff ff51 	bl	8005d80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d8e9      	bhi.n	8005ebe <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d01e      	beq.n	8005f4e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff9d 	bl	8005e50 <sync_window>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d116      	bne.n	8005f4e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f26:	7858      	ldrb	r0, [r3, #1]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	f7ff ff07 	bl	8005d40 <disk_read>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f48:	461a      	mov	r2, r3
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295
 8005f64:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d031      	beq.n	8005fd2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e002      	b.n	8005f7c <get_ldnumber+0x24>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b1f      	cmp	r3, #31
 8005f82:	d903      	bls.n	8005f8c <get_ldnumber+0x34>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b3a      	cmp	r3, #58	@ 0x3a
 8005f8a:	d1f4      	bne.n	8005f76 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b3a      	cmp	r3, #58	@ 0x3a
 8005f92:	d11c      	bne.n	8005fce <get_ldnumber+0x76>
			tp = *path;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	60fa      	str	r2, [r7, #12]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	3b30      	subs	r3, #48	@ 0x30
 8005fa4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	d80e      	bhi.n	8005fca <get_ldnumber+0x72>
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d10a      	bne.n	8005fca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d107      	bne.n	8005fca <get_ldnumber+0x72>
					vol = (int)i;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	e002      	b.n	8005fd4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005fd2:	693b      	ldr	r3, [r7, #16]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr
	...

08005fe0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	711a      	strb	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8006000:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ff75 	bl	8005ef4 <move_window>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <check_fs+0x34>
		return 3;
 8006010:	2303      	movs	r3, #3
 8006012:	e04a      	b.n	80060aa <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800601a:	3301      	adds	r3, #1
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	b21a      	sxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006028:	b21b      	sxth	r3, r3
 800602a:	4313      	orrs	r3, r2
 800602c:	b21b      	sxth	r3, r3
 800602e:	4a21      	ldr	r2, [pc, #132]	@ (80060b4 <check_fs+0xd4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d001      	beq.n	8006038 <check_fs+0x58>
		return 2;
 8006034:	2302      	movs	r3, #2
 8006036:	e038      	b.n	80060aa <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3336      	adds	r3, #54	@ 0x36
 800603c:	3303      	adds	r3, #3
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	061a      	lsls	r2, r3, #24
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3336      	adds	r3, #54	@ 0x36
 8006046:	3302      	adds	r3, #2
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3336      	adds	r3, #54	@ 0x36
 8006052:	3301      	adds	r3, #1
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	4313      	orrs	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8006060:	4313      	orrs	r3, r2
 8006062:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006066:	4a14      	ldr	r2, [pc, #80]	@ (80060b8 <check_fs+0xd8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d101      	bne.n	8006070 <check_fs+0x90>
		return 0;
 800606c:	2300      	movs	r3, #0
 800606e:	e01c      	b.n	80060aa <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3352      	adds	r3, #82	@ 0x52
 8006074:	3303      	adds	r3, #3
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	061a      	lsls	r2, r3, #24
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3352      	adds	r3, #82	@ 0x52
 800607e:	3302      	adds	r3, #2
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3352      	adds	r3, #82	@ 0x52
 800608a:	3301      	adds	r3, #1
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	4313      	orrs	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8006098:	4313      	orrs	r3, r2
 800609a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800609e:	4a06      	ldr	r2, [pc, #24]	@ (80060b8 <check_fs+0xd8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <check_fs+0xc8>
		return 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <check_fs+0xca>

	return 1;
 80060a8:	2301      	movs	r3, #1
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	ffffaa55 	.word	0xffffaa55
 80060b8:	00544146 	.word	0x00544146

080060bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b096      	sub	sp, #88	@ 0x58
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80060d0:	68b8      	ldr	r0, [r7, #8]
 80060d2:	f7ff ff41 	bl	8005f58 <get_ldnumber>
 80060d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80060d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da01      	bge.n	80060e2 <find_volume+0x26>
 80060de:	230b      	movs	r3, #11
 80060e0:	e311      	b.n	8006706 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80060e2:	4a98      	ldr	r2, [pc, #608]	@ (8006344 <find_volume+0x288>)
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <find_volume+0x3a>
 80060f2:	230c      	movs	r3, #12
 80060f4:	e307      	b.n	8006706 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060fa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01c      	beq.n	8006142 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fdd5 	bl	8005cc0 <disk_status>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800611c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10c      	bne.n	8006142 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <find_volume+0x82>
 800612e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800613a:	230a      	movs	r3, #10
 800613c:	e2e3      	b.n	8006706 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800613e:	2300      	movs	r3, #0
 8006140:	e2e1      	b.n	8006706 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800614c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614e:	b2da      	uxtb	r2, r3
 8006150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006156:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fdc7 	bl	8005cf4 <disk_initialize>
 8006166:	4603      	mov	r3, r0
 8006168:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800616c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006178:	2303      	movs	r3, #3
 800617a:	e2c4      	b.n	8006706 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <find_volume+0xd6>
 8006182:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800618e:	230a      	movs	r3, #10
 8006190:	e2b9      	b.n	8006706 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006198:	7858      	ldrb	r0, [r3, #1]
 800619a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a0:	330a      	adds	r3, #10
 80061a2:	461a      	mov	r2, r3
 80061a4:	2102      	movs	r1, #2
 80061a6:	f7ff fe0b 	bl	8005dc0 <disk_ioctl>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10d      	bne.n	80061cc <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b6:	895b      	ldrh	r3, [r3, #10]
 80061b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061bc:	d306      	bcc.n	80061cc <find_volume+0x110>
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c4:	895b      	ldrh	r3, [r3, #10]
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ca:	d901      	bls.n	80061d0 <find_volume+0x114>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e29a      	b.n	8006706 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80061d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061d8:	f7ff ff02 	bl	8005fe0 <check_fs>
 80061dc:	4603      	mov	r3, r0
 80061de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80061e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d153      	bne.n	8006292 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80061ea:	2300      	movs	r3, #0
 80061ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ee:	e028      	b.n	8006242 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80061f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80061fa:	4413      	add	r3, r2
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	3304      	adds	r3, #4
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d012      	beq.n	800622e <find_volume+0x172>
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	330b      	adds	r3, #11
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	061a      	lsls	r2, r3, #24
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	330a      	adds	r3, #10
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	041b      	lsls	r3, r3, #16
 8006218:	431a      	orrs	r2, r3
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	3309      	adds	r3, #9
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	4313      	orrs	r3, r2
 8006224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006226:	3208      	adds	r2, #8
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	431a      	orrs	r2, r3
 800622c:	e000      	b.n	8006230 <find_volume+0x174>
 800622e:	2200      	movs	r2, #0
 8006230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	3358      	adds	r3, #88	@ 0x58
 8006236:	443b      	add	r3, r7
 8006238:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800623c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800623e:	3301      	adds	r3, #1
 8006240:	643b      	str	r3, [r7, #64]	@ 0x40
 8006242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006244:	2b03      	cmp	r3, #3
 8006246:	d9d3      	bls.n	80061f0 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006248:	2300      	movs	r3, #0
 800624a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800624c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <find_volume+0x19c>
 8006252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006254:	3b01      	subs	r3, #1
 8006256:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	3358      	adds	r3, #88	@ 0x58
 800625e:	443b      	add	r3, r7
 8006260:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006264:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <find_volume+0x1bc>
 800626c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800626e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006270:	f7ff feb6 	bl	8005fe0 <check_fs>
 8006274:	4603      	mov	r3, r0
 8006276:	e000      	b.n	800627a <find_volume+0x1be>
 8006278:	2302      	movs	r3, #2
 800627a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800627e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <find_volume+0x1d6>
 8006286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006288:	3301      	adds	r3, #1
 800628a:	643b      	str	r3, [r7, #64]	@ 0x40
 800628c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628e:	2b03      	cmp	r3, #3
 8006290:	d9e2      	bls.n	8006258 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006292:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006296:	2b03      	cmp	r3, #3
 8006298:	d101      	bne.n	800629e <find_volume+0x1e2>
 800629a:	2301      	movs	r3, #1
 800629c:	e233      	b.n	8006706 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800629e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <find_volume+0x1ee>
 80062a6:	230d      	movs	r3, #13
 80062a8:	e22d      	b.n	8006706 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	7b1b      	ldrb	r3, [r3, #12]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	b21a      	sxth	r2, r3
 80062b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b4:	7adb      	ldrb	r3, [r3, #11]
 80062b6:	b21b      	sxth	r3, r3
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b21a      	sxth	r2, r3
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c2:	895b      	ldrh	r3, [r3, #10]
 80062c4:	b21b      	sxth	r3, r3
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d001      	beq.n	80062ce <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80062ca:	230d      	movs	r3, #13
 80062cc:	e21b      	b.n	8006706 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	7ddb      	ldrb	r3, [r3, #23]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	b21a      	sxth	r2, r3
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	7d9b      	ldrb	r3, [r3, #22]
 80062da:	b21b      	sxth	r3, r3
 80062dc:	4313      	orrs	r3, r2
 80062de:	b21b      	sxth	r3, r3
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80062e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d112      	bne.n	8006310 <find_volume+0x254>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80062f0:	061a      	lsls	r2, r3, #24
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	431a      	orrs	r2, r3
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	4313      	orrs	r3, r2
 8006306:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006308:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800630c:	4313      	orrs	r3, r2
 800630e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006316:	461a      	mov	r2, r3
 8006318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631e:	7c1a      	ldrb	r2, [r3, #16]
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006326:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800632e:	78db      	ldrb	r3, [r3, #3]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d009      	beq.n	8006348 <find_volume+0x28c>
 8006334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633a:	78db      	ldrb	r3, [r3, #3]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d003      	beq.n	8006348 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8006340:	230d      	movs	r3, #13
 8006342:	e1e0      	b.n	8006706 <find_volume+0x64a>
 8006344:	200014a0 	.word	0x200014a0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634e:	78db      	ldrb	r3, [r3, #3]
 8006350:	461a      	mov	r2, r3
 8006352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006354:	fb02 f303 	mul.w	r3, r2, r3
 8006358:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800635a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635c:	7b5a      	ldrb	r2, [r3, #13]
 800635e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006364:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800636c:	789b      	ldrb	r3, [r3, #2]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00c      	beq.n	800638c <find_volume+0x2d0>
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	461a      	mov	r2, r3
 800637c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006382:	789b      	ldrb	r3, [r3, #2]
 8006384:	3b01      	subs	r3, #1
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800638c:	230d      	movs	r3, #13
 800638e:	e1ba      	b.n	8006706 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	7c9b      	ldrb	r3, [r3, #18]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	b21a      	sxth	r2, r3
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	7c5b      	ldrb	r3, [r3, #17]
 800639c:	b21b      	sxth	r3, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063aa:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b2:	891b      	ldrh	r3, [r3, #8]
 80063b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063ba:	8952      	ldrh	r2, [r2, #10]
 80063bc:	0952      	lsrs	r2, r2, #5
 80063be:	b292      	uxth	r2, r2
 80063c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063c4:	fb01 f202 	mul.w	r2, r1, r2
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80063d0:	230d      	movs	r3, #13
 80063d2:	e198      	b.n	8006706 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80063d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d6:	7d1b      	ldrb	r3, [r3, #20]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	b21a      	sxth	r2, r3
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	7cdb      	ldrb	r3, [r3, #19]
 80063e0:	b21b      	sxth	r3, r3
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b21b      	sxth	r3, r3
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80063ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d112      	bne.n	8006416 <find_volume+0x35a>
 80063f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80063f6:	061a      	lsls	r2, r3, #24
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	431a      	orrs	r2, r3
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	4313      	orrs	r3, r2
 800640c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800640e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006412:	4313      	orrs	r3, r2
 8006414:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006418:	7bdb      	ldrb	r3, [r3, #15]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	b21a      	sxth	r2, r3
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	7b9b      	ldrb	r3, [r3, #14]
 8006422:	b21b      	sxth	r3, r3
 8006424:	4313      	orrs	r3, r2
 8006426:	b21b      	sxth	r3, r3
 8006428:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800642a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <find_volume+0x378>
 8006430:	230d      	movs	r3, #13
 8006432:	e168      	b.n	8006706 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006434:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006438:	4413      	add	r3, r2
 800643a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800643c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006440:	8911      	ldrh	r1, [r2, #8]
 8006442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006448:	8952      	ldrh	r2, [r2, #10]
 800644a:	0952      	lsrs	r2, r2, #5
 800644c:	b292      	uxth	r2, r2
 800644e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006452:	b292      	uxth	r2, r2
 8006454:	4413      	add	r3, r2
 8006456:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800645a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645c:	429a      	cmp	r2, r3
 800645e:	d201      	bcs.n	8006464 <find_volume+0x3a8>
 8006460:	230d      	movs	r3, #13
 8006462:	e150      	b.n	8006706 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800646c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006470:	7892      	ldrb	r2, [r2, #2]
 8006472:	fbb3 f3f2 	udiv	r3, r3, r2
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <find_volume+0x3c6>
 800647e:	230d      	movs	r3, #13
 8006480:	e141      	b.n	8006706 <find_volume+0x64a>
	fmt = FS_FAT12;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800648e:	4293      	cmp	r3, r2
 8006490:	d902      	bls.n	8006498 <find_volume+0x3dc>
 8006492:	2302      	movs	r3, #2
 8006494:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800649e:	4293      	cmp	r3, r2
 80064a0:	d902      	bls.n	80064a8 <find_volume+0x3ec>
 80064a2:	2303      	movs	r3, #3
 80064a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	3302      	adds	r3, #2
 80064ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064b2:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ba:	461a      	mov	r2, r3
 80064bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064be:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80064c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80064c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c4:	4413      	add	r3, r2
 80064c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064cc:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80064ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	4413      	add	r3, r2
 80064d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064da:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 80064dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d124      	bne.n	800652e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ea:	891b      	ldrh	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <find_volume+0x438>
 80064f0:	230d      	movs	r3, #13
 80064f2:	e108      	b.n	8006706 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80064fa:	061a      	lsls	r2, r3, #24
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006502:	041b      	lsls	r3, r3, #16
 8006504:	431a      	orrs	r2, r3
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	4313      	orrs	r3, r2
 8006510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006512:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8006516:	4313      	orrs	r3, r2
 8006518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800651a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800651e:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	647b      	str	r3, [r7, #68]	@ 0x44
 800652c:	e02b      	b.n	8006586 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006534:	891b      	ldrh	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <find_volume+0x482>
 800653a:	230d      	movs	r3, #13
 800653c:	e0e3      	b.n	8006706 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006548:	4413      	add	r3, r2
 800654a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800654c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006550:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006552:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006556:	2b02      	cmp	r3, #2
 8006558:	d105      	bne.n	8006566 <find_volume+0x4aa>
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	e00e      	b.n	8006584 <find_volume+0x4c8>
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656c:	695a      	ldr	r2, [r3, #20]
 800656e:	4613      	mov	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4413      	add	r3, r2
 8006574:	085a      	lsrs	r2, r3, #1
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006584:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006594:	895b      	ldrh	r3, [r3, #10]
 8006596:	4619      	mov	r1, r3
 8006598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659a:	440b      	add	r3, r1
 800659c:	3b01      	subs	r3, #1
 800659e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065a0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80065a4:	8949      	ldrh	r1, [r1, #10]
 80065a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d201      	bcs.n	80065b2 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 80065ae:	230d      	movs	r3, #13
 80065b0:	e0a9      	b.n	8006706 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80065b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b8:	461a      	mov	r2, r3
 80065ba:	f04f 33ff 	mov.w	r3, #4294967295
 80065be:	6113      	str	r3, [r2, #16]
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065ce:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80065d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065d6:	2280      	movs	r2, #128	@ 0x80
 80065d8:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80065da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d17a      	bne.n	80066d8 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	b21a      	sxth	r2, r3
 80065ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065f2:	b21b      	sxth	r3, r3
 80065f4:	4313      	orrs	r3, r2
 80065f6:	b21b      	sxth	r3, r3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d16d      	bne.n	80066d8 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80065fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065fe:	3301      	adds	r3, #1
 8006600:	4619      	mov	r1, r3
 8006602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006604:	f7ff fc76 	bl	8005ef4 <move_window>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d164      	bne.n	80066d8 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006614:	2200      	movs	r2, #0
 8006616:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	b21a      	sxth	r2, r3
 8006622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006624:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006628:	b21b      	sxth	r3, r3
 800662a:	4313      	orrs	r3, r2
 800662c:	b21b      	sxth	r3, r3
 800662e:	4a38      	ldr	r2, [pc, #224]	@ (8006710 <find_volume+0x654>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d151      	bne.n	80066d8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	78db      	ldrb	r3, [r3, #3]
 8006638:	061a      	lsls	r2, r3, #24
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	789b      	ldrb	r3, [r3, #2]
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	431a      	orrs	r2, r3
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	4313      	orrs	r3, r2
 800664a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	4a30      	ldr	r2, [pc, #192]	@ (8006714 <find_volume+0x658>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d140      	bne.n	80066d8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800665c:	061a      	lsls	r2, r3, #24
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	431a      	orrs	r2, r3
 8006668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666a:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	4313      	orrs	r3, r2
 8006672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006674:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8006678:	4313      	orrs	r3, r2
 800667a:	4a27      	ldr	r2, [pc, #156]	@ (8006718 <find_volume+0x65c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d12b      	bne.n	80066d8 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006682:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8006686:	061a      	lsls	r2, r3, #24
 8006688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668a:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	431a      	orrs	r2, r3
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	4313      	orrs	r3, r2
 800669c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800669e:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 80066a2:	4313      	orrs	r3, r2
 80066a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066aa:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 80066b2:	061a      	lsls	r2, r3, #24
 80066b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b6:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	431a      	orrs	r2, r3
 80066be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c0:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	4313      	orrs	r3, r2
 80066c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066ca:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 80066ce:	4313      	orrs	r3, r2
 80066d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066d6:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066de:	461a      	mov	r2, r3
 80066e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066e4:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <find_volume+0x660>)
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <find_volume+0x660>)
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <find_volume+0x660>)
 80066f4:	881a      	ldrh	r2, [r3, #0]
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066fc:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80066fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006700:	f7ff fb7c 	bl	8005dfc <clear_lock>
#endif

	return FR_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3758      	adds	r7, #88	@ 0x58
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	ffffaa55 	.word	0xffffaa55
 8006714:	41615252 	.word	0x41615252
 8006718:	61417272 	.word	0x61417272
 800671c:	200014a4 	.word	0x200014a4

08006720 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	4613      	mov	r3, r2
 800672c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006732:	f107 0310 	add.w	r3, r7, #16
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fc0e 	bl	8005f58 <get_ldnumber>
 800673c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2b00      	cmp	r3, #0
 8006742:	da01      	bge.n	8006748 <f_mount+0x28>
 8006744:	230b      	movs	r3, #11
 8006746:	e02f      	b.n	80067a8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006748:	4a19      	ldr	r2, [pc, #100]	@ (80067b0 <f_mount+0x90>)
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006750:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f7ff fb4f 	bl	8005dfc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	490d      	ldr	r1, [pc, #52]	@ (80067b0 <f_mount+0x90>)
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <f_mount+0x6e>
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d001      	beq.n	8006792 <f_mount+0x72>
 800678e:	2300      	movs	r3, #0
 8006790:	e00a      	b.n	80067a8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006792:	f107 0108 	add.w	r1, r7, #8
 8006796:	f107 030c 	add.w	r3, r7, #12
 800679a:	2200      	movs	r2, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fc8d 	bl	80060bc <find_volume>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	200014a0 	.word	0x200014a0

080067b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80067ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 80067cc:	7a5b      	ldrb	r3, [r3, #9]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d831      	bhi.n	8006838 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80067d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 80067d6:	7a5b      	ldrb	r3, [r3, #9]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	4b19      	ldr	r3, [pc, #100]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 80067de:	2100      	movs	r1, #0
 80067e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80067e2:	4b18      	ldr	r3, [pc, #96]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 80067e4:	7a5b      	ldrb	r3, [r3, #9]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	4a16      	ldr	r2, [pc, #88]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 80067f4:	7a5b      	ldrb	r3, [r3, #9]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 80067fc:	4413      	add	r3, r2
 80067fe:	79fa      	ldrb	r2, [r7, #7]
 8006800:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006802:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 8006804:	7a5b      	ldrb	r3, [r3, #9]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	b2d1      	uxtb	r1, r2
 800680c:	4a0d      	ldr	r2, [pc, #52]	@ (8006844 <FATFS_LinkDriverEx+0x90>)
 800680e:	7251      	strb	r1, [r2, #9]
 8006810:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006812:	7dbb      	ldrb	r3, [r7, #22]
 8006814:	3330      	adds	r3, #48	@ 0x30
 8006816:	b2da      	uxtb	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	3301      	adds	r3, #1
 8006820:	223a      	movs	r2, #58	@ 0x3a
 8006822:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	3302      	adds	r3, #2
 8006828:	222f      	movs	r2, #47	@ 0x2f
 800682a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	3303      	adds	r3, #3
 8006830:	2200      	movs	r2, #0
 8006832:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	200014c0 	.word	0x200014c0

08006848 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006852:	2200      	movs	r2, #0
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff ffac 	bl	80067b4 <FATFS_LinkDriverEx>
 800685c:	4603      	mov	r3, r0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <malloc>:
 8006868:	4b02      	ldr	r3, [pc, #8]	@ (8006874 <malloc+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f000 b825 	b.w	80068bc <_malloc_r>
 8006872:	bf00      	nop
 8006874:	2000002c 	.word	0x2000002c

08006878 <sbrk_aligned>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4e0f      	ldr	r6, [pc, #60]	@ (80068b8 <sbrk_aligned+0x40>)
 800687c:	460c      	mov	r4, r1
 800687e:	6831      	ldr	r1, [r6, #0]
 8006880:	4605      	mov	r5, r0
 8006882:	b911      	cbnz	r1, 800688a <sbrk_aligned+0x12>
 8006884:	f000 ff4c 	bl	8007720 <_sbrk_r>
 8006888:	6030      	str	r0, [r6, #0]
 800688a:	4621      	mov	r1, r4
 800688c:	4628      	mov	r0, r5
 800688e:	f000 ff47 	bl	8007720 <_sbrk_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d103      	bne.n	800689e <sbrk_aligned+0x26>
 8006896:	f04f 34ff 	mov.w	r4, #4294967295
 800689a:	4620      	mov	r0, r4
 800689c:	bd70      	pop	{r4, r5, r6, pc}
 800689e:	1cc4      	adds	r4, r0, #3
 80068a0:	f024 0403 	bic.w	r4, r4, #3
 80068a4:	42a0      	cmp	r0, r4
 80068a6:	d0f8      	beq.n	800689a <sbrk_aligned+0x22>
 80068a8:	1a21      	subs	r1, r4, r0
 80068aa:	4628      	mov	r0, r5
 80068ac:	f000 ff38 	bl	8007720 <_sbrk_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d1f2      	bne.n	800689a <sbrk_aligned+0x22>
 80068b4:	e7ef      	b.n	8006896 <sbrk_aligned+0x1e>
 80068b6:	bf00      	nop
 80068b8:	200014cc 	.word	0x200014cc

080068bc <_malloc_r>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	1ccd      	adds	r5, r1, #3
 80068c2:	f025 0503 	bic.w	r5, r5, #3
 80068c6:	3508      	adds	r5, #8
 80068c8:	2d0c      	cmp	r5, #12
 80068ca:	bf38      	it	cc
 80068cc:	250c      	movcc	r5, #12
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	4606      	mov	r6, r0
 80068d2:	db01      	blt.n	80068d8 <_malloc_r+0x1c>
 80068d4:	42a9      	cmp	r1, r5
 80068d6:	d904      	bls.n	80068e2 <_malloc_r+0x26>
 80068d8:	230c      	movs	r3, #12
 80068da:	6033      	str	r3, [r6, #0]
 80068dc:	2000      	movs	r0, #0
 80068de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069b8 <_malloc_r+0xfc>
 80068e6:	f000 f869 	bl	80069bc <__malloc_lock>
 80068ea:	f8d8 3000 	ldr.w	r3, [r8]
 80068ee:	461c      	mov	r4, r3
 80068f0:	bb44      	cbnz	r4, 8006944 <_malloc_r+0x88>
 80068f2:	4629      	mov	r1, r5
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff ffbf 	bl	8006878 <sbrk_aligned>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	4604      	mov	r4, r0
 80068fe:	d158      	bne.n	80069b2 <_malloc_r+0xf6>
 8006900:	f8d8 4000 	ldr.w	r4, [r8]
 8006904:	4627      	mov	r7, r4
 8006906:	2f00      	cmp	r7, #0
 8006908:	d143      	bne.n	8006992 <_malloc_r+0xd6>
 800690a:	2c00      	cmp	r4, #0
 800690c:	d04b      	beq.n	80069a6 <_malloc_r+0xea>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	4639      	mov	r1, r7
 8006912:	4630      	mov	r0, r6
 8006914:	eb04 0903 	add.w	r9, r4, r3
 8006918:	f000 ff02 	bl	8007720 <_sbrk_r>
 800691c:	4581      	cmp	r9, r0
 800691e:	d142      	bne.n	80069a6 <_malloc_r+0xea>
 8006920:	6821      	ldr	r1, [r4, #0]
 8006922:	4630      	mov	r0, r6
 8006924:	1a6d      	subs	r5, r5, r1
 8006926:	4629      	mov	r1, r5
 8006928:	f7ff ffa6 	bl	8006878 <sbrk_aligned>
 800692c:	3001      	adds	r0, #1
 800692e:	d03a      	beq.n	80069a6 <_malloc_r+0xea>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	442b      	add	r3, r5
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	f8d8 3000 	ldr.w	r3, [r8]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	bb62      	cbnz	r2, 8006998 <_malloc_r+0xdc>
 800693e:	f8c8 7000 	str.w	r7, [r8]
 8006942:	e00f      	b.n	8006964 <_malloc_r+0xa8>
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	1b52      	subs	r2, r2, r5
 8006948:	d420      	bmi.n	800698c <_malloc_r+0xd0>
 800694a:	2a0b      	cmp	r2, #11
 800694c:	d917      	bls.n	800697e <_malloc_r+0xc2>
 800694e:	1961      	adds	r1, r4, r5
 8006950:	42a3      	cmp	r3, r4
 8006952:	6025      	str	r5, [r4, #0]
 8006954:	bf18      	it	ne
 8006956:	6059      	strne	r1, [r3, #4]
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	bf08      	it	eq
 800695c:	f8c8 1000 	streq.w	r1, [r8]
 8006960:	5162      	str	r2, [r4, r5]
 8006962:	604b      	str	r3, [r1, #4]
 8006964:	4630      	mov	r0, r6
 8006966:	f000 f82f 	bl	80069c8 <__malloc_unlock>
 800696a:	f104 000b 	add.w	r0, r4, #11
 800696e:	1d23      	adds	r3, r4, #4
 8006970:	f020 0007 	bic.w	r0, r0, #7
 8006974:	1ac2      	subs	r2, r0, r3
 8006976:	bf1c      	itt	ne
 8006978:	1a1b      	subne	r3, r3, r0
 800697a:	50a3      	strne	r3, [r4, r2]
 800697c:	e7af      	b.n	80068de <_malloc_r+0x22>
 800697e:	6862      	ldr	r2, [r4, #4]
 8006980:	42a3      	cmp	r3, r4
 8006982:	bf0c      	ite	eq
 8006984:	f8c8 2000 	streq.w	r2, [r8]
 8006988:	605a      	strne	r2, [r3, #4]
 800698a:	e7eb      	b.n	8006964 <_malloc_r+0xa8>
 800698c:	4623      	mov	r3, r4
 800698e:	6864      	ldr	r4, [r4, #4]
 8006990:	e7ae      	b.n	80068f0 <_malloc_r+0x34>
 8006992:	463c      	mov	r4, r7
 8006994:	687f      	ldr	r7, [r7, #4]
 8006996:	e7b6      	b.n	8006906 <_malloc_r+0x4a>
 8006998:	461a      	mov	r2, r3
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	42a3      	cmp	r3, r4
 800699e:	d1fb      	bne.n	8006998 <_malloc_r+0xdc>
 80069a0:	2300      	movs	r3, #0
 80069a2:	6053      	str	r3, [r2, #4]
 80069a4:	e7de      	b.n	8006964 <_malloc_r+0xa8>
 80069a6:	230c      	movs	r3, #12
 80069a8:	4630      	mov	r0, r6
 80069aa:	6033      	str	r3, [r6, #0]
 80069ac:	f000 f80c 	bl	80069c8 <__malloc_unlock>
 80069b0:	e794      	b.n	80068dc <_malloc_r+0x20>
 80069b2:	6005      	str	r5, [r0, #0]
 80069b4:	e7d6      	b.n	8006964 <_malloc_r+0xa8>
 80069b6:	bf00      	nop
 80069b8:	200014d0 	.word	0x200014d0

080069bc <__malloc_lock>:
 80069bc:	4801      	ldr	r0, [pc, #4]	@ (80069c4 <__malloc_lock+0x8>)
 80069be:	f000 befc 	b.w	80077ba <__retarget_lock_acquire_recursive>
 80069c2:	bf00      	nop
 80069c4:	20001614 	.word	0x20001614

080069c8 <__malloc_unlock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	@ (80069d0 <__malloc_unlock+0x8>)
 80069ca:	f000 bef7 	b.w	80077bc <__retarget_lock_release_recursive>
 80069ce:	bf00      	nop
 80069d0:	20001614 	.word	0x20001614

080069d4 <__cvt>:
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069da:	461d      	mov	r5, r3
 80069dc:	bfbb      	ittet	lt
 80069de:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80069e2:	461d      	movlt	r5, r3
 80069e4:	2300      	movge	r3, #0
 80069e6:	232d      	movlt	r3, #45	@ 0x2d
 80069e8:	b088      	sub	sp, #32
 80069ea:	4614      	mov	r4, r2
 80069ec:	bfb8      	it	lt
 80069ee:	4614      	movlt	r4, r2
 80069f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80069f2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80069f4:	7013      	strb	r3, [r2, #0]
 80069f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80069fc:	f023 0820 	bic.w	r8, r3, #32
 8006a00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a04:	d005      	beq.n	8006a12 <__cvt+0x3e>
 8006a06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a0a:	d100      	bne.n	8006a0e <__cvt+0x3a>
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e000      	b.n	8006a14 <__cvt+0x40>
 8006a12:	2303      	movs	r3, #3
 8006a14:	aa07      	add	r2, sp, #28
 8006a16:	9204      	str	r2, [sp, #16]
 8006a18:	aa06      	add	r2, sp, #24
 8006a1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a1e:	e9cd 3600 	strd	r3, r6, [sp]
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	f000 ff8f 	bl	8007948 <_dtoa_r>
 8006a2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a2e:	4607      	mov	r7, r0
 8006a30:	d119      	bne.n	8006a66 <__cvt+0x92>
 8006a32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a34:	07db      	lsls	r3, r3, #31
 8006a36:	d50e      	bpl.n	8006a56 <__cvt+0x82>
 8006a38:	eb00 0906 	add.w	r9, r0, r6
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8006a48:	b108      	cbz	r0, 8006a4e <__cvt+0x7a>
 8006a4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a4e:	2230      	movs	r2, #48	@ 0x30
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	454b      	cmp	r3, r9
 8006a54:	d31e      	bcc.n	8006a94 <__cvt+0xc0>
 8006a56:	4638      	mov	r0, r7
 8006a58:	9b07      	ldr	r3, [sp, #28]
 8006a5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006a5c:	1bdb      	subs	r3, r3, r7
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	b008      	add	sp, #32
 8006a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a6a:	eb00 0906 	add.w	r9, r0, r6
 8006a6e:	d1e5      	bne.n	8006a3c <__cvt+0x68>
 8006a70:	7803      	ldrb	r3, [r0, #0]
 8006a72:	2b30      	cmp	r3, #48	@ 0x30
 8006a74:	d10a      	bne.n	8006a8c <__cvt+0xb8>
 8006a76:	2200      	movs	r2, #0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7f9 ff93 	bl	80009a8 <__aeabi_dcmpeq>
 8006a82:	b918      	cbnz	r0, 8006a8c <__cvt+0xb8>
 8006a84:	f1c6 0601 	rsb	r6, r6, #1
 8006a88:	f8ca 6000 	str.w	r6, [sl]
 8006a8c:	f8da 3000 	ldr.w	r3, [sl]
 8006a90:	4499      	add	r9, r3
 8006a92:	e7d3      	b.n	8006a3c <__cvt+0x68>
 8006a94:	1c59      	adds	r1, r3, #1
 8006a96:	9107      	str	r1, [sp, #28]
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	e7d9      	b.n	8006a50 <__cvt+0x7c>

08006a9c <__exponent>:
 8006a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	bfb6      	itet	lt
 8006aa2:	232d      	movlt	r3, #45	@ 0x2d
 8006aa4:	232b      	movge	r3, #43	@ 0x2b
 8006aa6:	4249      	neglt	r1, r1
 8006aa8:	2909      	cmp	r1, #9
 8006aaa:	7002      	strb	r2, [r0, #0]
 8006aac:	7043      	strb	r3, [r0, #1]
 8006aae:	dd29      	ble.n	8006b04 <__exponent+0x68>
 8006ab0:	f10d 0307 	add.w	r3, sp, #7
 8006ab4:	461d      	mov	r5, r3
 8006ab6:	270a      	movs	r7, #10
 8006ab8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006abc:	461a      	mov	r2, r3
 8006abe:	fb07 1416 	mls	r4, r7, r6, r1
 8006ac2:	3430      	adds	r4, #48	@ 0x30
 8006ac4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ac8:	460c      	mov	r4, r1
 8006aca:	2c63      	cmp	r4, #99	@ 0x63
 8006acc:	4631      	mov	r1, r6
 8006ace:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ad2:	dcf1      	bgt.n	8006ab8 <__exponent+0x1c>
 8006ad4:	3130      	adds	r1, #48	@ 0x30
 8006ad6:	1e94      	subs	r4, r2, #2
 8006ad8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006adc:	4623      	mov	r3, r4
 8006ade:	1c41      	adds	r1, r0, #1
 8006ae0:	42ab      	cmp	r3, r5
 8006ae2:	d30a      	bcc.n	8006afa <__exponent+0x5e>
 8006ae4:	f10d 0309 	add.w	r3, sp, #9
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	42ac      	cmp	r4, r5
 8006aec:	bf88      	it	hi
 8006aee:	2300      	movhi	r3, #0
 8006af0:	3302      	adds	r3, #2
 8006af2:	4403      	add	r3, r0
 8006af4:	1a18      	subs	r0, r3, r0
 8006af6:	b003      	add	sp, #12
 8006af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006afe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b02:	e7ed      	b.n	8006ae0 <__exponent+0x44>
 8006b04:	2330      	movs	r3, #48	@ 0x30
 8006b06:	3130      	adds	r1, #48	@ 0x30
 8006b08:	7083      	strb	r3, [r0, #2]
 8006b0a:	70c1      	strb	r1, [r0, #3]
 8006b0c:	1d03      	adds	r3, r0, #4
 8006b0e:	e7f1      	b.n	8006af4 <__exponent+0x58>

08006b10 <_printf_float>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	b091      	sub	sp, #68	@ 0x44
 8006b16:	460c      	mov	r4, r1
 8006b18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006b1c:	4616      	mov	r6, r2
 8006b1e:	461f      	mov	r7, r3
 8006b20:	4605      	mov	r5, r0
 8006b22:	f000 fdc5 	bl	80076b0 <_localeconv_r>
 8006b26:	6803      	ldr	r3, [r0, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	f7f9 fb10 	bl	8000150 <strlen>
 8006b30:	2300      	movs	r3, #0
 8006b32:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b34:	f8d8 3000 	ldr.w	r3, [r8]
 8006b38:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b3a:	3307      	adds	r3, #7
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	f103 0208 	add.w	r2, r3, #8
 8006b44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b48:	f8d4 b000 	ldr.w	fp, [r4]
 8006b4c:	f8c8 2000 	str.w	r2, [r8]
 8006b50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b5a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b6a:	4b9c      	ldr	r3, [pc, #624]	@ (8006ddc <_printf_float+0x2cc>)
 8006b6c:	f7f9 ff4e 	bl	8000a0c <__aeabi_dcmpun>
 8006b70:	bb70      	cbnz	r0, 8006bd0 <_printf_float+0xc0>
 8006b72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	4b98      	ldr	r3, [pc, #608]	@ (8006ddc <_printf_float+0x2cc>)
 8006b7c:	f7f9 ff28 	bl	80009d0 <__aeabi_dcmple>
 8006b80:	bb30      	cbnz	r0, 8006bd0 <_printf_float+0xc0>
 8006b82:	2200      	movs	r2, #0
 8006b84:	2300      	movs	r3, #0
 8006b86:	4640      	mov	r0, r8
 8006b88:	4649      	mov	r1, r9
 8006b8a:	f7f9 ff17 	bl	80009bc <__aeabi_dcmplt>
 8006b8e:	b110      	cbz	r0, 8006b96 <_printf_float+0x86>
 8006b90:	232d      	movs	r3, #45	@ 0x2d
 8006b92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b96:	4a92      	ldr	r2, [pc, #584]	@ (8006de0 <_printf_float+0x2d0>)
 8006b98:	4b92      	ldr	r3, [pc, #584]	@ (8006de4 <_printf_float+0x2d4>)
 8006b9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b9e:	bf94      	ite	ls
 8006ba0:	4690      	movls	r8, r2
 8006ba2:	4698      	movhi	r8, r3
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	f04f 0900 	mov.w	r9, #0
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	f02b 0304 	bic.w	r3, fp, #4
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	4633      	mov	r3, r6
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	9700      	str	r7, [sp, #0]
 8006bba:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006bbc:	f000 f9d4 	bl	8006f68 <_printf_common>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	f040 8090 	bne.w	8006ce6 <_printf_float+0x1d6>
 8006bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bca:	b011      	add	sp, #68	@ 0x44
 8006bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	f7f9 ff18 	bl	8000a0c <__aeabi_dcmpun>
 8006bdc:	b148      	cbz	r0, 8006bf2 <_printf_float+0xe2>
 8006bde:	464b      	mov	r3, r9
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bfb8      	it	lt
 8006be4:	232d      	movlt	r3, #45	@ 0x2d
 8006be6:	4a80      	ldr	r2, [pc, #512]	@ (8006de8 <_printf_float+0x2d8>)
 8006be8:	bfb8      	it	lt
 8006bea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bee:	4b7f      	ldr	r3, [pc, #508]	@ (8006dec <_printf_float+0x2dc>)
 8006bf0:	e7d3      	b.n	8006b9a <_printf_float+0x8a>
 8006bf2:	6863      	ldr	r3, [r4, #4]
 8006bf4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	d13f      	bne.n	8006c7c <_printf_float+0x16c>
 8006bfc:	2306      	movs	r3, #6
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	9206      	str	r2, [sp, #24]
 8006c0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006c0c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006c10:	aa0d      	add	r2, sp, #52	@ 0x34
 8006c12:	9203      	str	r2, [sp, #12]
 8006c14:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006c18:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	4642      	mov	r2, r8
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	4628      	mov	r0, r5
 8006c24:	464b      	mov	r3, r9
 8006c26:	910a      	str	r1, [sp, #40]	@ 0x28
 8006c28:	f7ff fed4 	bl	80069d4 <__cvt>
 8006c2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c2e:	4680      	mov	r8, r0
 8006c30:	2947      	cmp	r1, #71	@ 0x47
 8006c32:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006c34:	d128      	bne.n	8006c88 <_printf_float+0x178>
 8006c36:	1cc8      	adds	r0, r1, #3
 8006c38:	db02      	blt.n	8006c40 <_printf_float+0x130>
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	dd40      	ble.n	8006cc2 <_printf_float+0x1b2>
 8006c40:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c44:	fa5f fa8a 	uxtb.w	sl, sl
 8006c48:	4652      	mov	r2, sl
 8006c4a:	3901      	subs	r1, #1
 8006c4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c50:	910d      	str	r1, [sp, #52]	@ 0x34
 8006c52:	f7ff ff23 	bl	8006a9c <__exponent>
 8006c56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c58:	4681      	mov	r9, r0
 8006c5a:	1813      	adds	r3, r2, r0
 8006c5c:	2a01      	cmp	r2, #1
 8006c5e:	6123      	str	r3, [r4, #16]
 8006c60:	dc02      	bgt.n	8006c68 <_printf_float+0x158>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	07d2      	lsls	r2, r2, #31
 8006c66:	d501      	bpl.n	8006c6c <_printf_float+0x15c>
 8006c68:	3301      	adds	r3, #1
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d09e      	beq.n	8006bb2 <_printf_float+0xa2>
 8006c74:	232d      	movs	r3, #45	@ 0x2d
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c7a:	e79a      	b.n	8006bb2 <_printf_float+0xa2>
 8006c7c:	2947      	cmp	r1, #71	@ 0x47
 8006c7e:	d1bf      	bne.n	8006c00 <_printf_float+0xf0>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1bd      	bne.n	8006c00 <_printf_float+0xf0>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e7ba      	b.n	8006bfe <_printf_float+0xee>
 8006c88:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c8c:	d9dc      	bls.n	8006c48 <_printf_float+0x138>
 8006c8e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c92:	d118      	bne.n	8006cc6 <_printf_float+0x1b6>
 8006c94:	2900      	cmp	r1, #0
 8006c96:	6863      	ldr	r3, [r4, #4]
 8006c98:	dd0b      	ble.n	8006cb2 <_printf_float+0x1a2>
 8006c9a:	6121      	str	r1, [r4, #16]
 8006c9c:	b913      	cbnz	r3, 8006ca4 <_printf_float+0x194>
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	07d0      	lsls	r0, r2, #31
 8006ca2:	d502      	bpl.n	8006caa <_printf_float+0x19a>
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	440b      	add	r3, r1
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	f04f 0900 	mov.w	r9, #0
 8006cae:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006cb0:	e7dc      	b.n	8006c6c <_printf_float+0x15c>
 8006cb2:	b913      	cbnz	r3, 8006cba <_printf_float+0x1aa>
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	07d2      	lsls	r2, r2, #31
 8006cb8:	d501      	bpl.n	8006cbe <_printf_float+0x1ae>
 8006cba:	3302      	adds	r3, #2
 8006cbc:	e7f4      	b.n	8006ca8 <_printf_float+0x198>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e7f2      	b.n	8006ca8 <_printf_float+0x198>
 8006cc2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006cc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cc8:	4299      	cmp	r1, r3
 8006cca:	db05      	blt.n	8006cd8 <_printf_float+0x1c8>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	6121      	str	r1, [r4, #16]
 8006cd0:	07d8      	lsls	r0, r3, #31
 8006cd2:	d5ea      	bpl.n	8006caa <_printf_float+0x19a>
 8006cd4:	1c4b      	adds	r3, r1, #1
 8006cd6:	e7e7      	b.n	8006ca8 <_printf_float+0x198>
 8006cd8:	2900      	cmp	r1, #0
 8006cda:	bfcc      	ite	gt
 8006cdc:	2201      	movgt	r2, #1
 8006cde:	f1c1 0202 	rsble	r2, r1, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	e7e0      	b.n	8006ca8 <_printf_float+0x198>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	055a      	lsls	r2, r3, #21
 8006cea:	d407      	bmi.n	8006cfc <_printf_float+0x1ec>
 8006cec:	6923      	ldr	r3, [r4, #16]
 8006cee:	4642      	mov	r2, r8
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d12b      	bne.n	8006d52 <_printf_float+0x242>
 8006cfa:	e764      	b.n	8006bc6 <_printf_float+0xb6>
 8006cfc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d00:	f240 80dc 	bls.w	8006ebc <_printf_float+0x3ac>
 8006d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f7f9 fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d033      	beq.n	8006d7c <_printf_float+0x26c>
 8006d14:	2301      	movs	r3, #1
 8006d16:	4631      	mov	r1, r6
 8006d18:	4628      	mov	r0, r5
 8006d1a:	4a35      	ldr	r2, [pc, #212]	@ (8006df0 <_printf_float+0x2e0>)
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f af51 	beq.w	8006bc6 <_printf_float+0xb6>
 8006d24:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006d28:	4543      	cmp	r3, r8
 8006d2a:	db02      	blt.n	8006d32 <_printf_float+0x222>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07d8      	lsls	r0, r3, #31
 8006d30:	d50f      	bpl.n	8006d52 <_printf_float+0x242>
 8006d32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f43f af42 	beq.w	8006bc6 <_printf_float+0xb6>
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d4a:	f104 0a1a 	add.w	sl, r4, #26
 8006d4e:	45c8      	cmp	r8, r9
 8006d50:	dc09      	bgt.n	8006d66 <_printf_float+0x256>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	079b      	lsls	r3, r3, #30
 8006d56:	f100 8102 	bmi.w	8006f5e <_printf_float+0x44e>
 8006d5a:	68e0      	ldr	r0, [r4, #12]
 8006d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d5e:	4298      	cmp	r0, r3
 8006d60:	bfb8      	it	lt
 8006d62:	4618      	movlt	r0, r3
 8006d64:	e731      	b.n	8006bca <_printf_float+0xba>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	f43f af28 	beq.w	8006bc6 <_printf_float+0xb6>
 8006d76:	f109 0901 	add.w	r9, r9, #1
 8006d7a:	e7e8      	b.n	8006d4e <_printf_float+0x23e>
 8006d7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc38      	bgt.n	8006df4 <_printf_float+0x2e4>
 8006d82:	2301      	movs	r3, #1
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	4a19      	ldr	r2, [pc, #100]	@ (8006df0 <_printf_float+0x2e0>)
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f af1a 	beq.w	8006bc6 <_printf_float+0xb6>
 8006d92:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006d96:	ea59 0303 	orrs.w	r3, r9, r3
 8006d9a:	d102      	bne.n	8006da2 <_printf_float+0x292>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	07d9      	lsls	r1, r3, #31
 8006da0:	d5d7      	bpl.n	8006d52 <_printf_float+0x242>
 8006da2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006da6:	4631      	mov	r1, r6
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b8      	blx	r7
 8006dac:	3001      	adds	r0, #1
 8006dae:	f43f af0a 	beq.w	8006bc6 <_printf_float+0xb6>
 8006db2:	f04f 0a00 	mov.w	sl, #0
 8006db6:	f104 0b1a 	add.w	fp, r4, #26
 8006dba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	4553      	cmp	r3, sl
 8006dc0:	dc01      	bgt.n	8006dc6 <_printf_float+0x2b6>
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	e793      	b.n	8006cee <_printf_float+0x1de>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	465a      	mov	r2, fp
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f aef8 	beq.w	8006bc6 <_printf_float+0xb6>
 8006dd6:	f10a 0a01 	add.w	sl, sl, #1
 8006dda:	e7ee      	b.n	8006dba <_printf_float+0x2aa>
 8006ddc:	7fefffff 	.word	0x7fefffff
 8006de0:	080098e6 	.word	0x080098e6
 8006de4:	080098ea 	.word	0x080098ea
 8006de8:	080098ee 	.word	0x080098ee
 8006dec:	080098f2 	.word	0x080098f2
 8006df0:	080098f6 	.word	0x080098f6
 8006df4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006df6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006dfa:	4553      	cmp	r3, sl
 8006dfc:	bfa8      	it	ge
 8006dfe:	4653      	movge	r3, sl
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	4699      	mov	r9, r3
 8006e04:	dc36      	bgt.n	8006e74 <_printf_float+0x364>
 8006e06:	f04f 0b00 	mov.w	fp, #0
 8006e0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e0e:	f104 021a 	add.w	r2, r4, #26
 8006e12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e16:	eba3 0309 	sub.w	r3, r3, r9
 8006e1a:	455b      	cmp	r3, fp
 8006e1c:	dc31      	bgt.n	8006e82 <_printf_float+0x372>
 8006e1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e20:	459a      	cmp	sl, r3
 8006e22:	dc3a      	bgt.n	8006e9a <_printf_float+0x38a>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	07da      	lsls	r2, r3, #31
 8006e28:	d437      	bmi.n	8006e9a <_printf_float+0x38a>
 8006e2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e2c:	ebaa 0903 	sub.w	r9, sl, r3
 8006e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e32:	ebaa 0303 	sub.w	r3, sl, r3
 8006e36:	4599      	cmp	r9, r3
 8006e38:	bfa8      	it	ge
 8006e3a:	4699      	movge	r9, r3
 8006e3c:	f1b9 0f00 	cmp.w	r9, #0
 8006e40:	dc33      	bgt.n	8006eaa <_printf_float+0x39a>
 8006e42:	f04f 0800 	mov.w	r8, #0
 8006e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e4a:	f104 0b1a 	add.w	fp, r4, #26
 8006e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e50:	ebaa 0303 	sub.w	r3, sl, r3
 8006e54:	eba3 0309 	sub.w	r3, r3, r9
 8006e58:	4543      	cmp	r3, r8
 8006e5a:	f77f af7a 	ble.w	8006d52 <_printf_float+0x242>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	465a      	mov	r2, fp
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f43f aeac 	beq.w	8006bc6 <_printf_float+0xb6>
 8006e6e:	f108 0801 	add.w	r8, r8, #1
 8006e72:	e7ec      	b.n	8006e4e <_printf_float+0x33e>
 8006e74:	4642      	mov	r2, r8
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d1c2      	bne.n	8006e06 <_printf_float+0x2f6>
 8006e80:	e6a1      	b.n	8006bc6 <_printf_float+0xb6>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	920a      	str	r2, [sp, #40]	@ 0x28
 8006e8a:	47b8      	blx	r7
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	f43f ae9a 	beq.w	8006bc6 <_printf_float+0xb6>
 8006e92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e94:	f10b 0b01 	add.w	fp, fp, #1
 8006e98:	e7bb      	b.n	8006e12 <_printf_float+0x302>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d1c0      	bne.n	8006e2a <_printf_float+0x31a>
 8006ea8:	e68d      	b.n	8006bc6 <_printf_float+0xb6>
 8006eaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006eac:	464b      	mov	r3, r9
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	4442      	add	r2, r8
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d1c3      	bne.n	8006e42 <_printf_float+0x332>
 8006eba:	e684      	b.n	8006bc6 <_printf_float+0xb6>
 8006ebc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006ec0:	f1ba 0f01 	cmp.w	sl, #1
 8006ec4:	dc01      	bgt.n	8006eca <_printf_float+0x3ba>
 8006ec6:	07db      	lsls	r3, r3, #31
 8006ec8:	d536      	bpl.n	8006f38 <_printf_float+0x428>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4642      	mov	r2, r8
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f43f ae76 	beq.w	8006bc6 <_printf_float+0xb6>
 8006eda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f43f ae6e 	beq.w	8006bc6 <_printf_float+0xb6>
 8006eea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ef6:	f7f9 fd57 	bl	80009a8 <__aeabi_dcmpeq>
 8006efa:	b9c0      	cbnz	r0, 8006f2e <_printf_float+0x41e>
 8006efc:	4653      	mov	r3, sl
 8006efe:	f108 0201 	add.w	r2, r8, #1
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d10c      	bne.n	8006f26 <_printf_float+0x416>
 8006f0c:	e65b      	b.n	8006bc6 <_printf_float+0xb6>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	465a      	mov	r2, fp
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	f43f ae54 	beq.w	8006bc6 <_printf_float+0xb6>
 8006f1e:	f108 0801 	add.w	r8, r8, #1
 8006f22:	45d0      	cmp	r8, sl
 8006f24:	dbf3      	blt.n	8006f0e <_printf_float+0x3fe>
 8006f26:	464b      	mov	r3, r9
 8006f28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f2c:	e6e0      	b.n	8006cf0 <_printf_float+0x1e0>
 8006f2e:	f04f 0800 	mov.w	r8, #0
 8006f32:	f104 0b1a 	add.w	fp, r4, #26
 8006f36:	e7f4      	b.n	8006f22 <_printf_float+0x412>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	4642      	mov	r2, r8
 8006f3c:	e7e1      	b.n	8006f02 <_printf_float+0x3f2>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	464a      	mov	r2, r9
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f ae3c 	beq.w	8006bc6 <_printf_float+0xb6>
 8006f4e:	f108 0801 	add.w	r8, r8, #1
 8006f52:	68e3      	ldr	r3, [r4, #12]
 8006f54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006f56:	1a5b      	subs	r3, r3, r1
 8006f58:	4543      	cmp	r3, r8
 8006f5a:	dcf0      	bgt.n	8006f3e <_printf_float+0x42e>
 8006f5c:	e6fd      	b.n	8006d5a <_printf_float+0x24a>
 8006f5e:	f04f 0800 	mov.w	r8, #0
 8006f62:	f104 0919 	add.w	r9, r4, #25
 8006f66:	e7f4      	b.n	8006f52 <_printf_float+0x442>

08006f68 <_printf_common>:
 8006f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	4698      	mov	r8, r3
 8006f70:	688a      	ldr	r2, [r1, #8]
 8006f72:	690b      	ldr	r3, [r1, #16]
 8006f74:	4607      	mov	r7, r0
 8006f76:	4293      	cmp	r3, r2
 8006f78:	bfb8      	it	lt
 8006f7a:	4613      	movlt	r3, r2
 8006f7c:	6033      	str	r3, [r6, #0]
 8006f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f82:	460c      	mov	r4, r1
 8006f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f88:	b10a      	cbz	r2, 8006f8e <_printf_common+0x26>
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	6033      	str	r3, [r6, #0]
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	0699      	lsls	r1, r3, #26
 8006f92:	bf42      	ittt	mi
 8006f94:	6833      	ldrmi	r3, [r6, #0]
 8006f96:	3302      	addmi	r3, #2
 8006f98:	6033      	strmi	r3, [r6, #0]
 8006f9a:	6825      	ldr	r5, [r4, #0]
 8006f9c:	f015 0506 	ands.w	r5, r5, #6
 8006fa0:	d106      	bne.n	8006fb0 <_printf_common+0x48>
 8006fa2:	f104 0a19 	add.w	sl, r4, #25
 8006fa6:	68e3      	ldr	r3, [r4, #12]
 8006fa8:	6832      	ldr	r2, [r6, #0]
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	42ab      	cmp	r3, r5
 8006fae:	dc2b      	bgt.n	8007008 <_printf_common+0xa0>
 8006fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fb4:	6822      	ldr	r2, [r4, #0]
 8006fb6:	3b00      	subs	r3, #0
 8006fb8:	bf18      	it	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	0692      	lsls	r2, r2, #26
 8006fbe:	d430      	bmi.n	8007022 <_printf_common+0xba>
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fc8:	47c8      	blx	r9
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d023      	beq.n	8007016 <_printf_common+0xae>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	6922      	ldr	r2, [r4, #16]
 8006fd2:	f003 0306 	and.w	r3, r3, #6
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	bf14      	ite	ne
 8006fda:	2500      	movne	r5, #0
 8006fdc:	6833      	ldreq	r3, [r6, #0]
 8006fde:	f04f 0600 	mov.w	r6, #0
 8006fe2:	bf08      	it	eq
 8006fe4:	68e5      	ldreq	r5, [r4, #12]
 8006fe6:	f104 041a 	add.w	r4, r4, #26
 8006fea:	bf08      	it	eq
 8006fec:	1aed      	subeq	r5, r5, r3
 8006fee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ff2:	bf08      	it	eq
 8006ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	bfc4      	itt	gt
 8006ffc:	1a9b      	subgt	r3, r3, r2
 8006ffe:	18ed      	addgt	r5, r5, r3
 8007000:	42b5      	cmp	r5, r6
 8007002:	d11a      	bne.n	800703a <_printf_common+0xd2>
 8007004:	2000      	movs	r0, #0
 8007006:	e008      	b.n	800701a <_printf_common+0xb2>
 8007008:	2301      	movs	r3, #1
 800700a:	4652      	mov	r2, sl
 800700c:	4641      	mov	r1, r8
 800700e:	4638      	mov	r0, r7
 8007010:	47c8      	blx	r9
 8007012:	3001      	adds	r0, #1
 8007014:	d103      	bne.n	800701e <_printf_common+0xb6>
 8007016:	f04f 30ff 	mov.w	r0, #4294967295
 800701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701e:	3501      	adds	r5, #1
 8007020:	e7c1      	b.n	8006fa6 <_printf_common+0x3e>
 8007022:	2030      	movs	r0, #48	@ 0x30
 8007024:	18e1      	adds	r1, r4, r3
 8007026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007030:	4422      	add	r2, r4
 8007032:	3302      	adds	r3, #2
 8007034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007038:	e7c2      	b.n	8006fc0 <_printf_common+0x58>
 800703a:	2301      	movs	r3, #1
 800703c:	4622      	mov	r2, r4
 800703e:	4641      	mov	r1, r8
 8007040:	4638      	mov	r0, r7
 8007042:	47c8      	blx	r9
 8007044:	3001      	adds	r0, #1
 8007046:	d0e6      	beq.n	8007016 <_printf_common+0xae>
 8007048:	3601      	adds	r6, #1
 800704a:	e7d9      	b.n	8007000 <_printf_common+0x98>

0800704c <_printf_i>:
 800704c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	7e0f      	ldrb	r7, [r1, #24]
 8007052:	4691      	mov	r9, r2
 8007054:	2f78      	cmp	r7, #120	@ 0x78
 8007056:	4680      	mov	r8, r0
 8007058:	460c      	mov	r4, r1
 800705a:	469a      	mov	sl, r3
 800705c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800705e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007062:	d807      	bhi.n	8007074 <_printf_i+0x28>
 8007064:	2f62      	cmp	r7, #98	@ 0x62
 8007066:	d80a      	bhi.n	800707e <_printf_i+0x32>
 8007068:	2f00      	cmp	r7, #0
 800706a:	f000 80d3 	beq.w	8007214 <_printf_i+0x1c8>
 800706e:	2f58      	cmp	r7, #88	@ 0x58
 8007070:	f000 80ba 	beq.w	80071e8 <_printf_i+0x19c>
 8007074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800707c:	e03a      	b.n	80070f4 <_printf_i+0xa8>
 800707e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007082:	2b15      	cmp	r3, #21
 8007084:	d8f6      	bhi.n	8007074 <_printf_i+0x28>
 8007086:	a101      	add	r1, pc, #4	@ (adr r1, 800708c <_printf_i+0x40>)
 8007088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070f9 	.word	0x080070f9
 8007094:	08007075 	.word	0x08007075
 8007098:	08007075 	.word	0x08007075
 800709c:	08007075 	.word	0x08007075
 80070a0:	08007075 	.word	0x08007075
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007075 	.word	0x08007075
 80070ac:	08007075 	.word	0x08007075
 80070b0:	08007075 	.word	0x08007075
 80070b4:	08007075 	.word	0x08007075
 80070b8:	080071fb 	.word	0x080071fb
 80070bc:	08007123 	.word	0x08007123
 80070c0:	080071b5 	.word	0x080071b5
 80070c4:	08007075 	.word	0x08007075
 80070c8:	08007075 	.word	0x08007075
 80070cc:	0800721d 	.word	0x0800721d
 80070d0:	08007075 	.word	0x08007075
 80070d4:	08007123 	.word	0x08007123
 80070d8:	08007075 	.word	0x08007075
 80070dc:	08007075 	.word	0x08007075
 80070e0:	080071bd 	.word	0x080071bd
 80070e4:	6833      	ldr	r3, [r6, #0]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6032      	str	r2, [r6, #0]
 80070ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070f4:	2301      	movs	r3, #1
 80070f6:	e09e      	b.n	8007236 <_printf_i+0x1ea>
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	6031      	str	r1, [r6, #0]
 8007100:	0606      	lsls	r6, r0, #24
 8007102:	d501      	bpl.n	8007108 <_printf_i+0xbc>
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	e003      	b.n	8007110 <_printf_i+0xc4>
 8007108:	0645      	lsls	r5, r0, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0xb8>
 800710c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007110:	2d00      	cmp	r5, #0
 8007112:	da03      	bge.n	800711c <_printf_i+0xd0>
 8007114:	232d      	movs	r3, #45	@ 0x2d
 8007116:	426d      	negs	r5, r5
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711c:	230a      	movs	r3, #10
 800711e:	4859      	ldr	r0, [pc, #356]	@ (8007284 <_printf_i+0x238>)
 8007120:	e011      	b.n	8007146 <_printf_i+0xfa>
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	0608      	lsls	r0, r1, #24
 8007128:	f853 5b04 	ldr.w	r5, [r3], #4
 800712c:	d402      	bmi.n	8007134 <_printf_i+0xe8>
 800712e:	0649      	lsls	r1, r1, #25
 8007130:	bf48      	it	mi
 8007132:	b2ad      	uxthmi	r5, r5
 8007134:	2f6f      	cmp	r7, #111	@ 0x6f
 8007136:	6033      	str	r3, [r6, #0]
 8007138:	bf14      	ite	ne
 800713a:	230a      	movne	r3, #10
 800713c:	2308      	moveq	r3, #8
 800713e:	4851      	ldr	r0, [pc, #324]	@ (8007284 <_printf_i+0x238>)
 8007140:	2100      	movs	r1, #0
 8007142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007146:	6866      	ldr	r6, [r4, #4]
 8007148:	2e00      	cmp	r6, #0
 800714a:	bfa8      	it	ge
 800714c:	6821      	ldrge	r1, [r4, #0]
 800714e:	60a6      	str	r6, [r4, #8]
 8007150:	bfa4      	itt	ge
 8007152:	f021 0104 	bicge.w	r1, r1, #4
 8007156:	6021      	strge	r1, [r4, #0]
 8007158:	b90d      	cbnz	r5, 800715e <_printf_i+0x112>
 800715a:	2e00      	cmp	r6, #0
 800715c:	d04b      	beq.n	80071f6 <_printf_i+0x1aa>
 800715e:	4616      	mov	r6, r2
 8007160:	fbb5 f1f3 	udiv	r1, r5, r3
 8007164:	fb03 5711 	mls	r7, r3, r1, r5
 8007168:	5dc7      	ldrb	r7, [r0, r7]
 800716a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800716e:	462f      	mov	r7, r5
 8007170:	42bb      	cmp	r3, r7
 8007172:	460d      	mov	r5, r1
 8007174:	d9f4      	bls.n	8007160 <_printf_i+0x114>
 8007176:	2b08      	cmp	r3, #8
 8007178:	d10b      	bne.n	8007192 <_printf_i+0x146>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	07df      	lsls	r7, r3, #31
 800717e:	d508      	bpl.n	8007192 <_printf_i+0x146>
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	6861      	ldr	r1, [r4, #4]
 8007184:	4299      	cmp	r1, r3
 8007186:	bfde      	ittt	le
 8007188:	2330      	movle	r3, #48	@ 0x30
 800718a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800718e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007192:	1b92      	subs	r2, r2, r6
 8007194:	6122      	str	r2, [r4, #16]
 8007196:	464b      	mov	r3, r9
 8007198:	4621      	mov	r1, r4
 800719a:	4640      	mov	r0, r8
 800719c:	f8cd a000 	str.w	sl, [sp]
 80071a0:	aa03      	add	r2, sp, #12
 80071a2:	f7ff fee1 	bl	8006f68 <_printf_common>
 80071a6:	3001      	adds	r0, #1
 80071a8:	d14a      	bne.n	8007240 <_printf_i+0x1f4>
 80071aa:	f04f 30ff 	mov.w	r0, #4294967295
 80071ae:	b004      	add	sp, #16
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	f043 0320 	orr.w	r3, r3, #32
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	2778      	movs	r7, #120	@ 0x78
 80071be:	4832      	ldr	r0, [pc, #200]	@ (8007288 <_printf_i+0x23c>)
 80071c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	6831      	ldr	r1, [r6, #0]
 80071c8:	061f      	lsls	r7, r3, #24
 80071ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80071ce:	d402      	bmi.n	80071d6 <_printf_i+0x18a>
 80071d0:	065f      	lsls	r7, r3, #25
 80071d2:	bf48      	it	mi
 80071d4:	b2ad      	uxthmi	r5, r5
 80071d6:	6031      	str	r1, [r6, #0]
 80071d8:	07d9      	lsls	r1, r3, #31
 80071da:	bf44      	itt	mi
 80071dc:	f043 0320 	orrmi.w	r3, r3, #32
 80071e0:	6023      	strmi	r3, [r4, #0]
 80071e2:	b11d      	cbz	r5, 80071ec <_printf_i+0x1a0>
 80071e4:	2310      	movs	r3, #16
 80071e6:	e7ab      	b.n	8007140 <_printf_i+0xf4>
 80071e8:	4826      	ldr	r0, [pc, #152]	@ (8007284 <_printf_i+0x238>)
 80071ea:	e7e9      	b.n	80071c0 <_printf_i+0x174>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	f023 0320 	bic.w	r3, r3, #32
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	e7f6      	b.n	80071e4 <_printf_i+0x198>
 80071f6:	4616      	mov	r6, r2
 80071f8:	e7bd      	b.n	8007176 <_printf_i+0x12a>
 80071fa:	6833      	ldr	r3, [r6, #0]
 80071fc:	6825      	ldr	r5, [r4, #0]
 80071fe:	1d18      	adds	r0, r3, #4
 8007200:	6961      	ldr	r1, [r4, #20]
 8007202:	6030      	str	r0, [r6, #0]
 8007204:	062e      	lsls	r6, r5, #24
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	d501      	bpl.n	800720e <_printf_i+0x1c2>
 800720a:	6019      	str	r1, [r3, #0]
 800720c:	e002      	b.n	8007214 <_printf_i+0x1c8>
 800720e:	0668      	lsls	r0, r5, #25
 8007210:	d5fb      	bpl.n	800720a <_printf_i+0x1be>
 8007212:	8019      	strh	r1, [r3, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	4616      	mov	r6, r2
 8007218:	6123      	str	r3, [r4, #16]
 800721a:	e7bc      	b.n	8007196 <_printf_i+0x14a>
 800721c:	6833      	ldr	r3, [r6, #0]
 800721e:	2100      	movs	r1, #0
 8007220:	1d1a      	adds	r2, r3, #4
 8007222:	6032      	str	r2, [r6, #0]
 8007224:	681e      	ldr	r6, [r3, #0]
 8007226:	6862      	ldr	r2, [r4, #4]
 8007228:	4630      	mov	r0, r6
 800722a:	f000 fac8 	bl	80077be <memchr>
 800722e:	b108      	cbz	r0, 8007234 <_printf_i+0x1e8>
 8007230:	1b80      	subs	r0, r0, r6
 8007232:	6060      	str	r0, [r4, #4]
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	2300      	movs	r3, #0
 800723a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723e:	e7aa      	b.n	8007196 <_printf_i+0x14a>
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	47d0      	blx	sl
 800724a:	3001      	adds	r0, #1
 800724c:	d0ad      	beq.n	80071aa <_printf_i+0x15e>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	079b      	lsls	r3, r3, #30
 8007252:	d413      	bmi.n	800727c <_printf_i+0x230>
 8007254:	68e0      	ldr	r0, [r4, #12]
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	4298      	cmp	r0, r3
 800725a:	bfb8      	it	lt
 800725c:	4618      	movlt	r0, r3
 800725e:	e7a6      	b.n	80071ae <_printf_i+0x162>
 8007260:	2301      	movs	r3, #1
 8007262:	4632      	mov	r2, r6
 8007264:	4649      	mov	r1, r9
 8007266:	4640      	mov	r0, r8
 8007268:	47d0      	blx	sl
 800726a:	3001      	adds	r0, #1
 800726c:	d09d      	beq.n	80071aa <_printf_i+0x15e>
 800726e:	3501      	adds	r5, #1
 8007270:	68e3      	ldr	r3, [r4, #12]
 8007272:	9903      	ldr	r1, [sp, #12]
 8007274:	1a5b      	subs	r3, r3, r1
 8007276:	42ab      	cmp	r3, r5
 8007278:	dcf2      	bgt.n	8007260 <_printf_i+0x214>
 800727a:	e7eb      	b.n	8007254 <_printf_i+0x208>
 800727c:	2500      	movs	r5, #0
 800727e:	f104 0619 	add.w	r6, r4, #25
 8007282:	e7f5      	b.n	8007270 <_printf_i+0x224>
 8007284:	080098f8 	.word	0x080098f8
 8007288:	08009909 	.word	0x08009909

0800728c <std>:
 800728c:	2300      	movs	r3, #0
 800728e:	b510      	push	{r4, lr}
 8007290:	4604      	mov	r4, r0
 8007292:	e9c0 3300 	strd	r3, r3, [r0]
 8007296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800729a:	6083      	str	r3, [r0, #8]
 800729c:	8181      	strh	r1, [r0, #12]
 800729e:	6643      	str	r3, [r0, #100]	@ 0x64
 80072a0:	81c2      	strh	r2, [r0, #14]
 80072a2:	6183      	str	r3, [r0, #24]
 80072a4:	4619      	mov	r1, r3
 80072a6:	2208      	movs	r2, #8
 80072a8:	305c      	adds	r0, #92	@ 0x5c
 80072aa:	f000 f9f9 	bl	80076a0 <memset>
 80072ae:	4b0d      	ldr	r3, [pc, #52]	@ (80072e4 <std+0x58>)
 80072b0:	6224      	str	r4, [r4, #32]
 80072b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80072b4:	4b0c      	ldr	r3, [pc, #48]	@ (80072e8 <std+0x5c>)
 80072b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072b8:	4b0c      	ldr	r3, [pc, #48]	@ (80072ec <std+0x60>)
 80072ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072bc:	4b0c      	ldr	r3, [pc, #48]	@ (80072f0 <std+0x64>)
 80072be:	6323      	str	r3, [r4, #48]	@ 0x30
 80072c0:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <std+0x68>)
 80072c2:	429c      	cmp	r4, r3
 80072c4:	d006      	beq.n	80072d4 <std+0x48>
 80072c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072ca:	4294      	cmp	r4, r2
 80072cc:	d002      	beq.n	80072d4 <std+0x48>
 80072ce:	33d0      	adds	r3, #208	@ 0xd0
 80072d0:	429c      	cmp	r4, r3
 80072d2:	d105      	bne.n	80072e0 <std+0x54>
 80072d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072dc:	f000 ba6c 	b.w	80077b8 <__retarget_lock_init_recursive>
 80072e0:	bd10      	pop	{r4, pc}
 80072e2:	bf00      	nop
 80072e4:	080074f1 	.word	0x080074f1
 80072e8:	08007513 	.word	0x08007513
 80072ec:	0800754b 	.word	0x0800754b
 80072f0:	0800756f 	.word	0x0800756f
 80072f4:	200014d4 	.word	0x200014d4

080072f8 <stdio_exit_handler>:
 80072f8:	4a02      	ldr	r2, [pc, #8]	@ (8007304 <stdio_exit_handler+0xc>)
 80072fa:	4903      	ldr	r1, [pc, #12]	@ (8007308 <stdio_exit_handler+0x10>)
 80072fc:	4803      	ldr	r0, [pc, #12]	@ (800730c <stdio_exit_handler+0x14>)
 80072fe:	f000 b869 	b.w	80073d4 <_fwalk_sglue>
 8007302:	bf00      	nop
 8007304:	20000020 	.word	0x20000020
 8007308:	08008fe9 	.word	0x08008fe9
 800730c:	20000030 	.word	0x20000030

08007310 <cleanup_stdio>:
 8007310:	6841      	ldr	r1, [r0, #4]
 8007312:	4b0c      	ldr	r3, [pc, #48]	@ (8007344 <cleanup_stdio+0x34>)
 8007314:	b510      	push	{r4, lr}
 8007316:	4299      	cmp	r1, r3
 8007318:	4604      	mov	r4, r0
 800731a:	d001      	beq.n	8007320 <cleanup_stdio+0x10>
 800731c:	f001 fe64 	bl	8008fe8 <_fflush_r>
 8007320:	68a1      	ldr	r1, [r4, #8]
 8007322:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <cleanup_stdio+0x38>)
 8007324:	4299      	cmp	r1, r3
 8007326:	d002      	beq.n	800732e <cleanup_stdio+0x1e>
 8007328:	4620      	mov	r0, r4
 800732a:	f001 fe5d 	bl	8008fe8 <_fflush_r>
 800732e:	68e1      	ldr	r1, [r4, #12]
 8007330:	4b06      	ldr	r3, [pc, #24]	@ (800734c <cleanup_stdio+0x3c>)
 8007332:	4299      	cmp	r1, r3
 8007334:	d004      	beq.n	8007340 <cleanup_stdio+0x30>
 8007336:	4620      	mov	r0, r4
 8007338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800733c:	f001 be54 	b.w	8008fe8 <_fflush_r>
 8007340:	bd10      	pop	{r4, pc}
 8007342:	bf00      	nop
 8007344:	200014d4 	.word	0x200014d4
 8007348:	2000153c 	.word	0x2000153c
 800734c:	200015a4 	.word	0x200015a4

08007350 <global_stdio_init.part.0>:
 8007350:	b510      	push	{r4, lr}
 8007352:	4b0b      	ldr	r3, [pc, #44]	@ (8007380 <global_stdio_init.part.0+0x30>)
 8007354:	4c0b      	ldr	r4, [pc, #44]	@ (8007384 <global_stdio_init.part.0+0x34>)
 8007356:	4a0c      	ldr	r2, [pc, #48]	@ (8007388 <global_stdio_init.part.0+0x38>)
 8007358:	4620      	mov	r0, r4
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	2104      	movs	r1, #4
 800735e:	2200      	movs	r2, #0
 8007360:	f7ff ff94 	bl	800728c <std>
 8007364:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007368:	2201      	movs	r2, #1
 800736a:	2109      	movs	r1, #9
 800736c:	f7ff ff8e 	bl	800728c <std>
 8007370:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007374:	2202      	movs	r2, #2
 8007376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800737a:	2112      	movs	r1, #18
 800737c:	f7ff bf86 	b.w	800728c <std>
 8007380:	2000160c 	.word	0x2000160c
 8007384:	200014d4 	.word	0x200014d4
 8007388:	080072f9 	.word	0x080072f9

0800738c <__sfp_lock_acquire>:
 800738c:	4801      	ldr	r0, [pc, #4]	@ (8007394 <__sfp_lock_acquire+0x8>)
 800738e:	f000 ba14 	b.w	80077ba <__retarget_lock_acquire_recursive>
 8007392:	bf00      	nop
 8007394:	20001615 	.word	0x20001615

08007398 <__sfp_lock_release>:
 8007398:	4801      	ldr	r0, [pc, #4]	@ (80073a0 <__sfp_lock_release+0x8>)
 800739a:	f000 ba0f 	b.w	80077bc <__retarget_lock_release_recursive>
 800739e:	bf00      	nop
 80073a0:	20001615 	.word	0x20001615

080073a4 <__sinit>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4604      	mov	r4, r0
 80073a8:	f7ff fff0 	bl	800738c <__sfp_lock_acquire>
 80073ac:	6a23      	ldr	r3, [r4, #32]
 80073ae:	b11b      	cbz	r3, 80073b8 <__sinit+0x14>
 80073b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b4:	f7ff bff0 	b.w	8007398 <__sfp_lock_release>
 80073b8:	4b04      	ldr	r3, [pc, #16]	@ (80073cc <__sinit+0x28>)
 80073ba:	6223      	str	r3, [r4, #32]
 80073bc:	4b04      	ldr	r3, [pc, #16]	@ (80073d0 <__sinit+0x2c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f5      	bne.n	80073b0 <__sinit+0xc>
 80073c4:	f7ff ffc4 	bl	8007350 <global_stdio_init.part.0>
 80073c8:	e7f2      	b.n	80073b0 <__sinit+0xc>
 80073ca:	bf00      	nop
 80073cc:	08007311 	.word	0x08007311
 80073d0:	2000160c 	.word	0x2000160c

080073d4 <_fwalk_sglue>:
 80073d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d8:	4607      	mov	r7, r0
 80073da:	4688      	mov	r8, r1
 80073dc:	4614      	mov	r4, r2
 80073de:	2600      	movs	r6, #0
 80073e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073e4:	f1b9 0901 	subs.w	r9, r9, #1
 80073e8:	d505      	bpl.n	80073f6 <_fwalk_sglue+0x22>
 80073ea:	6824      	ldr	r4, [r4, #0]
 80073ec:	2c00      	cmp	r4, #0
 80073ee:	d1f7      	bne.n	80073e0 <_fwalk_sglue+0xc>
 80073f0:	4630      	mov	r0, r6
 80073f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d907      	bls.n	800740c <_fwalk_sglue+0x38>
 80073fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007400:	3301      	adds	r3, #1
 8007402:	d003      	beq.n	800740c <_fwalk_sglue+0x38>
 8007404:	4629      	mov	r1, r5
 8007406:	4638      	mov	r0, r7
 8007408:	47c0      	blx	r8
 800740a:	4306      	orrs	r6, r0
 800740c:	3568      	adds	r5, #104	@ 0x68
 800740e:	e7e9      	b.n	80073e4 <_fwalk_sglue+0x10>

08007410 <iprintf>:
 8007410:	b40f      	push	{r0, r1, r2, r3}
 8007412:	b507      	push	{r0, r1, r2, lr}
 8007414:	4906      	ldr	r1, [pc, #24]	@ (8007430 <iprintf+0x20>)
 8007416:	ab04      	add	r3, sp, #16
 8007418:	6808      	ldr	r0, [r1, #0]
 800741a:	f853 2b04 	ldr.w	r2, [r3], #4
 800741e:	6881      	ldr	r1, [r0, #8]
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	f001 fc49 	bl	8008cb8 <_vfiprintf_r>
 8007426:	b003      	add	sp, #12
 8007428:	f85d eb04 	ldr.w	lr, [sp], #4
 800742c:	b004      	add	sp, #16
 800742e:	4770      	bx	lr
 8007430:	2000002c 	.word	0x2000002c

08007434 <_puts_r>:
 8007434:	6a03      	ldr	r3, [r0, #32]
 8007436:	b570      	push	{r4, r5, r6, lr}
 8007438:	4605      	mov	r5, r0
 800743a:	460e      	mov	r6, r1
 800743c:	6884      	ldr	r4, [r0, #8]
 800743e:	b90b      	cbnz	r3, 8007444 <_puts_r+0x10>
 8007440:	f7ff ffb0 	bl	80073a4 <__sinit>
 8007444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d405      	bmi.n	8007456 <_puts_r+0x22>
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	0598      	lsls	r0, r3, #22
 800744e:	d402      	bmi.n	8007456 <_puts_r+0x22>
 8007450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007452:	f000 f9b2 	bl	80077ba <__retarget_lock_acquire_recursive>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	0719      	lsls	r1, r3, #28
 800745a:	d502      	bpl.n	8007462 <_puts_r+0x2e>
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d135      	bne.n	80074ce <_puts_r+0x9a>
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 f8c5 	bl	80075f4 <__swsetup_r>
 800746a:	b380      	cbz	r0, 80074ce <_puts_r+0x9a>
 800746c:	f04f 35ff 	mov.w	r5, #4294967295
 8007470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007472:	07da      	lsls	r2, r3, #31
 8007474:	d405      	bmi.n	8007482 <_puts_r+0x4e>
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	059b      	lsls	r3, r3, #22
 800747a:	d402      	bmi.n	8007482 <_puts_r+0x4e>
 800747c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800747e:	f000 f99d 	bl	80077bc <__retarget_lock_release_recursive>
 8007482:	4628      	mov	r0, r5
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	2b00      	cmp	r3, #0
 8007488:	da04      	bge.n	8007494 <_puts_r+0x60>
 800748a:	69a2      	ldr	r2, [r4, #24]
 800748c:	429a      	cmp	r2, r3
 800748e:	dc17      	bgt.n	80074c0 <_puts_r+0x8c>
 8007490:	290a      	cmp	r1, #10
 8007492:	d015      	beq.n	80074c0 <_puts_r+0x8c>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	6022      	str	r2, [r4, #0]
 800749a:	7019      	strb	r1, [r3, #0]
 800749c:	68a3      	ldr	r3, [r4, #8]
 800749e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074a2:	3b01      	subs	r3, #1
 80074a4:	60a3      	str	r3, [r4, #8]
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d1ed      	bne.n	8007486 <_puts_r+0x52>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da11      	bge.n	80074d2 <_puts_r+0x9e>
 80074ae:	4622      	mov	r2, r4
 80074b0:	210a      	movs	r1, #10
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 f85f 	bl	8007576 <__swbuf_r>
 80074b8:	3001      	adds	r0, #1
 80074ba:	d0d7      	beq.n	800746c <_puts_r+0x38>
 80074bc:	250a      	movs	r5, #10
 80074be:	e7d7      	b.n	8007470 <_puts_r+0x3c>
 80074c0:	4622      	mov	r2, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 f857 	bl	8007576 <__swbuf_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	d1e7      	bne.n	800749c <_puts_r+0x68>
 80074cc:	e7ce      	b.n	800746c <_puts_r+0x38>
 80074ce:	3e01      	subs	r6, #1
 80074d0:	e7e4      	b.n	800749c <_puts_r+0x68>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	6022      	str	r2, [r4, #0]
 80074d8:	220a      	movs	r2, #10
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	e7ee      	b.n	80074bc <_puts_r+0x88>
	...

080074e0 <puts>:
 80074e0:	4b02      	ldr	r3, [pc, #8]	@ (80074ec <puts+0xc>)
 80074e2:	4601      	mov	r1, r0
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f7ff bfa5 	b.w	8007434 <_puts_r>
 80074ea:	bf00      	nop
 80074ec:	2000002c 	.word	0x2000002c

080074f0 <__sread>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	460c      	mov	r4, r1
 80074f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f8:	f000 f900 	bl	80076fc <_read_r>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	bfab      	itete	ge
 8007500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007502:	89a3      	ldrhlt	r3, [r4, #12]
 8007504:	181b      	addge	r3, r3, r0
 8007506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800750a:	bfac      	ite	ge
 800750c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800750e:	81a3      	strhlt	r3, [r4, #12]
 8007510:	bd10      	pop	{r4, pc}

08007512 <__swrite>:
 8007512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007516:	461f      	mov	r7, r3
 8007518:	898b      	ldrh	r3, [r1, #12]
 800751a:	4605      	mov	r5, r0
 800751c:	05db      	lsls	r3, r3, #23
 800751e:	460c      	mov	r4, r1
 8007520:	4616      	mov	r6, r2
 8007522:	d505      	bpl.n	8007530 <__swrite+0x1e>
 8007524:	2302      	movs	r3, #2
 8007526:	2200      	movs	r2, #0
 8007528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752c:	f000 f8d4 	bl	80076d8 <_lseek_r>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	4632      	mov	r2, r6
 8007534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	4628      	mov	r0, r5
 800753c:	463b      	mov	r3, r7
 800753e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007546:	f000 b8fb 	b.w	8007740 <_write_r>

0800754a <__sseek>:
 800754a:	b510      	push	{r4, lr}
 800754c:	460c      	mov	r4, r1
 800754e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007552:	f000 f8c1 	bl	80076d8 <_lseek_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	bf15      	itete	ne
 800755c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800755e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007566:	81a3      	strheq	r3, [r4, #12]
 8007568:	bf18      	it	ne
 800756a:	81a3      	strhne	r3, [r4, #12]
 800756c:	bd10      	pop	{r4, pc}

0800756e <__sclose>:
 800756e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007572:	f000 b8a1 	b.w	80076b8 <_close_r>

08007576 <__swbuf_r>:
 8007576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007578:	460e      	mov	r6, r1
 800757a:	4614      	mov	r4, r2
 800757c:	4605      	mov	r5, r0
 800757e:	b118      	cbz	r0, 8007588 <__swbuf_r+0x12>
 8007580:	6a03      	ldr	r3, [r0, #32]
 8007582:	b90b      	cbnz	r3, 8007588 <__swbuf_r+0x12>
 8007584:	f7ff ff0e 	bl	80073a4 <__sinit>
 8007588:	69a3      	ldr	r3, [r4, #24]
 800758a:	60a3      	str	r3, [r4, #8]
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	071a      	lsls	r2, r3, #28
 8007590:	d501      	bpl.n	8007596 <__swbuf_r+0x20>
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	b943      	cbnz	r3, 80075a8 <__swbuf_r+0x32>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 f82b 	bl	80075f4 <__swsetup_r>
 800759e:	b118      	cbz	r0, 80075a8 <__swbuf_r+0x32>
 80075a0:	f04f 37ff 	mov.w	r7, #4294967295
 80075a4:	4638      	mov	r0, r7
 80075a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	6922      	ldr	r2, [r4, #16]
 80075ac:	b2f6      	uxtb	r6, r6
 80075ae:	1a98      	subs	r0, r3, r2
 80075b0:	6963      	ldr	r3, [r4, #20]
 80075b2:	4637      	mov	r7, r6
 80075b4:	4283      	cmp	r3, r0
 80075b6:	dc05      	bgt.n	80075c4 <__swbuf_r+0x4e>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4628      	mov	r0, r5
 80075bc:	f001 fd14 	bl	8008fe8 <_fflush_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d1ed      	bne.n	80075a0 <__swbuf_r+0x2a>
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	60a3      	str	r3, [r4, #8]
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	6022      	str	r2, [r4, #0]
 80075d0:	701e      	strb	r6, [r3, #0]
 80075d2:	6962      	ldr	r2, [r4, #20]
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d004      	beq.n	80075e4 <__swbuf_r+0x6e>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	07db      	lsls	r3, r3, #31
 80075de:	d5e1      	bpl.n	80075a4 <__swbuf_r+0x2e>
 80075e0:	2e0a      	cmp	r6, #10
 80075e2:	d1df      	bne.n	80075a4 <__swbuf_r+0x2e>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f001 fcfe 	bl	8008fe8 <_fflush_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0d9      	beq.n	80075a4 <__swbuf_r+0x2e>
 80075f0:	e7d6      	b.n	80075a0 <__swbuf_r+0x2a>
	...

080075f4 <__swsetup_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4b29      	ldr	r3, [pc, #164]	@ (800769c <__swsetup_r+0xa8>)
 80075f8:	4605      	mov	r5, r0
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	460c      	mov	r4, r1
 80075fe:	b118      	cbz	r0, 8007608 <__swsetup_r+0x14>
 8007600:	6a03      	ldr	r3, [r0, #32]
 8007602:	b90b      	cbnz	r3, 8007608 <__swsetup_r+0x14>
 8007604:	f7ff fece 	bl	80073a4 <__sinit>
 8007608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760c:	0719      	lsls	r1, r3, #28
 800760e:	d422      	bmi.n	8007656 <__swsetup_r+0x62>
 8007610:	06da      	lsls	r2, r3, #27
 8007612:	d407      	bmi.n	8007624 <__swsetup_r+0x30>
 8007614:	2209      	movs	r2, #9
 8007616:	602a      	str	r2, [r5, #0]
 8007618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	e033      	b.n	800768c <__swsetup_r+0x98>
 8007624:	0758      	lsls	r0, r3, #29
 8007626:	d512      	bpl.n	800764e <__swsetup_r+0x5a>
 8007628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800762a:	b141      	cbz	r1, 800763e <__swsetup_r+0x4a>
 800762c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007630:	4299      	cmp	r1, r3
 8007632:	d002      	beq.n	800763a <__swsetup_r+0x46>
 8007634:	4628      	mov	r0, r5
 8007636:	f000 ff4f 	bl	80084d8 <_free_r>
 800763a:	2300      	movs	r3, #0
 800763c:	6363      	str	r3, [r4, #52]	@ 0x34
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	2300      	movs	r3, #0
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f043 0308 	orr.w	r3, r3, #8
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	b94b      	cbnz	r3, 800766e <__swsetup_r+0x7a>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007664:	d003      	beq.n	800766e <__swsetup_r+0x7a>
 8007666:	4621      	mov	r1, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f001 fd1c 	bl	80090a6 <__smakebuf_r>
 800766e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007672:	f013 0201 	ands.w	r2, r3, #1
 8007676:	d00a      	beq.n	800768e <__swsetup_r+0x9a>
 8007678:	2200      	movs	r2, #0
 800767a:	60a2      	str	r2, [r4, #8]
 800767c:	6962      	ldr	r2, [r4, #20]
 800767e:	4252      	negs	r2, r2
 8007680:	61a2      	str	r2, [r4, #24]
 8007682:	6922      	ldr	r2, [r4, #16]
 8007684:	b942      	cbnz	r2, 8007698 <__swsetup_r+0xa4>
 8007686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800768a:	d1c5      	bne.n	8007618 <__swsetup_r+0x24>
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	0799      	lsls	r1, r3, #30
 8007690:	bf58      	it	pl
 8007692:	6962      	ldrpl	r2, [r4, #20]
 8007694:	60a2      	str	r2, [r4, #8]
 8007696:	e7f4      	b.n	8007682 <__swsetup_r+0x8e>
 8007698:	2000      	movs	r0, #0
 800769a:	e7f7      	b.n	800768c <__swsetup_r+0x98>
 800769c:	2000002c 	.word	0x2000002c

080076a0 <memset>:
 80076a0:	4603      	mov	r3, r0
 80076a2:	4402      	add	r2, r0
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d100      	bne.n	80076aa <memset+0xa>
 80076a8:	4770      	bx	lr
 80076aa:	f803 1b01 	strb.w	r1, [r3], #1
 80076ae:	e7f9      	b.n	80076a4 <memset+0x4>

080076b0 <_localeconv_r>:
 80076b0:	4800      	ldr	r0, [pc, #0]	@ (80076b4 <_localeconv_r+0x4>)
 80076b2:	4770      	bx	lr
 80076b4:	2000016c 	.word	0x2000016c

080076b8 <_close_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	2300      	movs	r3, #0
 80076bc:	4d05      	ldr	r5, [pc, #20]	@ (80076d4 <_close_r+0x1c>)
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7fb f996 	bl	80029f4 <_close>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_close_r+0x1a>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_close_r+0x1a>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20001610 	.word	0x20001610

080076d8 <_lseek_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	2200      	movs	r2, #0
 80076e2:	4d05      	ldr	r5, [pc, #20]	@ (80076f8 <_lseek_r+0x20>)
 80076e4:	602a      	str	r2, [r5, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7fb f98e 	bl	8002a08 <_lseek>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_lseek_r+0x1e>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_lseek_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20001610 	.word	0x20001610

080076fc <_read_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	2200      	movs	r2, #0
 8007706:	4d05      	ldr	r5, [pc, #20]	@ (800771c <_read_r+0x20>)
 8007708:	602a      	str	r2, [r5, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f7fb f962 	bl	80029d4 <_read>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_read_r+0x1e>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_read_r+0x1e>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20001610 	.word	0x20001610

08007720 <_sbrk_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	2300      	movs	r3, #0
 8007724:	4d05      	ldr	r5, [pc, #20]	@ (800773c <_sbrk_r+0x1c>)
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7fb f96e 	bl	8002a0c <_sbrk>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_sbrk_r+0x1a>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_sbrk_r+0x1a>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20001610 	.word	0x20001610

08007740 <_write_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	2200      	movs	r2, #0
 800774a:	4d05      	ldr	r5, [pc, #20]	@ (8007760 <_write_r+0x20>)
 800774c:	602a      	str	r2, [r5, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	f7fa fd4e 	bl	80021f0 <_write>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d102      	bne.n	800775e <_write_r+0x1e>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b103      	cbz	r3, 800775e <_write_r+0x1e>
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	20001610 	.word	0x20001610

08007764 <__errno>:
 8007764:	4b01      	ldr	r3, [pc, #4]	@ (800776c <__errno+0x8>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	2000002c 	.word	0x2000002c

08007770 <__libc_init_array>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	2600      	movs	r6, #0
 8007774:	4d0c      	ldr	r5, [pc, #48]	@ (80077a8 <__libc_init_array+0x38>)
 8007776:	4c0d      	ldr	r4, [pc, #52]	@ (80077ac <__libc_init_array+0x3c>)
 8007778:	1b64      	subs	r4, r4, r5
 800777a:	10a4      	asrs	r4, r4, #2
 800777c:	42a6      	cmp	r6, r4
 800777e:	d109      	bne.n	8007794 <__libc_init_array+0x24>
 8007780:	f001 fd6e 	bl	8009260 <_init>
 8007784:	2600      	movs	r6, #0
 8007786:	4d0a      	ldr	r5, [pc, #40]	@ (80077b0 <__libc_init_array+0x40>)
 8007788:	4c0a      	ldr	r4, [pc, #40]	@ (80077b4 <__libc_init_array+0x44>)
 800778a:	1b64      	subs	r4, r4, r5
 800778c:	10a4      	asrs	r4, r4, #2
 800778e:	42a6      	cmp	r6, r4
 8007790:	d105      	bne.n	800779e <__libc_init_array+0x2e>
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	f855 3b04 	ldr.w	r3, [r5], #4
 8007798:	4798      	blx	r3
 800779a:	3601      	adds	r6, #1
 800779c:	e7ee      	b.n	800777c <__libc_init_array+0xc>
 800779e:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a2:	4798      	blx	r3
 80077a4:	3601      	adds	r6, #1
 80077a6:	e7f2      	b.n	800778e <__libc_init_array+0x1e>
 80077a8:	08009c5c 	.word	0x08009c5c
 80077ac:	08009c5c 	.word	0x08009c5c
 80077b0:	08009c5c 	.word	0x08009c5c
 80077b4:	08009c60 	.word	0x08009c60

080077b8 <__retarget_lock_init_recursive>:
 80077b8:	4770      	bx	lr

080077ba <__retarget_lock_acquire_recursive>:
 80077ba:	4770      	bx	lr

080077bc <__retarget_lock_release_recursive>:
 80077bc:	4770      	bx	lr

080077be <memchr>:
 80077be:	4603      	mov	r3, r0
 80077c0:	b510      	push	{r4, lr}
 80077c2:	b2c9      	uxtb	r1, r1
 80077c4:	4402      	add	r2, r0
 80077c6:	4293      	cmp	r3, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	d101      	bne.n	80077d0 <memchr+0x12>
 80077cc:	2000      	movs	r0, #0
 80077ce:	e003      	b.n	80077d8 <memchr+0x1a>
 80077d0:	7804      	ldrb	r4, [r0, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	428c      	cmp	r4, r1
 80077d6:	d1f6      	bne.n	80077c6 <memchr+0x8>
 80077d8:	bd10      	pop	{r4, pc}

080077da <memcpy>:
 80077da:	440a      	add	r2, r1
 80077dc:	4291      	cmp	r1, r2
 80077de:	f100 33ff 	add.w	r3, r0, #4294967295
 80077e2:	d100      	bne.n	80077e6 <memcpy+0xc>
 80077e4:	4770      	bx	lr
 80077e6:	b510      	push	{r4, lr}
 80077e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ec:	4291      	cmp	r1, r2
 80077ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f2:	d1f9      	bne.n	80077e8 <memcpy+0xe>
 80077f4:	bd10      	pop	{r4, pc}
	...

080077f8 <__assert_func>:
 80077f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077fa:	4614      	mov	r4, r2
 80077fc:	461a      	mov	r2, r3
 80077fe:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <__assert_func+0x2c>)
 8007800:	4605      	mov	r5, r0
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68d8      	ldr	r0, [r3, #12]
 8007806:	b954      	cbnz	r4, 800781e <__assert_func+0x26>
 8007808:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <__assert_func+0x30>)
 800780a:	461c      	mov	r4, r3
 800780c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007810:	9100      	str	r1, [sp, #0]
 8007812:	462b      	mov	r3, r5
 8007814:	4905      	ldr	r1, [pc, #20]	@ (800782c <__assert_func+0x34>)
 8007816:	f001 fc0f 	bl	8009038 <fiprintf>
 800781a:	f001 fca3 	bl	8009164 <abort>
 800781e:	4b04      	ldr	r3, [pc, #16]	@ (8007830 <__assert_func+0x38>)
 8007820:	e7f4      	b.n	800780c <__assert_func+0x14>
 8007822:	bf00      	nop
 8007824:	2000002c 	.word	0x2000002c
 8007828:	08009955 	.word	0x08009955
 800782c:	08009927 	.word	0x08009927
 8007830:	0800991a 	.word	0x0800991a

08007834 <quorem>:
 8007834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	6903      	ldr	r3, [r0, #16]
 800783a:	690c      	ldr	r4, [r1, #16]
 800783c:	4607      	mov	r7, r0
 800783e:	42a3      	cmp	r3, r4
 8007840:	db7e      	blt.n	8007940 <quorem+0x10c>
 8007842:	3c01      	subs	r4, #1
 8007844:	00a3      	lsls	r3, r4, #2
 8007846:	f100 0514 	add.w	r5, r0, #20
 800784a:	f101 0814 	add.w	r8, r1, #20
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800785a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800785e:	3301      	adds	r3, #1
 8007860:	429a      	cmp	r2, r3
 8007862:	fbb2 f6f3 	udiv	r6, r2, r3
 8007866:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800786a:	d32e      	bcc.n	80078ca <quorem+0x96>
 800786c:	f04f 0a00 	mov.w	sl, #0
 8007870:	46c4      	mov	ip, r8
 8007872:	46ae      	mov	lr, r5
 8007874:	46d3      	mov	fp, sl
 8007876:	f85c 3b04 	ldr.w	r3, [ip], #4
 800787a:	b298      	uxth	r0, r3
 800787c:	fb06 a000 	mla	r0, r6, r0, sl
 8007880:	0c1b      	lsrs	r3, r3, #16
 8007882:	0c02      	lsrs	r2, r0, #16
 8007884:	fb06 2303 	mla	r3, r6, r3, r2
 8007888:	f8de 2000 	ldr.w	r2, [lr]
 800788c:	b280      	uxth	r0, r0
 800788e:	b292      	uxth	r2, r2
 8007890:	1a12      	subs	r2, r2, r0
 8007892:	445a      	add	r2, fp
 8007894:	f8de 0000 	ldr.w	r0, [lr]
 8007898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800789c:	b29b      	uxth	r3, r3
 800789e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80078a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80078a6:	b292      	uxth	r2, r2
 80078a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078ac:	45e1      	cmp	r9, ip
 80078ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078b2:	f84e 2b04 	str.w	r2, [lr], #4
 80078b6:	d2de      	bcs.n	8007876 <quorem+0x42>
 80078b8:	9b00      	ldr	r3, [sp, #0]
 80078ba:	58eb      	ldr	r3, [r5, r3]
 80078bc:	b92b      	cbnz	r3, 80078ca <quorem+0x96>
 80078be:	9b01      	ldr	r3, [sp, #4]
 80078c0:	3b04      	subs	r3, #4
 80078c2:	429d      	cmp	r5, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	d32f      	bcc.n	8007928 <quorem+0xf4>
 80078c8:	613c      	str	r4, [r7, #16]
 80078ca:	4638      	mov	r0, r7
 80078cc:	f001 f8c4 	bl	8008a58 <__mcmp>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	db25      	blt.n	8007920 <quorem+0xec>
 80078d4:	4629      	mov	r1, r5
 80078d6:	2000      	movs	r0, #0
 80078d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80078dc:	f8d1 c000 	ldr.w	ip, [r1]
 80078e0:	fa1f fe82 	uxth.w	lr, r2
 80078e4:	fa1f f38c 	uxth.w	r3, ip
 80078e8:	eba3 030e 	sub.w	r3, r3, lr
 80078ec:	4403      	add	r3, r0
 80078ee:	0c12      	lsrs	r2, r2, #16
 80078f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078fe:	45c1      	cmp	r9, r8
 8007900:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007904:	f841 3b04 	str.w	r3, [r1], #4
 8007908:	d2e6      	bcs.n	80078d8 <quorem+0xa4>
 800790a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800790e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007912:	b922      	cbnz	r2, 800791e <quorem+0xea>
 8007914:	3b04      	subs	r3, #4
 8007916:	429d      	cmp	r5, r3
 8007918:	461a      	mov	r2, r3
 800791a:	d30b      	bcc.n	8007934 <quorem+0x100>
 800791c:	613c      	str	r4, [r7, #16]
 800791e:	3601      	adds	r6, #1
 8007920:	4630      	mov	r0, r6
 8007922:	b003      	add	sp, #12
 8007924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	3b04      	subs	r3, #4
 800792c:	2a00      	cmp	r2, #0
 800792e:	d1cb      	bne.n	80078c8 <quorem+0x94>
 8007930:	3c01      	subs	r4, #1
 8007932:	e7c6      	b.n	80078c2 <quorem+0x8e>
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	3b04      	subs	r3, #4
 8007938:	2a00      	cmp	r2, #0
 800793a:	d1ef      	bne.n	800791c <quorem+0xe8>
 800793c:	3c01      	subs	r4, #1
 800793e:	e7ea      	b.n	8007916 <quorem+0xe2>
 8007940:	2000      	movs	r0, #0
 8007942:	e7ee      	b.n	8007922 <quorem+0xee>
 8007944:	0000      	movs	r0, r0
	...

08007948 <_dtoa_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	4614      	mov	r4, r2
 800794e:	461d      	mov	r5, r3
 8007950:	69c7      	ldr	r7, [r0, #28]
 8007952:	b097      	sub	sp, #92	@ 0x5c
 8007954:	4683      	mov	fp, r0
 8007956:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800795a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800795c:	b97f      	cbnz	r7, 800797e <_dtoa_r+0x36>
 800795e:	2010      	movs	r0, #16
 8007960:	f7fe ff82 	bl	8006868 <malloc>
 8007964:	4602      	mov	r2, r0
 8007966:	f8cb 001c 	str.w	r0, [fp, #28]
 800796a:	b920      	cbnz	r0, 8007976 <_dtoa_r+0x2e>
 800796c:	21ef      	movs	r1, #239	@ 0xef
 800796e:	4ba8      	ldr	r3, [pc, #672]	@ (8007c10 <_dtoa_r+0x2c8>)
 8007970:	48a8      	ldr	r0, [pc, #672]	@ (8007c14 <_dtoa_r+0x2cc>)
 8007972:	f7ff ff41 	bl	80077f8 <__assert_func>
 8007976:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800797a:	6007      	str	r7, [r0, #0]
 800797c:	60c7      	str	r7, [r0, #12]
 800797e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	b159      	cbz	r1, 800799e <_dtoa_r+0x56>
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	2301      	movs	r3, #1
 800798a:	4093      	lsls	r3, r2
 800798c:	604a      	str	r2, [r1, #4]
 800798e:	608b      	str	r3, [r1, #8]
 8007990:	4658      	mov	r0, fp
 8007992:	f000 fe29 	bl	80085e8 <_Bfree>
 8007996:	2200      	movs	r2, #0
 8007998:	f8db 301c 	ldr.w	r3, [fp, #28]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	1e2b      	subs	r3, r5, #0
 80079a0:	bfaf      	iteee	ge
 80079a2:	2300      	movge	r3, #0
 80079a4:	2201      	movlt	r2, #1
 80079a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079aa:	9303      	strlt	r3, [sp, #12]
 80079ac:	bfa8      	it	ge
 80079ae:	6033      	strge	r3, [r6, #0]
 80079b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80079b4:	4b98      	ldr	r3, [pc, #608]	@ (8007c18 <_dtoa_r+0x2d0>)
 80079b6:	bfb8      	it	lt
 80079b8:	6032      	strlt	r2, [r6, #0]
 80079ba:	ea33 0308 	bics.w	r3, r3, r8
 80079be:	d112      	bne.n	80079e6 <_dtoa_r+0x9e>
 80079c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80079cc:	4323      	orrs	r3, r4
 80079ce:	f000 8550 	beq.w	8008472 <_dtoa_r+0xb2a>
 80079d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80079d4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007c1c <_dtoa_r+0x2d4>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8552 	beq.w	8008482 <_dtoa_r+0xb3a>
 80079de:	f10a 0303 	add.w	r3, sl, #3
 80079e2:	f000 bd4c 	b.w	800847e <_dtoa_r+0xb36>
 80079e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80079ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f2:	2200      	movs	r2, #0
 80079f4:	2300      	movs	r3, #0
 80079f6:	f7f8 ffd7 	bl	80009a8 <__aeabi_dcmpeq>
 80079fa:	4607      	mov	r7, r0
 80079fc:	b158      	cbz	r0, 8007a16 <_dtoa_r+0xce>
 80079fe:	2301      	movs	r3, #1
 8007a00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a06:	b113      	cbz	r3, 8007a0e <_dtoa_r+0xc6>
 8007a08:	4b85      	ldr	r3, [pc, #532]	@ (8007c20 <_dtoa_r+0x2d8>)
 8007a0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007c24 <_dtoa_r+0x2dc>
 8007a12:	f000 bd36 	b.w	8008482 <_dtoa_r+0xb3a>
 8007a16:	ab14      	add	r3, sp, #80	@ 0x50
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	ab15      	add	r3, sp, #84	@ 0x54
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4658      	mov	r0, fp
 8007a20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a24:	f001 f8c8 	bl	8008bb8 <__d2b>
 8007a28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007a2c:	4681      	mov	r9, r0
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d077      	beq.n	8007b22 <_dtoa_r+0x1da>
 8007a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a48:	9712      	str	r7, [sp, #72]	@ 0x48
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4b76      	ldr	r3, [pc, #472]	@ (8007c28 <_dtoa_r+0x2e0>)
 8007a50:	f7f8 fb8a 	bl	8000168 <__aeabi_dsub>
 8007a54:	a368      	add	r3, pc, #416	@ (adr r3, 8007bf8 <_dtoa_r+0x2b0>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fd3d 	bl	80004d8 <__aeabi_dmul>
 8007a5e:	a368      	add	r3, pc, #416	@ (adr r3, 8007c00 <_dtoa_r+0x2b8>)
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f7f8 fb82 	bl	800016c <__adddf3>
 8007a68:	4604      	mov	r4, r0
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	f7f8 fcc9 	bl	8000404 <__aeabi_i2d>
 8007a72:	a365      	add	r3, pc, #404	@ (adr r3, 8007c08 <_dtoa_r+0x2c0>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f7f8 fd2e 	bl	80004d8 <__aeabi_dmul>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4620      	mov	r0, r4
 8007a82:	4629      	mov	r1, r5
 8007a84:	f7f8 fb72 	bl	800016c <__adddf3>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	f7f8 ffd4 	bl	8000a38 <__aeabi_d2iz>
 8007a90:	2200      	movs	r2, #0
 8007a92:	4607      	mov	r7, r0
 8007a94:	2300      	movs	r3, #0
 8007a96:	4620      	mov	r0, r4
 8007a98:	4629      	mov	r1, r5
 8007a9a:	f7f8 ff8f 	bl	80009bc <__aeabi_dcmplt>
 8007a9e:	b140      	cbz	r0, 8007ab2 <_dtoa_r+0x16a>
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7f8 fcaf 	bl	8000404 <__aeabi_i2d>
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	f7f8 ff7d 	bl	80009a8 <__aeabi_dcmpeq>
 8007aae:	b900      	cbnz	r0, 8007ab2 <_dtoa_r+0x16a>
 8007ab0:	3f01      	subs	r7, #1
 8007ab2:	2f16      	cmp	r7, #22
 8007ab4:	d853      	bhi.n	8007b5e <_dtoa_r+0x216>
 8007ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aba:	4b5c      	ldr	r3, [pc, #368]	@ (8007c2c <_dtoa_r+0x2e4>)
 8007abc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f7f8 ff7a 	bl	80009bc <__aeabi_dcmplt>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d04a      	beq.n	8007b62 <_dtoa_r+0x21a>
 8007acc:	2300      	movs	r3, #0
 8007ace:	3f01      	subs	r7, #1
 8007ad0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ad2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ad4:	1b9b      	subs	r3, r3, r6
 8007ad6:	1e5a      	subs	r2, r3, #1
 8007ad8:	bf46      	itte	mi
 8007ada:	f1c3 0801 	rsbmi	r8, r3, #1
 8007ade:	2300      	movmi	r3, #0
 8007ae0:	f04f 0800 	movpl.w	r8, #0
 8007ae4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ae6:	bf48      	it	mi
 8007ae8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007aea:	2f00      	cmp	r7, #0
 8007aec:	db3b      	blt.n	8007b66 <_dtoa_r+0x21e>
 8007aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af0:	970e      	str	r7, [sp, #56]	@ 0x38
 8007af2:	443b      	add	r3, r7
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	2300      	movs	r3, #0
 8007af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007afa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007afc:	2b09      	cmp	r3, #9
 8007afe:	d866      	bhi.n	8007bce <_dtoa_r+0x286>
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	bfc4      	itt	gt
 8007b04:	3b04      	subgt	r3, #4
 8007b06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007b08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b0a:	bfc8      	it	gt
 8007b0c:	2400      	movgt	r4, #0
 8007b0e:	f1a3 0302 	sub.w	r3, r3, #2
 8007b12:	bfd8      	it	le
 8007b14:	2401      	movle	r4, #1
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d864      	bhi.n	8007be4 <_dtoa_r+0x29c>
 8007b1a:	e8df f003 	tbb	[pc, r3]
 8007b1e:	382b      	.short	0x382b
 8007b20:	5636      	.short	0x5636
 8007b22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007b26:	441e      	add	r6, r3
 8007b28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	bfc1      	itttt	gt
 8007b30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b34:	fa08 f803 	lslgt.w	r8, r8, r3
 8007b38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b40:	bfd6      	itet	le
 8007b42:	f1c3 0320 	rsble	r3, r3, #32
 8007b46:	ea48 0003 	orrgt.w	r0, r8, r3
 8007b4a:	fa04 f003 	lslle.w	r0, r4, r3
 8007b4e:	f7f8 fc49 	bl	80003e4 <__aeabi_ui2d>
 8007b52:	2201      	movs	r2, #1
 8007b54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b58:	3e01      	subs	r6, #1
 8007b5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8007b5c:	e775      	b.n	8007a4a <_dtoa_r+0x102>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e7b6      	b.n	8007ad0 <_dtoa_r+0x188>
 8007b62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007b64:	e7b5      	b.n	8007ad2 <_dtoa_r+0x18a>
 8007b66:	427b      	negs	r3, r7
 8007b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	eba8 0807 	sub.w	r8, r8, r7
 8007b70:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b72:	e7c2      	b.n	8007afa <_dtoa_r+0x1b2>
 8007b74:	2300      	movs	r3, #0
 8007b76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dc35      	bgt.n	8007bea <_dtoa_r+0x2a2>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	461a      	mov	r2, r3
 8007b82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b86:	9221      	str	r2, [sp, #132]	@ 0x84
 8007b88:	e00b      	b.n	8007ba2 <_dtoa_r+0x25a>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e7f3      	b.n	8007b76 <_dtoa_r+0x22e>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b94:	18fb      	adds	r3, r7, r3
 8007b96:	9308      	str	r3, [sp, #32]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	9307      	str	r3, [sp, #28]
 8007b9e:	bfb8      	it	lt
 8007ba0:	2301      	movlt	r3, #1
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007baa:	f102 0514 	add.w	r5, r2, #20
 8007bae:	429d      	cmp	r5, r3
 8007bb0:	d91f      	bls.n	8007bf2 <_dtoa_r+0x2aa>
 8007bb2:	6041      	str	r1, [r0, #4]
 8007bb4:	4658      	mov	r0, fp
 8007bb6:	f000 fcd7 	bl	8008568 <_Balloc>
 8007bba:	4682      	mov	sl, r0
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d139      	bne.n	8007c34 <_dtoa_r+0x2ec>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c30 <_dtoa_r+0x2e8>)
 8007bc8:	e6d2      	b.n	8007970 <_dtoa_r+0x28>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e7e0      	b.n	8007b90 <_dtoa_r+0x248>
 8007bce:	2401      	movs	r4, #1
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bd4:	9320      	str	r3, [sp, #128]	@ 0x80
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	2200      	movs	r2, #0
 8007bdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007be0:	2312      	movs	r3, #18
 8007be2:	e7d0      	b.n	8007b86 <_dtoa_r+0x23e>
 8007be4:	2301      	movs	r3, #1
 8007be6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007be8:	e7f5      	b.n	8007bd6 <_dtoa_r+0x28e>
 8007bea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007bf0:	e7d7      	b.n	8007ba2 <_dtoa_r+0x25a>
 8007bf2:	3101      	adds	r1, #1
 8007bf4:	0052      	lsls	r2, r2, #1
 8007bf6:	e7d8      	b.n	8007baa <_dtoa_r+0x262>
 8007bf8:	636f4361 	.word	0x636f4361
 8007bfc:	3fd287a7 	.word	0x3fd287a7
 8007c00:	8b60c8b3 	.word	0x8b60c8b3
 8007c04:	3fc68a28 	.word	0x3fc68a28
 8007c08:	509f79fb 	.word	0x509f79fb
 8007c0c:	3fd34413 	.word	0x3fd34413
 8007c10:	08009963 	.word	0x08009963
 8007c14:	0800997a 	.word	0x0800997a
 8007c18:	7ff00000 	.word	0x7ff00000
 8007c1c:	0800995f 	.word	0x0800995f
 8007c20:	080098f7 	.word	0x080098f7
 8007c24:	080098f6 	.word	0x080098f6
 8007c28:	3ff80000 	.word	0x3ff80000
 8007c2c:	08009a70 	.word	0x08009a70
 8007c30:	080099d2 	.word	0x080099d2
 8007c34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c38:	6018      	str	r0, [r3, #0]
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	2b0e      	cmp	r3, #14
 8007c3e:	f200 80a4 	bhi.w	8007d8a <_dtoa_r+0x442>
 8007c42:	2c00      	cmp	r4, #0
 8007c44:	f000 80a1 	beq.w	8007d8a <_dtoa_r+0x442>
 8007c48:	2f00      	cmp	r7, #0
 8007c4a:	dd33      	ble.n	8007cb4 <_dtoa_r+0x36c>
 8007c4c:	4b86      	ldr	r3, [pc, #536]	@ (8007e68 <_dtoa_r+0x520>)
 8007c4e:	f007 020f 	and.w	r2, r7, #15
 8007c52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c56:	05f8      	lsls	r0, r7, #23
 8007c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c64:	d516      	bpl.n	8007c94 <_dtoa_r+0x34c>
 8007c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c6a:	4b80      	ldr	r3, [pc, #512]	@ (8007e6c <_dtoa_r+0x524>)
 8007c6c:	2603      	movs	r6, #3
 8007c6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c72:	f7f8 fd5b 	bl	800072c <__aeabi_ddiv>
 8007c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c7a:	f004 040f 	and.w	r4, r4, #15
 8007c7e:	4d7b      	ldr	r5, [pc, #492]	@ (8007e6c <_dtoa_r+0x524>)
 8007c80:	b954      	cbnz	r4, 8007c98 <_dtoa_r+0x350>
 8007c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c8a:	f7f8 fd4f 	bl	800072c <__aeabi_ddiv>
 8007c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c92:	e028      	b.n	8007ce6 <_dtoa_r+0x39e>
 8007c94:	2602      	movs	r6, #2
 8007c96:	e7f2      	b.n	8007c7e <_dtoa_r+0x336>
 8007c98:	07e1      	lsls	r1, r4, #31
 8007c9a:	d508      	bpl.n	8007cae <_dtoa_r+0x366>
 8007c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ca0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ca4:	f7f8 fc18 	bl	80004d8 <__aeabi_dmul>
 8007ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cac:	3601      	adds	r6, #1
 8007cae:	1064      	asrs	r4, r4, #1
 8007cb0:	3508      	adds	r5, #8
 8007cb2:	e7e5      	b.n	8007c80 <_dtoa_r+0x338>
 8007cb4:	f000 80d2 	beq.w	8007e5c <_dtoa_r+0x514>
 8007cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cbc:	427c      	negs	r4, r7
 8007cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8007e68 <_dtoa_r+0x520>)
 8007cc0:	f004 020f 	and.w	r2, r4, #15
 8007cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f7f8 fc04 	bl	80004d8 <__aeabi_dmul>
 8007cd0:	2602      	movs	r6, #2
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cd8:	4d64      	ldr	r5, [pc, #400]	@ (8007e6c <_dtoa_r+0x524>)
 8007cda:	1124      	asrs	r4, r4, #4
 8007cdc:	2c00      	cmp	r4, #0
 8007cde:	f040 80b2 	bne.w	8007e46 <_dtoa_r+0x4fe>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1d3      	bne.n	8007c8e <_dtoa_r+0x346>
 8007ce6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80b7 	beq.w	8007e60 <_dtoa_r+0x518>
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8007e70 <_dtoa_r+0x528>)
 8007cfa:	f7f8 fe5f 	bl	80009bc <__aeabi_dcmplt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f000 80ae 	beq.w	8007e60 <_dtoa_r+0x518>
 8007d04:	9b07      	ldr	r3, [sp, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80aa 	beq.w	8007e60 <_dtoa_r+0x518>
 8007d0c:	9b08      	ldr	r3, [sp, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	dd37      	ble.n	8007d82 <_dtoa_r+0x43a>
 8007d12:	1e7b      	subs	r3, r7, #1
 8007d14:	4620      	mov	r0, r4
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4b55      	ldr	r3, [pc, #340]	@ (8007e74 <_dtoa_r+0x52c>)
 8007d1e:	f7f8 fbdb 	bl	80004d8 <__aeabi_dmul>
 8007d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d26:	9c08      	ldr	r4, [sp, #32]
 8007d28:	3601      	adds	r6, #1
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7f8 fb6a 	bl	8000404 <__aeabi_i2d>
 8007d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d34:	f7f8 fbd0 	bl	80004d8 <__aeabi_dmul>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e78 <_dtoa_r+0x530>)
 8007d3c:	f7f8 fa16 	bl	800016c <__adddf3>
 8007d40:	4605      	mov	r5, r0
 8007d42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d46:	2c00      	cmp	r4, #0
 8007d48:	f040 809a 	bne.w	8007e80 <_dtoa_r+0x538>
 8007d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d50:	2200      	movs	r2, #0
 8007d52:	4b4a      	ldr	r3, [pc, #296]	@ (8007e7c <_dtoa_r+0x534>)
 8007d54:	f7f8 fa08 	bl	8000168 <__aeabi_dsub>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d60:	462a      	mov	r2, r5
 8007d62:	4633      	mov	r3, r6
 8007d64:	f7f8 fe48 	bl	80009f8 <__aeabi_dcmpgt>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f040 828e 	bne.w	800828a <_dtoa_r+0x942>
 8007d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d72:	462a      	mov	r2, r5
 8007d74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d78:	f7f8 fe20 	bl	80009bc <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f040 8127 	bne.w	8007fd0 <_dtoa_r+0x688>
 8007d82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f2c0 8163 	blt.w	8008058 <_dtoa_r+0x710>
 8007d92:	2f0e      	cmp	r7, #14
 8007d94:	f300 8160 	bgt.w	8008058 <_dtoa_r+0x710>
 8007d98:	4b33      	ldr	r3, [pc, #204]	@ (8007e68 <_dtoa_r+0x520>)
 8007d9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007da2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007da6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da03      	bge.n	8007db4 <_dtoa_r+0x46c>
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f340 8100 	ble.w	8007fb4 <_dtoa_r+0x66c>
 8007db4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007db8:	4656      	mov	r6, sl
 8007dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7f8 fcb3 	bl	800072c <__aeabi_ddiv>
 8007dc6:	f7f8 fe37 	bl	8000a38 <__aeabi_d2iz>
 8007dca:	4680      	mov	r8, r0
 8007dcc:	f7f8 fb1a 	bl	8000404 <__aeabi_i2d>
 8007dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dd4:	f7f8 fb80 	bl	80004d8 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7f8 f9c2 	bl	8000168 <__aeabi_dsub>
 8007de4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007de8:	9d07      	ldr	r5, [sp, #28]
 8007dea:	f806 4b01 	strb.w	r4, [r6], #1
 8007dee:	eba6 040a 	sub.w	r4, r6, sl
 8007df2:	42a5      	cmp	r5, r4
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	f040 8116 	bne.w	8008028 <_dtoa_r+0x6e0>
 8007dfc:	f7f8 f9b6 	bl	800016c <__adddf3>
 8007e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	f7f8 fdf6 	bl	80009f8 <__aeabi_dcmpgt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f040 80f8 	bne.w	8008002 <_dtoa_r+0x6ba>
 8007e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f8 fdc5 	bl	80009a8 <__aeabi_dcmpeq>
 8007e1e:	b118      	cbz	r0, 8007e28 <_dtoa_r+0x4e0>
 8007e20:	f018 0f01 	tst.w	r8, #1
 8007e24:	f040 80ed 	bne.w	8008002 <_dtoa_r+0x6ba>
 8007e28:	4649      	mov	r1, r9
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 fbdc 	bl	80085e8 <_Bfree>
 8007e30:	2300      	movs	r3, #0
 8007e32:	7033      	strb	r3, [r6, #0]
 8007e34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e36:	3701      	adds	r7, #1
 8007e38:	601f      	str	r7, [r3, #0]
 8007e3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 8320 	beq.w	8008482 <_dtoa_r+0xb3a>
 8007e42:	601e      	str	r6, [r3, #0]
 8007e44:	e31d      	b.n	8008482 <_dtoa_r+0xb3a>
 8007e46:	07e2      	lsls	r2, r4, #31
 8007e48:	d505      	bpl.n	8007e56 <_dtoa_r+0x50e>
 8007e4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e4e:	f7f8 fb43 	bl	80004d8 <__aeabi_dmul>
 8007e52:	2301      	movs	r3, #1
 8007e54:	3601      	adds	r6, #1
 8007e56:	1064      	asrs	r4, r4, #1
 8007e58:	3508      	adds	r5, #8
 8007e5a:	e73f      	b.n	8007cdc <_dtoa_r+0x394>
 8007e5c:	2602      	movs	r6, #2
 8007e5e:	e742      	b.n	8007ce6 <_dtoa_r+0x39e>
 8007e60:	9c07      	ldr	r4, [sp, #28]
 8007e62:	9704      	str	r7, [sp, #16]
 8007e64:	e761      	b.n	8007d2a <_dtoa_r+0x3e2>
 8007e66:	bf00      	nop
 8007e68:	08009a70 	.word	0x08009a70
 8007e6c:	08009a48 	.word	0x08009a48
 8007e70:	3ff00000 	.word	0x3ff00000
 8007e74:	40240000 	.word	0x40240000
 8007e78:	401c0000 	.word	0x401c0000
 8007e7c:	40140000 	.word	0x40140000
 8007e80:	4b70      	ldr	r3, [pc, #448]	@ (8008044 <_dtoa_r+0x6fc>)
 8007e82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e8c:	4454      	add	r4, sl
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	d045      	beq.n	8007f1e <_dtoa_r+0x5d6>
 8007e92:	2000      	movs	r0, #0
 8007e94:	496c      	ldr	r1, [pc, #432]	@ (8008048 <_dtoa_r+0x700>)
 8007e96:	f7f8 fc49 	bl	800072c <__aeabi_ddiv>
 8007e9a:	4633      	mov	r3, r6
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	f7f8 f963 	bl	8000168 <__aeabi_dsub>
 8007ea2:	4656      	mov	r6, sl
 8007ea4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eac:	f7f8 fdc4 	bl	8000a38 <__aeabi_d2iz>
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	f7f8 faa7 	bl	8000404 <__aeabi_i2d>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ebe:	f7f8 f953 	bl	8000168 <__aeabi_dsub>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	3530      	adds	r5, #48	@ 0x30
 8007ec8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ecc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ed0:	f806 5b01 	strb.w	r5, [r6], #1
 8007ed4:	f7f8 fd72 	bl	80009bc <__aeabi_dcmplt>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d163      	bne.n	8007fa4 <_dtoa_r+0x65c>
 8007edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	495a      	ldr	r1, [pc, #360]	@ (800804c <_dtoa_r+0x704>)
 8007ee4:	f7f8 f940 	bl	8000168 <__aeabi_dsub>
 8007ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eec:	f7f8 fd66 	bl	80009bc <__aeabi_dcmplt>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f040 8087 	bne.w	8008004 <_dtoa_r+0x6bc>
 8007ef6:	42a6      	cmp	r6, r4
 8007ef8:	f43f af43 	beq.w	8007d82 <_dtoa_r+0x43a>
 8007efc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f00:	2200      	movs	r2, #0
 8007f02:	4b53      	ldr	r3, [pc, #332]	@ (8008050 <_dtoa_r+0x708>)
 8007f04:	f7f8 fae8 	bl	80004d8 <__aeabi_dmul>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f12:	4b4f      	ldr	r3, [pc, #316]	@ (8008050 <_dtoa_r+0x708>)
 8007f14:	f7f8 fae0 	bl	80004d8 <__aeabi_dmul>
 8007f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f1c:	e7c4      	b.n	8007ea8 <_dtoa_r+0x560>
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	f7f8 fad9 	bl	80004d8 <__aeabi_dmul>
 8007f26:	4656      	mov	r6, sl
 8007f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f2c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f32:	f7f8 fd81 	bl	8000a38 <__aeabi_d2iz>
 8007f36:	4605      	mov	r5, r0
 8007f38:	f7f8 fa64 	bl	8000404 <__aeabi_i2d>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f44:	f7f8 f910 	bl	8000168 <__aeabi_dsub>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	3530      	adds	r5, #48	@ 0x30
 8007f4e:	f806 5b01 	strb.w	r5, [r6], #1
 8007f52:	42a6      	cmp	r6, r4
 8007f54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f58:	f04f 0200 	mov.w	r2, #0
 8007f5c:	d124      	bne.n	8007fa8 <_dtoa_r+0x660>
 8007f5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f62:	4b39      	ldr	r3, [pc, #228]	@ (8008048 <_dtoa_r+0x700>)
 8007f64:	f7f8 f902 	bl	800016c <__adddf3>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f70:	f7f8 fd42 	bl	80009f8 <__aeabi_dcmpgt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d145      	bne.n	8008004 <_dtoa_r+0x6bc>
 8007f78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	4932      	ldr	r1, [pc, #200]	@ (8008048 <_dtoa_r+0x700>)
 8007f80:	f7f8 f8f2 	bl	8000168 <__aeabi_dsub>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f8c:	f7f8 fd16 	bl	80009bc <__aeabi_dcmplt>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	f43f aef6 	beq.w	8007d82 <_dtoa_r+0x43a>
 8007f96:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007f98:	1e73      	subs	r3, r6, #1
 8007f9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fa0:	2b30      	cmp	r3, #48	@ 0x30
 8007fa2:	d0f8      	beq.n	8007f96 <_dtoa_r+0x64e>
 8007fa4:	9f04      	ldr	r7, [sp, #16]
 8007fa6:	e73f      	b.n	8007e28 <_dtoa_r+0x4e0>
 8007fa8:	4b29      	ldr	r3, [pc, #164]	@ (8008050 <_dtoa_r+0x708>)
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb2:	e7bc      	b.n	8007f2e <_dtoa_r+0x5e6>
 8007fb4:	d10c      	bne.n	8007fd0 <_dtoa_r+0x688>
 8007fb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4b25      	ldr	r3, [pc, #148]	@ (8008054 <_dtoa_r+0x70c>)
 8007fbe:	f7f8 fa8b 	bl	80004d8 <__aeabi_dmul>
 8007fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fc6:	f7f8 fd0d 	bl	80009e4 <__aeabi_dcmpge>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	f000 815b 	beq.w	8008286 <_dtoa_r+0x93e>
 8007fd0:	2400      	movs	r4, #0
 8007fd2:	4625      	mov	r5, r4
 8007fd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fd6:	4656      	mov	r6, sl
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	2700      	movs	r7, #0
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	f000 fb01 	bl	80085e8 <_Bfree>
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	d0dc      	beq.n	8007fa4 <_dtoa_r+0x65c>
 8007fea:	b12f      	cbz	r7, 8007ff8 <_dtoa_r+0x6b0>
 8007fec:	42af      	cmp	r7, r5
 8007fee:	d003      	beq.n	8007ff8 <_dtoa_r+0x6b0>
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f000 faf8 	bl	80085e8 <_Bfree>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4658      	mov	r0, fp
 8007ffc:	f000 faf4 	bl	80085e8 <_Bfree>
 8008000:	e7d0      	b.n	8007fa4 <_dtoa_r+0x65c>
 8008002:	9704      	str	r7, [sp, #16]
 8008004:	4633      	mov	r3, r6
 8008006:	461e      	mov	r6, r3
 8008008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800800c:	2a39      	cmp	r2, #57	@ 0x39
 800800e:	d107      	bne.n	8008020 <_dtoa_r+0x6d8>
 8008010:	459a      	cmp	sl, r3
 8008012:	d1f8      	bne.n	8008006 <_dtoa_r+0x6be>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	3201      	adds	r2, #1
 8008018:	9204      	str	r2, [sp, #16]
 800801a:	2230      	movs	r2, #48	@ 0x30
 800801c:	f88a 2000 	strb.w	r2, [sl]
 8008020:	781a      	ldrb	r2, [r3, #0]
 8008022:	3201      	adds	r2, #1
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e7bd      	b.n	8007fa4 <_dtoa_r+0x65c>
 8008028:	2200      	movs	r2, #0
 800802a:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <_dtoa_r+0x708>)
 800802c:	f7f8 fa54 	bl	80004d8 <__aeabi_dmul>
 8008030:	2200      	movs	r2, #0
 8008032:	2300      	movs	r3, #0
 8008034:	4604      	mov	r4, r0
 8008036:	460d      	mov	r5, r1
 8008038:	f7f8 fcb6 	bl	80009a8 <__aeabi_dcmpeq>
 800803c:	2800      	cmp	r0, #0
 800803e:	f43f aebc 	beq.w	8007dba <_dtoa_r+0x472>
 8008042:	e6f1      	b.n	8007e28 <_dtoa_r+0x4e0>
 8008044:	08009a70 	.word	0x08009a70
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	3ff00000 	.word	0x3ff00000
 8008050:	40240000 	.word	0x40240000
 8008054:	40140000 	.word	0x40140000
 8008058:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800805a:	2a00      	cmp	r2, #0
 800805c:	f000 80db 	beq.w	8008216 <_dtoa_r+0x8ce>
 8008060:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008062:	2a01      	cmp	r2, #1
 8008064:	f300 80bf 	bgt.w	80081e6 <_dtoa_r+0x89e>
 8008068:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800806a:	2a00      	cmp	r2, #0
 800806c:	f000 80b7 	beq.w	80081de <_dtoa_r+0x896>
 8008070:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008074:	4646      	mov	r6, r8
 8008076:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008078:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800807a:	2101      	movs	r1, #1
 800807c:	441a      	add	r2, r3
 800807e:	4658      	mov	r0, fp
 8008080:	4498      	add	r8, r3
 8008082:	9209      	str	r2, [sp, #36]	@ 0x24
 8008084:	f000 fb64 	bl	8008750 <__i2b>
 8008088:	4605      	mov	r5, r0
 800808a:	b15e      	cbz	r6, 80080a4 <_dtoa_r+0x75c>
 800808c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	dd08      	ble.n	80080a4 <_dtoa_r+0x75c>
 8008092:	42b3      	cmp	r3, r6
 8008094:	bfa8      	it	ge
 8008096:	4633      	movge	r3, r6
 8008098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800809a:	eba8 0803 	sub.w	r8, r8, r3
 800809e:	1af6      	subs	r6, r6, r3
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a6:	b1f3      	cbz	r3, 80080e6 <_dtoa_r+0x79e>
 80080a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80b7 	beq.w	800821e <_dtoa_r+0x8d6>
 80080b0:	b18c      	cbz	r4, 80080d6 <_dtoa_r+0x78e>
 80080b2:	4629      	mov	r1, r5
 80080b4:	4622      	mov	r2, r4
 80080b6:	4658      	mov	r0, fp
 80080b8:	f000 fc08 	bl	80088cc <__pow5mult>
 80080bc:	464a      	mov	r2, r9
 80080be:	4601      	mov	r1, r0
 80080c0:	4605      	mov	r5, r0
 80080c2:	4658      	mov	r0, fp
 80080c4:	f000 fb5a 	bl	800877c <__multiply>
 80080c8:	4649      	mov	r1, r9
 80080ca:	9004      	str	r0, [sp, #16]
 80080cc:	4658      	mov	r0, fp
 80080ce:	f000 fa8b 	bl	80085e8 <_Bfree>
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	4699      	mov	r9, r3
 80080d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d8:	1b1a      	subs	r2, r3, r4
 80080da:	d004      	beq.n	80080e6 <_dtoa_r+0x79e>
 80080dc:	4649      	mov	r1, r9
 80080de:	4658      	mov	r0, fp
 80080e0:	f000 fbf4 	bl	80088cc <__pow5mult>
 80080e4:	4681      	mov	r9, r0
 80080e6:	2101      	movs	r1, #1
 80080e8:	4658      	mov	r0, fp
 80080ea:	f000 fb31 	bl	8008750 <__i2b>
 80080ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080f0:	4604      	mov	r4, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 81c9 	beq.w	800848a <_dtoa_r+0xb42>
 80080f8:	461a      	mov	r2, r3
 80080fa:	4601      	mov	r1, r0
 80080fc:	4658      	mov	r0, fp
 80080fe:	f000 fbe5 	bl	80088cc <__pow5mult>
 8008102:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008104:	4604      	mov	r4, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	f300 808f 	bgt.w	800822a <_dtoa_r+0x8e2>
 800810c:	9b02      	ldr	r3, [sp, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f040 8087 	bne.w	8008222 <_dtoa_r+0x8da>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800811a:	2b00      	cmp	r3, #0
 800811c:	f040 8083 	bne.w	8008226 <_dtoa_r+0x8de>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008126:	0d1b      	lsrs	r3, r3, #20
 8008128:	051b      	lsls	r3, r3, #20
 800812a:	b12b      	cbz	r3, 8008138 <_dtoa_r+0x7f0>
 800812c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812e:	f108 0801 	add.w	r8, r8, #1
 8008132:	3301      	adds	r3, #1
 8008134:	9309      	str	r3, [sp, #36]	@ 0x24
 8008136:	2301      	movs	r3, #1
 8008138:	930a      	str	r3, [sp, #40]	@ 0x28
 800813a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 81aa 	beq.w	8008496 <_dtoa_r+0xb4e>
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008148:	6918      	ldr	r0, [r3, #16]
 800814a:	f000 fab5 	bl	80086b8 <__hi0bits>
 800814e:	f1c0 0020 	rsb	r0, r0, #32
 8008152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008154:	4418      	add	r0, r3
 8008156:	f010 001f 	ands.w	r0, r0, #31
 800815a:	d071      	beq.n	8008240 <_dtoa_r+0x8f8>
 800815c:	f1c0 0320 	rsb	r3, r0, #32
 8008160:	2b04      	cmp	r3, #4
 8008162:	dd65      	ble.n	8008230 <_dtoa_r+0x8e8>
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	f1c0 001c 	rsb	r0, r0, #28
 800816a:	4403      	add	r3, r0
 800816c:	4480      	add	r8, r0
 800816e:	4406      	add	r6, r0
 8008170:	9309      	str	r3, [sp, #36]	@ 0x24
 8008172:	f1b8 0f00 	cmp.w	r8, #0
 8008176:	dd05      	ble.n	8008184 <_dtoa_r+0x83c>
 8008178:	4649      	mov	r1, r9
 800817a:	4642      	mov	r2, r8
 800817c:	4658      	mov	r0, fp
 800817e:	f000 fbff 	bl	8008980 <__lshift>
 8008182:	4681      	mov	r9, r0
 8008184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	dd05      	ble.n	8008196 <_dtoa_r+0x84e>
 800818a:	4621      	mov	r1, r4
 800818c:	461a      	mov	r2, r3
 800818e:	4658      	mov	r0, fp
 8008190:	f000 fbf6 	bl	8008980 <__lshift>
 8008194:	4604      	mov	r4, r0
 8008196:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d053      	beq.n	8008244 <_dtoa_r+0x8fc>
 800819c:	4621      	mov	r1, r4
 800819e:	4648      	mov	r0, r9
 80081a0:	f000 fc5a 	bl	8008a58 <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	da4d      	bge.n	8008244 <_dtoa_r+0x8fc>
 80081a8:	1e7b      	subs	r3, r7, #1
 80081aa:	4649      	mov	r1, r9
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	220a      	movs	r2, #10
 80081b0:	2300      	movs	r3, #0
 80081b2:	4658      	mov	r0, fp
 80081b4:	f000 fa3a 	bl	800862c <__multadd>
 80081b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ba:	4681      	mov	r9, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 816c 	beq.w	800849a <_dtoa_r+0xb52>
 80081c2:	2300      	movs	r3, #0
 80081c4:	4629      	mov	r1, r5
 80081c6:	220a      	movs	r2, #10
 80081c8:	4658      	mov	r0, fp
 80081ca:	f000 fa2f 	bl	800862c <__multadd>
 80081ce:	9b08      	ldr	r3, [sp, #32]
 80081d0:	4605      	mov	r5, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dc61      	bgt.n	800829a <_dtoa_r+0x952>
 80081d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081d8:	2b02      	cmp	r3, #2
 80081da:	dc3b      	bgt.n	8008254 <_dtoa_r+0x90c>
 80081dc:	e05d      	b.n	800829a <_dtoa_r+0x952>
 80081de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081e4:	e746      	b.n	8008074 <_dtoa_r+0x72c>
 80081e6:	9b07      	ldr	r3, [sp, #28]
 80081e8:	1e5c      	subs	r4, r3, #1
 80081ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	bfbf      	itttt	lt
 80081f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80081f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80081f4:	1ae3      	sublt	r3, r4, r3
 80081f6:	18d2      	addlt	r2, r2, r3
 80081f8:	bfa8      	it	ge
 80081fa:	1b1c      	subge	r4, r3, r4
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	bfbe      	ittt	lt
 8008200:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008202:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008204:	2400      	movlt	r4, #0
 8008206:	2b00      	cmp	r3, #0
 8008208:	bfb5      	itete	lt
 800820a:	eba8 0603 	sublt.w	r6, r8, r3
 800820e:	4646      	movge	r6, r8
 8008210:	2300      	movlt	r3, #0
 8008212:	9b07      	ldrge	r3, [sp, #28]
 8008214:	e730      	b.n	8008078 <_dtoa_r+0x730>
 8008216:	4646      	mov	r6, r8
 8008218:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800821a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800821c:	e735      	b.n	800808a <_dtoa_r+0x742>
 800821e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008220:	e75c      	b.n	80080dc <_dtoa_r+0x794>
 8008222:	2300      	movs	r3, #0
 8008224:	e788      	b.n	8008138 <_dtoa_r+0x7f0>
 8008226:	9b02      	ldr	r3, [sp, #8]
 8008228:	e786      	b.n	8008138 <_dtoa_r+0x7f0>
 800822a:	2300      	movs	r3, #0
 800822c:	930a      	str	r3, [sp, #40]	@ 0x28
 800822e:	e788      	b.n	8008142 <_dtoa_r+0x7fa>
 8008230:	d09f      	beq.n	8008172 <_dtoa_r+0x82a>
 8008232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008234:	331c      	adds	r3, #28
 8008236:	441a      	add	r2, r3
 8008238:	4498      	add	r8, r3
 800823a:	441e      	add	r6, r3
 800823c:	9209      	str	r2, [sp, #36]	@ 0x24
 800823e:	e798      	b.n	8008172 <_dtoa_r+0x82a>
 8008240:	4603      	mov	r3, r0
 8008242:	e7f6      	b.n	8008232 <_dtoa_r+0x8ea>
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	9704      	str	r7, [sp, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dc20      	bgt.n	800828e <_dtoa_r+0x946>
 800824c:	9308      	str	r3, [sp, #32]
 800824e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008250:	2b02      	cmp	r3, #2
 8008252:	dd1e      	ble.n	8008292 <_dtoa_r+0x94a>
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f47f aebc 	bne.w	8007fd4 <_dtoa_r+0x68c>
 800825c:	4621      	mov	r1, r4
 800825e:	2205      	movs	r2, #5
 8008260:	4658      	mov	r0, fp
 8008262:	f000 f9e3 	bl	800862c <__multadd>
 8008266:	4601      	mov	r1, r0
 8008268:	4604      	mov	r4, r0
 800826a:	4648      	mov	r0, r9
 800826c:	f000 fbf4 	bl	8008a58 <__mcmp>
 8008270:	2800      	cmp	r0, #0
 8008272:	f77f aeaf 	ble.w	8007fd4 <_dtoa_r+0x68c>
 8008276:	2331      	movs	r3, #49	@ 0x31
 8008278:	4656      	mov	r6, sl
 800827a:	f806 3b01 	strb.w	r3, [r6], #1
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	3301      	adds	r3, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	e6aa      	b.n	8007fdc <_dtoa_r+0x694>
 8008286:	9c07      	ldr	r4, [sp, #28]
 8008288:	9704      	str	r7, [sp, #16]
 800828a:	4625      	mov	r5, r4
 800828c:	e7f3      	b.n	8008276 <_dtoa_r+0x92e>
 800828e:	9b07      	ldr	r3, [sp, #28]
 8008290:	9308      	str	r3, [sp, #32]
 8008292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8104 	beq.w	80084a2 <_dtoa_r+0xb5a>
 800829a:	2e00      	cmp	r6, #0
 800829c:	dd05      	ble.n	80082aa <_dtoa_r+0x962>
 800829e:	4629      	mov	r1, r5
 80082a0:	4632      	mov	r2, r6
 80082a2:	4658      	mov	r0, fp
 80082a4:	f000 fb6c 	bl	8008980 <__lshift>
 80082a8:	4605      	mov	r5, r0
 80082aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d05a      	beq.n	8008366 <_dtoa_r+0xa1e>
 80082b0:	4658      	mov	r0, fp
 80082b2:	6869      	ldr	r1, [r5, #4]
 80082b4:	f000 f958 	bl	8008568 <_Balloc>
 80082b8:	4606      	mov	r6, r0
 80082ba:	b928      	cbnz	r0, 80082c8 <_dtoa_r+0x980>
 80082bc:	4602      	mov	r2, r0
 80082be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082c2:	4b83      	ldr	r3, [pc, #524]	@ (80084d0 <_dtoa_r+0xb88>)
 80082c4:	f7ff bb54 	b.w	8007970 <_dtoa_r+0x28>
 80082c8:	692a      	ldr	r2, [r5, #16]
 80082ca:	f105 010c 	add.w	r1, r5, #12
 80082ce:	3202      	adds	r2, #2
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	300c      	adds	r0, #12
 80082d4:	f7ff fa81 	bl	80077da <memcpy>
 80082d8:	2201      	movs	r2, #1
 80082da:	4631      	mov	r1, r6
 80082dc:	4658      	mov	r0, fp
 80082de:	f000 fb4f 	bl	8008980 <__lshift>
 80082e2:	462f      	mov	r7, r5
 80082e4:	4605      	mov	r5, r0
 80082e6:	f10a 0301 	add.w	r3, sl, #1
 80082ea:	9307      	str	r3, [sp, #28]
 80082ec:	9b08      	ldr	r3, [sp, #32]
 80082ee:	4453      	add	r3, sl
 80082f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082fa:	9b07      	ldr	r3, [sp, #28]
 80082fc:	4621      	mov	r1, r4
 80082fe:	3b01      	subs	r3, #1
 8008300:	4648      	mov	r0, r9
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	f7ff fa96 	bl	8007834 <quorem>
 8008308:	4639      	mov	r1, r7
 800830a:	9008      	str	r0, [sp, #32]
 800830c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008310:	4648      	mov	r0, r9
 8008312:	f000 fba1 	bl	8008a58 <__mcmp>
 8008316:	462a      	mov	r2, r5
 8008318:	9009      	str	r0, [sp, #36]	@ 0x24
 800831a:	4621      	mov	r1, r4
 800831c:	4658      	mov	r0, fp
 800831e:	f000 fbb7 	bl	8008a90 <__mdiff>
 8008322:	68c2      	ldr	r2, [r0, #12]
 8008324:	4606      	mov	r6, r0
 8008326:	bb02      	cbnz	r2, 800836a <_dtoa_r+0xa22>
 8008328:	4601      	mov	r1, r0
 800832a:	4648      	mov	r0, r9
 800832c:	f000 fb94 	bl	8008a58 <__mcmp>
 8008330:	4602      	mov	r2, r0
 8008332:	4631      	mov	r1, r6
 8008334:	4658      	mov	r0, fp
 8008336:	920c      	str	r2, [sp, #48]	@ 0x30
 8008338:	f000 f956 	bl	80085e8 <_Bfree>
 800833c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800833e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008340:	9e07      	ldr	r6, [sp, #28]
 8008342:	ea43 0102 	orr.w	r1, r3, r2
 8008346:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008348:	4319      	orrs	r1, r3
 800834a:	d110      	bne.n	800836e <_dtoa_r+0xa26>
 800834c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008350:	d029      	beq.n	80083a6 <_dtoa_r+0xa5e>
 8008352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd02      	ble.n	800835e <_dtoa_r+0xa16>
 8008358:	9b08      	ldr	r3, [sp, #32]
 800835a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800835e:	9b02      	ldr	r3, [sp, #8]
 8008360:	f883 8000 	strb.w	r8, [r3]
 8008364:	e63b      	b.n	8007fde <_dtoa_r+0x696>
 8008366:	4628      	mov	r0, r5
 8008368:	e7bb      	b.n	80082e2 <_dtoa_r+0x99a>
 800836a:	2201      	movs	r2, #1
 800836c:	e7e1      	b.n	8008332 <_dtoa_r+0x9ea>
 800836e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	db04      	blt.n	800837e <_dtoa_r+0xa36>
 8008374:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008376:	430b      	orrs	r3, r1
 8008378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800837a:	430b      	orrs	r3, r1
 800837c:	d120      	bne.n	80083c0 <_dtoa_r+0xa78>
 800837e:	2a00      	cmp	r2, #0
 8008380:	dded      	ble.n	800835e <_dtoa_r+0xa16>
 8008382:	4649      	mov	r1, r9
 8008384:	2201      	movs	r2, #1
 8008386:	4658      	mov	r0, fp
 8008388:	f000 fafa 	bl	8008980 <__lshift>
 800838c:	4621      	mov	r1, r4
 800838e:	4681      	mov	r9, r0
 8008390:	f000 fb62 	bl	8008a58 <__mcmp>
 8008394:	2800      	cmp	r0, #0
 8008396:	dc03      	bgt.n	80083a0 <_dtoa_r+0xa58>
 8008398:	d1e1      	bne.n	800835e <_dtoa_r+0xa16>
 800839a:	f018 0f01 	tst.w	r8, #1
 800839e:	d0de      	beq.n	800835e <_dtoa_r+0xa16>
 80083a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083a4:	d1d8      	bne.n	8008358 <_dtoa_r+0xa10>
 80083a6:	2339      	movs	r3, #57	@ 0x39
 80083a8:	9a02      	ldr	r2, [sp, #8]
 80083aa:	7013      	strb	r3, [r2, #0]
 80083ac:	4633      	mov	r3, r6
 80083ae:	461e      	mov	r6, r3
 80083b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	2a39      	cmp	r2, #57	@ 0x39
 80083b8:	d052      	beq.n	8008460 <_dtoa_r+0xb18>
 80083ba:	3201      	adds	r2, #1
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	e60e      	b.n	8007fde <_dtoa_r+0x696>
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	dd07      	ble.n	80083d4 <_dtoa_r+0xa8c>
 80083c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083c8:	d0ed      	beq.n	80083a6 <_dtoa_r+0xa5e>
 80083ca:	9a02      	ldr	r2, [sp, #8]
 80083cc:	f108 0301 	add.w	r3, r8, #1
 80083d0:	7013      	strb	r3, [r2, #0]
 80083d2:	e604      	b.n	8007fde <_dtoa_r+0x696>
 80083d4:	9b07      	ldr	r3, [sp, #28]
 80083d6:	9a07      	ldr	r2, [sp, #28]
 80083d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083de:	4293      	cmp	r3, r2
 80083e0:	d028      	beq.n	8008434 <_dtoa_r+0xaec>
 80083e2:	4649      	mov	r1, r9
 80083e4:	2300      	movs	r3, #0
 80083e6:	220a      	movs	r2, #10
 80083e8:	4658      	mov	r0, fp
 80083ea:	f000 f91f 	bl	800862c <__multadd>
 80083ee:	42af      	cmp	r7, r5
 80083f0:	4681      	mov	r9, r0
 80083f2:	f04f 0300 	mov.w	r3, #0
 80083f6:	f04f 020a 	mov.w	r2, #10
 80083fa:	4639      	mov	r1, r7
 80083fc:	4658      	mov	r0, fp
 80083fe:	d107      	bne.n	8008410 <_dtoa_r+0xac8>
 8008400:	f000 f914 	bl	800862c <__multadd>
 8008404:	4607      	mov	r7, r0
 8008406:	4605      	mov	r5, r0
 8008408:	9b07      	ldr	r3, [sp, #28]
 800840a:	3301      	adds	r3, #1
 800840c:	9307      	str	r3, [sp, #28]
 800840e:	e774      	b.n	80082fa <_dtoa_r+0x9b2>
 8008410:	f000 f90c 	bl	800862c <__multadd>
 8008414:	4629      	mov	r1, r5
 8008416:	4607      	mov	r7, r0
 8008418:	2300      	movs	r3, #0
 800841a:	220a      	movs	r2, #10
 800841c:	4658      	mov	r0, fp
 800841e:	f000 f905 	bl	800862c <__multadd>
 8008422:	4605      	mov	r5, r0
 8008424:	e7f0      	b.n	8008408 <_dtoa_r+0xac0>
 8008426:	9b08      	ldr	r3, [sp, #32]
 8008428:	2700      	movs	r7, #0
 800842a:	2b00      	cmp	r3, #0
 800842c:	bfcc      	ite	gt
 800842e:	461e      	movgt	r6, r3
 8008430:	2601      	movle	r6, #1
 8008432:	4456      	add	r6, sl
 8008434:	4649      	mov	r1, r9
 8008436:	2201      	movs	r2, #1
 8008438:	4658      	mov	r0, fp
 800843a:	f000 faa1 	bl	8008980 <__lshift>
 800843e:	4621      	mov	r1, r4
 8008440:	4681      	mov	r9, r0
 8008442:	f000 fb09 	bl	8008a58 <__mcmp>
 8008446:	2800      	cmp	r0, #0
 8008448:	dcb0      	bgt.n	80083ac <_dtoa_r+0xa64>
 800844a:	d102      	bne.n	8008452 <_dtoa_r+0xb0a>
 800844c:	f018 0f01 	tst.w	r8, #1
 8008450:	d1ac      	bne.n	80083ac <_dtoa_r+0xa64>
 8008452:	4633      	mov	r3, r6
 8008454:	461e      	mov	r6, r3
 8008456:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800845a:	2a30      	cmp	r2, #48	@ 0x30
 800845c:	d0fa      	beq.n	8008454 <_dtoa_r+0xb0c>
 800845e:	e5be      	b.n	8007fde <_dtoa_r+0x696>
 8008460:	459a      	cmp	sl, r3
 8008462:	d1a4      	bne.n	80083ae <_dtoa_r+0xa66>
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	3301      	adds	r3, #1
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	2331      	movs	r3, #49	@ 0x31
 800846c:	f88a 3000 	strb.w	r3, [sl]
 8008470:	e5b5      	b.n	8007fde <_dtoa_r+0x696>
 8008472:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008474:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084d4 <_dtoa_r+0xb8c>
 8008478:	b11b      	cbz	r3, 8008482 <_dtoa_r+0xb3a>
 800847a:	f10a 0308 	add.w	r3, sl, #8
 800847e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	4650      	mov	r0, sl
 8008484:	b017      	add	sp, #92	@ 0x5c
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800848c:	2b01      	cmp	r3, #1
 800848e:	f77f ae3d 	ble.w	800810c <_dtoa_r+0x7c4>
 8008492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008494:	930a      	str	r3, [sp, #40]	@ 0x28
 8008496:	2001      	movs	r0, #1
 8008498:	e65b      	b.n	8008152 <_dtoa_r+0x80a>
 800849a:	9b08      	ldr	r3, [sp, #32]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f77f aed6 	ble.w	800824e <_dtoa_r+0x906>
 80084a2:	4656      	mov	r6, sl
 80084a4:	4621      	mov	r1, r4
 80084a6:	4648      	mov	r0, r9
 80084a8:	f7ff f9c4 	bl	8007834 <quorem>
 80084ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084b0:	9b08      	ldr	r3, [sp, #32]
 80084b2:	f806 8b01 	strb.w	r8, [r6], #1
 80084b6:	eba6 020a 	sub.w	r2, r6, sl
 80084ba:	4293      	cmp	r3, r2
 80084bc:	ddb3      	ble.n	8008426 <_dtoa_r+0xade>
 80084be:	4649      	mov	r1, r9
 80084c0:	2300      	movs	r3, #0
 80084c2:	220a      	movs	r2, #10
 80084c4:	4658      	mov	r0, fp
 80084c6:	f000 f8b1 	bl	800862c <__multadd>
 80084ca:	4681      	mov	r9, r0
 80084cc:	e7ea      	b.n	80084a4 <_dtoa_r+0xb5c>
 80084ce:	bf00      	nop
 80084d0:	080099d2 	.word	0x080099d2
 80084d4:	08009956 	.word	0x08009956

080084d8 <_free_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4605      	mov	r5, r0
 80084dc:	2900      	cmp	r1, #0
 80084de:	d040      	beq.n	8008562 <_free_r+0x8a>
 80084e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e4:	1f0c      	subs	r4, r1, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfb8      	it	lt
 80084ea:	18e4      	addlt	r4, r4, r3
 80084ec:	f7fe fa66 	bl	80069bc <__malloc_lock>
 80084f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008564 <_free_r+0x8c>)
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	b933      	cbnz	r3, 8008504 <_free_r+0x2c>
 80084f6:	6063      	str	r3, [r4, #4]
 80084f8:	6014      	str	r4, [r2, #0]
 80084fa:	4628      	mov	r0, r5
 80084fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008500:	f7fe ba62 	b.w	80069c8 <__malloc_unlock>
 8008504:	42a3      	cmp	r3, r4
 8008506:	d908      	bls.n	800851a <_free_r+0x42>
 8008508:	6820      	ldr	r0, [r4, #0]
 800850a:	1821      	adds	r1, r4, r0
 800850c:	428b      	cmp	r3, r1
 800850e:	bf01      	itttt	eq
 8008510:	6819      	ldreq	r1, [r3, #0]
 8008512:	685b      	ldreq	r3, [r3, #4]
 8008514:	1809      	addeq	r1, r1, r0
 8008516:	6021      	streq	r1, [r4, #0]
 8008518:	e7ed      	b.n	80084f6 <_free_r+0x1e>
 800851a:	461a      	mov	r2, r3
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b10b      	cbz	r3, 8008524 <_free_r+0x4c>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d9fa      	bls.n	800851a <_free_r+0x42>
 8008524:	6811      	ldr	r1, [r2, #0]
 8008526:	1850      	adds	r0, r2, r1
 8008528:	42a0      	cmp	r0, r4
 800852a:	d10b      	bne.n	8008544 <_free_r+0x6c>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	4401      	add	r1, r0
 8008530:	1850      	adds	r0, r2, r1
 8008532:	4283      	cmp	r3, r0
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	d1e0      	bne.n	80084fa <_free_r+0x22>
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	4408      	add	r0, r1
 800853e:	6010      	str	r0, [r2, #0]
 8008540:	6053      	str	r3, [r2, #4]
 8008542:	e7da      	b.n	80084fa <_free_r+0x22>
 8008544:	d902      	bls.n	800854c <_free_r+0x74>
 8008546:	230c      	movs	r3, #12
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	e7d6      	b.n	80084fa <_free_r+0x22>
 800854c:	6820      	ldr	r0, [r4, #0]
 800854e:	1821      	adds	r1, r4, r0
 8008550:	428b      	cmp	r3, r1
 8008552:	bf01      	itttt	eq
 8008554:	6819      	ldreq	r1, [r3, #0]
 8008556:	685b      	ldreq	r3, [r3, #4]
 8008558:	1809      	addeq	r1, r1, r0
 800855a:	6021      	streq	r1, [r4, #0]
 800855c:	6063      	str	r3, [r4, #4]
 800855e:	6054      	str	r4, [r2, #4]
 8008560:	e7cb      	b.n	80084fa <_free_r+0x22>
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	200014d0 	.word	0x200014d0

08008568 <_Balloc>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	69c6      	ldr	r6, [r0, #28]
 800856c:	4604      	mov	r4, r0
 800856e:	460d      	mov	r5, r1
 8008570:	b976      	cbnz	r6, 8008590 <_Balloc+0x28>
 8008572:	2010      	movs	r0, #16
 8008574:	f7fe f978 	bl	8006868 <malloc>
 8008578:	4602      	mov	r2, r0
 800857a:	61e0      	str	r0, [r4, #28]
 800857c:	b920      	cbnz	r0, 8008588 <_Balloc+0x20>
 800857e:	216b      	movs	r1, #107	@ 0x6b
 8008580:	4b17      	ldr	r3, [pc, #92]	@ (80085e0 <_Balloc+0x78>)
 8008582:	4818      	ldr	r0, [pc, #96]	@ (80085e4 <_Balloc+0x7c>)
 8008584:	f7ff f938 	bl	80077f8 <__assert_func>
 8008588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800858c:	6006      	str	r6, [r0, #0]
 800858e:	60c6      	str	r6, [r0, #12]
 8008590:	69e6      	ldr	r6, [r4, #28]
 8008592:	68f3      	ldr	r3, [r6, #12]
 8008594:	b183      	cbz	r3, 80085b8 <_Balloc+0x50>
 8008596:	69e3      	ldr	r3, [r4, #28]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800859e:	b9b8      	cbnz	r0, 80085d0 <_Balloc+0x68>
 80085a0:	2101      	movs	r1, #1
 80085a2:	fa01 f605 	lsl.w	r6, r1, r5
 80085a6:	1d72      	adds	r2, r6, #5
 80085a8:	4620      	mov	r0, r4
 80085aa:	0092      	lsls	r2, r2, #2
 80085ac:	f000 fde1 	bl	8009172 <_calloc_r>
 80085b0:	b160      	cbz	r0, 80085cc <_Balloc+0x64>
 80085b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085b6:	e00e      	b.n	80085d6 <_Balloc+0x6e>
 80085b8:	2221      	movs	r2, #33	@ 0x21
 80085ba:	2104      	movs	r1, #4
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fdd8 	bl	8009172 <_calloc_r>
 80085c2:	69e3      	ldr	r3, [r4, #28]
 80085c4:	60f0      	str	r0, [r6, #12]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e4      	bne.n	8008596 <_Balloc+0x2e>
 80085cc:	2000      	movs	r0, #0
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	6802      	ldr	r2, [r0, #0]
 80085d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085d6:	2300      	movs	r3, #0
 80085d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085dc:	e7f7      	b.n	80085ce <_Balloc+0x66>
 80085de:	bf00      	nop
 80085e0:	08009963 	.word	0x08009963
 80085e4:	080099e3 	.word	0x080099e3

080085e8 <_Bfree>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	69c6      	ldr	r6, [r0, #28]
 80085ec:	4605      	mov	r5, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	b976      	cbnz	r6, 8008610 <_Bfree+0x28>
 80085f2:	2010      	movs	r0, #16
 80085f4:	f7fe f938 	bl	8006868 <malloc>
 80085f8:	4602      	mov	r2, r0
 80085fa:	61e8      	str	r0, [r5, #28]
 80085fc:	b920      	cbnz	r0, 8008608 <_Bfree+0x20>
 80085fe:	218f      	movs	r1, #143	@ 0x8f
 8008600:	4b08      	ldr	r3, [pc, #32]	@ (8008624 <_Bfree+0x3c>)
 8008602:	4809      	ldr	r0, [pc, #36]	@ (8008628 <_Bfree+0x40>)
 8008604:	f7ff f8f8 	bl	80077f8 <__assert_func>
 8008608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800860c:	6006      	str	r6, [r0, #0]
 800860e:	60c6      	str	r6, [r0, #12]
 8008610:	b13c      	cbz	r4, 8008622 <_Bfree+0x3a>
 8008612:	69eb      	ldr	r3, [r5, #28]
 8008614:	6862      	ldr	r2, [r4, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800861c:	6021      	str	r1, [r4, #0]
 800861e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	08009963 	.word	0x08009963
 8008628:	080099e3 	.word	0x080099e3

0800862c <__multadd>:
 800862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	4607      	mov	r7, r0
 8008632:	460c      	mov	r4, r1
 8008634:	461e      	mov	r6, r3
 8008636:	2000      	movs	r0, #0
 8008638:	690d      	ldr	r5, [r1, #16]
 800863a:	f101 0c14 	add.w	ip, r1, #20
 800863e:	f8dc 3000 	ldr.w	r3, [ip]
 8008642:	3001      	adds	r0, #1
 8008644:	b299      	uxth	r1, r3
 8008646:	fb02 6101 	mla	r1, r2, r1, r6
 800864a:	0c1e      	lsrs	r6, r3, #16
 800864c:	0c0b      	lsrs	r3, r1, #16
 800864e:	fb02 3306 	mla	r3, r2, r6, r3
 8008652:	b289      	uxth	r1, r1
 8008654:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008658:	4285      	cmp	r5, r0
 800865a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800865e:	f84c 1b04 	str.w	r1, [ip], #4
 8008662:	dcec      	bgt.n	800863e <__multadd+0x12>
 8008664:	b30e      	cbz	r6, 80086aa <__multadd+0x7e>
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	42ab      	cmp	r3, r5
 800866a:	dc19      	bgt.n	80086a0 <__multadd+0x74>
 800866c:	6861      	ldr	r1, [r4, #4]
 800866e:	4638      	mov	r0, r7
 8008670:	3101      	adds	r1, #1
 8008672:	f7ff ff79 	bl	8008568 <_Balloc>
 8008676:	4680      	mov	r8, r0
 8008678:	b928      	cbnz	r0, 8008686 <__multadd+0x5a>
 800867a:	4602      	mov	r2, r0
 800867c:	21ba      	movs	r1, #186	@ 0xba
 800867e:	4b0c      	ldr	r3, [pc, #48]	@ (80086b0 <__multadd+0x84>)
 8008680:	480c      	ldr	r0, [pc, #48]	@ (80086b4 <__multadd+0x88>)
 8008682:	f7ff f8b9 	bl	80077f8 <__assert_func>
 8008686:	6922      	ldr	r2, [r4, #16]
 8008688:	f104 010c 	add.w	r1, r4, #12
 800868c:	3202      	adds	r2, #2
 800868e:	0092      	lsls	r2, r2, #2
 8008690:	300c      	adds	r0, #12
 8008692:	f7ff f8a2 	bl	80077da <memcpy>
 8008696:	4621      	mov	r1, r4
 8008698:	4638      	mov	r0, r7
 800869a:	f7ff ffa5 	bl	80085e8 <_Bfree>
 800869e:	4644      	mov	r4, r8
 80086a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086a4:	3501      	adds	r5, #1
 80086a6:	615e      	str	r6, [r3, #20]
 80086a8:	6125      	str	r5, [r4, #16]
 80086aa:	4620      	mov	r0, r4
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b0:	080099d2 	.word	0x080099d2
 80086b4:	080099e3 	.word	0x080099e3

080086b8 <__hi0bits>:
 80086b8:	4603      	mov	r3, r0
 80086ba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086be:	bf3a      	itte	cc
 80086c0:	0403      	lslcc	r3, r0, #16
 80086c2:	2010      	movcc	r0, #16
 80086c4:	2000      	movcs	r0, #0
 80086c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ca:	bf3c      	itt	cc
 80086cc:	021b      	lslcc	r3, r3, #8
 80086ce:	3008      	addcc	r0, #8
 80086d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d4:	bf3c      	itt	cc
 80086d6:	011b      	lslcc	r3, r3, #4
 80086d8:	3004      	addcc	r0, #4
 80086da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086de:	bf3c      	itt	cc
 80086e0:	009b      	lslcc	r3, r3, #2
 80086e2:	3002      	addcc	r0, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	db05      	blt.n	80086f4 <__hi0bits+0x3c>
 80086e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086ec:	f100 0001 	add.w	r0, r0, #1
 80086f0:	bf08      	it	eq
 80086f2:	2020      	moveq	r0, #32
 80086f4:	4770      	bx	lr

080086f6 <__lo0bits>:
 80086f6:	6803      	ldr	r3, [r0, #0]
 80086f8:	4602      	mov	r2, r0
 80086fa:	f013 0007 	ands.w	r0, r3, #7
 80086fe:	d00b      	beq.n	8008718 <__lo0bits+0x22>
 8008700:	07d9      	lsls	r1, r3, #31
 8008702:	d421      	bmi.n	8008748 <__lo0bits+0x52>
 8008704:	0798      	lsls	r0, r3, #30
 8008706:	bf49      	itett	mi
 8008708:	085b      	lsrmi	r3, r3, #1
 800870a:	089b      	lsrpl	r3, r3, #2
 800870c:	2001      	movmi	r0, #1
 800870e:	6013      	strmi	r3, [r2, #0]
 8008710:	bf5c      	itt	pl
 8008712:	2002      	movpl	r0, #2
 8008714:	6013      	strpl	r3, [r2, #0]
 8008716:	4770      	bx	lr
 8008718:	b299      	uxth	r1, r3
 800871a:	b909      	cbnz	r1, 8008720 <__lo0bits+0x2a>
 800871c:	2010      	movs	r0, #16
 800871e:	0c1b      	lsrs	r3, r3, #16
 8008720:	b2d9      	uxtb	r1, r3
 8008722:	b909      	cbnz	r1, 8008728 <__lo0bits+0x32>
 8008724:	3008      	adds	r0, #8
 8008726:	0a1b      	lsrs	r3, r3, #8
 8008728:	0719      	lsls	r1, r3, #28
 800872a:	bf04      	itt	eq
 800872c:	091b      	lsreq	r3, r3, #4
 800872e:	3004      	addeq	r0, #4
 8008730:	0799      	lsls	r1, r3, #30
 8008732:	bf04      	itt	eq
 8008734:	089b      	lsreq	r3, r3, #2
 8008736:	3002      	addeq	r0, #2
 8008738:	07d9      	lsls	r1, r3, #31
 800873a:	d403      	bmi.n	8008744 <__lo0bits+0x4e>
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	f100 0001 	add.w	r0, r0, #1
 8008742:	d003      	beq.n	800874c <__lo0bits+0x56>
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4770      	bx	lr
 8008748:	2000      	movs	r0, #0
 800874a:	4770      	bx	lr
 800874c:	2020      	movs	r0, #32
 800874e:	4770      	bx	lr

08008750 <__i2b>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	2101      	movs	r1, #1
 8008756:	f7ff ff07 	bl	8008568 <_Balloc>
 800875a:	4602      	mov	r2, r0
 800875c:	b928      	cbnz	r0, 800876a <__i2b+0x1a>
 800875e:	f240 1145 	movw	r1, #325	@ 0x145
 8008762:	4b04      	ldr	r3, [pc, #16]	@ (8008774 <__i2b+0x24>)
 8008764:	4804      	ldr	r0, [pc, #16]	@ (8008778 <__i2b+0x28>)
 8008766:	f7ff f847 	bl	80077f8 <__assert_func>
 800876a:	2301      	movs	r3, #1
 800876c:	6144      	str	r4, [r0, #20]
 800876e:	6103      	str	r3, [r0, #16]
 8008770:	bd10      	pop	{r4, pc}
 8008772:	bf00      	nop
 8008774:	080099d2 	.word	0x080099d2
 8008778:	080099e3 	.word	0x080099e3

0800877c <__multiply>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	4614      	mov	r4, r2
 8008782:	690a      	ldr	r2, [r1, #16]
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	460f      	mov	r7, r1
 8008788:	429a      	cmp	r2, r3
 800878a:	bfa2      	ittt	ge
 800878c:	4623      	movge	r3, r4
 800878e:	460c      	movge	r4, r1
 8008790:	461f      	movge	r7, r3
 8008792:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008796:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800879a:	68a3      	ldr	r3, [r4, #8]
 800879c:	6861      	ldr	r1, [r4, #4]
 800879e:	eb0a 0609 	add.w	r6, sl, r9
 80087a2:	42b3      	cmp	r3, r6
 80087a4:	b085      	sub	sp, #20
 80087a6:	bfb8      	it	lt
 80087a8:	3101      	addlt	r1, #1
 80087aa:	f7ff fedd 	bl	8008568 <_Balloc>
 80087ae:	b930      	cbnz	r0, 80087be <__multiply+0x42>
 80087b0:	4602      	mov	r2, r0
 80087b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087b6:	4b43      	ldr	r3, [pc, #268]	@ (80088c4 <__multiply+0x148>)
 80087b8:	4843      	ldr	r0, [pc, #268]	@ (80088c8 <__multiply+0x14c>)
 80087ba:	f7ff f81d 	bl	80077f8 <__assert_func>
 80087be:	f100 0514 	add.w	r5, r0, #20
 80087c2:	462b      	mov	r3, r5
 80087c4:	2200      	movs	r2, #0
 80087c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087ca:	4543      	cmp	r3, r8
 80087cc:	d321      	bcc.n	8008812 <__multiply+0x96>
 80087ce:	f107 0114 	add.w	r1, r7, #20
 80087d2:	f104 0214 	add.w	r2, r4, #20
 80087d6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087da:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	1b13      	subs	r3, r2, r4
 80087e2:	3b15      	subs	r3, #21
 80087e4:	f023 0303 	bic.w	r3, r3, #3
 80087e8:	3304      	adds	r3, #4
 80087ea:	f104 0715 	add.w	r7, r4, #21
 80087ee:	42ba      	cmp	r2, r7
 80087f0:	bf38      	it	cc
 80087f2:	2304      	movcc	r3, #4
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	9b02      	ldr	r3, [sp, #8]
 80087f8:	9103      	str	r1, [sp, #12]
 80087fa:	428b      	cmp	r3, r1
 80087fc:	d80c      	bhi.n	8008818 <__multiply+0x9c>
 80087fe:	2e00      	cmp	r6, #0
 8008800:	dd03      	ble.n	800880a <__multiply+0x8e>
 8008802:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008806:	2b00      	cmp	r3, #0
 8008808:	d05a      	beq.n	80088c0 <__multiply+0x144>
 800880a:	6106      	str	r6, [r0, #16]
 800880c:	b005      	add	sp, #20
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	f843 2b04 	str.w	r2, [r3], #4
 8008816:	e7d8      	b.n	80087ca <__multiply+0x4e>
 8008818:	f8b1 a000 	ldrh.w	sl, [r1]
 800881c:	f1ba 0f00 	cmp.w	sl, #0
 8008820:	d023      	beq.n	800886a <__multiply+0xee>
 8008822:	46a9      	mov	r9, r5
 8008824:	f04f 0c00 	mov.w	ip, #0
 8008828:	f104 0e14 	add.w	lr, r4, #20
 800882c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008830:	f8d9 3000 	ldr.w	r3, [r9]
 8008834:	fa1f fb87 	uxth.w	fp, r7
 8008838:	b29b      	uxth	r3, r3
 800883a:	fb0a 330b 	mla	r3, sl, fp, r3
 800883e:	4463      	add	r3, ip
 8008840:	f8d9 c000 	ldr.w	ip, [r9]
 8008844:	0c3f      	lsrs	r7, r7, #16
 8008846:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800884a:	fb0a c707 	mla	r7, sl, r7, ip
 800884e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008858:	4572      	cmp	r2, lr
 800885a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800885e:	f849 3b04 	str.w	r3, [r9], #4
 8008862:	d8e3      	bhi.n	800882c <__multiply+0xb0>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	f845 c003 	str.w	ip, [r5, r3]
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	3104      	adds	r1, #4
 800886e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	d021      	beq.n	80088bc <__multiply+0x140>
 8008878:	46ae      	mov	lr, r5
 800887a:	f04f 0a00 	mov.w	sl, #0
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	f104 0c14 	add.w	ip, r4, #20
 8008884:	f8bc b000 	ldrh.w	fp, [ip]
 8008888:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800888c:	b29b      	uxth	r3, r3
 800888e:	fb09 770b 	mla	r7, r9, fp, r7
 8008892:	4457      	add	r7, sl
 8008894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008898:	f84e 3b04 	str.w	r3, [lr], #4
 800889c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088a4:	f8be 3000 	ldrh.w	r3, [lr]
 80088a8:	4562      	cmp	r2, ip
 80088aa:	fb09 330a 	mla	r3, r9, sl, r3
 80088ae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b6:	d8e5      	bhi.n	8008884 <__multiply+0x108>
 80088b8:	9f01      	ldr	r7, [sp, #4]
 80088ba:	51eb      	str	r3, [r5, r7]
 80088bc:	3504      	adds	r5, #4
 80088be:	e79a      	b.n	80087f6 <__multiply+0x7a>
 80088c0:	3e01      	subs	r6, #1
 80088c2:	e79c      	b.n	80087fe <__multiply+0x82>
 80088c4:	080099d2 	.word	0x080099d2
 80088c8:	080099e3 	.word	0x080099e3

080088cc <__pow5mult>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4615      	mov	r5, r2
 80088d2:	f012 0203 	ands.w	r2, r2, #3
 80088d6:	4607      	mov	r7, r0
 80088d8:	460e      	mov	r6, r1
 80088da:	d007      	beq.n	80088ec <__pow5mult+0x20>
 80088dc:	4c25      	ldr	r4, [pc, #148]	@ (8008974 <__pow5mult+0xa8>)
 80088de:	3a01      	subs	r2, #1
 80088e0:	2300      	movs	r3, #0
 80088e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e6:	f7ff fea1 	bl	800862c <__multadd>
 80088ea:	4606      	mov	r6, r0
 80088ec:	10ad      	asrs	r5, r5, #2
 80088ee:	d03d      	beq.n	800896c <__pow5mult+0xa0>
 80088f0:	69fc      	ldr	r4, [r7, #28]
 80088f2:	b97c      	cbnz	r4, 8008914 <__pow5mult+0x48>
 80088f4:	2010      	movs	r0, #16
 80088f6:	f7fd ffb7 	bl	8006868 <malloc>
 80088fa:	4602      	mov	r2, r0
 80088fc:	61f8      	str	r0, [r7, #28]
 80088fe:	b928      	cbnz	r0, 800890c <__pow5mult+0x40>
 8008900:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008904:	4b1c      	ldr	r3, [pc, #112]	@ (8008978 <__pow5mult+0xac>)
 8008906:	481d      	ldr	r0, [pc, #116]	@ (800897c <__pow5mult+0xb0>)
 8008908:	f7fe ff76 	bl	80077f8 <__assert_func>
 800890c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008910:	6004      	str	r4, [r0, #0]
 8008912:	60c4      	str	r4, [r0, #12]
 8008914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800891c:	b94c      	cbnz	r4, 8008932 <__pow5mult+0x66>
 800891e:	f240 2171 	movw	r1, #625	@ 0x271
 8008922:	4638      	mov	r0, r7
 8008924:	f7ff ff14 	bl	8008750 <__i2b>
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008930:	6003      	str	r3, [r0, #0]
 8008932:	f04f 0900 	mov.w	r9, #0
 8008936:	07eb      	lsls	r3, r5, #31
 8008938:	d50a      	bpl.n	8008950 <__pow5mult+0x84>
 800893a:	4631      	mov	r1, r6
 800893c:	4622      	mov	r2, r4
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff ff1c 	bl	800877c <__multiply>
 8008944:	4680      	mov	r8, r0
 8008946:	4631      	mov	r1, r6
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff fe4d 	bl	80085e8 <_Bfree>
 800894e:	4646      	mov	r6, r8
 8008950:	106d      	asrs	r5, r5, #1
 8008952:	d00b      	beq.n	800896c <__pow5mult+0xa0>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	b938      	cbnz	r0, 8008968 <__pow5mult+0x9c>
 8008958:	4622      	mov	r2, r4
 800895a:	4621      	mov	r1, r4
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff ff0d 	bl	800877c <__multiply>
 8008962:	6020      	str	r0, [r4, #0]
 8008964:	f8c0 9000 	str.w	r9, [r0]
 8008968:	4604      	mov	r4, r0
 800896a:	e7e4      	b.n	8008936 <__pow5mult+0x6a>
 800896c:	4630      	mov	r0, r6
 800896e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008972:	bf00      	nop
 8008974:	08009a3c 	.word	0x08009a3c
 8008978:	08009963 	.word	0x08009963
 800897c:	080099e3 	.word	0x080099e3

08008980 <__lshift>:
 8008980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	4607      	mov	r7, r0
 8008988:	4691      	mov	r9, r2
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6849      	ldr	r1, [r1, #4]
 800898e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008998:	f108 0601 	add.w	r6, r8, #1
 800899c:	42b3      	cmp	r3, r6
 800899e:	db0b      	blt.n	80089b8 <__lshift+0x38>
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff fde1 	bl	8008568 <_Balloc>
 80089a6:	4605      	mov	r5, r0
 80089a8:	b948      	cbnz	r0, 80089be <__lshift+0x3e>
 80089aa:	4602      	mov	r2, r0
 80089ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089b0:	4b27      	ldr	r3, [pc, #156]	@ (8008a50 <__lshift+0xd0>)
 80089b2:	4828      	ldr	r0, [pc, #160]	@ (8008a54 <__lshift+0xd4>)
 80089b4:	f7fe ff20 	bl	80077f8 <__assert_func>
 80089b8:	3101      	adds	r1, #1
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	e7ee      	b.n	800899c <__lshift+0x1c>
 80089be:	2300      	movs	r3, #0
 80089c0:	f100 0114 	add.w	r1, r0, #20
 80089c4:	f100 0210 	add.w	r2, r0, #16
 80089c8:	4618      	mov	r0, r3
 80089ca:	4553      	cmp	r3, sl
 80089cc:	db33      	blt.n	8008a36 <__lshift+0xb6>
 80089ce:	6920      	ldr	r0, [r4, #16]
 80089d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d4:	f104 0314 	add.w	r3, r4, #20
 80089d8:	f019 091f 	ands.w	r9, r9, #31
 80089dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089e4:	d02b      	beq.n	8008a3e <__lshift+0xbe>
 80089e6:	468a      	mov	sl, r1
 80089e8:	2200      	movs	r2, #0
 80089ea:	f1c9 0e20 	rsb	lr, r9, #32
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	fa00 f009 	lsl.w	r0, r0, r9
 80089f4:	4310      	orrs	r0, r2
 80089f6:	f84a 0b04 	str.w	r0, [sl], #4
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	459c      	cmp	ip, r3
 8008a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a04:	d8f3      	bhi.n	80089ee <__lshift+0x6e>
 8008a06:	ebac 0304 	sub.w	r3, ip, r4
 8008a0a:	3b15      	subs	r3, #21
 8008a0c:	f023 0303 	bic.w	r3, r3, #3
 8008a10:	3304      	adds	r3, #4
 8008a12:	f104 0015 	add.w	r0, r4, #21
 8008a16:	4584      	cmp	ip, r0
 8008a18:	bf38      	it	cc
 8008a1a:	2304      	movcc	r3, #4
 8008a1c:	50ca      	str	r2, [r1, r3]
 8008a1e:	b10a      	cbz	r2, 8008a24 <__lshift+0xa4>
 8008a20:	f108 0602 	add.w	r6, r8, #2
 8008a24:	3e01      	subs	r6, #1
 8008a26:	4638      	mov	r0, r7
 8008a28:	4621      	mov	r1, r4
 8008a2a:	612e      	str	r6, [r5, #16]
 8008a2c:	f7ff fddc 	bl	80085e8 <_Bfree>
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	e7c5      	b.n	80089ca <__lshift+0x4a>
 8008a3e:	3904      	subs	r1, #4
 8008a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a44:	459c      	cmp	ip, r3
 8008a46:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a4a:	d8f9      	bhi.n	8008a40 <__lshift+0xc0>
 8008a4c:	e7ea      	b.n	8008a24 <__lshift+0xa4>
 8008a4e:	bf00      	nop
 8008a50:	080099d2 	.word	0x080099d2
 8008a54:	080099e3 	.word	0x080099e3

08008a58 <__mcmp>:
 8008a58:	4603      	mov	r3, r0
 8008a5a:	690a      	ldr	r2, [r1, #16]
 8008a5c:	6900      	ldr	r0, [r0, #16]
 8008a5e:	b530      	push	{r4, r5, lr}
 8008a60:	1a80      	subs	r0, r0, r2
 8008a62:	d10e      	bne.n	8008a82 <__mcmp+0x2a>
 8008a64:	3314      	adds	r3, #20
 8008a66:	3114      	adds	r1, #20
 8008a68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a78:	4295      	cmp	r5, r2
 8008a7a:	d003      	beq.n	8008a84 <__mcmp+0x2c>
 8008a7c:	d205      	bcs.n	8008a8a <__mcmp+0x32>
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	bd30      	pop	{r4, r5, pc}
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	d3f3      	bcc.n	8008a70 <__mcmp+0x18>
 8008a88:	e7fb      	b.n	8008a82 <__mcmp+0x2a>
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e7f9      	b.n	8008a82 <__mcmp+0x2a>
	...

08008a90 <__mdiff>:
 8008a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4689      	mov	r9, r1
 8008a96:	4606      	mov	r6, r0
 8008a98:	4611      	mov	r1, r2
 8008a9a:	4648      	mov	r0, r9
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	f7ff ffdb 	bl	8008a58 <__mcmp>
 8008aa2:	1e05      	subs	r5, r0, #0
 8008aa4:	d112      	bne.n	8008acc <__mdiff+0x3c>
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff fd5d 	bl	8008568 <_Balloc>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	b928      	cbnz	r0, 8008abe <__mdiff+0x2e>
 8008ab2:	f240 2137 	movw	r1, #567	@ 0x237
 8008ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8008bb0 <__mdiff+0x120>)
 8008ab8:	483e      	ldr	r0, [pc, #248]	@ (8008bb4 <__mdiff+0x124>)
 8008aba:	f7fe fe9d 	bl	80077f8 <__assert_func>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	b003      	add	sp, #12
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	bfbc      	itt	lt
 8008ace:	464b      	movlt	r3, r9
 8008ad0:	46a1      	movlt	r9, r4
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ad8:	bfba      	itte	lt
 8008ada:	461c      	movlt	r4, r3
 8008adc:	2501      	movlt	r5, #1
 8008ade:	2500      	movge	r5, #0
 8008ae0:	f7ff fd42 	bl	8008568 <_Balloc>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	b918      	cbnz	r0, 8008af0 <__mdiff+0x60>
 8008ae8:	f240 2145 	movw	r1, #581	@ 0x245
 8008aec:	4b30      	ldr	r3, [pc, #192]	@ (8008bb0 <__mdiff+0x120>)
 8008aee:	e7e3      	b.n	8008ab8 <__mdiff+0x28>
 8008af0:	f100 0b14 	add.w	fp, r0, #20
 8008af4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008af8:	f109 0310 	add.w	r3, r9, #16
 8008afc:	60c5      	str	r5, [r0, #12]
 8008afe:	f04f 0c00 	mov.w	ip, #0
 8008b02:	f109 0514 	add.w	r5, r9, #20
 8008b06:	46d9      	mov	r9, fp
 8008b08:	6926      	ldr	r6, [r4, #16]
 8008b0a:	f104 0e14 	add.w	lr, r4, #20
 8008b0e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b22:	b281      	uxth	r1, r0
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	fa1f f38a 	uxth.w	r3, sl
 8008b2a:	1a5b      	subs	r3, r3, r1
 8008b2c:	0c00      	lsrs	r0, r0, #16
 8008b2e:	4463      	add	r3, ip
 8008b30:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b34:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b3e:	4576      	cmp	r6, lr
 8008b40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b44:	f849 3b04 	str.w	r3, [r9], #4
 8008b48:	d8e6      	bhi.n	8008b18 <__mdiff+0x88>
 8008b4a:	1b33      	subs	r3, r6, r4
 8008b4c:	3b15      	subs	r3, #21
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	3415      	adds	r4, #21
 8008b54:	3304      	adds	r3, #4
 8008b56:	42a6      	cmp	r6, r4
 8008b58:	bf38      	it	cc
 8008b5a:	2304      	movcc	r3, #4
 8008b5c:	441d      	add	r5, r3
 8008b5e:	445b      	add	r3, fp
 8008b60:	461e      	mov	r6, r3
 8008b62:	462c      	mov	r4, r5
 8008b64:	4544      	cmp	r4, r8
 8008b66:	d30e      	bcc.n	8008b86 <__mdiff+0xf6>
 8008b68:	f108 0103 	add.w	r1, r8, #3
 8008b6c:	1b49      	subs	r1, r1, r5
 8008b6e:	f021 0103 	bic.w	r1, r1, #3
 8008b72:	3d03      	subs	r5, #3
 8008b74:	45a8      	cmp	r8, r5
 8008b76:	bf38      	it	cc
 8008b78:	2100      	movcc	r1, #0
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b80:	b199      	cbz	r1, 8008baa <__mdiff+0x11a>
 8008b82:	6117      	str	r7, [r2, #16]
 8008b84:	e79e      	b.n	8008ac4 <__mdiff+0x34>
 8008b86:	46e6      	mov	lr, ip
 8008b88:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b8c:	fa1f fc81 	uxth.w	ip, r1
 8008b90:	44f4      	add	ip, lr
 8008b92:	0c08      	lsrs	r0, r1, #16
 8008b94:	4471      	add	r1, lr
 8008b96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b9a:	b289      	uxth	r1, r1
 8008b9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ba0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ba4:	f846 1b04 	str.w	r1, [r6], #4
 8008ba8:	e7dc      	b.n	8008b64 <__mdiff+0xd4>
 8008baa:	3f01      	subs	r7, #1
 8008bac:	e7e6      	b.n	8008b7c <__mdiff+0xec>
 8008bae:	bf00      	nop
 8008bb0:	080099d2 	.word	0x080099d2
 8008bb4:	080099e3 	.word	0x080099e3

08008bb8 <__d2b>:
 8008bb8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	4690      	mov	r8, r2
 8008bc0:	4699      	mov	r9, r3
 8008bc2:	9e08      	ldr	r6, [sp, #32]
 8008bc4:	f7ff fcd0 	bl	8008568 <_Balloc>
 8008bc8:	4604      	mov	r4, r0
 8008bca:	b930      	cbnz	r0, 8008bda <__d2b+0x22>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bd2:	4b23      	ldr	r3, [pc, #140]	@ (8008c60 <__d2b+0xa8>)
 8008bd4:	4823      	ldr	r0, [pc, #140]	@ (8008c64 <__d2b+0xac>)
 8008bd6:	f7fe fe0f 	bl	80077f8 <__assert_func>
 8008bda:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008be2:	b10d      	cbz	r5, 8008be8 <__d2b+0x30>
 8008be4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f1b8 0300 	subs.w	r3, r8, #0
 8008bee:	d024      	beq.n	8008c3a <__d2b+0x82>
 8008bf0:	4668      	mov	r0, sp
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	f7ff fd7f 	bl	80086f6 <__lo0bits>
 8008bf8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bfc:	b1d8      	cbz	r0, 8008c36 <__d2b+0x7e>
 8008bfe:	f1c0 0320 	rsb	r3, r0, #32
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	430b      	orrs	r3, r1
 8008c08:	40c2      	lsrs	r2, r0
 8008c0a:	6163      	str	r3, [r4, #20]
 8008c0c:	9201      	str	r2, [sp, #4]
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	bf0c      	ite	eq
 8008c14:	2201      	moveq	r2, #1
 8008c16:	2202      	movne	r2, #2
 8008c18:	61a3      	str	r3, [r4, #24]
 8008c1a:	6122      	str	r2, [r4, #16]
 8008c1c:	b1ad      	cbz	r5, 8008c4a <__d2b+0x92>
 8008c1e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c22:	4405      	add	r5, r0
 8008c24:	6035      	str	r5, [r6, #0]
 8008c26:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c2c:	6018      	str	r0, [r3, #0]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	b002      	add	sp, #8
 8008c32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008c36:	6161      	str	r1, [r4, #20]
 8008c38:	e7e9      	b.n	8008c0e <__d2b+0x56>
 8008c3a:	a801      	add	r0, sp, #4
 8008c3c:	f7ff fd5b 	bl	80086f6 <__lo0bits>
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	6163      	str	r3, [r4, #20]
 8008c46:	3020      	adds	r0, #32
 8008c48:	e7e7      	b.n	8008c1a <__d2b+0x62>
 8008c4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c52:	6030      	str	r0, [r6, #0]
 8008c54:	6918      	ldr	r0, [r3, #16]
 8008c56:	f7ff fd2f 	bl	80086b8 <__hi0bits>
 8008c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c5e:	e7e4      	b.n	8008c2a <__d2b+0x72>
 8008c60:	080099d2 	.word	0x080099d2
 8008c64:	080099e3 	.word	0x080099e3

08008c68 <__sfputc_r>:
 8008c68:	6893      	ldr	r3, [r2, #8]
 8008c6a:	b410      	push	{r4}
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	6093      	str	r3, [r2, #8]
 8008c72:	da07      	bge.n	8008c84 <__sfputc_r+0x1c>
 8008c74:	6994      	ldr	r4, [r2, #24]
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	db01      	blt.n	8008c7e <__sfputc_r+0x16>
 8008c7a:	290a      	cmp	r1, #10
 8008c7c:	d102      	bne.n	8008c84 <__sfputc_r+0x1c>
 8008c7e:	bc10      	pop	{r4}
 8008c80:	f7fe bc79 	b.w	8007576 <__swbuf_r>
 8008c84:	6813      	ldr	r3, [r2, #0]
 8008c86:	1c58      	adds	r0, r3, #1
 8008c88:	6010      	str	r0, [r2, #0]
 8008c8a:	7019      	strb	r1, [r3, #0]
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	bc10      	pop	{r4}
 8008c90:	4770      	bx	lr

08008c92 <__sfputs_r>:
 8008c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c94:	4606      	mov	r6, r0
 8008c96:	460f      	mov	r7, r1
 8008c98:	4614      	mov	r4, r2
 8008c9a:	18d5      	adds	r5, r2, r3
 8008c9c:	42ac      	cmp	r4, r5
 8008c9e:	d101      	bne.n	8008ca4 <__sfputs_r+0x12>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e007      	b.n	8008cb4 <__sfputs_r+0x22>
 8008ca4:	463a      	mov	r2, r7
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cac:	f7ff ffdc 	bl	8008c68 <__sfputc_r>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d1f3      	bne.n	8008c9c <__sfputs_r+0xa>
 8008cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cb8 <_vfiprintf_r>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	b09d      	sub	sp, #116	@ 0x74
 8008cc6:	b118      	cbz	r0, 8008cd0 <_vfiprintf_r+0x18>
 8008cc8:	6a03      	ldr	r3, [r0, #32]
 8008cca:	b90b      	cbnz	r3, 8008cd0 <_vfiprintf_r+0x18>
 8008ccc:	f7fe fb6a 	bl	80073a4 <__sinit>
 8008cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cd2:	07d9      	lsls	r1, r3, #31
 8008cd4:	d405      	bmi.n	8008ce2 <_vfiprintf_r+0x2a>
 8008cd6:	89ab      	ldrh	r3, [r5, #12]
 8008cd8:	059a      	lsls	r2, r3, #22
 8008cda:	d402      	bmi.n	8008ce2 <_vfiprintf_r+0x2a>
 8008cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cde:	f7fe fd6c 	bl	80077ba <__retarget_lock_acquire_recursive>
 8008ce2:	89ab      	ldrh	r3, [r5, #12]
 8008ce4:	071b      	lsls	r3, r3, #28
 8008ce6:	d501      	bpl.n	8008cec <_vfiprintf_r+0x34>
 8008ce8:	692b      	ldr	r3, [r5, #16]
 8008cea:	b99b      	cbnz	r3, 8008d14 <_vfiprintf_r+0x5c>
 8008cec:	4629      	mov	r1, r5
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7fe fc80 	bl	80075f4 <__swsetup_r>
 8008cf4:	b170      	cbz	r0, 8008d14 <_vfiprintf_r+0x5c>
 8008cf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cf8:	07dc      	lsls	r4, r3, #31
 8008cfa:	d504      	bpl.n	8008d06 <_vfiprintf_r+0x4e>
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008d00:	b01d      	add	sp, #116	@ 0x74
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	89ab      	ldrh	r3, [r5, #12]
 8008d08:	0598      	lsls	r0, r3, #22
 8008d0a:	d4f7      	bmi.n	8008cfc <_vfiprintf_r+0x44>
 8008d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d0e:	f7fe fd55 	bl	80077bc <__retarget_lock_release_recursive>
 8008d12:	e7f3      	b.n	8008cfc <_vfiprintf_r+0x44>
 8008d14:	2300      	movs	r3, #0
 8008d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d18:	2320      	movs	r3, #32
 8008d1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d1e:	2330      	movs	r3, #48	@ 0x30
 8008d20:	f04f 0901 	mov.w	r9, #1
 8008d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d28:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008ed4 <_vfiprintf_r+0x21c>
 8008d2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d30:	4623      	mov	r3, r4
 8008d32:	469a      	mov	sl, r3
 8008d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d38:	b10a      	cbz	r2, 8008d3e <_vfiprintf_r+0x86>
 8008d3a:	2a25      	cmp	r2, #37	@ 0x25
 8008d3c:	d1f9      	bne.n	8008d32 <_vfiprintf_r+0x7a>
 8008d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d42:	d00b      	beq.n	8008d5c <_vfiprintf_r+0xa4>
 8008d44:	465b      	mov	r3, fp
 8008d46:	4622      	mov	r2, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff ffa1 	bl	8008c92 <__sfputs_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	f000 80a7 	beq.w	8008ea4 <_vfiprintf_r+0x1ec>
 8008d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d58:	445a      	add	r2, fp
 8008d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 809f 	beq.w	8008ea4 <_vfiprintf_r+0x1ec>
 8008d66:	2300      	movs	r3, #0
 8008d68:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d70:	f10a 0a01 	add.w	sl, sl, #1
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d7e:	4654      	mov	r4, sl
 8008d80:	2205      	movs	r2, #5
 8008d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d86:	4853      	ldr	r0, [pc, #332]	@ (8008ed4 <_vfiprintf_r+0x21c>)
 8008d88:	f7fe fd19 	bl	80077be <memchr>
 8008d8c:	9a04      	ldr	r2, [sp, #16]
 8008d8e:	b9d8      	cbnz	r0, 8008dc8 <_vfiprintf_r+0x110>
 8008d90:	06d1      	lsls	r1, r2, #27
 8008d92:	bf44      	itt	mi
 8008d94:	2320      	movmi	r3, #32
 8008d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d9a:	0713      	lsls	r3, r2, #28
 8008d9c:	bf44      	itt	mi
 8008d9e:	232b      	movmi	r3, #43	@ 0x2b
 8008da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da4:	f89a 3000 	ldrb.w	r3, [sl]
 8008da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008daa:	d015      	beq.n	8008dd8 <_vfiprintf_r+0x120>
 8008dac:	4654      	mov	r4, sl
 8008dae:	2000      	movs	r0, #0
 8008db0:	f04f 0c0a 	mov.w	ip, #10
 8008db4:	9a07      	ldr	r2, [sp, #28]
 8008db6:	4621      	mov	r1, r4
 8008db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dbc:	3b30      	subs	r3, #48	@ 0x30
 8008dbe:	2b09      	cmp	r3, #9
 8008dc0:	d94b      	bls.n	8008e5a <_vfiprintf_r+0x1a2>
 8008dc2:	b1b0      	cbz	r0, 8008df2 <_vfiprintf_r+0x13a>
 8008dc4:	9207      	str	r2, [sp, #28]
 8008dc6:	e014      	b.n	8008df2 <_vfiprintf_r+0x13a>
 8008dc8:	eba0 0308 	sub.w	r3, r0, r8
 8008dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	46a2      	mov	sl, r4
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	e7d2      	b.n	8008d7e <_vfiprintf_r+0xc6>
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	1d19      	adds	r1, r3, #4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	9103      	str	r1, [sp, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bfbb      	ittet	lt
 8008de4:	425b      	neglt	r3, r3
 8008de6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dea:	9307      	strge	r3, [sp, #28]
 8008dec:	9307      	strlt	r3, [sp, #28]
 8008dee:	bfb8      	it	lt
 8008df0:	9204      	strlt	r2, [sp, #16]
 8008df2:	7823      	ldrb	r3, [r4, #0]
 8008df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008df6:	d10a      	bne.n	8008e0e <_vfiprintf_r+0x156>
 8008df8:	7863      	ldrb	r3, [r4, #1]
 8008dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dfc:	d132      	bne.n	8008e64 <_vfiprintf_r+0x1ac>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	3402      	adds	r4, #2
 8008e02:	1d1a      	adds	r2, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9203      	str	r2, [sp, #12]
 8008e08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008ed8 <_vfiprintf_r+0x220>
 8008e12:	2203      	movs	r2, #3
 8008e14:	4650      	mov	r0, sl
 8008e16:	7821      	ldrb	r1, [r4, #0]
 8008e18:	f7fe fcd1 	bl	80077be <memchr>
 8008e1c:	b138      	cbz	r0, 8008e2e <_vfiprintf_r+0x176>
 8008e1e:	2240      	movs	r2, #64	@ 0x40
 8008e20:	9b04      	ldr	r3, [sp, #16]
 8008e22:	eba0 000a 	sub.w	r0, r0, sl
 8008e26:	4082      	lsls	r2, r0
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	3401      	adds	r4, #1
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e32:	2206      	movs	r2, #6
 8008e34:	4829      	ldr	r0, [pc, #164]	@ (8008edc <_vfiprintf_r+0x224>)
 8008e36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e3a:	f7fe fcc0 	bl	80077be <memchr>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d03f      	beq.n	8008ec2 <_vfiprintf_r+0x20a>
 8008e42:	4b27      	ldr	r3, [pc, #156]	@ (8008ee0 <_vfiprintf_r+0x228>)
 8008e44:	bb1b      	cbnz	r3, 8008e8e <_vfiprintf_r+0x1d6>
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	3307      	adds	r3, #7
 8008e4a:	f023 0307 	bic.w	r3, r3, #7
 8008e4e:	3308      	adds	r3, #8
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e54:	443b      	add	r3, r7
 8008e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e58:	e76a      	b.n	8008d30 <_vfiprintf_r+0x78>
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e62:	e7a8      	b.n	8008db6 <_vfiprintf_r+0xfe>
 8008e64:	2300      	movs	r3, #0
 8008e66:	f04f 0c0a 	mov.w	ip, #10
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	3401      	adds	r4, #1
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	4620      	mov	r0, r4
 8008e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e76:	3a30      	subs	r2, #48	@ 0x30
 8008e78:	2a09      	cmp	r2, #9
 8008e7a:	d903      	bls.n	8008e84 <_vfiprintf_r+0x1cc>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0c6      	beq.n	8008e0e <_vfiprintf_r+0x156>
 8008e80:	9105      	str	r1, [sp, #20]
 8008e82:	e7c4      	b.n	8008e0e <_vfiprintf_r+0x156>
 8008e84:	4604      	mov	r4, r0
 8008e86:	2301      	movs	r3, #1
 8008e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e8c:	e7f0      	b.n	8008e70 <_vfiprintf_r+0x1b8>
 8008e8e:	ab03      	add	r3, sp, #12
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	462a      	mov	r2, r5
 8008e94:	4630      	mov	r0, r6
 8008e96:	4b13      	ldr	r3, [pc, #76]	@ (8008ee4 <_vfiprintf_r+0x22c>)
 8008e98:	a904      	add	r1, sp, #16
 8008e9a:	f7fd fe39 	bl	8006b10 <_printf_float>
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	1c78      	adds	r0, r7, #1
 8008ea2:	d1d6      	bne.n	8008e52 <_vfiprintf_r+0x19a>
 8008ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ea6:	07d9      	lsls	r1, r3, #31
 8008ea8:	d405      	bmi.n	8008eb6 <_vfiprintf_r+0x1fe>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	059a      	lsls	r2, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <_vfiprintf_r+0x1fe>
 8008eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eb2:	f7fe fc83 	bl	80077bc <__retarget_lock_release_recursive>
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	065b      	lsls	r3, r3, #25
 8008eba:	f53f af1f 	bmi.w	8008cfc <_vfiprintf_r+0x44>
 8008ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ec0:	e71e      	b.n	8008d00 <_vfiprintf_r+0x48>
 8008ec2:	ab03      	add	r3, sp, #12
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	462a      	mov	r2, r5
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4b06      	ldr	r3, [pc, #24]	@ (8008ee4 <_vfiprintf_r+0x22c>)
 8008ecc:	a904      	add	r1, sp, #16
 8008ece:	f7fe f8bd 	bl	800704c <_printf_i>
 8008ed2:	e7e4      	b.n	8008e9e <_vfiprintf_r+0x1e6>
 8008ed4:	08009b38 	.word	0x08009b38
 8008ed8:	08009b3e 	.word	0x08009b3e
 8008edc:	08009b42 	.word	0x08009b42
 8008ee0:	08006b11 	.word	0x08006b11
 8008ee4:	08008c93 	.word	0x08008c93

08008ee8 <__sflush_r>:
 8008ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	0716      	lsls	r6, r2, #28
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	d454      	bmi.n	8008fa0 <__sflush_r+0xb8>
 8008ef6:	684b      	ldr	r3, [r1, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dc02      	bgt.n	8008f02 <__sflush_r+0x1a>
 8008efc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dd48      	ble.n	8008f94 <__sflush_r+0xac>
 8008f02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f04:	2e00      	cmp	r6, #0
 8008f06:	d045      	beq.n	8008f94 <__sflush_r+0xac>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f0e:	682f      	ldr	r7, [r5, #0]
 8008f10:	6a21      	ldr	r1, [r4, #32]
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	d030      	beq.n	8008f78 <__sflush_r+0x90>
 8008f16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	0759      	lsls	r1, r3, #29
 8008f1c:	d505      	bpl.n	8008f2a <__sflush_r+0x42>
 8008f1e:	6863      	ldr	r3, [r4, #4]
 8008f20:	1ad2      	subs	r2, r2, r3
 8008f22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f24:	b10b      	cbz	r3, 8008f2a <__sflush_r+0x42>
 8008f26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f28:	1ad2      	subs	r2, r2, r3
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f30:	6a21      	ldr	r1, [r4, #32]
 8008f32:	47b0      	blx	r6
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	d106      	bne.n	8008f48 <__sflush_r+0x60>
 8008f3a:	6829      	ldr	r1, [r5, #0]
 8008f3c:	291d      	cmp	r1, #29
 8008f3e:	d82b      	bhi.n	8008f98 <__sflush_r+0xb0>
 8008f40:	4a28      	ldr	r2, [pc, #160]	@ (8008fe4 <__sflush_r+0xfc>)
 8008f42:	410a      	asrs	r2, r1
 8008f44:	07d6      	lsls	r6, r2, #31
 8008f46:	d427      	bmi.n	8008f98 <__sflush_r+0xb0>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	6062      	str	r2, [r4, #4]
 8008f4c:	6922      	ldr	r2, [r4, #16]
 8008f4e:	04d9      	lsls	r1, r3, #19
 8008f50:	6022      	str	r2, [r4, #0]
 8008f52:	d504      	bpl.n	8008f5e <__sflush_r+0x76>
 8008f54:	1c42      	adds	r2, r0, #1
 8008f56:	d101      	bne.n	8008f5c <__sflush_r+0x74>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b903      	cbnz	r3, 8008f5e <__sflush_r+0x76>
 8008f5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f60:	602f      	str	r7, [r5, #0]
 8008f62:	b1b9      	cbz	r1, 8008f94 <__sflush_r+0xac>
 8008f64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f68:	4299      	cmp	r1, r3
 8008f6a:	d002      	beq.n	8008f72 <__sflush_r+0x8a>
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f7ff fab3 	bl	80084d8 <_free_r>
 8008f72:	2300      	movs	r3, #0
 8008f74:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f76:	e00d      	b.n	8008f94 <__sflush_r+0xac>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	47b0      	blx	r6
 8008f7e:	4602      	mov	r2, r0
 8008f80:	1c50      	adds	r0, r2, #1
 8008f82:	d1c9      	bne.n	8008f18 <__sflush_r+0x30>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0c6      	beq.n	8008f18 <__sflush_r+0x30>
 8008f8a:	2b1d      	cmp	r3, #29
 8008f8c:	d001      	beq.n	8008f92 <__sflush_r+0xaa>
 8008f8e:	2b16      	cmp	r3, #22
 8008f90:	d11d      	bne.n	8008fce <__sflush_r+0xe6>
 8008f92:	602f      	str	r7, [r5, #0]
 8008f94:	2000      	movs	r0, #0
 8008f96:	e021      	b.n	8008fdc <__sflush_r+0xf4>
 8008f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f9c:	b21b      	sxth	r3, r3
 8008f9e:	e01a      	b.n	8008fd6 <__sflush_r+0xee>
 8008fa0:	690f      	ldr	r7, [r1, #16]
 8008fa2:	2f00      	cmp	r7, #0
 8008fa4:	d0f6      	beq.n	8008f94 <__sflush_r+0xac>
 8008fa6:	0793      	lsls	r3, r2, #30
 8008fa8:	bf18      	it	ne
 8008faa:	2300      	movne	r3, #0
 8008fac:	680e      	ldr	r6, [r1, #0]
 8008fae:	bf08      	it	eq
 8008fb0:	694b      	ldreq	r3, [r1, #20]
 8008fb2:	1bf6      	subs	r6, r6, r7
 8008fb4:	600f      	str	r7, [r1, #0]
 8008fb6:	608b      	str	r3, [r1, #8]
 8008fb8:	2e00      	cmp	r6, #0
 8008fba:	ddeb      	ble.n	8008f94 <__sflush_r+0xac>
 8008fbc:	4633      	mov	r3, r6
 8008fbe:	463a      	mov	r2, r7
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	6a21      	ldr	r1, [r4, #32]
 8008fc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008fc8:	47e0      	blx	ip
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	dc07      	bgt.n	8008fde <__sflush_r+0xf6>
 8008fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fde:	4407      	add	r7, r0
 8008fe0:	1a36      	subs	r6, r6, r0
 8008fe2:	e7e9      	b.n	8008fb8 <__sflush_r+0xd0>
 8008fe4:	dfbffffe 	.word	0xdfbffffe

08008fe8 <_fflush_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	690b      	ldr	r3, [r1, #16]
 8008fec:	4605      	mov	r5, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	b913      	cbnz	r3, 8008ff8 <_fflush_r+0x10>
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	b118      	cbz	r0, 8009002 <_fflush_r+0x1a>
 8008ffa:	6a03      	ldr	r3, [r0, #32]
 8008ffc:	b90b      	cbnz	r3, 8009002 <_fflush_r+0x1a>
 8008ffe:	f7fe f9d1 	bl	80073a4 <__sinit>
 8009002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0f3      	beq.n	8008ff2 <_fflush_r+0xa>
 800900a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800900c:	07d0      	lsls	r0, r2, #31
 800900e:	d404      	bmi.n	800901a <_fflush_r+0x32>
 8009010:	0599      	lsls	r1, r3, #22
 8009012:	d402      	bmi.n	800901a <_fflush_r+0x32>
 8009014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009016:	f7fe fbd0 	bl	80077ba <__retarget_lock_acquire_recursive>
 800901a:	4628      	mov	r0, r5
 800901c:	4621      	mov	r1, r4
 800901e:	f7ff ff63 	bl	8008ee8 <__sflush_r>
 8009022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009024:	4605      	mov	r5, r0
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d4e4      	bmi.n	8008ff4 <_fflush_r+0xc>
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	059b      	lsls	r3, r3, #22
 800902e:	d4e1      	bmi.n	8008ff4 <_fflush_r+0xc>
 8009030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009032:	f7fe fbc3 	bl	80077bc <__retarget_lock_release_recursive>
 8009036:	e7dd      	b.n	8008ff4 <_fflush_r+0xc>

08009038 <fiprintf>:
 8009038:	b40e      	push	{r1, r2, r3}
 800903a:	b503      	push	{r0, r1, lr}
 800903c:	4601      	mov	r1, r0
 800903e:	ab03      	add	r3, sp, #12
 8009040:	4805      	ldr	r0, [pc, #20]	@ (8009058 <fiprintf+0x20>)
 8009042:	f853 2b04 	ldr.w	r2, [r3], #4
 8009046:	6800      	ldr	r0, [r0, #0]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	f7ff fe35 	bl	8008cb8 <_vfiprintf_r>
 800904e:	b002      	add	sp, #8
 8009050:	f85d eb04 	ldr.w	lr, [sp], #4
 8009054:	b003      	add	sp, #12
 8009056:	4770      	bx	lr
 8009058:	2000002c 	.word	0x2000002c

0800905c <__swhatbuf_r>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	4615      	mov	r5, r2
 8009066:	2900      	cmp	r1, #0
 8009068:	461e      	mov	r6, r3
 800906a:	b096      	sub	sp, #88	@ 0x58
 800906c:	da0c      	bge.n	8009088 <__swhatbuf_r+0x2c>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	2100      	movs	r1, #0
 8009072:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009076:	bf14      	ite	ne
 8009078:	2340      	movne	r3, #64	@ 0x40
 800907a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800907e:	2000      	movs	r0, #0
 8009080:	6031      	str	r1, [r6, #0]
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	b016      	add	sp, #88	@ 0x58
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	466a      	mov	r2, sp
 800908a:	f000 f849 	bl	8009120 <_fstat_r>
 800908e:	2800      	cmp	r0, #0
 8009090:	dbed      	blt.n	800906e <__swhatbuf_r+0x12>
 8009092:	9901      	ldr	r1, [sp, #4]
 8009094:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009098:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800909c:	4259      	negs	r1, r3
 800909e:	4159      	adcs	r1, r3
 80090a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090a4:	e7eb      	b.n	800907e <__swhatbuf_r+0x22>

080090a6 <__smakebuf_r>:
 80090a6:	898b      	ldrh	r3, [r1, #12]
 80090a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090aa:	079d      	lsls	r5, r3, #30
 80090ac:	4606      	mov	r6, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	d507      	bpl.n	80090c2 <__smakebuf_r+0x1c>
 80090b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	2301      	movs	r3, #1
 80090bc:	6163      	str	r3, [r4, #20]
 80090be:	b003      	add	sp, #12
 80090c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c2:	466a      	mov	r2, sp
 80090c4:	ab01      	add	r3, sp, #4
 80090c6:	f7ff ffc9 	bl	800905c <__swhatbuf_r>
 80090ca:	9f00      	ldr	r7, [sp, #0]
 80090cc:	4605      	mov	r5, r0
 80090ce:	4639      	mov	r1, r7
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7fd fbf3 	bl	80068bc <_malloc_r>
 80090d6:	b948      	cbnz	r0, 80090ec <__smakebuf_r+0x46>
 80090d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090dc:	059a      	lsls	r2, r3, #22
 80090de:	d4ee      	bmi.n	80090be <__smakebuf_r+0x18>
 80090e0:	f023 0303 	bic.w	r3, r3, #3
 80090e4:	f043 0302 	orr.w	r3, r3, #2
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	e7e2      	b.n	80090b2 <__smakebuf_r+0xc>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	9b01      	ldr	r3, [sp, #4]
 80090fa:	6020      	str	r0, [r4, #0]
 80090fc:	b15b      	cbz	r3, 8009116 <__smakebuf_r+0x70>
 80090fe:	4630      	mov	r0, r6
 8009100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009104:	f000 f81e 	bl	8009144 <_isatty_r>
 8009108:	b128      	cbz	r0, 8009116 <__smakebuf_r+0x70>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	431d      	orrs	r5, r3
 800911a:	81a5      	strh	r5, [r4, #12]
 800911c:	e7cf      	b.n	80090be <__smakebuf_r+0x18>
	...

08009120 <_fstat_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	2300      	movs	r3, #0
 8009124:	4d06      	ldr	r5, [pc, #24]	@ (8009140 <_fstat_r+0x20>)
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	f7f9 fc64 	bl	80029fa <_fstat>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	d102      	bne.n	800913c <_fstat_r+0x1c>
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	b103      	cbz	r3, 800913c <_fstat_r+0x1c>
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	20001610 	.word	0x20001610

08009144 <_isatty_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	2300      	movs	r3, #0
 8009148:	4d05      	ldr	r5, [pc, #20]	@ (8009160 <_isatty_r+0x1c>)
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	f7f9 fc58 	bl	8002a04 <_isatty>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_isatty_r+0x1a>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_isatty_r+0x1a>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20001610 	.word	0x20001610

08009164 <abort>:
 8009164:	2006      	movs	r0, #6
 8009166:	b508      	push	{r3, lr}
 8009168:	f000 f85e 	bl	8009228 <raise>
 800916c:	2001      	movs	r0, #1
 800916e:	f7f9 fc2b 	bl	80029c8 <_exit>

08009172 <_calloc_r>:
 8009172:	b570      	push	{r4, r5, r6, lr}
 8009174:	fba1 5402 	umull	r5, r4, r1, r2
 8009178:	b93c      	cbnz	r4, 800918a <_calloc_r+0x18>
 800917a:	4629      	mov	r1, r5
 800917c:	f7fd fb9e 	bl	80068bc <_malloc_r>
 8009180:	4606      	mov	r6, r0
 8009182:	b928      	cbnz	r0, 8009190 <_calloc_r+0x1e>
 8009184:	2600      	movs	r6, #0
 8009186:	4630      	mov	r0, r6
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	220c      	movs	r2, #12
 800918c:	6002      	str	r2, [r0, #0]
 800918e:	e7f9      	b.n	8009184 <_calloc_r+0x12>
 8009190:	462a      	mov	r2, r5
 8009192:	4621      	mov	r1, r4
 8009194:	f7fe fa84 	bl	80076a0 <memset>
 8009198:	e7f5      	b.n	8009186 <_calloc_r+0x14>

0800919a <__ascii_mbtowc>:
 800919a:	b082      	sub	sp, #8
 800919c:	b901      	cbnz	r1, 80091a0 <__ascii_mbtowc+0x6>
 800919e:	a901      	add	r1, sp, #4
 80091a0:	b142      	cbz	r2, 80091b4 <__ascii_mbtowc+0x1a>
 80091a2:	b14b      	cbz	r3, 80091b8 <__ascii_mbtowc+0x1e>
 80091a4:	7813      	ldrb	r3, [r2, #0]
 80091a6:	600b      	str	r3, [r1, #0]
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	1e10      	subs	r0, r2, #0
 80091ac:	bf18      	it	ne
 80091ae:	2001      	movne	r0, #1
 80091b0:	b002      	add	sp, #8
 80091b2:	4770      	bx	lr
 80091b4:	4610      	mov	r0, r2
 80091b6:	e7fb      	b.n	80091b0 <__ascii_mbtowc+0x16>
 80091b8:	f06f 0001 	mvn.w	r0, #1
 80091bc:	e7f8      	b.n	80091b0 <__ascii_mbtowc+0x16>

080091be <__ascii_wctomb>:
 80091be:	4603      	mov	r3, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	b141      	cbz	r1, 80091d6 <__ascii_wctomb+0x18>
 80091c4:	2aff      	cmp	r2, #255	@ 0xff
 80091c6:	d904      	bls.n	80091d2 <__ascii_wctomb+0x14>
 80091c8:	228a      	movs	r2, #138	@ 0x8a
 80091ca:	f04f 30ff 	mov.w	r0, #4294967295
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	4770      	bx	lr
 80091d2:	2001      	movs	r0, #1
 80091d4:	700a      	strb	r2, [r1, #0]
 80091d6:	4770      	bx	lr

080091d8 <_raise_r>:
 80091d8:	291f      	cmp	r1, #31
 80091da:	b538      	push	{r3, r4, r5, lr}
 80091dc:	4605      	mov	r5, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	d904      	bls.n	80091ec <_raise_r+0x14>
 80091e2:	2316      	movs	r3, #22
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091ee:	b112      	cbz	r2, 80091f6 <_raise_r+0x1e>
 80091f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091f4:	b94b      	cbnz	r3, 800920a <_raise_r+0x32>
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f830 	bl	800925c <_getpid_r>
 80091fc:	4622      	mov	r2, r4
 80091fe:	4601      	mov	r1, r0
 8009200:	4628      	mov	r0, r5
 8009202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009206:	f000 b817 	b.w	8009238 <_kill_r>
 800920a:	2b01      	cmp	r3, #1
 800920c:	d00a      	beq.n	8009224 <_raise_r+0x4c>
 800920e:	1c59      	adds	r1, r3, #1
 8009210:	d103      	bne.n	800921a <_raise_r+0x42>
 8009212:	2316      	movs	r3, #22
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	2001      	movs	r0, #1
 8009218:	e7e7      	b.n	80091ea <_raise_r+0x12>
 800921a:	2100      	movs	r1, #0
 800921c:	4620      	mov	r0, r4
 800921e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009222:	4798      	blx	r3
 8009224:	2000      	movs	r0, #0
 8009226:	e7e0      	b.n	80091ea <_raise_r+0x12>

08009228 <raise>:
 8009228:	4b02      	ldr	r3, [pc, #8]	@ (8009234 <raise+0xc>)
 800922a:	4601      	mov	r1, r0
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	f7ff bfd3 	b.w	80091d8 <_raise_r>
 8009232:	bf00      	nop
 8009234:	2000002c 	.word	0x2000002c

08009238 <_kill_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	2300      	movs	r3, #0
 800923c:	4d06      	ldr	r5, [pc, #24]	@ (8009258 <_kill_r+0x20>)
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	f7f9 fbb7 	bl	80029b8 <_kill>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d102      	bne.n	8009254 <_kill_r+0x1c>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	b103      	cbz	r3, 8009254 <_kill_r+0x1c>
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	20001610 	.word	0x20001610

0800925c <_getpid_r>:
 800925c:	f7f9 bbaa 	b.w	80029b4 <_getpid>

08009260 <_init>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	bf00      	nop
 8009264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009266:	bc08      	pop	{r3}
 8009268:	469e      	mov	lr, r3
 800926a:	4770      	bx	lr

0800926c <_fini>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr
