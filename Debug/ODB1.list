
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5b4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800b6c8  0800b6c8  0000c6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd8  0800bdd8  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdd8  0800bdd8  0000cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bde0  0800bde0  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde0  0800bde0  0000cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde4  0800bde4  0000cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bde8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001e8  0800bfd0  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800bfd0  0000d56c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098a3  00000000  00000000  0000d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed8  00000000  00000000  00016ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000d07  00000000  00000000  0001898c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000580  00000000  00000000  00019693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000421  00000000  00000000  00019c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4ef  00000000  00000000  0001a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c738  00000000  00000000  00035523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095c2b  00000000  00000000  00041c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7886  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002614  00000000  00000000  000d78cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b6ac 	.word	0x0800b6ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b6ac 	.word	0x0800b6ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_ldivmod>:
 8000fe4:	b97b      	cbnz	r3, 8001006 <__aeabi_ldivmod+0x22>
 8000fe6:	b972      	cbnz	r2, 8001006 <__aeabi_ldivmod+0x22>
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	bfbe      	ittt	lt
 8000fec:	2000      	movlt	r0, #0
 8000fee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ff2:	e006      	blt.n	8001002 <__aeabi_ldivmod+0x1e>
 8000ff4:	bf08      	it	eq
 8000ff6:	2800      	cmpeq	r0, #0
 8000ff8:	bf1c      	itt	ne
 8000ffa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ffe:	f04f 30ff 	movne.w	r0, #4294967295
 8001002:	f000 b99b 	b.w	800133c <__aeabi_idiv0>
 8001006:	f1ad 0c08 	sub.w	ip, sp, #8
 800100a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800100e:	2900      	cmp	r1, #0
 8001010:	db09      	blt.n	8001026 <__aeabi_ldivmod+0x42>
 8001012:	2b00      	cmp	r3, #0
 8001014:	db1a      	blt.n	800104c <__aeabi_ldivmod+0x68>
 8001016:	f000 f835 	bl	8001084 <__udivmoddi4>
 800101a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800101e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	4240      	negs	r0, r0
 8001028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	db1b      	blt.n	8001068 <__aeabi_ldivmod+0x84>
 8001030:	f000 f828 	bl	8001084 <__udivmoddi4>
 8001034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103c:	b004      	add	sp, #16
 800103e:	4240      	negs	r0, r0
 8001040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001044:	4252      	negs	r2, r2
 8001046:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800104a:	4770      	bx	lr
 800104c:	4252      	negs	r2, r2
 800104e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001052:	f000 f817 	bl	8001084 <__udivmoddi4>
 8001056:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105e:	b004      	add	sp, #16
 8001060:	4240      	negs	r0, r0
 8001062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001066:	4770      	bx	lr
 8001068:	4252      	negs	r2, r2
 800106a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800106e:	f000 f809 	bl	8001084 <__udivmoddi4>
 8001072:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107a:	b004      	add	sp, #16
 800107c:	4252      	negs	r2, r2
 800107e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001082:	4770      	bx	lr

08001084 <__udivmoddi4>:
 8001084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001088:	9d08      	ldr	r5, [sp, #32]
 800108a:	460c      	mov	r4, r1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d14e      	bne.n	800112e <__udivmoddi4+0xaa>
 8001090:	4694      	mov	ip, r2
 8001092:	458c      	cmp	ip, r1
 8001094:	4686      	mov	lr, r0
 8001096:	fab2 f282 	clz	r2, r2
 800109a:	d962      	bls.n	8001162 <__udivmoddi4+0xde>
 800109c:	b14a      	cbz	r2, 80010b2 <__udivmoddi4+0x2e>
 800109e:	f1c2 0320 	rsb	r3, r2, #32
 80010a2:	4091      	lsls	r1, r2
 80010a4:	fa20 f303 	lsr.w	r3, r0, r3
 80010a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010ac:	4319      	orrs	r1, r3
 80010ae:	fa00 fe02 	lsl.w	lr, r0, r2
 80010b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80010ba:	fb07 1114 	mls	r1, r7, r4, r1
 80010be:	fa1f f68c 	uxth.w	r6, ip
 80010c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010ca:	fb04 f106 	mul.w	r1, r4, r6
 80010ce:	4299      	cmp	r1, r3
 80010d0:	d90a      	bls.n	80010e8 <__udivmoddi4+0x64>
 80010d2:	eb1c 0303 	adds.w	r3, ip, r3
 80010d6:	f104 30ff 	add.w	r0, r4, #4294967295
 80010da:	f080 8110 	bcs.w	80012fe <__udivmoddi4+0x27a>
 80010de:	4299      	cmp	r1, r3
 80010e0:	f240 810d 	bls.w	80012fe <__udivmoddi4+0x27a>
 80010e4:	3c02      	subs	r4, #2
 80010e6:	4463      	add	r3, ip
 80010e8:	1a59      	subs	r1, r3, r1
 80010ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80010ee:	fb07 1110 	mls	r1, r7, r0, r1
 80010f2:	fb00 f606 	mul.w	r6, r0, r6
 80010f6:	fa1f f38e 	uxth.w	r3, lr
 80010fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010fe:	429e      	cmp	r6, r3
 8001100:	d90a      	bls.n	8001118 <__udivmoddi4+0x94>
 8001102:	eb1c 0303 	adds.w	r3, ip, r3
 8001106:	f100 31ff 	add.w	r1, r0, #4294967295
 800110a:	f080 80fa 	bcs.w	8001302 <__udivmoddi4+0x27e>
 800110e:	429e      	cmp	r6, r3
 8001110:	f240 80f7 	bls.w	8001302 <__udivmoddi4+0x27e>
 8001114:	4463      	add	r3, ip
 8001116:	3802      	subs	r0, #2
 8001118:	2100      	movs	r1, #0
 800111a:	1b9b      	subs	r3, r3, r6
 800111c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001120:	b11d      	cbz	r5, 800112a <__udivmoddi4+0xa6>
 8001122:	40d3      	lsrs	r3, r2
 8001124:	2200      	movs	r2, #0
 8001126:	e9c5 3200 	strd	r3, r2, [r5]
 800112a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112e:	428b      	cmp	r3, r1
 8001130:	d905      	bls.n	800113e <__udivmoddi4+0xba>
 8001132:	b10d      	cbz	r5, 8001138 <__udivmoddi4+0xb4>
 8001134:	e9c5 0100 	strd	r0, r1, [r5]
 8001138:	2100      	movs	r1, #0
 800113a:	4608      	mov	r0, r1
 800113c:	e7f5      	b.n	800112a <__udivmoddi4+0xa6>
 800113e:	fab3 f183 	clz	r1, r3
 8001142:	2900      	cmp	r1, #0
 8001144:	d146      	bne.n	80011d4 <__udivmoddi4+0x150>
 8001146:	42a3      	cmp	r3, r4
 8001148:	d302      	bcc.n	8001150 <__udivmoddi4+0xcc>
 800114a:	4290      	cmp	r0, r2
 800114c:	f0c0 80ee 	bcc.w	800132c <__udivmoddi4+0x2a8>
 8001150:	1a86      	subs	r6, r0, r2
 8001152:	eb64 0303 	sbc.w	r3, r4, r3
 8001156:	2001      	movs	r0, #1
 8001158:	2d00      	cmp	r5, #0
 800115a:	d0e6      	beq.n	800112a <__udivmoddi4+0xa6>
 800115c:	e9c5 6300 	strd	r6, r3, [r5]
 8001160:	e7e3      	b.n	800112a <__udivmoddi4+0xa6>
 8001162:	2a00      	cmp	r2, #0
 8001164:	f040 808f 	bne.w	8001286 <__udivmoddi4+0x202>
 8001168:	eba1 040c 	sub.w	r4, r1, ip
 800116c:	2101      	movs	r1, #1
 800116e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001172:	fa1f f78c 	uxth.w	r7, ip
 8001176:	fbb4 f6f8 	udiv	r6, r4, r8
 800117a:	fb08 4416 	mls	r4, r8, r6, r4
 800117e:	fb07 f006 	mul.w	r0, r7, r6
 8001182:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001186:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800118a:	4298      	cmp	r0, r3
 800118c:	d908      	bls.n	80011a0 <__udivmoddi4+0x11c>
 800118e:	eb1c 0303 	adds.w	r3, ip, r3
 8001192:	f106 34ff 	add.w	r4, r6, #4294967295
 8001196:	d202      	bcs.n	800119e <__udivmoddi4+0x11a>
 8001198:	4298      	cmp	r0, r3
 800119a:	f200 80cb 	bhi.w	8001334 <__udivmoddi4+0x2b0>
 800119e:	4626      	mov	r6, r4
 80011a0:	1a1c      	subs	r4, r3, r0
 80011a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011a6:	fb08 4410 	mls	r4, r8, r0, r4
 80011aa:	fb00 f707 	mul.w	r7, r0, r7
 80011ae:	fa1f f38e 	uxth.w	r3, lr
 80011b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011b6:	429f      	cmp	r7, r3
 80011b8:	d908      	bls.n	80011cc <__udivmoddi4+0x148>
 80011ba:	eb1c 0303 	adds.w	r3, ip, r3
 80011be:	f100 34ff 	add.w	r4, r0, #4294967295
 80011c2:	d202      	bcs.n	80011ca <__udivmoddi4+0x146>
 80011c4:	429f      	cmp	r7, r3
 80011c6:	f200 80ae 	bhi.w	8001326 <__udivmoddi4+0x2a2>
 80011ca:	4620      	mov	r0, r4
 80011cc:	1bdb      	subs	r3, r3, r7
 80011ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80011d2:	e7a5      	b.n	8001120 <__udivmoddi4+0x9c>
 80011d4:	f1c1 0720 	rsb	r7, r1, #32
 80011d8:	408b      	lsls	r3, r1
 80011da:	fa22 fc07 	lsr.w	ip, r2, r7
 80011de:	ea4c 0c03 	orr.w	ip, ip, r3
 80011e2:	fa24 f607 	lsr.w	r6, r4, r7
 80011e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011ea:	fbb6 f8f9 	udiv	r8, r6, r9
 80011ee:	fa1f fe8c 	uxth.w	lr, ip
 80011f2:	fb09 6618 	mls	r6, r9, r8, r6
 80011f6:	fa20 f307 	lsr.w	r3, r0, r7
 80011fa:	408c      	lsls	r4, r1
 80011fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8001200:	fb08 f00e 	mul.w	r0, r8, lr
 8001204:	431c      	orrs	r4, r3
 8001206:	0c23      	lsrs	r3, r4, #16
 8001208:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800120c:	4298      	cmp	r0, r3
 800120e:	fa02 f201 	lsl.w	r2, r2, r1
 8001212:	d90a      	bls.n	800122a <__udivmoddi4+0x1a6>
 8001214:	eb1c 0303 	adds.w	r3, ip, r3
 8001218:	f108 36ff 	add.w	r6, r8, #4294967295
 800121c:	f080 8081 	bcs.w	8001322 <__udivmoddi4+0x29e>
 8001220:	4298      	cmp	r0, r3
 8001222:	d97e      	bls.n	8001322 <__udivmoddi4+0x29e>
 8001224:	f1a8 0802 	sub.w	r8, r8, #2
 8001228:	4463      	add	r3, ip
 800122a:	1a1e      	subs	r6, r3, r0
 800122c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001230:	fb09 6613 	mls	r6, r9, r3, r6
 8001234:	fb03 fe0e 	mul.w	lr, r3, lr
 8001238:	b2a4      	uxth	r4, r4
 800123a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800123e:	45a6      	cmp	lr, r4
 8001240:	d908      	bls.n	8001254 <__udivmoddi4+0x1d0>
 8001242:	eb1c 0404 	adds.w	r4, ip, r4
 8001246:	f103 30ff 	add.w	r0, r3, #4294967295
 800124a:	d266      	bcs.n	800131a <__udivmoddi4+0x296>
 800124c:	45a6      	cmp	lr, r4
 800124e:	d964      	bls.n	800131a <__udivmoddi4+0x296>
 8001250:	3b02      	subs	r3, #2
 8001252:	4464      	add	r4, ip
 8001254:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001258:	fba0 8302 	umull	r8, r3, r0, r2
 800125c:	eba4 040e 	sub.w	r4, r4, lr
 8001260:	429c      	cmp	r4, r3
 8001262:	46c6      	mov	lr, r8
 8001264:	461e      	mov	r6, r3
 8001266:	d350      	bcc.n	800130a <__udivmoddi4+0x286>
 8001268:	d04d      	beq.n	8001306 <__udivmoddi4+0x282>
 800126a:	b155      	cbz	r5, 8001282 <__udivmoddi4+0x1fe>
 800126c:	ebba 030e 	subs.w	r3, sl, lr
 8001270:	eb64 0406 	sbc.w	r4, r4, r6
 8001274:	fa04 f707 	lsl.w	r7, r4, r7
 8001278:	40cb      	lsrs	r3, r1
 800127a:	431f      	orrs	r7, r3
 800127c:	40cc      	lsrs	r4, r1
 800127e:	e9c5 7400 	strd	r7, r4, [r5]
 8001282:	2100      	movs	r1, #0
 8001284:	e751      	b.n	800112a <__udivmoddi4+0xa6>
 8001286:	fa0c fc02 	lsl.w	ip, ip, r2
 800128a:	f1c2 0320 	rsb	r3, r2, #32
 800128e:	40d9      	lsrs	r1, r3
 8001290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001294:	fa20 f303 	lsr.w	r3, r0, r3
 8001298:	fa00 fe02 	lsl.w	lr, r0, r2
 800129c:	fbb1 f0f8 	udiv	r0, r1, r8
 80012a0:	fb08 1110 	mls	r1, r8, r0, r1
 80012a4:	4094      	lsls	r4, r2
 80012a6:	431c      	orrs	r4, r3
 80012a8:	fa1f f78c 	uxth.w	r7, ip
 80012ac:	0c23      	lsrs	r3, r4, #16
 80012ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012b2:	fb00 f107 	mul.w	r1, r0, r7
 80012b6:	4299      	cmp	r1, r3
 80012b8:	d908      	bls.n	80012cc <__udivmoddi4+0x248>
 80012ba:	eb1c 0303 	adds.w	r3, ip, r3
 80012be:	f100 36ff 	add.w	r6, r0, #4294967295
 80012c2:	d22c      	bcs.n	800131e <__udivmoddi4+0x29a>
 80012c4:	4299      	cmp	r1, r3
 80012c6:	d92a      	bls.n	800131e <__udivmoddi4+0x29a>
 80012c8:	3802      	subs	r0, #2
 80012ca:	4463      	add	r3, ip
 80012cc:	1a5b      	subs	r3, r3, r1
 80012ce:	fbb3 f1f8 	udiv	r1, r3, r8
 80012d2:	fb08 3311 	mls	r3, r8, r1, r3
 80012d6:	b2a4      	uxth	r4, r4
 80012d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012dc:	fb01 f307 	mul.w	r3, r1, r7
 80012e0:	42a3      	cmp	r3, r4
 80012e2:	d908      	bls.n	80012f6 <__udivmoddi4+0x272>
 80012e4:	eb1c 0404 	adds.w	r4, ip, r4
 80012e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80012ec:	d213      	bcs.n	8001316 <__udivmoddi4+0x292>
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	d911      	bls.n	8001316 <__udivmoddi4+0x292>
 80012f2:	3902      	subs	r1, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	1ae4      	subs	r4, r4, r3
 80012f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012fc:	e73b      	b.n	8001176 <__udivmoddi4+0xf2>
 80012fe:	4604      	mov	r4, r0
 8001300:	e6f2      	b.n	80010e8 <__udivmoddi4+0x64>
 8001302:	4608      	mov	r0, r1
 8001304:	e708      	b.n	8001118 <__udivmoddi4+0x94>
 8001306:	45c2      	cmp	sl, r8
 8001308:	d2af      	bcs.n	800126a <__udivmoddi4+0x1e6>
 800130a:	ebb8 0e02 	subs.w	lr, r8, r2
 800130e:	eb63 060c 	sbc.w	r6, r3, ip
 8001312:	3801      	subs	r0, #1
 8001314:	e7a9      	b.n	800126a <__udivmoddi4+0x1e6>
 8001316:	4631      	mov	r1, r6
 8001318:	e7ed      	b.n	80012f6 <__udivmoddi4+0x272>
 800131a:	4603      	mov	r3, r0
 800131c:	e79a      	b.n	8001254 <__udivmoddi4+0x1d0>
 800131e:	4630      	mov	r0, r6
 8001320:	e7d4      	b.n	80012cc <__udivmoddi4+0x248>
 8001322:	46b0      	mov	r8, r6
 8001324:	e781      	b.n	800122a <__udivmoddi4+0x1a6>
 8001326:	4463      	add	r3, ip
 8001328:	3802      	subs	r0, #2
 800132a:	e74f      	b.n	80011cc <__udivmoddi4+0x148>
 800132c:	4606      	mov	r6, r0
 800132e:	4623      	mov	r3, r4
 8001330:	4608      	mov	r0, r1
 8001332:	e711      	b.n	8001158 <__udivmoddi4+0xd4>
 8001334:	3e02      	subs	r6, #2
 8001336:	4463      	add	r3, ip
 8001338:	e732      	b.n	80011a0 <__udivmoddi4+0x11c>
 800133a:	bf00      	nop

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <BMP280_PressureToAltitude>:

	BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, mode); // BMP280_SETTING_CTRL_MEAS_NORMAL (0x57) ou BMP280_SETTING_CTRL_MEAS_LOW (0x54)
	return 0;
}

float BMP280_PressureToAltitude(float pressure) {
 8001340:	b508      	push	{r3, lr}

    float altitude = (T0 / alpha) * (1 - pow((pressure / P0), (1 / beta)));
 8001342:	f7ff f871 	bl	8000428 <__aeabi_f2d>
 8001346:	a30c      	add	r3, pc, #48	@ (adr r3, 8001378 <BMP280_PressureToAltitude+0x38>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f9ee 	bl	800072c <__aeabi_ddiv>
 8001350:	a30b      	add	r3, pc, #44	@ (adr r3, 8001380 <BMP280_PressureToAltitude+0x40>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f009 fa9b 	bl	800a890 <pow>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	2000      	movs	r0, #0
 8001360:	490b      	ldr	r1, [pc, #44]	@ (8001390 <BMP280_PressureToAltitude+0x50>)
 8001362:	f7fe ff01 	bl	8000168 <__aeabi_dsub>
 8001366:	a308      	add	r3, pc, #32	@ (adr r3, 8001388 <BMP280_PressureToAltitude+0x48>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff f8b4 	bl	80004d8 <__aeabi_dmul>
 8001370:	f7ff fb8a 	bl	8000a88 <__aeabi_d2f>
    return altitude;
}
 8001374:	bd08      	pop	{r3, pc}
 8001376:	bf00      	nop
 8001378:	00000000 	.word	0x00000000
 800137c:	40f8bcd0 	.word	0x40f8bcd0
 8001380:	169985a6 	.word	0x169985a6
 8001384:	3fc85a66 	.word	0x3fc85a66
 8001388:	9d89d89d 	.word	0x9d89d89d
 800138c:	40e5a558 	.word	0x40e5a558
 8001390:	3ff00000 	.word	0x3ff00000

08001394 <BMP280_ReadRegister>:

uint8_t BMP280_ReadRegister(uint8_t reg) {
 8001394:	b500      	push	{lr}
 8001396:	b085      	sub	sp, #20
 8001398:	f88d 0007 	strb.w	r0, [sp, #7]

    uint8_t received_data;
    Write_GPIO(PA, 8, LOW); // Disable CS
 800139c:	2200      	movs	r2, #0
 800139e:	2108      	movs	r1, #8
 80013a0:	2001      	movs	r0, #1
 80013a2:	f000 fd2b 	bl	8001dfc <Write_GPIO>
    SPI2_TX(&reg, 1);
 80013a6:	2101      	movs	r1, #1
 80013a8:	f10d 0007 	add.w	r0, sp, #7
 80013ac:	f000 fdaa 	bl	8001f04 <SPI2_TX>
    SPI2_RX(&received_data, 1);
 80013b0:	2101      	movs	r1, #1
 80013b2:	f10d 000f 	add.w	r0, sp, #15
 80013b6:	f000 fdc3 	bl	8001f40 <SPI2_RX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 80013ba:	2201      	movs	r2, #1
 80013bc:	2108      	movs	r1, #8
 80013be:	4610      	mov	r0, r2
 80013c0:	f000 fd1c 	bl	8001dfc <Write_GPIO>
    return received_data;
}
 80013c4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80013c8:	b005      	add	sp, #20
 80013ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080013d0 <BMP280_ReadTemperature>:
float BMP280_ReadTemperature(BMP280 *devBMP) {
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4604      	mov	r4, r0
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013d4:	20fa      	movs	r0, #250	@ 0xfa
 80013d6:	f7ff ffdd 	bl	8001394 <BMP280_ReadRegister>
 80013da:	0305      	lsls	r5, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_TEMP_LSB) << 4) |
 80013dc:	20fb      	movs	r0, #251	@ 0xfb
 80013de:	f7ff ffd9 	bl	8001394 <BMP280_ReadRegister>
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013e2:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
                    (BMP280_ReadRegister(BMP280_REG_TEMP_XLSB) >> 4);
 80013e6:	20fc      	movs	r0, #252	@ 0xfc
 80013e8:	f7ff ffd4 	bl	8001394 <BMP280_ReadRegister>
 80013ec:	f3c0 1007 	ubfx	r0, r0, #4, #8
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013f0:	4328      	orrs	r0, r5
    int32_t var1 = ((((adc_T >> 3) - ((int32_t)devBMP->calib_data.dig_T1 << 1))) * ((int32_t)devBMP->calib_data.dig_T2)) >> 11;
 80013f2:	8923      	ldrh	r3, [r4, #8]
 80013f4:	005a      	lsls	r2, r3, #1
 80013f6:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 80013fa:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1)) * ((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1))) >> 12) * ((int32_t)devBMP->calib_data.dig_T3)) >> 14;
 8001402:	ebc3 1320 	rsb	r3, r3, r0, asr #4
 8001406:	fb03 f303 	mul.w	r3, r3, r3
 800140a:	131b      	asrs	r3, r3, #12
 800140c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	139b      	asrs	r3, r3, #14
    devBMP->t_fine = var1 + var2;
 8001416:	eb03 23e2 	add.w	r3, r3, r2, asr #11
 800141a:	6223      	str	r3, [r4, #32]
    float T = (devBMP->t_fine * 5 + 128) >> 8;
 800141c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001420:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8001424:	1200      	asrs	r0, r0, #8
 8001426:	f7ff fc39 	bl	8000c9c <__aeabi_i2f>
    return T / 100.0;
 800142a:	4902      	ldr	r1, [pc, #8]	@ (8001434 <BMP280_ReadTemperature+0x64>)
 800142c:	f7ff fd3e 	bl	8000eac <__aeabi_fdiv>
}
 8001430:	bd38      	pop	{r3, r4, r5, pc}
 8001432:	bf00      	nop
 8001434:	42c80000 	.word	0x42c80000

08001438 <BMP280_ReadPressure>:
float BMP280_ReadPressure(BMP280 *devBMP) {
 8001438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800143c:	4604      	mov	r4, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 800143e:	20f3      	movs	r0, #243	@ 0xf3
 8001440:	f7ff ffa8 	bl	8001394 <BMP280_ReadRegister>
 8001444:	f010 0f04 	tst.w	r0, #4
 8001448:	d1f9      	bne.n	800143e <BMP280_ReadPressure+0x6>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 800144a:	20f7      	movs	r0, #247	@ 0xf7
 800144c:	f7ff ffa2 	bl	8001394 <BMP280_ReadRegister>
 8001450:	0305      	lsls	r5, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_PRESS_LSB) << 4) |
 8001452:	20f8      	movs	r0, #248	@ 0xf8
 8001454:	f7ff ff9e 	bl	8001394 <BMP280_ReadRegister>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 8001458:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
                    (BMP280_ReadRegister(BMP280_REG_PRESS_XLSB) >> 4);
 800145c:	20f9      	movs	r0, #249	@ 0xf9
 800145e:	f7ff ff99 	bl	8001394 <BMP280_ReadRegister>
 8001462:	f3c0 1007 	ubfx	r0, r0, #4, #8
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 8001466:	ea45 0100 	orr.w	r1, r5, r0
    int64_t var1 = ((int64_t)devBMP->t_fine) - 128000;
 800146a:	6a20      	ldr	r0, [r4, #32]
 800146c:	17c3      	asrs	r3, r0, #31
 800146e:	f5b0 30fa 	subs.w	r0, r0, #128000	@ 0x1f400
 8001472:	f143 33ff 	adc.w	r3, r3, #4294967295
    int64_t var2 = var1 * var1 * (int64_t)devBMP->calib_data.dig_P6;
 8001476:	fb00 f503 	mul.w	r5, r0, r3
 800147a:	fba0 2600 	umull	r2, r6, r0, r0
 800147e:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 8001482:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 8001486:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800148a:	fb02 fe0e 	mul.w	lr, r2, lr
 800148e:	fb05 ee06 	mla	lr, r5, r6, lr
 8001492:	fba2 7505 	umull	r7, r5, r2, r5
 8001496:	44ae      	add	lr, r5
    var2 = var2 + ((var1 * (int64_t)devBMP->calib_data.dig_P5) << 17);
 8001498:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 800149c:	ea4f 78ec 	mov.w	r8, ip, asr #31
 80014a0:	fb0c f503 	mul.w	r5, ip, r3
 80014a4:	fb00 5508 	mla	r5, r0, r8, r5
 80014a8:	fbac c800 	umull	ip, r8, ip, r0
 80014ac:	4445      	add	r5, r8
 80014ae:	046d      	lsls	r5, r5, #17
 80014b0:	ea45 35dc 	orr.w	r5, r5, ip, lsr #15
 80014b4:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 80014b8:	eb1c 0c07 	adds.w	ip, ip, r7
 80014bc:	eb4e 0e05 	adc.w	lr, lr, r5
    var2 = var2 + (((int64_t)devBMP->calib_data.dig_P4) << 35);
 80014c0:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 80014c4:	eb0e 0ec5 	add.w	lr, lr, r5, lsl #3
    var1 = ((var1 * var1 * (int64_t)devBMP->calib_data.dig_P3) >> 8) + ((var1 * (int64_t)devBMP->calib_data.dig_P2) << 12);
 80014c8:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
 80014cc:	17ef      	asrs	r7, r5, #31
 80014ce:	fb02 f707 	mul.w	r7, r2, r7
 80014d2:	fb05 7606 	mla	r6, r5, r6, r7
 80014d6:	fba2 2505 	umull	r2, r5, r2, r5
 80014da:	442e      	add	r6, r5
 80014dc:	0a12      	lsrs	r2, r2, #8
 80014de:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 80014e2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80014e6:	17ef      	asrs	r7, r5, #31
 80014e8:	fb05 f303 	mul.w	r3, r5, r3
 80014ec:	fb00 3307 	mla	r3, r0, r7, r3
 80014f0:	fba5 5000 	umull	r5, r0, r5, r0
 80014f4:	4403      	add	r3, r0
 80014f6:	031b      	lsls	r3, r3, #12
 80014f8:	ea43 5315 	orr.w	r3, r3, r5, lsr #20
 80014fc:	032d      	lsls	r5, r5, #12
 80014fe:	1952      	adds	r2, r2, r5
 8001500:	eb43 2326 	adc.w	r3, r3, r6, asr #8
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)devBMP->calib_data.dig_P1) >> 33;
 8001504:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001508:	89e5      	ldrh	r5, [r4, #14]
 800150a:	fba2 2005 	umull	r2, r0, r2, r5
 800150e:	fb05 0003 	mla	r0, r5, r3, r0
 8001512:	1042      	asrs	r2, r0, #1
 8001514:	17c3      	asrs	r3, r0, #31
    if (var1 == 0) {
 8001516:	ea53 0060 	orrs.w	r0, r3, r0, asr #1
 800151a:	d06d      	beq.n	80015f8 <BMP280_ReadPressure+0x1c0>
    int64_t p = 1048576 - adc_P;
 800151c:	f5c1 1580 	rsb	r5, r1, #1048576	@ 0x100000
    p = (((p << 31) - var2) * 3125) / var1;
 8001520:	1069      	asrs	r1, r5, #1
 8001522:	07ed      	lsls	r5, r5, #31
 8001524:	ebb5 050c 	subs.w	r5, r5, ip
 8001528:	eb61 0e0e 	sbc.w	lr, r1, lr
 800152c:	eb15 0c05 	adds.w	ip, r5, r5
 8001530:	eb4e 010e 	adc.w	r1, lr, lr
 8001534:	eb1c 0c05 	adds.w	ip, ip, r5
 8001538:	eb4e 0101 	adc.w	r1, lr, r1
 800153c:	0188      	lsls	r0, r1, #6
 800153e:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8001542:	ea4f 168c 	mov.w	r6, ip, lsl #6
 8001546:	eb1c 0c06 	adds.w	ip, ip, r6
 800154a:	eb41 0100 	adc.w	r1, r1, r0
 800154e:	0089      	lsls	r1, r1, #2
 8001550:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8001554:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001558:	eb1c 0005 	adds.w	r0, ip, r5
 800155c:	eb4e 0101 	adc.w	r1, lr, r1
 8001560:	0089      	lsls	r1, r1, #2
 8001562:	ea41 7190 	orr.w	r1, r1, r0, lsr #30
 8001566:	0080      	lsls	r0, r0, #2
 8001568:	1940      	adds	r0, r0, r5
 800156a:	eb4e 0101 	adc.w	r1, lr, r1
 800156e:	f7ff fd39 	bl	8000fe4 <__aeabi_ldivmod>
 8001572:	4603      	mov	r3, r0
    var1 = (((int64_t)devBMP->calib_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001574:	f9b4 501e 	ldrsh.w	r5, [r4, #30]
 8001578:	17ee      	asrs	r6, r5, #31
 800157a:	0b42      	lsrs	r2, r0, #13
 800157c:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001580:	ea4f 3c61 	mov.w	ip, r1, asr #13
 8001584:	fb05 f70c 	mul.w	r7, r5, ip
 8001588:	fb02 7706 	mla	r7, r2, r6, r7
 800158c:	fba5 6502 	umull	r6, r5, r5, r2
 8001590:	443d      	add	r5, r7
 8001592:	fb02 f505 	mul.w	r5, r2, r5
 8001596:	fb06 550c 	mla	r5, r6, ip, r5
 800159a:	fba2 2606 	umull	r2, r6, r2, r6
 800159e:	4435      	add	r5, r6
 80015a0:	0e52      	lsrs	r2, r2, #25
 80015a2:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    var2 = (((int64_t)devBMP->calib_data.dig_P8) * p) >> 19;
 80015a6:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
 80015aa:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80015ae:	fb06 f701 	mul.w	r7, r6, r1
 80015b2:	fb0c 7000 	mla	r0, ip, r0, r7
 80015b6:	fba6 6703 	umull	r6, r7, r6, r3
 80015ba:	4438      	add	r0, r7
 80015bc:	0cf6      	lsrs	r6, r6, #19
 80015be:	ea46 3640 	orr.w	r6, r6, r0, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)devBMP->calib_data.dig_P7) << 4);
 80015c2:	189b      	adds	r3, r3, r2
 80015c4:	eb41 6165 	adc.w	r1, r1, r5, asr #25
 80015c8:	199b      	adds	r3, r3, r6
 80015ca:	eb41 42e0 	adc.w	r2, r1, r0, asr #19
 80015ce:	0a18      	lsrs	r0, r3, #8
 80015d0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80015d4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80015d8:	17d9      	asrs	r1, r3, #31
 80015da:	0109      	lsls	r1, r1, #4
 80015dc:	ea41 7113 	orr.w	r1, r1, r3, lsr #28
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	18c0      	adds	r0, r0, r3
    return (float)p / 256.0;
 80015e4:	eb41 2122 	adc.w	r1, r1, r2, asr #8
 80015e8:	f7ff fb6e 	bl	8000cc8 <__aeabi_l2f>
 80015ec:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80015f0:	f7ff fba8 	bl	8000d44 <__aeabi_fmul>
}
 80015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0; // avoid exception caused by division by zero
 80015f8:	2000      	movs	r0, #0
 80015fa:	e7fb      	b.n	80015f4 <BMP280_ReadPressure+0x1bc>

080015fc <BMP280_ReadCalibrationData>:
void BMP280_ReadCalibrationData(BMP280 *devBMP) {
 80015fc:	b530      	push	{r4, r5, lr}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 8001602:	20f3      	movs	r0, #243	@ 0xf3
 8001604:	f7ff fec6 	bl	8001394 <BMP280_ReadRegister>
 8001608:	f010 0f04 	tst.w	r0, #4
 800160c:	d1f9      	bne.n	8001602 <BMP280_ReadCalibrationData+0x6>
    for (int i = 0; i < 26; i++) {
 800160e:	2400      	movs	r4, #0
 8001610:	e00a      	b.n	8001628 <BMP280_ReadCalibrationData+0x2c>
        calib[i] = BMP280_ReadRegister(BMP280_REG_CALIB_00 + i);
 8001612:	f1a4 0078 	sub.w	r0, r4, #120	@ 0x78
 8001616:	b2c0      	uxtb	r0, r0
 8001618:	f7ff febc 	bl	8001394 <BMP280_ReadRegister>
 800161c:	f104 0320 	add.w	r3, r4, #32
 8001620:	446b      	add	r3, sp
 8001622:	f803 0c1c 	strb.w	r0, [r3, #-28]
    for (int i = 0; i < 26; i++) {
 8001626:	3401      	adds	r4, #1
 8001628:	2c19      	cmp	r4, #25
 800162a:	ddf2      	ble.n	8001612 <BMP280_ReadCalibrationData+0x16>
    devBMP->calib_data.dig_T1 = (calib[1] << 8) | calib[0];
 800162c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001630:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001634:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8001638:	8129      	strh	r1, [r5, #8]
    devBMP->calib_data.dig_T2 = (calib[3] << 8) | calib[2];
 800163a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800163e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001642:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001646:	816b      	strh	r3, [r5, #10]
    devBMP->calib_data.dig_T3 = (calib[5] << 8) | calib[4];
 8001648:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800164c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001650:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001654:	81ab      	strh	r3, [r5, #12]
    devBMP->calib_data.dig_P1 = (calib[7] << 8) | calib[6];
 8001656:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800165a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800165e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001662:	81eb      	strh	r3, [r5, #14]
    devBMP->calib_data.dig_P2 = (calib[9] << 8) | calib[8];
 8001664:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001668:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800166c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001670:	822b      	strh	r3, [r5, #16]
    devBMP->calib_data.dig_P3 = (calib[11] << 8) | calib[10];
 8001672:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001676:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800167a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800167e:	826b      	strh	r3, [r5, #18]
    devBMP->calib_data.dig_P4 = (calib[13] << 8) | calib[12];
 8001680:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001684:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800168c:	82ab      	strh	r3, [r5, #20]
    devBMP->calib_data.dig_P5 = (calib[15] << 8) | calib[14];
 800168e:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8001692:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001696:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800169a:	82eb      	strh	r3, [r5, #22]
    devBMP->calib_data.dig_P6 = (calib[17] << 8) | calib[16];
 800169c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80016a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80016a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016a8:	832b      	strh	r3, [r5, #24]
    devBMP->calib_data.dig_P7 = (calib[19] << 8) | calib[18];
 80016aa:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80016ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80016b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016b6:	836b      	strh	r3, [r5, #26]
    devBMP->calib_data.dig_P8 = (calib[21] << 8) | calib[20];
 80016b8:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80016bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80016c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016c4:	83ab      	strh	r3, [r5, #28]
    devBMP->calib_data.dig_P9 = (calib[23] << 8) | calib[22];
 80016c6:	f89d 201b 	ldrb.w	r2, [sp, #27]
 80016ca:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80016ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016d2:	83eb      	strh	r3, [r5, #30]
    printf("T1: %u\n", devBMP->calib_data.dig_T1);
 80016d4:	481d      	ldr	r0, [pc, #116]	@ (800174c <BMP280_ReadCalibrationData+0x150>)
 80016d6:	f007 f9b3 	bl	8008a40 <iprintf>
    printf("T2: %i\n", devBMP->calib_data.dig_T2);
 80016da:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
 80016de:	481c      	ldr	r0, [pc, #112]	@ (8001750 <BMP280_ReadCalibrationData+0x154>)
 80016e0:	f007 f9ae 	bl	8008a40 <iprintf>
    printf("T3: %i\n", devBMP->calib_data.dig_T3);
 80016e4:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 80016e8:	481a      	ldr	r0, [pc, #104]	@ (8001754 <BMP280_ReadCalibrationData+0x158>)
 80016ea:	f007 f9a9 	bl	8008a40 <iprintf>
    printf("P1: %u\n", devBMP->calib_data.dig_P1);
 80016ee:	89e9      	ldrh	r1, [r5, #14]
 80016f0:	4819      	ldr	r0, [pc, #100]	@ (8001758 <BMP280_ReadCalibrationData+0x15c>)
 80016f2:	f007 f9a5 	bl	8008a40 <iprintf>
    printf("P2: %i\n", devBMP->calib_data.dig_P2);
 80016f6:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 80016fa:	4818      	ldr	r0, [pc, #96]	@ (800175c <BMP280_ReadCalibrationData+0x160>)
 80016fc:	f007 f9a0 	bl	8008a40 <iprintf>
    printf("P3: %i\n", devBMP->calib_data.dig_P3);
 8001700:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 8001704:	4816      	ldr	r0, [pc, #88]	@ (8001760 <BMP280_ReadCalibrationData+0x164>)
 8001706:	f007 f99b 	bl	8008a40 <iprintf>
    printf("P4: %i\n", devBMP->calib_data.dig_P4);
 800170a:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
 800170e:	4815      	ldr	r0, [pc, #84]	@ (8001764 <BMP280_ReadCalibrationData+0x168>)
 8001710:	f007 f996 	bl	8008a40 <iprintf>
    printf("P5: %i\n", devBMP->calib_data.dig_P5);
 8001714:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 8001718:	4813      	ldr	r0, [pc, #76]	@ (8001768 <BMP280_ReadCalibrationData+0x16c>)
 800171a:	f007 f991 	bl	8008a40 <iprintf>
    printf("P6: %i\n", devBMP->calib_data.dig_P6);
 800171e:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
 8001722:	4812      	ldr	r0, [pc, #72]	@ (800176c <BMP280_ReadCalibrationData+0x170>)
 8001724:	f007 f98c 	bl	8008a40 <iprintf>
    printf("P7: %i\n", devBMP->calib_data.dig_P7);
 8001728:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
 800172c:	4810      	ldr	r0, [pc, #64]	@ (8001770 <BMP280_ReadCalibrationData+0x174>)
 800172e:	f007 f987 	bl	8008a40 <iprintf>
    printf("P8: %i\n", devBMP->calib_data.dig_P8);
 8001732:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
 8001736:	480f      	ldr	r0, [pc, #60]	@ (8001774 <BMP280_ReadCalibrationData+0x178>)
 8001738:	f007 f982 	bl	8008a40 <iprintf>
    printf("P9: %i\n", devBMP->calib_data.dig_P9);
 800173c:	f9b5 101e 	ldrsh.w	r1, [r5, #30]
 8001740:	480d      	ldr	r0, [pc, #52]	@ (8001778 <BMP280_ReadCalibrationData+0x17c>)
 8001742:	f007 f97d 	bl	8008a40 <iprintf>
}
 8001746:	b009      	add	sp, #36	@ 0x24
 8001748:	bd30      	pop	{r4, r5, pc}
 800174a:	bf00      	nop
 800174c:	0800b70c 	.word	0x0800b70c
 8001750:	0800b714 	.word	0x0800b714
 8001754:	0800b71c 	.word	0x0800b71c
 8001758:	0800b724 	.word	0x0800b724
 800175c:	0800b72c 	.word	0x0800b72c
 8001760:	0800b734 	.word	0x0800b734
 8001764:	0800b73c 	.word	0x0800b73c
 8001768:	0800b744 	.word	0x0800b744
 800176c:	0800b74c 	.word	0x0800b74c
 8001770:	0800b754 	.word	0x0800b754
 8001774:	0800b75c 	.word	0x0800b75c
 8001778:	0800b764 	.word	0x0800b764

0800177c <BMP280_WriteRegister>:

uint8_t BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 800177c:	b500      	push	{lr}
 800177e:	b083      	sub	sp, #12

    uint8_t data[2] = {reg, value};
 8001780:	f88d 0004 	strb.w	r0, [sp, #4]
 8001784:	f88d 1005 	strb.w	r1, [sp, #5]
    Write_GPIO(PA, 8, LOW); // Disable CS
 8001788:	2200      	movs	r2, #0
 800178a:	2108      	movs	r1, #8
 800178c:	2001      	movs	r0, #1
 800178e:	f000 fb35 	bl	8001dfc <Write_GPIO>
    SPI2_TX(data, 2);
 8001792:	2102      	movs	r1, #2
 8001794:	a801      	add	r0, sp, #4
 8001796:	f000 fbb5 	bl	8001f04 <SPI2_TX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 800179a:	2201      	movs	r2, #1
 800179c:	2108      	movs	r1, #8
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 fb2c 	bl	8001dfc <Write_GPIO>
    return 0; // OK
}
 80017a4:	2000      	movs	r0, #0
 80017a6:	b003      	add	sp, #12
 80017a8:	f85d fb04 	ldr.w	pc, [sp], #4

080017ac <BMP280_Init>:
uint8_t BMP280_Init(BMP280 *devBMP) {
 80017ac:	b510      	push	{r4, lr}
 80017ae:	4604      	mov	r4, r0
	Init_GPIO(PA, 8, OUT10, O_GP_PP);
 80017b0:	2300      	movs	r3, #0
 80017b2:	2201      	movs	r2, #1
 80017b4:	2108      	movs	r1, #8
 80017b6:	4610      	mov	r0, r2
 80017b8:	f000 fad6 	bl	8001d68 <Init_GPIO>
	SPI_Init(2);
 80017bc:	2002      	movs	r0, #2
 80017be:	f000 fb3d 	bl	8001e3c <SPI_Init>
    BMP280_WriteRegister(BMP280_REG_RESET, BMP280_RESET_WORD); // Reset
 80017c2:	21b6      	movs	r1, #182	@ 0xb6
 80017c4:	20e0      	movs	r0, #224	@ 0xe0
 80017c6:	f7ff ffd9 	bl	800177c <BMP280_WriteRegister>
    if (BMP280_ReadRegister(BMP280_REG_ID) != BMP280_DEVICE_ID) {
 80017ca:	20d0      	movs	r0, #208	@ 0xd0
 80017cc:	f7ff fde2 	bl	8001394 <BMP280_ReadRegister>
 80017d0:	2858      	cmp	r0, #88	@ 0x58
 80017d2:	d001      	beq.n	80017d8 <BMP280_Init+0x2c>
        return 1; // Error
 80017d4:	2001      	movs	r0, #1
}
 80017d6:	bd10      	pop	{r4, pc}
    BMP280_ReadCalibrationData(devBMP);
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff ff0f 	bl	80015fc <BMP280_ReadCalibrationData>
    BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, BMP280_SETTING_CTRL_MEAS_NORMAL);
 80017de:	2157      	movs	r1, #87	@ 0x57
 80017e0:	20f4      	movs	r0, #244	@ 0xf4
 80017e2:	f7ff ffcb 	bl	800177c <BMP280_WriteRegister>
    BMP280_WriteRegister(BMP280_REG_CONFIG, BMP280_SETTING_CONFIG);
 80017e6:	2108      	movs	r1, #8
 80017e8:	20f5      	movs	r0, #245	@ 0xf5
 80017ea:	f7ff ffc7 	bl	800177c <BMP280_WriteRegister>
    return 0;
 80017ee:	2000      	movs	r0, #0
 80017f0:	e7f1      	b.n	80017d6 <BMP280_Init+0x2a>

080017f2 <CD74HC4051_Init>:

#include "GAUL_Drivers/CD74HC4051.h"
#include "GAUL_Drivers/Pyros.h"
#include "GAUL_Drivers/Low_Level_Drivers/ADC_driver.h"

uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {
 80017f2:	b510      	push	{r4, lr}
 80017f4:	4604      	mov	r4, r0

	// Read pin
	Init_GPIO(PA, 0, IN, I_AN); // MUL_AN
 80017f6:	2300      	movs	r3, #0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	2001      	movs	r0, #1
 80017fe:	f000 fab3 	bl	8001d68 <Init_GPIO>
	// Batteries
	Init_GPIO(PC, 13, OUT2, O_GP_PP); // MUL_S0
 8001802:	2300      	movs	r3, #0
 8001804:	2202      	movs	r2, #2
 8001806:	210d      	movs	r1, #13
 8001808:	2003      	movs	r0, #3
 800180a:	f000 faad 	bl	8001d68 <Init_GPIO>
	Init_GPIO(PC, 14, OUT2, O_GP_PP); // MUL_S1
 800180e:	2300      	movs	r3, #0
 8001810:	2202      	movs	r2, #2
 8001812:	210e      	movs	r1, #14
 8001814:	2003      	movs	r0, #3
 8001816:	f000 faa7 	bl	8001d68 <Init_GPIO>
	Init_GPIO(PC, 15, OUT2, O_GP_PP); // MUL_S2
 800181a:	2300      	movs	r3, #0
 800181c:	2202      	movs	r2, #2
 800181e:	210f      	movs	r1, #15
 8001820:	2003      	movs	r0, #3
 8001822:	f000 faa1 	bl	8001d68 <Init_GPIO>
	Init_GPIO(PB, 8, OUT2, O_GP_PP); // MUL_E~
 8001826:	2300      	movs	r3, #0
 8001828:	2202      	movs	r2, #2
 800182a:	2108      	movs	r1, #8
 800182c:	4610      	mov	r0, r2
 800182e:	f000 fa9b 	bl	8001d68 <Init_GPIO>
	// Set MUL_E~ (inverse)
	Write_GPIO(PB, 8, HIGH);
 8001832:	2201      	movs	r2, #1
 8001834:	2108      	movs	r1, #8
 8001836:	2002      	movs	r0, #2
 8001838:	f000 fae0 	bl	8001dfc <Write_GPIO>
	// Pyros
	Pyro_Init();
 800183c:	f000 f9fc 	bl	8001c38 <Pyro_Init>

	//ADC calibration
	ADC_Stop(hadc);
 8001840:	4620      	mov	r0, r4
 8001842:	f000 fa8c 	bl	8001d5e <ADC_Stop>
	ADC_Calibration(hadc);
 8001846:	4620      	mov	r0, r4
 8001848:	f000 fa84 	bl	8001d54 <ADC_Calibration>

	return 0; // OK
}
 800184c:	2000      	movs	r0, #0
 800184e:	bd10      	pop	{r4, pc}

08001850 <ICM20602_Read>:
{
	return Read_GPIO(PA, 10);
}

void ICM20602_Read(uint8_t address, uint8_t rxData[], uint8_t size)
{
 8001850:	b530      	push	{r4, r5, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	460c      	mov	r4, r1
 8001856:	4615      	mov	r5, r2
 8001858:	f88d 0007 	strb.w	r0, [sp, #7]
	address |= 0x80;  // read operation
 800185c:	b2c3      	uxtb	r3, r0
 800185e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001862:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(PB, 12, LOW);
 8001866:	2200      	movs	r2, #0
 8001868:	210c      	movs	r1, #12
 800186a:	2002      	movs	r0, #2
 800186c:	f000 fac6 	bl	8001dfc <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8001870:	2101      	movs	r1, #1
 8001872:	f10d 0007 	add.w	r0, sp, #7
 8001876:	f000 fb45 	bl	8001f04 <SPI2_TX>
	SPI2_RX(rxData, size);  // receive 6 bytes data
 800187a:	4629      	mov	r1, r5
 800187c:	4620      	mov	r0, r4
 800187e:	f000 fb5f 	bl	8001f40 <SPI2_RX>
	Write_GPIO(PB, 12, HIGH);
 8001882:	2201      	movs	r2, #1
 8001884:	210c      	movs	r1, #12
 8001886:	2002      	movs	r0, #2
 8001888:	f000 fab8 	bl	8001dfc <Write_GPIO>
}
 800188c:	b003      	add	sp, #12
 800188e:	bd30      	pop	{r4, r5, pc}

08001890 <ICM20602_Write>:

void ICM20602_Write(uint8_t address, uint8_t value)
{
 8001890:	b500      	push	{lr}
 8001892:	b083      	sub	sp, #12
 8001894:	f88d 0007 	strb.w	r0, [sp, #7]
 8001898:	f88d 1006 	strb.w	r1, [sp, #6]
	Write_GPIO(PB, 12, LOW);
 800189c:	2200      	movs	r2, #0
 800189e:	210c      	movs	r1, #12
 80018a0:	2002      	movs	r0, #2
 80018a2:	f000 faab 	bl	8001dfc <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 80018a6:	2101      	movs	r1, #1
 80018a8:	f10d 0007 	add.w	r0, sp, #7
 80018ac:	f000 fb2a 	bl	8001f04 <SPI2_TX>
	SPI2_TX(&value, 1);  // send value
 80018b0:	2101      	movs	r1, #1
 80018b2:	f10d 0006 	add.w	r0, sp, #6
 80018b6:	f000 fb25 	bl	8001f04 <SPI2_TX>
	Write_GPIO(PB, 12, HIGH);
 80018ba:	2201      	movs	r2, #1
 80018bc:	210c      	movs	r1, #12
 80018be:	2002      	movs	r0, #2
 80018c0:	f000 fa9c 	bl	8001dfc <Write_GPIO>
	HAL_Delay(20);
 80018c4:	2014      	movs	r0, #20
 80018c6:	f001 f87f 	bl	80029c8 <HAL_Delay>
}
 80018ca:	b003      	add	sp, #12
 80018cc:	f85d fb04 	ldr.w	pc, [sp], #4

080018d0 <ICM20602_Remove_DC_Offset>:
{
 80018d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	460d      	mov	r5, r1
	int16_t offset[3] = {0,0,0};
 80018d8:	2400      	movs	r4, #0
 80018da:	f8ad 4008 	strh.w	r4, [sp, #8]
 80018de:	f8ad 400a 	strh.w	r4, [sp, #10]
 80018e2:	f8ad 400c 	strh.w	r4, [sp, #12]
	for(i = 0; i < mean; i++)
 80018e6:	e027      	b.n	8001938 <ICM20602_Remove_DC_Offset+0x68>
		ICM20602_Read(ICM20602_REG_GYRO_XOUT_H, rxData, 6);
 80018e8:	2206      	movs	r2, #6
 80018ea:	4669      	mov	r1, sp
 80018ec:	2043      	movs	r0, #67	@ 0x43
 80018ee:	f7ff ffaf 	bl	8001850 <ICM20602_Read>
		offset[0] += (rxData[0] << 8) | rxData[1];
 80018f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80018f6:	f89d 1000 	ldrb.w	r1, [sp]
 80018fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80018fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001902:	4413      	add	r3, r2
 8001904:	f8ad 3008 	strh.w	r3, [sp, #8]
		offset[1] += (rxData[2] << 8) | rxData[3];
 8001908:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800190c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001910:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001914:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001918:	4413      	add	r3, r2
 800191a:	f8ad 300a 	strh.w	r3, [sp, #10]
		offset[2] += (rxData[4] << 8) | rxData[5];
 800191e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001922:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001926:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800192a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800192e:	4413      	add	r3, r2
 8001930:	f8ad 300c 	strh.w	r3, [sp, #12]
	for(i = 0; i < mean; i++)
 8001934:	3401      	adds	r4, #1
 8001936:	b264      	sxtb	r4, r4
 8001938:	42ac      	cmp	r4, r5
 800193a:	dbd5      	blt.n	80018e8 <ICM20602_Remove_DC_Offset+0x18>
	offset[0] /= mean;
 800193c:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 8001940:	fb97 f7f5 	sdiv	r7, r7, r5
 8001944:	b239      	sxth	r1, r7
 8001946:	f8ad 1008 	strh.w	r1, [sp, #8]
	offset[1] /= mean;
 800194a:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 800194e:	fb96 f6f5 	sdiv	r6, r6, r5
 8001952:	fa0f f886 	sxth.w	r8, r6
 8001956:	f8ad 800a 	strh.w	r8, [sp, #10]
	offset[2] /= mean;
 800195a:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 800195e:	fb94 f4f5 	sdiv	r4, r4, r5
 8001962:	b225      	sxth	r5, r4
 8001964:	f8ad 500c 	strh.w	r5, [sp, #12]
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRH, (offset[0]*-2)>>8);
 8001968:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
 800196c:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8001970:	2013      	movs	r0, #19
 8001972:	f7ff ff8d 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRL, offset[0]*-2);
 8001976:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
 800197a:	0079      	lsls	r1, r7, #1
 800197c:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001980:	2014      	movs	r0, #20
 8001982:	f7ff ff85 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRH, (offset[1]*-2)>>8);
 8001986:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 800198a:	f3c8 11c7 	ubfx	r1, r8, #7, #8
 800198e:	2015      	movs	r0, #21
 8001990:	f7ff ff7e 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRL, offset[1]*-2);
 8001994:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
 8001998:	0071      	lsls	r1, r6, #1
 800199a:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 800199e:	2016      	movs	r0, #22
 80019a0:	f7ff ff76 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRH, (offset[2]*-2)>>8);
 80019a4:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 80019a8:	f3c5 11c7 	ubfx	r1, r5, #7, #8
 80019ac:	2017      	movs	r0, #23
 80019ae:	f7ff ff6f 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRL, offset[2]*-2);
 80019b2:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 80019b6:	0061      	lsls	r1, r4, #1
 80019b8:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 80019bc:	2018      	movs	r0, #24
 80019be:	f7ff ff67 	bl	8001890 <ICM20602_Write>
}
 80019c2:	b004      	add	sp, #16
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019c8 <ICM20602_Init>:
{
 80019c8:	b530      	push	{r4, r5, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	4604      	mov	r4, r0
	dev->gyroXRaw = 	0.0f;
 80019ce:	2500      	movs	r5, #0
 80019d0:	8005      	strh	r5, [r0, #0]
	dev->gyroYRaw = 	0.0f;
 80019d2:	8045      	strh	r5, [r0, #2]
	dev->gyroZRaw = 	0.0f;
 80019d4:	8085      	strh	r5, [r0, #4]
	dev->accXRaw = 		0.0f;
 80019d6:	80c5      	strh	r5, [r0, #6]
	dev->accYRaw = 		0.0f;
 80019d8:	8105      	strh	r5, [r0, #8]
	dev->accZRaw = 		0.0f;
 80019da:	8145      	strh	r5, [r0, #10]
	dev->temperatureC = 0.0f;
 80019dc:	2300      	movs	r3, #0
 80019de:	6243      	str	r3, [r0, #36]	@ 0x24
	Init_GPIO(PA,  10, IN, I_PP); // Init GPIO for the interrupt
 80019e0:	2302      	movs	r3, #2
 80019e2:	462a      	mov	r2, r5
 80019e4:	210a      	movs	r1, #10
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 f9be 	bl	8001d68 <Init_GPIO>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x80);
 80019ec:	2180      	movs	r1, #128	@ 0x80
 80019ee:	206b      	movs	r0, #107	@ 0x6b
 80019f0:	f7ff ff4e 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_I2C_IF, 0x40);
 80019f4:	2140      	movs	r1, #64	@ 0x40
 80019f6:	2070      	movs	r0, #112	@ 0x70
 80019f8:	f7ff ff4a 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x01);
 80019fc:	2101      	movs	r1, #1
 80019fe:	206b      	movs	r0, #107	@ 0x6b
 8001a00:	f7ff ff46 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_SMPLRT_DIV, 0x00);
 8001a04:	4629      	mov	r1, r5
 8001a06:	2019      	movs	r0, #25
 8001a08:	f7ff ff42 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_CONFIG, 0x05);
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	201a      	movs	r0, #26
 8001a10:	f7ff ff3e 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_GYRO_CONFIG, 0x018);
 8001a14:	2118      	movs	r1, #24
 8001a16:	201b      	movs	r0, #27
 8001a18:	f7ff ff3a 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG, 0x18);
 8001a1c:	2118      	movs	r1, #24
 8001a1e:	201c      	movs	r0, #28
 8001a20:	f7ff ff36 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001a24:	2103      	movs	r1, #3
 8001a26:	201d      	movs	r0, #29
 8001a28:	f7ff ff32 	bl	8001890 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_INT_ENABLE, 0x01);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2038      	movs	r0, #56	@ 0x38
 8001a30:	f7ff ff2e 	bl	8001890 <ICM20602_Write>
	ICM20602_Read(ICM20602_REG_WHO_AM_I, rxData, 1);
 8001a34:	2201      	movs	r2, #1
 8001a36:	a901      	add	r1, sp, #4
 8001a38:	2075      	movs	r0, #117	@ 0x75
 8001a3a:	f7ff ff09 	bl	8001850 <ICM20602_Read>
	if(rxData[0] == 0x12){test = 1;}else{test = 0;}
 8001a3e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001a42:	2912      	cmp	r1, #18
 8001a44:	d057      	beq.n	8001af6 <ICM20602_Init+0x12e>
 8001a46:	2200      	movs	r2, #0
	printf("ICM20602_REG_WHO_AM_I: %x : %d \n", rxData[0], test);
 8001a48:	4832      	ldr	r0, [pc, #200]	@ (8001b14 <ICM20602_Init+0x14c>)
 8001a4a:	f006 fff9 	bl	8008a40 <iprintf>
	ICM20602_Read(ICM20602_REG_I2C_IF, rxData, 1);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	a901      	add	r1, sp, #4
 8001a52:	2070      	movs	r0, #112	@ 0x70
 8001a54:	f7ff fefc 	bl	8001850 <ICM20602_Read>
	if(rxData[0] == 0x40){test = 1;}else{test = 0;}
 8001a58:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001a5c:	2940      	cmp	r1, #64	@ 0x40
 8001a5e:	d04c      	beq.n	8001afa <ICM20602_Init+0x132>
 8001a60:	2200      	movs	r2, #0
	printf("ICM20602_REG_I2C_IF: %x : %d \n", rxData[0], test);
 8001a62:	482d      	ldr	r0, [pc, #180]	@ (8001b18 <ICM20602_Init+0x150>)
 8001a64:	f006 ffec 	bl	8008a40 <iprintf>
	ICM20602_Read(ICM20602_REG_PWR_MGMT_1, rxData, 1);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	a901      	add	r1, sp, #4
 8001a6c:	206b      	movs	r0, #107	@ 0x6b
 8001a6e:	f7ff feef 	bl	8001850 <ICM20602_Read>
	if(rxData[0] == 0x01){test = 1;}else{test = 0;}
 8001a72:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001a76:	2901      	cmp	r1, #1
 8001a78:	d041      	beq.n	8001afe <ICM20602_Init+0x136>
 8001a7a:	2200      	movs	r2, #0
	printf("ICM20602_REG_PWR_MGMT_1: %x : %d \n", rxData[0], test);
 8001a7c:	4827      	ldr	r0, [pc, #156]	@ (8001b1c <ICM20602_Init+0x154>)
 8001a7e:	f006 ffdf 	bl	8008a40 <iprintf>
	ICM20602_Read(ICM20602_REG_SMPLRT_DIV, rxData, 1);
 8001a82:	2201      	movs	r2, #1
 8001a84:	a901      	add	r1, sp, #4
 8001a86:	2019      	movs	r0, #25
 8001a88:	f7ff fee2 	bl	8001850 <ICM20602_Read>
	if(rxData[0] == 0x00){test = 1;}else{test = 0;}
 8001a8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001a90:	bbb9      	cbnz	r1, 8001b02 <ICM20602_Init+0x13a>
 8001a92:	2201      	movs	r2, #1
	printf("ICM20602_REG_SMPLRT_DIV: %x : %d \n", rxData[0], test);
 8001a94:	4822      	ldr	r0, [pc, #136]	@ (8001b20 <ICM20602_Init+0x158>)
 8001a96:	f006 ffd3 	bl	8008a40 <iprintf>
	ICM20602_Read(ICM20602_REG_CONFIG, rxData, 1);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	a901      	add	r1, sp, #4
 8001a9e:	201a      	movs	r0, #26
 8001aa0:	f7ff fed6 	bl	8001850 <ICM20602_Read>
	if(rxData[0] == 0x05){test = 1;}else{test = 0;}
 8001aa4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001aa8:	2905      	cmp	r1, #5
 8001aaa:	d02c      	beq.n	8001b06 <ICM20602_Init+0x13e>
 8001aac:	2200      	movs	r2, #0
	printf("ICM20602_REG_CONFIG: %x : %d \n", rxData[0], test);
 8001aae:	481d      	ldr	r0, [pc, #116]	@ (8001b24 <ICM20602_Init+0x15c>)
 8001ab0:	f006 ffc6 	bl	8008a40 <iprintf>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG, rxData, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	a901      	add	r1, sp, #4
 8001ab8:	201c      	movs	r0, #28
 8001aba:	f7ff fec9 	bl	8001850 <ICM20602_Read>
	if(rxData[0] == 0x18){test = 1;}else{test = 0;}
 8001abe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001ac2:	2918      	cmp	r1, #24
 8001ac4:	d021      	beq.n	8001b0a <ICM20602_Init+0x142>
 8001ac6:	2200      	movs	r2, #0
	printf("ICM20602_REG_ACCEL_CONFIG: %x : %d \n", rxData[0], test);
 8001ac8:	4817      	ldr	r0, [pc, #92]	@ (8001b28 <ICM20602_Init+0x160>)
 8001aca:	f006 ffb9 	bl	8008a40 <iprintf>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG2, rxData, 1);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	a901      	add	r1, sp, #4
 8001ad2:	201d      	movs	r0, #29
 8001ad4:	f7ff febc 	bl	8001850 <ICM20602_Read>
	if(rxData[0] == 0x03){test = 1;}else{test = 0;}
 8001ad8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001adc:	2903      	cmp	r1, #3
 8001ade:	d016      	beq.n	8001b0e <ICM20602_Init+0x146>
 8001ae0:	2200      	movs	r2, #0
	printf("ICM20602_REG_ACCEL_CONFIG2: %x : %d \n", rxData[0], test);
 8001ae2:	4812      	ldr	r0, [pc, #72]	@ (8001b2c <ICM20602_Init+0x164>)
 8001ae4:	f006 ffac 	bl	8008a40 <iprintf>
	ICM20602_Remove_DC_Offset(dev,2);
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fef0 	bl	80018d0 <ICM20602_Remove_DC_Offset>
}
 8001af0:	2000      	movs	r0, #0
 8001af2:	b003      	add	sp, #12
 8001af4:	bd30      	pop	{r4, r5, pc}
	if(rxData[0] == 0x12){test = 1;}else{test = 0;}
 8001af6:	2201      	movs	r2, #1
 8001af8:	e7a6      	b.n	8001a48 <ICM20602_Init+0x80>
	if(rxData[0] == 0x40){test = 1;}else{test = 0;}
 8001afa:	2201      	movs	r2, #1
 8001afc:	e7b1      	b.n	8001a62 <ICM20602_Init+0x9a>
	if(rxData[0] == 0x01){test = 1;}else{test = 0;}
 8001afe:	2201      	movs	r2, #1
 8001b00:	e7bc      	b.n	8001a7c <ICM20602_Init+0xb4>
	if(rxData[0] == 0x00){test = 1;}else{test = 0;}
 8001b02:	2200      	movs	r2, #0
 8001b04:	e7c6      	b.n	8001a94 <ICM20602_Init+0xcc>
	if(rxData[0] == 0x05){test = 1;}else{test = 0;}
 8001b06:	2201      	movs	r2, #1
 8001b08:	e7d1      	b.n	8001aae <ICM20602_Init+0xe6>
	if(rxData[0] == 0x18){test = 1;}else{test = 0;}
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	e7dc      	b.n	8001ac8 <ICM20602_Init+0x100>
	if(rxData[0] == 0x03){test = 1;}else{test = 0;}
 8001b0e:	2201      	movs	r2, #1
 8001b10:	e7e7      	b.n	8001ae2 <ICM20602_Init+0x11a>
 8001b12:	bf00      	nop
 8001b14:	0800b76c 	.word	0x0800b76c
 8001b18:	0800b790 	.word	0x0800b790
 8001b1c:	0800b7b0 	.word	0x0800b7b0
 8001b20:	0800b7d4 	.word	0x0800b7d4
 8001b24:	0800b7f8 	.word	0x0800b7f8
 8001b28:	0800b818 	.word	0x0800b818
 8001b2c:	0800b840 	.word	0x0800b840

08001b30 <L76LM33_SendCommand>:
	L76LM33_SendCommand(PROTOCOL_NAVMODE);

	return 0;
}

uint8_t L76LM33_SendCommand(char *command) {
 8001b30:	b510      	push	{r4, lr}
 8001b32:	4604      	mov	r4, r0

	USART_TX(GPS_USART_PORT, (uint8_t*)command, strlen(command));
 8001b34:	f7fe fb0c 	bl	8000150 <strlen>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f000 fa8f 	bl	8002060 <USART_TX>

	return 0;
}
 8001b42:	2000      	movs	r0, #0
 8001b44:	bd10      	pop	{r4, pc}
	...

08001b48 <L76LM33_Init>:
uint8_t L76LM33_Init (void) {
 8001b48:	b530      	push	{r4, r5, lr}
 8001b4a:	b09f      	sub	sp, #124	@ 0x7c
	char PROTOCOL_SETRMS[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*35\r\n";
 8001b4c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8001b50:	4c16      	ldr	r4, [pc, #88]	@ (8001bac <L76LM33_Init+0x64>)
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001b64:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b68:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8001b6c:	f8ac 2000 	strh.w	r2, [ip]
	char PROTOCOL_GPSSEARCHONLY[] = "$PMTK353,1,0,0,0,0*2A<CR><LF>";
 8001b70:	ac07      	add	r4, sp, #28
 8001b72:	4d0f      	ldr	r5, [pc, #60]	@ (8001bb0 <L76LM33_Init+0x68>)
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b7c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b7e:	8023      	strh	r3, [r4, #0]
	char PROTOCOL_NAVMODE[] = "PMTK886,2*2A<CR><LF>";
 8001b80:	ac01      	add	r4, sp, #4
 8001b82:	4d0c      	ldr	r5, [pc, #48]	@ (8001bb4 <L76LM33_Init+0x6c>)
 8001b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b8c:	f844 0b04 	str.w	r0, [r4], #4
 8001b90:	7021      	strb	r1, [r4, #0]
	L76LM33_SendCommand(PROTOCOL_SETRMS);
 8001b92:	a80f      	add	r0, sp, #60	@ 0x3c
 8001b94:	f7ff ffcc 	bl	8001b30 <L76LM33_SendCommand>
	L76LM33_SendCommand(PROTOCOL_GPSSEARCHONLY);
 8001b98:	a807      	add	r0, sp, #28
 8001b9a:	f7ff ffc9 	bl	8001b30 <L76LM33_SendCommand>
	L76LM33_SendCommand(PROTOCOL_NAVMODE);
 8001b9e:	a801      	add	r0, sp, #4
 8001ba0:	f7ff ffc6 	bl	8001b30 <L76LM33_SendCommand>
}
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	b01f      	add	sp, #124	@ 0x7c
 8001ba8:	bd30      	pop	{r4, r5, pc}
 8001baa:	bf00      	nop
 8001bac:	0800b868 	.word	0x0800b868
 8001bb0:	0800b8a4 	.word	0x0800b8a4
 8001bb4:	0800b8c4 	.word	0x0800b8c4

08001bb8 <MEM2067_Init>:
 *      Author: gagno
 */

#include "GAUL_Drivers/MEM2067.h"

uint8_t MEM2067_Init(void) {
 8001bb8:	b508      	push	{r3, lr}

    Init_GPIO(PA, 4, OUT10, O_GP_PP);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f000 f8d1 	bl	8001d68 <Init_GPIO>
    SPI_Init(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 f938 	bl	8001e3c <SPI_Init>
    return 0; // OK
}
 8001bcc:	2000      	movs	r0, #0
 8001bce:	bd08      	pop	{r3, pc}

08001bd0 <MEM2067_WriteFATFS>:

uint8_t MEM2067_WriteFATFS(const char *filename, uint8_t *data, uint16_t size) {
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	460d      	mov	r5, r1
 8001bda:	4616      	mov	r6, r2
    FIL file;
    FRESULT result;
    UINT bytes_written;

    // Montage de la partition FATFS
    if (f_mount(&fs, "", 1) != FR_OK) {
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4915      	ldr	r1, [pc, #84]	@ (8001c34 <MEM2067_WriteFATFS+0x64>)
 8001be0:	a88c      	add	r0, sp, #560	@ 0x230
 8001be2:	f005 fc0d 	bl	8007400 <f_mount>
 8001be6:	b120      	cbz	r0, 8001bf2 <MEM2067_WriteFATFS+0x22>
        return 1;
 8001be8:	2401      	movs	r4, #1

    // Démontage FATFS
    f_mount(NULL, "", 1);

    return 0; // OK
}
 8001bea:	4620      	mov	r0, r4
 8001bec:	f50d 6d8c 	add.w	sp, sp, #1120	@ 0x460
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
    result = f_open(&file, filename, FA_WRITE | FA_CREATE_ALWAYS);
 8001bf2:	220a      	movs	r2, #10
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	a801      	add	r0, sp, #4
 8001bf8:	f005 fc4a 	bl	8007490 <f_open>
    if (result != FR_OK) {
 8001bfc:	b948      	cbnz	r0, 8001c12 <MEM2067_WriteFATFS+0x42>
    result = f_write(&file, data, size, &bytes_written);
 8001bfe:	466b      	mov	r3, sp
 8001c00:	4632      	mov	r2, r6
 8001c02:	4629      	mov	r1, r5
 8001c04:	a801      	add	r0, sp, #4
 8001c06:	f005 feb8 	bl	800797a <f_write>
    if (result != FR_OK) {
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b140      	cbz	r0, 8001c20 <MEM2067_WriteFATFS+0x50>
       return 1;
 8001c0e:	2401      	movs	r4, #1
 8001c10:	e7eb      	b.n	8001bea <MEM2067_WriteFATFS+0x1a>
        f_mount(NULL, "", 1); // Démontage si erreur
 8001c12:	2201      	movs	r2, #1
 8001c14:	4907      	ldr	r1, [pc, #28]	@ (8001c34 <MEM2067_WriteFATFS+0x64>)
 8001c16:	2000      	movs	r0, #0
 8001c18:	f005 fbf2 	bl	8007400 <f_mount>
        return 1;
 8001c1c:	2401      	movs	r4, #1
 8001c1e:	e7e4      	b.n	8001bea <MEM2067_WriteFATFS+0x1a>
    f_close(&file);
 8001c20:	a801      	add	r0, sp, #4
 8001c22:	f006 f911 	bl	8007e48 <f_close>
    f_mount(NULL, "", 1);
 8001c26:	2201      	movs	r2, #1
 8001c28:	4902      	ldr	r1, [pc, #8]	@ (8001c34 <MEM2067_WriteFATFS+0x64>)
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f005 fbe8 	bl	8007400 <f_mount>
    return 0; // OK
 8001c30:	e7db      	b.n	8001bea <MEM2067_WriteFATFS+0x1a>
 8001c32:	bf00      	nop
 8001c34:	0800b83c 	.word	0x0800b83c

08001c38 <Pyro_Init>:
 *      Author: gagno
 */

#include "GAUL_Drivers/Pyros.h"

void Pyro_Init(void) {
 8001c38:	b508      	push	{r3, lr}

	// Pyros
	Init_GPIO(PB, 4, OUT2, O_GP_PP); // PyroON0
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4610      	mov	r0, r2
 8001c42:	f000 f891 	bl	8001d68 <Init_GPIO>
	Init_GPIO(PB, 5, OUT2, O_GP_PP); // PyroON1
 8001c46:	2300      	movs	r3, #0
 8001c48:	2202      	movs	r2, #2
 8001c4a:	2105      	movs	r1, #5
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	f000 f88b 	bl	8001d68 <Init_GPIO>
	Init_GPIO(PA, 15, OUT2, O_GP_PP); // Pyro_Test~
 8001c52:	2300      	movs	r3, #0
 8001c54:	2202      	movs	r2, #2
 8001c56:	210f      	movs	r1, #15
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 f885 	bl	8001d68 <Init_GPIO>
	// Set Pyro_Test~ (inverse) et Pyros_ON LOW
	Write_GPIO(PA, 15, HIGH);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	210f      	movs	r1, #15
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f8ca 	bl	8001dfc <Write_GPIO>
	Write_GPIO(PB, 4, LOW);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f000 f8c5 	bl	8001dfc <Write_GPIO>
	Write_GPIO(PB, 5, LOW);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	2002      	movs	r0, #2
 8001c78:	f000 f8c0 	bl	8001dfc <Write_GPIO>
}
 8001c7c:	bd08      	pop	{r3, pc}
	...

08001c80 <ws2812_timer2_init>:
static uint16_t ws2812_gpio_set_bits = 0;
static uint16_t dma_buffer[DMA_BUFFER_SIZE];


static void ws2812_timer2_init(void)
{
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	b08e      	sub	sp, #56	@ 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c84:	2400      	movs	r4, #0
 8001c86:	940a      	str	r4, [sp, #40]	@ 0x28
 8001c88:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001c8a:	940c      	str	r4, [sp, #48]	@ 0x30
 8001c8c:	940d      	str	r4, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	9408      	str	r4, [sp, #32]
 8001c90:	9409      	str	r4, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001c92:	9401      	str	r4, [sp, #4]
 8001c94:	9402      	str	r4, [sp, #8]
 8001c96:	9403      	str	r4, [sp, #12]
 8001c98:	9404      	str	r4, [sp, #16]
 8001c9a:	9405      	str	r4, [sp, #20]
 8001c9c:	9406      	str	r4, [sp, #24]
 8001c9e:	9407      	str	r4, [sp, #28]

    htimer2.Instance = TIM2;
 8001ca0:	4d1a      	ldr	r5, [pc, #104]	@ (8001d0c <ws2812_timer2_init+0x8c>)
 8001ca2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ca6:	602b      	str	r3, [r5, #0]
    htimer2.Init.Prescaler = 0;
 8001ca8:	606c      	str	r4, [r5, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	60ac      	str	r4, [r5, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8001cac:	235a      	movs	r3, #90	@ 0x5a
 8001cae:	60eb      	str	r3, [r5, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	612c      	str	r4, [r5, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htimer2);
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f002 facf 	bl	8004258 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cbe:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8001cc0:	a90a      	add	r1, sp, #40	@ 0x28
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	f002 fc32 	bl	800452c <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8001cc8:	4628      	mov	r0, r5
 8001cca:	f002 fb14 	bl	80042f6 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	9408      	str	r4, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8001cd2:	a908      	add	r1, sp, #32
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	f002 ff71 	bl	8004bbc <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2660      	movs	r6, #96	@ 0x60
 8001cdc:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8001cde:	231c      	movs	r3, #28
 8001ce0:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce4:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	a901      	add	r1, sp, #4
 8001cea:	4628      	mov	r0, r5
 8001cec:	f002 fb5c 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8001cf2:	2339      	movs	r3, #57	@ 0x39
 8001cf4:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf6:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf8:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	eb0d 0102 	add.w	r1, sp, r2
 8001d00:	4628      	mov	r0, r5
 8001d02:	f002 fb51 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
}
 8001d06:	b00e      	add	sp, #56	@ 0x38
 8001d08:	bd70      	pop	{r4, r5, r6, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000204 	.word	0x20000204

08001d10 <WS2812_Init>:
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
}

void WS2812_Init()
{
 8001d10:	b500      	push	{lr}
 8001d12:	b083      	sub	sp, #12
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001d14:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <WS2812_Init+0x40>)
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	9b01      	ldr	r3, [sp, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	200c      	movs	r0, #12
 8001d2e:	f001 fa8c 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	4611      	mov	r1, r2
 8001d36:	200f      	movs	r0, #15
 8001d38:	f001 fa87 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4611      	mov	r1, r2
 8001d40:	2011      	movs	r0, #17
 8001d42:	f001 fa82 	bl	800324a <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001d46:	f7ff ff9b 	bl	8001c80 <ws2812_timer2_init>
}
 8001d4a:	b003      	add	sp, #12
 8001d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d50:	40021000 	.word	0x40021000

08001d54 <ADC_Calibration>:
	HAL_ADC_Start(hadc);

	return 0;
}

uint8_t ADC_Calibration(ADC_HandleTypeDef *hadc) {
 8001d54:	b508      	push	{r3, lr}

	HAL_ADCEx_Calibration_Start(hadc);
 8001d56:	f001 f8f3 	bl	8002f40 <HAL_ADCEx_Calibration_Start>

	return 0;
}
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd08      	pop	{r3, pc}

08001d5e <ADC_Stop>:

uint8_t ADC_Stop(ADC_HandleTypeDef *hadc) {
 8001d5e:	b508      	push	{r3, lr}

	HAL_ADC_Stop(hadc);
 8001d60:	f000 ff2e 	bl	8002bc0 <HAL_ADC_Stop>

	return 0;
}
 8001d64:	2000      	movs	r0, #0
 8001d66:	bd08      	pop	{r3, pc}

08001d68 <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8001d68:	b510      	push	{r4, lr}
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 unsigned short offset = 0x00;

	if(pin > 7)
 8001d6a:	2907      	cmp	r1, #7
 8001d6c:	d904      	bls.n	8001d78 <Init_GPIO+0x10>
		{
			tPIN -= 8;
 8001d6e:	3908      	subs	r1, #8
 8001d70:	b289      	uxth	r1, r1
			offset = 0x01;
 8001d72:	f04f 0e01 	mov.w	lr, #1
 8001d76:	e001      	b.n	8001d7c <Init_GPIO+0x14>
 unsigned short offset = 0x00;
 8001d78:	f04f 0e00 	mov.w	lr, #0
		}

	if(port == 1)
 8001d7c:	2801      	cmp	r0, #1
 8001d7e:	d00f      	beq.n	8001da0 <Init_GPIO+0x38>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8001d80:	2802      	cmp	r0, #2
 8001d82:	d02d      	beq.n	8001de0 <Init_GPIO+0x78>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001d84:	2803      	cmp	r0, #3
 8001d86:	d116      	bne.n	8001db6 <Init_GPIO+0x4e>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 8001d88:	4c1b      	ldr	r4, [pc, #108]	@ (8001df8 <Init_GPIO+0x90>)
 8001d8a:	69a0      	ldr	r0, [r4, #24]
 8001d8c:	f040 0010 	orr.w	r0, r0, #16
 8001d90:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 8001d92:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d96:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001d9a:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 8001d9e:	e00a      	b.n	8001db6 <Init_GPIO+0x4e>
			RCC_APB2ENR |= 4; //// Enabling PORT A
 8001da0:	4c15      	ldr	r4, [pc, #84]	@ (8001df8 <Init_GPIO+0x90>)
 8001da2:	69a0      	ldr	r0, [r4, #24]
 8001da4:	f040 0004 	orr.w	r0, r0, #4
 8001da8:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 8001daa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001dae:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001db2:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 8001db6:	f8dc 0000 	ldr.w	r0, [ip]
 8001dba:	0089      	lsls	r1, r1, #2
 8001dbc:	f04f 0e0f 	mov.w	lr, #15
 8001dc0:	fa0e fe01 	lsl.w	lr, lr, r1
 8001dc4:	ea20 000e 	bic.w	r0, r0, lr
 8001dc8:	f8cc 0000 	str.w	r0, [ip]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8001dcc:	f8dc 0000 	ldr.w	r0, [ip]
 8001dd0:	408a      	lsls	r2, r1
 8001dd2:	3102      	adds	r1, #2
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	f8cc 2000 	str.w	r2, [ip]
}
 8001dde:	bd10      	pop	{r4, pc}
			RCC_APB2ENR |= 8; //// Enabling PORT A
 8001de0:	4c05      	ldr	r4, [pc, #20]	@ (8001df8 <Init_GPIO+0x90>)
 8001de2:	69a0      	ldr	r0, [r4, #24]
 8001de4:	f040 0008 	orr.w	r0, r0, #8
 8001de8:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 8001dea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001dee:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001df2:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 8001df6:	e7de      	b.n	8001db6 <Init_GPIO+0x4e>
 8001df8:	40021000 	.word	0x40021000

08001dfc <Write_GPIO>:
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
 8001dfc:	2801      	cmp	r0, #1
 8001dfe:	d005      	beq.n	8001e0c <Write_GPIO+0x10>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8001e00:	2802      	cmp	r0, #2
 8001e02:	d00a      	beq.n	8001e1a <Write_GPIO+0x1e>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001e04:	2803      	cmp	r0, #3
 8001e06:	d102      	bne.n	8001e0e <Write_GPIO+0x12>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <Write_GPIO+0x34>)
 8001e0a:	e000      	b.n	8001e0e <Write_GPIO+0x12>
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <Write_GPIO+0x38>)
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8001e0e:	b132      	cbz	r2, 8001e1e <Write_GPIO+0x22>
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	408a      	lsls	r2, r1
 8001e14:	4302      	orrs	r2, r0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	4770      	bx	lr
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <Write_GPIO+0x3c>)
 8001e1c:	e7f7      	b.n	8001e0e <Write_GPIO+0x12>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f101 	lsl.w	r1, r0, r1
 8001e26:	ea22 0201 	bic.w	r2, r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	4001100c 	.word	0x4001100c
 8001e34:	4001080c 	.word	0x4001080c
 8001e38:	40010c0c 	.word	0x40010c0c

08001e3c <SPI_Init>:

#include "main.h"
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"
#include "GAUL_Drivers/Low_Level_Drivers/SPI_driver.h"

void SPI_Init(unsigned short spi) {
 8001e3c:	b508      	push	{r3, lr}
    if(spi == 1) {
 8001e3e:	2801      	cmp	r0, #1
 8001e40:	d002      	beq.n	8001e48 <SPI_Init+0xc>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1

        Write_GPIO(PA, 4, HIGH);

        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    } else if(spi == 2) {
 8001e42:	2802      	cmp	r0, #2
 8001e44:	d026      	beq.n	8001e94 <SPI_Init+0x58>
        Write_GPIO(PA, 8, HIGH);
        Write_GPIO(PB, 12, HIGH);

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}
 8001e46:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001e48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <SPI_Init+0xbc>)
 8001e4a:	6993      	ldr	r3, [r2, #24]
 8001e4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e50:	6193      	str	r3, [r2, #24]
        Init_GPIO(PA, 4, OUT50, O_GP_PP); // CS
 8001e52:	2300      	movs	r3, #0
 8001e54:	2203      	movs	r2, #3
 8001e56:	2104      	movs	r1, #4
 8001e58:	f7ff ff86 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PA, 5, OUT50, O_AF_PP); // CLK
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	2203      	movs	r2, #3
 8001e60:	2105      	movs	r1, #5
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7ff ff80 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PA, 6, IN, I_PP);    // MISO SPI1
 8001e68:	2302      	movs	r3, #2
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2106      	movs	r1, #6
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7ff ff7a 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1
 8001e74:	2302      	movs	r3, #2
 8001e76:	2203      	movs	r2, #3
 8001e78:	2107      	movs	r1, #7
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff ff74 	bl	8001d68 <Init_GPIO>
        Write_GPIO(PA, 4, HIGH);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2104      	movs	r1, #4
 8001e84:	4610      	mov	r0, r2
 8001e86:	f7ff ffb9 	bl	8001dfc <Write_GPIO>
        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <SPI_Init+0xc0>)
 8001e8c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e7d8      	b.n	8001e46 <SPI_Init+0xa>
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001e94:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <SPI_Init+0xbc>)
 8001e96:	69d3      	ldr	r3, [r2, #28]
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e9c:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 8, OUT50, O_GP_PP); // CS (optionnel)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	2108      	movs	r1, #8
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff ff5f 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PB, 12, OUT50, O_GP_PP); // CS
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2203      	movs	r2, #3
 8001eae:	210c      	movs	r1, #12
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7ff ff59 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PB, 13, OUT50, O_AF_PP); // CLK
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	2203      	movs	r2, #3
 8001eba:	210d      	movs	r1, #13
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff53 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	210e      	movs	r1, #14
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff4d 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2
 8001ece:	2302      	movs	r3, #2
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff47 	bl	8001d68 <Init_GPIO>
        Write_GPIO(PA, 8, HIGH);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2108      	movs	r1, #8
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f7ff ff8c 	bl	8001dfc <Write_GPIO>
        Write_GPIO(PB, 12, HIGH);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	210c      	movs	r1, #12
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7ff ff87 	bl	8001dfc <Write_GPIO>
        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <SPI_Init+0xc4>)
 8001ef0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8001ef4:	601a      	str	r2, [r3, #0]
}
 8001ef6:	e7a6      	b.n	8001e46 <SPI_Init+0xa>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40013000 	.word	0x40013000
 8001f00:	40003800 	.word	0x40003800

08001f04 <SPI2_TX>:

    uint8_t temp = SPI1->DR;
    temp = SPI1->SR;
}

void SPI2_TX(uint8_t *data, int size) {
 8001f04:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 8001f06:	2200      	movs	r2, #0
 8001f08:	e008      	b.n	8001f1c <SPI2_TX+0x18>
        while (!(SPI2->SR & SPI_SR_TXE)) {}
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <SPI2_TX+0x38>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f013 0f02 	tst.w	r3, #2
 8001f12:	d0fa      	beq.n	8001f0a <SPI2_TX+0x6>
        SPI2->DR = data[i];
 8001f14:	5c81      	ldrb	r1, [r0, r2]
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <SPI2_TX+0x38>)
 8001f18:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 8001f1a:	3201      	adds	r2, #1
 8001f1c:	4562      	cmp	r2, ip
 8001f1e:	dbf4      	blt.n	8001f0a <SPI2_TX+0x6>
    }

    while (!(SPI2->SR & SPI_SR_TXE)) {}
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <SPI2_TX+0x38>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f013 0f02 	tst.w	r3, #2
 8001f28:	d0fa      	beq.n	8001f20 <SPI2_TX+0x1c>
    while (SPI2->SR & SPI_SR_BSY) {}
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <SPI2_TX+0x38>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f32:	d1fa      	bne.n	8001f2a <SPI2_TX+0x26>

    uint8_t temp = SPI2->DR;
 8001f34:	4b01      	ldr	r3, [pc, #4]	@ (8001f3c <SPI2_TX+0x38>)
 8001f36:	68da      	ldr	r2, [r3, #12]
    temp = SPI2->SR;
 8001f38:	689b      	ldr	r3, [r3, #8]
}
 8001f3a:	4770      	bx	lr
 8001f3c:	40003800 	.word	0x40003800

08001f40 <SPI2_RX>:
    }
}

void SPI2_RX(uint8_t *data, int size) {

    while (size) {
 8001f40:	e011      	b.n	8001f66 <SPI2_RX+0x26>
        while (SPI2->SR & SPI_SR_BSY) {}
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <SPI2_RX+0x2c>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f4a:	d1fa      	bne.n	8001f42 <SPI2_RX+0x2>
        SPI2->DR = 0;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <SPI2_RX+0x2c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
        while (!(SPI2->SR & SPI_SR_RXNE)) {}
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <SPI2_RX+0x2c>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f013 0f01 	tst.w	r3, #1
 8001f5a:	d0fa      	beq.n	8001f52 <SPI2_RX+0x12>
        *data++ = SPI2->DR;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <SPI2_RX+0x2c>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 8001f64:	3901      	subs	r1, #1
    while (size) {
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d1eb      	bne.n	8001f42 <SPI2_RX+0x2>
    }
}
 8001f6a:	4770      	bx	lr
 8001f6c:	40003800 	.word	0x40003800

08001f70 <USART_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/USART_driver.h"
#include "main.h"


void USART_Init(unsigned short usart)
{
 8001f70:	b508      	push	{r3, lr}
    if(usart == 1) {
 8001f72:	2801      	cmp	r0, #1
 8001f74:	d004      	beq.n	8001f80 <USART_Init+0x10>
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART1
        NVIC_EnableIRQ(USART1_IRQn);
    }
    else if(usart == 2) {
 8001f76:	2802      	cmp	r0, #2
 8001f78:	d024      	beq.n	8001fc4 <USART_Init+0x54>
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART2
        NVIC_EnableIRQ(USART2_IRQn);
    }
    else if(usart == 3) {
 8001f7a:	2803      	cmp	r0, #3
 8001f7c:	d044      	beq.n	8002008 <USART_Init+0x98>
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
        // Activation des interruptions globales pour USART3
        NVIC_EnableIRQ(USART3_IRQn);
    }
}
 8001f7e:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001f80:	4a32      	ldr	r2, [pc, #200]	@ (800204c <USART_Init+0xdc>)
 8001f82:	6993      	ldr	r3, [r2, #24]
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f88:	6193      	str	r3, [r2, #24]
        Init_GPIO(PB, 6, OUT50, O_AF_PP); // TX
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	2106      	movs	r1, #6
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fee9 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PB, 7, IN, I_PP); // RX
 8001f96:	2302      	movs	r3, #2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2107      	movs	r1, #7
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fee3 	bl	8001d68 <Init_GPIO>
        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <USART_Init+0xe0>)
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001faa:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	f042 0204 	orr.w	r2, r2, #4
 8001fba:	60da      	str	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <USART_Init+0xe4>)
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	e7dc      	b.n	8001f7e <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001fc4:	4a21      	ldr	r2, [pc, #132]	@ (800204c <USART_Init+0xdc>)
 8001fc6:	69d3      	ldr	r3, [r2, #28]
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 2, OUT50, O_AF_PP); // TX
 8001fce:	2302      	movs	r3, #2
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7ff fec7 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PA, 3, IN, I_PP); // RX
 8001fda:	2302      	movs	r3, #2
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2103      	movs	r1, #3
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff fec1 	bl	8001d68 <Init_GPIO>
        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <USART_Init+0xe8>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fee:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	f042 0204 	orr.w	r2, r2, #4
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <USART_Init+0xe4>)
 8002002:	2240      	movs	r2, #64	@ 0x40
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e7ba      	b.n	8001f7e <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART3EN ;
 8002008:	4a10      	ldr	r2, [pc, #64]	@ (800204c <USART_Init+0xdc>)
 800200a:	69d3      	ldr	r3, [r2, #28]
 800200c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002010:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 10, OUT50, O_AF_PP); // TX
 8002012:	2302      	movs	r3, #2
 8002014:	2203      	movs	r2, #3
 8002016:	210a      	movs	r1, #10
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fea5 	bl	8001d68 <Init_GPIO>
        Init_GPIO(PB, 11, IN, I_PP); // RX
 800201e:	2302      	movs	r3, #2
 8002020:	2200      	movs	r2, #0
 8002022:	210b      	movs	r1, #11
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fe9f 	bl	8001d68 <Init_GPIO>
        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <USART_Init+0xec>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002032:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	f042 0204 	orr.w	r2, r2, #4
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <USART_Init+0xe4>)
 8002046:	2280      	movs	r2, #128	@ 0x80
 8002048:	605a      	str	r2, [r3, #4]
}
 800204a:	e798      	b.n	8001f7e <USART_Init+0xe>
 800204c:	40021000 	.word	0x40021000
 8002050:	40013800 	.word	0x40013800
 8002054:	e000e100 	.word	0xe000e100
 8002058:	40004400 	.word	0x40004400
 800205c:	40004800 	.word	0x40004800

08002060 <USART_TX>:

void USART_TX(unsigned short usart, const uint8_t *data, int size) {
 8002060:	b410      	push	{r4}

    if (usart == 1) {
 8002062:	2801      	cmp	r0, #1
 8002064:	d027      	beq.n	80020b6 <USART_TX+0x56>
        for (int i = 0; i < size; i++) {
            while (!(USART1->SR & USART_SR_TXE));
            USART1->DR = data[i];
            while (!(USART1->SR & USART_SR_TC));
        }
    } else if (usart == 2) {
 8002066:	2802      	cmp	r0, #2
 8002068:	d038      	beq.n	80020dc <USART_TX+0x7c>
        for (int i = 0; i < size; i++) {
            while (!(USART2->SR & USART_SR_TXE));
            USART2->DR = data[i];
            while (!(USART2->SR & USART_SR_TC));
        }
    } else if (usart == 3) {
 800206a:	2803      	cmp	r0, #3
 800206c:	d121      	bne.n	80020b2 <USART_TX+0x52>
        for (int i = 0; i < size; i++) {
 800206e:	2000      	movs	r0, #0
 8002070:	4290      	cmp	r0, r2
 8002072:	da1e      	bge.n	80020b2 <USART_TX+0x52>
            while (!(USART3->SR & USART_SR_TXE));
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <USART_TX+0x80>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800207c:	d0fa      	beq.n	8002074 <USART_TX+0x14>
            USART3->DR = data[i];
 800207e:	5c0c      	ldrb	r4, [r1, r0]
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <USART_TX+0x80>)
 8002082:	605c      	str	r4, [r3, #4]
            while (!(USART3->SR & USART_SR_TC));
 8002084:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <USART_TX+0x80>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800208c:	d0fa      	beq.n	8002084 <USART_TX+0x24>
        for (int i = 0; i < size; i++) {
 800208e:	3001      	adds	r0, #1
 8002090:	e7ee      	b.n	8002070 <USART_TX+0x10>
            while (!(USART1->SR & USART_SR_TXE));
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <USART_TX+0x84>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800209a:	d0fa      	beq.n	8002092 <USART_TX+0x32>
            USART1->DR = data[i];
 800209c:	5c0c      	ldrb	r4, [r1, r0]
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <USART_TX+0x84>)
 80020a0:	605c      	str	r4, [r3, #4]
            while (!(USART1->SR & USART_SR_TC));
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <USART_TX+0x84>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020aa:	d0fa      	beq.n	80020a2 <USART_TX+0x42>
        for (int i = 0; i < size; i++) {
 80020ac:	3001      	adds	r0, #1
 80020ae:	4290      	cmp	r0, r2
 80020b0:	dbef      	blt.n	8002092 <USART_TX+0x32>
        }
    }
}
 80020b2:	bc10      	pop	{r4}
 80020b4:	4770      	bx	lr
        for (int i = 0; i < size; i++) {
 80020b6:	2000      	movs	r0, #0
 80020b8:	e7f9      	b.n	80020ae <USART_TX+0x4e>
            while (!(USART2->SR & USART_SR_TXE));
 80020ba:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <USART_TX+0x88>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80020c2:	d0fa      	beq.n	80020ba <USART_TX+0x5a>
            USART2->DR = data[i];
 80020c4:	5c0c      	ldrb	r4, [r1, r0]
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <USART_TX+0x88>)
 80020c8:	605c      	str	r4, [r3, #4]
            while (!(USART2->SR & USART_SR_TC));
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <USART_TX+0x88>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020d2:	d0fa      	beq.n	80020ca <USART_TX+0x6a>
        for (int i = 0; i < size; i++) {
 80020d4:	3001      	adds	r0, #1
 80020d6:	4290      	cmp	r0, r2
 80020d8:	dbef      	blt.n	80020ba <USART_TX+0x5a>
 80020da:	e7ea      	b.n	80020b2 <USART_TX+0x52>
 80020dc:	2000      	movs	r0, #0
 80020de:	e7fa      	b.n	80020d6 <USART_TX+0x76>
 80020e0:	40004800 	.word	0x40004800
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40004400 	.word	0x40004400

080020ec <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80020ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80020f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80020f4:	f013 0f01 	tst.w	r3, #1
 80020f8:	d011      	beq.n	800211e <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80020fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80020fe:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002102:	f013 0f01 	tst.w	r3, #1
 8002106:	d101      	bne.n	800210c <ITM_SendChar+0x20>
 8002108:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800210a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800210c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f9      	beq.n	800210a <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002116:	b2c3      	uxtb	r3, r0
 8002118:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800211c:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 800211e:	4770      	bx	lr

08002120 <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	460c      	mov	r4, r1
 8002124:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	2500      	movs	r5, #0
 8002128:	e004      	b.n	8002134 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 800212a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800212e:	f7ff ffdd 	bl	80020ec <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	3501      	adds	r5, #1
 8002134:	42b5      	cmp	r5, r6
 8002136:	dbf8      	blt.n	800212a <_write+0xa>
	}
	return len;
}
 8002138:	4630      	mov	r0, r6
 800213a:	bd70      	pop	{r4, r5, r6, pc}

0800213c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800213e:	e7fe      	b.n	800213e <Error_Handler+0x2>

08002140 <MX_USART1_UART_Init>:
{
 8002140:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002142:	480a      	ldr	r0, [pc, #40]	@ (800216c <MX_USART1_UART_Init+0x2c>)
 8002144:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <MX_USART1_UART_Init+0x30>)
 8002146:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002148:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800214c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	2300      	movs	r3, #0
 8002150:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002152:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002154:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002156:	220c      	movs	r2, #12
 8002158:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215e:	f002 fd8b 	bl	8004c78 <HAL_UART_Init>
 8002162:	b900      	cbnz	r0, 8002166 <MX_USART1_UART_Init+0x26>
}
 8002164:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002166:	f7ff ffe9 	bl	800213c <Error_Handler>
 800216a:	bf00      	nop
 800216c:	200002dc 	.word	0x200002dc
 8002170:	40013800 	.word	0x40013800

08002174 <MX_USART2_UART_Init>:
{
 8002174:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002176:	480a      	ldr	r0, [pc, #40]	@ (80021a0 <MX_USART2_UART_Init+0x2c>)
 8002178:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <MX_USART2_UART_Init+0x30>)
 800217a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 800217c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002180:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	2300      	movs	r3, #0
 8002184:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002186:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002188:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800218a:	220c      	movs	r2, #12
 800218c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002192:	f002 fd71 	bl	8004c78 <HAL_UART_Init>
 8002196:	b900      	cbnz	r0, 800219a <MX_USART2_UART_Init+0x26>
}
 8002198:	bd08      	pop	{r3, pc}
    Error_Handler();
 800219a:	f7ff ffcf 	bl	800213c <Error_Handler>
 800219e:	bf00      	nop
 80021a0:	20000294 	.word	0x20000294
 80021a4:	40004400 	.word	0x40004400

080021a8 <MX_USART3_UART_Init>:
{
 80021a8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80021aa:	480a      	ldr	r0, [pc, #40]	@ (80021d4 <MX_USART3_UART_Init+0x2c>)
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <MX_USART3_UART_Init+0x30>)
 80021ae:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 80021b0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80021b4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	2300      	movs	r3, #0
 80021b8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021ba:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021bc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021be:	220c      	movs	r2, #12
 80021c0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021c6:	f002 fd57 	bl	8004c78 <HAL_UART_Init>
 80021ca:	b900      	cbnz	r0, 80021ce <MX_USART3_UART_Init+0x26>
}
 80021cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80021ce:	f7ff ffb5 	bl	800213c <Error_Handler>
 80021d2:	bf00      	nop
 80021d4:	2000024c 	.word	0x2000024c
 80021d8:	40004800 	.word	0x40004800

080021dc <MX_TIM3_Init>:
{
 80021dc:	b500      	push	{lr}
 80021de:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e0:	2300      	movs	r3, #0
 80021e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80021e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80021e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80021e8:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ea:	9308      	str	r3, [sp, #32]
 80021ec:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	9303      	str	r3, [sp, #12]
 80021f4:	9304      	str	r3, [sp, #16]
 80021f6:	9305      	str	r3, [sp, #20]
 80021f8:	9306      	str	r3, [sp, #24]
 80021fa:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80021fc:	481e      	ldr	r0, [pc, #120]	@ (8002278 <MX_TIM3_Init+0x9c>)
 80021fe:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <MX_TIM3_Init+0xa0>)
 8002200:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 8002202:	227f      	movs	r2, #127	@ 0x7f
 8002204:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 8002208:	2214      	movs	r2, #20
 800220a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002210:	f002 f822 	bl	8004258 <HAL_TIM_Base_Init>
 8002214:	bb28      	cbnz	r0, 8002262 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800221a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800221c:	a90a      	add	r1, sp, #40	@ 0x28
 800221e:	4816      	ldr	r0, [pc, #88]	@ (8002278 <MX_TIM3_Init+0x9c>)
 8002220:	f002 f984 	bl	800452c <HAL_TIM_ConfigClockSource>
 8002224:	b9f8      	cbnz	r0, 8002266 <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002226:	4814      	ldr	r0, [pc, #80]	@ (8002278 <MX_TIM3_Init+0x9c>)
 8002228:	f002 f865 	bl	80042f6 <HAL_TIM_PWM_Init>
 800222c:	b9e8      	cbnz	r0, 800226a <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002234:	a908      	add	r1, sp, #32
 8002236:	4810      	ldr	r0, [pc, #64]	@ (8002278 <MX_TIM3_Init+0x9c>)
 8002238:	f002 fcc0 	bl	8004bbc <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	b9b8      	cbnz	r0, 800226e <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223e:	2360      	movs	r3, #96	@ 0x60
 8002240:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002246:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002248:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800224a:	220c      	movs	r2, #12
 800224c:	a901      	add	r1, sp, #4
 800224e:	480a      	ldr	r0, [pc, #40]	@ (8002278 <MX_TIM3_Init+0x9c>)
 8002250:	f002 f8aa 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8002254:	b968      	cbnz	r0, 8002272 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8002256:	4808      	ldr	r0, [pc, #32]	@ (8002278 <MX_TIM3_Init+0x9c>)
 8002258:	f000 f9d8 	bl	800260c <HAL_TIM_MspPostInit>
}
 800225c:	b00f      	add	sp, #60	@ 0x3c
 800225e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002262:	f7ff ff6b 	bl	800213c <Error_Handler>
    Error_Handler();
 8002266:	f7ff ff69 	bl	800213c <Error_Handler>
    Error_Handler();
 800226a:	f7ff ff67 	bl	800213c <Error_Handler>
    Error_Handler();
 800226e:	f7ff ff65 	bl	800213c <Error_Handler>
    Error_Handler();
 8002272:	f7ff ff63 	bl	800213c <Error_Handler>
 8002276:	bf00      	nop
 8002278:	20000324 	.word	0x20000324
 800227c:	40000400 	.word	0x40000400

08002280 <MX_TIM2_Init>:
{
 8002280:	b500      	push	{lr}
 8002282:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002284:	2300      	movs	r3, #0
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	9303      	str	r3, [sp, #12]
 800228a:	9304      	str	r3, [sp, #16]
 800228c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8002292:	4814      	ldr	r0, [pc, #80]	@ (80022e4 <MX_TIM2_Init+0x64>)
 8002294:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002298:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 800229a:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 800229e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80022a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022aa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ac:	f001 ffd4 	bl	8004258 <HAL_TIM_Base_Init>
 80022b0:	b990      	cbnz	r0, 80022d8 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022b8:	a902      	add	r1, sp, #8
 80022ba:	480a      	ldr	r0, [pc, #40]	@ (80022e4 <MX_TIM2_Init+0x64>)
 80022bc:	f002 f936 	bl	800452c <HAL_TIM_ConfigClockSource>
 80022c0:	b960      	cbnz	r0, 80022dc <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022c8:	4669      	mov	r1, sp
 80022ca:	4806      	ldr	r0, [pc, #24]	@ (80022e4 <MX_TIM2_Init+0x64>)
 80022cc:	f002 fc76 	bl	8004bbc <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	b930      	cbnz	r0, 80022e0 <MX_TIM2_Init+0x60>
}
 80022d2:	b007      	add	sp, #28
 80022d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022d8:	f7ff ff30 	bl	800213c <Error_Handler>
    Error_Handler();
 80022dc:	f7ff ff2e 	bl	800213c <Error_Handler>
    Error_Handler();
 80022e0:	f7ff ff2c 	bl	800213c <Error_Handler>
 80022e4:	2000036c 	.word	0x2000036c

080022e8 <MX_ADC1_Init>:
{
 80022e8:	b500      	push	{lr}
 80022ea:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80022f4:	480f      	ldr	r0, [pc, #60]	@ (8002334 <MX_ADC1_Init+0x4c>)
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <MX_ADC1_Init+0x50>)
 80022f8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022fa:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022fc:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022fe:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002300:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002304:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002306:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800230c:	f000 fb80 	bl	8002a10 <HAL_ADC_Init>
 8002310:	b960      	cbnz	r0, 800232c <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 8002312:	2300      	movs	r3, #0
 8002314:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002316:	2201      	movs	r2, #1
 8002318:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800231a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800231c:	a901      	add	r1, sp, #4
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_ADC1_Init+0x4c>)
 8002320:	f000 fc7a 	bl	8002c18 <HAL_ADC_ConfigChannel>
 8002324:	b920      	cbnz	r0, 8002330 <MX_ADC1_Init+0x48>
}
 8002326:	b005      	add	sp, #20
 8002328:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800232c:	f7ff ff06 	bl	800213c <Error_Handler>
    Error_Handler();
 8002330:	f7ff ff04 	bl	800213c <Error_Handler>
 8002334:	200003bc 	.word	0x200003bc
 8002338:	40012400 	.word	0x40012400

0800233c <MX_CRC_Init>:
{
 800233c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800233e:	4804      	ldr	r0, [pc, #16]	@ (8002350 <MX_CRC_Init+0x14>)
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <MX_CRC_Init+0x18>)
 8002342:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002344:	f000 ffb7 	bl	80032b6 <HAL_CRC_Init>
 8002348:	b900      	cbnz	r0, 800234c <MX_CRC_Init+0x10>
}
 800234a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800234c:	f7ff fef6 	bl	800213c <Error_Handler>
 8002350:	200003b4 	.word	0x200003b4
 8002354:	40023000 	.word	0x40023000

08002358 <SystemClock_Config>:
{
 8002358:	b500      	push	{lr}
 800235a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235c:	2228      	movs	r2, #40	@ 0x28
 800235e:	2100      	movs	r1, #0
 8002360:	eb0d 0002 	add.w	r0, sp, r2
 8002364:	f006 fcb4 	bl	8008cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	2300      	movs	r3, #0
 800236a:	9305      	str	r3, [sp, #20]
 800236c:	9306      	str	r3, [sp, #24]
 800236e:	9307      	str	r3, [sp, #28]
 8002370:	9308      	str	r3, [sp, #32]
 8002372:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	9303      	str	r3, [sp, #12]
 800237a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800237c:	2201      	movs	r2, #1
 800237e:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002380:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002384:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002386:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800238a:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800238c:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238e:	2202      	movs	r2, #2
 8002390:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002392:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002394:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002398:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239a:	a80a      	add	r0, sp, #40	@ 0x28
 800239c:	f001 f9de 	bl	800375c <HAL_RCC_OscConfig>
 80023a0:	b9c8      	cbnz	r0, 80023d6 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a2:	230f      	movs	r3, #15
 80023a4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a6:	2102      	movs	r1, #2
 80023a8:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023b2:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023b6:	a805      	add	r0, sp, #20
 80023b8:	f001 fc52 	bl	8003c60 <HAL_RCC_ClockConfig>
 80023bc:	b968      	cbnz	r0, 80023da <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023be:	2302      	movs	r3, #2
 80023c0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80023c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023c6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c8:	a801      	add	r0, sp, #4
 80023ca:	f001 fdd9 	bl	8003f80 <HAL_RCCEx_PeriphCLKConfig>
 80023ce:	b930      	cbnz	r0, 80023de <SystemClock_Config+0x86>
}
 80023d0:	b015      	add	sp, #84	@ 0x54
 80023d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80023d6:	f7ff feb1 	bl	800213c <Error_Handler>
    Error_Handler();
 80023da:	f7ff feaf 	bl	800213c <Error_Handler>
    Error_Handler();
 80023de:	f7ff fead 	bl	800213c <Error_Handler>
	...

080023e4 <main>:
{
 80023e4:	b530      	push	{r4, r5, lr}
 80023e6:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 80023e8:	f000 fa8c 	bl	8002904 <HAL_Init>
  SystemClock_Config();
 80023ec:	f7ff ffb4 	bl	8002358 <SystemClock_Config>
  MX_USART1_UART_Init();
 80023f0:	f7ff fea6 	bl	8002140 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023f4:	f7ff febe 	bl	8002174 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80023f8:	f7ff fed6 	bl	80021a8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80023fc:	f7ff feee 	bl	80021dc <MX_TIM3_Init>
  MX_TIM2_Init();
 8002400:	f7ff ff3e 	bl	8002280 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002404:	f7ff ff70 	bl	80022e8 <MX_ADC1_Init>
  MX_CRC_Init();
 8002408:	f7ff ff98 	bl	800233c <MX_CRC_Init>
  SPI_Init(2);
 800240c:	2002      	movs	r0, #2
 800240e:	f7ff fd15 	bl	8001e3c <SPI_Init>
  USART_Init(1);
 8002412:	2001      	movs	r0, #1
 8002414:	f7ff fdac 	bl	8001f70 <USART_Init>
  USART_Init(2);
 8002418:	2002      	movs	r0, #2
 800241a:	f7ff fda9 	bl	8001f70 <USART_Init>
  WS2812_Init();
 800241e:	f7ff fc77 	bl	8001d10 <WS2812_Init>
  L76LM33_Init();
 8002422:	f7ff fb91 	bl	8001b48 <L76LM33_Init>
  CD74HC4051_Init(&hadc1);
 8002426:	4828      	ldr	r0, [pc, #160]	@ (80024c8 <main+0xe4>)
 8002428:	f7ff f9e3 	bl	80017f2 <CD74HC4051_Init>
  printf(" Starting \n");
 800242c:	4827      	ldr	r0, [pc, #156]	@ (80024cc <main+0xe8>)
 800242e:	f006 fb6f 	bl	8008b10 <puts>
  ICM20602_Init(&icm);
 8002432:	a80e      	add	r0, sp, #56	@ 0x38
 8002434:	f7ff fac8 	bl	80019c8 <ICM20602_Init>
  if (BMP280_Init(&bmp) != 0) {
 8002438:	a805      	add	r0, sp, #20
 800243a:	f7ff f9b7 	bl	80017ac <BMP280_Init>
 800243e:	2800      	cmp	r0, #0
 8002440:	d136      	bne.n	80024b0 <main+0xcc>
  uint8_t data[] = "Hello, SD card!";
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <main+0xec>)
 8002444:	ac01      	add	r4, sp, #4
 8002446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if(MEM2067_Init() == 1) {
 800244c:	f7ff fbb4 	bl	8001bb8 <MEM2067_Init>
 8002450:	2801      	cmp	r0, #1
 8002452:	d031      	beq.n	80024b8 <main+0xd4>
  if(MEM2067_WriteFATFS("test.txt", data, sizeof(data)) == 1) {
 8002454:	2210      	movs	r2, #16
 8002456:	a901      	add	r1, sp, #4
 8002458:	481e      	ldr	r0, [pc, #120]	@ (80024d4 <main+0xf0>)
 800245a:	f7ff fbb9 	bl	8001bd0 <MEM2067_WriteFATFS>
 800245e:	2801      	cmp	r0, #1
 8002460:	d02e      	beq.n	80024c0 <main+0xdc>
	  float temperature = BMP280_ReadTemperature(&bmp);
 8002462:	a805      	add	r0, sp, #20
 8002464:	f7fe ffb4 	bl	80013d0 <BMP280_ReadTemperature>
 8002468:	4605      	mov	r5, r0
	  float pressure = BMP280_ReadPressure(&bmp);
 800246a:	a805      	add	r0, sp, #20
 800246c:	f7fe ffe4 	bl	8001438 <BMP280_ReadPressure>
 8002470:	4604      	mov	r4, r0
	  printf("Temperature: %.4f C\r\n", temperature);
 8002472:	4628      	mov	r0, r5
 8002474:	f7fd ffd8 	bl	8000428 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4816      	ldr	r0, [pc, #88]	@ (80024d8 <main+0xf4>)
 800247e:	f006 fadf 	bl	8008a40 <iprintf>
	  printf("Pressure: %.4f Pa\r\n", pressure);
 8002482:	4620      	mov	r0, r4
 8002484:	f7fd ffd0 	bl	8000428 <__aeabi_f2d>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4813      	ldr	r0, [pc, #76]	@ (80024dc <main+0xf8>)
 800248e:	f006 fad7 	bl	8008a40 <iprintf>
	  printf("Altitude: %.4f m\r\n", BMP280_PressureToAltitude(pressure));
 8002492:	4620      	mov	r0, r4
 8002494:	f7fe ff54 	bl	8001340 <BMP280_PressureToAltitude>
 8002498:	f7fd ffc6 	bl	8000428 <__aeabi_f2d>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	480f      	ldr	r0, [pc, #60]	@ (80024e0 <main+0xfc>)
 80024a2:	f006 facd 	bl	8008a40 <iprintf>
	  HAL_Delay(1000);
 80024a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024aa:	f000 fa8d 	bl	80029c8 <HAL_Delay>
  while (1)
 80024ae:	e7d8      	b.n	8002462 <main+0x7e>
	  printf("Il y a une erreur");
 80024b0:	480c      	ldr	r0, [pc, #48]	@ (80024e4 <main+0x100>)
 80024b2:	f006 fac5 	bl	8008a40 <iprintf>
 80024b6:	e7c4      	b.n	8002442 <main+0x5e>
	  printf("erreur init");
 80024b8:	480b      	ldr	r0, [pc, #44]	@ (80024e8 <main+0x104>)
 80024ba:	f006 fac1 	bl	8008a40 <iprintf>
 80024be:	e7c9      	b.n	8002454 <main+0x70>
  	  printf("erreur write");
 80024c0:	480a      	ldr	r0, [pc, #40]	@ (80024ec <main+0x108>)
 80024c2:	f006 fabd 	bl	8008a40 <iprintf>
 80024c6:	e7cc      	b.n	8002462 <main+0x7e>
 80024c8:	200003bc 	.word	0x200003bc
 80024cc:	0800b8dc 	.word	0x0800b8dc
 80024d0:	0800b964 	.word	0x0800b964
 80024d4:	0800b908 	.word	0x0800b908
 80024d8:	0800b924 	.word	0x0800b924
 80024dc:	0800b93c 	.word	0x0800b93c
 80024e0:	0800b950 	.word	0x0800b950
 80024e4:	0800b8e8 	.word	0x0800b8e8
 80024e8:	0800b8fc 	.word	0x0800b8fc
 80024ec:	0800b914 	.word	0x0800b914

080024f0 <HAL_MspInit>:
 80024f0:	b082      	sub	sp, #8
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <HAL_MspInit+0x3c>)
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	619a      	str	r2, [r3, #24]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	f002 0201 	and.w	r2, r2, #1
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	9a00      	ldr	r2, [sp, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800250c:	61da      	str	r2, [r3, #28]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <HAL_MspInit+0x40>)
 800251a:	6853      	ldr	r3, [r2, #4]
 800251c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002520:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002524:	6053      	str	r3, [r2, #4]
 8002526:	b002      	add	sp, #8
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40010000 	.word	0x40010000

08002534 <HAL_ADC_MspInit>:
 8002534:	b500      	push	{lr}
 8002536:	b087      	sub	sp, #28
 8002538:	2300      	movs	r3, #0
 800253a:	9302      	str	r3, [sp, #8]
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	9304      	str	r3, [sp, #16]
 8002540:	9305      	str	r3, [sp, #20]
 8002542:	6802      	ldr	r2, [r0, #0]
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_ADC_MspInit+0x58>)
 8002546:	429a      	cmp	r2, r3
 8002548:	d002      	beq.n	8002550 <HAL_ADC_MspInit+0x1c>
 800254a:	b007      	add	sp, #28
 800254c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002550:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255a:	619a      	str	r2, [r3, #24]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002562:	9200      	str	r2, [sp, #0]
 8002564:	9a00      	ldr	r2, [sp, #0]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	f042 0204 	orr.w	r2, r2, #4
 800256c:	619a      	str	r2, [r3, #24]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	2301      	movs	r3, #1
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	2303      	movs	r3, #3
 800257e:	9303      	str	r3, [sp, #12]
 8002580:	a902      	add	r1, sp, #8
 8002582:	4803      	ldr	r0, [pc, #12]	@ (8002590 <HAL_ADC_MspInit+0x5c>)
 8002584:	f000 ff66 	bl	8003454 <HAL_GPIO_Init>
 8002588:	e7df      	b.n	800254a <HAL_ADC_MspInit+0x16>
 800258a:	bf00      	nop
 800258c:	40012400 	.word	0x40012400
 8002590:	40010800 	.word	0x40010800

08002594 <HAL_CRC_MspInit>:
 8002594:	6802      	ldr	r2, [r0, #0]
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_CRC_MspInit+0x28>)
 8002598:	429a      	cmp	r2, r3
 800259a:	d000      	beq.n	800259e <HAL_CRC_MspInit+0xa>
 800259c:	4770      	bx	lr
 800259e:	b082      	sub	sp, #8
 80025a0:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	b002      	add	sp, #8
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40023000 	.word	0x40023000

080025c0 <HAL_TIM_Base_MspInit>:
 80025c0:	b082      	sub	sp, #8
 80025c2:	6803      	ldr	r3, [r0, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c8:	d004      	beq.n	80025d4 <HAL_TIM_Base_MspInit+0x14>
 80025ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002604 <HAL_TIM_Base_MspInit+0x44>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00d      	beq.n	80025ec <HAL_TIM_Base_MspInit+0x2c>
 80025d0:	b002      	add	sp, #8
 80025d2:	4770      	bx	lr
 80025d4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	61da      	str	r2, [r3, #28]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	9b00      	ldr	r3, [sp, #0]
 80025ea:	e7f1      	b.n	80025d0 <HAL_TIM_Base_MspInit+0x10>
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_TIM_Base_MspInit+0x48>)
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	f042 0202 	orr.w	r2, r2, #2
 80025f4:	61da      	str	r2, [r3, #28]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	e7e6      	b.n	80025d0 <HAL_TIM_Base_MspInit+0x10>
 8002602:	bf00      	nop
 8002604:	40000400 	.word	0x40000400
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_TIM_MspPostInit>:
 800260c:	b500      	push	{lr}
 800260e:	b087      	sub	sp, #28
 8002610:	2300      	movs	r3, #0
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	9303      	str	r3, [sp, #12]
 8002616:	9304      	str	r3, [sp, #16]
 8002618:	9305      	str	r3, [sp, #20]
 800261a:	6802      	ldr	r2, [r0, #0]
 800261c:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <HAL_TIM_MspPostInit+0x44>)
 800261e:	429a      	cmp	r2, r3
 8002620:	d002      	beq.n	8002628 <HAL_TIM_MspPostInit+0x1c>
 8002622:	b007      	add	sp, #28
 8002624:	f85d fb04 	ldr.w	pc, [sp], #4
 8002628:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	619a      	str	r2, [r3, #24]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	9b01      	ldr	r3, [sp, #4]
 800263e:	2302      	movs	r3, #2
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	9303      	str	r3, [sp, #12]
 8002644:	9305      	str	r3, [sp, #20]
 8002646:	a902      	add	r1, sp, #8
 8002648:	4802      	ldr	r0, [pc, #8]	@ (8002654 <HAL_TIM_MspPostInit+0x48>)
 800264a:	f000 ff03 	bl	8003454 <HAL_GPIO_Init>
 800264e:	e7e8      	b.n	8002622 <HAL_TIM_MspPostInit+0x16>
 8002650:	40000400 	.word	0x40000400
 8002654:	40010c00 	.word	0x40010c00

08002658 <HAL_UART_MspInit>:
 8002658:	b530      	push	{r4, r5, lr}
 800265a:	b08b      	sub	sp, #44	@ 0x2c
 800265c:	2300      	movs	r3, #0
 800265e:	9306      	str	r3, [sp, #24]
 8002660:	9307      	str	r3, [sp, #28]
 8002662:	9308      	str	r3, [sp, #32]
 8002664:	9309      	str	r3, [sp, #36]	@ 0x24
 8002666:	6803      	ldr	r3, [r0, #0]
 8002668:	4a51      	ldr	r2, [pc, #324]	@ (80027b0 <HAL_UART_MspInit+0x158>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <HAL_UART_MspInit+0x26>
 800266e:	4a51      	ldr	r2, [pc, #324]	@ (80027b4 <HAL_UART_MspInit+0x15c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d03b      	beq.n	80026ec <HAL_UART_MspInit+0x94>
 8002674:	4a50      	ldr	r2, [pc, #320]	@ (80027b8 <HAL_UART_MspInit+0x160>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d068      	beq.n	800274c <HAL_UART_MspInit+0xf4>
 800267a:	b00b      	add	sp, #44	@ 0x2c
 800267c:	bd30      	pop	{r4, r5, pc}
 800267e:	4b4f      	ldr	r3, [pc, #316]	@ (80027bc <HAL_UART_MspInit+0x164>)
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002686:	619a      	str	r2, [r3, #24]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800268e:	9200      	str	r2, [sp, #0]
 8002690:	9a00      	ldr	r2, [sp, #0]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	f042 0208 	orr.w	r2, r2, #8
 8002698:	619a      	str	r2, [r3, #24]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	9b01      	ldr	r3, [sp, #4]
 80026a4:	2340      	movs	r3, #64	@ 0x40
 80026a6:	9306      	str	r3, [sp, #24]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9307      	str	r3, [sp, #28]
 80026ac:	2303      	movs	r3, #3
 80026ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80026b0:	4d43      	ldr	r5, [pc, #268]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 80026b2:	a906      	add	r1, sp, #24
 80026b4:	4628      	mov	r0, r5
 80026b6:	f000 fecd 	bl	8003454 <HAL_GPIO_Init>
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	9306      	str	r3, [sp, #24]
 80026be:	2400      	movs	r4, #0
 80026c0:	9407      	str	r4, [sp, #28]
 80026c2:	9408      	str	r4, [sp, #32]
 80026c4:	a906      	add	r1, sp, #24
 80026c6:	4628      	mov	r0, r5
 80026c8:	f000 fec4 	bl	8003454 <HAL_GPIO_Init>
 80026cc:	4a3d      	ldr	r2, [pc, #244]	@ (80027c4 <HAL_UART_MspInit+0x16c>)
 80026ce:	6853      	ldr	r3, [r2, #4]
 80026d0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6053      	str	r3, [r2, #4]
 80026da:	4622      	mov	r2, r4
 80026dc:	4621      	mov	r1, r4
 80026de:	2025      	movs	r0, #37	@ 0x25
 80026e0:	f000 fdb3 	bl	800324a <HAL_NVIC_SetPriority>
 80026e4:	2025      	movs	r0, #37	@ 0x25
 80026e6:	f000 fdcc 	bl	8003282 <HAL_NVIC_EnableIRQ>
 80026ea:	e7c6      	b.n	800267a <HAL_UART_MspInit+0x22>
 80026ec:	4b33      	ldr	r3, [pc, #204]	@ (80027bc <HAL_UART_MspInit+0x164>)
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80026f4:	61da      	str	r2, [r3, #28]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80026fc:	9202      	str	r2, [sp, #8]
 80026fe:	9a02      	ldr	r2, [sp, #8]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	f042 0204 	orr.w	r2, r2, #4
 8002706:	619a      	str	r2, [r3, #24]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	9303      	str	r3, [sp, #12]
 8002710:	9b03      	ldr	r3, [sp, #12]
 8002712:	2304      	movs	r3, #4
 8002714:	9306      	str	r3, [sp, #24]
 8002716:	2302      	movs	r3, #2
 8002718:	9307      	str	r3, [sp, #28]
 800271a:	2303      	movs	r3, #3
 800271c:	9309      	str	r3, [sp, #36]	@ 0x24
 800271e:	4d2a      	ldr	r5, [pc, #168]	@ (80027c8 <HAL_UART_MspInit+0x170>)
 8002720:	a906      	add	r1, sp, #24
 8002722:	4628      	mov	r0, r5
 8002724:	f000 fe96 	bl	8003454 <HAL_GPIO_Init>
 8002728:	2308      	movs	r3, #8
 800272a:	9306      	str	r3, [sp, #24]
 800272c:	2400      	movs	r4, #0
 800272e:	9407      	str	r4, [sp, #28]
 8002730:	9408      	str	r4, [sp, #32]
 8002732:	a906      	add	r1, sp, #24
 8002734:	4628      	mov	r0, r5
 8002736:	f000 fe8d 	bl	8003454 <HAL_GPIO_Init>
 800273a:	4622      	mov	r2, r4
 800273c:	4621      	mov	r1, r4
 800273e:	2026      	movs	r0, #38	@ 0x26
 8002740:	f000 fd83 	bl	800324a <HAL_NVIC_SetPriority>
 8002744:	2026      	movs	r0, #38	@ 0x26
 8002746:	f000 fd9c 	bl	8003282 <HAL_NVIC_EnableIRQ>
 800274a:	e796      	b.n	800267a <HAL_UART_MspInit+0x22>
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <HAL_UART_MspInit+0x164>)
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002754:	61da      	str	r2, [r3, #28]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800275c:	9204      	str	r2, [sp, #16]
 800275e:	9a04      	ldr	r2, [sp, #16]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	f042 0208 	orr.w	r2, r2, #8
 8002766:	619a      	str	r2, [r3, #24]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	9305      	str	r3, [sp, #20]
 8002770:	9b05      	ldr	r3, [sp, #20]
 8002772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002776:	9306      	str	r3, [sp, #24]
 8002778:	2302      	movs	r3, #2
 800277a:	9307      	str	r3, [sp, #28]
 800277c:	2303      	movs	r3, #3
 800277e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002780:	4d0f      	ldr	r5, [pc, #60]	@ (80027c0 <HAL_UART_MspInit+0x168>)
 8002782:	a906      	add	r1, sp, #24
 8002784:	4628      	mov	r0, r5
 8002786:	f000 fe65 	bl	8003454 <HAL_GPIO_Init>
 800278a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800278e:	9306      	str	r3, [sp, #24]
 8002790:	2400      	movs	r4, #0
 8002792:	9407      	str	r4, [sp, #28]
 8002794:	9408      	str	r4, [sp, #32]
 8002796:	a906      	add	r1, sp, #24
 8002798:	4628      	mov	r0, r5
 800279a:	f000 fe5b 	bl	8003454 <HAL_GPIO_Init>
 800279e:	4622      	mov	r2, r4
 80027a0:	4621      	mov	r1, r4
 80027a2:	2027      	movs	r0, #39	@ 0x27
 80027a4:	f000 fd51 	bl	800324a <HAL_NVIC_SetPriority>
 80027a8:	2027      	movs	r0, #39	@ 0x27
 80027aa:	f000 fd6a 	bl	8003282 <HAL_NVIC_EnableIRQ>
 80027ae:	e764      	b.n	800267a <HAL_UART_MspInit+0x22>
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40004400 	.word	0x40004400
 80027b8:	40004800 	.word	0x40004800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010c00 	.word	0x40010c00
 80027c4:	40010000 	.word	0x40010000
 80027c8:	40010800 	.word	0x40010800

080027cc <NMI_Handler>:
 80027cc:	e7fe      	b.n	80027cc <NMI_Handler>

080027ce <HardFault_Handler>:
 80027ce:	e7fe      	b.n	80027ce <HardFault_Handler>

080027d0 <MemManage_Handler>:
 80027d0:	e7fe      	b.n	80027d0 <MemManage_Handler>

080027d2 <BusFault_Handler>:
 80027d2:	e7fe      	b.n	80027d2 <BusFault_Handler>

080027d4 <UsageFault_Handler>:
 80027d4:	e7fe      	b.n	80027d4 <UsageFault_Handler>

080027d6 <SVC_Handler>:
 80027d6:	4770      	bx	lr

080027d8 <DebugMon_Handler>:
 80027d8:	4770      	bx	lr

080027da <PendSV_Handler>:
 80027da:	4770      	bx	lr

080027dc <SysTick_Handler>:
 80027dc:	b508      	push	{r3, lr}
 80027de:	f000 f8d7 	bl	8002990 <HAL_IncTick>
 80027e2:	bd08      	pop	{r3, pc}

080027e4 <USART1_IRQHandler>:
 80027e4:	b508      	push	{r3, lr}
 80027e6:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <USART1_IRQHandler+0xc>)
 80027e8:	f002 fa96 	bl	8004d18 <HAL_UART_IRQHandler>
 80027ec:	bd08      	pop	{r3, pc}
 80027ee:	bf00      	nop
 80027f0:	200002dc 	.word	0x200002dc

080027f4 <USART2_IRQHandler>:
 80027f4:	b508      	push	{r3, lr}
 80027f6:	4802      	ldr	r0, [pc, #8]	@ (8002800 <USART2_IRQHandler+0xc>)
 80027f8:	f002 fa8e 	bl	8004d18 <HAL_UART_IRQHandler>
 80027fc:	bd08      	pop	{r3, pc}
 80027fe:	bf00      	nop
 8002800:	20000294 	.word	0x20000294

08002804 <USART3_IRQHandler>:
 8002804:	b508      	push	{r3, lr}
 8002806:	4802      	ldr	r0, [pc, #8]	@ (8002810 <USART3_IRQHandler+0xc>)
 8002808:	f002 fa86 	bl	8004d18 <HAL_UART_IRQHandler>
 800280c:	bd08      	pop	{r3, pc}
 800280e:	bf00      	nop
 8002810:	2000024c 	.word	0x2000024c

08002814 <_getpid>:
 8002814:	2001      	movs	r0, #1
 8002816:	4770      	bx	lr

08002818 <_kill>:
 8002818:	b508      	push	{r3, lr}
 800281a:	f006 fabb 	bl	8008d94 <__errno>
 800281e:	2316      	movs	r3, #22
 8002820:	6003      	str	r3, [r0, #0]
 8002822:	f04f 30ff 	mov.w	r0, #4294967295
 8002826:	bd08      	pop	{r3, pc}

08002828 <_exit>:
 8002828:	b508      	push	{r3, lr}
 800282a:	f04f 31ff 	mov.w	r1, #4294967295
 800282e:	f7ff fff3 	bl	8002818 <_kill>
 8002832:	e7fe      	b.n	8002832 <_exit+0xa>

08002834 <_read>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	460c      	mov	r4, r1
 8002838:	4616      	mov	r6, r2
 800283a:	2500      	movs	r5, #0
 800283c:	e006      	b.n	800284c <_read+0x18>
 800283e:	f3af 8000 	nop.w
 8002842:	4621      	mov	r1, r4
 8002844:	f801 0b01 	strb.w	r0, [r1], #1
 8002848:	3501      	adds	r5, #1
 800284a:	460c      	mov	r4, r1
 800284c:	42b5      	cmp	r5, r6
 800284e:	dbf6      	blt.n	800283e <_read+0xa>
 8002850:	4630      	mov	r0, r6
 8002852:	bd70      	pop	{r4, r5, r6, pc}

08002854 <_close>:
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	4770      	bx	lr

0800285a <_fstat>:
 800285a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	2000      	movs	r0, #0
 8002862:	4770      	bx	lr

08002864 <_isatty>:
 8002864:	2001      	movs	r0, #1
 8002866:	4770      	bx	lr

08002868 <_lseek>:
 8002868:	2000      	movs	r0, #0
 800286a:	4770      	bx	lr

0800286c <_sbrk>:
 800286c:	b510      	push	{r4, lr}
 800286e:	4603      	mov	r3, r0
 8002870:	4a0c      	ldr	r2, [pc, #48]	@ (80028a4 <_sbrk+0x38>)
 8002872:	490d      	ldr	r1, [pc, #52]	@ (80028a8 <_sbrk+0x3c>)
 8002874:	480d      	ldr	r0, [pc, #52]	@ (80028ac <_sbrk+0x40>)
 8002876:	6800      	ldr	r0, [r0, #0]
 8002878:	b140      	cbz	r0, 800288c <_sbrk+0x20>
 800287a:	480c      	ldr	r0, [pc, #48]	@ (80028ac <_sbrk+0x40>)
 800287c:	6800      	ldr	r0, [r0, #0]
 800287e:	4403      	add	r3, r0
 8002880:	1a52      	subs	r2, r2, r1
 8002882:	4293      	cmp	r3, r2
 8002884:	d806      	bhi.n	8002894 <_sbrk+0x28>
 8002886:	4a09      	ldr	r2, [pc, #36]	@ (80028ac <_sbrk+0x40>)
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	bd10      	pop	{r4, pc}
 800288c:	4807      	ldr	r0, [pc, #28]	@ (80028ac <_sbrk+0x40>)
 800288e:	4c08      	ldr	r4, [pc, #32]	@ (80028b0 <_sbrk+0x44>)
 8002890:	6004      	str	r4, [r0, #0]
 8002892:	e7f2      	b.n	800287a <_sbrk+0xe>
 8002894:	f006 fa7e 	bl	8008d94 <__errno>
 8002898:	230c      	movs	r3, #12
 800289a:	6003      	str	r3, [r0, #0]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	e7f3      	b.n	800288a <_sbrk+0x1e>
 80028a2:	bf00      	nop
 80028a4:	20005000 	.word	0x20005000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	200003ec 	.word	0x200003ec
 80028b0:	20000570 	.word	0x20000570

080028b4 <SystemInit>:
 80028b4:	4770      	bx	lr
	...

080028b8 <Reset_Handler>:
 80028b8:	f7ff fffc 	bl	80028b4 <SystemInit>
 80028bc:	480b      	ldr	r0, [pc, #44]	@ (80028ec <LoopFillZerobss+0xe>)
 80028be:	490c      	ldr	r1, [pc, #48]	@ (80028f0 <LoopFillZerobss+0x12>)
 80028c0:	4a0c      	ldr	r2, [pc, #48]	@ (80028f4 <LoopFillZerobss+0x16>)
 80028c2:	2300      	movs	r3, #0
 80028c4:	e002      	b.n	80028cc <LoopCopyDataInit>

080028c6 <CopyDataInit>:
 80028c6:	58d4      	ldr	r4, [r2, r3]
 80028c8:	50c4      	str	r4, [r0, r3]
 80028ca:	3304      	adds	r3, #4

080028cc <LoopCopyDataInit>:
 80028cc:	18c4      	adds	r4, r0, r3
 80028ce:	428c      	cmp	r4, r1
 80028d0:	d3f9      	bcc.n	80028c6 <CopyDataInit>
 80028d2:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <LoopFillZerobss+0x1a>)
 80028d4:	4c09      	ldr	r4, [pc, #36]	@ (80028fc <LoopFillZerobss+0x1e>)
 80028d6:	2300      	movs	r3, #0
 80028d8:	e001      	b.n	80028de <LoopFillZerobss>

080028da <FillZerobss>:
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	3204      	adds	r2, #4

080028de <LoopFillZerobss>:
 80028de:	42a2      	cmp	r2, r4
 80028e0:	d3fb      	bcc.n	80028da <FillZerobss>
 80028e2:	f006 fa5d 	bl	8008da0 <__libc_init_array>
 80028e6:	f7ff fd7d 	bl	80023e4 <main>
 80028ea:	4770      	bx	lr
 80028ec:	20000000 	.word	0x20000000
 80028f0:	200001e8 	.word	0x200001e8
 80028f4:	0800bde8 	.word	0x0800bde8
 80028f8:	200001e8 	.word	0x200001e8
 80028fc:	2000056c 	.word	0x2000056c

08002900 <ADC1_2_IRQHandler>:
 8002900:	e7fe      	b.n	8002900 <ADC1_2_IRQHandler>
	...

08002904 <HAL_Init>:
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
 8002908:	4b08      	ldr	r3, [pc, #32]	@ (800292c <HAL_Init+0x28>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a07      	ldr	r2, [pc, #28]	@ (800292c <HAL_Init+0x28>)
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	2003      	movs	r0, #3
 8002916:	f000 fc8d 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>
 800291a:	200f      	movs	r0, #15
 800291c:	f000 f808 	bl	8002930 <HAL_InitTick>
 8002920:	f7ff fde6 	bl	80024f0 <HAL_MspInit>
 8002924:	2300      	movs	r3, #0
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40022000 	.word	0x40022000

08002930 <HAL_InitTick>:
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_InitTick+0x54>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_InitTick+0x58>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fca5 	bl	800329e <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_InitTick+0x2e>
 800295a:	2301      	movs	r3, #1
 800295c:	e00e      	b.n	800297c <HAL_InitTick+0x4c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d80a      	bhi.n	800297a <HAL_InitTick+0x4a>
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f000 fc6d 	bl	800324a <HAL_NVIC_SetPriority>
 8002970:	4a06      	ldr	r2, [pc, #24]	@ (800298c <HAL_InitTick+0x5c>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_InitTick+0x4c>
 800297a:	2301      	movs	r3, #1
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000000 	.word	0x20000000
 8002988:	20000008 	.word	0x20000008
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_IncTick>:
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_IncTick+0x1c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_IncTick+0x20>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a03      	ldr	r2, [pc, #12]	@ (80029b0 <HAL_IncTick+0x20>)
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	20000008 	.word	0x20000008
 80029b0:	200003f0 	.word	0x200003f0

080029b4 <HAL_GetTick>:
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4b02      	ldr	r3, [pc, #8]	@ (80029c4 <HAL_GetTick+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	200003f0 	.word	0x200003f0

080029c8 <HAL_Delay>:
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	f7ff fff0 	bl	80029b4 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d005      	beq.n	80029ee <HAL_Delay+0x26>
 80029e2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <HAL_Delay+0x44>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	bf00      	nop
 80029f0:	f7ff ffe0 	bl	80029b4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d8f7      	bhi.n	80029f0 <HAL_Delay+0x28>
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000008 	.word	0x20000008

08002a10 <HAL_ADC_Init>:
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	75fb      	strb	r3, [r7, #23]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Init+0x22>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0be      	b.n	8002bb0 <HAL_ADC_Init+0x1a0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_ADC_Init+0x44>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fd70 	bl	8002534 <HAL_ADC_MspInit>
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fa31 	bl	8002ebc <ADC_ConversionStop_Disable>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75fb      	strb	r3, [r7, #23]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8099 	bne.w	8002b9e <HAL_ADC_Init+0x18e>
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 8095 	bne.w	8002b9e <HAL_ADC_Init+0x18e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a7c:	f023 0302 	bic.w	r3, r3, #2
 8002a80:	f043 0202 	orr.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7b1b      	ldrb	r3, [r3, #12]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa8:	d003      	beq.n	8002ab2 <HAL_ADC_Init+0xa2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_ADC_Init+0xa8>
 8002ab2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab6:	e000      	b.n	8002aba <HAL_ADC_Init+0xaa>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7d1b      	ldrb	r3, [r3, #20]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d119      	bne.n	8002afc <HAL_ADC_Init+0xec>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7b1b      	ldrb	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_ADC_Init+0xd4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	035a      	lsls	r2, r3, #13
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e00b      	b.n	8002afc <HAL_ADC_Init+0xec>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <HAL_ADC_Init+0x1a8>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b2c:	d003      	beq.n	8002b36 <HAL_ADC_Init+0x126>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d104      	bne.n	8002b40 <HAL_ADC_Init+0x130>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	051b      	lsls	r3, r3, #20
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_ADC_Init+0x1ac>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10b      	bne.n	8002b7c <HAL_ADC_Init+0x16c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b7a:	e018      	b.n	8002bae <HAL_ADC_Init+0x19e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	f023 0312 	bic.w	r3, r3, #18
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
 8002b9c:	e007      	b.n	8002bae <HAL_ADC_Init+0x19e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	ffe1f7fd 	.word	0xffe1f7fd
 8002bbc:	ff1f0efe 	.word	0xff1f0efe

08002bc0 <HAL_ADC_Stop>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Stop+0x1a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e01a      	b.n	8002c10 <HAL_ADC_Stop+0x50>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f96a 	bl	8002ebc <ADC_ConversionStop_Disable>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_ADC_Stop+0x46>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_ADC_ConfigChannel>:
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x20>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0dc      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1da>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d81c      	bhi.n	8002c82 <HAL_ADC_ConfigChannel+0x6a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	3b05      	subs	r3, #5
 8002c5a:	221f      	movs	r2, #31
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4019      	ands	r1, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	3b05      	subs	r3, #5
 8002c74:	fa00 f203 	lsl.w	r2, r0, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c80:	e03c      	b.n	8002cfc <HAL_ADC_ConfigChannel+0xe4>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d81c      	bhi.n	8002cc4 <HAL_ADC_ConfigChannel+0xac>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b23      	subs	r3, #35	@ 0x23
 8002c9c:	221f      	movs	r2, #31
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4019      	ands	r1, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b23      	subs	r3, #35	@ 0x23
 8002cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc2:	e01b      	b.n	8002cfc <HAL_ADC_ConfigChannel+0xe4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b41      	subs	r3, #65	@ 0x41
 8002cd6:	221f      	movs	r2, #31
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4019      	ands	r1, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b41      	subs	r3, #65	@ 0x41
 8002cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d91c      	bls.n	8002d3e <HAL_ADC_ConfigChannel+0x126>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	2207      	movs	r2, #7
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	4019      	ands	r1, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6898      	ldr	r0, [r3, #8]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b1e      	subs	r3, #30
 8002d30:	fa00 f203 	lsl.w	r2, r0, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]
 8002d3c:	e019      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x15a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6919      	ldr	r1, [r3, #16]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2207      	movs	r2, #7
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4019      	ands	r1, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6898      	ldr	r0, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d003      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x16a>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b11      	cmp	r3, #17
 8002d80:	d132      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x1d0>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <HAL_ADC_ConfigChannel+0x1e4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d125      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x1c0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d126      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x1d0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d11a      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x1d0>
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <HAL_ADC_ConfigChannel+0x1e8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <HAL_ADC_ConfigChannel+0x1ec>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	0c9a      	lsrs	r2, r3, #18
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	e002      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x1b8>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f9      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x1b2>
 8002dd6:	e007      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x1d0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40012400 	.word	0x40012400
 8002e00:	20000000 	.word	0x20000000
 8002e04:	431bde83 	.word	0x431bde83

08002e08 <ADC_Enable>:
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d040      	beq.n	8002ea8 <ADC_Enable+0xa0>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb4 <ADC_Enable+0xac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb8 <ADC_Enable+0xb0>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	0c9b      	lsrs	r3, r3, #18
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	e002      	b.n	8002e4c <ADC_Enable+0x44>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f9      	bne.n	8002e46 <ADC_Enable+0x3e>
 8002e52:	f7ff fdaf 	bl	80029b4 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	e01f      	b.n	8002e9a <ADC_Enable+0x92>
 8002e5a:	f7ff fdab 	bl	80029b4 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d918      	bls.n	8002e9a <ADC_Enable+0x92>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d011      	beq.n	8002e9a <ADC_Enable+0x92>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	f043 0210 	orr.w	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e96:	2301      	movs	r3, #1
 8002e98:	e007      	b.n	8002eaa <ADC_Enable+0xa2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d1d8      	bne.n	8002e5a <ADC_Enable+0x52>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	431bde83 	.word	0x431bde83

08002ebc <ADC_ConversionStop_Disable>:
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d12e      	bne.n	8002f34 <ADC_ConversionStop_Disable+0x78>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	f7ff fd65 	bl	80029b4 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	e01b      	b.n	8002f26 <ADC_ConversionStop_Disable+0x6a>
 8002eee:	f7ff fd61 	bl	80029b4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d914      	bls.n	8002f26 <ADC_ConversionStop_Disable+0x6a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10d      	bne.n	8002f26 <ADC_ConversionStop_Disable+0x6a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f22:	2301      	movs	r3, #1
 8002f24:	e007      	b.n	8002f36 <ADC_ConversionStop_Disable+0x7a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d0dc      	beq.n	8002eee <ADC_ConversionStop_Disable+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_ADCEx_Calibration_Start>:
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_ADCEx_Calibration_Start+0x1e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e097      	b.n	800308e <HAL_ADCEx_Calibration_Start+0x14e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffa8 	bl	8002ebc <ADC_ConversionStop_Disable>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff49 	bl	8002e08 <ADC_Enable>
 8002f76:	4603      	mov	r3, r0
 8002f78:	75fb      	strb	r3, [r7, #23]
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 8081 	bne.w	8003084 <HAL_ADCEx_Calibration_Start+0x144>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f8a:	f023 0302 	bic.w	r3, r3, #2
 8002f8e:	f043 0202 	orr.w	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f96:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <HAL_ADCEx_Calibration_Start+0x158>)
 8002f98:	681c      	ldr	r4, [r3, #0]
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	f001 f8a6 	bl	80040ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e002      	b.n	8002fb2 <HAL_ADCEx_Calibration_Start+0x72>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f9      	bne.n	8002fac <HAL_ADCEx_Calibration_Start+0x6c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	f7ff fcf4 	bl	80029b4 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]
 8002fce:	e01b      	b.n	8003008 <HAL_ADCEx_Calibration_Start+0xc8>
 8002fd0:	f7ff fcf0 	bl	80029b4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b0a      	cmp	r3, #10
 8002fdc:	d914      	bls.n	8003008 <HAL_ADCEx_Calibration_Start+0xc8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <HAL_ADCEx_Calibration_Start+0xc8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	f023 0312 	bic.w	r3, r3, #18
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003004:	2301      	movs	r3, #1
 8003006:	e042      	b.n	800308e <HAL_ADCEx_Calibration_Start+0x14e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1dc      	bne.n	8002fd0 <HAL_ADCEx_Calibration_Start+0x90>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0204 	orr.w	r2, r2, #4
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	f7ff fcc5 	bl	80029b4 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]
 800302c:	e01b      	b.n	8003066 <HAL_ADCEx_Calibration_Start+0x126>
 800302e:	f7ff fcc1 	bl	80029b4 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b0a      	cmp	r3, #10
 800303a:	d914      	bls.n	8003066 <HAL_ADCEx_Calibration_Start+0x126>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_ADCEx_Calibration_Start+0x126>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f023 0312 	bic.w	r3, r3, #18
 8003052:	f043 0210 	orr.w	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	629a      	str	r2, [r3, #40]	@ 0x28
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003062:	2301      	movs	r3, #1
 8003064:	e013      	b.n	800308e <HAL_ADCEx_Calibration_Start+0x14e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1dc      	bne.n	800302e <HAL_ADCEx_Calibration_Start+0xee>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	f023 0303 	bic.w	r3, r3, #3
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	@ 0x28
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	4618      	mov	r0, r3
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000

0800309c <__NVIC_SetPriorityGrouping>:
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	021a      	lsls	r2, r3, #8
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_GetPriorityGrouping>:
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <__NVIC_GetPriorityGrouping+0x18>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_EnableIRQ>:
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db0b      	blt.n	800312a <__NVIC_EnableIRQ+0x2a>
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4906      	ldr	r1, [pc, #24]	@ (8003134 <__NVIC_EnableIRQ+0x34>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2001      	movs	r0, #1
 8003122:	fa00 f202 	lsl.w	r2, r0, r2
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100

08003138 <__NVIC_SetPriority>:
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0a      	blt.n	8003162 <__NVIC_SetPriority+0x2a>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	490c      	ldr	r1, [pc, #48]	@ (8003184 <__NVIC_SetPriority+0x4c>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	440b      	add	r3, r1
 800315c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003160:	e00a      	b.n	8003178 <__NVIC_SetPriority+0x40>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4908      	ldr	r1, [pc, #32]	@ (8003188 <__NVIC_SetPriority+0x50>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	3b04      	subs	r3, #4
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	440b      	add	r3, r1
 8003176:	761a      	strb	r2, [r3, #24]
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <NVIC_EncodePriority>:
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	@ 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	bf28      	it	cs
 80031aa:	2304      	movcs	r3, #4
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <NVIC_EncodePriority+0x30>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b03      	subs	r3, #3
 80031ba:	e000      	b.n	80031be <NVIC_EncodePriority+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	409a      	lsls	r2, r3
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43d9      	mvns	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	400b      	ands	r3, r1
 80031e4:	4313      	orrs	r3, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	@ 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <SysTick_Config>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003200:	d301      	bcc.n	8003206 <SysTick_Config+0x16>
 8003202:	2301      	movs	r3, #1
 8003204:	e00f      	b.n	8003226 <SysTick_Config+0x36>
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <SysTick_Config+0x40>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	6053      	str	r3, [r2, #4]
 800320e:	210f      	movs	r1, #15
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f7ff ff90 	bl	8003138 <__NVIC_SetPriority>
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <SysTick_Config+0x40>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <SysTick_Config+0x40>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriorityGrouping>:
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff2d 	bl	800309c <__NVIC_SetPriorityGrouping>
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_SetPriority>:
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	f7ff ff42 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 8003260:	6178      	str	r0, [r7, #20]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f7ff ff90 	bl	800318c <NVIC_EncodePriority>
 800326c:	4602      	mov	r2, r0
 800326e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff5f 	bl	8003138 <__NVIC_SetPriority>
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_EnableIRQ>:
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	71fb      	strb	r3, [r7, #7]
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff35 	bl	8003100 <__NVIC_EnableIRQ>
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SYSTICK_Config>:
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffa2 	bl	80031f0 <SysTick_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_CRC_Init>:
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_CRC_Init+0x12>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e00e      	b.n	80032e6 <HAL_CRC_Init+0x30>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	795b      	ldrb	r3, [r3, #5]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <HAL_CRC_Init+0x28>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	711a      	strb	r2, [r3, #4]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff f95b 	bl	8002594 <HAL_CRC_MspInit>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	715a      	strb	r2, [r3, #5]
 80032e4:	2300      	movs	r3, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_DMA_Abort>:
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d008      	beq.n	8003318 <HAL_DMA_Abort+0x2a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2204      	movs	r2, #4
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2020 	strb.w	r2, [r3, #32]
 8003314:	2301      	movs	r3, #1
 8003316:	e020      	b.n	800335a <HAL_DMA_Abort+0x6c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020e 	bic.w	r2, r2, #14
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2020 	strb.w	r2, [r3, #32]
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_DMA_Abort_IT>:
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d005      	beq.n	8003388 <HAL_DMA_Abort_IT+0x24>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2204      	movs	r2, #4
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e051      	b.n	800342c <HAL_DMA_Abort_IT+0xc8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 020e 	bic.w	r2, r2, #14
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	@ (8003438 <HAL_DMA_Abort_IT+0xd4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d029      	beq.n	8003406 <HAL_DMA_Abort_IT+0xa2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	@ (800343c <HAL_DMA_Abort_IT+0xd8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_Abort_IT+0x9e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <HAL_DMA_Abort_IT+0xdc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01a      	beq.n	80033fc <HAL_DMA_Abort_IT+0x98>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003444 <HAL_DMA_Abort_IT+0xe0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d012      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x92>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <HAL_DMA_Abort_IT+0xe4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00a      	beq.n	80033f0 <HAL_DMA_Abort_IT+0x8c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	@ (800344c <HAL_DMA_Abort_IT+0xe8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d102      	bne.n	80033ea <HAL_DMA_Abort_IT+0x86>
 80033e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80033e8:	e00e      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ee:	e00b      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033f4:	e008      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033fa:	e005      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003400:	e002      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 8003402:	2310      	movs	r3, #16
 8003404:	e000      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 8003406:	2301      	movs	r3, #1
 8003408:	4a11      	ldr	r2, [pc, #68]	@ (8003450 <HAL_DMA_Abort_IT+0xec>)
 800340a:	6053      	str	r3, [r2, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2020 	strb.w	r2, [r3, #32]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_DMA_Abort_IT+0xc8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40020008 	.word	0x40020008
 800343c:	4002001c 	.word	0x4002001c
 8003440:	40020030 	.word	0x40020030
 8003444:	40020044 	.word	0x40020044
 8003448:	40020058 	.word	0x40020058
 800344c:	4002006c 	.word	0x4002006c
 8003450:	40020000 	.word	0x40020000

08003454 <HAL_GPIO_Init>:
 8003454:	b480      	push	{r7}
 8003456:	b08b      	sub	sp, #44	@ 0x2c
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	e169      	b.n	800373c <HAL_GPIO_Init+0x2e8>
 8003468:	2201      	movs	r2, #1
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	429a      	cmp	r2, r3
 8003482:	f040 8158 	bne.w	8003736 <HAL_GPIO_Init+0x2e2>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a9a      	ldr	r2, [pc, #616]	@ (80036f4 <HAL_GPIO_Init+0x2a0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d05e      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 8003490:	4a98      	ldr	r2, [pc, #608]	@ (80036f4 <HAL_GPIO_Init+0x2a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d875      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 8003496:	4a98      	ldr	r2, [pc, #608]	@ (80036f8 <HAL_GPIO_Init+0x2a4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d058      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 800349c:	4a96      	ldr	r2, [pc, #600]	@ (80036f8 <HAL_GPIO_Init+0x2a4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d86f      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034a2:	4a96      	ldr	r2, [pc, #600]	@ (80036fc <HAL_GPIO_Init+0x2a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d052      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034a8:	4a94      	ldr	r2, [pc, #592]	@ (80036fc <HAL_GPIO_Init+0x2a8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d869      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ae:	4a94      	ldr	r2, [pc, #592]	@ (8003700 <HAL_GPIO_Init+0x2ac>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04c      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034b4:	4a92      	ldr	r2, [pc, #584]	@ (8003700 <HAL_GPIO_Init+0x2ac>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d863      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ba:	4a92      	ldr	r2, [pc, #584]	@ (8003704 <HAL_GPIO_Init+0x2b0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d046      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034c0:	4a90      	ldr	r2, [pc, #576]	@ (8003704 <HAL_GPIO_Init+0x2b0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d85d      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d82a      	bhi.n	8003520 <HAL_GPIO_Init+0xcc>
 80034ca:	2b12      	cmp	r3, #18
 80034cc:	d859      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ce:	a201      	add	r2, pc, #4	@ (adr r2, 80034d4 <HAL_GPIO_Init+0x80>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	0800354f 	.word	0x0800354f
 80034d8:	08003529 	.word	0x08003529
 80034dc:	0800353b 	.word	0x0800353b
 80034e0:	0800357d 	.word	0x0800357d
 80034e4:	08003583 	.word	0x08003583
 80034e8:	08003583 	.word	0x08003583
 80034ec:	08003583 	.word	0x08003583
 80034f0:	08003583 	.word	0x08003583
 80034f4:	08003583 	.word	0x08003583
 80034f8:	08003583 	.word	0x08003583
 80034fc:	08003583 	.word	0x08003583
 8003500:	08003583 	.word	0x08003583
 8003504:	08003583 	.word	0x08003583
 8003508:	08003583 	.word	0x08003583
 800350c:	08003583 	.word	0x08003583
 8003510:	08003583 	.word	0x08003583
 8003514:	08003583 	.word	0x08003583
 8003518:	08003531 	.word	0x08003531
 800351c:	08003545 	.word	0x08003545
 8003520:	4a79      	ldr	r2, [pc, #484]	@ (8003708 <HAL_GPIO_Init+0x2b4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 8003526:	e02c      	b.n	8003582 <HAL_GPIO_Init+0x12e>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	e029      	b.n	8003584 <HAL_GPIO_Init+0x130>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	3304      	adds	r3, #4
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	e024      	b.n	8003584 <HAL_GPIO_Init+0x130>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	3308      	adds	r3, #8
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	e01f      	b.n	8003584 <HAL_GPIO_Init+0x130>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	330c      	adds	r3, #12
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	e01a      	b.n	8003584 <HAL_GPIO_Init+0x130>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <HAL_GPIO_Init+0x108>
 8003556:	2304      	movs	r3, #4
 8003558:	623b      	str	r3, [r7, #32]
 800355a:	e013      	b.n	8003584 <HAL_GPIO_Init+0x130>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <HAL_GPIO_Init+0x11c>
 8003564:	2308      	movs	r3, #8
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	611a      	str	r2, [r3, #16]
 800356e:	e009      	b.n	8003584 <HAL_GPIO_Init+0x130>
 8003570:	2308      	movs	r3, #8
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	615a      	str	r2, [r3, #20]
 800357a:	e003      	b.n	8003584 <HAL_GPIO_Init+0x130>
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	e000      	b.n	8003584 <HAL_GPIO_Init+0x130>
 8003582:	bf00      	nop
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2bff      	cmp	r3, #255	@ 0xff
 8003588:	d801      	bhi.n	800358e <HAL_GPIO_Init+0x13a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	e001      	b.n	8003592 <HAL_GPIO_Init+0x13e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2bff      	cmp	r3, #255	@ 0xff
 8003598:	d802      	bhi.n	80035a0 <HAL_GPIO_Init+0x14c>
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	e002      	b.n	80035a6 <HAL_GPIO_Init+0x152>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	3b08      	subs	r3, #8
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	210f      	movs	r1, #15
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	431a      	orrs	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80b1 	beq.w	8003736 <HAL_GPIO_Init+0x2e2>
 80035d4:	4b4d      	ldr	r3, [pc, #308]	@ (800370c <HAL_GPIO_Init+0x2b8>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <HAL_GPIO_Init+0x2b8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6193      	str	r3, [r2, #24]
 80035e0:	4b4a      	ldr	r3, [pc, #296]	@ (800370c <HAL_GPIO_Init+0x2b8>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4a48      	ldr	r2, [pc, #288]	@ (8003710 <HAL_GPIO_Init+0x2bc>)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	220f      	movs	r2, #15
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a40      	ldr	r2, [pc, #256]	@ (8003714 <HAL_GPIO_Init+0x2c0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d013      	beq.n	8003640 <HAL_GPIO_Init+0x1ec>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3f      	ldr	r2, [pc, #252]	@ (8003718 <HAL_GPIO_Init+0x2c4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00d      	beq.n	800363c <HAL_GPIO_Init+0x1e8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3e      	ldr	r2, [pc, #248]	@ (800371c <HAL_GPIO_Init+0x2c8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d007      	beq.n	8003638 <HAL_GPIO_Init+0x1e4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3d      	ldr	r2, [pc, #244]	@ (8003720 <HAL_GPIO_Init+0x2cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_GPIO_Init+0x1e0>
 8003630:	2303      	movs	r3, #3
 8003632:	e006      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003634:	2304      	movs	r3, #4
 8003636:	e004      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003638:	2302      	movs	r3, #2
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003640:	2300      	movs	r3, #0
 8003642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003644:	f002 0203 	and.w	r2, r2, #3
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	4093      	lsls	r3, r2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	492f      	ldr	r1, [pc, #188]	@ (8003710 <HAL_GPIO_Init+0x2bc>)
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_GPIO_Init+0x226>
 800366c:	4b2d      	ldr	r3, [pc, #180]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	492c      	ldr	r1, [pc, #176]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x234>
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	43db      	mvns	r3, r3
 8003682:	4928      	ldr	r1, [pc, #160]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 8003684:	4013      	ands	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x24e>
 8003694:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4922      	ldr	r1, [pc, #136]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x25c>
 80036a2:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	491e      	ldr	r1, [pc, #120]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d006      	beq.n	80036ca <HAL_GPIO_Init+0x276>
 80036bc:	4b19      	ldr	r3, [pc, #100]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4918      	ldr	r1, [pc, #96]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x284>
 80036ca:	4b16      	ldr	r3, [pc, #88]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4914      	ldr	r1, [pc, #80]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d021      	beq.n	8003728 <HAL_GPIO_Init+0x2d4>
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	490e      	ldr	r1, [pc, #56]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e021      	b.n	8003736 <HAL_GPIO_Init+0x2e2>
 80036f2:	bf00      	nop
 80036f4:	10320000 	.word	0x10320000
 80036f8:	10310000 	.word	0x10310000
 80036fc:	10220000 	.word	0x10220000
 8003700:	10210000 	.word	0x10210000
 8003704:	10120000 	.word	0x10120000
 8003708:	10110000 	.word	0x10110000
 800370c:	40021000 	.word	0x40021000
 8003710:	40010000 	.word	0x40010000
 8003714:	40010800 	.word	0x40010800
 8003718:	40010c00 	.word	0x40010c00
 800371c:	40011000 	.word	0x40011000
 8003720:	40011400 	.word	0x40011400
 8003724:	40010400 	.word	0x40010400
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_GPIO_Init+0x304>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	43db      	mvns	r3, r3
 8003730:	4909      	ldr	r1, [pc, #36]	@ (8003758 <HAL_GPIO_Init+0x304>)
 8003732:	4013      	ands	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	3301      	adds	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	f47f ae8e 	bne.w	8003468 <HAL_GPIO_Init+0x14>
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	372c      	adds	r7, #44	@ 0x2c
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40010400 	.word	0x40010400

0800375c <HAL_RCC_OscConfig>:
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x12>
 800376a:	2301      	movs	r3, #1
 800376c:	e272      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8087 	beq.w	800388a <HAL_RCC_OscConfig+0x12e>
 800377c:	4b92      	ldr	r3, [pc, #584]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b04      	cmp	r3, #4
 8003786:	d00c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x46>
 8003788:	4b8f      	ldr	r3, [pc, #572]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d112      	bne.n	80037ba <HAL_RCC_OscConfig+0x5e>
 8003794:	4b8c      	ldr	r3, [pc, #560]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a0:	d10b      	bne.n	80037ba <HAL_RCC_OscConfig+0x5e>
 80037a2:	4b89      	ldr	r3, [pc, #548]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d06c      	beq.n	8003888 <HAL_RCC_OscConfig+0x12c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d168      	bne.n	8003888 <HAL_RCC_OscConfig+0x12c>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e24c      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x76>
 80037c4:	4b80      	ldr	r3, [pc, #512]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7f      	ldr	r2, [pc, #508]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e02e      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x98>
 80037da:	4b7b      	ldr	r3, [pc, #492]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7a      	ldr	r2, [pc, #488]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b78      	ldr	r3, [pc, #480]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a77      	ldr	r2, [pc, #476]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0xbc>
 80037fe:	4b72      	ldr	r3, [pc, #456]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a71      	ldr	r2, [pc, #452]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b6f      	ldr	r3, [pc, #444]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6e      	ldr	r2, [pc, #440]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 8003818:	4b6b      	ldr	r3, [pc, #428]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a6a      	ldr	r2, [pc, #424]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b68      	ldr	r3, [pc, #416]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a67      	ldr	r2, [pc, #412]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x104>
 8003838:	f7ff f8bc 	bl	80029b4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xf6>
 8003840:	f7ff f8b8 	bl	80029b4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xf6>
 800384e:	2303      	movs	r3, #3
 8003850:	e200      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003852:	4b5d      	ldr	r3, [pc, #372]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xe4>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x12e>
 8003860:	f7ff f8a8 	bl	80029b4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x11e>
 8003868:	f7ff f8a4 	bl	80029b4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	@ 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x11e>
 8003876:	2303      	movs	r3, #3
 8003878:	e1ec      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 800387a:	4b53      	ldr	r3, [pc, #332]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x10c>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x12e>
 8003888:	bf00      	nop
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x202>
 8003896:	4b4c      	ldr	r3, [pc, #304]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x15e>
 80038a2:	4b49      	ldr	r3, [pc, #292]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x18c>
 80038ae:	4b46      	ldr	r3, [pc, #280]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x18c>
 80038ba:	4b43      	ldr	r3, [pc, #268]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x176>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x176>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1c0      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 80038d2:	4b3d      	ldr	r3, [pc, #244]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4939      	ldr	r1, [pc, #228]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x202>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1d6>
 80038f0:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_RCC_OscConfig+0x270>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f7ff f85d 	bl	80029b4 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x1b4>
 80038fe:	f7ff f859 	bl	80029b4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x1b4>
 800390c:	2303      	movs	r3, #3
 800390e:	e1a1      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003910:	4b2d      	ldr	r3, [pc, #180]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x1a2>
 800391c:	4b2a      	ldr	r3, [pc, #168]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4927      	ldr	r1, [pc, #156]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x202>
 8003932:	4b26      	ldr	r3, [pc, #152]	@ (80039cc <HAL_RCC_OscConfig+0x270>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f7ff f83c 	bl	80029b4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1f6>
 8003940:	f7ff f838 	bl	80029b4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1f6>
 800394e:	2303      	movs	r3, #3
 8003950:	e180      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003952:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1e4>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d03a      	beq.n	80039e0 <HAL_RCC_OscConfig+0x284>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d019      	beq.n	80039a6 <HAL_RCC_OscConfig+0x24a>
 8003972:	4b17      	ldr	r3, [pc, #92]	@ (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f7ff f81c 	bl	80029b4 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x236>
 8003980:	f7ff f818 	bl	80029b4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x236>
 800398e:	2303      	movs	r3, #3
 8003990:	e160      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003992:	4b0d      	ldr	r3, [pc, #52]	@ (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x224>
 800399e:	2001      	movs	r0, #1
 80039a0:	f000 fad0 	bl	8003f44 <RCC_Delay>
 80039a4:	e01c      	b.n	80039e0 <HAL_RCC_OscConfig+0x284>
 80039a6:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <HAL_RCC_OscConfig+0x274>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	f7ff f802 	bl	80029b4 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]
 80039b2:	e00f      	b.n	80039d4 <HAL_RCC_OscConfig+0x278>
 80039b4:	f7fe fffe 	bl	80029b4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d908      	bls.n	80039d4 <HAL_RCC_OscConfig+0x278>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e146      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	42420000 	.word	0x42420000
 80039d0:	42420480 	.word	0x42420480
 80039d4:	4b92      	ldr	r3, [pc, #584]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e9      	bne.n	80039b4 <HAL_RCC_OscConfig+0x258>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a6 	beq.w	8003b3a <HAL_RCC_OscConfig+0x3de>
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
 80039f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10d      	bne.n	8003a1a <HAL_RCC_OscConfig+0x2be>
 80039fe:	4b88      	ldr	r3, [pc, #544]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a87      	ldr	r2, [pc, #540]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b85      	ldr	r3, [pc, #532]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
 8003a1a:	4b82      	ldr	r3, [pc, #520]	@ (8003c24 <HAL_RCC_OscConfig+0x4c8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d118      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2fc>
 8003a26:	4b7f      	ldr	r3, [pc, #508]	@ (8003c24 <HAL_RCC_OscConfig+0x4c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c24 <HAL_RCC_OscConfig+0x4c8>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	f7fe ffbf 	bl	80029b4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x2f0>
 8003a3a:	f7fe ffbb 	bl	80029b4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	@ 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x2f0>
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e103      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003a4c:	4b75      	ldr	r3, [pc, #468]	@ (8003c24 <HAL_RCC_OscConfig+0x4c8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x2de>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x312>
 8003a60:	4b6f      	ldr	r3, [pc, #444]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a6e      	ldr	r2, [pc, #440]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	e02d      	b.n	8003aca <HAL_RCC_OscConfig+0x36e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x334>
 8003a76:	4b6a      	ldr	r3, [pc, #424]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a69      	ldr	r2, [pc, #420]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	4b67      	ldr	r3, [pc, #412]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a66      	ldr	r2, [pc, #408]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	6213      	str	r3, [r2, #32]
 8003a8e:	e01c      	b.n	8003aca <HAL_RCC_OscConfig+0x36e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d10c      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x356>
 8003a98:	4b61      	ldr	r3, [pc, #388]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4a60      	ldr	r2, [pc, #384]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	6213      	str	r3, [r2, #32]
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	e00b      	b.n	8003aca <HAL_RCC_OscConfig+0x36e>
 8003ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a5a      	ldr	r2, [pc, #360]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6213      	str	r3, [r2, #32]
 8003abe:	4b58      	ldr	r3, [pc, #352]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a57      	ldr	r2, [pc, #348]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	6213      	str	r3, [r2, #32]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d015      	beq.n	8003afe <HAL_RCC_OscConfig+0x3a2>
 8003ad2:	f7fe ff6f 	bl	80029b4 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x394>
 8003ada:	f7fe ff6b 	bl	80029b4 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x394>
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0b1      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003af0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ee      	beq.n	8003ada <HAL_RCC_OscConfig+0x37e>
 8003afc:	e014      	b.n	8003b28 <HAL_RCC_OscConfig+0x3cc>
 8003afe:	f7fe ff59 	bl	80029b4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
 8003b06:	f7fe ff55 	bl	80029b4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e09b      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003b1c:	4b40      	ldr	r3, [pc, #256]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3aa>
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCC_OscConfig+0x3de>
 8003b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4a3b      	ldr	r2, [pc, #236]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	61d3      	str	r3, [r2, #28]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8087 	beq.w	8003c52 <HAL_RCC_OscConfig+0x4f6>
 8003b44:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d061      	beq.n	8003c14 <HAL_RCC_OscConfig+0x4b8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d146      	bne.n	8003be6 <HAL_RCC_OscConfig+0x48a>
 8003b58:	4b33      	ldr	r3, [pc, #204]	@ (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f7fe ff29 	bl	80029b4 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x41c>
 8003b66:	f7fe ff25 	bl	80029b4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x41c>
 8003b74:	2303      	movs	r3, #3
 8003b76:	e06d      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003b78:	4b29      	ldr	r3, [pc, #164]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x40a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x444>
 8003b8e:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	4921      	ldr	r1, [pc, #132]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a19      	ldr	r1, [r3, #32]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	491b      	ldr	r1, [pc, #108]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	f7fe fef9 	bl	80029b4 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x47c>
 8003bc6:	f7fe fef5 	bl	80029b4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x47c>
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e03d      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x46a>
 8003be4:	e035      	b.n	8003c52 <HAL_RCC_OscConfig+0x4f6>
 8003be6:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <HAL_RCC_OscConfig+0x4cc>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f7fe fee2 	bl	80029b4 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x4aa>
 8003bf4:	f7fe fede 	bl	80029b4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x4aa>
 8003c02:	2303      	movs	r3, #3
 8003c04:	e026      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x498>
 8003c12:	e01e      	b.n	8003c52 <HAL_RCC_OscConfig+0x4f6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x4d0>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e019      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
 8003c28:	42420060 	.word	0x42420060
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_OscConfig+0x500>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x4f2>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x4f6>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_RCC_OscConfig+0x4f8>
 8003c52:	2300      	movs	r3, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000

08003c60 <HAL_RCC_ClockConfig>:
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x14>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0d0      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
 8003c74:	4b6a      	ldr	r3, [pc, #424]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d910      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x44>
 8003c82:	4b67      	ldr	r3, [pc, #412]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0207 	bic.w	r2, r3, #7
 8003c8a:	4965      	ldr	r1, [pc, #404]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
 8003c92:	4b63      	ldr	r3, [pc, #396]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x44>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0b8      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x92>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x68>
 8003cbc:	4b59      	ldr	r3, [pc, #356]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cc6:	6053      	str	r3, [r2, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x80>
 8003cd4:	4b53      	ldr	r3, [pc, #332]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cde:	6053      	str	r3, [r2, #4]
 8003ce0:	4b50      	ldr	r3, [pc, #320]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	494d      	ldr	r1, [pc, #308]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d040      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x120>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xb6>
 8003d06:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d115      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xce>
 8003d1e:	4b41      	ldr	r3, [pc, #260]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e073      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
 8003d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e06b      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
 8003d3e:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4936      	ldr	r1, [pc, #216]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
 8003d50:	f7fe fe30 	bl	80029b4 <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
 8003d58:	f7fe fe2c 	bl	80029b4 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e053      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 020c 	and.w	r2, r3, #12
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d1eb      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xf8>
 8003d80:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d210      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x150>
 8003d8e:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0207 	bic.w	r2, r3, #7
 8003d96:	4922      	ldr	r1, [pc, #136]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
 8003d9e:	4b20      	ldr	r3, [pc, #128]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x150>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e032      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x16e>
 8003dbc:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4916      	ldr	r1, [pc, #88]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x18e>
 8003dda:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	490e      	ldr	r1, [pc, #56]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
 8003dee:	f000 f821 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003df2:	4602      	mov	r2, r0
 8003df4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	490a      	ldr	r1, [pc, #40]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	5ccb      	ldrb	r3, [r1, r3]
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	4a09      	ldr	r2, [pc, #36]	@ (8003e2c <HAL_RCC_ClockConfig+0x1cc>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <HAL_RCC_ClockConfig+0x1d0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fd8e 	bl	8002930 <HAL_InitTick>
 8003e14:	2300      	movs	r3, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40022000 	.word	0x40022000
 8003e24:	40021000 	.word	0x40021000
 8003e28:	0800b97c 	.word	0x0800b97c
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	20000004 	.word	0x20000004

08003e34 <HAL_RCC_GetSysClockFreq>:
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d002      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x30>
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_GetSysClockFreq+0x36>
 8003e62:	e027      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x80>
 8003e64:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e027      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x86>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	0c9b      	lsrs	r3, r3, #18
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	4a17      	ldr	r2, [pc, #92]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e74:	5cd3      	ldrb	r3, [r2, r3]
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x70>
 8003e82:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0c5b      	lsrs	r3, r3, #17
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a0d      	ldr	r2, [pc, #52]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8003e96:	fb03 f202 	mul.w	r2, r3, r2
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e004      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x7a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e002      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x86>
 8003eb4:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	bf00      	nop
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	0800b98c 	.word	0x0800b98c
 8003ed4:	0800b99c 	.word	0x0800b99c
 8003ed8:	003d0900 	.word	0x003d0900
 8003edc:	007a1200 	.word	0x007a1200

08003ee0 <HAL_RCC_GetHCLKFreq>:
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4b02      	ldr	r3, [pc, #8]	@ (8003ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	20000000 	.word	0x20000000

08003ef4 <HAL_RCC_GetPCLK1Freq>:
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	f7ff fff2 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4903      	ldr	r1, [pc, #12]	@ (8003f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000
 8003f18:	0800b974 	.word	0x0800b974

08003f1c <HAL_RCC_GetPCLK2Freq>:
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	f7ff ffde 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	0adb      	lsrs	r3, r3, #11
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4903      	ldr	r1, [pc, #12]	@ (8003f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	0800b974 	.word	0x0800b974

08003f44 <RCC_Delay>:
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <RCC_Delay+0x34>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <RCC_Delay+0x38>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0a5b      	lsrs	r3, r3, #9
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	bf00      	nop
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1e5a      	subs	r2, r3, #1
 8003f66:	60fa      	str	r2, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f9      	bne.n	8003f60 <RCC_Delay+0x1c>
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	10624dd3 	.word	0x10624dd3

08003f80 <HAL_RCCEx_PeriphCLKConfig>:
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d07d      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	75fb      	strb	r3, [r7, #23]
 8003fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003fac:	4b4c      	ldr	r3, [pc, #304]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	61d3      	str	r3, [r2, #28]
 8003fb8:	4b49      	ldr	r3, [pc, #292]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
 8003fc8:	4b46      	ldr	r3, [pc, #280]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d118      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8003fd4:	4b43      	ldr	r3, [pc, #268]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a42      	ldr	r2, [pc, #264]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	f7fe fce8 	bl	80029b4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]
 8003fe6:	e008      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fe8:	f7fe fce4 	bl	80029b4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	@ 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e06d      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004006:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d02e      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	429a      	cmp	r2, r3
 8004022:	d027      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004024:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	4b2e      	ldr	r3, [pc, #184]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	4b2c      	ldr	r3, [pc, #176]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	4a29      	ldr	r2, [pc, #164]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6213      	str	r3, [r2, #32]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d014      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800404a:	f7fe fcb3 	bl	80029b4 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]
 8004050:	e00a      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004052:	f7fe fcaf 	bl	80029b4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004064:	2303      	movs	r3, #3
 8004066:	e036      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004068:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ee      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4917      	ldr	r1, [pc, #92]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	4313      	orrs	r3, r2
 8004084:	620b      	str	r3, [r1, #32]
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x118>
 800408c:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4a13      	ldr	r2, [pc, #76]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004096:	61d3      	str	r3, [r2, #28]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040a4:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	490b      	ldr	r1, [pc, #44]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040c2:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4904      	ldr	r1, [pc, #16]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
 80040d4:	2300      	movs	r3, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40007000 	.word	0x40007000
 80040e8:	42420440 	.word	0x42420440

080040ec <HAL_RCCEx_GetPeriphCLKFreq>:
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	2300      	movs	r3, #0
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b10      	cmp	r3, #16
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b10      	cmp	r3, #16
 8004112:	f200 8089 	bhi.w	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d045      	beq.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d074      	beq.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004122:	e081      	b.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004124:	4b45      	ldr	r3, [pc, #276]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d07a      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	0c9b      	lsrs	r3, r3, #18
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	4a40      	ldr	r2, [pc, #256]	@ (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004140:	5cd3      	ldrb	r3, [r2, r3]
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d015      	beq.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 800414e:	4b3b      	ldr	r3, [pc, #236]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	0c5b      	lsrs	r3, r3, #17
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	4a3a      	ldr	r2, [pc, #232]	@ (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004168:	4a37      	ldr	r2, [pc, #220]	@ (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	e004      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4a33      	ldr	r2, [pc, #204]	@ (800424c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	4b2d      	ldr	r3, [pc, #180]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004190:	d102      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	e049      	b.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4a2c      	ldr	r2, [pc, #176]	@ (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e041      	b.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80041a8:	4b24      	ldr	r3, [pc, #144]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b8:	d108      	bne.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80041c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e01e      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d6:	d109      	bne.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80041e4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e00e      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f6:	d11b      	bne.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80041f8:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004204:	4b13      	ldr	r3, [pc, #76]	@ (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	e012      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800420a:	e011      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800420c:	f7ff fe86 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0b9b      	lsrs	r3, r3, #14
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	3301      	adds	r3, #1
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e004      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004228:	bf00      	nop
 800422a:	e002      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004230:	bf00      	nop
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	0800b9a0 	.word	0x0800b9a0
 8004244:	0800b9b0 	.word	0x0800b9b0
 8004248:	00f42400 	.word	0x00f42400
 800424c:	003d0900 	.word	0x003d0900
 8004250:	aaaaaaab 	.word	0xaaaaaaab
 8004254:	0001e848 	.word	0x0001e848

08004258 <HAL_TIM_Base_Init>:
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
 8004266:	2301      	movs	r3, #1
 8004268:	e041      	b.n	80042ee <HAL_TIM_Base_Init+0x96>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe f99e 	bl	80025c0 <HAL_TIM_Base_MspInit>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 fa10 	bl	80046bc <TIM_Base_SetConfig>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042ec:	2300      	movs	r3, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_PWM_Init>:
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_TIM_PWM_Init+0x12>
 8004304:	2301      	movs	r3, #1
 8004306:	e041      	b.n	800438c <HAL_TIM_PWM_Init+0x96>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <HAL_TIM_PWM_Init+0x2c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f839 	bl	8004394 <HAL_TIM_PWM_MspInit>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 f9c1 	bl	80046bc <TIM_Base_SetConfig>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800438a:	2300      	movs	r3, #0
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_TIM_PWM_MspInit>:
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_TIM_PWM_ConfigChannel>:
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	2300      	movs	r3, #0
 80043b6:	75fb      	strb	r3, [r7, #23]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0ae      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	f200 809f 	bhi.w	8004514 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043d6:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004515 	.word	0x08004515
 80043e4:	08004515 	.word	0x08004515
 80043e8:	08004515 	.word	0x08004515
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004515 	.word	0x08004515
 80043f4:	08004515 	.word	0x08004515
 80043f8:	08004515 	.word	0x08004515
 80043fc:	08004493 	.word	0x08004493
 8004400:	08004515 	.word	0x08004515
 8004404:	08004515 	.word	0x08004515
 8004408:	08004515 	.word	0x08004515
 800440c:	080044d3 	.word	0x080044d3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f9b2 	bl	8004780 <TIM_OC1_SetConfig>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0208 	orr.w	r2, r2, #8
 800442a:	619a      	str	r2, [r3, #24]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	619a      	str	r2, [r3, #24]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]
 800444e:	e064      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f9f8 	bl	800484c <TIM_OC2_SetConfig>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800446a:	619a      	str	r2, [r3, #24]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447a:	619a      	str	r2, [r3, #24]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6999      	ldr	r1, [r3, #24]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	619a      	str	r2, [r3, #24]
 8004490:	e043      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fa41 	bl	8004920 <TIM_OC3_SetConfig>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0208 	orr.w	r2, r2, #8
 80044ac:	61da      	str	r2, [r3, #28]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0204 	bic.w	r2, r2, #4
 80044bc:	61da      	str	r2, [r3, #28]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69d9      	ldr	r1, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	61da      	str	r2, [r3, #28]
 80044d0:	e023      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fa8b 	bl	80049f4 <TIM_OC4_SetConfig>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ec:	61da      	str	r2, [r3, #28]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	021a      	lsls	r2, r3, #8
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	61da      	str	r2, [r3, #28]
 8004512:	e002      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
 8004518:	bf00      	nop
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_ConfigClockSource>:
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e0b4      	b.n	80046b2 <HAL_TIM_ConfigClockSource+0x186>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004580:	d03e      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0xd4>
 8004582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004586:	f200 8087 	bhi.w	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458e:	f000 8086 	beq.w	800469e <HAL_TIM_ConfigClockSource+0x172>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004596:	d87f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b70      	cmp	r3, #112	@ 0x70
 800459a:	d01a      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0xa6>
 800459c:	2b70      	cmp	r3, #112	@ 0x70
 800459e:	d87b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b60      	cmp	r3, #96	@ 0x60
 80045a2:	d050      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x11a>
 80045a4:	2b60      	cmp	r3, #96	@ 0x60
 80045a6:	d877      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b50      	cmp	r3, #80	@ 0x50
 80045aa:	d03c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xfa>
 80045ac:	2b50      	cmp	r3, #80	@ 0x50
 80045ae:	d873      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b40      	cmp	r3, #64	@ 0x40
 80045b2:	d058      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x13a>
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	d86f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b30      	cmp	r3, #48	@ 0x30
 80045ba:	d064      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b30      	cmp	r3, #48	@ 0x30
 80045be:	d86b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d060      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d867      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d05c      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d05a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	e062      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6899      	ldr	r1, [r3, #8]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f000 facc 	bl	8004b7e <TIM_ETR_SetConfig>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	e04f      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6899      	ldr	r1, [r3, #8]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f000 fab5 	bl	8004b7e <TIM_ETR_SetConfig>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	e03c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fa2c 	bl	8004a90 <TIM_TI1_ConfigInputStage>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2150      	movs	r1, #80	@ 0x50
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fa83 	bl	8004b4a <TIM_ITRx_SetConfig>
 8004644:	e02c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	461a      	mov	r2, r3
 8004654:	f000 fa4a 	bl	8004aec <TIM_TI2_ConfigInputStage>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2160      	movs	r1, #96	@ 0x60
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fa73 	bl	8004b4a <TIM_ITRx_SetConfig>
 8004664:	e01c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	461a      	mov	r2, r3
 8004674:	f000 fa0c 	bl	8004a90 <TIM_TI1_ConfigInputStage>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2140      	movs	r1, #64	@ 0x40
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fa63 	bl	8004b4a <TIM_ITRx_SetConfig>
 8004684:	e00c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f000 fa5a 	bl	8004b4a <TIM_ITRx_SetConfig>
 8004696:	e003      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e000      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
 800469e:	bf00      	nop
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <TIM_Base_SetConfig>:
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <TIM_Base_SetConfig+0xb8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <TIM_Base_SetConfig+0x30>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0x30>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a26      	ldr	r2, [pc, #152]	@ (8004778 <TIM_Base_SetConfig+0xbc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x30>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a25      	ldr	r2, [pc, #148]	@ (800477c <TIM_Base_SetConfig+0xc0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <TIM_Base_SetConfig+0x42>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <TIM_Base_SetConfig+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00b      	beq.n	800471e <TIM_Base_SetConfig+0x62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470c:	d007      	beq.n	800471e <TIM_Base_SetConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a19      	ldr	r2, [pc, #100]	@ (8004778 <TIM_Base_SetConfig+0xbc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_Base_SetConfig+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a18      	ldr	r2, [pc, #96]	@ (800477c <TIM_Base_SetConfig+0xc0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <TIM_Base_SetConfig+0x74>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	629a      	str	r2, [r3, #40]	@ 0x28
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a07      	ldr	r2, [pc, #28]	@ (8004774 <TIM_Base_SetConfig+0xb8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d103      	bne.n	8004764 <TIM_Base_SetConfig+0xa8>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	615a      	str	r2, [r3, #20]
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800

08004780 <TIM_OC1_SetConfig>:
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0201 	bic.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 0302 	bic.w	r3, r3, #2
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <TIM_OC1_SetConfig+0xc8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d10c      	bne.n	80047f6 <TIM_OC1_SetConfig+0x76>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0308 	bic.w	r3, r3, #8
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a13      	ldr	r2, [pc, #76]	@ (8004848 <TIM_OC1_SetConfig+0xc8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d111      	bne.n	8004822 <TIM_OC1_SetConfig+0xa2>
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	619a      	str	r2, [r3, #24]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	635a      	str	r2, [r3, #52]	@ 0x34
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	621a      	str	r2, [r3, #32]
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00

0800484c <TIM_OC2_SetConfig>:
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f023 0210 	bic.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	621a      	str	r2, [r3, #32]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0320 	bic.w	r3, r3, #32
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <TIM_OC2_SetConfig+0xd0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10d      	bne.n	80048c8 <TIM_OC2_SetConfig+0x7c>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a14      	ldr	r2, [pc, #80]	@ (800491c <TIM_OC2_SetConfig+0xd0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d113      	bne.n	80048f8 <TIM_OC2_SetConfig+0xac>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	619a      	str	r2, [r3, #24]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	621a      	str	r2, [r3, #32]
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00

08004920 <TIM_OC3_SetConfig>:
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	621a      	str	r2, [r3, #32]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <TIM_OC3_SetConfig+0xd0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10d      	bne.n	800499a <TIM_OC3_SetConfig+0x7a>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a14      	ldr	r2, [pc, #80]	@ (80049f0 <TIM_OC3_SetConfig+0xd0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d113      	bne.n	80049ca <TIM_OC3_SetConfig+0xaa>
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	61da      	str	r2, [r3, #28]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00

080049f4 <TIM_OC4_SetConfig>:
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	621a      	str	r2, [r3, #32]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8004a8c <TIM_OC4_SetConfig+0x98>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d109      	bne.n	8004a68 <TIM_OC4_SetConfig+0x74>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	019b      	lsls	r3, r3, #6
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	61da      	str	r2, [r3, #28]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	621a      	str	r2, [r3, #32]
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	40012c00 	.word	0x40012c00

08004a90 <TIM_TI1_ConfigInputStage>:
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 030a 	bic.w	r3, r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	619a      	str	r2, [r3, #24]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <TIM_TI2_ConfigInputStage>:
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	031b      	lsls	r3, r3, #12
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	619a      	str	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	621a      	str	r2, [r3, #32]
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <TIM_ITRx_SetConfig>:
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f043 0307 	orr.w	r3, r3, #7
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <TIM_ETR_SetConfig>:
 8004b7e:	b480      	push	{r7}
 8004b80:	b087      	sub	sp, #28
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	021a      	lsls	r2, r3, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_MasterConfigSynchronization>:
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e046      	b.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00e      	beq.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c20:	d009      	beq.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a12      	ldr	r2, [pc, #72]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a10      	ldr	r2, [pc, #64]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d10c      	bne.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004c60:	2300      	movs	r3, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800

08004c78 <HAL_UART_Init>:
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e042      	b.n	8004d10 <HAL_UART_Init+0x98>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_UART_Init+0x2c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fcda 	bl	8002658 <HAL_UART_MspInit>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2224      	movs	r2, #36	@ 0x24
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fc7f 	bl	80055c0 <UART_SetConfig>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cd0:	611a      	str	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ce0:	615a      	str	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	@ 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_UART_IRQHandler>:
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d44:	2300      	movs	r3, #0
 8004d46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <HAL_UART_IRQHandler+0x66>
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_UART_IRQHandler+0x66>
 8004d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_UART_IRQHandler+0x66>
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fb63 	bl	8005442 <UART_Receive_IT>
 8004d7c:	e25b      	b.n	8005236 <HAL_UART_IRQHandler+0x51e>
 8004d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80de 	beq.w	8004f44 <HAL_UART_IRQHandler+0x22c>
 8004d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <HAL_UART_IRQHandler+0x8a>
 8004d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80d1 	beq.w	8004f44 <HAL_UART_IRQHandler+0x22c>
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xae>
 8004dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xae>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbe:	f043 0201 	orr.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_UART_IRQHandler+0xd2>
 8004dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_UART_IRQHandler+0xd2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	645a      	str	r2, [r3, #68]	@ 0x44
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_UART_IRQHandler+0xf6>
 8004df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0xf6>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	f043 0204 	orr.w	r2, r3, #4
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d011      	beq.n	8004e3e <HAL_UART_IRQHandler+0x126>
 8004e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <HAL_UART_IRQHandler+0x11a>
 8004e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_UART_IRQHandler+0x126>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f043 0208 	orr.w	r2, r3, #8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 81f2 	beq.w	800522c <HAL_UART_IRQHandler+0x514>
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_UART_IRQHandler+0x14e>
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_UART_IRQHandler+0x14e>
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 faee 	bl	8005442 <UART_Receive_IT>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_UART_IRQHandler+0x17a>
 8004e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d04f      	beq.n	8004f32 <HAL_UART_IRQHandler+0x21a>
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9f8 	bl	8005288 <UART_EndRxTransfer>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d041      	beq.n	8004f2a <HAL_UART_IRQHandler+0x212>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3314      	adds	r3, #20
 8004ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1d9      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x18e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d013      	beq.n	8004f22 <HAL_UART_IRQHandler+0x20a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	4a7e      	ldr	r2, [pc, #504]	@ (80050f8 <HAL_UART_IRQHandler+0x3e0>)
 8004f00:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fa2c 	bl	8003364 <HAL_DMA_Abort_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <HAL_UART_IRQHandler+0x228>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4798      	blx	r3
 8004f20:	e00e      	b.n	8004f40 <HAL_UART_IRQHandler+0x228>
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f99c 	bl	8005260 <HAL_UART_ErrorCallback>
 8004f28:	e00a      	b.n	8004f40 <HAL_UART_IRQHandler+0x228>
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f998 	bl	8005260 <HAL_UART_ErrorCallback>
 8004f30:	e006      	b.n	8004f40 <HAL_UART_IRQHandler+0x228>
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f994 	bl	8005260 <HAL_UART_ErrorCallback>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f3e:	e175      	b.n	800522c <HAL_UART_IRQHandler+0x514>
 8004f40:	bf00      	nop
 8004f42:	e173      	b.n	800522c <HAL_UART_IRQHandler+0x514>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	f040 814f 	bne.w	80051ec <HAL_UART_IRQHandler+0x4d4>
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8148 	beq.w	80051ec <HAL_UART_IRQHandler+0x4d4>
 8004f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8141 	beq.w	80051ec <HAL_UART_IRQHandler+0x4d4>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80b6 	beq.w	80050fc <HAL_UART_IRQHandler+0x3e4>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8004f9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8145 	beq.w	8005230 <HAL_UART_IRQHandler+0x518>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	f080 813e 	bcs.w	8005230 <HAL_UART_IRQHandler+0x518>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fba:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	f000 8088 	beq.w	80050d8 <HAL_UART_IRQHandler+0x3c0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fe2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ff4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ffc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005000:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800500c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1d9      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x2b0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	677b      	str	r3, [r7, #116]	@ 0x74
 800501c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	673b      	str	r3, [r7, #112]	@ 0x70
 8005024:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3314      	adds	r3, #20
 8005034:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005038:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800503c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800503e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005040:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800504a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e1      	bne.n	8005014 <HAL_UART_IRQHandler+0x2fc>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	663b      	str	r3, [r7, #96]	@ 0x60
 8005058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005060:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005074:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005076:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005078:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800507a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	667b      	str	r3, [r7, #100]	@ 0x64
 8005082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e3      	bne.n	8005050 <HAL_UART_IRQHandler+0x338>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	@ 0x30
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800509e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a8:	f023 0310 	bic.w	r3, r3, #16
 80050ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80050be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e3      	bne.n	8005096 <HAL_UART_IRQHandler+0x37e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe f90b 	bl	80032ee <HAL_DMA_Abort>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8bf 	bl	8005272 <HAL_UARTEx_RxEventCallback>
 80050f4:	e09c      	b.n	8005230 <HAL_UART_IRQHandler+0x518>
 80050f6:	bf00      	nop
 80050f8:	0800534d 	.word	0x0800534d
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005104:	b29b      	uxth	r3, r3
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 808e 	beq.w	8005234 <HAL_UART_IRQHandler+0x51c>
 8005118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8089 	beq.w	8005234 <HAL_UART_IRQHandler+0x51c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	63bb      	str	r3, [r7, #56]	@ 0x38
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	637b      	str	r3, [r7, #52]	@ 0x34
 8005132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005134:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005138:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005146:	647a      	str	r2, [r7, #68]	@ 0x44
 8005148:	643b      	str	r3, [r7, #64]	@ 0x40
 800514a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800514c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e3      	bne.n	8005122 <HAL_UART_IRQHandler+0x40a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	623b      	str	r3, [r7, #32]
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3314      	adds	r3, #20
 800517a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800517e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e3      	bne.n	800515a <HAL_UART_IRQHandler+0x442>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0310 	bic.w	r3, r3, #16
 80051b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051c4:	61fa      	str	r2, [r7, #28]
 80051c6:	61bb      	str	r3, [r7, #24]
 80051c8:	69b9      	ldr	r1, [r7, #24]
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e3      	bne.n	80051a0 <HAL_UART_IRQHandler+0x488>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80051de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f844 	bl	8005272 <HAL_UARTEx_RxEventCallback>
 80051ea:	e023      	b.n	8005234 <HAL_UART_IRQHandler+0x51c>
 80051ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_UART_IRQHandler+0x4f4>
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_UART_IRQHandler+0x4f4>
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8b5 	bl	8005374 <UART_Transmit_IT>
 800520a:	e014      	b.n	8005236 <HAL_UART_IRQHandler+0x51e>
 800520c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <HAL_UART_IRQHandler+0x51e>
 8005218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800521c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_UART_IRQHandler+0x51e>
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8f4 	bl	8005412 <UART_EndTransmit_IT>
 800522a:	e004      	b.n	8005236 <HAL_UART_IRQHandler+0x51e>
 800522c:	bf00      	nop
 800522e:	e002      	b.n	8005236 <HAL_UART_IRQHandler+0x51e>
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <HAL_UART_IRQHandler+0x51e>
 8005234:	bf00      	nop
 8005236:	37e8      	adds	r7, #232	@ 0xe8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_UART_TxCpltCallback>:
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <HAL_UART_RxCpltCallback>:
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <HAL_UART_ErrorCallback>:
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <HAL_UARTEx_RxEventCallback>:
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	807b      	strh	r3, [r7, #2]
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <UART_EndRxTransfer>:
 8005288:	b480      	push	{r7}
 800528a:	b095      	sub	sp, #84	@ 0x54
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
 8005298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	633b      	str	r3, [r7, #48]	@ 0x30
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80052b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_EndRxTransfer+0x8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3314      	adds	r3, #20
 80052e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_EndRxTransfer+0x3c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d119      	bne.n	8005334 <UART_EndRxTransfer+0xac>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0310 	bic.w	r3, r3, #16
 8005316:	647b      	str	r3, [r7, #68]	@ 0x44
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005320:	61ba      	str	r2, [r7, #24]
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	6979      	ldr	r1, [r7, #20]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_EndRxTransfer+0x78>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	@ 0x30
 8005342:	bf00      	nop
 8005344:	3754      	adds	r7, #84	@ 0x54
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <UART_DMAAbortOnError>:
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff ff7a 	bl	8005260 <HAL_UART_ErrorCallback>
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <UART_Transmit_IT>:
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b21      	cmp	r3, #33	@ 0x21
 8005386:	d13e      	bne.n	8005406 <UART_Transmit_IT+0x92>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005390:	d114      	bne.n	80053bc <UART_Transmit_IT+0x48>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d110      	bne.n	80053bc <UART_Transmit_IT+0x48>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	1c9a      	adds	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]
 80053ba:	e008      	b.n	80053ce <UART_Transmit_IT+0x5a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	1c59      	adds	r1, r3, #1
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6211      	str	r1, [r2, #32]
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	4619      	mov	r1, r3
 80053dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10f      	bne.n	8005402 <UART_Transmit_IT+0x8e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	2300      	movs	r3, #0
 8005404:	e000      	b.n	8005408 <UART_Transmit_IT+0x94>
 8005406:	2302      	movs	r3, #2
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <UART_EndTransmit_IT>:
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff ff02 	bl	800523c <HAL_UART_TxCpltCallback>
 8005438:	2300      	movs	r3, #0
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <UART_Receive_IT>:
 8005442:	b580      	push	{r7, lr}
 8005444:	b08c      	sub	sp, #48	@ 0x30
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b22      	cmp	r3, #34	@ 0x22
 8005454:	f040 80ae 	bne.w	80055b4 <UART_Receive_IT+0x172>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005460:	d117      	bne.n	8005492 <UART_Receive_IT+0x50>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d113      	bne.n	8005492 <UART_Receive_IT+0x50>
 800546a:	2300      	movs	r3, #0
 800546c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005480:	b29a      	uxth	r2, r3
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	1c9a      	adds	r2, r3, #2
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005490:	e026      	b.n	80054e0 <UART_Receive_IT+0x9e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005498:	2300      	movs	r3, #0
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a4:	d007      	beq.n	80054b6 <UART_Receive_IT+0x74>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <UART_Receive_IT+0x82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <UART_Receive_IT+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e008      	b.n	80054d6 <UART_Receive_IT+0x94>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4619      	mov	r1, r3
 80054ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d15d      	bne.n	80055b0 <UART_Receive_IT+0x16e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0220 	bic.w	r2, r2, #32
 8005502:	60da      	str	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	615a      	str	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	635a      	str	r2, [r3, #52]	@ 0x34
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	2b01      	cmp	r3, #1
 8005538:	d135      	bne.n	80055a6 <UART_Receive_IT+0x164>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f023 0310 	bic.w	r3, r3, #16
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005560:	623a      	str	r2, [r7, #32]
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	6a3a      	ldr	r2, [r7, #32]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_Receive_IT+0xfe>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b10      	cmp	r3, #16
 8005580:	d10a      	bne.n	8005598 <UART_Receive_IT+0x156>
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fe67 	bl	8005272 <HAL_UARTEx_RxEventCallback>
 80055a4:	e002      	b.n	80055ac <UART_Receive_IT+0x16a>
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fe51 	bl	800524e <HAL_UART_RxCpltCallback>
 80055ac:	2300      	movs	r3, #0
 80055ae:	e002      	b.n	80055b6 <UART_Receive_IT+0x174>
 80055b0:	2300      	movs	r3, #0
 80055b2:	e000      	b.n	80055b6 <UART_Receive_IT+0x174>
 80055b4:	2302      	movs	r3, #2
 80055b6:	4618      	mov	r0, r3
 80055b8:	3730      	adds	r7, #48	@ 0x30
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <UART_SetConfig>:
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	611a      	str	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80055fa:	f023 030c 	bic.w	r3, r3, #12
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	430b      	orrs	r3, r1
 8005606:	60d3      	str	r3, [r2, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	615a      	str	r2, [r3, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <UART_SetConfig+0x114>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d103      	bne.n	8005630 <UART_SetConfig+0x70>
 8005628:	f7fe fc78 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	e002      	b.n	8005636 <UART_SetConfig+0x76>
 8005630:	f7fe fc60 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009a      	lsls	r2, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	4a22      	ldr	r2, [pc, #136]	@ (80056d8 <UART_SetConfig+0x118>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	0119      	lsls	r1, r3, #4
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009a      	lsls	r2, r3, #2
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	fbb2 f2f3 	udiv	r2, r2, r3
 800566c:	4b1a      	ldr	r3, [pc, #104]	@ (80056d8 <UART_SetConfig+0x118>)
 800566e:	fba3 0302 	umull	r0, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2064      	movs	r0, #100	@ 0x64
 8005676:	fb00 f303 	mul.w	r3, r0, r3
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	3332      	adds	r3, #50	@ 0x32
 8005680:	4a15      	ldr	r2, [pc, #84]	@ (80056d8 <UART_SetConfig+0x118>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800568c:	4419      	add	r1, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009a      	lsls	r2, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a4:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <UART_SetConfig+0x118>)
 80056a6:	fba3 0302 	umull	r0, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2064      	movs	r0, #100	@ 0x64
 80056ae:	fb00 f303 	mul.w	r3, r0, r3
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	3332      	adds	r3, #50	@ 0x32
 80056b8:	4a07      	ldr	r2, [pc, #28]	@ (80056d8 <UART_SetConfig+0x118>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	f003 020f 	and.w	r2, r3, #15
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	440a      	add	r2, r1
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40013800 	.word	0x40013800
 80056d8:	51eb851f 	.word	0x51eb851f

080056dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80056e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
	...

080056ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	4a08      	ldr	r2, [pc, #32]	@ (800571c <disk_status+0x30>)
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	79fa      	ldrb	r2, [r7, #7]
 8005704:	4905      	ldr	r1, [pc, #20]	@ (800571c <disk_status+0x30>)
 8005706:	440a      	add	r2, r1
 8005708:	7a12      	ldrb	r2, [r2, #8]
 800570a:	4610      	mov	r0, r2
 800570c:	4798      	blx	r3
 800570e:	4603      	mov	r3, r0
 8005710:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20000414 	.word	0x20000414

08005720 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	4a0d      	ldr	r2, [pc, #52]	@ (8005768 <disk_initialize+0x48>)
 8005732:	5cd3      	ldrb	r3, [r2, r3]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d111      	bne.n	800575c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	4a0b      	ldr	r2, [pc, #44]	@ (8005768 <disk_initialize+0x48>)
 800573c:	2101      	movs	r1, #1
 800573e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	4a09      	ldr	r2, [pc, #36]	@ (8005768 <disk_initialize+0x48>)
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	79fa      	ldrb	r2, [r7, #7]
 800574e:	4906      	ldr	r1, [pc, #24]	@ (8005768 <disk_initialize+0x48>)
 8005750:	440a      	add	r2, r1
 8005752:	7a12      	ldrb	r2, [r2, #8]
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000414 	.word	0x20000414

0800576c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	4a0a      	ldr	r2, [pc, #40]	@ (80057a8 <disk_read+0x3c>)
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	689c      	ldr	r4, [r3, #8]
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	4a07      	ldr	r2, [pc, #28]	@ (80057a8 <disk_read+0x3c>)
 800578c:	4413      	add	r3, r2
 800578e:	7a18      	ldrb	r0, [r3, #8]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	47a0      	blx	r4
 8005798:	4603      	mov	r3, r0
 800579a:	75fb      	strb	r3, [r7, #23]
  return res;
 800579c:	7dfb      	ldrb	r3, [r7, #23]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd90      	pop	{r4, r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000414 	.word	0x20000414

080057ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	4a0a      	ldr	r2, [pc, #40]	@ (80057e8 <disk_write+0x3c>)
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	68dc      	ldr	r4, [r3, #12]
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	4a07      	ldr	r2, [pc, #28]	@ (80057e8 <disk_write+0x3c>)
 80057cc:	4413      	add	r3, r2
 80057ce:	7a18      	ldrb	r0, [r3, #8]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	47a0      	blx	r4
 80057d8:	4603      	mov	r3, r0
 80057da:	75fb      	strb	r3, [r7, #23]
  return res;
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd90      	pop	{r4, r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000414 	.word	0x20000414

080057ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	603a      	str	r2, [r7, #0]
 80057f6:	71fb      	strb	r3, [r7, #7]
 80057f8:	460b      	mov	r3, r1
 80057fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	4a09      	ldr	r2, [pc, #36]	@ (8005824 <disk_ioctl+0x38>)
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	79fa      	ldrb	r2, [r7, #7]
 800580a:	4906      	ldr	r1, [pc, #24]	@ (8005824 <disk_ioctl+0x38>)
 800580c:	440a      	add	r2, r1
 800580e:	7a10      	ldrb	r0, [r2, #8]
 8005810:	79b9      	ldrb	r1, [r7, #6]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	4798      	blx	r3
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]
  return res;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000414 	.word	0x20000414

08005828 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800583c:	e007      	b.n	800584e <mem_cpy+0x26>
		*d++ = *s++;
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	1c53      	adds	r3, r2, #1
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1c59      	adds	r1, r3, #1
 8005848:	6179      	str	r1, [r7, #20]
 800584a:	7812      	ldrb	r2, [r2, #0]
 800584c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	1e5a      	subs	r2, r3, #1
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f2      	bne.n	800583e <mem_cpy+0x16>
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005874:	e005      	b.n	8005882 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	617a      	str	r2, [r7, #20]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f4      	bne.n	8005876 <mem_set+0x12>
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	@ 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80058b0:	bf00      	nop
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1e5a      	subs	r2, r3, #1
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <mem_cmp+0x40>
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	61fa      	str	r2, [r7, #28]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	61ba      	str	r2, [r7, #24]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	1acb      	subs	r3, r1, r3
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0ec      	beq.n	80058b2 <mem_cmp+0x1a>
	return r;
 80058d8:	697b      	ldr	r3, [r7, #20]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3724      	adds	r7, #36	@ 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80058ee:	e002      	b.n	80058f6 <chk_chr+0x12>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3301      	adds	r3, #1
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <chk_chr+0x26>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	4293      	cmp	r3, r2
 8005908:	d1f2      	bne.n	80058f0 <chk_chr+0xc>
	return *str;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	781b      	ldrb	r3, [r3, #0]
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e038      	b.n	800599e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800592c:	492f      	ldr	r1, [pc, #188]	@ (80059ec <chk_lock+0xd4>)
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d029      	beq.n	8005994 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005940:	492a      	ldr	r1, [pc, #168]	@ (80059ec <chk_lock+0xd4>)
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4613      	mov	r3, r2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005956:	429a      	cmp	r2, r3
 8005958:	d11e      	bne.n	8005998 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800595a:	4924      	ldr	r1, [pc, #144]	@ (80059ec <chk_lock+0xd4>)
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4613      	mov	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3304      	adds	r3, #4
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005972:	429a      	cmp	r2, r3
 8005974:	d110      	bne.n	8005998 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005976:	491d      	ldr	r1, [pc, #116]	@ (80059ec <chk_lock+0xd4>)
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4613      	mov	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	3308      	adds	r3, #8
 8005986:	881a      	ldrh	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800598e:	429a      	cmp	r2, r3
 8005990:	d102      	bne.n	8005998 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005992:	e007      	b.n	80059a4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005994:	2301      	movs	r3, #1
 8005996:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d9c3      	bls.n	800592c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d109      	bne.n	80059be <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <chk_lock+0x9e>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d101      	bne.n	80059ba <chk_lock+0xa2>
 80059b6:	2300      	movs	r3, #0
 80059b8:	e013      	b.n	80059e2 <chk_lock+0xca>
 80059ba:	2312      	movs	r3, #18
 80059bc:	e011      	b.n	80059e2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <chk_lock+0xc4>
 80059c4:	4909      	ldr	r1, [pc, #36]	@ (80059ec <chk_lock+0xd4>)
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4613      	mov	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	330a      	adds	r3, #10
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059da:	d101      	bne.n	80059e0 <chk_lock+0xc8>
 80059dc:	2310      	movs	r3, #16
 80059de:	e000      	b.n	80059e2 <chk_lock+0xca>
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	200003fc 	.word	0x200003fc

080059f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	e002      	b.n	8005a02 <enq_lock+0x12>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3301      	adds	r3, #1
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d809      	bhi.n	8005a1c <enq_lock+0x2c>
 8005a08:	490a      	ldr	r1, [pc, #40]	@ (8005a34 <enq_lock+0x44>)
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1ef      	bne.n	80059fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	bf14      	ite	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	2300      	moveq	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	200003fc 	.word	0x200003fc

08005a38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e02b      	b.n	8005aa0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005a48:	4955      	ldr	r1, [pc, #340]	@ (8005ba0 <inc_lock+0x168>)
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d11b      	bne.n	8005a9a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8005a62:	494f      	ldr	r1, [pc, #316]	@ (8005ba0 <inc_lock+0x168>)
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	3304      	adds	r3, #4
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d10d      	bne.n	8005a9a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8005a7e:	4948      	ldr	r1, [pc, #288]	@ (8005ba0 <inc_lock+0x168>)
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d006      	beq.n	8005aa8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d9d0      	bls.n	8005a48 <inc_lock+0x10>
 8005aa6:	e000      	b.n	8005aaa <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005aa8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d145      	bne.n	8005b3c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <inc_lock+0x84>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d809      	bhi.n	8005ad6 <inc_lock+0x9e>
 8005ac2:	4937      	ldr	r1, [pc, #220]	@ (8005ba0 <inc_lock+0x168>)
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1ef      	bne.n	8005ab6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d101      	bne.n	8005ae0 <inc_lock+0xa8>
 8005adc:	2300      	movs	r3, #0
 8005ade:	e05a      	b.n	8005b96 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8005ae6:	482e      	ldr	r0, [pc, #184]	@ (8005ba0 <inc_lock+0x168>)
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4403      	add	r3, r0
 8005af4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8005afc:	4828      	ldr	r0, [pc, #160]	@ (8005ba0 <inc_lock+0x168>)
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4613      	mov	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4403      	add	r3, r0
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 8005b14:	4922      	ldr	r1, [pc, #136]	@ (8005ba0 <inc_lock+0x168>)
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	3308      	adds	r3, #8
 8005b24:	4602      	mov	r2, r0
 8005b26:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b28:	491d      	ldr	r1, [pc, #116]	@ (8005ba0 <inc_lock+0x168>)
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	330a      	adds	r3, #10
 8005b38:	2200      	movs	r2, #0
 8005b3a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00c      	beq.n	8005b5c <inc_lock+0x124>
 8005b42:	4917      	ldr	r1, [pc, #92]	@ (8005ba0 <inc_lock+0x168>)
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4613      	mov	r3, r2
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	330a      	adds	r3, #10
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <inc_lock+0x124>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e01c      	b.n	8005b96 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <inc_lock+0x142>
 8005b62:	490f      	ldr	r1, [pc, #60]	@ (8005ba0 <inc_lock+0x168>)
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4613      	mov	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	330a      	adds	r3, #10
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	b299      	uxth	r1, r3
 8005b78:	e001      	b.n	8005b7e <inc_lock+0x146>
 8005b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b7e:	4808      	ldr	r0, [pc, #32]	@ (8005ba0 <inc_lock+0x168>)
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4403      	add	r3, r0
 8005b8c:	330a      	adds	r3, #10
 8005b8e:	460a      	mov	r2, r1
 8005b90:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3301      	adds	r3, #1
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	200003fc 	.word	0x200003fc

08005ba4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d82e      	bhi.n	8005c16 <dec_lock+0x72>
		n = Files[i].ctr;
 8005bb8:	491b      	ldr	r1, [pc, #108]	@ (8005c28 <dec_lock+0x84>)
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	330a      	adds	r3, #10
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005bcc:	89fb      	ldrh	r3, [r7, #14]
 8005bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd2:	d101      	bne.n	8005bd8 <dec_lock+0x34>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005bd8:	89fb      	ldrh	r3, [r7, #14]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <dec_lock+0x40>
 8005bde:	89fb      	ldrh	r3, [r7, #14]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005be4:	4910      	ldr	r1, [pc, #64]	@ (8005c28 <dec_lock+0x84>)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	330a      	adds	r3, #10
 8005bf4:	89fa      	ldrh	r2, [r7, #14]
 8005bf6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005bf8:	89fb      	ldrh	r3, [r7, #14]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d108      	bne.n	8005c10 <dec_lock+0x6c>
 8005bfe:	490a      	ldr	r1, [pc, #40]	@ (8005c28 <dec_lock+0x84>)
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	737b      	strb	r3, [r7, #13]
 8005c14:	e001      	b.n	8005c1a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c16:	2302      	movs	r3, #2
 8005c18:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c1a:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	200003fc 	.word	0x200003fc

08005c2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e016      	b.n	8005c68 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c3a:	4910      	ldr	r1, [pc, #64]	@ (8005c7c <clear_lock+0x50>)
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d108      	bne.n	8005c62 <clear_lock+0x36>
 8005c50:	490a      	ldr	r1, [pc, #40]	@ (8005c7c <clear_lock+0x50>)
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d9e5      	bls.n	8005c3a <clear_lock+0xe>
	}
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200003fc 	.word	0x200003fc

08005c80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d038      	beq.n	8005d08 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8005c9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	f7ff fd7f 	bl	80057ac <disk_write>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
 8005cb8:	e026      	b.n	8005d08 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d218      	bcs.n	8005d08 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e010      	b.n	8005d02 <sync_window+0x82>
					wsect += fs->fsize;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	f7ff fd58 	bl	80057ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d8eb      	bhi.n	8005ce0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d01b      	beq.n	8005d64 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ffa7 	bl	8005c80 <sync_window>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d113      	bne.n	8005d64 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	2301      	movs	r3, #1
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	f7ff fd10 	bl	800576c <disk_read>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d52:	f04f 33ff 	mov.w	r3, #4294967295
 8005d56:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ff82 	bl	8005c80 <sync_window>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 809b 	bne.w	8005ebe <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	f040 8088 	bne.w	8005ea4 <sync_fs+0x136>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	f040 8082 	bne.w	8005ea4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fd5b 	bl	8005864 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2255      	movs	r2, #85	@ 0x55
 8005db2:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	22aa      	movs	r2, #170	@ 0xaa
 8005dba:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2252      	movs	r2, #82	@ 0x52
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2252      	movs	r2, #82	@ 0x52
 8005dc8:	705a      	strb	r2, [r3, #1]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2261      	movs	r2, #97	@ 0x61
 8005dce:	709a      	strb	r2, [r3, #2]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2241      	movs	r2, #65	@ 0x41
 8005dd4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2272      	movs	r2, #114	@ 0x72
 8005dda:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2272      	movs	r2, #114	@ 0x72
 8005de2:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2241      	movs	r2, #65	@ 0x41
 8005dea:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2261      	movs	r2, #97	@ 0x61
 8005df2:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	0a1b      	lsrs	r3, r3, #8
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005e2e:	0e1b      	lsrs	r3, r3, #24
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005e60:	0c1b      	lsrs	r3, r3, #16
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005e70:	0e1b      	lsrs	r3, r3, #24
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8005e96:	2301      	movs	r3, #1
 8005e98:	f7ff fc88 	bl	80057ac <disk_write>
			fs->fsi_flag = 0;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fc9c 	bl	80057ec <disk_ioctl>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	3b02      	subs	r3, #2
 8005ed6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005ede:	3b02      	subs	r3, #2
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d301      	bcc.n	8005eea <clust2sect+0x22>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e00a      	b.n	8005f00 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	fb03 f202 	mul.w	r2, r3, r2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005efe:	4413      	add	r3, r2
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr

08005f0a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d905      	bls.n	8005f26 <get_fat+0x1c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <get_fat+0x22>
		val = 1;	/* Internal error */
 8005f26:	2301      	movs	r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e0a2      	b.n	8006072 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d067      	beq.n	800600c <get_fat+0x102>
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	f300 808e 	bgt.w	800605e <get_fat+0x154>
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d002      	beq.n	8005f4c <get_fat+0x42>
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d03f      	beq.n	8005fca <get_fat+0xc0>
 8005f4a:	e088      	b.n	800605e <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	0a5b      	lsrs	r3, r3, #9
 8005f64:	4413      	add	r3, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fed2 	bl	8005d12 <move_window>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d177      	bne.n	8006064 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	60fa      	str	r2, [r7, #12]
 8005f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	5cd3      	ldrb	r3, [r2, r3]
 8005f82:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	0a5b      	lsrs	r3, r3, #9
 8005f8e:	4413      	add	r3, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff febd 	bl	8005d12 <move_window>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d164      	bne.n	8006068 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	5cd3      	ldrb	r3, [r2, r3]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <get_fat+0xb6>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	e002      	b.n	8005fc6 <get_fat+0xbc>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc6:	617b      	str	r3, [r7, #20]
			break;
 8005fc8:	e053      	b.n	8006072 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff fe9a 	bl	8005d12 <move_window>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d143      	bne.n	800606c <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4413      	add	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	b21a      	sxth	r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b21b      	sxth	r3, r3
 8006002:	4313      	orrs	r3, r2
 8006004:	b21b      	sxth	r3, r3
 8006006:	b29b      	uxth	r3, r3
 8006008:	617b      	str	r3, [r7, #20]
			break;
 800600a:	e032      	b.n	8006072 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	09db      	lsrs	r3, r3, #7
 8006016:	4413      	add	r3, r2
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fe79 	bl	8005d12 <move_window>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d124      	bne.n	8006070 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	3303      	adds	r3, #3
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	061a      	lsls	r2, r3, #24
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3302      	adds	r3, #2
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	041b      	lsls	r3, r3, #16
 8006044:	431a      	orrs	r2, r3
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3301      	adds	r3, #1
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	4313      	orrs	r3, r2
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	4313      	orrs	r3, r2
 8006056:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800605a:	617b      	str	r3, [r7, #20]
			break;
 800605c:	e009      	b.n	8006072 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800605e:	2301      	movs	r3, #1
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e006      	b.n	8006072 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006064:	bf00      	nop
 8006066:	e004      	b.n	8006072 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006068:	bf00      	nop
 800606a:	e002      	b.n	8006072 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800606c:	bf00      	nop
 800606e:	e000      	b.n	8006072 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006070:	bf00      	nop
		}
	}

	return val;
 8006072:	697b      	ldr	r3, [r7, #20]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d905      	bls.n	800609a <put_fat+0x1e>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d302      	bcc.n	80060a0 <put_fat+0x24>
		res = FR_INT_ERR;
 800609a:	2302      	movs	r3, #2
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e0f6      	b.n	800628e <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	f000 809e 	beq.w	80061e8 <put_fat+0x16c>
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	f300 80e4 	bgt.w	800627a <put_fat+0x1fe>
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d002      	beq.n	80060bc <put_fat+0x40>
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d06f      	beq.n	800619a <put_fat+0x11e>
 80060ba:	e0de      	b.n	800627a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	0a5b      	lsrs	r3, r3, #9
 80060d4:	4413      	add	r3, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fe1a 	bl	8005d12 <move_window>
 80060de:	4603      	mov	r3, r0
 80060e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f040 80cb 	bne.w	8006280 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	617a      	str	r2, [r7, #20]
 80060f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <put_fat+0xa4>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	b25b      	sxtb	r3, r3
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	b25a      	sxtb	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	b25b      	sxtb	r3, r3
 8006118:	4313      	orrs	r3, r2
 800611a:	b25b      	sxtb	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	e001      	b.n	8006124 <put_fat+0xa8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	0a5b      	lsrs	r3, r3, #9
 800613a:	4413      	add	r3, r2
 800613c:	4619      	mov	r1, r3
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff fde7 	bl	8005d12 <move_window>
 8006144:	4603      	mov	r3, r0
 8006146:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006148:	7ffb      	ldrb	r3, [r7, #31]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f040 809a 	bne.w	8006284 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <put_fat+0xf2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	b2db      	uxtb	r3, r3
 800616c:	e00e      	b.n	800618c <put_fat+0x110>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b25b      	sxtb	r3, r3
 8006174:	f023 030f 	bic.w	r3, r3, #15
 8006178:	b25a      	sxtb	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	b25b      	sxtb	r3, r3
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	b25b      	sxtb	r3, r3
 8006186:	4313      	orrs	r3, r2
 8006188:	b25b      	sxtb	r3, r3
 800618a:	b2db      	uxtb	r3, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006198:	e079      	b.n	800628e <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	4413      	add	r3, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fdb2 	bl	8005d12 <move_window>
 80061ae:	4603      	mov	r3, r0
 80061b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d167      	bne.n	8006288 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	3301      	adds	r3, #1
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 80061e6:	e052      	b.n	800628e <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	09db      	lsrs	r3, r3, #7
 80061f2:	4413      	add	r3, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fd8b 	bl	8005d12 <move_window>
 80061fc:	4603      	mov	r3, r0
 80061fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006200:	7ffb      	ldrb	r3, [r7, #31]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d142      	bne.n	800628c <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	3303      	adds	r3, #3
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	061a      	lsls	r2, r3, #24
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	3302      	adds	r3, #2
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	431a      	orrs	r2, r3
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	3301      	adds	r3, #1
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	4313      	orrs	r3, r2
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	7812      	ldrb	r2, [r2, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	4313      	orrs	r3, r2
 800623e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	b29b      	uxth	r3, r3
 800624c:	0a1b      	lsrs	r3, r3, #8
 800624e:	b29a      	uxth	r2, r3
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	3301      	adds	r3, #1
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	0c1a      	lsrs	r2, r3, #16
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	3302      	adds	r3, #2
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	0e1a      	lsrs	r2, r3, #24
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	3303      	adds	r3, #3
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8006278:	e009      	b.n	800628e <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800627a:	2302      	movs	r3, #2
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e006      	b.n	800628e <put_fat+0x212>
			if (res != FR_OK) break;
 8006280:	bf00      	nop
 8006282:	e004      	b.n	800628e <put_fat+0x212>
			if (res != FR_OK) break;
 8006284:	bf00      	nop
 8006286:	e002      	b.n	800628e <put_fat+0x212>
			if (res != FR_OK) break;
 8006288:	bf00      	nop
 800628a:	e000      	b.n	800628e <put_fat+0x212>
			if (res != FR_OK) break;
 800628c:	bf00      	nop
		}
	}

	return res;
 800628e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3720      	adds	r7, #32
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d905      	bls.n	80062b4 <remove_chain+0x1c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d302      	bcc.n	80062ba <remove_chain+0x22>
		res = FR_INT_ERR;
 80062b4:	2302      	movs	r3, #2
 80062b6:	73fb      	strb	r3, [r7, #15]
 80062b8:	e043      	b.n	8006342 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80062be:	e036      	b.n	800632e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fe21 	bl	8005f0a <get_fat>
 80062c8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d035      	beq.n	800633c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d102      	bne.n	80062dc <remove_chain+0x44>
 80062d6:	2302      	movs	r3, #2
 80062d8:	73fb      	strb	r3, [r7, #15]
 80062da:	e032      	b.n	8006342 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d102      	bne.n	80062ea <remove_chain+0x52>
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e02b      	b.n	8006342 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80062ea:	2200      	movs	r2, #0
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff fec4 	bl	800607c <put_fat>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d120      	bne.n	8006340 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d00f      	beq.n	800632a <remove_chain+0x92>
				fs->free_clust++;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d3c2      	bcc.n	80062c0 <remove_chain+0x28>
 800633a:	e002      	b.n	8006342 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006340:	bf00      	nop
		}
	}

	return res;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10f      	bne.n	800637c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006362:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <create_chain+0x2a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d31c      	bcc.n	80063b0 <create_chain+0x64>
 8006376:	2301      	movs	r3, #1
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	e019      	b.n	80063b0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff fdc3 	bl	8005f0a <get_fat>
 8006384:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d801      	bhi.n	8006390 <create_chain+0x44>
 800638c:	2301      	movs	r3, #1
 800638e:	e076      	b.n	800647e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d101      	bne.n	800639c <create_chain+0x50>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	e070      	b.n	800647e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d201      	bcs.n	80063ac <create_chain+0x60>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	e068      	b.n	800647e <create_chain+0x132>
		scl = clst;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	3301      	adds	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d307      	bcc.n	80063d6 <create_chain+0x8a>
			ncl = 2;
 80063c6:	2302      	movs	r3, #2
 80063c8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d901      	bls.n	80063d6 <create_chain+0x8a>
 80063d2:	2300      	movs	r3, #0
 80063d4:	e053      	b.n	800647e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80063d6:	6979      	ldr	r1, [r7, #20]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff fd96 	bl	8005f0a <get_fat>
 80063de:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00e      	beq.n	8006404 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d002      	beq.n	80063f4 <create_chain+0xa8>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <create_chain+0xac>
			return cs;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	e042      	b.n	800647e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d1d9      	bne.n	80063b4 <create_chain+0x68>
 8006400:	2300      	movs	r3, #0
 8006402:	e03c      	b.n	800647e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006404:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006406:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800640a:	6979      	ldr	r1, [r7, #20]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fe35 	bl	800607c <put_fat>
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <create_chain+0xe4>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d006      	beq.n	8006430 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fe28 	bl	800607c <put_fat>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d11a      	bne.n	800646c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d018      	beq.n	800647c <create_chain+0x130>
			fs->free_clust--;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006450:	1e5a      	subs	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800646a:	e007      	b.n	800647c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d102      	bne.n	8006478 <create_chain+0x12c>
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	e000      	b.n	800647a <create_chain+0x12e>
 8006478:	2301      	movs	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800647c:	697b      	ldr	r3, [r7, #20]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006496:	3304      	adds	r3, #4
 8006498:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	0a5b      	lsrs	r3, r3, #9
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80064a4:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80064a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	613a      	str	r2, [r7, #16]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <clmt_clust+0x3c>
 80064be:	2300      	movs	r3, #0
 80064c0:	e010      	b.n	80064e4 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d307      	bcc.n	80064da <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3304      	adds	r3, #4
 80064d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064d8:	e7e9      	b.n	80064ae <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80064da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4413      	add	r3, r2
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8006508:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d007      	beq.n	8006520 <dir_sdi+0x32>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006516:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	429a      	cmp	r2, r3
 800651e:	d301      	bcc.n	8006524 <dir_sdi+0x36>
		return FR_INT_ERR;
 8006520:	2302      	movs	r3, #2
 8006522:	e074      	b.n	800660e <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10c      	bne.n	8006544 <dir_sdi+0x56>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006530:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006534:	2b03      	cmp	r3, #3
 8006536:	d105      	bne.n	8006544 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800653e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006542:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d111      	bne.n	800656e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006550:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8006554:	461a      	mov	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	4293      	cmp	r3, r2
 800655a:	d301      	bcc.n	8006560 <dir_sdi+0x72>
			return FR_INT_ERR;
 800655c:	2302      	movs	r3, #2
 800655e:	e056      	b.n	800660e <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006566:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e032      	b.n	80065d4 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006574:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800657c:	e01e      	b.n	80065bc <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006584:	6979      	ldr	r1, [r7, #20]
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fcbf 	bl	8005f0a <get_fat>
 800658c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d101      	bne.n	800659a <dir_sdi+0xac>
 8006596:	2301      	movs	r3, #1
 8006598:	e039      	b.n	800660e <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d907      	bls.n	80065b0 <dir_sdi+0xc2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d301      	bcc.n	80065b4 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80065b0:	2302      	movs	r3, #2
 80065b2:	e02c      	b.n	800660e <dir_sdi+0x120>
			idx -= ic;
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d2dc      	bcs.n	800657e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065ca:	6979      	ldr	r1, [r7, #20]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fc7b 	bl	8005ec8 <clust2sect>
 80065d2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <dir_sdi+0xf8>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e013      	b.n	800660e <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	091a      	lsrs	r2, r3, #4
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	441a      	add	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065fa:	461a      	mov	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	015b      	lsls	r3, r3, #5
 8006604:	441a      	add	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006616:	b590      	push	{r4, r7, lr}
 8006618:	b087      	sub	sp, #28
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <dir_next+0x26>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <dir_next+0x2a>
		return FR_NO_FILE;
 800663c:	2304      	movs	r3, #4
 800663e:	e0dd      	b.n	80067fc <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 80c6 	bne.w	80067d8 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800666a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4293      	cmp	r3, r2
 8006674:	f0c0 80b0 	bcc.w	80067d8 <dir_next+0x1c2>
				return FR_NO_FILE;
 8006678:	2304      	movs	r3, #4
 800667a:	e0bf      	b.n	80067fc <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	091b      	lsrs	r3, r3, #4
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8006686:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800668a:	3a01      	subs	r2, #1
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	f040 80a2 	bne.w	80067d8 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f7ff fc31 	bl	8005f0a <get_fat>
 80066a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d801      	bhi.n	80066b4 <dir_next+0x9e>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e0a3      	b.n	80067fc <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d101      	bne.n	80066c0 <dir_next+0xaa>
 80066bc:	2301      	movs	r3, #1
 80066be:	e09d      	b.n	80067fc <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80066c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d374      	bcc.n	80067ba <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <dir_next+0xc4>
 80066d6:	2304      	movs	r3, #4
 80066d8:	e090      	b.n	80067fc <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7ff fe2f 	bl	800634c <create_chain>
 80066ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <dir_next+0xe4>
 80066f6:	2307      	movs	r3, #7
 80066f8:	e080      	b.n	80067fc <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <dir_next+0xee>
 8006700:	2302      	movs	r3, #2
 8006702:	e07b      	b.n	80067fc <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d101      	bne.n	8006710 <dir_next+0xfa>
 800670c:	2301      	movs	r3, #1
 800670e:	e075      	b.n	80067fc <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fab2 	bl	8005c80 <sync_window>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <dir_next+0x110>
 8006722:	2301      	movs	r3, #1
 8006724:	e06a      	b.n	80067fc <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800672c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff f896 	bl	8005864 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 8006744:	6979      	ldr	r1, [r7, #20]
 8006746:	4610      	mov	r0, r2
 8006748:	f7ff fbbe 	bl	8005ec8 <clust2sect>
 800674c:	4603      	mov	r3, r0
 800674e:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	e01b      	b.n	8006790 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fa88 	bl	8005c80 <sync_window>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <dir_next+0x164>
 8006776:	2301      	movs	r3, #1
 8006778:	e040      	b.n	80067fc <dir_next+0x1e6>
						dp->fs->winsect++;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006780:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8006784:	3201      	adds	r2, #1
 8006786:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3301      	adds	r3, #1
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006796:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800679a:	461a      	mov	r2, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	4293      	cmp	r3, r2
 80067a0:	d3da      	bcc.n	8006758 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067a8:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	1a8a      	subs	r2, r1, r2
 80067b6:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067c8:	6979      	ldr	r1, [r7, #20]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fb7c 	bl	8005ec8 <clust2sect>
 80067d0:	4602      	mov	r2, r0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80067e8:	461a      	mov	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	015b      	lsls	r3, r3, #5
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	bd90      	pop	{r4, r7, pc}

08006804 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800680e:	2100      	movs	r1, #0
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fe6c 	bl	80064ee <dir_sdi>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d131      	bne.n	8006884 <dir_alloc+0x80>
		n = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7ff fa6d 	bl	8005d12 <move_window>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d11f      	bne.n	8006882 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2be5      	cmp	r3, #229	@ 0xe5
 800684c:	d005      	beq.n	800685a <dir_alloc+0x56>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d107      	bne.n	800686a <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	3301      	adds	r3, #1
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d102      	bne.n	800686e <dir_alloc+0x6a>
 8006868:	e00c      	b.n	8006884 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800686e:	2101      	movs	r1, #1
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff fed0 	bl	8006616 <dir_next>
 8006876:	4603      	mov	r3, r0
 8006878:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0d1      	beq.n	8006824 <dir_alloc+0x20>
 8006880:	e000      	b.n	8006884 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8006882:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d101      	bne.n	800688e <dir_alloc+0x8a>
 800688a:	2307      	movs	r3, #7
 800688c:	73fb      	strb	r3, [r7, #15]
	return res;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	331b      	adds	r3, #27
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	b21a      	sxth	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	331a      	adds	r3, #26
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	b21b      	sxth	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b21b      	sxth	r3, r3
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d10f      	bne.n	80068e6 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	3315      	adds	r3, #21
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	b21a      	sxth	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b21b      	sxth	r3, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	b21b      	sxth	r3, r3
 80068dc:	b29b      	uxth	r3, r3
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

	return cl;
 80068e6:	68fb      	ldr	r3, [r7, #12]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr

080068f2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	331a      	adds	r3, #26
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	331b      	adds	r3, #27
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	0c1a      	lsrs	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3314      	adds	r3, #20
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	b29b      	uxth	r3, r3
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	b29a      	uxth	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3315      	adds	r3, #21
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b086      	sub	sp, #24
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006946:	2100      	movs	r1, #0
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fdd0 	bl	80064ee <dir_sdi>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <dir_find+0x1e>
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	e03b      	b.n	80069d4 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006968:	4619      	mov	r1, r3
 800696a:	4610      	mov	r0, r2
 800696c:	f7ff f9d1 	bl	8005d12 <move_window>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d128      	bne.n	80069cc <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006980:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <dir_find+0x56>
 800698e:	2304      	movs	r3, #4
 8006990:	75fb      	strb	r3, [r7, #23]
 8006992:	e01e      	b.n	80069d2 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	330b      	adds	r3, #11
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <dir_find+0x7a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80069a8:	220b      	movs	r2, #11
 80069aa:	4619      	mov	r1, r3
 80069ac:	6938      	ldr	r0, [r7, #16]
 80069ae:	f7fe ff73 	bl	8005898 <mem_cmp>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff fe2b 	bl	8006616 <dir_next>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0c8      	beq.n	800695c <dir_find+0x1e>
 80069ca:	e002      	b.n	80069d2 <dir_find+0x94>
		if (res != FR_OK) break;
 80069cc:	bf00      	nop
 80069ce:	e000      	b.n	80069d2 <dir_find+0x94>
			break;
 80069d0:	bf00      	nop

	return res;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80069e4:	2101      	movs	r1, #1
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ff0c 	bl	8006804 <dir_alloc>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d126      	bne.n	8006a44 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7ff f984 	bl	8005d12 <move_window>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d117      	bne.n	8006a44 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe ff20 	bl	8005864 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006a30:	220b      	movs	r2, #11
 8006a32:	4619      	mov	r1, r3
 8006a34:	f7fe fef8 	bl	8005828 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e002      	b.n	8006a68 <create_name+0x18>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006a6e:	d0f8      	beq.n	8006a62 <create_name+0x12>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a76:	d0f4      	beq.n	8006a62 <create_name+0x12>
	sfn = dp->fn;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006a7e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006a80:	220b      	movs	r2, #11
 8006a82:	2120      	movs	r1, #32
 8006a84:	68b8      	ldr	r0, [r7, #8]
 8006a86:	f7fe feed 	bl	8005864 <mem_set>
	si = i = b = 0; ni = 8;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	2308      	movs	r3, #8
 8006a98:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	617a      	str	r2, [r7, #20]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006aa8:	7fbb      	ldrb	r3, [r7, #30]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d953      	bls.n	8006b56 <create_name+0x106>
 8006aae:	7fbb      	ldrb	r3, [r7, #30]
 8006ab0:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ab2:	d050      	beq.n	8006b56 <create_name+0x106>
 8006ab4:	7fbb      	ldrb	r3, [r7, #30]
 8006ab6:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ab8:	d04d      	beq.n	8006b56 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006aba:	7fbb      	ldrb	r3, [r7, #30]
 8006abc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006abe:	d003      	beq.n	8006ac8 <create_name+0x78>
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d30f      	bcc.n	8006ae8 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d102      	bne.n	8006ad4 <create_name+0x84>
 8006ace:	7fbb      	ldrb	r3, [r7, #30]
 8006ad0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ad2:	d001      	beq.n	8006ad8 <create_name+0x88>
 8006ad4:	2306      	movs	r3, #6
 8006ad6:	e073      	b.n	8006bc0 <create_name+0x170>
			i = 8; ni = 11;
 8006ad8:	2308      	movs	r3, #8
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	230b      	movs	r3, #11
 8006ade:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006ae0:	7ffb      	ldrb	r3, [r7, #31]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e035      	b.n	8006b54 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ae8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da08      	bge.n	8006b02 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006af0:	7ffb      	ldrb	r3, [r7, #31]
 8006af2:	f043 0303 	orr.w	r3, r3, #3
 8006af6:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006af8:	7fbb      	ldrb	r3, [r7, #30]
 8006afa:	3b80      	subs	r3, #128	@ 0x80
 8006afc:	4a32      	ldr	r2, [pc, #200]	@ (8006bc8 <create_name+0x178>)
 8006afe:	5cd3      	ldrb	r3, [r2, r3]
 8006b00:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006b02:	7fbb      	ldrb	r3, [r7, #30]
 8006b04:	4619      	mov	r1, r3
 8006b06:	4831      	ldr	r0, [pc, #196]	@ (8006bcc <create_name+0x17c>)
 8006b08:	f7fe feec 	bl	80058e4 <chk_chr>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <create_name+0xc6>
				return FR_INVALID_NAME;
 8006b12:	2306      	movs	r3, #6
 8006b14:	e054      	b.n	8006bc0 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006b16:	7fbb      	ldrb	r3, [r7, #30]
 8006b18:	2b40      	cmp	r3, #64	@ 0x40
 8006b1a:	d907      	bls.n	8006b2c <create_name+0xdc>
 8006b1c:	7fbb      	ldrb	r3, [r7, #30]
 8006b1e:	2b5a      	cmp	r3, #90	@ 0x5a
 8006b20:	d804      	bhi.n	8006b2c <create_name+0xdc>
				b |= 2;
 8006b22:	7ffb      	ldrb	r3, [r7, #31]
 8006b24:	f043 0302 	orr.w	r3, r3, #2
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e00c      	b.n	8006b46 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006b2c:	7fbb      	ldrb	r3, [r7, #30]
 8006b2e:	2b60      	cmp	r3, #96	@ 0x60
 8006b30:	d909      	bls.n	8006b46 <create_name+0xf6>
 8006b32:	7fbb      	ldrb	r3, [r7, #30]
 8006b34:	2b7a      	cmp	r3, #122	@ 0x7a
 8006b36:	d806      	bhi.n	8006b46 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006b38:	7ffb      	ldrb	r3, [r7, #31]
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	7fbb      	ldrb	r3, [r7, #30]
 8006b42:	3b20      	subs	r3, #32
 8006b44:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	613a      	str	r2, [r7, #16]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4413      	add	r3, r2
 8006b50:	7fba      	ldrb	r2, [r7, #30]
 8006b52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006b54:	e7a1      	b.n	8006a9a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	441a      	add	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006b60:	7fbb      	ldrb	r3, [r7, #30]
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d801      	bhi.n	8006b6a <create_name+0x11a>
 8006b66:	2304      	movs	r3, #4
 8006b68:	e000      	b.n	8006b6c <create_name+0x11c>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <create_name+0x128>
 8006b74:	2306      	movs	r3, #6
 8006b76:	e023      	b.n	8006bc0 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2be5      	cmp	r3, #229	@ 0xe5
 8006b7e:	d102      	bne.n	8006b86 <create_name+0x136>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2205      	movs	r2, #5
 8006b84:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d102      	bne.n	8006b92 <create_name+0x142>
 8006b8c:	7ffb      	ldrb	r3, [r7, #31]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006b92:	7ffb      	ldrb	r3, [r7, #31]
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d103      	bne.n	8006ba4 <create_name+0x154>
 8006b9c:	7fbb      	ldrb	r3, [r7, #30]
 8006b9e:	f043 0310 	orr.w	r3, r3, #16
 8006ba2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006ba4:	7ffb      	ldrb	r3, [r7, #31]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d103      	bne.n	8006bb6 <create_name+0x166>
 8006bae:	7fbb      	ldrb	r3, [r7, #30]
 8006bb0:	f043 0308 	orr.w	r3, r3, #8
 8006bb4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	330b      	adds	r3, #11
 8006bba:	7fba      	ldrb	r2, [r7, #30]
 8006bbc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006bbe:	2300      	movs	r3, #0
#endif
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	0800b9b4 	.word	0x0800b9b4
 8006bcc:	0800b6c8 	.word	0x0800b6c8

08006bd0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b2f      	cmp	r3, #47	@ 0x2f
 8006be0:	d003      	beq.n	8006bea <follow_path+0x1a>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b5c      	cmp	r3, #92	@ 0x5c
 8006be8:	d102      	bne.n	8006bf0 <follow_path+0x20>
		path++;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3301      	adds	r3, #1
 8006bee:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b1f      	cmp	r3, #31
 8006bfe:	d80a      	bhi.n	8006c16 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006c00:	2100      	movs	r1, #0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fc73 	bl	80064ee <dir_sdi>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006c14:	e045      	b.n	8006ca2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c16:	463b      	mov	r3, r7
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff ff18 	bl	8006a50 <create_name>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d136      	bne.n	8006c98 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fe87 	bl	800693e <dir_find>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006c3a:	7adb      	ldrb	r3, [r3, #11]
 8006c3c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d128      	bne.n	8006c9c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d123      	bne.n	8006c9c <follow_path+0xcc>
 8006c54:	2305      	movs	r3, #5
 8006c56:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006c58:	e020      	b.n	8006c9c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11d      	bne.n	8006ca0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c6a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	330b      	adds	r3, #11
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 0310 	and.w	r3, r3, #16
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006c7a:	2305      	movs	r3, #5
 8006c7c:	73fb      	strb	r3, [r7, #15]
 8006c7e:	e010      	b.n	8006ca2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fe05 	bl	8006898 <ld_clust>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c96:	e7be      	b.n	8006c16 <follow_path+0x46>
			if (res != FR_OK) break;
 8006c98:	bf00      	nop
 8006c9a:	e002      	b.n	8006ca2 <follow_path+0xd2>
				break;
 8006c9c:	bf00      	nop
 8006c9e:	e000      	b.n	8006ca2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ca0:	bf00      	nop
		}
	}

	return res;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d031      	beq.n	8006d26 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e002      	b.n	8006cd0 <get_ldnumber+0x24>
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d903      	bls.n	8006ce0 <get_ldnumber+0x34>
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b3a      	cmp	r3, #58	@ 0x3a
 8006cde:	d1f4      	bne.n	8006cca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b3a      	cmp	r3, #58	@ 0x3a
 8006ce6:	d11c      	bne.n	8006d22 <get_ldnumber+0x76>
			tp = *path;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	60fa      	str	r2, [r7, #12]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	3b30      	subs	r3, #48	@ 0x30
 8006cf8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b09      	cmp	r3, #9
 8006cfe:	d80e      	bhi.n	8006d1e <get_ldnumber+0x72>
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d10a      	bne.n	8006d1e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d107      	bne.n	8006d1e <get_ldnumber+0x72>
					vol = (int)i;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	3301      	adds	r3, #1
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	e002      	b.n	8006d28 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d26:	693b      	ldr	r3, [r7, #16]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr
	...

08006d34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fe ffdd 	bl	8005d12 <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <check_fs+0x2e>
		return 3;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e04a      	b.n	8006df8 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d68:	3301      	adds	r3, #1
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	b21a      	sxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006d76:	b21b      	sxth	r3, r3
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	b21b      	sxth	r3, r3
 8006d7c:	4a20      	ldr	r2, [pc, #128]	@ (8006e00 <check_fs+0xcc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d001      	beq.n	8006d86 <check_fs+0x52>
		return 2;
 8006d82:	2302      	movs	r3, #2
 8006d84:	e038      	b.n	8006df8 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3336      	adds	r3, #54	@ 0x36
 8006d8a:	3303      	adds	r3, #3
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	061a      	lsls	r2, r3, #24
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3336      	adds	r3, #54	@ 0x36
 8006d94:	3302      	adds	r3, #2
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3336      	adds	r3, #54	@ 0x36
 8006da0:	3301      	adds	r3, #1
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	4313      	orrs	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006db4:	4a13      	ldr	r2, [pc, #76]	@ (8006e04 <check_fs+0xd0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d101      	bne.n	8006dbe <check_fs+0x8a>
		return 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e01c      	b.n	8006df8 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3352      	adds	r3, #82	@ 0x52
 8006dc2:	3303      	adds	r3, #3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	061a      	lsls	r2, r3, #24
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3352      	adds	r3, #82	@ 0x52
 8006dcc:	3302      	adds	r3, #2
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3352      	adds	r3, #82	@ 0x52
 8006dd8:	3301      	adds	r3, #1
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	4313      	orrs	r3, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006dec:	4a05      	ldr	r2, [pc, #20]	@ (8006e04 <check_fs+0xd0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d101      	bne.n	8006df6 <check_fs+0xc2>
		return 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e000      	b.n	8006df8 <check_fs+0xc4>

	return 1;
 8006df6:	2301      	movs	r3, #1
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	ffffaa55 	.word	0xffffaa55
 8006e04:	00544146 	.word	0x00544146

08006e08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b096      	sub	sp, #88	@ 0x58
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e1c:	68b8      	ldr	r0, [r7, #8]
 8006e1e:	f7ff ff45 	bl	8006cac <get_ldnumber>
 8006e22:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	da01      	bge.n	8006e2e <find_volume+0x26>
 8006e2a:	230b      	movs	r3, #11
 8006e2c:	e2a8      	b.n	8007380 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006e2e:	4a9d      	ldr	r2, [pc, #628]	@ (80070a4 <find_volume+0x29c>)
 8006e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <find_volume+0x3a>
 8006e3e:	230c      	movs	r3, #12
 8006e40:	e29e      	b.n	8007380 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e46:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fc47 	bl	80056ec <disk_status>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10c      	bne.n	8006e8a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <find_volume+0x7e>
 8006e76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006e82:	230a      	movs	r3, #10
 8006e84:	e27c      	b.n	8007380 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8006e86:	2300      	movs	r3, #0
 8006e88:	e27a      	b.n	8007380 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e98:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fc3c 	bl	8005720 <disk_initialize>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006eae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e260      	b.n	8007380 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <find_volume+0xcc>
 8006ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006ed0:	230a      	movs	r3, #10
 8006ed2:	e255      	b.n	8007380 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006ed8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006eda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006edc:	f7ff ff2a 	bl	8006d34 <check_fs>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d153      	bne.n	8006f96 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006eee:	2300      	movs	r3, #0
 8006ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ef2:	e028      	b.n	8006f46 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006efe:	4413      	add	r3, r2
 8006f00:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	3304      	adds	r3, #4
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d012      	beq.n	8006f32 <find_volume+0x12a>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	330b      	adds	r3, #11
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	061a      	lsls	r2, r3, #24
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	330a      	adds	r3, #10
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	3309      	adds	r3, #9
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	4313      	orrs	r3, r2
 8006f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f2a:	3208      	adds	r2, #8
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	e000      	b.n	8006f34 <find_volume+0x12c>
 8006f32:	2200      	movs	r2, #0
 8006f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	3358      	adds	r3, #88	@ 0x58
 8006f3a:	443b      	add	r3, r7
 8006f3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f42:	3301      	adds	r3, #1
 8006f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d9d3      	bls.n	8006ef4 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <find_volume+0x154>
 8006f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	3358      	adds	r3, #88	@ 0x58
 8006f62:	443b      	add	r3, r7
 8006f64:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f68:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <find_volume+0x174>
 8006f70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f74:	f7ff fede 	bl	8006d34 <check_fs>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	e000      	b.n	8006f7e <find_volume+0x176>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006f82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <find_volume+0x18e>
 8006f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d9e2      	bls.n	8006f5c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d101      	bne.n	8006fa2 <find_volume+0x19a>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e1ee      	b.n	8007380 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <find_volume+0x1a6>
 8006faa:	230d      	movs	r3, #13
 8006fac:	e1e8      	b.n	8007380 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	7b1b      	ldrb	r3, [r3, #12]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb8:	7adb      	ldrb	r3, [r3, #11]
 8006fba:	b21b      	sxth	r3, r3
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	b21b      	sxth	r3, r3
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc4:	d001      	beq.n	8006fca <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8006fc6:	230d      	movs	r3, #13
 8006fc8:	e1da      	b.n	8007380 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fcc:	7ddb      	ldrb	r3, [r3, #23]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b21a      	sxth	r2, r3
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd4:	7d9b      	ldrb	r3, [r3, #22]
 8006fd6:	b21b      	sxth	r3, r3
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	b21b      	sxth	r3, r3
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d112      	bne.n	800700c <find_volume+0x204>
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006fec:	061a      	lsls	r2, r3, #24
 8006fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006ff4:	041b      	lsls	r3, r3, #16
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	4313      	orrs	r3, r2
 8007002:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007004:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007008:	4313      	orrs	r3, r2
 800700a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007010:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	7c1a      	ldrb	r2, [r3, #16]
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007024:	2b01      	cmp	r3, #1
 8007026:	d006      	beq.n	8007036 <find_volume+0x22e>
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800702e:	2b02      	cmp	r3, #2
 8007030:	d001      	beq.n	8007036 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8007032:	230d      	movs	r3, #13
 8007034:	e1a4      	b.n	8007380 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800703c:	461a      	mov	r2, r3
 800703e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007040:	fb02 f303 	mul.w	r3, r2, r3
 8007044:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007048:	7b5a      	ldrb	r2, [r3, #13]
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007052:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <find_volume+0x268>
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007060:	461a      	mov	r2, r3
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007068:	3b01      	subs	r3, #1
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8007070:	230d      	movs	r3, #13
 8007072:	e185      	b.n	8007380 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007076:	7c9b      	ldrb	r3, [r3, #18]
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	b21a      	sxth	r2, r3
 800707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707e:	7c5b      	ldrb	r3, [r3, #17]
 8007080:	b21b      	sxth	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b21b      	sxth	r3, r3
 8007086:	b29a      	uxth	r2, r3
 8007088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708a:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800709e:	230d      	movs	r3, #13
 80070a0:	e16e      	b.n	8007380 <find_volume+0x578>
 80070a2:	bf00      	nop
 80070a4:	200003f4 	.word	0x200003f4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80070a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070aa:	7d1b      	ldrb	r3, [r3, #20]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	b21a      	sxth	r2, r3
 80070b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b2:	7cdb      	ldrb	r3, [r3, #19]
 80070b4:	b21b      	sxth	r3, r3
 80070b6:	4313      	orrs	r3, r2
 80070b8:	b21b      	sxth	r3, r3
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80070be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d112      	bne.n	80070ea <find_volume+0x2e2>
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80070ca:	061a      	lsls	r2, r3, #24
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80070d2:	041b      	lsls	r3, r3, #16
 80070d4:	431a      	orrs	r2, r3
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	4313      	orrs	r3, r2
 80070e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80070ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ec:	7bdb      	ldrb	r3, [r3, #15]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	b21a      	sxth	r2, r3
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	7b9b      	ldrb	r3, [r3, #14]
 80070f6:	b21b      	sxth	r3, r3
 80070f8:	4313      	orrs	r3, r2
 80070fa:	b21b      	sxth	r3, r3
 80070fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80070fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <find_volume+0x300>
 8007104:	230d      	movs	r3, #13
 8007106:	e13b      	b.n	8007380 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007108:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800710a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800710c:	4413      	add	r3, r2
 800710e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007110:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8007114:	0912      	lsrs	r2, r2, #4
 8007116:	b292      	uxth	r2, r2
 8007118:	4413      	add	r3, r2
 800711a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800711c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	429a      	cmp	r2, r3
 8007122:	d201      	bcs.n	8007128 <find_volume+0x320>
 8007124:	230d      	movs	r3, #13
 8007126:	e12b      	b.n	8007380 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800712a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007130:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007134:	fbb3 f3f2 	udiv	r3, r3, r2
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <find_volume+0x33c>
 8007140:	230d      	movs	r3, #13
 8007142:	e11d      	b.n	8007380 <find_volume+0x578>
	fmt = FS_FAT12;
 8007144:	2301      	movs	r3, #1
 8007146:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007150:	4293      	cmp	r3, r2
 8007152:	d902      	bls.n	800715a <find_volume+0x352>
 8007154:	2302      	movs	r3, #2
 8007156:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007160:	4293      	cmp	r3, r2
 8007162:	d902      	bls.n	800716a <find_volume+0x362>
 8007164:	2303      	movs	r3, #3
 8007166:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	1c9a      	adds	r2, r3, #2
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007178:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800717c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800717e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007180:	441a      	add	r2, r3
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007188:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	441a      	add	r2, r3
 800718e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007190:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8007194:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007198:	2b03      	cmp	r3, #3
 800719a:	d121      	bne.n	80071e0 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <find_volume+0x3a2>
 80071a6:	230d      	movs	r3, #13
 80071a8:	e0ea      	b.n	8007380 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80071b0:	061a      	lsls	r2, r3, #24
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	431a      	orrs	r2, r3
 80071bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	4313      	orrs	r3, r2
 80071c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071c8:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80071cc:	431a      	orrs	r2, r3
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80071d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80071de:	e025      	b.n	800722c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <find_volume+0x3e6>
 80071ea:	230d      	movs	r3, #13
 80071ec:	e0c8      	b.n	8007380 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80071f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f6:	441a      	add	r2, r3
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80071fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007202:	2b02      	cmp	r3, #2
 8007204:	d104      	bne.n	8007210 <find_volume+0x408>
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	e00c      	b.n	800722a <find_volume+0x422>
 8007210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007212:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007216:	4613      	mov	r3, r2
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	4413      	add	r3, r2
 800721c:	085a      	lsrs	r2, r3, #1
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800722a:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800722c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007234:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007238:	0a5b      	lsrs	r3, r3, #9
 800723a:	429a      	cmp	r2, r3
 800723c:	d201      	bcs.n	8007242 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800723e:	230d      	movs	r3, #13
 8007240:	e09e      	b.n	8007380 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725a:	2280      	movs	r2, #128	@ 0x80
 800725c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007260:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007264:	2b03      	cmp	r3, #3
 8007266:	d177      	bne.n	8007358 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	b21a      	sxth	r2, r3
 8007272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007274:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007278:	b21b      	sxth	r3, r3
 800727a:	4313      	orrs	r3, r2
 800727c:	b21b      	sxth	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d16a      	bne.n	8007358 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007284:	3301      	adds	r3, #1
 8007286:	4619      	mov	r1, r3
 8007288:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800728a:	f7fe fd42 	bl	8005d12 <move_window>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d161      	bne.n	8007358 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	b21a      	sxth	r2, r3
 80072a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80072ac:	b21b      	sxth	r3, r3
 80072ae:	4313      	orrs	r3, r2
 80072b0:	b21b      	sxth	r3, r3
 80072b2:	4a35      	ldr	r2, [pc, #212]	@ (8007388 <find_volume+0x580>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d14f      	bne.n	8007358 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80072b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ba:	78db      	ldrb	r3, [r3, #3]
 80072bc:	061a      	lsls	r2, r3, #24
 80072be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c0:	789b      	ldrb	r3, [r3, #2]
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	431a      	orrs	r2, r3
 80072c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	4313      	orrs	r3, r2
 80072ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	4a2d      	ldr	r2, [pc, #180]	@ (800738c <find_volume+0x584>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d13e      	bne.n	8007358 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80072e0:	061a      	lsls	r2, r3, #24
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80072e8:	041b      	lsls	r3, r3, #16
 80072ea:	431a      	orrs	r2, r3
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	4313      	orrs	r3, r2
 80072f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072f8:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 80072fc:	4313      	orrs	r3, r2
 80072fe:	4a24      	ldr	r2, [pc, #144]	@ (8007390 <find_volume+0x588>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d129      	bne.n	8007358 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007306:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800730a:	061a      	lsls	r2, r3, #24
 800730c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	431a      	orrs	r2, r3
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	4313      	orrs	r3, r2
 8007320:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007322:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8007326:	431a      	orrs	r2, r3
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8007334:	061a      	lsls	r2, r3, #24
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	431a      	orrs	r2, r3
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	4313      	orrs	r3, r2
 800734a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800734c:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8007350:	431a      	orrs	r2, r3
 8007352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007354:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800735e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <find_volume+0x58c>)
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	3301      	adds	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	4b0a      	ldr	r3, [pc, #40]	@ (8007394 <find_volume+0x58c>)
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	4b09      	ldr	r3, [pc, #36]	@ (8007394 <find_volume+0x58c>)
 8007370:	881a      	ldrh	r2, [r3, #0]
 8007372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007374:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007378:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800737a:	f7fe fc57 	bl	8005c2c <clear_lock>
#endif

	return FR_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3758      	adds	r7, #88	@ 0x58
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	ffffaa55 	.word	0xffffaa55
 800738c:	41615252 	.word	0x41615252
 8007390:	61417272 	.word	0x61417272
 8007394:	200003f8 	.word	0x200003f8

08007398 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d022      	beq.n	80073f0 <validate+0x58>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01d      	beq.n	80073f0 <validate+0x58>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80073ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d016      	beq.n	80073f0 <validate+0x58>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80073c8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d10c      	bne.n	80073f0 <validate+0x58>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80073dc:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe f983 	bl	80056ec <disk_status>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80073f0:	2309      	movs	r3, #9
 80073f2:	e000      	b.n	80073f6 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007412:	f107 0310 	add.w	r3, r7, #16
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fc48 	bl	8006cac <get_ldnumber>
 800741c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2b00      	cmp	r3, #0
 8007422:	da01      	bge.n	8007428 <f_mount+0x28>
 8007424:	230b      	movs	r3, #11
 8007426:	e02d      	b.n	8007484 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007428:	4a18      	ldr	r2, [pc, #96]	@ (800748c <f_mount+0x8c>)
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007430:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007438:	69b8      	ldr	r0, [r7, #24]
 800743a:	f7fe fbf7 	bl	8005c2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	490d      	ldr	r1, [pc, #52]	@ (800748c <f_mount+0x8c>)
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <f_mount+0x6a>
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d001      	beq.n	800746e <f_mount+0x6e>
 800746a:	2300      	movs	r3, #0
 800746c:	e00a      	b.n	8007484 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800746e:	f107 0108 	add.w	r1, r7, #8
 8007472:	f107 030c 	add.w	r3, r7, #12
 8007476:	2200      	movs	r2, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fcc5 	bl	8006e08 <find_volume>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007482:	7dfb      	ldrb	r3, [r7, #23]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3720      	adds	r7, #32
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200003f4 	.word	0x200003f4

08007490 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8007496:	af00      	add	r7, sp, #0
 8007498:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800749c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80074a0:	6018      	str	r0, [r3, #0]
 80074a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074a6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80074aa:	6019      	str	r1, [r3, #0]
 80074ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074b0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80074b4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80074b6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074ba:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <f_open+0x38>
 80074c4:	2309      	movs	r3, #9
 80074c6:	e253      	b.n	8007970 <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 80074c8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074cc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80074d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074dc:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80074e0:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80074e4:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80074e8:	7812      	ldrb	r2, [r2, #0]
 80074ea:	f002 021f 	and.w	r2, r2, #31
 80074ee:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80074f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074f4:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	f023 0301 	bic.w	r3, r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	f107 0108 	add.w	r1, r7, #8
 8007504:	f107 0320 	add.w	r3, r7, #32
 8007508:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fc7b 	bl	8006e08 <find_volume>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007518:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800751c:	2b00      	cmp	r3, #0
 800751e:	f040 8225 	bne.w	800796c <f_open+0x4dc>
		INIT_BUF(dj);
 8007522:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007526:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800752a:	f107 0214 	add.w	r2, r7, #20
 800752e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8007532:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007536:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	f107 0320 	add.w	r3, r7, #32
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fb44 	bl	8006bd0 <follow_path>
 8007548:	4603      	mov	r3, r0
 800754a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 800754e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007552:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007556:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800755a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800755e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007562:	2b00      	cmp	r3, #0
 8007564:	d11b      	bne.n	800759e <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 8007566:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800756e:	2306      	movs	r3, #6
 8007570:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8007574:	e013      	b.n	800759e <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007576:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800757a:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	bf8c      	ite	hi
 8007584:	2301      	movhi	r3, #1
 8007586:	2300      	movls	r3, #0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	461a      	mov	r2, r3
 800758c:	f107 0320 	add.w	r3, r7, #32
 8007590:	4611      	mov	r1, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe f9c0 	bl	8005918 <chk_lock>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800759e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075a2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 031c 	and.w	r3, r3, #28
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 80e6 	beq.w	800777e <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 80075b2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d027      	beq.n	800760a <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80075ba:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d10e      	bne.n	80075e0 <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075c2:	f7fe fa15 	bl	80059f0 <enq_lock>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d006      	beq.n	80075da <f_open+0x14a>
 80075cc:	f107 0320 	add.w	r3, r7, #32
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fa03 	bl	80069dc <dir_register>
 80075d6:	4603      	mov	r3, r0
 80075d8:	e000      	b.n	80075dc <f_open+0x14c>
 80075da:	2312      	movs	r3, #18
 80075dc:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075e0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075e4:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80075e8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80075ec:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	f042 0208 	orr.w	r2, r2, #8
 80075f6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80075f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075fc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007600:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007604:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8007608:	e017      	b.n	800763a <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800760a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800760e:	330b      	adds	r3, #11
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	f003 0311 	and.w	r3, r3, #17
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <f_open+0x192>
					res = FR_DENIED;
 800761a:	2307      	movs	r3, #7
 800761c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8007620:	e00b      	b.n	800763a <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007622:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007626:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <f_open+0x1aa>
						res = FR_EXIST;
 8007634:	2308      	movs	r3, #8
 8007636:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800763a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800763e:	2b00      	cmp	r3, #0
 8007640:	f040 80c1 	bne.w	80077c6 <f_open+0x336>
 8007644:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007648:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 80b7 	beq.w	80077c6 <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 8007658:	f7fe f840 	bl	80056dc <get_fattime>
 800765c:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007660:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8007664:	330e      	adds	r3, #14
 8007666:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007672:	b29b      	uxth	r3, r3
 8007674:	0a1b      	lsrs	r3, r3, #8
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800767c:	330f      	adds	r3, #15
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007686:	0c1a      	lsrs	r2, r3, #16
 8007688:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800768c:	3310      	adds	r3, #16
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8007696:	0e1a      	lsrs	r2, r3, #24
 8007698:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800769c:	3311      	adds	r3, #17
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80076a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80076a6:	330b      	adds	r3, #11
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80076ac:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80076b0:	331c      	adds	r3, #28
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80076ba:	331d      	adds	r3, #29
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80076c4:	331e      	adds	r3, #30
 80076c6:	2200      	movs	r2, #0
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80076ce:	331f      	adds	r3, #31
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80076d4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076d8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80076dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80076e0:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff f8d7 	bl	8006898 <ld_clust>
 80076ea:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80076ee:	2100      	movs	r1, #0
 80076f0:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 80076f4:	f7ff f8fd 	bl	80068f2 <st_clust>
				dj.fs->wflag = 1;
 80076f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076fc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007700:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800770a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800770e:	2b00      	cmp	r3, #0
 8007710:	d059      	beq.n	80077c6 <f_open+0x336>
					dw = dj.fs->winsect;
 8007712:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007716:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800771a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800771e:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8007722:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 8007726:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800772a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800772e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007732:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fdae 	bl	8006298 <remove_chain>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 8007742:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007746:	2b00      	cmp	r3, #0
 8007748:	d13d      	bne.n	80077c6 <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800774a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800774e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007752:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007756:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 800775a:	3a01      	subs	r2, #1
 800775c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 8007760:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007764:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007768:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800776c:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe face 	bl	8005d12 <move_window>
 8007776:	4603      	mov	r3, r0
 8007778:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800777c:	e023      	b.n	80077c6 <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800777e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11f      	bne.n	80077c6 <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007786:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800778a:	330b      	adds	r3, #11
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <f_open+0x30e>
					res = FR_NO_FILE;
 8007796:	2304      	movs	r3, #4
 8007798:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800779c:	e013      	b.n	80077c6 <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800779e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077a2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <f_open+0x336>
 80077b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80077b4:	330b      	adds	r3, #11
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <f_open+0x336>
						res = FR_DENIED;
 80077c0:	2307      	movs	r3, #7
 80077c2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80077c6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d151      	bne.n	8007872 <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80077ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077d2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <f_open+0x368>
				mode |= FA__WRITTEN;
 80077e0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077e4:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80077e8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80077ec:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80077f0:	7812      	ldrb	r2, [r2, #0]
 80077f2:	f042 0220 	orr.w	r2, r2, #32
 80077f6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80077f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077fc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007800:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007804:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8007808:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800780c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8007816:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800781a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8007824:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007828:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800782c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b01      	cmp	r3, #1
 8007834:	bf8c      	ite	hi
 8007836:	2301      	movhi	r3, #1
 8007838:	2300      	movls	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	f107 0320 	add.w	r3, r7, #32
 8007842:	4611      	mov	r1, r2
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe f8f7 	bl	8005a38 <inc_lock>
 800784a:	4602      	mov	r2, r0
 800784c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007850:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800785a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800785e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8007868:	2b00      	cmp	r3, #0
 800786a:	d102      	bne.n	8007872 <f_open+0x3e2>
 800786c:	2302      	movs	r3, #2
 800786e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007872:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d178      	bne.n	800796c <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 800787a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800787e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007888:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 8007892:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007896:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80078a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80078a6:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80078aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80078ae:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fff0 	bl	8006898 <ld_clust>
 80078b8:	4602      	mov	r2, r0
 80078ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80078be:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80078c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80078cc:	331f      	adds	r3, #31
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	061a      	lsls	r2, r3, #24
 80078d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80078d6:	331e      	adds	r3, #30
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	431a      	orrs	r2, r3
 80078de:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80078e2:	331d      	adds	r3, #29
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80078ee:	321c      	adds	r2, #28
 80078f0:	7812      	ldrb	r2, [r2, #0]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80078f8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 8007902:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007906:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8007912:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007916:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007922:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007926:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007932:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007936:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800793a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800793e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007942:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 800794c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007950:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800795a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800795e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007962:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800796c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8007970:	4618      	mov	r0, r3
 8007972:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b08a      	sub	sp, #40	@ 0x28
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7ff fd00 	bl	8007398 <validate>
 8007998:	4603      	mov	r3, r0
 800799a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <f_write+0x2c>
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	e192      	b.n	8007ccc <f_write+0x352>
	if (fp->err)							/* Check error */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80079b6:	e189      	b.n	8007ccc <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80079c6:	2307      	movs	r3, #7
 80079c8:	e180      	b.n	8007ccc <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	441a      	add	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80079da:	429a      	cmp	r2, r3
 80079dc:	f080 8158 	bcs.w	8007c90 <f_write+0x316>
 80079e0:	2300      	movs	r3, #0
 80079e2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80079e4:	e154      	b.n	8007c90 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80079ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f040 8114 	bne.w	8007c1e <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80079fc:	0a5b      	lsrs	r3, r3, #9
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007a06:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	4013      	ands	r3, r2
 8007a10:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007a12:	7dbb      	ldrb	r3, [r7, #22]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d151      	bne.n	8007abc <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10f      	bne.n	8007a42 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d121      	bne.n	8007a74 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fc87 	bl	800634c <create_chain>
 8007a3e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a40:	e018      	b.n	8007a74 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007a52:	4619      	mov	r1, r3
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f7fe fd16 	bl	8006486 <clmt_clust>
 8007a5a:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a5c:	e00a      	b.n	8007a74 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7fe fc6d 	bl	800634c <create_chain>
 8007a72:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 810f 	beq.w	8007c9a <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d105      	bne.n	8007a8e <f_write+0x114>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2202      	movs	r2, #2
 8007a86:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e11e      	b.n	8007ccc <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d105      	bne.n	8007aa2 <f_write+0x128>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e114      	b.n	8007ccc <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <f_write+0x142>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01d      	beq.n	8007b06 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007ad0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007ad4:	68f9      	ldr	r1, [r7, #12]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007adc:	2301      	movs	r3, #1
 8007ade:	f7fd fe65 	bl	80057ac <disk_write>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007af0:	2301      	movs	r3, #1
 8007af2:	e0eb      	b.n	8007ccc <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7fe f9d7 	bl	8005ec8 <clust2sect>
 8007b1a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d105      	bne.n	8007b2e <f_write+0x1b4>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2202      	movs	r2, #2
 8007b26:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e0ce      	b.n	8007ccc <f_write+0x352>
			sect += csect;
 8007b2e:	7dbb      	ldrb	r3, [r7, #22]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4413      	add	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	0a5b      	lsrs	r3, r3, #9
 8007b3a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d048      	beq.n	8007bd4 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007b42:	7dba      	ldrb	r2, [r7, #22]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8007b4e:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d908      	bls.n	8007b68 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007b5c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007b60:	461a      	mov	r2, r3
 8007b62:	7dbb      	ldrb	r3, [r7, #22]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007b6e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	69b9      	ldr	r1, [r7, #24]
 8007b78:	f7fd fe18 	bl	80057ac <disk_write>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e09e      	b.n	8007ccc <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d916      	bls.n	8007bcc <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	025b      	lsls	r3, r3, #9
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	f7fd fe37 	bl	8005828 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	025b      	lsls	r3, r3, #9
 8007bd0:	623b      	str	r3, [r7, #32]
				continue;
 8007bd2:	e047      	b.n	8007c64 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d01a      	beq.n	8007c16 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d212      	bcs.n	8007c16 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007bf6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	f7fd fdb4 	bl	800576c <disk_read>
 8007c04:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007c12:	2301      	movs	r3, #1
 8007c14:	e05a      	b.n	8007ccc <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c28:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007c2c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007c2e:	6a3a      	ldr	r2, [r7, #32]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d901      	bls.n	8007c3a <f_write+0x2c0>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	6a3a      	ldr	r2, [r7, #32]
 8007c4a:	69b9      	ldr	r1, [r7, #24]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd fdeb 	bl	8005828 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	4413      	add	r3, r2
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	441a      	add	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	441a      	add	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f47f aea7 	bne.w	80079e6 <f_write+0x6c>
 8007c98:	e000      	b.n	8007c9c <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c9a:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d905      	bls.n	8007cb8 <f_write+0x33e>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007cbe:	f043 0320 	orr.w	r3, r3, #32
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3728      	adds	r7, #40	@ 0x28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fb5b 	bl	8007398 <validate>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f040 80a8 	bne.w	8007e3e <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80a0 	beq.w	8007e3e <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d019      	beq.n	8007d40 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007d12:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f7fd fd44 	bl	80057ac <disk_write>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e088      	b.n	8007e40 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fd ffdf 	bl	8005d12 <move_window>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d16f      	bne.n	8007e3e <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8007d64:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	330b      	adds	r3, #11
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	330b      	adds	r3, #11
 8007d70:	f042 0220 	orr.w	r2, r2, #32
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	331c      	adds	r3, #28
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	331d      	adds	r3, #29
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007da0:	0c1a      	lsrs	r2, r3, #16
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	331e      	adds	r3, #30
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007db0:	0e1a      	lsrs	r2, r3, #24
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	331f      	adds	r3, #31
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6938      	ldr	r0, [r7, #16]
 8007dc4:	f7fe fd95 	bl	80068f2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007dc8:	f7fd fc88 	bl	80056dc <get_fattime>
 8007dcc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3316      	adds	r3, #22
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3317      	adds	r3, #23
 8007de4:	b2d2      	uxtb	r2, r2
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	0c1a      	lsrs	r2, r3, #16
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	3318      	adds	r3, #24
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	0e1a      	lsrs	r2, r3, #24
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	3319      	adds	r3, #25
 8007dfc:	b2d2      	uxtb	r2, r2
 8007dfe:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	3312      	adds	r3, #18
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	3313      	adds	r3, #19
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007e16:	f023 0320 	bic.w	r3, r3, #32
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fd ff9a 	bl	8005d6e <sync_fs>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff ff3f 	bl	8007cd4 <f_sync>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d116      	bne.n	8007e8e <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff fa99 	bl	8007398 <validate>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10e      	bne.n	8007e8e <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fd fe94 	bl	8005ba4 <dec_lock>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <malloc>:
 8007e98:	4b02      	ldr	r3, [pc, #8]	@ (8007ea4 <malloc+0xc>)
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f000 b825 	b.w	8007eec <_malloc_r>
 8007ea2:	bf00      	nop
 8007ea4:	20000018 	.word	0x20000018

08007ea8 <sbrk_aligned>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4e0f      	ldr	r6, [pc, #60]	@ (8007ee8 <sbrk_aligned+0x40>)
 8007eac:	460c      	mov	r4, r1
 8007eae:	6831      	ldr	r1, [r6, #0]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	b911      	cbnz	r1, 8007eba <sbrk_aligned+0x12>
 8007eb4:	f000 ff4c 	bl	8008d50 <_sbrk_r>
 8007eb8:	6030      	str	r0, [r6, #0]
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 ff47 	bl	8008d50 <_sbrk_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d103      	bne.n	8007ece <sbrk_aligned+0x26>
 8007ec6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eca:	4620      	mov	r0, r4
 8007ecc:	bd70      	pop	{r4, r5, r6, pc}
 8007ece:	1cc4      	adds	r4, r0, #3
 8007ed0:	f024 0403 	bic.w	r4, r4, #3
 8007ed4:	42a0      	cmp	r0, r4
 8007ed6:	d0f8      	beq.n	8007eca <sbrk_aligned+0x22>
 8007ed8:	1a21      	subs	r1, r4, r0
 8007eda:	4628      	mov	r0, r5
 8007edc:	f000 ff38 	bl	8008d50 <_sbrk_r>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d1f2      	bne.n	8007eca <sbrk_aligned+0x22>
 8007ee4:	e7ef      	b.n	8007ec6 <sbrk_aligned+0x1e>
 8007ee6:	bf00      	nop
 8007ee8:	20000420 	.word	0x20000420

08007eec <_malloc_r>:
 8007eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	1ccd      	adds	r5, r1, #3
 8007ef2:	f025 0503 	bic.w	r5, r5, #3
 8007ef6:	3508      	adds	r5, #8
 8007ef8:	2d0c      	cmp	r5, #12
 8007efa:	bf38      	it	cc
 8007efc:	250c      	movcc	r5, #12
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	4606      	mov	r6, r0
 8007f02:	db01      	blt.n	8007f08 <_malloc_r+0x1c>
 8007f04:	42a9      	cmp	r1, r5
 8007f06:	d904      	bls.n	8007f12 <_malloc_r+0x26>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	6033      	str	r3, [r6, #0]
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fe8 <_malloc_r+0xfc>
 8007f16:	f000 f869 	bl	8007fec <__malloc_lock>
 8007f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1e:	461c      	mov	r4, r3
 8007f20:	bb44      	cbnz	r4, 8007f74 <_malloc_r+0x88>
 8007f22:	4629      	mov	r1, r5
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff ffbf 	bl	8007ea8 <sbrk_aligned>
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	d158      	bne.n	8007fe2 <_malloc_r+0xf6>
 8007f30:	f8d8 4000 	ldr.w	r4, [r8]
 8007f34:	4627      	mov	r7, r4
 8007f36:	2f00      	cmp	r7, #0
 8007f38:	d143      	bne.n	8007fc2 <_malloc_r+0xd6>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	d04b      	beq.n	8007fd6 <_malloc_r+0xea>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	4639      	mov	r1, r7
 8007f42:	4630      	mov	r0, r6
 8007f44:	eb04 0903 	add.w	r9, r4, r3
 8007f48:	f000 ff02 	bl	8008d50 <_sbrk_r>
 8007f4c:	4581      	cmp	r9, r0
 8007f4e:	d142      	bne.n	8007fd6 <_malloc_r+0xea>
 8007f50:	6821      	ldr	r1, [r4, #0]
 8007f52:	4630      	mov	r0, r6
 8007f54:	1a6d      	subs	r5, r5, r1
 8007f56:	4629      	mov	r1, r5
 8007f58:	f7ff ffa6 	bl	8007ea8 <sbrk_aligned>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d03a      	beq.n	8007fd6 <_malloc_r+0xea>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	442b      	add	r3, r5
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	bb62      	cbnz	r2, 8007fc8 <_malloc_r+0xdc>
 8007f6e:	f8c8 7000 	str.w	r7, [r8]
 8007f72:	e00f      	b.n	8007f94 <_malloc_r+0xa8>
 8007f74:	6822      	ldr	r2, [r4, #0]
 8007f76:	1b52      	subs	r2, r2, r5
 8007f78:	d420      	bmi.n	8007fbc <_malloc_r+0xd0>
 8007f7a:	2a0b      	cmp	r2, #11
 8007f7c:	d917      	bls.n	8007fae <_malloc_r+0xc2>
 8007f7e:	1961      	adds	r1, r4, r5
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	6025      	str	r5, [r4, #0]
 8007f84:	bf18      	it	ne
 8007f86:	6059      	strne	r1, [r3, #4]
 8007f88:	6863      	ldr	r3, [r4, #4]
 8007f8a:	bf08      	it	eq
 8007f8c:	f8c8 1000 	streq.w	r1, [r8]
 8007f90:	5162      	str	r2, [r4, r5]
 8007f92:	604b      	str	r3, [r1, #4]
 8007f94:	4630      	mov	r0, r6
 8007f96:	f000 f82f 	bl	8007ff8 <__malloc_unlock>
 8007f9a:	f104 000b 	add.w	r0, r4, #11
 8007f9e:	1d23      	adds	r3, r4, #4
 8007fa0:	f020 0007 	bic.w	r0, r0, #7
 8007fa4:	1ac2      	subs	r2, r0, r3
 8007fa6:	bf1c      	itt	ne
 8007fa8:	1a1b      	subne	r3, r3, r0
 8007faa:	50a3      	strne	r3, [r4, r2]
 8007fac:	e7af      	b.n	8007f0e <_malloc_r+0x22>
 8007fae:	6862      	ldr	r2, [r4, #4]
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	bf0c      	ite	eq
 8007fb4:	f8c8 2000 	streq.w	r2, [r8]
 8007fb8:	605a      	strne	r2, [r3, #4]
 8007fba:	e7eb      	b.n	8007f94 <_malloc_r+0xa8>
 8007fbc:	4623      	mov	r3, r4
 8007fbe:	6864      	ldr	r4, [r4, #4]
 8007fc0:	e7ae      	b.n	8007f20 <_malloc_r+0x34>
 8007fc2:	463c      	mov	r4, r7
 8007fc4:	687f      	ldr	r7, [r7, #4]
 8007fc6:	e7b6      	b.n	8007f36 <_malloc_r+0x4a>
 8007fc8:	461a      	mov	r2, r3
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d1fb      	bne.n	8007fc8 <_malloc_r+0xdc>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	6053      	str	r3, [r2, #4]
 8007fd4:	e7de      	b.n	8007f94 <_malloc_r+0xa8>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	4630      	mov	r0, r6
 8007fda:	6033      	str	r3, [r6, #0]
 8007fdc:	f000 f80c 	bl	8007ff8 <__malloc_unlock>
 8007fe0:	e794      	b.n	8007f0c <_malloc_r+0x20>
 8007fe2:	6005      	str	r5, [r0, #0]
 8007fe4:	e7d6      	b.n	8007f94 <_malloc_r+0xa8>
 8007fe6:	bf00      	nop
 8007fe8:	20000424 	.word	0x20000424

08007fec <__malloc_lock>:
 8007fec:	4801      	ldr	r0, [pc, #4]	@ (8007ff4 <__malloc_lock+0x8>)
 8007fee:	f000 befc 	b.w	8008dea <__retarget_lock_acquire_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	20000568 	.word	0x20000568

08007ff8 <__malloc_unlock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	@ (8008000 <__malloc_unlock+0x8>)
 8007ffa:	f000 bef7 	b.w	8008dec <__retarget_lock_release_recursive>
 8007ffe:	bf00      	nop
 8008000:	20000568 	.word	0x20000568

08008004 <__cvt>:
 8008004:	2b00      	cmp	r3, #0
 8008006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800a:	461d      	mov	r5, r3
 800800c:	bfbb      	ittet	lt
 800800e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008012:	461d      	movlt	r5, r3
 8008014:	2300      	movge	r3, #0
 8008016:	232d      	movlt	r3, #45	@ 0x2d
 8008018:	b088      	sub	sp, #32
 800801a:	4614      	mov	r4, r2
 800801c:	bfb8      	it	lt
 800801e:	4614      	movlt	r4, r2
 8008020:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008022:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008024:	7013      	strb	r3, [r2, #0]
 8008026:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008028:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800802c:	f023 0820 	bic.w	r8, r3, #32
 8008030:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008034:	d005      	beq.n	8008042 <__cvt+0x3e>
 8008036:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800803a:	d100      	bne.n	800803e <__cvt+0x3a>
 800803c:	3601      	adds	r6, #1
 800803e:	2302      	movs	r3, #2
 8008040:	e000      	b.n	8008044 <__cvt+0x40>
 8008042:	2303      	movs	r3, #3
 8008044:	aa07      	add	r2, sp, #28
 8008046:	9204      	str	r2, [sp, #16]
 8008048:	aa06      	add	r2, sp, #24
 800804a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800804e:	e9cd 3600 	strd	r3, r6, [sp]
 8008052:	4622      	mov	r2, r4
 8008054:	462b      	mov	r3, r5
 8008056:	f000 ff8f 	bl	8008f78 <_dtoa_r>
 800805a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800805e:	4607      	mov	r7, r0
 8008060:	d119      	bne.n	8008096 <__cvt+0x92>
 8008062:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008064:	07db      	lsls	r3, r3, #31
 8008066:	d50e      	bpl.n	8008086 <__cvt+0x82>
 8008068:	eb00 0906 	add.w	r9, r0, r6
 800806c:	2200      	movs	r2, #0
 800806e:	2300      	movs	r3, #0
 8008070:	4620      	mov	r0, r4
 8008072:	4629      	mov	r1, r5
 8008074:	f7f8 fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8008078:	b108      	cbz	r0, 800807e <__cvt+0x7a>
 800807a:	f8cd 901c 	str.w	r9, [sp, #28]
 800807e:	2230      	movs	r2, #48	@ 0x30
 8008080:	9b07      	ldr	r3, [sp, #28]
 8008082:	454b      	cmp	r3, r9
 8008084:	d31e      	bcc.n	80080c4 <__cvt+0xc0>
 8008086:	4638      	mov	r0, r7
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800808c:	1bdb      	subs	r3, r3, r7
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	b008      	add	sp, #32
 8008092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008096:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800809a:	eb00 0906 	add.w	r9, r0, r6
 800809e:	d1e5      	bne.n	800806c <__cvt+0x68>
 80080a0:	7803      	ldrb	r3, [r0, #0]
 80080a2:	2b30      	cmp	r3, #48	@ 0x30
 80080a4:	d10a      	bne.n	80080bc <__cvt+0xb8>
 80080a6:	2200      	movs	r2, #0
 80080a8:	2300      	movs	r3, #0
 80080aa:	4620      	mov	r0, r4
 80080ac:	4629      	mov	r1, r5
 80080ae:	f7f8 fc7b 	bl	80009a8 <__aeabi_dcmpeq>
 80080b2:	b918      	cbnz	r0, 80080bc <__cvt+0xb8>
 80080b4:	f1c6 0601 	rsb	r6, r6, #1
 80080b8:	f8ca 6000 	str.w	r6, [sl]
 80080bc:	f8da 3000 	ldr.w	r3, [sl]
 80080c0:	4499      	add	r9, r3
 80080c2:	e7d3      	b.n	800806c <__cvt+0x68>
 80080c4:	1c59      	adds	r1, r3, #1
 80080c6:	9107      	str	r1, [sp, #28]
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e7d9      	b.n	8008080 <__cvt+0x7c>

080080cc <__exponent>:
 80080cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ce:	2900      	cmp	r1, #0
 80080d0:	bfb6      	itet	lt
 80080d2:	232d      	movlt	r3, #45	@ 0x2d
 80080d4:	232b      	movge	r3, #43	@ 0x2b
 80080d6:	4249      	neglt	r1, r1
 80080d8:	2909      	cmp	r1, #9
 80080da:	7002      	strb	r2, [r0, #0]
 80080dc:	7043      	strb	r3, [r0, #1]
 80080de:	dd29      	ble.n	8008134 <__exponent+0x68>
 80080e0:	f10d 0307 	add.w	r3, sp, #7
 80080e4:	461d      	mov	r5, r3
 80080e6:	270a      	movs	r7, #10
 80080e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80080ec:	461a      	mov	r2, r3
 80080ee:	fb07 1416 	mls	r4, r7, r6, r1
 80080f2:	3430      	adds	r4, #48	@ 0x30
 80080f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80080f8:	460c      	mov	r4, r1
 80080fa:	2c63      	cmp	r4, #99	@ 0x63
 80080fc:	4631      	mov	r1, r6
 80080fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008102:	dcf1      	bgt.n	80080e8 <__exponent+0x1c>
 8008104:	3130      	adds	r1, #48	@ 0x30
 8008106:	1e94      	subs	r4, r2, #2
 8008108:	f803 1c01 	strb.w	r1, [r3, #-1]
 800810c:	4623      	mov	r3, r4
 800810e:	1c41      	adds	r1, r0, #1
 8008110:	42ab      	cmp	r3, r5
 8008112:	d30a      	bcc.n	800812a <__exponent+0x5e>
 8008114:	f10d 0309 	add.w	r3, sp, #9
 8008118:	1a9b      	subs	r3, r3, r2
 800811a:	42ac      	cmp	r4, r5
 800811c:	bf88      	it	hi
 800811e:	2300      	movhi	r3, #0
 8008120:	3302      	adds	r3, #2
 8008122:	4403      	add	r3, r0
 8008124:	1a18      	subs	r0, r3, r0
 8008126:	b003      	add	sp, #12
 8008128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800812a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800812e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008132:	e7ed      	b.n	8008110 <__exponent+0x44>
 8008134:	2330      	movs	r3, #48	@ 0x30
 8008136:	3130      	adds	r1, #48	@ 0x30
 8008138:	7083      	strb	r3, [r0, #2]
 800813a:	70c1      	strb	r1, [r0, #3]
 800813c:	1d03      	adds	r3, r0, #4
 800813e:	e7f1      	b.n	8008124 <__exponent+0x58>

08008140 <_printf_float>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	b091      	sub	sp, #68	@ 0x44
 8008146:	460c      	mov	r4, r1
 8008148:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800814c:	4616      	mov	r6, r2
 800814e:	461f      	mov	r7, r3
 8008150:	4605      	mov	r5, r0
 8008152:	f000 fdc5 	bl	8008ce0 <_localeconv_r>
 8008156:	6803      	ldr	r3, [r0, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	9308      	str	r3, [sp, #32]
 800815c:	f7f7 fff8 	bl	8000150 <strlen>
 8008160:	2300      	movs	r3, #0
 8008162:	930e      	str	r3, [sp, #56]	@ 0x38
 8008164:	f8d8 3000 	ldr.w	r3, [r8]
 8008168:	9009      	str	r0, [sp, #36]	@ 0x24
 800816a:	3307      	adds	r3, #7
 800816c:	f023 0307 	bic.w	r3, r3, #7
 8008170:	f103 0208 	add.w	r2, r3, #8
 8008174:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008178:	f8d4 b000 	ldr.w	fp, [r4]
 800817c:	f8c8 2000 	str.w	r2, [r8]
 8008180:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008184:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800818a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800818e:	f04f 32ff 	mov.w	r2, #4294967295
 8008192:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800819a:	4b9c      	ldr	r3, [pc, #624]	@ (800840c <_printf_float+0x2cc>)
 800819c:	f7f8 fc36 	bl	8000a0c <__aeabi_dcmpun>
 80081a0:	bb70      	cbnz	r0, 8008200 <_printf_float+0xc0>
 80081a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081a6:	f04f 32ff 	mov.w	r2, #4294967295
 80081aa:	4b98      	ldr	r3, [pc, #608]	@ (800840c <_printf_float+0x2cc>)
 80081ac:	f7f8 fc10 	bl	80009d0 <__aeabi_dcmple>
 80081b0:	bb30      	cbnz	r0, 8008200 <_printf_float+0xc0>
 80081b2:	2200      	movs	r2, #0
 80081b4:	2300      	movs	r3, #0
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 fbff 	bl	80009bc <__aeabi_dcmplt>
 80081be:	b110      	cbz	r0, 80081c6 <_printf_float+0x86>
 80081c0:	232d      	movs	r3, #45	@ 0x2d
 80081c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081c6:	4a92      	ldr	r2, [pc, #584]	@ (8008410 <_printf_float+0x2d0>)
 80081c8:	4b92      	ldr	r3, [pc, #584]	@ (8008414 <_printf_float+0x2d4>)
 80081ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80081ce:	bf94      	ite	ls
 80081d0:	4690      	movls	r8, r2
 80081d2:	4698      	movhi	r8, r3
 80081d4:	2303      	movs	r3, #3
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	6123      	str	r3, [r4, #16]
 80081dc:	f02b 0304 	bic.w	r3, fp, #4
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	4633      	mov	r3, r6
 80081e4:	4621      	mov	r1, r4
 80081e6:	4628      	mov	r0, r5
 80081e8:	9700      	str	r7, [sp, #0]
 80081ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80081ec:	f000 f9d4 	bl	8008598 <_printf_common>
 80081f0:	3001      	adds	r0, #1
 80081f2:	f040 8090 	bne.w	8008316 <_printf_float+0x1d6>
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295
 80081fa:	b011      	add	sp, #68	@ 0x44
 80081fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 fc00 	bl	8000a0c <__aeabi_dcmpun>
 800820c:	b148      	cbz	r0, 8008222 <_printf_float+0xe2>
 800820e:	464b      	mov	r3, r9
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfb8      	it	lt
 8008214:	232d      	movlt	r3, #45	@ 0x2d
 8008216:	4a80      	ldr	r2, [pc, #512]	@ (8008418 <_printf_float+0x2d8>)
 8008218:	bfb8      	it	lt
 800821a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800821e:	4b7f      	ldr	r3, [pc, #508]	@ (800841c <_printf_float+0x2dc>)
 8008220:	e7d3      	b.n	80081ca <_printf_float+0x8a>
 8008222:	6863      	ldr	r3, [r4, #4]
 8008224:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	d13f      	bne.n	80082ac <_printf_float+0x16c>
 800822c:	2306      	movs	r3, #6
 800822e:	6063      	str	r3, [r4, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	9206      	str	r2, [sp, #24]
 800823a:	aa0e      	add	r2, sp, #56	@ 0x38
 800823c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008240:	aa0d      	add	r2, sp, #52	@ 0x34
 8008242:	9203      	str	r2, [sp, #12]
 8008244:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008248:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	4642      	mov	r2, r8
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	4628      	mov	r0, r5
 8008254:	464b      	mov	r3, r9
 8008256:	910a      	str	r1, [sp, #40]	@ 0x28
 8008258:	f7ff fed4 	bl	8008004 <__cvt>
 800825c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800825e:	4680      	mov	r8, r0
 8008260:	2947      	cmp	r1, #71	@ 0x47
 8008262:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008264:	d128      	bne.n	80082b8 <_printf_float+0x178>
 8008266:	1cc8      	adds	r0, r1, #3
 8008268:	db02      	blt.n	8008270 <_printf_float+0x130>
 800826a:	6863      	ldr	r3, [r4, #4]
 800826c:	4299      	cmp	r1, r3
 800826e:	dd40      	ble.n	80082f2 <_printf_float+0x1b2>
 8008270:	f1aa 0a02 	sub.w	sl, sl, #2
 8008274:	fa5f fa8a 	uxtb.w	sl, sl
 8008278:	4652      	mov	r2, sl
 800827a:	3901      	subs	r1, #1
 800827c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008280:	910d      	str	r1, [sp, #52]	@ 0x34
 8008282:	f7ff ff23 	bl	80080cc <__exponent>
 8008286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008288:	4681      	mov	r9, r0
 800828a:	1813      	adds	r3, r2, r0
 800828c:	2a01      	cmp	r2, #1
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	dc02      	bgt.n	8008298 <_printf_float+0x158>
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	07d2      	lsls	r2, r2, #31
 8008296:	d501      	bpl.n	800829c <_printf_float+0x15c>
 8008298:	3301      	adds	r3, #1
 800829a:	6123      	str	r3, [r4, #16]
 800829c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d09e      	beq.n	80081e2 <_printf_float+0xa2>
 80082a4:	232d      	movs	r3, #45	@ 0x2d
 80082a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082aa:	e79a      	b.n	80081e2 <_printf_float+0xa2>
 80082ac:	2947      	cmp	r1, #71	@ 0x47
 80082ae:	d1bf      	bne.n	8008230 <_printf_float+0xf0>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1bd      	bne.n	8008230 <_printf_float+0xf0>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e7ba      	b.n	800822e <_printf_float+0xee>
 80082b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80082bc:	d9dc      	bls.n	8008278 <_printf_float+0x138>
 80082be:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80082c2:	d118      	bne.n	80082f6 <_printf_float+0x1b6>
 80082c4:	2900      	cmp	r1, #0
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	dd0b      	ble.n	80082e2 <_printf_float+0x1a2>
 80082ca:	6121      	str	r1, [r4, #16]
 80082cc:	b913      	cbnz	r3, 80082d4 <_printf_float+0x194>
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	07d0      	lsls	r0, r2, #31
 80082d2:	d502      	bpl.n	80082da <_printf_float+0x19a>
 80082d4:	3301      	adds	r3, #1
 80082d6:	440b      	add	r3, r1
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	f04f 0900 	mov.w	r9, #0
 80082de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80082e0:	e7dc      	b.n	800829c <_printf_float+0x15c>
 80082e2:	b913      	cbnz	r3, 80082ea <_printf_float+0x1aa>
 80082e4:	6822      	ldr	r2, [r4, #0]
 80082e6:	07d2      	lsls	r2, r2, #31
 80082e8:	d501      	bpl.n	80082ee <_printf_float+0x1ae>
 80082ea:	3302      	adds	r3, #2
 80082ec:	e7f4      	b.n	80082d8 <_printf_float+0x198>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e7f2      	b.n	80082d8 <_printf_float+0x198>
 80082f2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80082f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082f8:	4299      	cmp	r1, r3
 80082fa:	db05      	blt.n	8008308 <_printf_float+0x1c8>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	6121      	str	r1, [r4, #16]
 8008300:	07d8      	lsls	r0, r3, #31
 8008302:	d5ea      	bpl.n	80082da <_printf_float+0x19a>
 8008304:	1c4b      	adds	r3, r1, #1
 8008306:	e7e7      	b.n	80082d8 <_printf_float+0x198>
 8008308:	2900      	cmp	r1, #0
 800830a:	bfcc      	ite	gt
 800830c:	2201      	movgt	r2, #1
 800830e:	f1c1 0202 	rsble	r2, r1, #2
 8008312:	4413      	add	r3, r2
 8008314:	e7e0      	b.n	80082d8 <_printf_float+0x198>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	055a      	lsls	r2, r3, #21
 800831a:	d407      	bmi.n	800832c <_printf_float+0x1ec>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	4642      	mov	r2, r8
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	d12b      	bne.n	8008382 <_printf_float+0x242>
 800832a:	e764      	b.n	80081f6 <_printf_float+0xb6>
 800832c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008330:	f240 80dc 	bls.w	80084ec <_printf_float+0x3ac>
 8008334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008338:	2200      	movs	r2, #0
 800833a:	2300      	movs	r3, #0
 800833c:	f7f8 fb34 	bl	80009a8 <__aeabi_dcmpeq>
 8008340:	2800      	cmp	r0, #0
 8008342:	d033      	beq.n	80083ac <_printf_float+0x26c>
 8008344:	2301      	movs	r3, #1
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	4a35      	ldr	r2, [pc, #212]	@ (8008420 <_printf_float+0x2e0>)
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	f43f af51 	beq.w	80081f6 <_printf_float+0xb6>
 8008354:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008358:	4543      	cmp	r3, r8
 800835a:	db02      	blt.n	8008362 <_printf_float+0x222>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	07d8      	lsls	r0, r3, #31
 8008360:	d50f      	bpl.n	8008382 <_printf_float+0x242>
 8008362:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f af42 	beq.w	80081f6 <_printf_float+0xb6>
 8008372:	f04f 0900 	mov.w	r9, #0
 8008376:	f108 38ff 	add.w	r8, r8, #4294967295
 800837a:	f104 0a1a 	add.w	sl, r4, #26
 800837e:	45c8      	cmp	r8, r9
 8008380:	dc09      	bgt.n	8008396 <_printf_float+0x256>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	079b      	lsls	r3, r3, #30
 8008386:	f100 8102 	bmi.w	800858e <_printf_float+0x44e>
 800838a:	68e0      	ldr	r0, [r4, #12]
 800838c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800838e:	4298      	cmp	r0, r3
 8008390:	bfb8      	it	lt
 8008392:	4618      	movlt	r0, r3
 8008394:	e731      	b.n	80081fa <_printf_float+0xba>
 8008396:	2301      	movs	r3, #1
 8008398:	4652      	mov	r2, sl
 800839a:	4631      	mov	r1, r6
 800839c:	4628      	mov	r0, r5
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	f43f af28 	beq.w	80081f6 <_printf_float+0xb6>
 80083a6:	f109 0901 	add.w	r9, r9, #1
 80083aa:	e7e8      	b.n	800837e <_printf_float+0x23e>
 80083ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dc38      	bgt.n	8008424 <_printf_float+0x2e4>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	4a19      	ldr	r2, [pc, #100]	@ (8008420 <_printf_float+0x2e0>)
 80083ba:	47b8      	blx	r7
 80083bc:	3001      	adds	r0, #1
 80083be:	f43f af1a 	beq.w	80081f6 <_printf_float+0xb6>
 80083c2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80083c6:	ea59 0303 	orrs.w	r3, r9, r3
 80083ca:	d102      	bne.n	80083d2 <_printf_float+0x292>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	07d9      	lsls	r1, r3, #31
 80083d0:	d5d7      	bpl.n	8008382 <_printf_float+0x242>
 80083d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f af0a 	beq.w	80081f6 <_printf_float+0xb6>
 80083e2:	f04f 0a00 	mov.w	sl, #0
 80083e6:	f104 0b1a 	add.w	fp, r4, #26
 80083ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083ec:	425b      	negs	r3, r3
 80083ee:	4553      	cmp	r3, sl
 80083f0:	dc01      	bgt.n	80083f6 <_printf_float+0x2b6>
 80083f2:	464b      	mov	r3, r9
 80083f4:	e793      	b.n	800831e <_printf_float+0x1de>
 80083f6:	2301      	movs	r3, #1
 80083f8:	465a      	mov	r2, fp
 80083fa:	4631      	mov	r1, r6
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b8      	blx	r7
 8008400:	3001      	adds	r0, #1
 8008402:	f43f aef8 	beq.w	80081f6 <_printf_float+0xb6>
 8008406:	f10a 0a01 	add.w	sl, sl, #1
 800840a:	e7ee      	b.n	80083ea <_printf_float+0x2aa>
 800840c:	7fefffff 	.word	0x7fefffff
 8008410:	0800ba34 	.word	0x0800ba34
 8008414:	0800ba38 	.word	0x0800ba38
 8008418:	0800ba3c 	.word	0x0800ba3c
 800841c:	0800ba40 	.word	0x0800ba40
 8008420:	0800ba44 	.word	0x0800ba44
 8008424:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008426:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800842a:	4553      	cmp	r3, sl
 800842c:	bfa8      	it	ge
 800842e:	4653      	movge	r3, sl
 8008430:	2b00      	cmp	r3, #0
 8008432:	4699      	mov	r9, r3
 8008434:	dc36      	bgt.n	80084a4 <_printf_float+0x364>
 8008436:	f04f 0b00 	mov.w	fp, #0
 800843a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800843e:	f104 021a 	add.w	r2, r4, #26
 8008442:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008444:	930a      	str	r3, [sp, #40]	@ 0x28
 8008446:	eba3 0309 	sub.w	r3, r3, r9
 800844a:	455b      	cmp	r3, fp
 800844c:	dc31      	bgt.n	80084b2 <_printf_float+0x372>
 800844e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008450:	459a      	cmp	sl, r3
 8008452:	dc3a      	bgt.n	80084ca <_printf_float+0x38a>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	07da      	lsls	r2, r3, #31
 8008458:	d437      	bmi.n	80084ca <_printf_float+0x38a>
 800845a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800845c:	ebaa 0903 	sub.w	r9, sl, r3
 8008460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008462:	ebaa 0303 	sub.w	r3, sl, r3
 8008466:	4599      	cmp	r9, r3
 8008468:	bfa8      	it	ge
 800846a:	4699      	movge	r9, r3
 800846c:	f1b9 0f00 	cmp.w	r9, #0
 8008470:	dc33      	bgt.n	80084da <_printf_float+0x39a>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800847a:	f104 0b1a 	add.w	fp, r4, #26
 800847e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008480:	ebaa 0303 	sub.w	r3, sl, r3
 8008484:	eba3 0309 	sub.w	r3, r3, r9
 8008488:	4543      	cmp	r3, r8
 800848a:	f77f af7a 	ble.w	8008382 <_printf_float+0x242>
 800848e:	2301      	movs	r3, #1
 8008490:	465a      	mov	r2, fp
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f aeac 	beq.w	80081f6 <_printf_float+0xb6>
 800849e:	f108 0801 	add.w	r8, r8, #1
 80084a2:	e7ec      	b.n	800847e <_printf_float+0x33e>
 80084a4:	4642      	mov	r2, r8
 80084a6:	4631      	mov	r1, r6
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b8      	blx	r7
 80084ac:	3001      	adds	r0, #1
 80084ae:	d1c2      	bne.n	8008436 <_printf_float+0x2f6>
 80084b0:	e6a1      	b.n	80081f6 <_printf_float+0xb6>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80084ba:	47b8      	blx	r7
 80084bc:	3001      	adds	r0, #1
 80084be:	f43f ae9a 	beq.w	80081f6 <_printf_float+0xb6>
 80084c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084c4:	f10b 0b01 	add.w	fp, fp, #1
 80084c8:	e7bb      	b.n	8008442 <_printf_float+0x302>
 80084ca:	4631      	mov	r1, r6
 80084cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	d1c0      	bne.n	800845a <_printf_float+0x31a>
 80084d8:	e68d      	b.n	80081f6 <_printf_float+0xb6>
 80084da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084dc:	464b      	mov	r3, r9
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	4442      	add	r2, r8
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	d1c3      	bne.n	8008472 <_printf_float+0x332>
 80084ea:	e684      	b.n	80081f6 <_printf_float+0xb6>
 80084ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80084f0:	f1ba 0f01 	cmp.w	sl, #1
 80084f4:	dc01      	bgt.n	80084fa <_printf_float+0x3ba>
 80084f6:	07db      	lsls	r3, r3, #31
 80084f8:	d536      	bpl.n	8008568 <_printf_float+0x428>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4642      	mov	r2, r8
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	f43f ae76 	beq.w	80081f6 <_printf_float+0xb6>
 800850a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800850e:	4631      	mov	r1, r6
 8008510:	4628      	mov	r0, r5
 8008512:	47b8      	blx	r7
 8008514:	3001      	adds	r0, #1
 8008516:	f43f ae6e 	beq.w	80081f6 <_printf_float+0xb6>
 800851a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800851e:	2200      	movs	r2, #0
 8008520:	2300      	movs	r3, #0
 8008522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008526:	f7f8 fa3f 	bl	80009a8 <__aeabi_dcmpeq>
 800852a:	b9c0      	cbnz	r0, 800855e <_printf_float+0x41e>
 800852c:	4653      	mov	r3, sl
 800852e:	f108 0201 	add.w	r2, r8, #1
 8008532:	4631      	mov	r1, r6
 8008534:	4628      	mov	r0, r5
 8008536:	47b8      	blx	r7
 8008538:	3001      	adds	r0, #1
 800853a:	d10c      	bne.n	8008556 <_printf_float+0x416>
 800853c:	e65b      	b.n	80081f6 <_printf_float+0xb6>
 800853e:	2301      	movs	r3, #1
 8008540:	465a      	mov	r2, fp
 8008542:	4631      	mov	r1, r6
 8008544:	4628      	mov	r0, r5
 8008546:	47b8      	blx	r7
 8008548:	3001      	adds	r0, #1
 800854a:	f43f ae54 	beq.w	80081f6 <_printf_float+0xb6>
 800854e:	f108 0801 	add.w	r8, r8, #1
 8008552:	45d0      	cmp	r8, sl
 8008554:	dbf3      	blt.n	800853e <_printf_float+0x3fe>
 8008556:	464b      	mov	r3, r9
 8008558:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800855c:	e6e0      	b.n	8008320 <_printf_float+0x1e0>
 800855e:	f04f 0800 	mov.w	r8, #0
 8008562:	f104 0b1a 	add.w	fp, r4, #26
 8008566:	e7f4      	b.n	8008552 <_printf_float+0x412>
 8008568:	2301      	movs	r3, #1
 800856a:	4642      	mov	r2, r8
 800856c:	e7e1      	b.n	8008532 <_printf_float+0x3f2>
 800856e:	2301      	movs	r3, #1
 8008570:	464a      	mov	r2, r9
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	47b8      	blx	r7
 8008578:	3001      	adds	r0, #1
 800857a:	f43f ae3c 	beq.w	80081f6 <_printf_float+0xb6>
 800857e:	f108 0801 	add.w	r8, r8, #1
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008586:	1a5b      	subs	r3, r3, r1
 8008588:	4543      	cmp	r3, r8
 800858a:	dcf0      	bgt.n	800856e <_printf_float+0x42e>
 800858c:	e6fd      	b.n	800838a <_printf_float+0x24a>
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	f104 0919 	add.w	r9, r4, #25
 8008596:	e7f4      	b.n	8008582 <_printf_float+0x442>

08008598 <_printf_common>:
 8008598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	4616      	mov	r6, r2
 800859e:	4698      	mov	r8, r3
 80085a0:	688a      	ldr	r2, [r1, #8]
 80085a2:	690b      	ldr	r3, [r1, #16]
 80085a4:	4607      	mov	r7, r0
 80085a6:	4293      	cmp	r3, r2
 80085a8:	bfb8      	it	lt
 80085aa:	4613      	movlt	r3, r2
 80085ac:	6033      	str	r3, [r6, #0]
 80085ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085b2:	460c      	mov	r4, r1
 80085b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085b8:	b10a      	cbz	r2, 80085be <_printf_common+0x26>
 80085ba:	3301      	adds	r3, #1
 80085bc:	6033      	str	r3, [r6, #0]
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	0699      	lsls	r1, r3, #26
 80085c2:	bf42      	ittt	mi
 80085c4:	6833      	ldrmi	r3, [r6, #0]
 80085c6:	3302      	addmi	r3, #2
 80085c8:	6033      	strmi	r3, [r6, #0]
 80085ca:	6825      	ldr	r5, [r4, #0]
 80085cc:	f015 0506 	ands.w	r5, r5, #6
 80085d0:	d106      	bne.n	80085e0 <_printf_common+0x48>
 80085d2:	f104 0a19 	add.w	sl, r4, #25
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	6832      	ldr	r2, [r6, #0]
 80085da:	1a9b      	subs	r3, r3, r2
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dc2b      	bgt.n	8008638 <_printf_common+0xa0>
 80085e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085e4:	6822      	ldr	r2, [r4, #0]
 80085e6:	3b00      	subs	r3, #0
 80085e8:	bf18      	it	ne
 80085ea:	2301      	movne	r3, #1
 80085ec:	0692      	lsls	r2, r2, #26
 80085ee:	d430      	bmi.n	8008652 <_printf_common+0xba>
 80085f0:	4641      	mov	r1, r8
 80085f2:	4638      	mov	r0, r7
 80085f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085f8:	47c8      	blx	r9
 80085fa:	3001      	adds	r0, #1
 80085fc:	d023      	beq.n	8008646 <_printf_common+0xae>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	6922      	ldr	r2, [r4, #16]
 8008602:	f003 0306 	and.w	r3, r3, #6
 8008606:	2b04      	cmp	r3, #4
 8008608:	bf14      	ite	ne
 800860a:	2500      	movne	r5, #0
 800860c:	6833      	ldreq	r3, [r6, #0]
 800860e:	f04f 0600 	mov.w	r6, #0
 8008612:	bf08      	it	eq
 8008614:	68e5      	ldreq	r5, [r4, #12]
 8008616:	f104 041a 	add.w	r4, r4, #26
 800861a:	bf08      	it	eq
 800861c:	1aed      	subeq	r5, r5, r3
 800861e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008622:	bf08      	it	eq
 8008624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008628:	4293      	cmp	r3, r2
 800862a:	bfc4      	itt	gt
 800862c:	1a9b      	subgt	r3, r3, r2
 800862e:	18ed      	addgt	r5, r5, r3
 8008630:	42b5      	cmp	r5, r6
 8008632:	d11a      	bne.n	800866a <_printf_common+0xd2>
 8008634:	2000      	movs	r0, #0
 8008636:	e008      	b.n	800864a <_printf_common+0xb2>
 8008638:	2301      	movs	r3, #1
 800863a:	4652      	mov	r2, sl
 800863c:	4641      	mov	r1, r8
 800863e:	4638      	mov	r0, r7
 8008640:	47c8      	blx	r9
 8008642:	3001      	adds	r0, #1
 8008644:	d103      	bne.n	800864e <_printf_common+0xb6>
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864e:	3501      	adds	r5, #1
 8008650:	e7c1      	b.n	80085d6 <_printf_common+0x3e>
 8008652:	2030      	movs	r0, #48	@ 0x30
 8008654:	18e1      	adds	r1, r4, r3
 8008656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008660:	4422      	add	r2, r4
 8008662:	3302      	adds	r3, #2
 8008664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008668:	e7c2      	b.n	80085f0 <_printf_common+0x58>
 800866a:	2301      	movs	r3, #1
 800866c:	4622      	mov	r2, r4
 800866e:	4641      	mov	r1, r8
 8008670:	4638      	mov	r0, r7
 8008672:	47c8      	blx	r9
 8008674:	3001      	adds	r0, #1
 8008676:	d0e6      	beq.n	8008646 <_printf_common+0xae>
 8008678:	3601      	adds	r6, #1
 800867a:	e7d9      	b.n	8008630 <_printf_common+0x98>

0800867c <_printf_i>:
 800867c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	7e0f      	ldrb	r7, [r1, #24]
 8008682:	4691      	mov	r9, r2
 8008684:	2f78      	cmp	r7, #120	@ 0x78
 8008686:	4680      	mov	r8, r0
 8008688:	460c      	mov	r4, r1
 800868a:	469a      	mov	sl, r3
 800868c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800868e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008692:	d807      	bhi.n	80086a4 <_printf_i+0x28>
 8008694:	2f62      	cmp	r7, #98	@ 0x62
 8008696:	d80a      	bhi.n	80086ae <_printf_i+0x32>
 8008698:	2f00      	cmp	r7, #0
 800869a:	f000 80d3 	beq.w	8008844 <_printf_i+0x1c8>
 800869e:	2f58      	cmp	r7, #88	@ 0x58
 80086a0:	f000 80ba 	beq.w	8008818 <_printf_i+0x19c>
 80086a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086ac:	e03a      	b.n	8008724 <_printf_i+0xa8>
 80086ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086b2:	2b15      	cmp	r3, #21
 80086b4:	d8f6      	bhi.n	80086a4 <_printf_i+0x28>
 80086b6:	a101      	add	r1, pc, #4	@ (adr r1, 80086bc <_printf_i+0x40>)
 80086b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086bc:	08008715 	.word	0x08008715
 80086c0:	08008729 	.word	0x08008729
 80086c4:	080086a5 	.word	0x080086a5
 80086c8:	080086a5 	.word	0x080086a5
 80086cc:	080086a5 	.word	0x080086a5
 80086d0:	080086a5 	.word	0x080086a5
 80086d4:	08008729 	.word	0x08008729
 80086d8:	080086a5 	.word	0x080086a5
 80086dc:	080086a5 	.word	0x080086a5
 80086e0:	080086a5 	.word	0x080086a5
 80086e4:	080086a5 	.word	0x080086a5
 80086e8:	0800882b 	.word	0x0800882b
 80086ec:	08008753 	.word	0x08008753
 80086f0:	080087e5 	.word	0x080087e5
 80086f4:	080086a5 	.word	0x080086a5
 80086f8:	080086a5 	.word	0x080086a5
 80086fc:	0800884d 	.word	0x0800884d
 8008700:	080086a5 	.word	0x080086a5
 8008704:	08008753 	.word	0x08008753
 8008708:	080086a5 	.word	0x080086a5
 800870c:	080086a5 	.word	0x080086a5
 8008710:	080087ed 	.word	0x080087ed
 8008714:	6833      	ldr	r3, [r6, #0]
 8008716:	1d1a      	adds	r2, r3, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6032      	str	r2, [r6, #0]
 800871c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008724:	2301      	movs	r3, #1
 8008726:	e09e      	b.n	8008866 <_printf_i+0x1ea>
 8008728:	6833      	ldr	r3, [r6, #0]
 800872a:	6820      	ldr	r0, [r4, #0]
 800872c:	1d19      	adds	r1, r3, #4
 800872e:	6031      	str	r1, [r6, #0]
 8008730:	0606      	lsls	r6, r0, #24
 8008732:	d501      	bpl.n	8008738 <_printf_i+0xbc>
 8008734:	681d      	ldr	r5, [r3, #0]
 8008736:	e003      	b.n	8008740 <_printf_i+0xc4>
 8008738:	0645      	lsls	r5, r0, #25
 800873a:	d5fb      	bpl.n	8008734 <_printf_i+0xb8>
 800873c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008740:	2d00      	cmp	r5, #0
 8008742:	da03      	bge.n	800874c <_printf_i+0xd0>
 8008744:	232d      	movs	r3, #45	@ 0x2d
 8008746:	426d      	negs	r5, r5
 8008748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800874c:	230a      	movs	r3, #10
 800874e:	4859      	ldr	r0, [pc, #356]	@ (80088b4 <_printf_i+0x238>)
 8008750:	e011      	b.n	8008776 <_printf_i+0xfa>
 8008752:	6821      	ldr	r1, [r4, #0]
 8008754:	6833      	ldr	r3, [r6, #0]
 8008756:	0608      	lsls	r0, r1, #24
 8008758:	f853 5b04 	ldr.w	r5, [r3], #4
 800875c:	d402      	bmi.n	8008764 <_printf_i+0xe8>
 800875e:	0649      	lsls	r1, r1, #25
 8008760:	bf48      	it	mi
 8008762:	b2ad      	uxthmi	r5, r5
 8008764:	2f6f      	cmp	r7, #111	@ 0x6f
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	bf14      	ite	ne
 800876a:	230a      	movne	r3, #10
 800876c:	2308      	moveq	r3, #8
 800876e:	4851      	ldr	r0, [pc, #324]	@ (80088b4 <_printf_i+0x238>)
 8008770:	2100      	movs	r1, #0
 8008772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008776:	6866      	ldr	r6, [r4, #4]
 8008778:	2e00      	cmp	r6, #0
 800877a:	bfa8      	it	ge
 800877c:	6821      	ldrge	r1, [r4, #0]
 800877e:	60a6      	str	r6, [r4, #8]
 8008780:	bfa4      	itt	ge
 8008782:	f021 0104 	bicge.w	r1, r1, #4
 8008786:	6021      	strge	r1, [r4, #0]
 8008788:	b90d      	cbnz	r5, 800878e <_printf_i+0x112>
 800878a:	2e00      	cmp	r6, #0
 800878c:	d04b      	beq.n	8008826 <_printf_i+0x1aa>
 800878e:	4616      	mov	r6, r2
 8008790:	fbb5 f1f3 	udiv	r1, r5, r3
 8008794:	fb03 5711 	mls	r7, r3, r1, r5
 8008798:	5dc7      	ldrb	r7, [r0, r7]
 800879a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800879e:	462f      	mov	r7, r5
 80087a0:	42bb      	cmp	r3, r7
 80087a2:	460d      	mov	r5, r1
 80087a4:	d9f4      	bls.n	8008790 <_printf_i+0x114>
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d10b      	bne.n	80087c2 <_printf_i+0x146>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	07df      	lsls	r7, r3, #31
 80087ae:	d508      	bpl.n	80087c2 <_printf_i+0x146>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	6861      	ldr	r1, [r4, #4]
 80087b4:	4299      	cmp	r1, r3
 80087b6:	bfde      	ittt	le
 80087b8:	2330      	movle	r3, #48	@ 0x30
 80087ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087c2:	1b92      	subs	r2, r2, r6
 80087c4:	6122      	str	r2, [r4, #16]
 80087c6:	464b      	mov	r3, r9
 80087c8:	4621      	mov	r1, r4
 80087ca:	4640      	mov	r0, r8
 80087cc:	f8cd a000 	str.w	sl, [sp]
 80087d0:	aa03      	add	r2, sp, #12
 80087d2:	f7ff fee1 	bl	8008598 <_printf_common>
 80087d6:	3001      	adds	r0, #1
 80087d8:	d14a      	bne.n	8008870 <_printf_i+0x1f4>
 80087da:	f04f 30ff 	mov.w	r0, #4294967295
 80087de:	b004      	add	sp, #16
 80087e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	f043 0320 	orr.w	r3, r3, #32
 80087ea:	6023      	str	r3, [r4, #0]
 80087ec:	2778      	movs	r7, #120	@ 0x78
 80087ee:	4832      	ldr	r0, [pc, #200]	@ (80088b8 <_printf_i+0x23c>)
 80087f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	6831      	ldr	r1, [r6, #0]
 80087f8:	061f      	lsls	r7, r3, #24
 80087fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80087fe:	d402      	bmi.n	8008806 <_printf_i+0x18a>
 8008800:	065f      	lsls	r7, r3, #25
 8008802:	bf48      	it	mi
 8008804:	b2ad      	uxthmi	r5, r5
 8008806:	6031      	str	r1, [r6, #0]
 8008808:	07d9      	lsls	r1, r3, #31
 800880a:	bf44      	itt	mi
 800880c:	f043 0320 	orrmi.w	r3, r3, #32
 8008810:	6023      	strmi	r3, [r4, #0]
 8008812:	b11d      	cbz	r5, 800881c <_printf_i+0x1a0>
 8008814:	2310      	movs	r3, #16
 8008816:	e7ab      	b.n	8008770 <_printf_i+0xf4>
 8008818:	4826      	ldr	r0, [pc, #152]	@ (80088b4 <_printf_i+0x238>)
 800881a:	e7e9      	b.n	80087f0 <_printf_i+0x174>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	f023 0320 	bic.w	r3, r3, #32
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	e7f6      	b.n	8008814 <_printf_i+0x198>
 8008826:	4616      	mov	r6, r2
 8008828:	e7bd      	b.n	80087a6 <_printf_i+0x12a>
 800882a:	6833      	ldr	r3, [r6, #0]
 800882c:	6825      	ldr	r5, [r4, #0]
 800882e:	1d18      	adds	r0, r3, #4
 8008830:	6961      	ldr	r1, [r4, #20]
 8008832:	6030      	str	r0, [r6, #0]
 8008834:	062e      	lsls	r6, r5, #24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	d501      	bpl.n	800883e <_printf_i+0x1c2>
 800883a:	6019      	str	r1, [r3, #0]
 800883c:	e002      	b.n	8008844 <_printf_i+0x1c8>
 800883e:	0668      	lsls	r0, r5, #25
 8008840:	d5fb      	bpl.n	800883a <_printf_i+0x1be>
 8008842:	8019      	strh	r1, [r3, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	4616      	mov	r6, r2
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	e7bc      	b.n	80087c6 <_printf_i+0x14a>
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	2100      	movs	r1, #0
 8008850:	1d1a      	adds	r2, r3, #4
 8008852:	6032      	str	r2, [r6, #0]
 8008854:	681e      	ldr	r6, [r3, #0]
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	4630      	mov	r0, r6
 800885a:	f000 fac8 	bl	8008dee <memchr>
 800885e:	b108      	cbz	r0, 8008864 <_printf_i+0x1e8>
 8008860:	1b80      	subs	r0, r0, r6
 8008862:	6060      	str	r0, [r4, #4]
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	2300      	movs	r3, #0
 800886a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800886e:	e7aa      	b.n	80087c6 <_printf_i+0x14a>
 8008870:	4632      	mov	r2, r6
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	47d0      	blx	sl
 800887a:	3001      	adds	r0, #1
 800887c:	d0ad      	beq.n	80087da <_printf_i+0x15e>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	079b      	lsls	r3, r3, #30
 8008882:	d413      	bmi.n	80088ac <_printf_i+0x230>
 8008884:	68e0      	ldr	r0, [r4, #12]
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	4298      	cmp	r0, r3
 800888a:	bfb8      	it	lt
 800888c:	4618      	movlt	r0, r3
 800888e:	e7a6      	b.n	80087de <_printf_i+0x162>
 8008890:	2301      	movs	r3, #1
 8008892:	4632      	mov	r2, r6
 8008894:	4649      	mov	r1, r9
 8008896:	4640      	mov	r0, r8
 8008898:	47d0      	blx	sl
 800889a:	3001      	adds	r0, #1
 800889c:	d09d      	beq.n	80087da <_printf_i+0x15e>
 800889e:	3501      	adds	r5, #1
 80088a0:	68e3      	ldr	r3, [r4, #12]
 80088a2:	9903      	ldr	r1, [sp, #12]
 80088a4:	1a5b      	subs	r3, r3, r1
 80088a6:	42ab      	cmp	r3, r5
 80088a8:	dcf2      	bgt.n	8008890 <_printf_i+0x214>
 80088aa:	e7eb      	b.n	8008884 <_printf_i+0x208>
 80088ac:	2500      	movs	r5, #0
 80088ae:	f104 0619 	add.w	r6, r4, #25
 80088b2:	e7f5      	b.n	80088a0 <_printf_i+0x224>
 80088b4:	0800ba46 	.word	0x0800ba46
 80088b8:	0800ba57 	.word	0x0800ba57

080088bc <std>:
 80088bc:	2300      	movs	r3, #0
 80088be:	b510      	push	{r4, lr}
 80088c0:	4604      	mov	r4, r0
 80088c2:	e9c0 3300 	strd	r3, r3, [r0]
 80088c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ca:	6083      	str	r3, [r0, #8]
 80088cc:	8181      	strh	r1, [r0, #12]
 80088ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80088d0:	81c2      	strh	r2, [r0, #14]
 80088d2:	6183      	str	r3, [r0, #24]
 80088d4:	4619      	mov	r1, r3
 80088d6:	2208      	movs	r2, #8
 80088d8:	305c      	adds	r0, #92	@ 0x5c
 80088da:	f000 f9f9 	bl	8008cd0 <memset>
 80088de:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <std+0x58>)
 80088e0:	6224      	str	r4, [r4, #32]
 80088e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80088e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <std+0x5c>)
 80088e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088e8:	4b0c      	ldr	r3, [pc, #48]	@ (800891c <std+0x60>)
 80088ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008920 <std+0x64>)
 80088ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80088f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008924 <std+0x68>)
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d006      	beq.n	8008904 <std+0x48>
 80088f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088fa:	4294      	cmp	r4, r2
 80088fc:	d002      	beq.n	8008904 <std+0x48>
 80088fe:	33d0      	adds	r3, #208	@ 0xd0
 8008900:	429c      	cmp	r4, r3
 8008902:	d105      	bne.n	8008910 <std+0x54>
 8008904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800890c:	f000 ba6c 	b.w	8008de8 <__retarget_lock_init_recursive>
 8008910:	bd10      	pop	{r4, pc}
 8008912:	bf00      	nop
 8008914:	08008b21 	.word	0x08008b21
 8008918:	08008b43 	.word	0x08008b43
 800891c:	08008b7b 	.word	0x08008b7b
 8008920:	08008b9f 	.word	0x08008b9f
 8008924:	20000428 	.word	0x20000428

08008928 <stdio_exit_handler>:
 8008928:	4a02      	ldr	r2, [pc, #8]	@ (8008934 <stdio_exit_handler+0xc>)
 800892a:	4903      	ldr	r1, [pc, #12]	@ (8008938 <stdio_exit_handler+0x10>)
 800892c:	4803      	ldr	r0, [pc, #12]	@ (800893c <stdio_exit_handler+0x14>)
 800892e:	f000 b869 	b.w	8008a04 <_fwalk_sglue>
 8008932:	bf00      	nop
 8008934:	2000000c 	.word	0x2000000c
 8008938:	0800a619 	.word	0x0800a619
 800893c:	2000001c 	.word	0x2000001c

08008940 <cleanup_stdio>:
 8008940:	6841      	ldr	r1, [r0, #4]
 8008942:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <cleanup_stdio+0x34>)
 8008944:	b510      	push	{r4, lr}
 8008946:	4299      	cmp	r1, r3
 8008948:	4604      	mov	r4, r0
 800894a:	d001      	beq.n	8008950 <cleanup_stdio+0x10>
 800894c:	f001 fe64 	bl	800a618 <_fflush_r>
 8008950:	68a1      	ldr	r1, [r4, #8]
 8008952:	4b09      	ldr	r3, [pc, #36]	@ (8008978 <cleanup_stdio+0x38>)
 8008954:	4299      	cmp	r1, r3
 8008956:	d002      	beq.n	800895e <cleanup_stdio+0x1e>
 8008958:	4620      	mov	r0, r4
 800895a:	f001 fe5d 	bl	800a618 <_fflush_r>
 800895e:	68e1      	ldr	r1, [r4, #12]
 8008960:	4b06      	ldr	r3, [pc, #24]	@ (800897c <cleanup_stdio+0x3c>)
 8008962:	4299      	cmp	r1, r3
 8008964:	d004      	beq.n	8008970 <cleanup_stdio+0x30>
 8008966:	4620      	mov	r0, r4
 8008968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800896c:	f001 be54 	b.w	800a618 <_fflush_r>
 8008970:	bd10      	pop	{r4, pc}
 8008972:	bf00      	nop
 8008974:	20000428 	.word	0x20000428
 8008978:	20000490 	.word	0x20000490
 800897c:	200004f8 	.word	0x200004f8

08008980 <global_stdio_init.part.0>:
 8008980:	b510      	push	{r4, lr}
 8008982:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <global_stdio_init.part.0+0x30>)
 8008984:	4c0b      	ldr	r4, [pc, #44]	@ (80089b4 <global_stdio_init.part.0+0x34>)
 8008986:	4a0c      	ldr	r2, [pc, #48]	@ (80089b8 <global_stdio_init.part.0+0x38>)
 8008988:	4620      	mov	r0, r4
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	2104      	movs	r1, #4
 800898e:	2200      	movs	r2, #0
 8008990:	f7ff ff94 	bl	80088bc <std>
 8008994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008998:	2201      	movs	r2, #1
 800899a:	2109      	movs	r1, #9
 800899c:	f7ff ff8e 	bl	80088bc <std>
 80089a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089a4:	2202      	movs	r2, #2
 80089a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089aa:	2112      	movs	r1, #18
 80089ac:	f7ff bf86 	b.w	80088bc <std>
 80089b0:	20000560 	.word	0x20000560
 80089b4:	20000428 	.word	0x20000428
 80089b8:	08008929 	.word	0x08008929

080089bc <__sfp_lock_acquire>:
 80089bc:	4801      	ldr	r0, [pc, #4]	@ (80089c4 <__sfp_lock_acquire+0x8>)
 80089be:	f000 ba14 	b.w	8008dea <__retarget_lock_acquire_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000569 	.word	0x20000569

080089c8 <__sfp_lock_release>:
 80089c8:	4801      	ldr	r0, [pc, #4]	@ (80089d0 <__sfp_lock_release+0x8>)
 80089ca:	f000 ba0f 	b.w	8008dec <__retarget_lock_release_recursive>
 80089ce:	bf00      	nop
 80089d0:	20000569 	.word	0x20000569

080089d4 <__sinit>:
 80089d4:	b510      	push	{r4, lr}
 80089d6:	4604      	mov	r4, r0
 80089d8:	f7ff fff0 	bl	80089bc <__sfp_lock_acquire>
 80089dc:	6a23      	ldr	r3, [r4, #32]
 80089de:	b11b      	cbz	r3, 80089e8 <__sinit+0x14>
 80089e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e4:	f7ff bff0 	b.w	80089c8 <__sfp_lock_release>
 80089e8:	4b04      	ldr	r3, [pc, #16]	@ (80089fc <__sinit+0x28>)
 80089ea:	6223      	str	r3, [r4, #32]
 80089ec:	4b04      	ldr	r3, [pc, #16]	@ (8008a00 <__sinit+0x2c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f5      	bne.n	80089e0 <__sinit+0xc>
 80089f4:	f7ff ffc4 	bl	8008980 <global_stdio_init.part.0>
 80089f8:	e7f2      	b.n	80089e0 <__sinit+0xc>
 80089fa:	bf00      	nop
 80089fc:	08008941 	.word	0x08008941
 8008a00:	20000560 	.word	0x20000560

08008a04 <_fwalk_sglue>:
 8008a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a08:	4607      	mov	r7, r0
 8008a0a:	4688      	mov	r8, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	2600      	movs	r6, #0
 8008a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a14:	f1b9 0901 	subs.w	r9, r9, #1
 8008a18:	d505      	bpl.n	8008a26 <_fwalk_sglue+0x22>
 8008a1a:	6824      	ldr	r4, [r4, #0]
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	d1f7      	bne.n	8008a10 <_fwalk_sglue+0xc>
 8008a20:	4630      	mov	r0, r6
 8008a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d907      	bls.n	8008a3c <_fwalk_sglue+0x38>
 8008a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a30:	3301      	adds	r3, #1
 8008a32:	d003      	beq.n	8008a3c <_fwalk_sglue+0x38>
 8008a34:	4629      	mov	r1, r5
 8008a36:	4638      	mov	r0, r7
 8008a38:	47c0      	blx	r8
 8008a3a:	4306      	orrs	r6, r0
 8008a3c:	3568      	adds	r5, #104	@ 0x68
 8008a3e:	e7e9      	b.n	8008a14 <_fwalk_sglue+0x10>

08008a40 <iprintf>:
 8008a40:	b40f      	push	{r0, r1, r2, r3}
 8008a42:	b507      	push	{r0, r1, r2, lr}
 8008a44:	4906      	ldr	r1, [pc, #24]	@ (8008a60 <iprintf+0x20>)
 8008a46:	ab04      	add	r3, sp, #16
 8008a48:	6808      	ldr	r0, [r1, #0]
 8008a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a4e:	6881      	ldr	r1, [r0, #8]
 8008a50:	9301      	str	r3, [sp, #4]
 8008a52:	f001 fc49 	bl	800a2e8 <_vfiprintf_r>
 8008a56:	b003      	add	sp, #12
 8008a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a5c:	b004      	add	sp, #16
 8008a5e:	4770      	bx	lr
 8008a60:	20000018 	.word	0x20000018

08008a64 <_puts_r>:
 8008a64:	6a03      	ldr	r3, [r0, #32]
 8008a66:	b570      	push	{r4, r5, r6, lr}
 8008a68:	4605      	mov	r5, r0
 8008a6a:	460e      	mov	r6, r1
 8008a6c:	6884      	ldr	r4, [r0, #8]
 8008a6e:	b90b      	cbnz	r3, 8008a74 <_puts_r+0x10>
 8008a70:	f7ff ffb0 	bl	80089d4 <__sinit>
 8008a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a76:	07db      	lsls	r3, r3, #31
 8008a78:	d405      	bmi.n	8008a86 <_puts_r+0x22>
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	0598      	lsls	r0, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_puts_r+0x22>
 8008a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a82:	f000 f9b2 	bl	8008dea <__retarget_lock_acquire_recursive>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	0719      	lsls	r1, r3, #28
 8008a8a:	d502      	bpl.n	8008a92 <_puts_r+0x2e>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d135      	bne.n	8008afe <_puts_r+0x9a>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f8c5 	bl	8008c24 <__swsetup_r>
 8008a9a:	b380      	cbz	r0, 8008afe <_puts_r+0x9a>
 8008a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8008aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aa2:	07da      	lsls	r2, r3, #31
 8008aa4:	d405      	bmi.n	8008ab2 <_puts_r+0x4e>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	059b      	lsls	r3, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_puts_r+0x4e>
 8008aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aae:	f000 f99d 	bl	8008dec <__retarget_lock_release_recursive>
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	bd70      	pop	{r4, r5, r6, pc}
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da04      	bge.n	8008ac4 <_puts_r+0x60>
 8008aba:	69a2      	ldr	r2, [r4, #24]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	dc17      	bgt.n	8008af0 <_puts_r+0x8c>
 8008ac0:	290a      	cmp	r1, #10
 8008ac2:	d015      	beq.n	8008af0 <_puts_r+0x8c>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	6022      	str	r2, [r4, #0]
 8008aca:	7019      	strb	r1, [r3, #0]
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	60a3      	str	r3, [r4, #8]
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	d1ed      	bne.n	8008ab6 <_puts_r+0x52>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	da11      	bge.n	8008b02 <_puts_r+0x9e>
 8008ade:	4622      	mov	r2, r4
 8008ae0:	210a      	movs	r1, #10
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 f85f 	bl	8008ba6 <__swbuf_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d0d7      	beq.n	8008a9c <_puts_r+0x38>
 8008aec:	250a      	movs	r5, #10
 8008aee:	e7d7      	b.n	8008aa0 <_puts_r+0x3c>
 8008af0:	4622      	mov	r2, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f857 	bl	8008ba6 <__swbuf_r>
 8008af8:	3001      	adds	r0, #1
 8008afa:	d1e7      	bne.n	8008acc <_puts_r+0x68>
 8008afc:	e7ce      	b.n	8008a9c <_puts_r+0x38>
 8008afe:	3e01      	subs	r6, #1
 8008b00:	e7e4      	b.n	8008acc <_puts_r+0x68>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	220a      	movs	r2, #10
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	e7ee      	b.n	8008aec <_puts_r+0x88>
	...

08008b10 <puts>:
 8008b10:	4b02      	ldr	r3, [pc, #8]	@ (8008b1c <puts+0xc>)
 8008b12:	4601      	mov	r1, r0
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	f7ff bfa5 	b.w	8008a64 <_puts_r>
 8008b1a:	bf00      	nop
 8008b1c:	20000018 	.word	0x20000018

08008b20 <__sread>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	f000 f900 	bl	8008d2c <_read_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	bfab      	itete	ge
 8008b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b32:	89a3      	ldrhlt	r3, [r4, #12]
 8008b34:	181b      	addge	r3, r3, r0
 8008b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b3a:	bfac      	ite	ge
 8008b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b3e:	81a3      	strhlt	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__swrite>:
 8008b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	461f      	mov	r7, r3
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	05db      	lsls	r3, r3, #23
 8008b4e:	460c      	mov	r4, r1
 8008b50:	4616      	mov	r6, r2
 8008b52:	d505      	bpl.n	8008b60 <__swrite+0x1e>
 8008b54:	2302      	movs	r3, #2
 8008b56:	2200      	movs	r2, #0
 8008b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5c:	f000 f8d4 	bl	8008d08 <_lseek_r>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	4632      	mov	r2, r6
 8008b64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	463b      	mov	r3, r7
 8008b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	f000 b8fb 	b.w	8008d70 <_write_r>

08008b7a <__sseek>:
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	f000 f8c1 	bl	8008d08 <_lseek_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	bf15      	itete	ne
 8008b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b96:	81a3      	strheq	r3, [r4, #12]
 8008b98:	bf18      	it	ne
 8008b9a:	81a3      	strhne	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__sclose>:
 8008b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba2:	f000 b8a1 	b.w	8008ce8 <_close_r>

08008ba6 <__swbuf_r>:
 8008ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba8:	460e      	mov	r6, r1
 8008baa:	4614      	mov	r4, r2
 8008bac:	4605      	mov	r5, r0
 8008bae:	b118      	cbz	r0, 8008bb8 <__swbuf_r+0x12>
 8008bb0:	6a03      	ldr	r3, [r0, #32]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <__swbuf_r+0x12>
 8008bb4:	f7ff ff0e 	bl	80089d4 <__sinit>
 8008bb8:	69a3      	ldr	r3, [r4, #24]
 8008bba:	60a3      	str	r3, [r4, #8]
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	071a      	lsls	r2, r3, #28
 8008bc0:	d501      	bpl.n	8008bc6 <__swbuf_r+0x20>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	b943      	cbnz	r3, 8008bd8 <__swbuf_r+0x32>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 f82b 	bl	8008c24 <__swsetup_r>
 8008bce:	b118      	cbz	r0, 8008bd8 <__swbuf_r+0x32>
 8008bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	b2f6      	uxtb	r6, r6
 8008bde:	1a98      	subs	r0, r3, r2
 8008be0:	6963      	ldr	r3, [r4, #20]
 8008be2:	4637      	mov	r7, r6
 8008be4:	4283      	cmp	r3, r0
 8008be6:	dc05      	bgt.n	8008bf4 <__swbuf_r+0x4e>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f001 fd14 	bl	800a618 <_fflush_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d1ed      	bne.n	8008bd0 <__swbuf_r+0x2a>
 8008bf4:	68a3      	ldr	r3, [r4, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	60a3      	str	r3, [r4, #8]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	701e      	strb	r6, [r3, #0]
 8008c02:	6962      	ldr	r2, [r4, #20]
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d004      	beq.n	8008c14 <__swbuf_r+0x6e>
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	07db      	lsls	r3, r3, #31
 8008c0e:	d5e1      	bpl.n	8008bd4 <__swbuf_r+0x2e>
 8008c10:	2e0a      	cmp	r6, #10
 8008c12:	d1df      	bne.n	8008bd4 <__swbuf_r+0x2e>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f001 fcfe 	bl	800a618 <_fflush_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0d9      	beq.n	8008bd4 <__swbuf_r+0x2e>
 8008c20:	e7d6      	b.n	8008bd0 <__swbuf_r+0x2a>
	...

08008c24 <__swsetup_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4b29      	ldr	r3, [pc, #164]	@ (8008ccc <__swsetup_r+0xa8>)
 8008c28:	4605      	mov	r5, r0
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	b118      	cbz	r0, 8008c38 <__swsetup_r+0x14>
 8008c30:	6a03      	ldr	r3, [r0, #32]
 8008c32:	b90b      	cbnz	r3, 8008c38 <__swsetup_r+0x14>
 8008c34:	f7ff fece 	bl	80089d4 <__sinit>
 8008c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3c:	0719      	lsls	r1, r3, #28
 8008c3e:	d422      	bmi.n	8008c86 <__swsetup_r+0x62>
 8008c40:	06da      	lsls	r2, r3, #27
 8008c42:	d407      	bmi.n	8008c54 <__swsetup_r+0x30>
 8008c44:	2209      	movs	r2, #9
 8008c46:	602a      	str	r2, [r5, #0]
 8008c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	e033      	b.n	8008cbc <__swsetup_r+0x98>
 8008c54:	0758      	lsls	r0, r3, #29
 8008c56:	d512      	bpl.n	8008c7e <__swsetup_r+0x5a>
 8008c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5a:	b141      	cbz	r1, 8008c6e <__swsetup_r+0x4a>
 8008c5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d002      	beq.n	8008c6a <__swsetup_r+0x46>
 8008c64:	4628      	mov	r0, r5
 8008c66:	f000 ff4f 	bl	8009b08 <_free_r>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	2300      	movs	r3, #0
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f043 0308 	orr.w	r3, r3, #8
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	b94b      	cbnz	r3, 8008c9e <__swsetup_r+0x7a>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c94:	d003      	beq.n	8008c9e <__swsetup_r+0x7a>
 8008c96:	4621      	mov	r1, r4
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f001 fd1c 	bl	800a6d6 <__smakebuf_r>
 8008c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca2:	f013 0201 	ands.w	r2, r3, #1
 8008ca6:	d00a      	beq.n	8008cbe <__swsetup_r+0x9a>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	60a2      	str	r2, [r4, #8]
 8008cac:	6962      	ldr	r2, [r4, #20]
 8008cae:	4252      	negs	r2, r2
 8008cb0:	61a2      	str	r2, [r4, #24]
 8008cb2:	6922      	ldr	r2, [r4, #16]
 8008cb4:	b942      	cbnz	r2, 8008cc8 <__swsetup_r+0xa4>
 8008cb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cba:	d1c5      	bne.n	8008c48 <__swsetup_r+0x24>
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	0799      	lsls	r1, r3, #30
 8008cc0:	bf58      	it	pl
 8008cc2:	6962      	ldrpl	r2, [r4, #20]
 8008cc4:	60a2      	str	r2, [r4, #8]
 8008cc6:	e7f4      	b.n	8008cb2 <__swsetup_r+0x8e>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7f7      	b.n	8008cbc <__swsetup_r+0x98>
 8008ccc:	20000018 	.word	0x20000018

08008cd0 <memset>:
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4402      	add	r2, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d100      	bne.n	8008cda <memset+0xa>
 8008cd8:	4770      	bx	lr
 8008cda:	f803 1b01 	strb.w	r1, [r3], #1
 8008cde:	e7f9      	b.n	8008cd4 <memset+0x4>

08008ce0 <_localeconv_r>:
 8008ce0:	4800      	ldr	r0, [pc, #0]	@ (8008ce4 <_localeconv_r+0x4>)
 8008ce2:	4770      	bx	lr
 8008ce4:	20000158 	.word	0x20000158

08008ce8 <_close_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	2300      	movs	r3, #0
 8008cec:	4d05      	ldr	r5, [pc, #20]	@ (8008d04 <_close_r+0x1c>)
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f9 fdae 	bl	8002854 <_close>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_close_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_close_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	20000564 	.word	0x20000564

08008d08 <_lseek_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	2200      	movs	r2, #0
 8008d12:	4d05      	ldr	r5, [pc, #20]	@ (8008d28 <_lseek_r+0x20>)
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7f9 fda6 	bl	8002868 <_lseek>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_lseek_r+0x1e>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_lseek_r+0x1e>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20000564 	.word	0x20000564

08008d2c <_read_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	4611      	mov	r1, r2
 8008d34:	2200      	movs	r2, #0
 8008d36:	4d05      	ldr	r5, [pc, #20]	@ (8008d4c <_read_r+0x20>)
 8008d38:	602a      	str	r2, [r5, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f7f9 fd7a 	bl	8002834 <_read>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_read_r+0x1e>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_read_r+0x1e>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20000564 	.word	0x20000564

08008d50 <_sbrk_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	2300      	movs	r3, #0
 8008d54:	4d05      	ldr	r5, [pc, #20]	@ (8008d6c <_sbrk_r+0x1c>)
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	f7f9 fd86 	bl	800286c <_sbrk>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_sbrk_r+0x1a>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_sbrk_r+0x1a>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	20000564 	.word	0x20000564

08008d70 <_write_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4d05      	ldr	r5, [pc, #20]	@ (8008d90 <_write_r+0x20>)
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f9 f9ce 	bl	8002120 <_write>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_write_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_write_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20000564 	.word	0x20000564

08008d94 <__errno>:
 8008d94:	4b01      	ldr	r3, [pc, #4]	@ (8008d9c <__errno+0x8>)
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000018 	.word	0x20000018

08008da0 <__libc_init_array>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	2600      	movs	r6, #0
 8008da4:	4d0c      	ldr	r5, [pc, #48]	@ (8008dd8 <__libc_init_array+0x38>)
 8008da6:	4c0d      	ldr	r4, [pc, #52]	@ (8008ddc <__libc_init_array+0x3c>)
 8008da8:	1b64      	subs	r4, r4, r5
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	42a6      	cmp	r6, r4
 8008dae:	d109      	bne.n	8008dc4 <__libc_init_array+0x24>
 8008db0:	f002 fc7c 	bl	800b6ac <_init>
 8008db4:	2600      	movs	r6, #0
 8008db6:	4d0a      	ldr	r5, [pc, #40]	@ (8008de0 <__libc_init_array+0x40>)
 8008db8:	4c0a      	ldr	r4, [pc, #40]	@ (8008de4 <__libc_init_array+0x44>)
 8008dba:	1b64      	subs	r4, r4, r5
 8008dbc:	10a4      	asrs	r4, r4, #2
 8008dbe:	42a6      	cmp	r6, r4
 8008dc0:	d105      	bne.n	8008dce <__libc_init_array+0x2e>
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc8:	4798      	blx	r3
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7ee      	b.n	8008dac <__libc_init_array+0xc>
 8008dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd2:	4798      	blx	r3
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	e7f2      	b.n	8008dbe <__libc_init_array+0x1e>
 8008dd8:	0800bde0 	.word	0x0800bde0
 8008ddc:	0800bde0 	.word	0x0800bde0
 8008de0:	0800bde0 	.word	0x0800bde0
 8008de4:	0800bde4 	.word	0x0800bde4

08008de8 <__retarget_lock_init_recursive>:
 8008de8:	4770      	bx	lr

08008dea <__retarget_lock_acquire_recursive>:
 8008dea:	4770      	bx	lr

08008dec <__retarget_lock_release_recursive>:
 8008dec:	4770      	bx	lr

08008dee <memchr>:
 8008dee:	4603      	mov	r3, r0
 8008df0:	b510      	push	{r4, lr}
 8008df2:	b2c9      	uxtb	r1, r1
 8008df4:	4402      	add	r2, r0
 8008df6:	4293      	cmp	r3, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	d101      	bne.n	8008e00 <memchr+0x12>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e003      	b.n	8008e08 <memchr+0x1a>
 8008e00:	7804      	ldrb	r4, [r0, #0]
 8008e02:	3301      	adds	r3, #1
 8008e04:	428c      	cmp	r4, r1
 8008e06:	d1f6      	bne.n	8008df6 <memchr+0x8>
 8008e08:	bd10      	pop	{r4, pc}

08008e0a <memcpy>:
 8008e0a:	440a      	add	r2, r1
 8008e0c:	4291      	cmp	r1, r2
 8008e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e12:	d100      	bne.n	8008e16 <memcpy+0xc>
 8008e14:	4770      	bx	lr
 8008e16:	b510      	push	{r4, lr}
 8008e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e1c:	4291      	cmp	r1, r2
 8008e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e22:	d1f9      	bne.n	8008e18 <memcpy+0xe>
 8008e24:	bd10      	pop	{r4, pc}
	...

08008e28 <__assert_func>:
 8008e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e2a:	4614      	mov	r4, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4b09      	ldr	r3, [pc, #36]	@ (8008e54 <__assert_func+0x2c>)
 8008e30:	4605      	mov	r5, r0
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68d8      	ldr	r0, [r3, #12]
 8008e36:	b954      	cbnz	r4, 8008e4e <__assert_func+0x26>
 8008e38:	4b07      	ldr	r3, [pc, #28]	@ (8008e58 <__assert_func+0x30>)
 8008e3a:	461c      	mov	r4, r3
 8008e3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e40:	9100      	str	r1, [sp, #0]
 8008e42:	462b      	mov	r3, r5
 8008e44:	4905      	ldr	r1, [pc, #20]	@ (8008e5c <__assert_func+0x34>)
 8008e46:	f001 fc0f 	bl	800a668 <fiprintf>
 8008e4a:	f001 fca3 	bl	800a794 <abort>
 8008e4e:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <__assert_func+0x38>)
 8008e50:	e7f4      	b.n	8008e3c <__assert_func+0x14>
 8008e52:	bf00      	nop
 8008e54:	20000018 	.word	0x20000018
 8008e58:	0800baa3 	.word	0x0800baa3
 8008e5c:	0800ba75 	.word	0x0800ba75
 8008e60:	0800ba68 	.word	0x0800ba68

08008e64 <quorem>:
 8008e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	6903      	ldr	r3, [r0, #16]
 8008e6a:	690c      	ldr	r4, [r1, #16]
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	db7e      	blt.n	8008f70 <quorem+0x10c>
 8008e72:	3c01      	subs	r4, #1
 8008e74:	00a3      	lsls	r3, r4, #2
 8008e76:	f100 0514 	add.w	r5, r0, #20
 8008e7a:	f101 0814 	add.w	r8, r1, #20
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	429a      	cmp	r2, r3
 8008e92:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e9a:	d32e      	bcc.n	8008efa <quorem+0x96>
 8008e9c:	f04f 0a00 	mov.w	sl, #0
 8008ea0:	46c4      	mov	ip, r8
 8008ea2:	46ae      	mov	lr, r5
 8008ea4:	46d3      	mov	fp, sl
 8008ea6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008eaa:	b298      	uxth	r0, r3
 8008eac:	fb06 a000 	mla	r0, r6, r0, sl
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	0c02      	lsrs	r2, r0, #16
 8008eb4:	fb06 2303 	mla	r3, r6, r3, r2
 8008eb8:	f8de 2000 	ldr.w	r2, [lr]
 8008ebc:	b280      	uxth	r0, r0
 8008ebe:	b292      	uxth	r2, r2
 8008ec0:	1a12      	subs	r2, r2, r0
 8008ec2:	445a      	add	r2, fp
 8008ec4:	f8de 0000 	ldr.w	r0, [lr]
 8008ec8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ed2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008edc:	45e1      	cmp	r9, ip
 8008ede:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ee2:	f84e 2b04 	str.w	r2, [lr], #4
 8008ee6:	d2de      	bcs.n	8008ea6 <quorem+0x42>
 8008ee8:	9b00      	ldr	r3, [sp, #0]
 8008eea:	58eb      	ldr	r3, [r5, r3]
 8008eec:	b92b      	cbnz	r3, 8008efa <quorem+0x96>
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	3b04      	subs	r3, #4
 8008ef2:	429d      	cmp	r5, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	d32f      	bcc.n	8008f58 <quorem+0xf4>
 8008ef8:	613c      	str	r4, [r7, #16]
 8008efa:	4638      	mov	r0, r7
 8008efc:	f001 f8c4 	bl	800a088 <__mcmp>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	db25      	blt.n	8008f50 <quorem+0xec>
 8008f04:	4629      	mov	r1, r5
 8008f06:	2000      	movs	r0, #0
 8008f08:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f0c:	f8d1 c000 	ldr.w	ip, [r1]
 8008f10:	fa1f fe82 	uxth.w	lr, r2
 8008f14:	fa1f f38c 	uxth.w	r3, ip
 8008f18:	eba3 030e 	sub.w	r3, r3, lr
 8008f1c:	4403      	add	r3, r0
 8008f1e:	0c12      	lsrs	r2, r2, #16
 8008f20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f2e:	45c1      	cmp	r9, r8
 8008f30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f34:	f841 3b04 	str.w	r3, [r1], #4
 8008f38:	d2e6      	bcs.n	8008f08 <quorem+0xa4>
 8008f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f42:	b922      	cbnz	r2, 8008f4e <quorem+0xea>
 8008f44:	3b04      	subs	r3, #4
 8008f46:	429d      	cmp	r5, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	d30b      	bcc.n	8008f64 <quorem+0x100>
 8008f4c:	613c      	str	r4, [r7, #16]
 8008f4e:	3601      	adds	r6, #1
 8008f50:	4630      	mov	r0, r6
 8008f52:	b003      	add	sp, #12
 8008f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f58:	6812      	ldr	r2, [r2, #0]
 8008f5a:	3b04      	subs	r3, #4
 8008f5c:	2a00      	cmp	r2, #0
 8008f5e:	d1cb      	bne.n	8008ef8 <quorem+0x94>
 8008f60:	3c01      	subs	r4, #1
 8008f62:	e7c6      	b.n	8008ef2 <quorem+0x8e>
 8008f64:	6812      	ldr	r2, [r2, #0]
 8008f66:	3b04      	subs	r3, #4
 8008f68:	2a00      	cmp	r2, #0
 8008f6a:	d1ef      	bne.n	8008f4c <quorem+0xe8>
 8008f6c:	3c01      	subs	r4, #1
 8008f6e:	e7ea      	b.n	8008f46 <quorem+0xe2>
 8008f70:	2000      	movs	r0, #0
 8008f72:	e7ee      	b.n	8008f52 <quorem+0xee>
 8008f74:	0000      	movs	r0, r0
	...

08008f78 <_dtoa_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	461d      	mov	r5, r3
 8008f80:	69c7      	ldr	r7, [r0, #28]
 8008f82:	b097      	sub	sp, #92	@ 0x5c
 8008f84:	4683      	mov	fp, r0
 8008f86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008f8c:	b97f      	cbnz	r7, 8008fae <_dtoa_r+0x36>
 8008f8e:	2010      	movs	r0, #16
 8008f90:	f7fe ff82 	bl	8007e98 <malloc>
 8008f94:	4602      	mov	r2, r0
 8008f96:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f9a:	b920      	cbnz	r0, 8008fa6 <_dtoa_r+0x2e>
 8008f9c:	21ef      	movs	r1, #239	@ 0xef
 8008f9e:	4ba8      	ldr	r3, [pc, #672]	@ (8009240 <_dtoa_r+0x2c8>)
 8008fa0:	48a8      	ldr	r0, [pc, #672]	@ (8009244 <_dtoa_r+0x2cc>)
 8008fa2:	f7ff ff41 	bl	8008e28 <__assert_func>
 8008fa6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008faa:	6007      	str	r7, [r0, #0]
 8008fac:	60c7      	str	r7, [r0, #12]
 8008fae:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	b159      	cbz	r1, 8008fce <_dtoa_r+0x56>
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4093      	lsls	r3, r2
 8008fbc:	604a      	str	r2, [r1, #4]
 8008fbe:	608b      	str	r3, [r1, #8]
 8008fc0:	4658      	mov	r0, fp
 8008fc2:	f000 fe29 	bl	8009c18 <_Bfree>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	1e2b      	subs	r3, r5, #0
 8008fd0:	bfaf      	iteee	ge
 8008fd2:	2300      	movge	r3, #0
 8008fd4:	2201      	movlt	r2, #1
 8008fd6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008fda:	9303      	strlt	r3, [sp, #12]
 8008fdc:	bfa8      	it	ge
 8008fde:	6033      	strge	r3, [r6, #0]
 8008fe0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008fe4:	4b98      	ldr	r3, [pc, #608]	@ (8009248 <_dtoa_r+0x2d0>)
 8008fe6:	bfb8      	it	lt
 8008fe8:	6032      	strlt	r2, [r6, #0]
 8008fea:	ea33 0308 	bics.w	r3, r3, r8
 8008fee:	d112      	bne.n	8009016 <_dtoa_r+0x9e>
 8008ff0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ff4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008ffc:	4323      	orrs	r3, r4
 8008ffe:	f000 8550 	beq.w	8009aa2 <_dtoa_r+0xb2a>
 8009002:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009004:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800924c <_dtoa_r+0x2d4>
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 8552 	beq.w	8009ab2 <_dtoa_r+0xb3a>
 800900e:	f10a 0303 	add.w	r3, sl, #3
 8009012:	f000 bd4c 	b.w	8009aae <_dtoa_r+0xb36>
 8009016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800901e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009022:	2200      	movs	r2, #0
 8009024:	2300      	movs	r3, #0
 8009026:	f7f7 fcbf 	bl	80009a8 <__aeabi_dcmpeq>
 800902a:	4607      	mov	r7, r0
 800902c:	b158      	cbz	r0, 8009046 <_dtoa_r+0xce>
 800902e:	2301      	movs	r3, #1
 8009030:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009036:	b113      	cbz	r3, 800903e <_dtoa_r+0xc6>
 8009038:	4b85      	ldr	r3, [pc, #532]	@ (8009250 <_dtoa_r+0x2d8>)
 800903a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009254 <_dtoa_r+0x2dc>
 8009042:	f000 bd36 	b.w	8009ab2 <_dtoa_r+0xb3a>
 8009046:	ab14      	add	r3, sp, #80	@ 0x50
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	ab15      	add	r3, sp, #84	@ 0x54
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	4658      	mov	r0, fp
 8009050:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009054:	f001 f8c8 	bl	800a1e8 <__d2b>
 8009058:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800905c:	4681      	mov	r9, r0
 800905e:	2e00      	cmp	r6, #0
 8009060:	d077      	beq.n	8009152 <_dtoa_r+0x1da>
 8009062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009068:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800906c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009070:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009074:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009078:	9712      	str	r7, [sp, #72]	@ 0x48
 800907a:	4619      	mov	r1, r3
 800907c:	2200      	movs	r2, #0
 800907e:	4b76      	ldr	r3, [pc, #472]	@ (8009258 <_dtoa_r+0x2e0>)
 8009080:	f7f7 f872 	bl	8000168 <__aeabi_dsub>
 8009084:	a368      	add	r3, pc, #416	@ (adr r3, 8009228 <_dtoa_r+0x2b0>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 fa25 	bl	80004d8 <__aeabi_dmul>
 800908e:	a368      	add	r3, pc, #416	@ (adr r3, 8009230 <_dtoa_r+0x2b8>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 f86a 	bl	800016c <__adddf3>
 8009098:	4604      	mov	r4, r0
 800909a:	4630      	mov	r0, r6
 800909c:	460d      	mov	r5, r1
 800909e:	f7f7 f9b1 	bl	8000404 <__aeabi_i2d>
 80090a2:	a365      	add	r3, pc, #404	@ (adr r3, 8009238 <_dtoa_r+0x2c0>)
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	f7f7 fa16 	bl	80004d8 <__aeabi_dmul>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4620      	mov	r0, r4
 80090b2:	4629      	mov	r1, r5
 80090b4:	f7f7 f85a 	bl	800016c <__adddf3>
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	f7f7 fcbc 	bl	8000a38 <__aeabi_d2iz>
 80090c0:	2200      	movs	r2, #0
 80090c2:	4607      	mov	r7, r0
 80090c4:	2300      	movs	r3, #0
 80090c6:	4620      	mov	r0, r4
 80090c8:	4629      	mov	r1, r5
 80090ca:	f7f7 fc77 	bl	80009bc <__aeabi_dcmplt>
 80090ce:	b140      	cbz	r0, 80090e2 <_dtoa_r+0x16a>
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7f7 f997 	bl	8000404 <__aeabi_i2d>
 80090d6:	4622      	mov	r2, r4
 80090d8:	462b      	mov	r3, r5
 80090da:	f7f7 fc65 	bl	80009a8 <__aeabi_dcmpeq>
 80090de:	b900      	cbnz	r0, 80090e2 <_dtoa_r+0x16a>
 80090e0:	3f01      	subs	r7, #1
 80090e2:	2f16      	cmp	r7, #22
 80090e4:	d853      	bhi.n	800918e <_dtoa_r+0x216>
 80090e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ea:	4b5c      	ldr	r3, [pc, #368]	@ (800925c <_dtoa_r+0x2e4>)
 80090ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 fc62 	bl	80009bc <__aeabi_dcmplt>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d04a      	beq.n	8009192 <_dtoa_r+0x21a>
 80090fc:	2300      	movs	r3, #0
 80090fe:	3f01      	subs	r7, #1
 8009100:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009102:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009104:	1b9b      	subs	r3, r3, r6
 8009106:	1e5a      	subs	r2, r3, #1
 8009108:	bf46      	itte	mi
 800910a:	f1c3 0801 	rsbmi	r8, r3, #1
 800910e:	2300      	movmi	r3, #0
 8009110:	f04f 0800 	movpl.w	r8, #0
 8009114:	9209      	str	r2, [sp, #36]	@ 0x24
 8009116:	bf48      	it	mi
 8009118:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800911a:	2f00      	cmp	r7, #0
 800911c:	db3b      	blt.n	8009196 <_dtoa_r+0x21e>
 800911e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009120:	970e      	str	r7, [sp, #56]	@ 0x38
 8009122:	443b      	add	r3, r7
 8009124:	9309      	str	r3, [sp, #36]	@ 0x24
 8009126:	2300      	movs	r3, #0
 8009128:	930a      	str	r3, [sp, #40]	@ 0x28
 800912a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800912c:	2b09      	cmp	r3, #9
 800912e:	d866      	bhi.n	80091fe <_dtoa_r+0x286>
 8009130:	2b05      	cmp	r3, #5
 8009132:	bfc4      	itt	gt
 8009134:	3b04      	subgt	r3, #4
 8009136:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009138:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800913a:	bfc8      	it	gt
 800913c:	2400      	movgt	r4, #0
 800913e:	f1a3 0302 	sub.w	r3, r3, #2
 8009142:	bfd8      	it	le
 8009144:	2401      	movle	r4, #1
 8009146:	2b03      	cmp	r3, #3
 8009148:	d864      	bhi.n	8009214 <_dtoa_r+0x29c>
 800914a:	e8df f003 	tbb	[pc, r3]
 800914e:	382b      	.short	0x382b
 8009150:	5636      	.short	0x5636
 8009152:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009156:	441e      	add	r6, r3
 8009158:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800915c:	2b20      	cmp	r3, #32
 800915e:	bfc1      	itttt	gt
 8009160:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009164:	fa08 f803 	lslgt.w	r8, r8, r3
 8009168:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800916c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009170:	bfd6      	itet	le
 8009172:	f1c3 0320 	rsble	r3, r3, #32
 8009176:	ea48 0003 	orrgt.w	r0, r8, r3
 800917a:	fa04 f003 	lslle.w	r0, r4, r3
 800917e:	f7f7 f931 	bl	80003e4 <__aeabi_ui2d>
 8009182:	2201      	movs	r2, #1
 8009184:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009188:	3e01      	subs	r6, #1
 800918a:	9212      	str	r2, [sp, #72]	@ 0x48
 800918c:	e775      	b.n	800907a <_dtoa_r+0x102>
 800918e:	2301      	movs	r3, #1
 8009190:	e7b6      	b.n	8009100 <_dtoa_r+0x188>
 8009192:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009194:	e7b5      	b.n	8009102 <_dtoa_r+0x18a>
 8009196:	427b      	negs	r3, r7
 8009198:	930a      	str	r3, [sp, #40]	@ 0x28
 800919a:	2300      	movs	r3, #0
 800919c:	eba8 0807 	sub.w	r8, r8, r7
 80091a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80091a2:	e7c2      	b.n	800912a <_dtoa_r+0x1b2>
 80091a4:	2300      	movs	r3, #0
 80091a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	dc35      	bgt.n	800921a <_dtoa_r+0x2a2>
 80091ae:	2301      	movs	r3, #1
 80091b0:	461a      	mov	r2, r3
 80091b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80091b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80091b8:	e00b      	b.n	80091d2 <_dtoa_r+0x25a>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e7f3      	b.n	80091a6 <_dtoa_r+0x22e>
 80091be:	2300      	movs	r3, #0
 80091c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091c4:	18fb      	adds	r3, r7, r3
 80091c6:	9308      	str	r3, [sp, #32]
 80091c8:	3301      	adds	r3, #1
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	9307      	str	r3, [sp, #28]
 80091ce:	bfb8      	it	lt
 80091d0:	2301      	movlt	r3, #1
 80091d2:	2100      	movs	r1, #0
 80091d4:	2204      	movs	r2, #4
 80091d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80091da:	f102 0514 	add.w	r5, r2, #20
 80091de:	429d      	cmp	r5, r3
 80091e0:	d91f      	bls.n	8009222 <_dtoa_r+0x2aa>
 80091e2:	6041      	str	r1, [r0, #4]
 80091e4:	4658      	mov	r0, fp
 80091e6:	f000 fcd7 	bl	8009b98 <_Balloc>
 80091ea:	4682      	mov	sl, r0
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d139      	bne.n	8009264 <_dtoa_r+0x2ec>
 80091f0:	4602      	mov	r2, r0
 80091f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80091f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009260 <_dtoa_r+0x2e8>)
 80091f8:	e6d2      	b.n	8008fa0 <_dtoa_r+0x28>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e7e0      	b.n	80091c0 <_dtoa_r+0x248>
 80091fe:	2401      	movs	r4, #1
 8009200:	2300      	movs	r3, #0
 8009202:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009204:	9320      	str	r3, [sp, #128]	@ 0x80
 8009206:	f04f 33ff 	mov.w	r3, #4294967295
 800920a:	2200      	movs	r2, #0
 800920c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009210:	2312      	movs	r3, #18
 8009212:	e7d0      	b.n	80091b6 <_dtoa_r+0x23e>
 8009214:	2301      	movs	r3, #1
 8009216:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009218:	e7f5      	b.n	8009206 <_dtoa_r+0x28e>
 800921a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800921c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009220:	e7d7      	b.n	80091d2 <_dtoa_r+0x25a>
 8009222:	3101      	adds	r1, #1
 8009224:	0052      	lsls	r2, r2, #1
 8009226:	e7d8      	b.n	80091da <_dtoa_r+0x262>
 8009228:	636f4361 	.word	0x636f4361
 800922c:	3fd287a7 	.word	0x3fd287a7
 8009230:	8b60c8b3 	.word	0x8b60c8b3
 8009234:	3fc68a28 	.word	0x3fc68a28
 8009238:	509f79fb 	.word	0x509f79fb
 800923c:	3fd34413 	.word	0x3fd34413
 8009240:	0800bab1 	.word	0x0800bab1
 8009244:	0800bac8 	.word	0x0800bac8
 8009248:	7ff00000 	.word	0x7ff00000
 800924c:	0800baad 	.word	0x0800baad
 8009250:	0800ba45 	.word	0x0800ba45
 8009254:	0800ba44 	.word	0x0800ba44
 8009258:	3ff80000 	.word	0x3ff80000
 800925c:	0800bbc0 	.word	0x0800bbc0
 8009260:	0800bb20 	.word	0x0800bb20
 8009264:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009268:	6018      	str	r0, [r3, #0]
 800926a:	9b07      	ldr	r3, [sp, #28]
 800926c:	2b0e      	cmp	r3, #14
 800926e:	f200 80a4 	bhi.w	80093ba <_dtoa_r+0x442>
 8009272:	2c00      	cmp	r4, #0
 8009274:	f000 80a1 	beq.w	80093ba <_dtoa_r+0x442>
 8009278:	2f00      	cmp	r7, #0
 800927a:	dd33      	ble.n	80092e4 <_dtoa_r+0x36c>
 800927c:	4b86      	ldr	r3, [pc, #536]	@ (8009498 <_dtoa_r+0x520>)
 800927e:	f007 020f 	and.w	r2, r7, #15
 8009282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009286:	05f8      	lsls	r0, r7, #23
 8009288:	e9d3 3400 	ldrd	r3, r4, [r3]
 800928c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009290:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009294:	d516      	bpl.n	80092c4 <_dtoa_r+0x34c>
 8009296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800929a:	4b80      	ldr	r3, [pc, #512]	@ (800949c <_dtoa_r+0x524>)
 800929c:	2603      	movs	r6, #3
 800929e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092a2:	f7f7 fa43 	bl	800072c <__aeabi_ddiv>
 80092a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092aa:	f004 040f 	and.w	r4, r4, #15
 80092ae:	4d7b      	ldr	r5, [pc, #492]	@ (800949c <_dtoa_r+0x524>)
 80092b0:	b954      	cbnz	r4, 80092c8 <_dtoa_r+0x350>
 80092b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ba:	f7f7 fa37 	bl	800072c <__aeabi_ddiv>
 80092be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092c2:	e028      	b.n	8009316 <_dtoa_r+0x39e>
 80092c4:	2602      	movs	r6, #2
 80092c6:	e7f2      	b.n	80092ae <_dtoa_r+0x336>
 80092c8:	07e1      	lsls	r1, r4, #31
 80092ca:	d508      	bpl.n	80092de <_dtoa_r+0x366>
 80092cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092d4:	f7f7 f900 	bl	80004d8 <__aeabi_dmul>
 80092d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092dc:	3601      	adds	r6, #1
 80092de:	1064      	asrs	r4, r4, #1
 80092e0:	3508      	adds	r5, #8
 80092e2:	e7e5      	b.n	80092b0 <_dtoa_r+0x338>
 80092e4:	f000 80d2 	beq.w	800948c <_dtoa_r+0x514>
 80092e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ec:	427c      	negs	r4, r7
 80092ee:	4b6a      	ldr	r3, [pc, #424]	@ (8009498 <_dtoa_r+0x520>)
 80092f0:	f004 020f 	and.w	r2, r4, #15
 80092f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f7f7 f8ec 	bl	80004d8 <__aeabi_dmul>
 8009300:	2602      	movs	r6, #2
 8009302:	2300      	movs	r3, #0
 8009304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009308:	4d64      	ldr	r5, [pc, #400]	@ (800949c <_dtoa_r+0x524>)
 800930a:	1124      	asrs	r4, r4, #4
 800930c:	2c00      	cmp	r4, #0
 800930e:	f040 80b2 	bne.w	8009476 <_dtoa_r+0x4fe>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1d3      	bne.n	80092be <_dtoa_r+0x346>
 8009316:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800931a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 80b7 	beq.w	8009490 <_dtoa_r+0x518>
 8009322:	2200      	movs	r2, #0
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	4b5d      	ldr	r3, [pc, #372]	@ (80094a0 <_dtoa_r+0x528>)
 800932a:	f7f7 fb47 	bl	80009bc <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	f000 80ae 	beq.w	8009490 <_dtoa_r+0x518>
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 80aa 	beq.w	8009490 <_dtoa_r+0x518>
 800933c:	9b08      	ldr	r3, [sp, #32]
 800933e:	2b00      	cmp	r3, #0
 8009340:	dd37      	ble.n	80093b2 <_dtoa_r+0x43a>
 8009342:	1e7b      	subs	r3, r7, #1
 8009344:	4620      	mov	r0, r4
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	2200      	movs	r2, #0
 800934a:	4629      	mov	r1, r5
 800934c:	4b55      	ldr	r3, [pc, #340]	@ (80094a4 <_dtoa_r+0x52c>)
 800934e:	f7f7 f8c3 	bl	80004d8 <__aeabi_dmul>
 8009352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009356:	9c08      	ldr	r4, [sp, #32]
 8009358:	3601      	adds	r6, #1
 800935a:	4630      	mov	r0, r6
 800935c:	f7f7 f852 	bl	8000404 <__aeabi_i2d>
 8009360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009364:	f7f7 f8b8 	bl	80004d8 <__aeabi_dmul>
 8009368:	2200      	movs	r2, #0
 800936a:	4b4f      	ldr	r3, [pc, #316]	@ (80094a8 <_dtoa_r+0x530>)
 800936c:	f7f6 fefe 	bl	800016c <__adddf3>
 8009370:	4605      	mov	r5, r0
 8009372:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009376:	2c00      	cmp	r4, #0
 8009378:	f040 809a 	bne.w	80094b0 <_dtoa_r+0x538>
 800937c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009380:	2200      	movs	r2, #0
 8009382:	4b4a      	ldr	r3, [pc, #296]	@ (80094ac <_dtoa_r+0x534>)
 8009384:	f7f6 fef0 	bl	8000168 <__aeabi_dsub>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009390:	462a      	mov	r2, r5
 8009392:	4633      	mov	r3, r6
 8009394:	f7f7 fb30 	bl	80009f8 <__aeabi_dcmpgt>
 8009398:	2800      	cmp	r0, #0
 800939a:	f040 828e 	bne.w	80098ba <_dtoa_r+0x942>
 800939e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a2:	462a      	mov	r2, r5
 80093a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093a8:	f7f7 fb08 	bl	80009bc <__aeabi_dcmplt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f040 8127 	bne.w	8009600 <_dtoa_r+0x688>
 80093b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80093b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80093ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f2c0 8163 	blt.w	8009688 <_dtoa_r+0x710>
 80093c2:	2f0e      	cmp	r7, #14
 80093c4:	f300 8160 	bgt.w	8009688 <_dtoa_r+0x710>
 80093c8:	4b33      	ldr	r3, [pc, #204]	@ (8009498 <_dtoa_r+0x520>)
 80093ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80093d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093d8:	2b00      	cmp	r3, #0
 80093da:	da03      	bge.n	80093e4 <_dtoa_r+0x46c>
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f340 8100 	ble.w	80095e4 <_dtoa_r+0x66c>
 80093e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093e8:	4656      	mov	r6, sl
 80093ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ee:	4620      	mov	r0, r4
 80093f0:	4629      	mov	r1, r5
 80093f2:	f7f7 f99b 	bl	800072c <__aeabi_ddiv>
 80093f6:	f7f7 fb1f 	bl	8000a38 <__aeabi_d2iz>
 80093fa:	4680      	mov	r8, r0
 80093fc:	f7f7 f802 	bl	8000404 <__aeabi_i2d>
 8009400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009404:	f7f7 f868 	bl	80004d8 <__aeabi_dmul>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4620      	mov	r0, r4
 800940e:	4629      	mov	r1, r5
 8009410:	f7f6 feaa 	bl	8000168 <__aeabi_dsub>
 8009414:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009418:	9d07      	ldr	r5, [sp, #28]
 800941a:	f806 4b01 	strb.w	r4, [r6], #1
 800941e:	eba6 040a 	sub.w	r4, r6, sl
 8009422:	42a5      	cmp	r5, r4
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	f040 8116 	bne.w	8009658 <_dtoa_r+0x6e0>
 800942c:	f7f6 fe9e 	bl	800016c <__adddf3>
 8009430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009434:	4604      	mov	r4, r0
 8009436:	460d      	mov	r5, r1
 8009438:	f7f7 fade 	bl	80009f8 <__aeabi_dcmpgt>
 800943c:	2800      	cmp	r0, #0
 800943e:	f040 80f8 	bne.w	8009632 <_dtoa_r+0x6ba>
 8009442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f7 faad 	bl	80009a8 <__aeabi_dcmpeq>
 800944e:	b118      	cbz	r0, 8009458 <_dtoa_r+0x4e0>
 8009450:	f018 0f01 	tst.w	r8, #1
 8009454:	f040 80ed 	bne.w	8009632 <_dtoa_r+0x6ba>
 8009458:	4649      	mov	r1, r9
 800945a:	4658      	mov	r0, fp
 800945c:	f000 fbdc 	bl	8009c18 <_Bfree>
 8009460:	2300      	movs	r3, #0
 8009462:	7033      	strb	r3, [r6, #0]
 8009464:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009466:	3701      	adds	r7, #1
 8009468:	601f      	str	r7, [r3, #0]
 800946a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 8320 	beq.w	8009ab2 <_dtoa_r+0xb3a>
 8009472:	601e      	str	r6, [r3, #0]
 8009474:	e31d      	b.n	8009ab2 <_dtoa_r+0xb3a>
 8009476:	07e2      	lsls	r2, r4, #31
 8009478:	d505      	bpl.n	8009486 <_dtoa_r+0x50e>
 800947a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800947e:	f7f7 f82b 	bl	80004d8 <__aeabi_dmul>
 8009482:	2301      	movs	r3, #1
 8009484:	3601      	adds	r6, #1
 8009486:	1064      	asrs	r4, r4, #1
 8009488:	3508      	adds	r5, #8
 800948a:	e73f      	b.n	800930c <_dtoa_r+0x394>
 800948c:	2602      	movs	r6, #2
 800948e:	e742      	b.n	8009316 <_dtoa_r+0x39e>
 8009490:	9c07      	ldr	r4, [sp, #28]
 8009492:	9704      	str	r7, [sp, #16]
 8009494:	e761      	b.n	800935a <_dtoa_r+0x3e2>
 8009496:	bf00      	nop
 8009498:	0800bbc0 	.word	0x0800bbc0
 800949c:	0800bb98 	.word	0x0800bb98
 80094a0:	3ff00000 	.word	0x3ff00000
 80094a4:	40240000 	.word	0x40240000
 80094a8:	401c0000 	.word	0x401c0000
 80094ac:	40140000 	.word	0x40140000
 80094b0:	4b70      	ldr	r3, [pc, #448]	@ (8009674 <_dtoa_r+0x6fc>)
 80094b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094bc:	4454      	add	r4, sl
 80094be:	2900      	cmp	r1, #0
 80094c0:	d045      	beq.n	800954e <_dtoa_r+0x5d6>
 80094c2:	2000      	movs	r0, #0
 80094c4:	496c      	ldr	r1, [pc, #432]	@ (8009678 <_dtoa_r+0x700>)
 80094c6:	f7f7 f931 	bl	800072c <__aeabi_ddiv>
 80094ca:	4633      	mov	r3, r6
 80094cc:	462a      	mov	r2, r5
 80094ce:	f7f6 fe4b 	bl	8000168 <__aeabi_dsub>
 80094d2:	4656      	mov	r6, sl
 80094d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094dc:	f7f7 faac 	bl	8000a38 <__aeabi_d2iz>
 80094e0:	4605      	mov	r5, r0
 80094e2:	f7f6 ff8f 	bl	8000404 <__aeabi_i2d>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ee:	f7f6 fe3b 	bl	8000168 <__aeabi_dsub>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	3530      	adds	r5, #48	@ 0x30
 80094f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009500:	f806 5b01 	strb.w	r5, [r6], #1
 8009504:	f7f7 fa5a 	bl	80009bc <__aeabi_dcmplt>
 8009508:	2800      	cmp	r0, #0
 800950a:	d163      	bne.n	80095d4 <_dtoa_r+0x65c>
 800950c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009510:	2000      	movs	r0, #0
 8009512:	495a      	ldr	r1, [pc, #360]	@ (800967c <_dtoa_r+0x704>)
 8009514:	f7f6 fe28 	bl	8000168 <__aeabi_dsub>
 8009518:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800951c:	f7f7 fa4e 	bl	80009bc <__aeabi_dcmplt>
 8009520:	2800      	cmp	r0, #0
 8009522:	f040 8087 	bne.w	8009634 <_dtoa_r+0x6bc>
 8009526:	42a6      	cmp	r6, r4
 8009528:	f43f af43 	beq.w	80093b2 <_dtoa_r+0x43a>
 800952c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009530:	2200      	movs	r2, #0
 8009532:	4b53      	ldr	r3, [pc, #332]	@ (8009680 <_dtoa_r+0x708>)
 8009534:	f7f6 ffd0 	bl	80004d8 <__aeabi_dmul>
 8009538:	2200      	movs	r2, #0
 800953a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800953e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009542:	4b4f      	ldr	r3, [pc, #316]	@ (8009680 <_dtoa_r+0x708>)
 8009544:	f7f6 ffc8 	bl	80004d8 <__aeabi_dmul>
 8009548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800954c:	e7c4      	b.n	80094d8 <_dtoa_r+0x560>
 800954e:	4631      	mov	r1, r6
 8009550:	4628      	mov	r0, r5
 8009552:	f7f6 ffc1 	bl	80004d8 <__aeabi_dmul>
 8009556:	4656      	mov	r6, sl
 8009558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800955c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800955e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009562:	f7f7 fa69 	bl	8000a38 <__aeabi_d2iz>
 8009566:	4605      	mov	r5, r0
 8009568:	f7f6 ff4c 	bl	8000404 <__aeabi_i2d>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009574:	f7f6 fdf8 	bl	8000168 <__aeabi_dsub>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	3530      	adds	r5, #48	@ 0x30
 800957e:	f806 5b01 	strb.w	r5, [r6], #1
 8009582:	42a6      	cmp	r6, r4
 8009584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009588:	f04f 0200 	mov.w	r2, #0
 800958c:	d124      	bne.n	80095d8 <_dtoa_r+0x660>
 800958e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009592:	4b39      	ldr	r3, [pc, #228]	@ (8009678 <_dtoa_r+0x700>)
 8009594:	f7f6 fdea 	bl	800016c <__adddf3>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095a0:	f7f7 fa2a 	bl	80009f8 <__aeabi_dcmpgt>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d145      	bne.n	8009634 <_dtoa_r+0x6bc>
 80095a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095ac:	2000      	movs	r0, #0
 80095ae:	4932      	ldr	r1, [pc, #200]	@ (8009678 <_dtoa_r+0x700>)
 80095b0:	f7f6 fdda 	bl	8000168 <__aeabi_dsub>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095bc:	f7f7 f9fe 	bl	80009bc <__aeabi_dcmplt>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f43f aef6 	beq.w	80093b2 <_dtoa_r+0x43a>
 80095c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80095c8:	1e73      	subs	r3, r6, #1
 80095ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095d0:	2b30      	cmp	r3, #48	@ 0x30
 80095d2:	d0f8      	beq.n	80095c6 <_dtoa_r+0x64e>
 80095d4:	9f04      	ldr	r7, [sp, #16]
 80095d6:	e73f      	b.n	8009458 <_dtoa_r+0x4e0>
 80095d8:	4b29      	ldr	r3, [pc, #164]	@ (8009680 <_dtoa_r+0x708>)
 80095da:	f7f6 ff7d 	bl	80004d8 <__aeabi_dmul>
 80095de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095e2:	e7bc      	b.n	800955e <_dtoa_r+0x5e6>
 80095e4:	d10c      	bne.n	8009600 <_dtoa_r+0x688>
 80095e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095ea:	2200      	movs	r2, #0
 80095ec:	4b25      	ldr	r3, [pc, #148]	@ (8009684 <_dtoa_r+0x70c>)
 80095ee:	f7f6 ff73 	bl	80004d8 <__aeabi_dmul>
 80095f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095f6:	f7f7 f9f5 	bl	80009e4 <__aeabi_dcmpge>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f000 815b 	beq.w	80098b6 <_dtoa_r+0x93e>
 8009600:	2400      	movs	r4, #0
 8009602:	4625      	mov	r5, r4
 8009604:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009606:	4656      	mov	r6, sl
 8009608:	43db      	mvns	r3, r3
 800960a:	9304      	str	r3, [sp, #16]
 800960c:	2700      	movs	r7, #0
 800960e:	4621      	mov	r1, r4
 8009610:	4658      	mov	r0, fp
 8009612:	f000 fb01 	bl	8009c18 <_Bfree>
 8009616:	2d00      	cmp	r5, #0
 8009618:	d0dc      	beq.n	80095d4 <_dtoa_r+0x65c>
 800961a:	b12f      	cbz	r7, 8009628 <_dtoa_r+0x6b0>
 800961c:	42af      	cmp	r7, r5
 800961e:	d003      	beq.n	8009628 <_dtoa_r+0x6b0>
 8009620:	4639      	mov	r1, r7
 8009622:	4658      	mov	r0, fp
 8009624:	f000 faf8 	bl	8009c18 <_Bfree>
 8009628:	4629      	mov	r1, r5
 800962a:	4658      	mov	r0, fp
 800962c:	f000 faf4 	bl	8009c18 <_Bfree>
 8009630:	e7d0      	b.n	80095d4 <_dtoa_r+0x65c>
 8009632:	9704      	str	r7, [sp, #16]
 8009634:	4633      	mov	r3, r6
 8009636:	461e      	mov	r6, r3
 8009638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800963c:	2a39      	cmp	r2, #57	@ 0x39
 800963e:	d107      	bne.n	8009650 <_dtoa_r+0x6d8>
 8009640:	459a      	cmp	sl, r3
 8009642:	d1f8      	bne.n	8009636 <_dtoa_r+0x6be>
 8009644:	9a04      	ldr	r2, [sp, #16]
 8009646:	3201      	adds	r2, #1
 8009648:	9204      	str	r2, [sp, #16]
 800964a:	2230      	movs	r2, #48	@ 0x30
 800964c:	f88a 2000 	strb.w	r2, [sl]
 8009650:	781a      	ldrb	r2, [r3, #0]
 8009652:	3201      	adds	r2, #1
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	e7bd      	b.n	80095d4 <_dtoa_r+0x65c>
 8009658:	2200      	movs	r2, #0
 800965a:	4b09      	ldr	r3, [pc, #36]	@ (8009680 <_dtoa_r+0x708>)
 800965c:	f7f6 ff3c 	bl	80004d8 <__aeabi_dmul>
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	4604      	mov	r4, r0
 8009666:	460d      	mov	r5, r1
 8009668:	f7f7 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800966c:	2800      	cmp	r0, #0
 800966e:	f43f aebc 	beq.w	80093ea <_dtoa_r+0x472>
 8009672:	e6f1      	b.n	8009458 <_dtoa_r+0x4e0>
 8009674:	0800bbc0 	.word	0x0800bbc0
 8009678:	3fe00000 	.word	0x3fe00000
 800967c:	3ff00000 	.word	0x3ff00000
 8009680:	40240000 	.word	0x40240000
 8009684:	40140000 	.word	0x40140000
 8009688:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800968a:	2a00      	cmp	r2, #0
 800968c:	f000 80db 	beq.w	8009846 <_dtoa_r+0x8ce>
 8009690:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009692:	2a01      	cmp	r2, #1
 8009694:	f300 80bf 	bgt.w	8009816 <_dtoa_r+0x89e>
 8009698:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800969a:	2a00      	cmp	r2, #0
 800969c:	f000 80b7 	beq.w	800980e <_dtoa_r+0x896>
 80096a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096a4:	4646      	mov	r6, r8
 80096a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096aa:	2101      	movs	r1, #1
 80096ac:	441a      	add	r2, r3
 80096ae:	4658      	mov	r0, fp
 80096b0:	4498      	add	r8, r3
 80096b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096b4:	f000 fb64 	bl	8009d80 <__i2b>
 80096b8:	4605      	mov	r5, r0
 80096ba:	b15e      	cbz	r6, 80096d4 <_dtoa_r+0x75c>
 80096bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096be:	2b00      	cmp	r3, #0
 80096c0:	dd08      	ble.n	80096d4 <_dtoa_r+0x75c>
 80096c2:	42b3      	cmp	r3, r6
 80096c4:	bfa8      	it	ge
 80096c6:	4633      	movge	r3, r6
 80096c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ca:	eba8 0803 	sub.w	r8, r8, r3
 80096ce:	1af6      	subs	r6, r6, r3
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096d6:	b1f3      	cbz	r3, 8009716 <_dtoa_r+0x79e>
 80096d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 80b7 	beq.w	800984e <_dtoa_r+0x8d6>
 80096e0:	b18c      	cbz	r4, 8009706 <_dtoa_r+0x78e>
 80096e2:	4629      	mov	r1, r5
 80096e4:	4622      	mov	r2, r4
 80096e6:	4658      	mov	r0, fp
 80096e8:	f000 fc08 	bl	8009efc <__pow5mult>
 80096ec:	464a      	mov	r2, r9
 80096ee:	4601      	mov	r1, r0
 80096f0:	4605      	mov	r5, r0
 80096f2:	4658      	mov	r0, fp
 80096f4:	f000 fb5a 	bl	8009dac <__multiply>
 80096f8:	4649      	mov	r1, r9
 80096fa:	9004      	str	r0, [sp, #16]
 80096fc:	4658      	mov	r0, fp
 80096fe:	f000 fa8b 	bl	8009c18 <_Bfree>
 8009702:	9b04      	ldr	r3, [sp, #16]
 8009704:	4699      	mov	r9, r3
 8009706:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009708:	1b1a      	subs	r2, r3, r4
 800970a:	d004      	beq.n	8009716 <_dtoa_r+0x79e>
 800970c:	4649      	mov	r1, r9
 800970e:	4658      	mov	r0, fp
 8009710:	f000 fbf4 	bl	8009efc <__pow5mult>
 8009714:	4681      	mov	r9, r0
 8009716:	2101      	movs	r1, #1
 8009718:	4658      	mov	r0, fp
 800971a:	f000 fb31 	bl	8009d80 <__i2b>
 800971e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009720:	4604      	mov	r4, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 81c9 	beq.w	8009aba <_dtoa_r+0xb42>
 8009728:	461a      	mov	r2, r3
 800972a:	4601      	mov	r1, r0
 800972c:	4658      	mov	r0, fp
 800972e:	f000 fbe5 	bl	8009efc <__pow5mult>
 8009732:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009734:	4604      	mov	r4, r0
 8009736:	2b01      	cmp	r3, #1
 8009738:	f300 808f 	bgt.w	800985a <_dtoa_r+0x8e2>
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 8087 	bne.w	8009852 <_dtoa_r+0x8da>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800974a:	2b00      	cmp	r3, #0
 800974c:	f040 8083 	bne.w	8009856 <_dtoa_r+0x8de>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009756:	0d1b      	lsrs	r3, r3, #20
 8009758:	051b      	lsls	r3, r3, #20
 800975a:	b12b      	cbz	r3, 8009768 <_dtoa_r+0x7f0>
 800975c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975e:	f108 0801 	add.w	r8, r8, #1
 8009762:	3301      	adds	r3, #1
 8009764:	9309      	str	r3, [sp, #36]	@ 0x24
 8009766:	2301      	movs	r3, #1
 8009768:	930a      	str	r3, [sp, #40]	@ 0x28
 800976a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 81aa 	beq.w	8009ac6 <_dtoa_r+0xb4e>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009778:	6918      	ldr	r0, [r3, #16]
 800977a:	f000 fab5 	bl	8009ce8 <__hi0bits>
 800977e:	f1c0 0020 	rsb	r0, r0, #32
 8009782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009784:	4418      	add	r0, r3
 8009786:	f010 001f 	ands.w	r0, r0, #31
 800978a:	d071      	beq.n	8009870 <_dtoa_r+0x8f8>
 800978c:	f1c0 0320 	rsb	r3, r0, #32
 8009790:	2b04      	cmp	r3, #4
 8009792:	dd65      	ble.n	8009860 <_dtoa_r+0x8e8>
 8009794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009796:	f1c0 001c 	rsb	r0, r0, #28
 800979a:	4403      	add	r3, r0
 800979c:	4480      	add	r8, r0
 800979e:	4406      	add	r6, r0
 80097a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097a2:	f1b8 0f00 	cmp.w	r8, #0
 80097a6:	dd05      	ble.n	80097b4 <_dtoa_r+0x83c>
 80097a8:	4649      	mov	r1, r9
 80097aa:	4642      	mov	r2, r8
 80097ac:	4658      	mov	r0, fp
 80097ae:	f000 fbff 	bl	8009fb0 <__lshift>
 80097b2:	4681      	mov	r9, r0
 80097b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd05      	ble.n	80097c6 <_dtoa_r+0x84e>
 80097ba:	4621      	mov	r1, r4
 80097bc:	461a      	mov	r2, r3
 80097be:	4658      	mov	r0, fp
 80097c0:	f000 fbf6 	bl	8009fb0 <__lshift>
 80097c4:	4604      	mov	r4, r0
 80097c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d053      	beq.n	8009874 <_dtoa_r+0x8fc>
 80097cc:	4621      	mov	r1, r4
 80097ce:	4648      	mov	r0, r9
 80097d0:	f000 fc5a 	bl	800a088 <__mcmp>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	da4d      	bge.n	8009874 <_dtoa_r+0x8fc>
 80097d8:	1e7b      	subs	r3, r7, #1
 80097da:	4649      	mov	r1, r9
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	220a      	movs	r2, #10
 80097e0:	2300      	movs	r3, #0
 80097e2:	4658      	mov	r0, fp
 80097e4:	f000 fa3a 	bl	8009c5c <__multadd>
 80097e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097ea:	4681      	mov	r9, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 816c 	beq.w	8009aca <_dtoa_r+0xb52>
 80097f2:	2300      	movs	r3, #0
 80097f4:	4629      	mov	r1, r5
 80097f6:	220a      	movs	r2, #10
 80097f8:	4658      	mov	r0, fp
 80097fa:	f000 fa2f 	bl	8009c5c <__multadd>
 80097fe:	9b08      	ldr	r3, [sp, #32]
 8009800:	4605      	mov	r5, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	dc61      	bgt.n	80098ca <_dtoa_r+0x952>
 8009806:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009808:	2b02      	cmp	r3, #2
 800980a:	dc3b      	bgt.n	8009884 <_dtoa_r+0x90c>
 800980c:	e05d      	b.n	80098ca <_dtoa_r+0x952>
 800980e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009810:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009814:	e746      	b.n	80096a4 <_dtoa_r+0x72c>
 8009816:	9b07      	ldr	r3, [sp, #28]
 8009818:	1e5c      	subs	r4, r3, #1
 800981a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981c:	42a3      	cmp	r3, r4
 800981e:	bfbf      	itttt	lt
 8009820:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009822:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009824:	1ae3      	sublt	r3, r4, r3
 8009826:	18d2      	addlt	r2, r2, r3
 8009828:	bfa8      	it	ge
 800982a:	1b1c      	subge	r4, r3, r4
 800982c:	9b07      	ldr	r3, [sp, #28]
 800982e:	bfbe      	ittt	lt
 8009830:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009832:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009834:	2400      	movlt	r4, #0
 8009836:	2b00      	cmp	r3, #0
 8009838:	bfb5      	itete	lt
 800983a:	eba8 0603 	sublt.w	r6, r8, r3
 800983e:	4646      	movge	r6, r8
 8009840:	2300      	movlt	r3, #0
 8009842:	9b07      	ldrge	r3, [sp, #28]
 8009844:	e730      	b.n	80096a8 <_dtoa_r+0x730>
 8009846:	4646      	mov	r6, r8
 8009848:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800984a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800984c:	e735      	b.n	80096ba <_dtoa_r+0x742>
 800984e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009850:	e75c      	b.n	800970c <_dtoa_r+0x794>
 8009852:	2300      	movs	r3, #0
 8009854:	e788      	b.n	8009768 <_dtoa_r+0x7f0>
 8009856:	9b02      	ldr	r3, [sp, #8]
 8009858:	e786      	b.n	8009768 <_dtoa_r+0x7f0>
 800985a:	2300      	movs	r3, #0
 800985c:	930a      	str	r3, [sp, #40]	@ 0x28
 800985e:	e788      	b.n	8009772 <_dtoa_r+0x7fa>
 8009860:	d09f      	beq.n	80097a2 <_dtoa_r+0x82a>
 8009862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009864:	331c      	adds	r3, #28
 8009866:	441a      	add	r2, r3
 8009868:	4498      	add	r8, r3
 800986a:	441e      	add	r6, r3
 800986c:	9209      	str	r2, [sp, #36]	@ 0x24
 800986e:	e798      	b.n	80097a2 <_dtoa_r+0x82a>
 8009870:	4603      	mov	r3, r0
 8009872:	e7f6      	b.n	8009862 <_dtoa_r+0x8ea>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	9704      	str	r7, [sp, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	dc20      	bgt.n	80098be <_dtoa_r+0x946>
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009880:	2b02      	cmp	r3, #2
 8009882:	dd1e      	ble.n	80098c2 <_dtoa_r+0x94a>
 8009884:	9b08      	ldr	r3, [sp, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f47f aebc 	bne.w	8009604 <_dtoa_r+0x68c>
 800988c:	4621      	mov	r1, r4
 800988e:	2205      	movs	r2, #5
 8009890:	4658      	mov	r0, fp
 8009892:	f000 f9e3 	bl	8009c5c <__multadd>
 8009896:	4601      	mov	r1, r0
 8009898:	4604      	mov	r4, r0
 800989a:	4648      	mov	r0, r9
 800989c:	f000 fbf4 	bl	800a088 <__mcmp>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	f77f aeaf 	ble.w	8009604 <_dtoa_r+0x68c>
 80098a6:	2331      	movs	r3, #49	@ 0x31
 80098a8:	4656      	mov	r6, sl
 80098aa:	f806 3b01 	strb.w	r3, [r6], #1
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	3301      	adds	r3, #1
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	e6aa      	b.n	800960c <_dtoa_r+0x694>
 80098b6:	9c07      	ldr	r4, [sp, #28]
 80098b8:	9704      	str	r7, [sp, #16]
 80098ba:	4625      	mov	r5, r4
 80098bc:	e7f3      	b.n	80098a6 <_dtoa_r+0x92e>
 80098be:	9b07      	ldr	r3, [sp, #28]
 80098c0:	9308      	str	r3, [sp, #32]
 80098c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8104 	beq.w	8009ad2 <_dtoa_r+0xb5a>
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	dd05      	ble.n	80098da <_dtoa_r+0x962>
 80098ce:	4629      	mov	r1, r5
 80098d0:	4632      	mov	r2, r6
 80098d2:	4658      	mov	r0, fp
 80098d4:	f000 fb6c 	bl	8009fb0 <__lshift>
 80098d8:	4605      	mov	r5, r0
 80098da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d05a      	beq.n	8009996 <_dtoa_r+0xa1e>
 80098e0:	4658      	mov	r0, fp
 80098e2:	6869      	ldr	r1, [r5, #4]
 80098e4:	f000 f958 	bl	8009b98 <_Balloc>
 80098e8:	4606      	mov	r6, r0
 80098ea:	b928      	cbnz	r0, 80098f8 <_dtoa_r+0x980>
 80098ec:	4602      	mov	r2, r0
 80098ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80098f2:	4b83      	ldr	r3, [pc, #524]	@ (8009b00 <_dtoa_r+0xb88>)
 80098f4:	f7ff bb54 	b.w	8008fa0 <_dtoa_r+0x28>
 80098f8:	692a      	ldr	r2, [r5, #16]
 80098fa:	f105 010c 	add.w	r1, r5, #12
 80098fe:	3202      	adds	r2, #2
 8009900:	0092      	lsls	r2, r2, #2
 8009902:	300c      	adds	r0, #12
 8009904:	f7ff fa81 	bl	8008e0a <memcpy>
 8009908:	2201      	movs	r2, #1
 800990a:	4631      	mov	r1, r6
 800990c:	4658      	mov	r0, fp
 800990e:	f000 fb4f 	bl	8009fb0 <__lshift>
 8009912:	462f      	mov	r7, r5
 8009914:	4605      	mov	r5, r0
 8009916:	f10a 0301 	add.w	r3, sl, #1
 800991a:	9307      	str	r3, [sp, #28]
 800991c:	9b08      	ldr	r3, [sp, #32]
 800991e:	4453      	add	r3, sl
 8009920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	930a      	str	r3, [sp, #40]	@ 0x28
 800992a:	9b07      	ldr	r3, [sp, #28]
 800992c:	4621      	mov	r1, r4
 800992e:	3b01      	subs	r3, #1
 8009930:	4648      	mov	r0, r9
 8009932:	9302      	str	r3, [sp, #8]
 8009934:	f7ff fa96 	bl	8008e64 <quorem>
 8009938:	4639      	mov	r1, r7
 800993a:	9008      	str	r0, [sp, #32]
 800993c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009940:	4648      	mov	r0, r9
 8009942:	f000 fba1 	bl	800a088 <__mcmp>
 8009946:	462a      	mov	r2, r5
 8009948:	9009      	str	r0, [sp, #36]	@ 0x24
 800994a:	4621      	mov	r1, r4
 800994c:	4658      	mov	r0, fp
 800994e:	f000 fbb7 	bl	800a0c0 <__mdiff>
 8009952:	68c2      	ldr	r2, [r0, #12]
 8009954:	4606      	mov	r6, r0
 8009956:	bb02      	cbnz	r2, 800999a <_dtoa_r+0xa22>
 8009958:	4601      	mov	r1, r0
 800995a:	4648      	mov	r0, r9
 800995c:	f000 fb94 	bl	800a088 <__mcmp>
 8009960:	4602      	mov	r2, r0
 8009962:	4631      	mov	r1, r6
 8009964:	4658      	mov	r0, fp
 8009966:	920c      	str	r2, [sp, #48]	@ 0x30
 8009968:	f000 f956 	bl	8009c18 <_Bfree>
 800996c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800996e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009970:	9e07      	ldr	r6, [sp, #28]
 8009972:	ea43 0102 	orr.w	r1, r3, r2
 8009976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009978:	4319      	orrs	r1, r3
 800997a:	d110      	bne.n	800999e <_dtoa_r+0xa26>
 800997c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009980:	d029      	beq.n	80099d6 <_dtoa_r+0xa5e>
 8009982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd02      	ble.n	800998e <_dtoa_r+0xa16>
 8009988:	9b08      	ldr	r3, [sp, #32]
 800998a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800998e:	9b02      	ldr	r3, [sp, #8]
 8009990:	f883 8000 	strb.w	r8, [r3]
 8009994:	e63b      	b.n	800960e <_dtoa_r+0x696>
 8009996:	4628      	mov	r0, r5
 8009998:	e7bb      	b.n	8009912 <_dtoa_r+0x99a>
 800999a:	2201      	movs	r2, #1
 800999c:	e7e1      	b.n	8009962 <_dtoa_r+0x9ea>
 800999e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	db04      	blt.n	80099ae <_dtoa_r+0xa36>
 80099a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80099a6:	430b      	orrs	r3, r1
 80099a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099aa:	430b      	orrs	r3, r1
 80099ac:	d120      	bne.n	80099f0 <_dtoa_r+0xa78>
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	dded      	ble.n	800998e <_dtoa_r+0xa16>
 80099b2:	4649      	mov	r1, r9
 80099b4:	2201      	movs	r2, #1
 80099b6:	4658      	mov	r0, fp
 80099b8:	f000 fafa 	bl	8009fb0 <__lshift>
 80099bc:	4621      	mov	r1, r4
 80099be:	4681      	mov	r9, r0
 80099c0:	f000 fb62 	bl	800a088 <__mcmp>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	dc03      	bgt.n	80099d0 <_dtoa_r+0xa58>
 80099c8:	d1e1      	bne.n	800998e <_dtoa_r+0xa16>
 80099ca:	f018 0f01 	tst.w	r8, #1
 80099ce:	d0de      	beq.n	800998e <_dtoa_r+0xa16>
 80099d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099d4:	d1d8      	bne.n	8009988 <_dtoa_r+0xa10>
 80099d6:	2339      	movs	r3, #57	@ 0x39
 80099d8:	9a02      	ldr	r2, [sp, #8]
 80099da:	7013      	strb	r3, [r2, #0]
 80099dc:	4633      	mov	r3, r6
 80099de:	461e      	mov	r6, r3
 80099e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2a39      	cmp	r2, #57	@ 0x39
 80099e8:	d052      	beq.n	8009a90 <_dtoa_r+0xb18>
 80099ea:	3201      	adds	r2, #1
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	e60e      	b.n	800960e <_dtoa_r+0x696>
 80099f0:	2a00      	cmp	r2, #0
 80099f2:	dd07      	ble.n	8009a04 <_dtoa_r+0xa8c>
 80099f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099f8:	d0ed      	beq.n	80099d6 <_dtoa_r+0xa5e>
 80099fa:	9a02      	ldr	r2, [sp, #8]
 80099fc:	f108 0301 	add.w	r3, r8, #1
 8009a00:	7013      	strb	r3, [r2, #0]
 8009a02:	e604      	b.n	800960e <_dtoa_r+0x696>
 8009a04:	9b07      	ldr	r3, [sp, #28]
 8009a06:	9a07      	ldr	r2, [sp, #28]
 8009a08:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009a0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d028      	beq.n	8009a64 <_dtoa_r+0xaec>
 8009a12:	4649      	mov	r1, r9
 8009a14:	2300      	movs	r3, #0
 8009a16:	220a      	movs	r2, #10
 8009a18:	4658      	mov	r0, fp
 8009a1a:	f000 f91f 	bl	8009c5c <__multadd>
 8009a1e:	42af      	cmp	r7, r5
 8009a20:	4681      	mov	r9, r0
 8009a22:	f04f 0300 	mov.w	r3, #0
 8009a26:	f04f 020a 	mov.w	r2, #10
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	4658      	mov	r0, fp
 8009a2e:	d107      	bne.n	8009a40 <_dtoa_r+0xac8>
 8009a30:	f000 f914 	bl	8009c5c <__multadd>
 8009a34:	4607      	mov	r7, r0
 8009a36:	4605      	mov	r5, r0
 8009a38:	9b07      	ldr	r3, [sp, #28]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	9307      	str	r3, [sp, #28]
 8009a3e:	e774      	b.n	800992a <_dtoa_r+0x9b2>
 8009a40:	f000 f90c 	bl	8009c5c <__multadd>
 8009a44:	4629      	mov	r1, r5
 8009a46:	4607      	mov	r7, r0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	4658      	mov	r0, fp
 8009a4e:	f000 f905 	bl	8009c5c <__multadd>
 8009a52:	4605      	mov	r5, r0
 8009a54:	e7f0      	b.n	8009a38 <_dtoa_r+0xac0>
 8009a56:	9b08      	ldr	r3, [sp, #32]
 8009a58:	2700      	movs	r7, #0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	bfcc      	ite	gt
 8009a5e:	461e      	movgt	r6, r3
 8009a60:	2601      	movle	r6, #1
 8009a62:	4456      	add	r6, sl
 8009a64:	4649      	mov	r1, r9
 8009a66:	2201      	movs	r2, #1
 8009a68:	4658      	mov	r0, fp
 8009a6a:	f000 faa1 	bl	8009fb0 <__lshift>
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4681      	mov	r9, r0
 8009a72:	f000 fb09 	bl	800a088 <__mcmp>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	dcb0      	bgt.n	80099dc <_dtoa_r+0xa64>
 8009a7a:	d102      	bne.n	8009a82 <_dtoa_r+0xb0a>
 8009a7c:	f018 0f01 	tst.w	r8, #1
 8009a80:	d1ac      	bne.n	80099dc <_dtoa_r+0xa64>
 8009a82:	4633      	mov	r3, r6
 8009a84:	461e      	mov	r6, r3
 8009a86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a8a:	2a30      	cmp	r2, #48	@ 0x30
 8009a8c:	d0fa      	beq.n	8009a84 <_dtoa_r+0xb0c>
 8009a8e:	e5be      	b.n	800960e <_dtoa_r+0x696>
 8009a90:	459a      	cmp	sl, r3
 8009a92:	d1a4      	bne.n	80099de <_dtoa_r+0xa66>
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	3301      	adds	r3, #1
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	2331      	movs	r3, #49	@ 0x31
 8009a9c:	f88a 3000 	strb.w	r3, [sl]
 8009aa0:	e5b5      	b.n	800960e <_dtoa_r+0x696>
 8009aa2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009aa4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009b04 <_dtoa_r+0xb8c>
 8009aa8:	b11b      	cbz	r3, 8009ab2 <_dtoa_r+0xb3a>
 8009aaa:	f10a 0308 	add.w	r3, sl, #8
 8009aae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	4650      	mov	r0, sl
 8009ab4:	b017      	add	sp, #92	@ 0x5c
 8009ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	f77f ae3d 	ble.w	800973c <_dtoa_r+0x7c4>
 8009ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ac4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	e65b      	b.n	8009782 <_dtoa_r+0x80a>
 8009aca:	9b08      	ldr	r3, [sp, #32]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f77f aed6 	ble.w	800987e <_dtoa_r+0x906>
 8009ad2:	4656      	mov	r6, sl
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4648      	mov	r0, r9
 8009ad8:	f7ff f9c4 	bl	8008e64 <quorem>
 8009adc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	f806 8b01 	strb.w	r8, [r6], #1
 8009ae6:	eba6 020a 	sub.w	r2, r6, sl
 8009aea:	4293      	cmp	r3, r2
 8009aec:	ddb3      	ble.n	8009a56 <_dtoa_r+0xade>
 8009aee:	4649      	mov	r1, r9
 8009af0:	2300      	movs	r3, #0
 8009af2:	220a      	movs	r2, #10
 8009af4:	4658      	mov	r0, fp
 8009af6:	f000 f8b1 	bl	8009c5c <__multadd>
 8009afa:	4681      	mov	r9, r0
 8009afc:	e7ea      	b.n	8009ad4 <_dtoa_r+0xb5c>
 8009afe:	bf00      	nop
 8009b00:	0800bb20 	.word	0x0800bb20
 8009b04:	0800baa4 	.word	0x0800baa4

08009b08 <_free_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d040      	beq.n	8009b92 <_free_r+0x8a>
 8009b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b14:	1f0c      	subs	r4, r1, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	18e4      	addlt	r4, r4, r3
 8009b1c:	f7fe fa66 	bl	8007fec <__malloc_lock>
 8009b20:	4a1c      	ldr	r2, [pc, #112]	@ (8009b94 <_free_r+0x8c>)
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	b933      	cbnz	r3, 8009b34 <_free_r+0x2c>
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	6014      	str	r4, [r2, #0]
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b30:	f7fe ba62 	b.w	8007ff8 <__malloc_unlock>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d908      	bls.n	8009b4a <_free_r+0x42>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	1821      	adds	r1, r4, r0
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf01      	itttt	eq
 8009b40:	6819      	ldreq	r1, [r3, #0]
 8009b42:	685b      	ldreq	r3, [r3, #4]
 8009b44:	1809      	addeq	r1, r1, r0
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	e7ed      	b.n	8009b26 <_free_r+0x1e>
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	b10b      	cbz	r3, 8009b54 <_free_r+0x4c>
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	d9fa      	bls.n	8009b4a <_free_r+0x42>
 8009b54:	6811      	ldr	r1, [r2, #0]
 8009b56:	1850      	adds	r0, r2, r1
 8009b58:	42a0      	cmp	r0, r4
 8009b5a:	d10b      	bne.n	8009b74 <_free_r+0x6c>
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	4401      	add	r1, r0
 8009b60:	1850      	adds	r0, r2, r1
 8009b62:	4283      	cmp	r3, r0
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	d1e0      	bne.n	8009b2a <_free_r+0x22>
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4408      	add	r0, r1
 8009b6e:	6010      	str	r0, [r2, #0]
 8009b70:	6053      	str	r3, [r2, #4]
 8009b72:	e7da      	b.n	8009b2a <_free_r+0x22>
 8009b74:	d902      	bls.n	8009b7c <_free_r+0x74>
 8009b76:	230c      	movs	r3, #12
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	e7d6      	b.n	8009b2a <_free_r+0x22>
 8009b7c:	6820      	ldr	r0, [r4, #0]
 8009b7e:	1821      	adds	r1, r4, r0
 8009b80:	428b      	cmp	r3, r1
 8009b82:	bf01      	itttt	eq
 8009b84:	6819      	ldreq	r1, [r3, #0]
 8009b86:	685b      	ldreq	r3, [r3, #4]
 8009b88:	1809      	addeq	r1, r1, r0
 8009b8a:	6021      	streq	r1, [r4, #0]
 8009b8c:	6063      	str	r3, [r4, #4]
 8009b8e:	6054      	str	r4, [r2, #4]
 8009b90:	e7cb      	b.n	8009b2a <_free_r+0x22>
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	20000424 	.word	0x20000424

08009b98 <_Balloc>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	69c6      	ldr	r6, [r0, #28]
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	460d      	mov	r5, r1
 8009ba0:	b976      	cbnz	r6, 8009bc0 <_Balloc+0x28>
 8009ba2:	2010      	movs	r0, #16
 8009ba4:	f7fe f978 	bl	8007e98 <malloc>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	61e0      	str	r0, [r4, #28]
 8009bac:	b920      	cbnz	r0, 8009bb8 <_Balloc+0x20>
 8009bae:	216b      	movs	r1, #107	@ 0x6b
 8009bb0:	4b17      	ldr	r3, [pc, #92]	@ (8009c10 <_Balloc+0x78>)
 8009bb2:	4818      	ldr	r0, [pc, #96]	@ (8009c14 <_Balloc+0x7c>)
 8009bb4:	f7ff f938 	bl	8008e28 <__assert_func>
 8009bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bbc:	6006      	str	r6, [r0, #0]
 8009bbe:	60c6      	str	r6, [r0, #12]
 8009bc0:	69e6      	ldr	r6, [r4, #28]
 8009bc2:	68f3      	ldr	r3, [r6, #12]
 8009bc4:	b183      	cbz	r3, 8009be8 <_Balloc+0x50>
 8009bc6:	69e3      	ldr	r3, [r4, #28]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bce:	b9b8      	cbnz	r0, 8009c00 <_Balloc+0x68>
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8009bd6:	1d72      	adds	r2, r6, #5
 8009bd8:	4620      	mov	r0, r4
 8009bda:	0092      	lsls	r2, r2, #2
 8009bdc:	f000 fde1 	bl	800a7a2 <_calloc_r>
 8009be0:	b160      	cbz	r0, 8009bfc <_Balloc+0x64>
 8009be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009be6:	e00e      	b.n	8009c06 <_Balloc+0x6e>
 8009be8:	2221      	movs	r2, #33	@ 0x21
 8009bea:	2104      	movs	r1, #4
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 fdd8 	bl	800a7a2 <_calloc_r>
 8009bf2:	69e3      	ldr	r3, [r4, #28]
 8009bf4:	60f0      	str	r0, [r6, #12]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e4      	bne.n	8009bc6 <_Balloc+0x2e>
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	6802      	ldr	r2, [r0, #0]
 8009c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c06:	2300      	movs	r3, #0
 8009c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c0c:	e7f7      	b.n	8009bfe <_Balloc+0x66>
 8009c0e:	bf00      	nop
 8009c10:	0800bab1 	.word	0x0800bab1
 8009c14:	0800bb31 	.word	0x0800bb31

08009c18 <_Bfree>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	69c6      	ldr	r6, [r0, #28]
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b976      	cbnz	r6, 8009c40 <_Bfree+0x28>
 8009c22:	2010      	movs	r0, #16
 8009c24:	f7fe f938 	bl	8007e98 <malloc>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	61e8      	str	r0, [r5, #28]
 8009c2c:	b920      	cbnz	r0, 8009c38 <_Bfree+0x20>
 8009c2e:	218f      	movs	r1, #143	@ 0x8f
 8009c30:	4b08      	ldr	r3, [pc, #32]	@ (8009c54 <_Bfree+0x3c>)
 8009c32:	4809      	ldr	r0, [pc, #36]	@ (8009c58 <_Bfree+0x40>)
 8009c34:	f7ff f8f8 	bl	8008e28 <__assert_func>
 8009c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c3c:	6006      	str	r6, [r0, #0]
 8009c3e:	60c6      	str	r6, [r0, #12]
 8009c40:	b13c      	cbz	r4, 8009c52 <_Bfree+0x3a>
 8009c42:	69eb      	ldr	r3, [r5, #28]
 8009c44:	6862      	ldr	r2, [r4, #4]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c4c:	6021      	str	r1, [r4, #0]
 8009c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	0800bab1 	.word	0x0800bab1
 8009c58:	0800bb31 	.word	0x0800bb31

08009c5c <__multadd>:
 8009c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c60:	4607      	mov	r7, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	461e      	mov	r6, r3
 8009c66:	2000      	movs	r0, #0
 8009c68:	690d      	ldr	r5, [r1, #16]
 8009c6a:	f101 0c14 	add.w	ip, r1, #20
 8009c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c72:	3001      	adds	r0, #1
 8009c74:	b299      	uxth	r1, r3
 8009c76:	fb02 6101 	mla	r1, r2, r1, r6
 8009c7a:	0c1e      	lsrs	r6, r3, #16
 8009c7c:	0c0b      	lsrs	r3, r1, #16
 8009c7e:	fb02 3306 	mla	r3, r2, r6, r3
 8009c82:	b289      	uxth	r1, r1
 8009c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c88:	4285      	cmp	r5, r0
 8009c8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c8e:	f84c 1b04 	str.w	r1, [ip], #4
 8009c92:	dcec      	bgt.n	8009c6e <__multadd+0x12>
 8009c94:	b30e      	cbz	r6, 8009cda <__multadd+0x7e>
 8009c96:	68a3      	ldr	r3, [r4, #8]
 8009c98:	42ab      	cmp	r3, r5
 8009c9a:	dc19      	bgt.n	8009cd0 <__multadd+0x74>
 8009c9c:	6861      	ldr	r1, [r4, #4]
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	3101      	adds	r1, #1
 8009ca2:	f7ff ff79 	bl	8009b98 <_Balloc>
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	b928      	cbnz	r0, 8009cb6 <__multadd+0x5a>
 8009caa:	4602      	mov	r2, r0
 8009cac:	21ba      	movs	r1, #186	@ 0xba
 8009cae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce0 <__multadd+0x84>)
 8009cb0:	480c      	ldr	r0, [pc, #48]	@ (8009ce4 <__multadd+0x88>)
 8009cb2:	f7ff f8b9 	bl	8008e28 <__assert_func>
 8009cb6:	6922      	ldr	r2, [r4, #16]
 8009cb8:	f104 010c 	add.w	r1, r4, #12
 8009cbc:	3202      	adds	r2, #2
 8009cbe:	0092      	lsls	r2, r2, #2
 8009cc0:	300c      	adds	r0, #12
 8009cc2:	f7ff f8a2 	bl	8008e0a <memcpy>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f7ff ffa5 	bl	8009c18 <_Bfree>
 8009cce:	4644      	mov	r4, r8
 8009cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cd4:	3501      	adds	r5, #1
 8009cd6:	615e      	str	r6, [r3, #20]
 8009cd8:	6125      	str	r5, [r4, #16]
 8009cda:	4620      	mov	r0, r4
 8009cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce0:	0800bb20 	.word	0x0800bb20
 8009ce4:	0800bb31 	.word	0x0800bb31

08009ce8 <__hi0bits>:
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009cee:	bf3a      	itte	cc
 8009cf0:	0403      	lslcc	r3, r0, #16
 8009cf2:	2010      	movcc	r0, #16
 8009cf4:	2000      	movcs	r0, #0
 8009cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cfa:	bf3c      	itt	cc
 8009cfc:	021b      	lslcc	r3, r3, #8
 8009cfe:	3008      	addcc	r0, #8
 8009d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d04:	bf3c      	itt	cc
 8009d06:	011b      	lslcc	r3, r3, #4
 8009d08:	3004      	addcc	r0, #4
 8009d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d0e:	bf3c      	itt	cc
 8009d10:	009b      	lslcc	r3, r3, #2
 8009d12:	3002      	addcc	r0, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	db05      	blt.n	8009d24 <__hi0bits+0x3c>
 8009d18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d1c:	f100 0001 	add.w	r0, r0, #1
 8009d20:	bf08      	it	eq
 8009d22:	2020      	moveq	r0, #32
 8009d24:	4770      	bx	lr

08009d26 <__lo0bits>:
 8009d26:	6803      	ldr	r3, [r0, #0]
 8009d28:	4602      	mov	r2, r0
 8009d2a:	f013 0007 	ands.w	r0, r3, #7
 8009d2e:	d00b      	beq.n	8009d48 <__lo0bits+0x22>
 8009d30:	07d9      	lsls	r1, r3, #31
 8009d32:	d421      	bmi.n	8009d78 <__lo0bits+0x52>
 8009d34:	0798      	lsls	r0, r3, #30
 8009d36:	bf49      	itett	mi
 8009d38:	085b      	lsrmi	r3, r3, #1
 8009d3a:	089b      	lsrpl	r3, r3, #2
 8009d3c:	2001      	movmi	r0, #1
 8009d3e:	6013      	strmi	r3, [r2, #0]
 8009d40:	bf5c      	itt	pl
 8009d42:	2002      	movpl	r0, #2
 8009d44:	6013      	strpl	r3, [r2, #0]
 8009d46:	4770      	bx	lr
 8009d48:	b299      	uxth	r1, r3
 8009d4a:	b909      	cbnz	r1, 8009d50 <__lo0bits+0x2a>
 8009d4c:	2010      	movs	r0, #16
 8009d4e:	0c1b      	lsrs	r3, r3, #16
 8009d50:	b2d9      	uxtb	r1, r3
 8009d52:	b909      	cbnz	r1, 8009d58 <__lo0bits+0x32>
 8009d54:	3008      	adds	r0, #8
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	0719      	lsls	r1, r3, #28
 8009d5a:	bf04      	itt	eq
 8009d5c:	091b      	lsreq	r3, r3, #4
 8009d5e:	3004      	addeq	r0, #4
 8009d60:	0799      	lsls	r1, r3, #30
 8009d62:	bf04      	itt	eq
 8009d64:	089b      	lsreq	r3, r3, #2
 8009d66:	3002      	addeq	r0, #2
 8009d68:	07d9      	lsls	r1, r3, #31
 8009d6a:	d403      	bmi.n	8009d74 <__lo0bits+0x4e>
 8009d6c:	085b      	lsrs	r3, r3, #1
 8009d6e:	f100 0001 	add.w	r0, r0, #1
 8009d72:	d003      	beq.n	8009d7c <__lo0bits+0x56>
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	4770      	bx	lr
 8009d78:	2000      	movs	r0, #0
 8009d7a:	4770      	bx	lr
 8009d7c:	2020      	movs	r0, #32
 8009d7e:	4770      	bx	lr

08009d80 <__i2b>:
 8009d80:	b510      	push	{r4, lr}
 8009d82:	460c      	mov	r4, r1
 8009d84:	2101      	movs	r1, #1
 8009d86:	f7ff ff07 	bl	8009b98 <_Balloc>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	b928      	cbnz	r0, 8009d9a <__i2b+0x1a>
 8009d8e:	f240 1145 	movw	r1, #325	@ 0x145
 8009d92:	4b04      	ldr	r3, [pc, #16]	@ (8009da4 <__i2b+0x24>)
 8009d94:	4804      	ldr	r0, [pc, #16]	@ (8009da8 <__i2b+0x28>)
 8009d96:	f7ff f847 	bl	8008e28 <__assert_func>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	6144      	str	r4, [r0, #20]
 8009d9e:	6103      	str	r3, [r0, #16]
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	bf00      	nop
 8009da4:	0800bb20 	.word	0x0800bb20
 8009da8:	0800bb31 	.word	0x0800bb31

08009dac <__multiply>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	4614      	mov	r4, r2
 8009db2:	690a      	ldr	r2, [r1, #16]
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	460f      	mov	r7, r1
 8009db8:	429a      	cmp	r2, r3
 8009dba:	bfa2      	ittt	ge
 8009dbc:	4623      	movge	r3, r4
 8009dbe:	460c      	movge	r4, r1
 8009dc0:	461f      	movge	r7, r3
 8009dc2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009dc6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	6861      	ldr	r1, [r4, #4]
 8009dce:	eb0a 0609 	add.w	r6, sl, r9
 8009dd2:	42b3      	cmp	r3, r6
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	bfb8      	it	lt
 8009dd8:	3101      	addlt	r1, #1
 8009dda:	f7ff fedd 	bl	8009b98 <_Balloc>
 8009dde:	b930      	cbnz	r0, 8009dee <__multiply+0x42>
 8009de0:	4602      	mov	r2, r0
 8009de2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009de6:	4b43      	ldr	r3, [pc, #268]	@ (8009ef4 <__multiply+0x148>)
 8009de8:	4843      	ldr	r0, [pc, #268]	@ (8009ef8 <__multiply+0x14c>)
 8009dea:	f7ff f81d 	bl	8008e28 <__assert_func>
 8009dee:	f100 0514 	add.w	r5, r0, #20
 8009df2:	462b      	mov	r3, r5
 8009df4:	2200      	movs	r2, #0
 8009df6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dfa:	4543      	cmp	r3, r8
 8009dfc:	d321      	bcc.n	8009e42 <__multiply+0x96>
 8009dfe:	f107 0114 	add.w	r1, r7, #20
 8009e02:	f104 0214 	add.w	r2, r4, #20
 8009e06:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009e0a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009e0e:	9302      	str	r3, [sp, #8]
 8009e10:	1b13      	subs	r3, r2, r4
 8009e12:	3b15      	subs	r3, #21
 8009e14:	f023 0303 	bic.w	r3, r3, #3
 8009e18:	3304      	adds	r3, #4
 8009e1a:	f104 0715 	add.w	r7, r4, #21
 8009e1e:	42ba      	cmp	r2, r7
 8009e20:	bf38      	it	cc
 8009e22:	2304      	movcc	r3, #4
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	9b02      	ldr	r3, [sp, #8]
 8009e28:	9103      	str	r1, [sp, #12]
 8009e2a:	428b      	cmp	r3, r1
 8009e2c:	d80c      	bhi.n	8009e48 <__multiply+0x9c>
 8009e2e:	2e00      	cmp	r6, #0
 8009e30:	dd03      	ble.n	8009e3a <__multiply+0x8e>
 8009e32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d05a      	beq.n	8009ef0 <__multiply+0x144>
 8009e3a:	6106      	str	r6, [r0, #16]
 8009e3c:	b005      	add	sp, #20
 8009e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e42:	f843 2b04 	str.w	r2, [r3], #4
 8009e46:	e7d8      	b.n	8009dfa <__multiply+0x4e>
 8009e48:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e4c:	f1ba 0f00 	cmp.w	sl, #0
 8009e50:	d023      	beq.n	8009e9a <__multiply+0xee>
 8009e52:	46a9      	mov	r9, r5
 8009e54:	f04f 0c00 	mov.w	ip, #0
 8009e58:	f104 0e14 	add.w	lr, r4, #20
 8009e5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e60:	f8d9 3000 	ldr.w	r3, [r9]
 8009e64:	fa1f fb87 	uxth.w	fp, r7
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e6e:	4463      	add	r3, ip
 8009e70:	f8d9 c000 	ldr.w	ip, [r9]
 8009e74:	0c3f      	lsrs	r7, r7, #16
 8009e76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e7a:	fb0a c707 	mla	r7, sl, r7, ip
 8009e7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e88:	4572      	cmp	r2, lr
 8009e8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e8e:	f849 3b04 	str.w	r3, [r9], #4
 8009e92:	d8e3      	bhi.n	8009e5c <__multiply+0xb0>
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	f845 c003 	str.w	ip, [r5, r3]
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	3104      	adds	r1, #4
 8009e9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ea2:	f1b9 0f00 	cmp.w	r9, #0
 8009ea6:	d021      	beq.n	8009eec <__multiply+0x140>
 8009ea8:	46ae      	mov	lr, r5
 8009eaa:	f04f 0a00 	mov.w	sl, #0
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	f104 0c14 	add.w	ip, r4, #20
 8009eb4:	f8bc b000 	ldrh.w	fp, [ip]
 8009eb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	fb09 770b 	mla	r7, r9, fp, r7
 8009ec2:	4457      	add	r7, sl
 8009ec4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ec8:	f84e 3b04 	str.w	r3, [lr], #4
 8009ecc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ed0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ed4:	f8be 3000 	ldrh.w	r3, [lr]
 8009ed8:	4562      	cmp	r2, ip
 8009eda:	fb09 330a 	mla	r3, r9, sl, r3
 8009ede:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009ee2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ee6:	d8e5      	bhi.n	8009eb4 <__multiply+0x108>
 8009ee8:	9f01      	ldr	r7, [sp, #4]
 8009eea:	51eb      	str	r3, [r5, r7]
 8009eec:	3504      	adds	r5, #4
 8009eee:	e79a      	b.n	8009e26 <__multiply+0x7a>
 8009ef0:	3e01      	subs	r6, #1
 8009ef2:	e79c      	b.n	8009e2e <__multiply+0x82>
 8009ef4:	0800bb20 	.word	0x0800bb20
 8009ef8:	0800bb31 	.word	0x0800bb31

08009efc <__pow5mult>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	4615      	mov	r5, r2
 8009f02:	f012 0203 	ands.w	r2, r2, #3
 8009f06:	4607      	mov	r7, r0
 8009f08:	460e      	mov	r6, r1
 8009f0a:	d007      	beq.n	8009f1c <__pow5mult+0x20>
 8009f0c:	4c25      	ldr	r4, [pc, #148]	@ (8009fa4 <__pow5mult+0xa8>)
 8009f0e:	3a01      	subs	r2, #1
 8009f10:	2300      	movs	r3, #0
 8009f12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f16:	f7ff fea1 	bl	8009c5c <__multadd>
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	10ad      	asrs	r5, r5, #2
 8009f1e:	d03d      	beq.n	8009f9c <__pow5mult+0xa0>
 8009f20:	69fc      	ldr	r4, [r7, #28]
 8009f22:	b97c      	cbnz	r4, 8009f44 <__pow5mult+0x48>
 8009f24:	2010      	movs	r0, #16
 8009f26:	f7fd ffb7 	bl	8007e98 <malloc>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	61f8      	str	r0, [r7, #28]
 8009f2e:	b928      	cbnz	r0, 8009f3c <__pow5mult+0x40>
 8009f30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f34:	4b1c      	ldr	r3, [pc, #112]	@ (8009fa8 <__pow5mult+0xac>)
 8009f36:	481d      	ldr	r0, [pc, #116]	@ (8009fac <__pow5mult+0xb0>)
 8009f38:	f7fe ff76 	bl	8008e28 <__assert_func>
 8009f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f40:	6004      	str	r4, [r0, #0]
 8009f42:	60c4      	str	r4, [r0, #12]
 8009f44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f4c:	b94c      	cbnz	r4, 8009f62 <__pow5mult+0x66>
 8009f4e:	f240 2171 	movw	r1, #625	@ 0x271
 8009f52:	4638      	mov	r0, r7
 8009f54:	f7ff ff14 	bl	8009d80 <__i2b>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f60:	6003      	str	r3, [r0, #0]
 8009f62:	f04f 0900 	mov.w	r9, #0
 8009f66:	07eb      	lsls	r3, r5, #31
 8009f68:	d50a      	bpl.n	8009f80 <__pow5mult+0x84>
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f7ff ff1c 	bl	8009dac <__multiply>
 8009f74:	4680      	mov	r8, r0
 8009f76:	4631      	mov	r1, r6
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f7ff fe4d 	bl	8009c18 <_Bfree>
 8009f7e:	4646      	mov	r6, r8
 8009f80:	106d      	asrs	r5, r5, #1
 8009f82:	d00b      	beq.n	8009f9c <__pow5mult+0xa0>
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	b938      	cbnz	r0, 8009f98 <__pow5mult+0x9c>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f7ff ff0d 	bl	8009dac <__multiply>
 8009f92:	6020      	str	r0, [r4, #0]
 8009f94:	f8c0 9000 	str.w	r9, [r0]
 8009f98:	4604      	mov	r4, r0
 8009f9a:	e7e4      	b.n	8009f66 <__pow5mult+0x6a>
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	bf00      	nop
 8009fa4:	0800bb8c 	.word	0x0800bb8c
 8009fa8:	0800bab1 	.word	0x0800bab1
 8009fac:	0800bb31 	.word	0x0800bb31

08009fb0 <__lshift>:
 8009fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	4607      	mov	r7, r0
 8009fb8:	4691      	mov	r9, r2
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6849      	ldr	r1, [r1, #4]
 8009fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fc8:	f108 0601 	add.w	r6, r8, #1
 8009fcc:	42b3      	cmp	r3, r6
 8009fce:	db0b      	blt.n	8009fe8 <__lshift+0x38>
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff fde1 	bl	8009b98 <_Balloc>
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	b948      	cbnz	r0, 8009fee <__lshift+0x3e>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009fe0:	4b27      	ldr	r3, [pc, #156]	@ (800a080 <__lshift+0xd0>)
 8009fe2:	4828      	ldr	r0, [pc, #160]	@ (800a084 <__lshift+0xd4>)
 8009fe4:	f7fe ff20 	bl	8008e28 <__assert_func>
 8009fe8:	3101      	adds	r1, #1
 8009fea:	005b      	lsls	r3, r3, #1
 8009fec:	e7ee      	b.n	8009fcc <__lshift+0x1c>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f100 0114 	add.w	r1, r0, #20
 8009ff4:	f100 0210 	add.w	r2, r0, #16
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	4553      	cmp	r3, sl
 8009ffc:	db33      	blt.n	800a066 <__lshift+0xb6>
 8009ffe:	6920      	ldr	r0, [r4, #16]
 800a000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a004:	f104 0314 	add.w	r3, r4, #20
 800a008:	f019 091f 	ands.w	r9, r9, #31
 800a00c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a010:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a014:	d02b      	beq.n	800a06e <__lshift+0xbe>
 800a016:	468a      	mov	sl, r1
 800a018:	2200      	movs	r2, #0
 800a01a:	f1c9 0e20 	rsb	lr, r9, #32
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	fa00 f009 	lsl.w	r0, r0, r9
 800a024:	4310      	orrs	r0, r2
 800a026:	f84a 0b04 	str.w	r0, [sl], #4
 800a02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02e:	459c      	cmp	ip, r3
 800a030:	fa22 f20e 	lsr.w	r2, r2, lr
 800a034:	d8f3      	bhi.n	800a01e <__lshift+0x6e>
 800a036:	ebac 0304 	sub.w	r3, ip, r4
 800a03a:	3b15      	subs	r3, #21
 800a03c:	f023 0303 	bic.w	r3, r3, #3
 800a040:	3304      	adds	r3, #4
 800a042:	f104 0015 	add.w	r0, r4, #21
 800a046:	4584      	cmp	ip, r0
 800a048:	bf38      	it	cc
 800a04a:	2304      	movcc	r3, #4
 800a04c:	50ca      	str	r2, [r1, r3]
 800a04e:	b10a      	cbz	r2, 800a054 <__lshift+0xa4>
 800a050:	f108 0602 	add.w	r6, r8, #2
 800a054:	3e01      	subs	r6, #1
 800a056:	4638      	mov	r0, r7
 800a058:	4621      	mov	r1, r4
 800a05a:	612e      	str	r6, [r5, #16]
 800a05c:	f7ff fddc 	bl	8009c18 <_Bfree>
 800a060:	4628      	mov	r0, r5
 800a062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a066:	f842 0f04 	str.w	r0, [r2, #4]!
 800a06a:	3301      	adds	r3, #1
 800a06c:	e7c5      	b.n	8009ffa <__lshift+0x4a>
 800a06e:	3904      	subs	r1, #4
 800a070:	f853 2b04 	ldr.w	r2, [r3], #4
 800a074:	459c      	cmp	ip, r3
 800a076:	f841 2f04 	str.w	r2, [r1, #4]!
 800a07a:	d8f9      	bhi.n	800a070 <__lshift+0xc0>
 800a07c:	e7ea      	b.n	800a054 <__lshift+0xa4>
 800a07e:	bf00      	nop
 800a080:	0800bb20 	.word	0x0800bb20
 800a084:	0800bb31 	.word	0x0800bb31

0800a088 <__mcmp>:
 800a088:	4603      	mov	r3, r0
 800a08a:	690a      	ldr	r2, [r1, #16]
 800a08c:	6900      	ldr	r0, [r0, #16]
 800a08e:	b530      	push	{r4, r5, lr}
 800a090:	1a80      	subs	r0, r0, r2
 800a092:	d10e      	bne.n	800a0b2 <__mcmp+0x2a>
 800a094:	3314      	adds	r3, #20
 800a096:	3114      	adds	r1, #20
 800a098:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a09c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0a8:	4295      	cmp	r5, r2
 800a0aa:	d003      	beq.n	800a0b4 <__mcmp+0x2c>
 800a0ac:	d205      	bcs.n	800a0ba <__mcmp+0x32>
 800a0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b2:	bd30      	pop	{r4, r5, pc}
 800a0b4:	42a3      	cmp	r3, r4
 800a0b6:	d3f3      	bcc.n	800a0a0 <__mcmp+0x18>
 800a0b8:	e7fb      	b.n	800a0b2 <__mcmp+0x2a>
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	e7f9      	b.n	800a0b2 <__mcmp+0x2a>
	...

0800a0c0 <__mdiff>:
 800a0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	4689      	mov	r9, r1
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4648      	mov	r0, r9
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	f7ff ffdb 	bl	800a088 <__mcmp>
 800a0d2:	1e05      	subs	r5, r0, #0
 800a0d4:	d112      	bne.n	800a0fc <__mdiff+0x3c>
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7ff fd5d 	bl	8009b98 <_Balloc>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	b928      	cbnz	r0, 800a0ee <__mdiff+0x2e>
 800a0e2:	f240 2137 	movw	r1, #567	@ 0x237
 800a0e6:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e0 <__mdiff+0x120>)
 800a0e8:	483e      	ldr	r0, [pc, #248]	@ (800a1e4 <__mdiff+0x124>)
 800a0ea:	f7fe fe9d 	bl	8008e28 <__assert_func>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	b003      	add	sp, #12
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	bfbc      	itt	lt
 800a0fe:	464b      	movlt	r3, r9
 800a100:	46a1      	movlt	r9, r4
 800a102:	4630      	mov	r0, r6
 800a104:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a108:	bfba      	itte	lt
 800a10a:	461c      	movlt	r4, r3
 800a10c:	2501      	movlt	r5, #1
 800a10e:	2500      	movge	r5, #0
 800a110:	f7ff fd42 	bl	8009b98 <_Balloc>
 800a114:	4602      	mov	r2, r0
 800a116:	b918      	cbnz	r0, 800a120 <__mdiff+0x60>
 800a118:	f240 2145 	movw	r1, #581	@ 0x245
 800a11c:	4b30      	ldr	r3, [pc, #192]	@ (800a1e0 <__mdiff+0x120>)
 800a11e:	e7e3      	b.n	800a0e8 <__mdiff+0x28>
 800a120:	f100 0b14 	add.w	fp, r0, #20
 800a124:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a128:	f109 0310 	add.w	r3, r9, #16
 800a12c:	60c5      	str	r5, [r0, #12]
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	f109 0514 	add.w	r5, r9, #20
 800a136:	46d9      	mov	r9, fp
 800a138:	6926      	ldr	r6, [r4, #16]
 800a13a:	f104 0e14 	add.w	lr, r4, #20
 800a13e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a142:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a14e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a152:	b281      	uxth	r1, r0
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	fa1f f38a 	uxth.w	r3, sl
 800a15a:	1a5b      	subs	r3, r3, r1
 800a15c:	0c00      	lsrs	r0, r0, #16
 800a15e:	4463      	add	r3, ip
 800a160:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a164:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a168:	b29b      	uxth	r3, r3
 800a16a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a16e:	4576      	cmp	r6, lr
 800a170:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a174:	f849 3b04 	str.w	r3, [r9], #4
 800a178:	d8e6      	bhi.n	800a148 <__mdiff+0x88>
 800a17a:	1b33      	subs	r3, r6, r4
 800a17c:	3b15      	subs	r3, #21
 800a17e:	f023 0303 	bic.w	r3, r3, #3
 800a182:	3415      	adds	r4, #21
 800a184:	3304      	adds	r3, #4
 800a186:	42a6      	cmp	r6, r4
 800a188:	bf38      	it	cc
 800a18a:	2304      	movcc	r3, #4
 800a18c:	441d      	add	r5, r3
 800a18e:	445b      	add	r3, fp
 800a190:	461e      	mov	r6, r3
 800a192:	462c      	mov	r4, r5
 800a194:	4544      	cmp	r4, r8
 800a196:	d30e      	bcc.n	800a1b6 <__mdiff+0xf6>
 800a198:	f108 0103 	add.w	r1, r8, #3
 800a19c:	1b49      	subs	r1, r1, r5
 800a19e:	f021 0103 	bic.w	r1, r1, #3
 800a1a2:	3d03      	subs	r5, #3
 800a1a4:	45a8      	cmp	r8, r5
 800a1a6:	bf38      	it	cc
 800a1a8:	2100      	movcc	r1, #0
 800a1aa:	440b      	add	r3, r1
 800a1ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1b0:	b199      	cbz	r1, 800a1da <__mdiff+0x11a>
 800a1b2:	6117      	str	r7, [r2, #16]
 800a1b4:	e79e      	b.n	800a0f4 <__mdiff+0x34>
 800a1b6:	46e6      	mov	lr, ip
 800a1b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a1bc:	fa1f fc81 	uxth.w	ip, r1
 800a1c0:	44f4      	add	ip, lr
 800a1c2:	0c08      	lsrs	r0, r1, #16
 800a1c4:	4471      	add	r1, lr
 800a1c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1ca:	b289      	uxth	r1, r1
 800a1cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a1d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1d4:	f846 1b04 	str.w	r1, [r6], #4
 800a1d8:	e7dc      	b.n	800a194 <__mdiff+0xd4>
 800a1da:	3f01      	subs	r7, #1
 800a1dc:	e7e6      	b.n	800a1ac <__mdiff+0xec>
 800a1de:	bf00      	nop
 800a1e0:	0800bb20 	.word	0x0800bb20
 800a1e4:	0800bb31 	.word	0x0800bb31

0800a1e8 <__d2b>:
 800a1e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	4690      	mov	r8, r2
 800a1f0:	4699      	mov	r9, r3
 800a1f2:	9e08      	ldr	r6, [sp, #32]
 800a1f4:	f7ff fcd0 	bl	8009b98 <_Balloc>
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	b930      	cbnz	r0, 800a20a <__d2b+0x22>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	f240 310f 	movw	r1, #783	@ 0x30f
 800a202:	4b23      	ldr	r3, [pc, #140]	@ (800a290 <__d2b+0xa8>)
 800a204:	4823      	ldr	r0, [pc, #140]	@ (800a294 <__d2b+0xac>)
 800a206:	f7fe fe0f 	bl	8008e28 <__assert_func>
 800a20a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a20e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a212:	b10d      	cbz	r5, 800a218 <__d2b+0x30>
 800a214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	f1b8 0300 	subs.w	r3, r8, #0
 800a21e:	d024      	beq.n	800a26a <__d2b+0x82>
 800a220:	4668      	mov	r0, sp
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	f7ff fd7f 	bl	8009d26 <__lo0bits>
 800a228:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a22c:	b1d8      	cbz	r0, 800a266 <__d2b+0x7e>
 800a22e:	f1c0 0320 	rsb	r3, r0, #32
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	430b      	orrs	r3, r1
 800a238:	40c2      	lsrs	r2, r0
 800a23a:	6163      	str	r3, [r4, #20]
 800a23c:	9201      	str	r2, [sp, #4]
 800a23e:	9b01      	ldr	r3, [sp, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	bf0c      	ite	eq
 800a244:	2201      	moveq	r2, #1
 800a246:	2202      	movne	r2, #2
 800a248:	61a3      	str	r3, [r4, #24]
 800a24a:	6122      	str	r2, [r4, #16]
 800a24c:	b1ad      	cbz	r5, 800a27a <__d2b+0x92>
 800a24e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a252:	4405      	add	r5, r0
 800a254:	6035      	str	r5, [r6, #0]
 800a256:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25c:	6018      	str	r0, [r3, #0]
 800a25e:	4620      	mov	r0, r4
 800a260:	b002      	add	sp, #8
 800a262:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a266:	6161      	str	r1, [r4, #20]
 800a268:	e7e9      	b.n	800a23e <__d2b+0x56>
 800a26a:	a801      	add	r0, sp, #4
 800a26c:	f7ff fd5b 	bl	8009d26 <__lo0bits>
 800a270:	9b01      	ldr	r3, [sp, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	6163      	str	r3, [r4, #20]
 800a276:	3020      	adds	r0, #32
 800a278:	e7e7      	b.n	800a24a <__d2b+0x62>
 800a27a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a27e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a282:	6030      	str	r0, [r6, #0]
 800a284:	6918      	ldr	r0, [r3, #16]
 800a286:	f7ff fd2f 	bl	8009ce8 <__hi0bits>
 800a28a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a28e:	e7e4      	b.n	800a25a <__d2b+0x72>
 800a290:	0800bb20 	.word	0x0800bb20
 800a294:	0800bb31 	.word	0x0800bb31

0800a298 <__sfputc_r>:
 800a298:	6893      	ldr	r3, [r2, #8]
 800a29a:	b410      	push	{r4}
 800a29c:	3b01      	subs	r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	6093      	str	r3, [r2, #8]
 800a2a2:	da07      	bge.n	800a2b4 <__sfputc_r+0x1c>
 800a2a4:	6994      	ldr	r4, [r2, #24]
 800a2a6:	42a3      	cmp	r3, r4
 800a2a8:	db01      	blt.n	800a2ae <__sfputc_r+0x16>
 800a2aa:	290a      	cmp	r1, #10
 800a2ac:	d102      	bne.n	800a2b4 <__sfputc_r+0x1c>
 800a2ae:	bc10      	pop	{r4}
 800a2b0:	f7fe bc79 	b.w	8008ba6 <__swbuf_r>
 800a2b4:	6813      	ldr	r3, [r2, #0]
 800a2b6:	1c58      	adds	r0, r3, #1
 800a2b8:	6010      	str	r0, [r2, #0]
 800a2ba:	7019      	strb	r1, [r3, #0]
 800a2bc:	4608      	mov	r0, r1
 800a2be:	bc10      	pop	{r4}
 800a2c0:	4770      	bx	lr

0800a2c2 <__sfputs_r>:
 800a2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	18d5      	adds	r5, r2, r3
 800a2cc:	42ac      	cmp	r4, r5
 800a2ce:	d101      	bne.n	800a2d4 <__sfputs_r+0x12>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e007      	b.n	800a2e4 <__sfputs_r+0x22>
 800a2d4:	463a      	mov	r2, r7
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	f7ff ffdc 	bl	800a298 <__sfputc_r>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d1f3      	bne.n	800a2cc <__sfputs_r+0xa>
 800a2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2e8 <_vfiprintf_r>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	4614      	mov	r4, r2
 800a2f0:	4698      	mov	r8, r3
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	b09d      	sub	sp, #116	@ 0x74
 800a2f6:	b118      	cbz	r0, 800a300 <_vfiprintf_r+0x18>
 800a2f8:	6a03      	ldr	r3, [r0, #32]
 800a2fa:	b90b      	cbnz	r3, 800a300 <_vfiprintf_r+0x18>
 800a2fc:	f7fe fb6a 	bl	80089d4 <__sinit>
 800a300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	d405      	bmi.n	800a312 <_vfiprintf_r+0x2a>
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d402      	bmi.n	800a312 <_vfiprintf_r+0x2a>
 800a30c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a30e:	f7fe fd6c 	bl	8008dea <__retarget_lock_acquire_recursive>
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	071b      	lsls	r3, r3, #28
 800a316:	d501      	bpl.n	800a31c <_vfiprintf_r+0x34>
 800a318:	692b      	ldr	r3, [r5, #16]
 800a31a:	b99b      	cbnz	r3, 800a344 <_vfiprintf_r+0x5c>
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f7fe fc80 	bl	8008c24 <__swsetup_r>
 800a324:	b170      	cbz	r0, 800a344 <_vfiprintf_r+0x5c>
 800a326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a328:	07dc      	lsls	r4, r3, #31
 800a32a:	d504      	bpl.n	800a336 <_vfiprintf_r+0x4e>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	@ 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	0598      	lsls	r0, r3, #22
 800a33a:	d4f7      	bmi.n	800a32c <_vfiprintf_r+0x44>
 800a33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a33e:	f7fe fd55 	bl	8008dec <__retarget_lock_release_recursive>
 800a342:	e7f3      	b.n	800a32c <_vfiprintf_r+0x44>
 800a344:	2300      	movs	r3, #0
 800a346:	9309      	str	r3, [sp, #36]	@ 0x24
 800a348:	2320      	movs	r3, #32
 800a34a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a34e:	2330      	movs	r3, #48	@ 0x30
 800a350:	f04f 0901 	mov.w	r9, #1
 800a354:	f8cd 800c 	str.w	r8, [sp, #12]
 800a358:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a504 <_vfiprintf_r+0x21c>
 800a35c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a360:	4623      	mov	r3, r4
 800a362:	469a      	mov	sl, r3
 800a364:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a368:	b10a      	cbz	r2, 800a36e <_vfiprintf_r+0x86>
 800a36a:	2a25      	cmp	r2, #37	@ 0x25
 800a36c:	d1f9      	bne.n	800a362 <_vfiprintf_r+0x7a>
 800a36e:	ebba 0b04 	subs.w	fp, sl, r4
 800a372:	d00b      	beq.n	800a38c <_vfiprintf_r+0xa4>
 800a374:	465b      	mov	r3, fp
 800a376:	4622      	mov	r2, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	4630      	mov	r0, r6
 800a37c:	f7ff ffa1 	bl	800a2c2 <__sfputs_r>
 800a380:	3001      	adds	r0, #1
 800a382:	f000 80a7 	beq.w	800a4d4 <_vfiprintf_r+0x1ec>
 800a386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a388:	445a      	add	r2, fp
 800a38a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a38c:	f89a 3000 	ldrb.w	r3, [sl]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 809f 	beq.w	800a4d4 <_vfiprintf_r+0x1ec>
 800a396:	2300      	movs	r3, #0
 800a398:	f04f 32ff 	mov.w	r2, #4294967295
 800a39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3a0:	f10a 0a01 	add.w	sl, sl, #1
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	9307      	str	r3, [sp, #28]
 800a3a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3ae:	4654      	mov	r4, sl
 800a3b0:	2205      	movs	r2, #5
 800a3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b6:	4853      	ldr	r0, [pc, #332]	@ (800a504 <_vfiprintf_r+0x21c>)
 800a3b8:	f7fe fd19 	bl	8008dee <memchr>
 800a3bc:	9a04      	ldr	r2, [sp, #16]
 800a3be:	b9d8      	cbnz	r0, 800a3f8 <_vfiprintf_r+0x110>
 800a3c0:	06d1      	lsls	r1, r2, #27
 800a3c2:	bf44      	itt	mi
 800a3c4:	2320      	movmi	r3, #32
 800a3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ca:	0713      	lsls	r3, r2, #28
 800a3cc:	bf44      	itt	mi
 800a3ce:	232b      	movmi	r3, #43	@ 0x2b
 800a3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3da:	d015      	beq.n	800a408 <_vfiprintf_r+0x120>
 800a3dc:	4654      	mov	r4, sl
 800a3de:	2000      	movs	r0, #0
 800a3e0:	f04f 0c0a 	mov.w	ip, #10
 800a3e4:	9a07      	ldr	r2, [sp, #28]
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ec:	3b30      	subs	r3, #48	@ 0x30
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d94b      	bls.n	800a48a <_vfiprintf_r+0x1a2>
 800a3f2:	b1b0      	cbz	r0, 800a422 <_vfiprintf_r+0x13a>
 800a3f4:	9207      	str	r2, [sp, #28]
 800a3f6:	e014      	b.n	800a422 <_vfiprintf_r+0x13a>
 800a3f8:	eba0 0308 	sub.w	r3, r0, r8
 800a3fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a400:	4313      	orrs	r3, r2
 800a402:	46a2      	mov	sl, r4
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	e7d2      	b.n	800a3ae <_vfiprintf_r+0xc6>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	1d19      	adds	r1, r3, #4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	9103      	str	r1, [sp, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfbb      	ittet	lt
 800a414:	425b      	neglt	r3, r3
 800a416:	f042 0202 	orrlt.w	r2, r2, #2
 800a41a:	9307      	strge	r3, [sp, #28]
 800a41c:	9307      	strlt	r3, [sp, #28]
 800a41e:	bfb8      	it	lt
 800a420:	9204      	strlt	r2, [sp, #16]
 800a422:	7823      	ldrb	r3, [r4, #0]
 800a424:	2b2e      	cmp	r3, #46	@ 0x2e
 800a426:	d10a      	bne.n	800a43e <_vfiprintf_r+0x156>
 800a428:	7863      	ldrb	r3, [r4, #1]
 800a42a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a42c:	d132      	bne.n	800a494 <_vfiprintf_r+0x1ac>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	3402      	adds	r4, #2
 800a432:	1d1a      	adds	r2, r3, #4
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	9203      	str	r2, [sp, #12]
 800a438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a43c:	9305      	str	r3, [sp, #20]
 800a43e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a508 <_vfiprintf_r+0x220>
 800a442:	2203      	movs	r2, #3
 800a444:	4650      	mov	r0, sl
 800a446:	7821      	ldrb	r1, [r4, #0]
 800a448:	f7fe fcd1 	bl	8008dee <memchr>
 800a44c:	b138      	cbz	r0, 800a45e <_vfiprintf_r+0x176>
 800a44e:	2240      	movs	r2, #64	@ 0x40
 800a450:	9b04      	ldr	r3, [sp, #16]
 800a452:	eba0 000a 	sub.w	r0, r0, sl
 800a456:	4082      	lsls	r2, r0
 800a458:	4313      	orrs	r3, r2
 800a45a:	3401      	adds	r4, #1
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a462:	2206      	movs	r2, #6
 800a464:	4829      	ldr	r0, [pc, #164]	@ (800a50c <_vfiprintf_r+0x224>)
 800a466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a46a:	f7fe fcc0 	bl	8008dee <memchr>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d03f      	beq.n	800a4f2 <_vfiprintf_r+0x20a>
 800a472:	4b27      	ldr	r3, [pc, #156]	@ (800a510 <_vfiprintf_r+0x228>)
 800a474:	bb1b      	cbnz	r3, 800a4be <_vfiprintf_r+0x1d6>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	3307      	adds	r3, #7
 800a47a:	f023 0307 	bic.w	r3, r3, #7
 800a47e:	3308      	adds	r3, #8
 800a480:	9303      	str	r3, [sp, #12]
 800a482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a484:	443b      	add	r3, r7
 800a486:	9309      	str	r3, [sp, #36]	@ 0x24
 800a488:	e76a      	b.n	800a360 <_vfiprintf_r+0x78>
 800a48a:	460c      	mov	r4, r1
 800a48c:	2001      	movs	r0, #1
 800a48e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a492:	e7a8      	b.n	800a3e6 <_vfiprintf_r+0xfe>
 800a494:	2300      	movs	r3, #0
 800a496:	f04f 0c0a 	mov.w	ip, #10
 800a49a:	4619      	mov	r1, r3
 800a49c:	3401      	adds	r4, #1
 800a49e:	9305      	str	r3, [sp, #20]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4a6:	3a30      	subs	r2, #48	@ 0x30
 800a4a8:	2a09      	cmp	r2, #9
 800a4aa:	d903      	bls.n	800a4b4 <_vfiprintf_r+0x1cc>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0c6      	beq.n	800a43e <_vfiprintf_r+0x156>
 800a4b0:	9105      	str	r1, [sp, #20]
 800a4b2:	e7c4      	b.n	800a43e <_vfiprintf_r+0x156>
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4bc:	e7f0      	b.n	800a4a0 <_vfiprintf_r+0x1b8>
 800a4be:	ab03      	add	r3, sp, #12
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	462a      	mov	r2, r5
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <_vfiprintf_r+0x22c>)
 800a4c8:	a904      	add	r1, sp, #16
 800a4ca:	f7fd fe39 	bl	8008140 <_printf_float>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	1c78      	adds	r0, r7, #1
 800a4d2:	d1d6      	bne.n	800a482 <_vfiprintf_r+0x19a>
 800a4d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4d6:	07d9      	lsls	r1, r3, #31
 800a4d8:	d405      	bmi.n	800a4e6 <_vfiprintf_r+0x1fe>
 800a4da:	89ab      	ldrh	r3, [r5, #12]
 800a4dc:	059a      	lsls	r2, r3, #22
 800a4de:	d402      	bmi.n	800a4e6 <_vfiprintf_r+0x1fe>
 800a4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4e2:	f7fe fc83 	bl	8008dec <__retarget_lock_release_recursive>
 800a4e6:	89ab      	ldrh	r3, [r5, #12]
 800a4e8:	065b      	lsls	r3, r3, #25
 800a4ea:	f53f af1f 	bmi.w	800a32c <_vfiprintf_r+0x44>
 800a4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4f0:	e71e      	b.n	800a330 <_vfiprintf_r+0x48>
 800a4f2:	ab03      	add	r3, sp, #12
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4b06      	ldr	r3, [pc, #24]	@ (800a514 <_vfiprintf_r+0x22c>)
 800a4fc:	a904      	add	r1, sp, #16
 800a4fe:	f7fe f8bd 	bl	800867c <_printf_i>
 800a502:	e7e4      	b.n	800a4ce <_vfiprintf_r+0x1e6>
 800a504:	0800bc88 	.word	0x0800bc88
 800a508:	0800bc8e 	.word	0x0800bc8e
 800a50c:	0800bc92 	.word	0x0800bc92
 800a510:	08008141 	.word	0x08008141
 800a514:	0800a2c3 	.word	0x0800a2c3

0800a518 <__sflush_r>:
 800a518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	0716      	lsls	r6, r2, #28
 800a520:	4605      	mov	r5, r0
 800a522:	460c      	mov	r4, r1
 800a524:	d454      	bmi.n	800a5d0 <__sflush_r+0xb8>
 800a526:	684b      	ldr	r3, [r1, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dc02      	bgt.n	800a532 <__sflush_r+0x1a>
 800a52c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a52e:	2b00      	cmp	r3, #0
 800a530:	dd48      	ble.n	800a5c4 <__sflush_r+0xac>
 800a532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a534:	2e00      	cmp	r6, #0
 800a536:	d045      	beq.n	800a5c4 <__sflush_r+0xac>
 800a538:	2300      	movs	r3, #0
 800a53a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a53e:	682f      	ldr	r7, [r5, #0]
 800a540:	6a21      	ldr	r1, [r4, #32]
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	d030      	beq.n	800a5a8 <__sflush_r+0x90>
 800a546:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	0759      	lsls	r1, r3, #29
 800a54c:	d505      	bpl.n	800a55a <__sflush_r+0x42>
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	1ad2      	subs	r2, r2, r3
 800a552:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a554:	b10b      	cbz	r3, 800a55a <__sflush_r+0x42>
 800a556:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a558:	1ad2      	subs	r2, r2, r3
 800a55a:	2300      	movs	r3, #0
 800a55c:	4628      	mov	r0, r5
 800a55e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a560:	6a21      	ldr	r1, [r4, #32]
 800a562:	47b0      	blx	r6
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	d106      	bne.n	800a578 <__sflush_r+0x60>
 800a56a:	6829      	ldr	r1, [r5, #0]
 800a56c:	291d      	cmp	r1, #29
 800a56e:	d82b      	bhi.n	800a5c8 <__sflush_r+0xb0>
 800a570:	4a28      	ldr	r2, [pc, #160]	@ (800a614 <__sflush_r+0xfc>)
 800a572:	410a      	asrs	r2, r1
 800a574:	07d6      	lsls	r6, r2, #31
 800a576:	d427      	bmi.n	800a5c8 <__sflush_r+0xb0>
 800a578:	2200      	movs	r2, #0
 800a57a:	6062      	str	r2, [r4, #4]
 800a57c:	6922      	ldr	r2, [r4, #16]
 800a57e:	04d9      	lsls	r1, r3, #19
 800a580:	6022      	str	r2, [r4, #0]
 800a582:	d504      	bpl.n	800a58e <__sflush_r+0x76>
 800a584:	1c42      	adds	r2, r0, #1
 800a586:	d101      	bne.n	800a58c <__sflush_r+0x74>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	b903      	cbnz	r3, 800a58e <__sflush_r+0x76>
 800a58c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a58e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a590:	602f      	str	r7, [r5, #0]
 800a592:	b1b9      	cbz	r1, 800a5c4 <__sflush_r+0xac>
 800a594:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a598:	4299      	cmp	r1, r3
 800a59a:	d002      	beq.n	800a5a2 <__sflush_r+0x8a>
 800a59c:	4628      	mov	r0, r5
 800a59e:	f7ff fab3 	bl	8009b08 <_free_r>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5a6:	e00d      	b.n	800a5c4 <__sflush_r+0xac>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	47b0      	blx	r6
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	1c50      	adds	r0, r2, #1
 800a5b2:	d1c9      	bne.n	800a548 <__sflush_r+0x30>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d0c6      	beq.n	800a548 <__sflush_r+0x30>
 800a5ba:	2b1d      	cmp	r3, #29
 800a5bc:	d001      	beq.n	800a5c2 <__sflush_r+0xaa>
 800a5be:	2b16      	cmp	r3, #22
 800a5c0:	d11d      	bne.n	800a5fe <__sflush_r+0xe6>
 800a5c2:	602f      	str	r7, [r5, #0]
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e021      	b.n	800a60c <__sflush_r+0xf4>
 800a5c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5cc:	b21b      	sxth	r3, r3
 800a5ce:	e01a      	b.n	800a606 <__sflush_r+0xee>
 800a5d0:	690f      	ldr	r7, [r1, #16]
 800a5d2:	2f00      	cmp	r7, #0
 800a5d4:	d0f6      	beq.n	800a5c4 <__sflush_r+0xac>
 800a5d6:	0793      	lsls	r3, r2, #30
 800a5d8:	bf18      	it	ne
 800a5da:	2300      	movne	r3, #0
 800a5dc:	680e      	ldr	r6, [r1, #0]
 800a5de:	bf08      	it	eq
 800a5e0:	694b      	ldreq	r3, [r1, #20]
 800a5e2:	1bf6      	subs	r6, r6, r7
 800a5e4:	600f      	str	r7, [r1, #0]
 800a5e6:	608b      	str	r3, [r1, #8]
 800a5e8:	2e00      	cmp	r6, #0
 800a5ea:	ddeb      	ble.n	800a5c4 <__sflush_r+0xac>
 800a5ec:	4633      	mov	r3, r6
 800a5ee:	463a      	mov	r2, r7
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	6a21      	ldr	r1, [r4, #32]
 800a5f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a5f8:	47e0      	blx	ip
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	dc07      	bgt.n	800a60e <__sflush_r+0xf6>
 800a5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a606:	f04f 30ff 	mov.w	r0, #4294967295
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a60e:	4407      	add	r7, r0
 800a610:	1a36      	subs	r6, r6, r0
 800a612:	e7e9      	b.n	800a5e8 <__sflush_r+0xd0>
 800a614:	dfbffffe 	.word	0xdfbffffe

0800a618 <_fflush_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	690b      	ldr	r3, [r1, #16]
 800a61c:	4605      	mov	r5, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	b913      	cbnz	r3, 800a628 <_fflush_r+0x10>
 800a622:	2500      	movs	r5, #0
 800a624:	4628      	mov	r0, r5
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	b118      	cbz	r0, 800a632 <_fflush_r+0x1a>
 800a62a:	6a03      	ldr	r3, [r0, #32]
 800a62c:	b90b      	cbnz	r3, 800a632 <_fflush_r+0x1a>
 800a62e:	f7fe f9d1 	bl	80089d4 <__sinit>
 800a632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0f3      	beq.n	800a622 <_fflush_r+0xa>
 800a63a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a63c:	07d0      	lsls	r0, r2, #31
 800a63e:	d404      	bmi.n	800a64a <_fflush_r+0x32>
 800a640:	0599      	lsls	r1, r3, #22
 800a642:	d402      	bmi.n	800a64a <_fflush_r+0x32>
 800a644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a646:	f7fe fbd0 	bl	8008dea <__retarget_lock_acquire_recursive>
 800a64a:	4628      	mov	r0, r5
 800a64c:	4621      	mov	r1, r4
 800a64e:	f7ff ff63 	bl	800a518 <__sflush_r>
 800a652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a654:	4605      	mov	r5, r0
 800a656:	07da      	lsls	r2, r3, #31
 800a658:	d4e4      	bmi.n	800a624 <_fflush_r+0xc>
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	059b      	lsls	r3, r3, #22
 800a65e:	d4e1      	bmi.n	800a624 <_fflush_r+0xc>
 800a660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a662:	f7fe fbc3 	bl	8008dec <__retarget_lock_release_recursive>
 800a666:	e7dd      	b.n	800a624 <_fflush_r+0xc>

0800a668 <fiprintf>:
 800a668:	b40e      	push	{r1, r2, r3}
 800a66a:	b503      	push	{r0, r1, lr}
 800a66c:	4601      	mov	r1, r0
 800a66e:	ab03      	add	r3, sp, #12
 800a670:	4805      	ldr	r0, [pc, #20]	@ (800a688 <fiprintf+0x20>)
 800a672:	f853 2b04 	ldr.w	r2, [r3], #4
 800a676:	6800      	ldr	r0, [r0, #0]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f7ff fe35 	bl	800a2e8 <_vfiprintf_r>
 800a67e:	b002      	add	sp, #8
 800a680:	f85d eb04 	ldr.w	lr, [sp], #4
 800a684:	b003      	add	sp, #12
 800a686:	4770      	bx	lr
 800a688:	20000018 	.word	0x20000018

0800a68c <__swhatbuf_r>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	460c      	mov	r4, r1
 800a690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a694:	4615      	mov	r5, r2
 800a696:	2900      	cmp	r1, #0
 800a698:	461e      	mov	r6, r3
 800a69a:	b096      	sub	sp, #88	@ 0x58
 800a69c:	da0c      	bge.n	800a6b8 <__swhatbuf_r+0x2c>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6a6:	bf14      	ite	ne
 800a6a8:	2340      	movne	r3, #64	@ 0x40
 800a6aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	6031      	str	r1, [r6, #0]
 800a6b2:	602b      	str	r3, [r5, #0]
 800a6b4:	b016      	add	sp, #88	@ 0x58
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	466a      	mov	r2, sp
 800a6ba:	f000 f849 	bl	800a750 <_fstat_r>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	dbed      	blt.n	800a69e <__swhatbuf_r+0x12>
 800a6c2:	9901      	ldr	r1, [sp, #4]
 800a6c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6cc:	4259      	negs	r1, r3
 800a6ce:	4159      	adcs	r1, r3
 800a6d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6d4:	e7eb      	b.n	800a6ae <__swhatbuf_r+0x22>

0800a6d6 <__smakebuf_r>:
 800a6d6:	898b      	ldrh	r3, [r1, #12]
 800a6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6da:	079d      	lsls	r5, r3, #30
 800a6dc:	4606      	mov	r6, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	d507      	bpl.n	800a6f2 <__smakebuf_r+0x1c>
 800a6e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6e6:	6023      	str	r3, [r4, #0]
 800a6e8:	6123      	str	r3, [r4, #16]
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	6163      	str	r3, [r4, #20]
 800a6ee:	b003      	add	sp, #12
 800a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f2:	466a      	mov	r2, sp
 800a6f4:	ab01      	add	r3, sp, #4
 800a6f6:	f7ff ffc9 	bl	800a68c <__swhatbuf_r>
 800a6fa:	9f00      	ldr	r7, [sp, #0]
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	4639      	mov	r1, r7
 800a700:	4630      	mov	r0, r6
 800a702:	f7fd fbf3 	bl	8007eec <_malloc_r>
 800a706:	b948      	cbnz	r0, 800a71c <__smakebuf_r+0x46>
 800a708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70c:	059a      	lsls	r2, r3, #22
 800a70e:	d4ee      	bmi.n	800a6ee <__smakebuf_r+0x18>
 800a710:	f023 0303 	bic.w	r3, r3, #3
 800a714:	f043 0302 	orr.w	r3, r3, #2
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	e7e2      	b.n	800a6e2 <__smakebuf_r+0xc>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	9b01      	ldr	r3, [sp, #4]
 800a72a:	6020      	str	r0, [r4, #0]
 800a72c:	b15b      	cbz	r3, 800a746 <__smakebuf_r+0x70>
 800a72e:	4630      	mov	r0, r6
 800a730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a734:	f000 f81e 	bl	800a774 <_isatty_r>
 800a738:	b128      	cbz	r0, 800a746 <__smakebuf_r+0x70>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f023 0303 	bic.w	r3, r3, #3
 800a740:	f043 0301 	orr.w	r3, r3, #1
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	431d      	orrs	r5, r3
 800a74a:	81a5      	strh	r5, [r4, #12]
 800a74c:	e7cf      	b.n	800a6ee <__smakebuf_r+0x18>
	...

0800a750 <_fstat_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	2300      	movs	r3, #0
 800a754:	4d06      	ldr	r5, [pc, #24]	@ (800a770 <_fstat_r+0x20>)
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	4611      	mov	r1, r2
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	f7f8 f87c 	bl	800285a <_fstat>
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	d102      	bne.n	800a76c <_fstat_r+0x1c>
 800a766:	682b      	ldr	r3, [r5, #0]
 800a768:	b103      	cbz	r3, 800a76c <_fstat_r+0x1c>
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	bf00      	nop
 800a770:	20000564 	.word	0x20000564

0800a774 <_isatty_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	2300      	movs	r3, #0
 800a778:	4d05      	ldr	r5, [pc, #20]	@ (800a790 <_isatty_r+0x1c>)
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7f8 f870 	bl	8002864 <_isatty>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_isatty_r+0x1a>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_isatty_r+0x1a>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20000564 	.word	0x20000564

0800a794 <abort>:
 800a794:	2006      	movs	r0, #6
 800a796:	b508      	push	{r3, lr}
 800a798:	f000 f85e 	bl	800a858 <raise>
 800a79c:	2001      	movs	r0, #1
 800a79e:	f7f8 f843 	bl	8002828 <_exit>

0800a7a2 <_calloc_r>:
 800a7a2:	b570      	push	{r4, r5, r6, lr}
 800a7a4:	fba1 5402 	umull	r5, r4, r1, r2
 800a7a8:	b93c      	cbnz	r4, 800a7ba <_calloc_r+0x18>
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	f7fd fb9e 	bl	8007eec <_malloc_r>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	b928      	cbnz	r0, 800a7c0 <_calloc_r+0x1e>
 800a7b4:	2600      	movs	r6, #0
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ba:	220c      	movs	r2, #12
 800a7bc:	6002      	str	r2, [r0, #0]
 800a7be:	e7f9      	b.n	800a7b4 <_calloc_r+0x12>
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	f7fe fa84 	bl	8008cd0 <memset>
 800a7c8:	e7f5      	b.n	800a7b6 <_calloc_r+0x14>

0800a7ca <__ascii_mbtowc>:
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	b901      	cbnz	r1, 800a7d0 <__ascii_mbtowc+0x6>
 800a7ce:	a901      	add	r1, sp, #4
 800a7d0:	b142      	cbz	r2, 800a7e4 <__ascii_mbtowc+0x1a>
 800a7d2:	b14b      	cbz	r3, 800a7e8 <__ascii_mbtowc+0x1e>
 800a7d4:	7813      	ldrb	r3, [r2, #0]
 800a7d6:	600b      	str	r3, [r1, #0]
 800a7d8:	7812      	ldrb	r2, [r2, #0]
 800a7da:	1e10      	subs	r0, r2, #0
 800a7dc:	bf18      	it	ne
 800a7de:	2001      	movne	r0, #1
 800a7e0:	b002      	add	sp, #8
 800a7e2:	4770      	bx	lr
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	e7fb      	b.n	800a7e0 <__ascii_mbtowc+0x16>
 800a7e8:	f06f 0001 	mvn.w	r0, #1
 800a7ec:	e7f8      	b.n	800a7e0 <__ascii_mbtowc+0x16>

0800a7ee <__ascii_wctomb>:
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	b141      	cbz	r1, 800a806 <__ascii_wctomb+0x18>
 800a7f4:	2aff      	cmp	r2, #255	@ 0xff
 800a7f6:	d904      	bls.n	800a802 <__ascii_wctomb+0x14>
 800a7f8:	228a      	movs	r2, #138	@ 0x8a
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	4770      	bx	lr
 800a802:	2001      	movs	r0, #1
 800a804:	700a      	strb	r2, [r1, #0]
 800a806:	4770      	bx	lr

0800a808 <_raise_r>:
 800a808:	291f      	cmp	r1, #31
 800a80a:	b538      	push	{r3, r4, r5, lr}
 800a80c:	4605      	mov	r5, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	d904      	bls.n	800a81c <_raise_r+0x14>
 800a812:	2316      	movs	r3, #22
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	f04f 30ff 	mov.w	r0, #4294967295
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a81e:	b112      	cbz	r2, 800a826 <_raise_r+0x1e>
 800a820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a824:	b94b      	cbnz	r3, 800a83a <_raise_r+0x32>
 800a826:	4628      	mov	r0, r5
 800a828:	f000 f830 	bl	800a88c <_getpid_r>
 800a82c:	4622      	mov	r2, r4
 800a82e:	4601      	mov	r1, r0
 800a830:	4628      	mov	r0, r5
 800a832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a836:	f000 b817 	b.w	800a868 <_kill_r>
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d00a      	beq.n	800a854 <_raise_r+0x4c>
 800a83e:	1c59      	adds	r1, r3, #1
 800a840:	d103      	bne.n	800a84a <_raise_r+0x42>
 800a842:	2316      	movs	r3, #22
 800a844:	6003      	str	r3, [r0, #0]
 800a846:	2001      	movs	r0, #1
 800a848:	e7e7      	b.n	800a81a <_raise_r+0x12>
 800a84a:	2100      	movs	r1, #0
 800a84c:	4620      	mov	r0, r4
 800a84e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a852:	4798      	blx	r3
 800a854:	2000      	movs	r0, #0
 800a856:	e7e0      	b.n	800a81a <_raise_r+0x12>

0800a858 <raise>:
 800a858:	4b02      	ldr	r3, [pc, #8]	@ (800a864 <raise+0xc>)
 800a85a:	4601      	mov	r1, r0
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	f7ff bfd3 	b.w	800a808 <_raise_r>
 800a862:	bf00      	nop
 800a864:	20000018 	.word	0x20000018

0800a868 <_kill_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	2300      	movs	r3, #0
 800a86c:	4d06      	ldr	r5, [pc, #24]	@ (800a888 <_kill_r+0x20>)
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	4611      	mov	r1, r2
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	f7f7 ffcf 	bl	8002818 <_kill>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d102      	bne.n	800a884 <_kill_r+0x1c>
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	b103      	cbz	r3, 800a884 <_kill_r+0x1c>
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	bd38      	pop	{r3, r4, r5, pc}
 800a886:	bf00      	nop
 800a888:	20000564 	.word	0x20000564

0800a88c <_getpid_r>:
 800a88c:	f7f7 bfc2 	b.w	8002814 <_getpid>

0800a890 <pow>:
 800a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a894:	4614      	mov	r4, r2
 800a896:	461d      	mov	r5, r3
 800a898:	4680      	mov	r8, r0
 800a89a:	4689      	mov	r9, r1
 800a89c:	f000 f940 	bl	800ab20 <__ieee754_pow>
 800a8a0:	4622      	mov	r2, r4
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f6 f8ae 	bl	8000a0c <__aeabi_dcmpun>
 800a8b0:	bbc8      	cbnz	r0, 800a926 <pow+0x96>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	f7f6 f875 	bl	80009a8 <__aeabi_dcmpeq>
 800a8be:	b1b8      	cbz	r0, 800a8f0 <pow+0x60>
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f6 f86e 	bl	80009a8 <__aeabi_dcmpeq>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d141      	bne.n	800a954 <pow+0xc4>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	f000 f848 	bl	800a968 <finite>
 800a8d8:	b328      	cbz	r0, 800a926 <pow+0x96>
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	f7f6 f86b 	bl	80009bc <__aeabi_dcmplt>
 800a8e6:	b1f0      	cbz	r0, 800a926 <pow+0x96>
 800a8e8:	f7fe fa54 	bl	8008d94 <__errno>
 800a8ec:	2322      	movs	r3, #34	@ 0x22
 800a8ee:	e019      	b.n	800a924 <pow+0x94>
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f000 f838 	bl	800a968 <finite>
 800a8f8:	b9c8      	cbnz	r0, 800a92e <pow+0x9e>
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	f000 f833 	bl	800a968 <finite>
 800a902:	b1a0      	cbz	r0, 800a92e <pow+0x9e>
 800a904:	4620      	mov	r0, r4
 800a906:	4629      	mov	r1, r5
 800a908:	f000 f82e 	bl	800a968 <finite>
 800a90c:	b178      	cbz	r0, 800a92e <pow+0x9e>
 800a90e:	4632      	mov	r2, r6
 800a910:	463b      	mov	r3, r7
 800a912:	4630      	mov	r0, r6
 800a914:	4639      	mov	r1, r7
 800a916:	f7f6 f879 	bl	8000a0c <__aeabi_dcmpun>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0e4      	beq.n	800a8e8 <pow+0x58>
 800a91e:	f7fe fa39 	bl	8008d94 <__errno>
 800a922:	2321      	movs	r3, #33	@ 0x21
 800a924:	6003      	str	r3, [r0, #0]
 800a926:	4630      	mov	r0, r6
 800a928:	4639      	mov	r1, r7
 800a92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92e:	2200      	movs	r2, #0
 800a930:	2300      	movs	r3, #0
 800a932:	4630      	mov	r0, r6
 800a934:	4639      	mov	r1, r7
 800a936:	f7f6 f837 	bl	80009a8 <__aeabi_dcmpeq>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d0f3      	beq.n	800a926 <pow+0x96>
 800a93e:	4640      	mov	r0, r8
 800a940:	4649      	mov	r1, r9
 800a942:	f000 f811 	bl	800a968 <finite>
 800a946:	2800      	cmp	r0, #0
 800a948:	d0ed      	beq.n	800a926 <pow+0x96>
 800a94a:	4620      	mov	r0, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	f000 f80b 	bl	800a968 <finite>
 800a952:	e7c8      	b.n	800a8e6 <pow+0x56>
 800a954:	2600      	movs	r6, #0
 800a956:	4f01      	ldr	r7, [pc, #4]	@ (800a95c <pow+0xcc>)
 800a958:	e7e5      	b.n	800a926 <pow+0x96>
 800a95a:	bf00      	nop
 800a95c:	3ff00000 	.word	0x3ff00000

0800a960 <fabs>:
 800a960:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a964:	4619      	mov	r1, r3
 800a966:	4770      	bx	lr

0800a968 <finite>:
 800a968:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a96c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a970:	0fc0      	lsrs	r0, r0, #31
 800a972:	4770      	bx	lr

0800a974 <__ieee754_sqrt>:
 800a974:	4a67      	ldr	r2, [pc, #412]	@ (800ab14 <__ieee754_sqrt+0x1a0>)
 800a976:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	438a      	bics	r2, r1
 800a97c:	4606      	mov	r6, r0
 800a97e:	460f      	mov	r7, r1
 800a980:	460b      	mov	r3, r1
 800a982:	4604      	mov	r4, r0
 800a984:	d10e      	bne.n	800a9a4 <__ieee754_sqrt+0x30>
 800a986:	4602      	mov	r2, r0
 800a988:	f7f5 fda6 	bl	80004d8 <__aeabi_dmul>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	f7f5 fbea 	bl	800016c <__adddf3>
 800a998:	4606      	mov	r6, r0
 800a99a:	460f      	mov	r7, r1
 800a99c:	4630      	mov	r0, r6
 800a99e:	4639      	mov	r1, r7
 800a9a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	dc0c      	bgt.n	800a9c2 <__ieee754_sqrt+0x4e>
 800a9a8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a9ac:	4302      	orrs	r2, r0
 800a9ae:	d0f5      	beq.n	800a99c <__ieee754_sqrt+0x28>
 800a9b0:	b189      	cbz	r1, 800a9d6 <__ieee754_sqrt+0x62>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	f7f5 fbd8 	bl	8000168 <__aeabi_dsub>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	f7f5 feb6 	bl	800072c <__aeabi_ddiv>
 800a9c0:	e7ea      	b.n	800a998 <__ieee754_sqrt+0x24>
 800a9c2:	150a      	asrs	r2, r1, #20
 800a9c4:	d115      	bne.n	800a9f2 <__ieee754_sqrt+0x7e>
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	e009      	b.n	800a9de <__ieee754_sqrt+0x6a>
 800a9ca:	0ae3      	lsrs	r3, r4, #11
 800a9cc:	3a15      	subs	r2, #21
 800a9ce:	0564      	lsls	r4, r4, #21
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0fa      	beq.n	800a9ca <__ieee754_sqrt+0x56>
 800a9d4:	e7f7      	b.n	800a9c6 <__ieee754_sqrt+0x52>
 800a9d6:	460a      	mov	r2, r1
 800a9d8:	e7fa      	b.n	800a9d0 <__ieee754_sqrt+0x5c>
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	3101      	adds	r1, #1
 800a9de:	02d8      	lsls	r0, r3, #11
 800a9e0:	d5fb      	bpl.n	800a9da <__ieee754_sqrt+0x66>
 800a9e2:	1e48      	subs	r0, r1, #1
 800a9e4:	1a12      	subs	r2, r2, r0
 800a9e6:	f1c1 0020 	rsb	r0, r1, #32
 800a9ea:	fa24 f000 	lsr.w	r0, r4, r0
 800a9ee:	4303      	orrs	r3, r0
 800a9f0:	408c      	lsls	r4, r1
 800a9f2:	2600      	movs	r6, #0
 800a9f4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a9f8:	2116      	movs	r1, #22
 800a9fa:	07d2      	lsls	r2, r2, #31
 800a9fc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800aa00:	4632      	mov	r2, r6
 800aa02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa0a:	bf5c      	itt	pl
 800aa0c:	005b      	lslpl	r3, r3, #1
 800aa0e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800aa12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa16:	bf58      	it	pl
 800aa18:	0064      	lslpl	r4, r4, #1
 800aa1a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800aa1e:	107f      	asrs	r7, r7, #1
 800aa20:	0064      	lsls	r4, r4, #1
 800aa22:	1815      	adds	r5, r2, r0
 800aa24:	429d      	cmp	r5, r3
 800aa26:	bfde      	ittt	le
 800aa28:	182a      	addle	r2, r5, r0
 800aa2a:	1b5b      	suble	r3, r3, r5
 800aa2c:	1836      	addle	r6, r6, r0
 800aa2e:	0fe5      	lsrs	r5, r4, #31
 800aa30:	3901      	subs	r1, #1
 800aa32:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800aa36:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800aa3a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800aa3e:	d1f0      	bne.n	800aa22 <__ieee754_sqrt+0xae>
 800aa40:	460d      	mov	r5, r1
 800aa42:	f04f 0a20 	mov.w	sl, #32
 800aa46:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	eb01 0c00 	add.w	ip, r1, r0
 800aa50:	db02      	blt.n	800aa58 <__ieee754_sqrt+0xe4>
 800aa52:	d113      	bne.n	800aa7c <__ieee754_sqrt+0x108>
 800aa54:	45a4      	cmp	ip, r4
 800aa56:	d811      	bhi.n	800aa7c <__ieee754_sqrt+0x108>
 800aa58:	f1bc 0f00 	cmp.w	ip, #0
 800aa5c:	eb0c 0100 	add.w	r1, ip, r0
 800aa60:	da42      	bge.n	800aae8 <__ieee754_sqrt+0x174>
 800aa62:	2900      	cmp	r1, #0
 800aa64:	db40      	blt.n	800aae8 <__ieee754_sqrt+0x174>
 800aa66:	f102 0e01 	add.w	lr, r2, #1
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	4672      	mov	r2, lr
 800aa6e:	45a4      	cmp	ip, r4
 800aa70:	bf88      	it	hi
 800aa72:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aa76:	eba4 040c 	sub.w	r4, r4, ip
 800aa7a:	4405      	add	r5, r0
 800aa7c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800aa80:	f1ba 0a01 	subs.w	sl, sl, #1
 800aa84:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800aa88:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800aa8c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800aa90:	d1db      	bne.n	800aa4a <__ieee754_sqrt+0xd6>
 800aa92:	431c      	orrs	r4, r3
 800aa94:	d01a      	beq.n	800aacc <__ieee754_sqrt+0x158>
 800aa96:	4c20      	ldr	r4, [pc, #128]	@ (800ab18 <__ieee754_sqrt+0x1a4>)
 800aa98:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800ab1c <__ieee754_sqrt+0x1a8>
 800aa9c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aaa0:	e9db 2300 	ldrd	r2, r3, [fp]
 800aaa4:	f7f5 fb60 	bl	8000168 <__aeabi_dsub>
 800aaa8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4640      	mov	r0, r8
 800aab2:	4649      	mov	r1, r9
 800aab4:	f7f5 ff8c 	bl	80009d0 <__aeabi_dcmple>
 800aab8:	b140      	cbz	r0, 800aacc <__ieee754_sqrt+0x158>
 800aaba:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aabe:	e9db 2300 	ldrd	r2, r3, [fp]
 800aac2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800aac6:	d111      	bne.n	800aaec <__ieee754_sqrt+0x178>
 800aac8:	4655      	mov	r5, sl
 800aaca:	3601      	adds	r6, #1
 800aacc:	1072      	asrs	r2, r6, #1
 800aace:	086b      	lsrs	r3, r5, #1
 800aad0:	07f1      	lsls	r1, r6, #31
 800aad2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800aad6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800aada:	bf48      	it	mi
 800aadc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800aae0:	4618      	mov	r0, r3
 800aae2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800aae6:	e757      	b.n	800a998 <__ieee754_sqrt+0x24>
 800aae8:	4696      	mov	lr, r2
 800aaea:	e7be      	b.n	800aa6a <__ieee754_sqrt+0xf6>
 800aaec:	f7f5 fb3e 	bl	800016c <__adddf3>
 800aaf0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4640      	mov	r0, r8
 800aafa:	4649      	mov	r1, r9
 800aafc:	f7f5 ff5e 	bl	80009bc <__aeabi_dcmplt>
 800ab00:	b120      	cbz	r0, 800ab0c <__ieee754_sqrt+0x198>
 800ab02:	1ca8      	adds	r0, r5, #2
 800ab04:	bf08      	it	eq
 800ab06:	3601      	addeq	r6, #1
 800ab08:	3502      	adds	r5, #2
 800ab0a:	e7df      	b.n	800aacc <__ieee754_sqrt+0x158>
 800ab0c:	1c6b      	adds	r3, r5, #1
 800ab0e:	f023 0501 	bic.w	r5, r3, #1
 800ab12:	e7db      	b.n	800aacc <__ieee754_sqrt+0x158>
 800ab14:	7ff00000 	.word	0x7ff00000
 800ab18:	200001e0 	.word	0x200001e0
 800ab1c:	200001d8 	.word	0x200001d8

0800ab20 <__ieee754_pow>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	b091      	sub	sp, #68	@ 0x44
 800ab26:	e9cd 2300 	strd	r2, r3, [sp]
 800ab2a:	468b      	mov	fp, r1
 800ab2c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800ab30:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800ab34:	4682      	mov	sl, r0
 800ab36:	ea57 0001 	orrs.w	r0, r7, r1
 800ab3a:	d112      	bne.n	800ab62 <__ieee754_pow+0x42>
 800ab3c:	4653      	mov	r3, sl
 800ab3e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800ab42:	18db      	adds	r3, r3, r3
 800ab44:	4152      	adcs	r2, r2
 800ab46:	4298      	cmp	r0, r3
 800ab48:	4b91      	ldr	r3, [pc, #580]	@ (800ad90 <__ieee754_pow+0x270>)
 800ab4a:	4193      	sbcs	r3, r2
 800ab4c:	f080 84ce 	bcs.w	800b4ec <__ieee754_pow+0x9cc>
 800ab50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab54:	4650      	mov	r0, sl
 800ab56:	4659      	mov	r1, fp
 800ab58:	f7f5 fb08 	bl	800016c <__adddf3>
 800ab5c:	b011      	add	sp, #68	@ 0x44
 800ab5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab62:	4b8c      	ldr	r3, [pc, #560]	@ (800ad94 <__ieee754_pow+0x274>)
 800ab64:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800ab68:	429e      	cmp	r6, r3
 800ab6a:	465d      	mov	r5, fp
 800ab6c:	46d1      	mov	r9, sl
 800ab6e:	d807      	bhi.n	800ab80 <__ieee754_pow+0x60>
 800ab70:	d102      	bne.n	800ab78 <__ieee754_pow+0x58>
 800ab72:	f1ba 0f00 	cmp.w	sl, #0
 800ab76:	d1eb      	bne.n	800ab50 <__ieee754_pow+0x30>
 800ab78:	429f      	cmp	r7, r3
 800ab7a:	d801      	bhi.n	800ab80 <__ieee754_pow+0x60>
 800ab7c:	d10f      	bne.n	800ab9e <__ieee754_pow+0x7e>
 800ab7e:	b171      	cbz	r1, 800ab9e <__ieee754_pow+0x7e>
 800ab80:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ab84:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ab88:	ea55 0509 	orrs.w	r5, r5, r9
 800ab8c:	d1e0      	bne.n	800ab50 <__ieee754_pow+0x30>
 800ab8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab92:	18db      	adds	r3, r3, r3
 800ab94:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ab98:	4152      	adcs	r2, r2
 800ab9a:	429d      	cmp	r5, r3
 800ab9c:	e7d4      	b.n	800ab48 <__ieee754_pow+0x28>
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	4633      	mov	r3, r6
 800aba2:	da39      	bge.n	800ac18 <__ieee754_pow+0xf8>
 800aba4:	4a7c      	ldr	r2, [pc, #496]	@ (800ad98 <__ieee754_pow+0x278>)
 800aba6:	4297      	cmp	r7, r2
 800aba8:	d84e      	bhi.n	800ac48 <__ieee754_pow+0x128>
 800abaa:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800abae:	4297      	cmp	r7, r2
 800abb0:	f240 84ab 	bls.w	800b50a <__ieee754_pow+0x9ea>
 800abb4:	153a      	asrs	r2, r7, #20
 800abb6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800abba:	2a14      	cmp	r2, #20
 800abbc:	dd0f      	ble.n	800abde <__ieee754_pow+0xbe>
 800abbe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800abc2:	fa21 f402 	lsr.w	r4, r1, r2
 800abc6:	fa04 f202 	lsl.w	r2, r4, r2
 800abca:	428a      	cmp	r2, r1
 800abcc:	f040 849d 	bne.w	800b50a <__ieee754_pow+0x9ea>
 800abd0:	f004 0401 	and.w	r4, r4, #1
 800abd4:	f1c4 0402 	rsb	r4, r4, #2
 800abd8:	2900      	cmp	r1, #0
 800abda:	d15a      	bne.n	800ac92 <__ieee754_pow+0x172>
 800abdc:	e00e      	b.n	800abfc <__ieee754_pow+0xdc>
 800abde:	2900      	cmp	r1, #0
 800abe0:	d156      	bne.n	800ac90 <__ieee754_pow+0x170>
 800abe2:	f1c2 0214 	rsb	r2, r2, #20
 800abe6:	fa47 f402 	asr.w	r4, r7, r2
 800abea:	fa04 f202 	lsl.w	r2, r4, r2
 800abee:	42ba      	cmp	r2, r7
 800abf0:	f040 8488 	bne.w	800b504 <__ieee754_pow+0x9e4>
 800abf4:	f004 0401 	and.w	r4, r4, #1
 800abf8:	f1c4 0402 	rsb	r4, r4, #2
 800abfc:	4a67      	ldr	r2, [pc, #412]	@ (800ad9c <__ieee754_pow+0x27c>)
 800abfe:	4297      	cmp	r7, r2
 800ac00:	d130      	bne.n	800ac64 <__ieee754_pow+0x144>
 800ac02:	f1b8 0f00 	cmp.w	r8, #0
 800ac06:	f280 8479 	bge.w	800b4fc <__ieee754_pow+0x9dc>
 800ac0a:	4652      	mov	r2, sl
 800ac0c:	465b      	mov	r3, fp
 800ac0e:	2000      	movs	r0, #0
 800ac10:	4962      	ldr	r1, [pc, #392]	@ (800ad9c <__ieee754_pow+0x27c>)
 800ac12:	f7f5 fd8b 	bl	800072c <__aeabi_ddiv>
 800ac16:	e7a1      	b.n	800ab5c <__ieee754_pow+0x3c>
 800ac18:	2400      	movs	r4, #0
 800ac1a:	2900      	cmp	r1, #0
 800ac1c:	d139      	bne.n	800ac92 <__ieee754_pow+0x172>
 800ac1e:	4a5d      	ldr	r2, [pc, #372]	@ (800ad94 <__ieee754_pow+0x274>)
 800ac20:	4297      	cmp	r7, r2
 800ac22:	d1eb      	bne.n	800abfc <__ieee754_pow+0xdc>
 800ac24:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800ac28:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800ac2c:	ea53 0309 	orrs.w	r3, r3, r9
 800ac30:	f000 845c 	beq.w	800b4ec <__ieee754_pow+0x9cc>
 800ac34:	4b5a      	ldr	r3, [pc, #360]	@ (800ada0 <__ieee754_pow+0x280>)
 800ac36:	429e      	cmp	r6, r3
 800ac38:	d908      	bls.n	800ac4c <__ieee754_pow+0x12c>
 800ac3a:	f1b8 0f00 	cmp.w	r8, #0
 800ac3e:	f2c0 8459 	blt.w	800b4f4 <__ieee754_pow+0x9d4>
 800ac42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac46:	e789      	b.n	800ab5c <__ieee754_pow+0x3c>
 800ac48:	2402      	movs	r4, #2
 800ac4a:	e7e6      	b.n	800ac1a <__ieee754_pow+0xfa>
 800ac4c:	f1b8 0f00 	cmp.w	r8, #0
 800ac50:	f04f 0000 	mov.w	r0, #0
 800ac54:	f04f 0100 	mov.w	r1, #0
 800ac58:	da80      	bge.n	800ab5c <__ieee754_pow+0x3c>
 800ac5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ac5e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ac62:	e77b      	b.n	800ab5c <__ieee754_pow+0x3c>
 800ac64:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800ac68:	d106      	bne.n	800ac78 <__ieee754_pow+0x158>
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	465b      	mov	r3, fp
 800ac6e:	4650      	mov	r0, sl
 800ac70:	4659      	mov	r1, fp
 800ac72:	f7f5 fc31 	bl	80004d8 <__aeabi_dmul>
 800ac76:	e771      	b.n	800ab5c <__ieee754_pow+0x3c>
 800ac78:	4a4a      	ldr	r2, [pc, #296]	@ (800ada4 <__ieee754_pow+0x284>)
 800ac7a:	4590      	cmp	r8, r2
 800ac7c:	d109      	bne.n	800ac92 <__ieee754_pow+0x172>
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	db07      	blt.n	800ac92 <__ieee754_pow+0x172>
 800ac82:	4650      	mov	r0, sl
 800ac84:	4659      	mov	r1, fp
 800ac86:	b011      	add	sp, #68	@ 0x44
 800ac88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	f7ff be72 	b.w	800a974 <__ieee754_sqrt>
 800ac90:	2400      	movs	r4, #0
 800ac92:	4650      	mov	r0, sl
 800ac94:	4659      	mov	r1, fp
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	f7ff fe62 	bl	800a960 <fabs>
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	f1b9 0f00 	cmp.w	r9, #0
 800aca2:	d127      	bne.n	800acf4 <__ieee754_pow+0x1d4>
 800aca4:	4a3d      	ldr	r2, [pc, #244]	@ (800ad9c <__ieee754_pow+0x27c>)
 800aca6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800acaa:	4594      	cmp	ip, r2
 800acac:	d000      	beq.n	800acb0 <__ieee754_pow+0x190>
 800acae:	bb0e      	cbnz	r6, 800acf4 <__ieee754_pow+0x1d4>
 800acb0:	f1b8 0f00 	cmp.w	r8, #0
 800acb4:	da05      	bge.n	800acc2 <__ieee754_pow+0x1a2>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	2000      	movs	r0, #0
 800acbc:	4937      	ldr	r1, [pc, #220]	@ (800ad9c <__ieee754_pow+0x27c>)
 800acbe:	f7f5 fd35 	bl	800072c <__aeabi_ddiv>
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	f6bf af4a 	bge.w	800ab5c <__ieee754_pow+0x3c>
 800acc8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800accc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800acd0:	4326      	orrs	r6, r4
 800acd2:	d108      	bne.n	800ace6 <__ieee754_pow+0x1c6>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4610      	mov	r0, r2
 800acda:	4619      	mov	r1, r3
 800acdc:	f7f5 fa44 	bl	8000168 <__aeabi_dsub>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	e795      	b.n	800ac12 <__ieee754_pow+0xf2>
 800ace6:	2c01      	cmp	r4, #1
 800ace8:	f47f af38 	bne.w	800ab5c <__ieee754_pow+0x3c>
 800acec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acf0:	4619      	mov	r1, r3
 800acf2:	e733      	b.n	800ab5c <__ieee754_pow+0x3c>
 800acf4:	0fea      	lsrs	r2, r5, #31
 800acf6:	3a01      	subs	r2, #1
 800acf8:	ea52 0c04 	orrs.w	ip, r2, r4
 800acfc:	d102      	bne.n	800ad04 <__ieee754_pow+0x1e4>
 800acfe:	4652      	mov	r2, sl
 800ad00:	465b      	mov	r3, fp
 800ad02:	e7e9      	b.n	800acd8 <__ieee754_pow+0x1b8>
 800ad04:	f04f 0900 	mov.w	r9, #0
 800ad08:	3c01      	subs	r4, #1
 800ad0a:	4314      	orrs	r4, r2
 800ad0c:	bf14      	ite	ne
 800ad0e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800ad9c <__ieee754_pow+0x27c>
 800ad12:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800ada8 <__ieee754_pow+0x288>
 800ad16:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800ad1a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800ad1e:	f240 8107 	bls.w	800af30 <__ieee754_pow+0x410>
 800ad22:	4b22      	ldr	r3, [pc, #136]	@ (800adac <__ieee754_pow+0x28c>)
 800ad24:	429f      	cmp	r7, r3
 800ad26:	4b1e      	ldr	r3, [pc, #120]	@ (800ada0 <__ieee754_pow+0x280>)
 800ad28:	d913      	bls.n	800ad52 <__ieee754_pow+0x232>
 800ad2a:	429e      	cmp	r6, r3
 800ad2c:	d808      	bhi.n	800ad40 <__ieee754_pow+0x220>
 800ad2e:	f1b8 0f00 	cmp.w	r8, #0
 800ad32:	da08      	bge.n	800ad46 <__ieee754_pow+0x226>
 800ad34:	2000      	movs	r0, #0
 800ad36:	b011      	add	sp, #68	@ 0x44
 800ad38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	f000 bcb0 	b.w	800b6a0 <__math_oflow>
 800ad40:	f1b8 0f00 	cmp.w	r8, #0
 800ad44:	dcf6      	bgt.n	800ad34 <__ieee754_pow+0x214>
 800ad46:	2000      	movs	r0, #0
 800ad48:	b011      	add	sp, #68	@ 0x44
 800ad4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4e:	f000 bca2 	b.w	800b696 <__math_uflow>
 800ad52:	429e      	cmp	r6, r3
 800ad54:	d20c      	bcs.n	800ad70 <__ieee754_pow+0x250>
 800ad56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f7f5 fe2d 	bl	80009bc <__aeabi_dcmplt>
 800ad62:	3800      	subs	r0, #0
 800ad64:	bf18      	it	ne
 800ad66:	2001      	movne	r0, #1
 800ad68:	f1b8 0f00 	cmp.w	r8, #0
 800ad6c:	daec      	bge.n	800ad48 <__ieee754_pow+0x228>
 800ad6e:	e7e2      	b.n	800ad36 <__ieee754_pow+0x216>
 800ad70:	4b0a      	ldr	r3, [pc, #40]	@ (800ad9c <__ieee754_pow+0x27c>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	429e      	cmp	r6, r3
 800ad76:	d91b      	bls.n	800adb0 <__ieee754_pow+0x290>
 800ad78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f7f5 fe1d 	bl	80009bc <__aeabi_dcmplt>
 800ad82:	3800      	subs	r0, #0
 800ad84:	bf18      	it	ne
 800ad86:	2001      	movne	r0, #1
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	dcd3      	bgt.n	800ad36 <__ieee754_pow+0x216>
 800ad8e:	e7db      	b.n	800ad48 <__ieee754_pow+0x228>
 800ad90:	fff00000 	.word	0xfff00000
 800ad94:	7ff00000 	.word	0x7ff00000
 800ad98:	433fffff 	.word	0x433fffff
 800ad9c:	3ff00000 	.word	0x3ff00000
 800ada0:	3fefffff 	.word	0x3fefffff
 800ada4:	3fe00000 	.word	0x3fe00000
 800ada8:	bff00000 	.word	0xbff00000
 800adac:	43f00000 	.word	0x43f00000
 800adb0:	4b5b      	ldr	r3, [pc, #364]	@ (800af20 <__ieee754_pow+0x400>)
 800adb2:	f7f5 f9d9 	bl	8000168 <__aeabi_dsub>
 800adb6:	a352      	add	r3, pc, #328	@ (adr r3, 800af00 <__ieee754_pow+0x3e0>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	4604      	mov	r4, r0
 800adbe:	460d      	mov	r5, r1
 800adc0:	f7f5 fb8a 	bl	80004d8 <__aeabi_dmul>
 800adc4:	a350      	add	r3, pc, #320	@ (adr r3, 800af08 <__ieee754_pow+0x3e8>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	4606      	mov	r6, r0
 800adcc:	460f      	mov	r7, r1
 800adce:	4620      	mov	r0, r4
 800add0:	4629      	mov	r1, r5
 800add2:	f7f5 fb81 	bl	80004d8 <__aeabi_dmul>
 800add6:	2200      	movs	r2, #0
 800add8:	4682      	mov	sl, r0
 800adda:	468b      	mov	fp, r1
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	4b50      	ldr	r3, [pc, #320]	@ (800af24 <__ieee754_pow+0x404>)
 800ade2:	f7f5 fb79 	bl	80004d8 <__aeabi_dmul>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	a149      	add	r1, pc, #292	@ (adr r1, 800af10 <__ieee754_pow+0x3f0>)
 800adec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf0:	f7f5 f9ba 	bl	8000168 <__aeabi_dsub>
 800adf4:	4622      	mov	r2, r4
 800adf6:	462b      	mov	r3, r5
 800adf8:	f7f5 fb6e 	bl	80004d8 <__aeabi_dmul>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	2000      	movs	r0, #0
 800ae02:	4949      	ldr	r1, [pc, #292]	@ (800af28 <__ieee754_pow+0x408>)
 800ae04:	f7f5 f9b0 	bl	8000168 <__aeabi_dsub>
 800ae08:	4622      	mov	r2, r4
 800ae0a:	4680      	mov	r8, r0
 800ae0c:	4689      	mov	r9, r1
 800ae0e:	462b      	mov	r3, r5
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 fb60 	bl	80004d8 <__aeabi_dmul>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f7f5 fb5a 	bl	80004d8 <__aeabi_dmul>
 800ae24:	a33c      	add	r3, pc, #240	@ (adr r3, 800af18 <__ieee754_pow+0x3f8>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 fb55 	bl	80004d8 <__aeabi_dmul>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4650      	mov	r0, sl
 800ae34:	4659      	mov	r1, fp
 800ae36:	f7f5 f997 	bl	8000168 <__aeabi_dsub>
 800ae3a:	2400      	movs	r4, #0
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4680      	mov	r8, r0
 800ae42:	4689      	mov	r9, r1
 800ae44:	4630      	mov	r0, r6
 800ae46:	4639      	mov	r1, r7
 800ae48:	f7f5 f990 	bl	800016c <__adddf3>
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	463b      	mov	r3, r7
 800ae50:	4620      	mov	r0, r4
 800ae52:	460d      	mov	r5, r1
 800ae54:	f7f5 f988 	bl	8000168 <__aeabi_dsub>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 f982 	bl	8000168 <__aeabi_dsub>
 800ae64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9304      	str	r3, [sp, #16]
 800ae70:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ae74:	4606      	mov	r6, r0
 800ae76:	460f      	mov	r7, r1
 800ae78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae7c:	4652      	mov	r2, sl
 800ae7e:	465b      	mov	r3, fp
 800ae80:	f7f5 f972 	bl	8000168 <__aeabi_dsub>
 800ae84:	4622      	mov	r2, r4
 800ae86:	462b      	mov	r3, r5
 800ae88:	f7f5 fb26 	bl	80004d8 <__aeabi_dmul>
 800ae8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae90:	4680      	mov	r8, r0
 800ae92:	4689      	mov	r9, r1
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	f7f5 fb1e 	bl	80004d8 <__aeabi_dmul>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4640      	mov	r0, r8
 800aea2:	4649      	mov	r1, r9
 800aea4:	f7f5 f962 	bl	800016c <__adddf3>
 800aea8:	4652      	mov	r2, sl
 800aeaa:	465b      	mov	r3, fp
 800aeac:	4606      	mov	r6, r0
 800aeae:	460f      	mov	r7, r1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	f7f5 fb10 	bl	80004d8 <__aeabi_dmul>
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4602      	mov	r2, r0
 800aebc:	4680      	mov	r8, r0
 800aebe:	4689      	mov	r9, r1
 800aec0:	4630      	mov	r0, r6
 800aec2:	4639      	mov	r1, r7
 800aec4:	f7f5 f952 	bl	800016c <__adddf3>
 800aec8:	4b18      	ldr	r3, [pc, #96]	@ (800af2c <__ieee754_pow+0x40c>)
 800aeca:	4604      	mov	r4, r0
 800aecc:	4299      	cmp	r1, r3
 800aece:	460d      	mov	r5, r1
 800aed0:	468a      	mov	sl, r1
 800aed2:	468b      	mov	fp, r1
 800aed4:	f340 82e0 	ble.w	800b498 <__ieee754_pow+0x978>
 800aed8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800aedc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800aee0:	4303      	orrs	r3, r0
 800aee2:	f000 81df 	beq.w	800b2a4 <__ieee754_pow+0x784>
 800aee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeea:	2200      	movs	r2, #0
 800aeec:	2300      	movs	r3, #0
 800aeee:	f7f5 fd65 	bl	80009bc <__aeabi_dcmplt>
 800aef2:	3800      	subs	r0, #0
 800aef4:	bf18      	it	ne
 800aef6:	2001      	movne	r0, #1
 800aef8:	e71d      	b.n	800ad36 <__ieee754_pow+0x216>
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w
 800af00:	60000000 	.word	0x60000000
 800af04:	3ff71547 	.word	0x3ff71547
 800af08:	f85ddf44 	.word	0xf85ddf44
 800af0c:	3e54ae0b 	.word	0x3e54ae0b
 800af10:	55555555 	.word	0x55555555
 800af14:	3fd55555 	.word	0x3fd55555
 800af18:	652b82fe 	.word	0x652b82fe
 800af1c:	3ff71547 	.word	0x3ff71547
 800af20:	3ff00000 	.word	0x3ff00000
 800af24:	3fd00000 	.word	0x3fd00000
 800af28:	3fe00000 	.word	0x3fe00000
 800af2c:	408fffff 	.word	0x408fffff
 800af30:	4ad3      	ldr	r2, [pc, #844]	@ (800b280 <__ieee754_pow+0x760>)
 800af32:	402a      	ands	r2, r5
 800af34:	2a00      	cmp	r2, #0
 800af36:	f040 817a 	bne.w	800b22e <__ieee754_pow+0x70e>
 800af3a:	4bd2      	ldr	r3, [pc, #840]	@ (800b284 <__ieee754_pow+0x764>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	f7f5 facb 	bl	80004d8 <__aeabi_dmul>
 800af42:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800af46:	460b      	mov	r3, r1
 800af48:	151a      	asrs	r2, r3, #20
 800af4a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800af4e:	4422      	add	r2, r4
 800af50:	920a      	str	r2, [sp, #40]	@ 0x28
 800af52:	4acd      	ldr	r2, [pc, #820]	@ (800b288 <__ieee754_pow+0x768>)
 800af54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af58:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800af5c:	4293      	cmp	r3, r2
 800af5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800af62:	dd08      	ble.n	800af76 <__ieee754_pow+0x456>
 800af64:	4ac9      	ldr	r2, [pc, #804]	@ (800b28c <__ieee754_pow+0x76c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	f340 8163 	ble.w	800b232 <__ieee754_pow+0x712>
 800af6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af6e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800af72:	3301      	adds	r3, #1
 800af74:	930a      	str	r3, [sp, #40]	@ 0x28
 800af76:	2600      	movs	r6, #0
 800af78:	00f3      	lsls	r3, r6, #3
 800af7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af7c:	4bc4      	ldr	r3, [pc, #784]	@ (800b290 <__ieee754_pow+0x770>)
 800af7e:	4629      	mov	r1, r5
 800af80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af84:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af88:	461a      	mov	r2, r3
 800af8a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800af8e:	4623      	mov	r3, r4
 800af90:	4682      	mov	sl, r0
 800af92:	f7f5 f8e9 	bl	8000168 <__aeabi_dsub>
 800af96:	4652      	mov	r2, sl
 800af98:	462b      	mov	r3, r5
 800af9a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800af9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800afa2:	f7f5 f8e3 	bl	800016c <__adddf3>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	2000      	movs	r0, #0
 800afac:	49b9      	ldr	r1, [pc, #740]	@ (800b294 <__ieee754_pow+0x774>)
 800afae:	f7f5 fbbd 	bl	800072c <__aeabi_ddiv>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afbe:	f7f5 fa8b 	bl	80004d8 <__aeabi_dmul>
 800afc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800afc6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800afca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800afce:	2300      	movs	r3, #0
 800afd0:	2200      	movs	r2, #0
 800afd2:	46ab      	mov	fp, r5
 800afd4:	106d      	asrs	r5, r5, #1
 800afd6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800afe0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800afe4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	4614      	mov	r4, r2
 800afee:	461d      	mov	r5, r3
 800aff0:	f7f5 fa72 	bl	80004d8 <__aeabi_dmul>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800affc:	f7f5 f8b4 	bl	8000168 <__aeabi_dsub>
 800b000:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b004:	4606      	mov	r6, r0
 800b006:	460f      	mov	r7, r1
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 f8ac 	bl	8000168 <__aeabi_dsub>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4650      	mov	r0, sl
 800b016:	4659      	mov	r1, fp
 800b018:	f7f5 f8a6 	bl	8000168 <__aeabi_dsub>
 800b01c:	4642      	mov	r2, r8
 800b01e:	464b      	mov	r3, r9
 800b020:	f7f5 fa5a 	bl	80004d8 <__aeabi_dmul>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 f89c 	bl	8000168 <__aeabi_dsub>
 800b030:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b034:	f7f5 fa50 	bl	80004d8 <__aeabi_dmul>
 800b038:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b03c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b040:	4610      	mov	r0, r2
 800b042:	4619      	mov	r1, r3
 800b044:	f7f5 fa48 	bl	80004d8 <__aeabi_dmul>
 800b048:	a37b      	add	r3, pc, #492	@ (adr r3, 800b238 <__ieee754_pow+0x718>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	4604      	mov	r4, r0
 800b050:	460d      	mov	r5, r1
 800b052:	f7f5 fa41 	bl	80004d8 <__aeabi_dmul>
 800b056:	a37a      	add	r3, pc, #488	@ (adr r3, 800b240 <__ieee754_pow+0x720>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f7f5 f886 	bl	800016c <__adddf3>
 800b060:	4622      	mov	r2, r4
 800b062:	462b      	mov	r3, r5
 800b064:	f7f5 fa38 	bl	80004d8 <__aeabi_dmul>
 800b068:	a377      	add	r3, pc, #476	@ (adr r3, 800b248 <__ieee754_pow+0x728>)
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f7f5 f87d 	bl	800016c <__adddf3>
 800b072:	4622      	mov	r2, r4
 800b074:	462b      	mov	r3, r5
 800b076:	f7f5 fa2f 	bl	80004d8 <__aeabi_dmul>
 800b07a:	a375      	add	r3, pc, #468	@ (adr r3, 800b250 <__ieee754_pow+0x730>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f7f5 f874 	bl	800016c <__adddf3>
 800b084:	4622      	mov	r2, r4
 800b086:	462b      	mov	r3, r5
 800b088:	f7f5 fa26 	bl	80004d8 <__aeabi_dmul>
 800b08c:	a372      	add	r3, pc, #456	@ (adr r3, 800b258 <__ieee754_pow+0x738>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	f7f5 f86b 	bl	800016c <__adddf3>
 800b096:	4622      	mov	r2, r4
 800b098:	462b      	mov	r3, r5
 800b09a:	f7f5 fa1d 	bl	80004d8 <__aeabi_dmul>
 800b09e:	a370      	add	r3, pc, #448	@ (adr r3, 800b260 <__ieee754_pow+0x740>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 f862 	bl	800016c <__adddf3>
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	462b      	mov	r3, r5
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	f7f5 fa10 	bl	80004d8 <__aeabi_dmul>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	4630      	mov	r0, r6
 800b0be:	4639      	mov	r1, r7
 800b0c0:	f7f5 fa0a 	bl	80004d8 <__aeabi_dmul>
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	460d      	mov	r5, r1
 800b0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0cc:	4642      	mov	r2, r8
 800b0ce:	464b      	mov	r3, r9
 800b0d0:	f7f5 f84c 	bl	800016c <__adddf3>
 800b0d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b0d8:	f7f5 f9fe 	bl	80004d8 <__aeabi_dmul>
 800b0dc:	4622      	mov	r2, r4
 800b0de:	462b      	mov	r3, r5
 800b0e0:	f7f5 f844 	bl	800016c <__adddf3>
 800b0e4:	4642      	mov	r2, r8
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7f5 f9f2 	bl	80004d8 <__aeabi_dmul>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	4b68      	ldr	r3, [pc, #416]	@ (800b298 <__ieee754_pow+0x778>)
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	f7f5 f836 	bl	800016c <__adddf3>
 800b100:	4652      	mov	r2, sl
 800b102:	465b      	mov	r3, fp
 800b104:	f7f5 f832 	bl	800016c <__adddf3>
 800b108:	2400      	movs	r4, #0
 800b10a:	460d      	mov	r5, r1
 800b10c:	4622      	mov	r2, r4
 800b10e:	460b      	mov	r3, r1
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 f9e0 	bl	80004d8 <__aeabi_dmul>
 800b118:	2200      	movs	r2, #0
 800b11a:	4680      	mov	r8, r0
 800b11c:	4689      	mov	r9, r1
 800b11e:	4620      	mov	r0, r4
 800b120:	4629      	mov	r1, r5
 800b122:	4b5d      	ldr	r3, [pc, #372]	@ (800b298 <__ieee754_pow+0x778>)
 800b124:	f7f5 f820 	bl	8000168 <__aeabi_dsub>
 800b128:	4632      	mov	r2, r6
 800b12a:	463b      	mov	r3, r7
 800b12c:	f7f5 f81c 	bl	8000168 <__aeabi_dsub>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4650      	mov	r0, sl
 800b136:	4659      	mov	r1, fp
 800b138:	f7f5 f816 	bl	8000168 <__aeabi_dsub>
 800b13c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b140:	f7f5 f9ca 	bl	80004d8 <__aeabi_dmul>
 800b144:	4622      	mov	r2, r4
 800b146:	4606      	mov	r6, r0
 800b148:	460f      	mov	r7, r1
 800b14a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b14e:	462b      	mov	r3, r5
 800b150:	f7f5 f9c2 	bl	80004d8 <__aeabi_dmul>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 f806 	bl	800016c <__adddf3>
 800b160:	2400      	movs	r4, #0
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	f7f4 fffd 	bl	800016c <__adddf3>
 800b172:	a33d      	add	r3, pc, #244	@ (adr r3, 800b268 <__ieee754_pow+0x748>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	4620      	mov	r0, r4
 800b17a:	460d      	mov	r5, r1
 800b17c:	f7f5 f9ac 	bl	80004d8 <__aeabi_dmul>
 800b180:	4642      	mov	r2, r8
 800b182:	464b      	mov	r3, r9
 800b184:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b188:	4620      	mov	r0, r4
 800b18a:	4629      	mov	r1, r5
 800b18c:	f7f4 ffec 	bl	8000168 <__aeabi_dsub>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f4 ffe6 	bl	8000168 <__aeabi_dsub>
 800b19c:	a334      	add	r3, pc, #208	@ (adr r3, 800b270 <__ieee754_pow+0x750>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	f7f5 f999 	bl	80004d8 <__aeabi_dmul>
 800b1a6:	a334      	add	r3, pc, #208	@ (adr r3, 800b278 <__ieee754_pow+0x758>)
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	460f      	mov	r7, r1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	f7f5 f990 	bl	80004d8 <__aeabi_dmul>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4630      	mov	r0, r6
 800b1be:	4639      	mov	r1, r7
 800b1c0:	f7f4 ffd4 	bl	800016c <__adddf3>
 800b1c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b1c6:	4b35      	ldr	r3, [pc, #212]	@ (800b29c <__ieee754_pow+0x77c>)
 800b1c8:	2400      	movs	r4, #0
 800b1ca:	4413      	add	r3, r2
 800b1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d0:	f7f4 ffcc 	bl	800016c <__adddf3>
 800b1d4:	4682      	mov	sl, r0
 800b1d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b1d8:	468b      	mov	fp, r1
 800b1da:	f7f5 f913 	bl	8000404 <__aeabi_i2d>
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b1e4:	4b2e      	ldr	r3, [pc, #184]	@ (800b2a0 <__ieee754_pow+0x780>)
 800b1e6:	4413      	add	r3, r2
 800b1e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f2:	465b      	mov	r3, fp
 800b1f4:	f7f4 ffba 	bl	800016c <__adddf3>
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	f7f4 ffb6 	bl	800016c <__adddf3>
 800b200:	4632      	mov	r2, r6
 800b202:	463b      	mov	r3, r7
 800b204:	f7f4 ffb2 	bl	800016c <__adddf3>
 800b208:	4632      	mov	r2, r6
 800b20a:	463b      	mov	r3, r7
 800b20c:	4620      	mov	r0, r4
 800b20e:	460d      	mov	r5, r1
 800b210:	f7f4 ffaa 	bl	8000168 <__aeabi_dsub>
 800b214:	4642      	mov	r2, r8
 800b216:	464b      	mov	r3, r9
 800b218:	f7f4 ffa6 	bl	8000168 <__aeabi_dsub>
 800b21c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b220:	f7f4 ffa2 	bl	8000168 <__aeabi_dsub>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4650      	mov	r0, sl
 800b22a:	4659      	mov	r1, fp
 800b22c:	e618      	b.n	800ae60 <__ieee754_pow+0x340>
 800b22e:	2400      	movs	r4, #0
 800b230:	e68a      	b.n	800af48 <__ieee754_pow+0x428>
 800b232:	2601      	movs	r6, #1
 800b234:	e6a0      	b.n	800af78 <__ieee754_pow+0x458>
 800b236:	bf00      	nop
 800b238:	4a454eef 	.word	0x4a454eef
 800b23c:	3fca7e28 	.word	0x3fca7e28
 800b240:	93c9db65 	.word	0x93c9db65
 800b244:	3fcd864a 	.word	0x3fcd864a
 800b248:	a91d4101 	.word	0xa91d4101
 800b24c:	3fd17460 	.word	0x3fd17460
 800b250:	518f264d 	.word	0x518f264d
 800b254:	3fd55555 	.word	0x3fd55555
 800b258:	db6fabff 	.word	0xdb6fabff
 800b25c:	3fdb6db6 	.word	0x3fdb6db6
 800b260:	33333303 	.word	0x33333303
 800b264:	3fe33333 	.word	0x3fe33333
 800b268:	e0000000 	.word	0xe0000000
 800b26c:	3feec709 	.word	0x3feec709
 800b270:	dc3a03fd 	.word	0xdc3a03fd
 800b274:	3feec709 	.word	0x3feec709
 800b278:	145b01f5 	.word	0x145b01f5
 800b27c:	be3e2fe0 	.word	0xbe3e2fe0
 800b280:	7ff00000 	.word	0x7ff00000
 800b284:	43400000 	.word	0x43400000
 800b288:	0003988e 	.word	0x0003988e
 800b28c:	000bb679 	.word	0x000bb679
 800b290:	0800bdc8 	.word	0x0800bdc8
 800b294:	3ff00000 	.word	0x3ff00000
 800b298:	40080000 	.word	0x40080000
 800b29c:	0800bda8 	.word	0x0800bda8
 800b2a0:	0800bdb8 	.word	0x0800bdb8
 800b2a4:	a39a      	add	r3, pc, #616	@ (adr r3, 800b510 <__ieee754_pow+0x9f0>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	f7f4 ff5d 	bl	800016c <__adddf3>
 800b2b2:	4642      	mov	r2, r8
 800b2b4:	e9cd 0100 	strd	r0, r1, [sp]
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	4629      	mov	r1, r5
 800b2be:	f7f4 ff53 	bl	8000168 <__aeabi_dsub>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2ca:	f7f5 fb95 	bl	80009f8 <__aeabi_dcmpgt>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f47f ae09 	bne.w	800aee6 <__ieee754_pow+0x3c6>
 800b2d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b2d8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b2dc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b2e0:	fa43 fa0a 	asr.w	sl, r3, sl
 800b2e4:	44da      	add	sl, fp
 800b2e6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b2ea:	489b      	ldr	r0, [pc, #620]	@ (800b558 <__ieee754_pow+0xa38>)
 800b2ec:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b2f0:	4108      	asrs	r0, r1
 800b2f2:	ea00 030a 	and.w	r3, r0, sl
 800b2f6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b2fa:	f1c1 0114 	rsb	r1, r1, #20
 800b2fe:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b302:	4640      	mov	r0, r8
 800b304:	fa4a fa01 	asr.w	sl, sl, r1
 800b308:	f1bb 0f00 	cmp.w	fp, #0
 800b30c:	4649      	mov	r1, r9
 800b30e:	f04f 0200 	mov.w	r2, #0
 800b312:	bfb8      	it	lt
 800b314:	f1ca 0a00 	rsblt	sl, sl, #0
 800b318:	f7f4 ff26 	bl	8000168 <__aeabi_dsub>
 800b31c:	4680      	mov	r8, r0
 800b31e:	4689      	mov	r9, r1
 800b320:	2400      	movs	r4, #0
 800b322:	4632      	mov	r2, r6
 800b324:	463b      	mov	r3, r7
 800b326:	4640      	mov	r0, r8
 800b328:	4649      	mov	r1, r9
 800b32a:	f7f4 ff1f 	bl	800016c <__adddf3>
 800b32e:	a37a      	add	r3, pc, #488	@ (adr r3, 800b518 <__ieee754_pow+0x9f8>)
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	4620      	mov	r0, r4
 800b336:	460d      	mov	r5, r1
 800b338:	f7f5 f8ce 	bl	80004d8 <__aeabi_dmul>
 800b33c:	4642      	mov	r2, r8
 800b33e:	464b      	mov	r3, r9
 800b340:	e9cd 0100 	strd	r0, r1, [sp]
 800b344:	4620      	mov	r0, r4
 800b346:	4629      	mov	r1, r5
 800b348:	f7f4 ff0e 	bl	8000168 <__aeabi_dsub>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4630      	mov	r0, r6
 800b352:	4639      	mov	r1, r7
 800b354:	f7f4 ff08 	bl	8000168 <__aeabi_dsub>
 800b358:	a371      	add	r3, pc, #452	@ (adr r3, 800b520 <__ieee754_pow+0xa00>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 f8bb 	bl	80004d8 <__aeabi_dmul>
 800b362:	a371      	add	r3, pc, #452	@ (adr r3, 800b528 <__ieee754_pow+0xa08>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	4680      	mov	r8, r0
 800b36a:	4689      	mov	r9, r1
 800b36c:	4620      	mov	r0, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	f7f5 f8b2 	bl	80004d8 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	f7f4 fef6 	bl	800016c <__adddf3>
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b38c:	f7f4 feee 	bl	800016c <__adddf3>
 800b390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b394:	4680      	mov	r8, r0
 800b396:	4689      	mov	r9, r1
 800b398:	f7f4 fee6 	bl	8000168 <__aeabi_dsub>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7f4 fee0 	bl	8000168 <__aeabi_dsub>
 800b3a8:	4642      	mov	r2, r8
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460f      	mov	r7, r1
 800b3ae:	464b      	mov	r3, r9
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	f7f5 f890 	bl	80004d8 <__aeabi_dmul>
 800b3b8:	a35d      	add	r3, pc, #372	@ (adr r3, 800b530 <__ieee754_pow+0xa10>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	4604      	mov	r4, r0
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	f7f5 f889 	bl	80004d8 <__aeabi_dmul>
 800b3c6:	a35c      	add	r3, pc, #368	@ (adr r3, 800b538 <__ieee754_pow+0xa18>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 fecc 	bl	8000168 <__aeabi_dsub>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f5 f880 	bl	80004d8 <__aeabi_dmul>
 800b3d8:	a359      	add	r3, pc, #356	@ (adr r3, 800b540 <__ieee754_pow+0xa20>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 fec5 	bl	800016c <__adddf3>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	f7f5 f877 	bl	80004d8 <__aeabi_dmul>
 800b3ea:	a357      	add	r3, pc, #348	@ (adr r3, 800b548 <__ieee754_pow+0xa28>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 feba 	bl	8000168 <__aeabi_dsub>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	462b      	mov	r3, r5
 800b3f8:	f7f5 f86e 	bl	80004d8 <__aeabi_dmul>
 800b3fc:	a354      	add	r3, pc, #336	@ (adr r3, 800b550 <__ieee754_pow+0xa30>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f4 feb3 	bl	800016c <__adddf3>
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	f7f5 f865 	bl	80004d8 <__aeabi_dmul>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f4 fea7 	bl	8000168 <__aeabi_dsub>
 800b41a:	4604      	mov	r4, r0
 800b41c:	460d      	mov	r5, r1
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f5 f857 	bl	80004d8 <__aeabi_dmul>
 800b42a:	2200      	movs	r2, #0
 800b42c:	e9cd 0100 	strd	r0, r1, [sp]
 800b430:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b434:	4620      	mov	r0, r4
 800b436:	4629      	mov	r1, r5
 800b438:	f7f4 fe96 	bl	8000168 <__aeabi_dsub>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b444:	f7f5 f972 	bl	800072c <__aeabi_ddiv>
 800b448:	4632      	mov	r2, r6
 800b44a:	4604      	mov	r4, r0
 800b44c:	460d      	mov	r5, r1
 800b44e:	463b      	mov	r3, r7
 800b450:	4640      	mov	r0, r8
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 f840 	bl	80004d8 <__aeabi_dmul>
 800b458:	4632      	mov	r2, r6
 800b45a:	463b      	mov	r3, r7
 800b45c:	f7f4 fe86 	bl	800016c <__adddf3>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f4 fe7e 	bl	8000168 <__aeabi_dsub>
 800b46c:	4642      	mov	r2, r8
 800b46e:	464b      	mov	r3, r9
 800b470:	f7f4 fe7a 	bl	8000168 <__aeabi_dsub>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	2000      	movs	r0, #0
 800b47a:	4938      	ldr	r1, [pc, #224]	@ (800b55c <__ieee754_pow+0xa3c>)
 800b47c:	f7f4 fe74 	bl	8000168 <__aeabi_dsub>
 800b480:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b484:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b488:	da2e      	bge.n	800b4e8 <__ieee754_pow+0x9c8>
 800b48a:	4652      	mov	r2, sl
 800b48c:	f000 f870 	bl	800b570 <scalbn>
 800b490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b494:	f7ff bbed 	b.w	800ac72 <__ieee754_pow+0x152>
 800b498:	4c31      	ldr	r4, [pc, #196]	@ (800b560 <__ieee754_pow+0xa40>)
 800b49a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b49e:	42a3      	cmp	r3, r4
 800b4a0:	d91a      	bls.n	800b4d8 <__ieee754_pow+0x9b8>
 800b4a2:	4b30      	ldr	r3, [pc, #192]	@ (800b564 <__ieee754_pow+0xa44>)
 800b4a4:	440b      	add	r3, r1
 800b4a6:	4303      	orrs	r3, r0
 800b4a8:	d009      	beq.n	800b4be <__ieee754_pow+0x99e>
 800b4aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f7f5 fa83 	bl	80009bc <__aeabi_dcmplt>
 800b4b6:	3800      	subs	r0, #0
 800b4b8:	bf18      	it	ne
 800b4ba:	2001      	movne	r0, #1
 800b4bc:	e444      	b.n	800ad48 <__ieee754_pow+0x228>
 800b4be:	4642      	mov	r2, r8
 800b4c0:	464b      	mov	r3, r9
 800b4c2:	f7f4 fe51 	bl	8000168 <__aeabi_dsub>
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	f7f5 fa8b 	bl	80009e4 <__aeabi_dcmpge>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d1eb      	bne.n	800b4aa <__ieee754_pow+0x98a>
 800b4d2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b568 <__ieee754_pow+0xa48>
 800b4d6:	e6fd      	b.n	800b2d4 <__ieee754_pow+0x7b4>
 800b4d8:	469a      	mov	sl, r3
 800b4da:	4b24      	ldr	r3, [pc, #144]	@ (800b56c <__ieee754_pow+0xa4c>)
 800b4dc:	459a      	cmp	sl, r3
 800b4de:	f63f aef9 	bhi.w	800b2d4 <__ieee754_pow+0x7b4>
 800b4e2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b4e6:	e71b      	b.n	800b320 <__ieee754_pow+0x800>
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	e7d1      	b.n	800b490 <__ieee754_pow+0x970>
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	491b      	ldr	r1, [pc, #108]	@ (800b55c <__ieee754_pow+0xa3c>)
 800b4f0:	f7ff bb34 	b.w	800ab5c <__ieee754_pow+0x3c>
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	f7ff bb30 	b.w	800ab5c <__ieee754_pow+0x3c>
 800b4fc:	4650      	mov	r0, sl
 800b4fe:	4659      	mov	r1, fp
 800b500:	f7ff bb2c 	b.w	800ab5c <__ieee754_pow+0x3c>
 800b504:	460c      	mov	r4, r1
 800b506:	f7ff bb79 	b.w	800abfc <__ieee754_pow+0xdc>
 800b50a:	2400      	movs	r4, #0
 800b50c:	f7ff bb64 	b.w	800abd8 <__ieee754_pow+0xb8>
 800b510:	652b82fe 	.word	0x652b82fe
 800b514:	3c971547 	.word	0x3c971547
 800b518:	00000000 	.word	0x00000000
 800b51c:	3fe62e43 	.word	0x3fe62e43
 800b520:	fefa39ef 	.word	0xfefa39ef
 800b524:	3fe62e42 	.word	0x3fe62e42
 800b528:	0ca86c39 	.word	0x0ca86c39
 800b52c:	be205c61 	.word	0xbe205c61
 800b530:	72bea4d0 	.word	0x72bea4d0
 800b534:	3e663769 	.word	0x3e663769
 800b538:	c5d26bf1 	.word	0xc5d26bf1
 800b53c:	3ebbbd41 	.word	0x3ebbbd41
 800b540:	af25de2c 	.word	0xaf25de2c
 800b544:	3f11566a 	.word	0x3f11566a
 800b548:	16bebd93 	.word	0x16bebd93
 800b54c:	3f66c16c 	.word	0x3f66c16c
 800b550:	5555553e 	.word	0x5555553e
 800b554:	3fc55555 	.word	0x3fc55555
 800b558:	fff00000 	.word	0xfff00000
 800b55c:	3ff00000 	.word	0x3ff00000
 800b560:	4090cbff 	.word	0x4090cbff
 800b564:	3f6f3400 	.word	0x3f6f3400
 800b568:	4090cc00 	.word	0x4090cc00
 800b56c:	3fe00000 	.word	0x3fe00000

0800b570 <scalbn>:
 800b570:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b574:	4616      	mov	r6, r2
 800b576:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b57a:	4683      	mov	fp, r0
 800b57c:	468c      	mov	ip, r1
 800b57e:	460b      	mov	r3, r1
 800b580:	b982      	cbnz	r2, 800b5a4 <scalbn+0x34>
 800b582:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b586:	4303      	orrs	r3, r0
 800b588:	d039      	beq.n	800b5fe <scalbn+0x8e>
 800b58a:	4b2f      	ldr	r3, [pc, #188]	@ (800b648 <scalbn+0xd8>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	f7f4 ffa3 	bl	80004d8 <__aeabi_dmul>
 800b592:	4b2e      	ldr	r3, [pc, #184]	@ (800b64c <scalbn+0xdc>)
 800b594:	4683      	mov	fp, r0
 800b596:	429e      	cmp	r6, r3
 800b598:	468c      	mov	ip, r1
 800b59a:	da0d      	bge.n	800b5b8 <scalbn+0x48>
 800b59c:	a326      	add	r3, pc, #152	@ (adr r3, 800b638 <scalbn+0xc8>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	e01b      	b.n	800b5dc <scalbn+0x6c>
 800b5a4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b5a8:	42ba      	cmp	r2, r7
 800b5aa:	d109      	bne.n	800b5c0 <scalbn+0x50>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	f7f4 fddd 	bl	800016c <__adddf3>
 800b5b2:	4683      	mov	fp, r0
 800b5b4:	468c      	mov	ip, r1
 800b5b6:	e022      	b.n	800b5fe <scalbn+0x8e>
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b5be:	3a36      	subs	r2, #54	@ 0x36
 800b5c0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b5c4:	428e      	cmp	r6, r1
 800b5c6:	dd0c      	ble.n	800b5e2 <scalbn+0x72>
 800b5c8:	a31d      	add	r3, pc, #116	@ (adr r3, 800b640 <scalbn+0xd0>)
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	461c      	mov	r4, r3
 800b5d0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b5d4:	f361 74df 	bfi	r4, r1, #31, #1
 800b5d8:	4621      	mov	r1, r4
 800b5da:	481d      	ldr	r0, [pc, #116]	@ (800b650 <scalbn+0xe0>)
 800b5dc:	f7f4 ff7c 	bl	80004d8 <__aeabi_dmul>
 800b5e0:	e7e7      	b.n	800b5b2 <scalbn+0x42>
 800b5e2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b5e6:	4432      	add	r2, r6
 800b5e8:	428a      	cmp	r2, r1
 800b5ea:	dced      	bgt.n	800b5c8 <scalbn+0x58>
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	dd0a      	ble.n	800b606 <scalbn+0x96>
 800b5f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b5f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b5f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5fc:	46ac      	mov	ip, r5
 800b5fe:	4658      	mov	r0, fp
 800b600:	4661      	mov	r1, ip
 800b602:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b606:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b60a:	da09      	bge.n	800b620 <scalbn+0xb0>
 800b60c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b610:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b614:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b618:	480e      	ldr	r0, [pc, #56]	@ (800b654 <scalbn+0xe4>)
 800b61a:	f041 011f 	orr.w	r1, r1, #31
 800b61e:	e7bd      	b.n	800b59c <scalbn+0x2c>
 800b620:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b624:	3236      	adds	r2, #54	@ 0x36
 800b626:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b62a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b62e:	4658      	mov	r0, fp
 800b630:	4629      	mov	r1, r5
 800b632:	2200      	movs	r2, #0
 800b634:	4b08      	ldr	r3, [pc, #32]	@ (800b658 <scalbn+0xe8>)
 800b636:	e7d1      	b.n	800b5dc <scalbn+0x6c>
 800b638:	c2f8f359 	.word	0xc2f8f359
 800b63c:	01a56e1f 	.word	0x01a56e1f
 800b640:	8800759c 	.word	0x8800759c
 800b644:	7e37e43c 	.word	0x7e37e43c
 800b648:	43500000 	.word	0x43500000
 800b64c:	ffff3cb0 	.word	0xffff3cb0
 800b650:	8800759c 	.word	0x8800759c
 800b654:	c2f8f359 	.word	0xc2f8f359
 800b658:	3c900000 	.word	0x3c900000

0800b65c <with_errno>:
 800b65c:	b570      	push	{r4, r5, r6, lr}
 800b65e:	4604      	mov	r4, r0
 800b660:	460d      	mov	r5, r1
 800b662:	4616      	mov	r6, r2
 800b664:	f7fd fb96 	bl	8008d94 <__errno>
 800b668:	4629      	mov	r1, r5
 800b66a:	6006      	str	r6, [r0, #0]
 800b66c:	4620      	mov	r0, r4
 800b66e:	bd70      	pop	{r4, r5, r6, pc}

0800b670 <xflow>:
 800b670:	b513      	push	{r0, r1, r4, lr}
 800b672:	4604      	mov	r4, r0
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	b10c      	cbz	r4, 800b67e <xflow+0xe>
 800b67a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b67e:	e9cd 2300 	strd	r2, r3, [sp]
 800b682:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b686:	f7f4 ff27 	bl	80004d8 <__aeabi_dmul>
 800b68a:	2222      	movs	r2, #34	@ 0x22
 800b68c:	b002      	add	sp, #8
 800b68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b692:	f7ff bfe3 	b.w	800b65c <with_errno>

0800b696 <__math_uflow>:
 800b696:	2200      	movs	r2, #0
 800b698:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b69c:	f7ff bfe8 	b.w	800b670 <xflow>

0800b6a0 <__math_oflow>:
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b6a6:	f7ff bfe3 	b.w	800b670 <xflow>
	...

0800b6ac <_init>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	bf00      	nop
 800b6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b2:	bc08      	pop	{r3}
 800b6b4:	469e      	mov	lr, r3
 800b6b6:	4770      	bx	lr

0800b6b8 <_fini>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	bf00      	nop
 800b6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6be:	bc08      	pop	{r3}
 800b6c0:	469e      	mov	lr, r3
 800b6c2:	4770      	bx	lr
