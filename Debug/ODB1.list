
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c94  0800acb0  0800acb0  0000bcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b944  0800b944  0000d1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b944  0800b944  0000c944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b94c  0800b94c  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b94c  0800b94c  0000c94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b950  0800b950  0000c950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b954  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  200001ec  0800bb40  0000d1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800bb40  0000d738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007940  00000000  00000000  0000d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001362  00000000  00000000  00014b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000530  00000000  00000000  00015eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004f8  00000000  00000000  000163e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c5  00000000  00000000  000168df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cb1  00000000  00000000  00016ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000097fe  00000000  00000000  00019955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095653  00000000  00000000  00023153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b87a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002354  00000000  00000000  000b87ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ac98 	.word	0x0800ac98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800ac98 	.word	0x0800ac98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000ac8:	b510      	push	{r4, lr}
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 unsigned short offset = 0x00;

	if(pin > 7)
 8000aca:	2907      	cmp	r1, #7
 8000acc:	d904      	bls.n	8000ad8 <Init_GPIO+0x10>
		{
			tPIN -= 8;
 8000ace:	3908      	subs	r1, #8
 8000ad0:	b289      	uxth	r1, r1
			offset = 0x01;
 8000ad2:	f04f 0e01 	mov.w	lr, #1
 8000ad6:	e001      	b.n	8000adc <Init_GPIO+0x14>
 unsigned short offset = 0x00;
 8000ad8:	f04f 0e00 	mov.w	lr, #0
		}

	if(port == 1)
 8000adc:	2801      	cmp	r0, #1
 8000ade:	d00f      	beq.n	8000b00 <Init_GPIO+0x38>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d02d      	beq.n	8000b40 <Init_GPIO+0x78>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8000ae4:	2803      	cmp	r0, #3
 8000ae6:	d116      	bne.n	8000b16 <Init_GPIO+0x4e>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 8000ae8:	4c1b      	ldr	r4, [pc, #108]	@ (8000b58 <Init_GPIO+0x90>)
 8000aea:	69a0      	ldr	r0, [r4, #24]
 8000aec:	f040 0010 	orr.w	r0, r0, #16
 8000af0:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 8000af2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000af6:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8000afa:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 8000afe:	e00a      	b.n	8000b16 <Init_GPIO+0x4e>
			RCC_APB2ENR |= 4; //// Enabling PORT A
 8000b00:	4c15      	ldr	r4, [pc, #84]	@ (8000b58 <Init_GPIO+0x90>)
 8000b02:	69a0      	ldr	r0, [r4, #24]
 8000b04:	f040 0004 	orr.w	r0, r0, #4
 8000b08:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 8000b0a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b0e:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8000b12:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 8000b16:	f8dc 0000 	ldr.w	r0, [ip]
 8000b1a:	0089      	lsls	r1, r1, #2
 8000b1c:	f04f 0e0f 	mov.w	lr, #15
 8000b20:	fa0e fe01 	lsl.w	lr, lr, r1
 8000b24:	ea20 000e 	bic.w	r0, r0, lr
 8000b28:	f8cc 0000 	str.w	r0, [ip]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8000b2c:	f8dc 0000 	ldr.w	r0, [ip]
 8000b30:	408a      	lsls	r2, r1
 8000b32:	3102      	adds	r1, #2
 8000b34:	408b      	lsls	r3, r1
 8000b36:	431a      	orrs	r2, r3
 8000b38:	4302      	orrs	r2, r0
 8000b3a:	f8cc 2000 	str.w	r2, [ip]
}
 8000b3e:	bd10      	pop	{r4, pc}
			RCC_APB2ENR |= 8; //// Enabling PORT A
 8000b40:	4c05      	ldr	r4, [pc, #20]	@ (8000b58 <Init_GPIO+0x90>)
 8000b42:	69a0      	ldr	r0, [r4, #24]
 8000b44:	f040 0008 	orr.w	r0, r0, #8
 8000b48:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 8000b4a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b4e:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8000b52:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 8000b56:	e7de      	b.n	8000b16 <Init_GPIO+0x4e>
 8000b58:	40021000 	.word	0x40021000

08000b5c <Write_GPIO>:
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
 8000b5c:	2801      	cmp	r0, #1
 8000b5e:	d005      	beq.n	8000b6c <Write_GPIO+0x10>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8000b60:	2802      	cmp	r0, #2
 8000b62:	d00a      	beq.n	8000b7a <Write_GPIO+0x1e>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8000b64:	2803      	cmp	r0, #3
 8000b66:	d102      	bne.n	8000b6e <Write_GPIO+0x12>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <Write_GPIO+0x34>)
 8000b6a:	e000      	b.n	8000b6e <Write_GPIO+0x12>
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <Write_GPIO+0x38>)
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8000b6e:	b132      	cbz	r2, 8000b7e <Write_GPIO+0x22>
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	408a      	lsls	r2, r1
 8000b74:	4302      	orrs	r2, r0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	4770      	bx	lr
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <Write_GPIO+0x3c>)
 8000b7c:	e7f7      	b.n	8000b6e <Write_GPIO+0x12>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f101 	lsl.w	r1, r0, r1
 8000b86:	ea22 0201 	bic.w	r2, r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	4001100c 	.word	0x4001100c
 8000b94:	4001080c 	.word	0x4001080c
 8000b98:	40010c0c 	.word	0x40010c0c

08000b9c <SPI1_TX>:

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}

void SPI1_TX(uint8_t *data, int size) {
 8000b9c:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	e008      	b.n	8000bb4 <SPI1_TX+0x18>
        while (!(SPI1->SR & SPI_SR_TXE)) {}
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <SPI1_TX+0x38>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f013 0f02 	tst.w	r3, #2
 8000baa:	d0fa      	beq.n	8000ba2 <SPI1_TX+0x6>
        SPI1->DR = data[i];
 8000bac:	5c81      	ldrb	r1, [r0, r2]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <SPI1_TX+0x38>)
 8000bb0:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	4562      	cmp	r2, ip
 8000bb6:	dbf4      	blt.n	8000ba2 <SPI1_TX+0x6>
    }

    while (!(SPI1->SR & SPI_SR_TXE)) {}
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SPI1_TX+0x38>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f013 0f02 	tst.w	r3, #2
 8000bc0:	d0fa      	beq.n	8000bb8 <SPI1_TX+0x1c>
    while (SPI1->SR & SPI_SR_BSY) {}
 8000bc2:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <SPI1_TX+0x38>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000bca:	d1fa      	bne.n	8000bc2 <SPI1_TX+0x26>

    uint8_t temp = SPI1->DR;
 8000bcc:	4b01      	ldr	r3, [pc, #4]	@ (8000bd4 <SPI1_TX+0x38>)
 8000bce:	68da      	ldr	r2, [r3, #12]
    temp = SPI1->SR;
 8000bd0:	689b      	ldr	r3, [r3, #8]
}
 8000bd2:	4770      	bx	lr
 8000bd4:	40013000 	.word	0x40013000

08000bd8 <SPI1_RX>:
    temp = SPI2->SR;
}

void SPI1_RX(uint8_t *data, int size) {

    while (size) {
 8000bd8:	e011      	b.n	8000bfe <SPI1_RX+0x26>
        while (SPI1->SR & SPI_SR_BSY) {}
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <SPI1_RX+0x2c>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000be2:	d1fa      	bne.n	8000bda <SPI1_RX+0x2>
        SPI1->DR = 0;
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <SPI1_RX+0x2c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
        while (!(SPI1->SR & SPI_SR_RXNE)) {}
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SPI1_RX+0x2c>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f013 0f01 	tst.w	r3, #1
 8000bf2:	d0fa      	beq.n	8000bea <SPI1_RX+0x12>
        *data++ = SPI1->DR;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <SPI1_RX+0x2c>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 8000bfc:	3901      	subs	r1, #1
    while (size) {
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d1eb      	bne.n	8000bda <SPI1_RX+0x2>
    }
}
 8000c02:	4770      	bx	lr
 8000c04:	40013000 	.word	0x40013000

08000c08 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c10:	f013 0f01 	tst.w	r3, #1
 8000c14:	d011      	beq.n	8000c3a <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c16:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c1a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c1e:	f013 0f01 	tst.w	r3, #1
 8000c22:	d101      	bne.n	8000c28 <ITM_SendChar+0x20>
 8000c24:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8000c26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f9      	beq.n	8000c26 <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c32:	b2c3      	uxtb	r3, r0
 8000c34:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000c38:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8000c3a:	4770      	bx	lr

08000c3c <SD_Card_Test>:

	return behavior;
}

static void SD_Card_Test(void)
{
 8000c3c:	b530      	push	{r4, r5, lr}
 8000c3e:	f5ad 5d04 	sub.w	sp, sp, #8448	@ 0x2100
 8000c42:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, "", 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	4969      	ldr	r1, [pc, #420]	@ (8000dec <SD_Card_Test+0x1b0>)
 8000c48:	f50d 5088 	add.w	r0, sp, #4352	@ 0x1100
 8000c4c:	3008      	adds	r0, #8
 8000c4e:	f005 fd6f 	bl	8006730 <f_mount>
    if (FR_Status != FR_OK)
 8000c52:	b198      	cbz	r0, 8000c7c <SD_Card_Test+0x40>
 8000c54:	4601      	mov	r1, r0
    {
      printf("Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000c56:	4866      	ldr	r0, [pc, #408]	@ (8000df0 <SD_Card_Test+0x1b4>)
 8000c58:	f008 f8f8 	bl	8008e4c <iprintf>
        UART_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4963      	ldr	r1, [pc, #396]	@ (8000dec <SD_Card_Test+0x1b0>)
 8000c60:	4610      	mov	r0, r2
 8000c62:	f005 fd65 	bl	8006730 <f_mount>
  if (FR_Status != FR_OK)
 8000c66:	4601      	mov	r1, r0
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	f000 80bb 	beq.w	8000de4 <SD_Card_Test+0x1a8>
  {
      printf("Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000c6e:	4861      	ldr	r0, [pc, #388]	@ (8000df4 <SD_Card_Test+0x1b8>)
 8000c70:	f008 f8ec 	bl	8008e4c <iprintf>
  } else{
      printf("SD Card Un-mounted Successfully! \r\n");
  }
}
 8000c74:	f50d 5d04 	add.w	sp, sp, #8448	@ 0x2100
 8000c78:	b00f      	add	sp, #60	@ 0x3c
 8000c7a:	bd30      	pop	{r4, r5, pc}
    printf("SD Card Mounted Successfully! \r\n\n");
 8000c7c:	485e      	ldr	r0, [pc, #376]	@ (8000df8 <SD_Card_Test+0x1bc>)
 8000c7e:	f008 f94d 	bl	8008f1c <puts>
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000c82:	ab3e      	add	r3, sp, #248	@ 0xf8
 8000c84:	aa36      	add	r2, sp, #216	@ 0xd8
 8000c86:	f1a3 012c 	sub.w	r1, r3, #44	@ 0x2c
 8000c8a:	4858      	ldr	r0, [pc, #352]	@ (8000dec <SD_Card_Test+0x1b0>)
 8000c8c:	f007 f8b9 	bl	8007e02 <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000c90:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8000c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c96:	6958      	ldr	r0, [r3, #20]
 8000c98:	3802      	subs	r0, #2
 8000c9a:	789c      	ldrb	r4, [r3, #2]
 8000c9c:	fb04 f000 	mul.w	r0, r4, r0
 8000ca0:	f7ff fba0 	bl	80003e4 <__aeabi_ui2d>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4b55      	ldr	r3, [pc, #340]	@ (8000dfc <SD_Card_Test+0x1c0>)
 8000ca8:	f7ff fc16 	bl	80004d8 <__aeabi_dmul>
 8000cac:	f7ff feec 	bl	8000a88 <__aeabi_d2uiz>
 8000cb0:	4605      	mov	r5, r0
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000cb2:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8000cb4:	fb04 f000 	mul.w	r0, r4, r0
 8000cb8:	f7ff fb94 	bl	80003e4 <__aeabi_ui2d>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000dfc <SD_Card_Test+0x1c0>)
 8000cc0:	f7ff fc0a 	bl	80004d8 <__aeabi_dmul>
 8000cc4:	f7ff fee0 	bl	8000a88 <__aeabi_d2uiz>
 8000cc8:	4604      	mov	r4, r0
    printf("Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000cca:	4629      	mov	r1, r5
 8000ccc:	484c      	ldr	r0, [pc, #304]	@ (8000e00 <SD_Card_Test+0x1c4>)
 8000cce:	f008 f8bd 	bl	8008e4c <iprintf>
    printf("Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000cd2:	4621      	mov	r1, r4
 8000cd4:	484b      	ldr	r0, [pc, #300]	@ (8000e04 <SD_Card_Test+0x1c8>)
 8000cd6:	f008 f8b9 	bl	8008e4c <iprintf>
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000cda:	220b      	movs	r2, #11
 8000cdc:	494a      	ldr	r1, [pc, #296]	@ (8000e08 <SD_Card_Test+0x1cc>)
 8000cde:	a837      	add	r0, sp, #220	@ 0xdc
 8000ce0:	f005 fd70 	bl	80067c4 <f_open>
    if(FR_Status != FR_OK)
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	b118      	cbz	r0, 8000cf0 <SD_Card_Test+0xb4>
      printf("Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000ce8:	4848      	ldr	r0, [pc, #288]	@ (8000e0c <SD_Card_Test+0x1d0>)
 8000cea:	f008 f8af 	bl	8008e4c <iprintf>
      break;
 8000cee:	e7b5      	b.n	8000c5c <SD_Card_Test+0x20>
    printf("Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000cf0:	4847      	ldr	r0, [pc, #284]	@ (8000e10 <SD_Card_Test+0x1d4>)
 8000cf2:	f008 f913 	bl	8008f1c <puts>
    f_puts("Hello! From STM32 To SD Card Over SPI, Using f_puts()\n", &Fil);
 8000cf6:	a937      	add	r1, sp, #220	@ 0xdc
 8000cf8:	4846      	ldr	r0, [pc, #280]	@ (8000e14 <SD_Card_Test+0x1d8>)
 8000cfa:	f007 f9d7 	bl	80080ac <f_puts>
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SPI, Using f_write()\r\n");
 8000cfe:	f10d 0c04 	add.w	ip, sp, #4
 8000d02:	4c45      	ldr	r4, [pc, #276]	@ (8000e18 <SD_Card_Test+0x1dc>)
 8000d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d16:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d1a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8000d1e:	f88c 2000 	strb.w	r2, [ip]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000d22:	a801      	add	r0, sp, #4
 8000d24:	f7ff fa14 	bl	8000150 <strlen>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	ab34      	add	r3, sp, #208	@ 0xd0
 8000d2c:	a901      	add	r1, sp, #4
 8000d2e:	a837      	add	r0, sp, #220	@ 0xdc
 8000d30:	f006 fa44 	bl	80071bc <f_write>
    f_close(&Fil);
 8000d34:	a837      	add	r0, sp, #220	@ 0xdc
 8000d36:	f006 fd48 	bl	80077ca <f_close>
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4932      	ldr	r1, [pc, #200]	@ (8000e08 <SD_Card_Test+0x1cc>)
 8000d3e:	a837      	add	r0, sp, #220	@ 0xdc
 8000d40:	f005 fd40 	bl	80067c4 <f_open>
    if(FR_Status != FR_OK)
 8000d44:	b118      	cbz	r0, 8000d4e <SD_Card_Test+0x112>
      printf("Error! While Opening (TextFileWrite.txt) File For Read.. \r\n");
 8000d46:	4835      	ldr	r0, [pc, #212]	@ (8000e1c <SD_Card_Test+0x1e0>)
 8000d48:	f008 f8e8 	bl	8008f1c <puts>
      break;
 8000d4c:	e786      	b.n	8000c5c <SD_Card_Test+0x20>
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8000d4e:	aa37      	add	r2, sp, #220	@ 0xdc
 8000d50:	21c8      	movs	r1, #200	@ 0xc8
 8000d52:	a801      	add	r0, sp, #4
 8000d54:	f007 f92f 	bl	8007fb6 <f_gets>
    printf("Data Read From (TextFileWrite.txt) Using f_gets():%s", RW_Buffer);
 8000d58:	a901      	add	r1, sp, #4
 8000d5a:	4831      	ldr	r0, [pc, #196]	@ (8000e20 <SD_Card_Test+0x1e4>)
 8000d5c:	f008 f876 	bl	8008e4c <iprintf>
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000d60:	ac4e      	add	r4, sp, #312	@ 0x138
 8000d62:	ab35      	add	r3, sp, #212	@ 0xd4
 8000d64:	f8d4 2fb0 	ldr.w	r2, [r4, #4016]	@ 0xfb0
 8000d68:	a901      	add	r1, sp, #4
 8000d6a:	a837      	add	r0, sp, #220	@ 0xdc
 8000d6c:	f006 f83e 	bl	8006dec <f_read>
    printf("Data Read From (TextFileWrite.txt) Using f_read():%s", RW_Buffer);
 8000d70:	a901      	add	r1, sp, #4
 8000d72:	482c      	ldr	r0, [pc, #176]	@ (8000e24 <SD_Card_Test+0x1e8>)
 8000d74:	f008 f86a 	bl	8008e4c <iprintf>
    f_close(&Fil);
 8000d78:	a837      	add	r0, sp, #220	@ 0xdc
 8000d7a:	f006 fd26 	bl	80077ca <f_close>
    printf("File Closed! \r\n\n");
 8000d7e:	482a      	ldr	r0, [pc, #168]	@ (8000e28 <SD_Card_Test+0x1ec>)
 8000d80:	f008 f8cc 	bl	8008f1c <puts>
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_OPEN_EXISTING | FA_WRITE);
 8000d84:	2202      	movs	r2, #2
 8000d86:	4920      	ldr	r1, [pc, #128]	@ (8000e08 <SD_Card_Test+0x1cc>)
 8000d88:	a837      	add	r0, sp, #220	@ 0xdc
 8000d8a:	f005 fd1b 	bl	80067c4 <f_open>
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8000d8e:	f8d4 1fb0 	ldr.w	r1, [r4, #4016]	@ 0xfb0
 8000d92:	a837      	add	r0, sp, #220	@ 0xdc
 8000d94:	f006 fd44 	bl	8007820 <f_lseek>
    if(FR_Status != FR_OK)
 8000d98:	b118      	cbz	r0, 8000da2 <SD_Card_Test+0x166>
      printf("Error! While Opening (TextFileWrite.txt) File For Update.. \r\n");
 8000d9a:	4824      	ldr	r0, [pc, #144]	@ (8000e2c <SD_Card_Test+0x1f0>)
 8000d9c:	f008 f8be 	bl	8008f1c <puts>
      break;
 8000da0:	e75c      	b.n	8000c5c <SD_Card_Test+0x20>
    FR_Status = f_puts("This New Line Was Added During Update!\r\n", &Fil);
 8000da2:	a937      	add	r1, sp, #220	@ 0xdc
 8000da4:	4822      	ldr	r0, [pc, #136]	@ (8000e30 <SD_Card_Test+0x1f4>)
 8000da6:	f007 f981 	bl	80080ac <f_puts>
    f_close(&Fil);
 8000daa:	a837      	add	r0, sp, #220	@ 0xdc
 8000dac:	f006 fd0d 	bl	80077ca <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 8000db0:	22c8      	movs	r2, #200	@ 0xc8
 8000db2:	2100      	movs	r1, #0
 8000db4:	a801      	add	r0, sp, #4
 8000db6:	f008 f991 	bl	80090dc <memset>
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ); // Open The File For Read
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4912      	ldr	r1, [pc, #72]	@ (8000e08 <SD_Card_Test+0x1cc>)
 8000dbe:	a837      	add	r0, sp, #220	@ 0xdc
 8000dc0:	f005 fd00 	bl	80067c4 <f_open>
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000dc4:	ab35      	add	r3, sp, #212	@ 0xd4
 8000dc6:	aa4e      	add	r2, sp, #312	@ 0x138
 8000dc8:	f8d2 2fb0 	ldr.w	r2, [r2, #4016]	@ 0xfb0
 8000dcc:	a901      	add	r1, sp, #4
 8000dce:	a837      	add	r0, sp, #220	@ 0xdc
 8000dd0:	f006 f80c 	bl	8006dec <f_read>
    printf("Data Read From (TextFileWrite.txt) After Update:%s", RW_Buffer);
 8000dd4:	a901      	add	r1, sp, #4
 8000dd6:	4817      	ldr	r0, [pc, #92]	@ (8000e34 <SD_Card_Test+0x1f8>)
 8000dd8:	f008 f838 	bl	8008e4c <iprintf>
    f_close(&Fil);
 8000ddc:	a837      	add	r0, sp, #220	@ 0xdc
 8000dde:	f006 fcf4 	bl	80077ca <f_close>
 8000de2:	e73b      	b.n	8000c5c <SD_Card_Test+0x20>
      printf("SD Card Un-mounted Successfully! \r\n");
 8000de4:	4814      	ldr	r0, [pc, #80]	@ (8000e38 <SD_Card_Test+0x1fc>)
 8000de6:	f008 f899 	bl	8008f1c <puts>
}
 8000dea:	e743      	b.n	8000c74 <SD_Card_Test+0x38>
 8000dec:	0800ad90 	.word	0x0800ad90
 8000df0:	0800acf8 	.word	0x0800acf8
 8000df4:	0800affc 	.word	0x0800affc
 8000df8:	0800ad2c 	.word	0x0800ad2c
 8000dfc:	3fe00000 	.word	0x3fe00000
 8000e00:	0800ad50 	.word	0x0800ad50
 8000e04:	0800ad70 	.word	0x0800ad70
 8000e08:	0800ad94 	.word	0x0800ad94
 8000e0c:	0800ada8 	.word	0x0800ada8
 8000e10:	0800adec 	.word	0x0800adec
 8000e14:	0800ae2c 	.word	0x0800ae2c
 8000e18:	0800ae64 	.word	0x0800ae64
 8000e1c:	0800aea0 	.word	0x0800aea0
 8000e20:	0800aedc 	.word	0x0800aedc
 8000e24:	0800af14 	.word	0x0800af14
 8000e28:	0800af4c 	.word	0x0800af4c
 8000e2c:	0800af5c 	.word	0x0800af5c
 8000e30:	0800af9c 	.word	0x0800af9c
 8000e34:	0800afc8 	.word	0x0800afc8
 8000e38:	0800b034 	.word	0x0800b034

08000e3c <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	460c      	mov	r4, r1
 8000e40:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	2500      	movs	r5, #0
 8000e44:	e004      	b.n	8000e50 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 8000e46:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000e4a:	f7ff fedd 	bl	8000c08 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	3501      	adds	r5, #1
 8000e50:	42b5      	cmp	r5, r6
 8000e52:	dbf8      	blt.n	8000e46 <_write+0xa>
	}
	return len;
}
 8000e54:	4630      	mov	r0, r6
 8000e56:	bd70      	pop	{r4, r5, r6, pc}

08000e58 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <Error_Handler+0x2>

08000e5c <MX_USART1_UART_Init>:
{
 8000e5c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <MX_USART1_UART_Init+0x2c>)
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <MX_USART1_UART_Init+0x30>)
 8000e62:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8000e64:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e68:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e6e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e70:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e72:	220c      	movs	r2, #12
 8000e74:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7a:	f002 fa13 	bl	80032a4 <HAL_UART_Init>
 8000e7e:	b900      	cbnz	r0, 8000e82 <MX_USART1_UART_Init+0x26>
}
 8000e80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e82:	f7ff ffe9 	bl	8000e58 <Error_Handler>
 8000e86:	bf00      	nop
 8000e88:	20000298 	.word	0x20000298
 8000e8c:	40013800 	.word	0x40013800

08000e90 <MX_USART2_UART_Init>:
{
 8000e90:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000e92:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <MX_USART2_UART_Init+0x2c>)
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <MX_USART2_UART_Init+0x30>)
 8000e96:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8000e98:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e9c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eae:	f002 f9f9 	bl	80032a4 <HAL_UART_Init>
 8000eb2:	b900      	cbnz	r0, 8000eb6 <MX_USART2_UART_Init+0x26>
}
 8000eb4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000eb6:	f7ff ffcf 	bl	8000e58 <Error_Handler>
 8000eba:	bf00      	nop
 8000ebc:	20000250 	.word	0x20000250
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <MX_USART3_UART_Init>:
{
 8000ec4:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8000ec6:	480a      	ldr	r0, [pc, #40]	@ (8000ef0 <MX_USART3_UART_Init+0x2c>)
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_USART3_UART_Init+0x30>)
 8000eca:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8000ecc:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000ed0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eda:	220c      	movs	r2, #12
 8000edc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ee2:	f002 f9df 	bl	80032a4 <HAL_UART_Init>
 8000ee6:	b900      	cbnz	r0, 8000eea <MX_USART3_UART_Init+0x26>
}
 8000ee8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000eea:	f7ff ffb5 	bl	8000e58 <Error_Handler>
 8000eee:	bf00      	nop
 8000ef0:	20000208 	.word	0x20000208
 8000ef4:	40004800 	.word	0x40004800

08000ef8 <MX_TIM3_Init>:
{
 8000ef8:	b500      	push	{lr}
 8000efa:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efc:	2300      	movs	r3, #0
 8000efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8000f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000f02:	930c      	str	r3, [sp, #48]	@ 0x30
 8000f04:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f06:	9308      	str	r3, [sp, #32]
 8000f08:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	9303      	str	r3, [sp, #12]
 8000f10:	9304      	str	r3, [sp, #16]
 8000f12:	9305      	str	r3, [sp, #20]
 8000f14:	9306      	str	r3, [sp, #24]
 8000f16:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8000f18:	481e      	ldr	r0, [pc, #120]	@ (8000f94 <MX_TIM3_Init+0x9c>)
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <MX_TIM3_Init+0xa0>)
 8000f1c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 8000f1e:	227f      	movs	r2, #127	@ 0x7f
 8000f20:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 8000f24:	2214      	movs	r2, #20
 8000f26:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f2c:	f001 fcaa 	bl	8002884 <HAL_TIM_Base_Init>
 8000f30:	bb28      	cbnz	r0, 8000f7e <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f38:	a90a      	add	r1, sp, #40	@ 0x28
 8000f3a:	4816      	ldr	r0, [pc, #88]	@ (8000f94 <MX_TIM3_Init+0x9c>)
 8000f3c:	f001 fe0c 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 8000f40:	b9f8      	cbnz	r0, 8000f82 <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f42:	4814      	ldr	r0, [pc, #80]	@ (8000f94 <MX_TIM3_Init+0x9c>)
 8000f44:	f001 fced 	bl	8002922 <HAL_TIM_PWM_Init>
 8000f48:	b9e8      	cbnz	r0, 8000f86 <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f50:	a908      	add	r1, sp, #32
 8000f52:	4810      	ldr	r0, [pc, #64]	@ (8000f94 <MX_TIM3_Init+0x9c>)
 8000f54:	f002 f948 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	b9b8      	cbnz	r0, 8000f8a <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	@ 0x60
 8000f5c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f64:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f66:	220c      	movs	r2, #12
 8000f68:	a901      	add	r1, sp, #4
 8000f6a:	480a      	ldr	r0, [pc, #40]	@ (8000f94 <MX_TIM3_Init+0x9c>)
 8000f6c:	f001 fd32 	bl	80029d4 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	b968      	cbnz	r0, 8000f8e <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8000f72:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <MX_TIM3_Init+0x9c>)
 8000f74:	f000 f96a 	bl	800124c <HAL_TIM_MspPostInit>
}
 8000f78:	b00f      	add	sp, #60	@ 0x3c
 8000f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f7e:	f7ff ff6b 	bl	8000e58 <Error_Handler>
    Error_Handler();
 8000f82:	f7ff ff69 	bl	8000e58 <Error_Handler>
    Error_Handler();
 8000f86:	f7ff ff67 	bl	8000e58 <Error_Handler>
    Error_Handler();
 8000f8a:	f7ff ff65 	bl	8000e58 <Error_Handler>
    Error_Handler();
 8000f8e:	f7ff ff63 	bl	8000e58 <Error_Handler>
 8000f92:	bf00      	nop
 8000f94:	200002e0 	.word	0x200002e0
 8000f98:	40000400 	.word	0x40000400

08000f9c <MX_TIM2_Init>:
{
 8000f9c:	b500      	push	{lr}
 8000f9e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	9303      	str	r3, [sp, #12]
 8000fa6:	9304      	str	r3, [sp, #16]
 8000fa8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8000fae:	4814      	ldr	r0, [pc, #80]	@ (8001000 <MX_TIM2_Init+0x64>)
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 8000fb6:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8000fba:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8000fbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fc2:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc8:	f001 fc5c 	bl	8002884 <HAL_TIM_Base_Init>
 8000fcc:	b990      	cbnz	r0, 8000ff4 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd4:	a902      	add	r1, sp, #8
 8000fd6:	480a      	ldr	r0, [pc, #40]	@ (8001000 <MX_TIM2_Init+0x64>)
 8000fd8:	f001 fdbe 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 8000fdc:	b960      	cbnz	r0, 8000ff8 <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	4669      	mov	r1, sp
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <MX_TIM2_Init+0x64>)
 8000fe8:	f002 f8fe 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	b930      	cbnz	r0, 8000ffc <MX_TIM2_Init+0x60>
}
 8000fee:	b007      	add	sp, #28
 8000ff0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ff4:	f7ff ff30 	bl	8000e58 <Error_Handler>
    Error_Handler();
 8000ff8:	f7ff ff2e 	bl	8000e58 <Error_Handler>
    Error_Handler();
 8000ffc:	f7ff ff2c 	bl	8000e58 <Error_Handler>
 8001000:	20000328 	.word	0x20000328

08001004 <MX_ADC1_Init>:
{
 8001004:	b500      	push	{lr}
 8001006:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001008:	2300      	movs	r3, #0
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8001010:	480f      	ldr	r0, [pc, #60]	@ (8001050 <MX_ADC1_Init+0x4c>)
 8001012:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <MX_ADC1_Init+0x50>)
 8001014:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001016:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001018:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001020:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001024:	2301      	movs	r3, #1
 8001026:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001028:	f000 face 	bl	80015c8 <HAL_ADC_Init>
 800102c:	b960      	cbnz	r0, 8001048 <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 800102e:	2300      	movs	r3, #0
 8001030:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001032:	2201      	movs	r2, #1
 8001034:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001036:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	a901      	add	r1, sp, #4
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_ADC1_Init+0x4c>)
 800103c:	f000 fb9c 	bl	8001778 <HAL_ADC_ConfigChannel>
 8001040:	b920      	cbnz	r0, 800104c <MX_ADC1_Init+0x48>
}
 8001042:	b005      	add	sp, #20
 8001044:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001048:	f7ff ff06 	bl	8000e58 <Error_Handler>
    Error_Handler();
 800104c:	f7ff ff04 	bl	8000e58 <Error_Handler>
 8001050:	20000378 	.word	0x20000378
 8001054:	40012400 	.word	0x40012400

08001058 <MX_CRC_Init>:
{
 8001058:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800105a:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_CRC_Init+0x14>)
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <MX_CRC_Init+0x18>)
 800105e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001060:	f000 fda7 	bl	8001bb2 <HAL_CRC_Init>
 8001064:	b900      	cbnz	r0, 8001068 <MX_CRC_Init+0x10>
}
 8001066:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001068:	f7ff fef6 	bl	8000e58 <Error_Handler>
 800106c:	20000370 	.word	0x20000370
 8001070:	40023000 	.word	0x40023000

08001074 <SystemClock_Config>:
{
 8001074:	b500      	push	{lr}
 8001076:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001078:	2228      	movs	r2, #40	@ 0x28
 800107a:	2100      	movs	r1, #0
 800107c:	eb0d 0002 	add.w	r0, sp, r2
 8001080:	f008 f82c 	bl	80090dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	2300      	movs	r3, #0
 8001086:	9305      	str	r3, [sp, #20]
 8001088:	9306      	str	r3, [sp, #24]
 800108a:	9307      	str	r3, [sp, #28]
 800108c:	9308      	str	r3, [sp, #32]
 800108e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	9303      	str	r3, [sp, #12]
 8001096:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2201      	movs	r2, #1
 800109a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a0:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80010a2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80010a6:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2202      	movs	r2, #2
 80010ac:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010b4:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	a80a      	add	r0, sp, #40	@ 0x28
 80010b8:	f000 ff1c 	bl	8001ef4 <HAL_RCC_OscConfig>
 80010bc:	b9c8      	cbnz	r0, 80010f2 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2102      	movs	r1, #2
 80010c4:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ce:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d2:	a805      	add	r0, sp, #20
 80010d4:	f001 f990 	bl	80023f8 <HAL_RCC_ClockConfig>
 80010d8:	b968      	cbnz	r0, 80010f6 <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010da:	2302      	movs	r3, #2
 80010dc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010e2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e4:	a801      	add	r0, sp, #4
 80010e6:	f001 fb17 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	b930      	cbnz	r0, 80010fa <SystemClock_Config+0x86>
}
 80010ec:	b015      	add	sp, #84	@ 0x54
 80010ee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010f2:	f7ff feb1 	bl	8000e58 <Error_Handler>
    Error_Handler();
 80010f6:	f7ff feaf 	bl	8000e58 <Error_Handler>
    Error_Handler();
 80010fa:	f7ff fead 	bl	8000e58 <Error_Handler>

080010fe <main>:
{
 80010fe:	b508      	push	{r3, lr}
  HAL_Init();
 8001100:	f000 fa00 	bl	8001504 <HAL_Init>
  SystemClock_Config();
 8001104:	f7ff ffb6 	bl	8001074 <SystemClock_Config>
  MX_USART1_UART_Init();
 8001108:	f7ff fea8 	bl	8000e5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800110c:	f7ff fec0 	bl	8000e90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001110:	f7ff fed8 	bl	8000ec4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001114:	f7ff fef0 	bl	8000ef8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001118:	f7ff ff40 	bl	8000f9c <MX_TIM2_Init>
  MX_ADC1_Init();
 800111c:	f7ff ff72 	bl	8001004 <MX_ADC1_Init>
  MX_CRC_Init();
 8001120:	f7ff ff9a 	bl	8001058 <MX_CRC_Init>
  MX_FATFS_Init();
 8001124:	f002 f99c 	bl	8003460 <MX_FATFS_Init>
  SD_Card_Test();
 8001128:	f7ff fd88 	bl	8000c3c <SD_Card_Test>
	while (1)
 800112c:	e7fe      	b.n	800112c <main+0x2e>
	...

08001130 <HAL_MspInit>:
 8001130:	b082      	sub	sp, #8
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_MspInit+0x3c>)
 8001134:	699a      	ldr	r2, [r3, #24]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	f002 0201 	and.w	r2, r2, #1
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	9a00      	ldr	r2, [sp, #0]
 8001146:	69da      	ldr	r2, [r3, #28]
 8001148:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800114c:	61da      	str	r2, [r3, #28]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9b01      	ldr	r3, [sp, #4]
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_MspInit+0x40>)
 800115a:	6853      	ldr	r3, [r2, #4]
 800115c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001164:	6053      	str	r3, [r2, #4]
 8001166:	b002      	add	sp, #8
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000

08001174 <HAL_ADC_MspInit>:
 8001174:	b500      	push	{lr}
 8001176:	b087      	sub	sp, #28
 8001178:	2300      	movs	r3, #0
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	9303      	str	r3, [sp, #12]
 800117e:	9304      	str	r3, [sp, #16]
 8001180:	9305      	str	r3, [sp, #20]
 8001182:	6802      	ldr	r2, [r0, #0]
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_ADC_MspInit+0x58>)
 8001186:	429a      	cmp	r2, r3
 8001188:	d002      	beq.n	8001190 <HAL_ADC_MspInit+0x1c>
 800118a:	b007      	add	sp, #28
 800118c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001190:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800119a:	619a      	str	r2, [r3, #24]
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	9a00      	ldr	r2, [sp, #0]
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	f042 0204 	orr.w	r2, r2, #4
 80011ac:	619a      	str	r2, [r3, #24]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	9b01      	ldr	r3, [sp, #4]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	2303      	movs	r3, #3
 80011be:	9303      	str	r3, [sp, #12]
 80011c0:	a902      	add	r1, sp, #8
 80011c2:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <HAL_ADC_MspInit+0x5c>)
 80011c4:	f000 fd12 	bl	8001bec <HAL_GPIO_Init>
 80011c8:	e7df      	b.n	800118a <HAL_ADC_MspInit+0x16>
 80011ca:	bf00      	nop
 80011cc:	40012400 	.word	0x40012400
 80011d0:	40010800 	.word	0x40010800

080011d4 <HAL_CRC_MspInit>:
 80011d4:	6802      	ldr	r2, [r0, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_CRC_MspInit+0x28>)
 80011d8:	429a      	cmp	r2, r3
 80011da:	d000      	beq.n	80011de <HAL_CRC_MspInit+0xa>
 80011dc:	4770      	bx	lr
 80011de:	b082      	sub	sp, #8
 80011e0:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	9b01      	ldr	r3, [sp, #4]
 80011f6:	b002      	add	sp, #8
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023000 	.word	0x40023000

08001200 <HAL_TIM_Base_MspInit>:
 8001200:	b082      	sub	sp, #8
 8001202:	6803      	ldr	r3, [r0, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001208:	d004      	beq.n	8001214 <HAL_TIM_Base_MspInit+0x14>
 800120a:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <HAL_TIM_Base_MspInit+0x44>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_TIM_Base_MspInit+0x2c>
 8001210:	b002      	add	sp, #8
 8001212:	4770      	bx	lr
 8001214:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	61da      	str	r2, [r3, #28]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	9b00      	ldr	r3, [sp, #0]
 800122a:	e7f1      	b.n	8001210 <HAL_TIM_Base_MspInit+0x10>
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_TIM_Base_MspInit+0x48>)
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	f042 0202 	orr.w	r2, r2, #2
 8001234:	61da      	str	r2, [r3, #28]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	e7e6      	b.n	8001210 <HAL_TIM_Base_MspInit+0x10>
 8001242:	bf00      	nop
 8001244:	40000400 	.word	0x40000400
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_TIM_MspPostInit>:
 800124c:	b500      	push	{lr}
 800124e:	b087      	sub	sp, #28
 8001250:	2300      	movs	r3, #0
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	9303      	str	r3, [sp, #12]
 8001256:	9304      	str	r3, [sp, #16]
 8001258:	9305      	str	r3, [sp, #20]
 800125a:	6802      	ldr	r2, [r0, #0]
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <HAL_TIM_MspPostInit+0x44>)
 800125e:	429a      	cmp	r2, r3
 8001260:	d002      	beq.n	8001268 <HAL_TIM_MspPostInit+0x1c>
 8001262:	b007      	add	sp, #28
 8001264:	f85d fb04 	ldr.w	pc, [sp], #4
 8001268:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	f042 0208 	orr.w	r2, r2, #8
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	2302      	movs	r3, #2
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	9303      	str	r3, [sp, #12]
 8001284:	9305      	str	r3, [sp, #20]
 8001286:	a902      	add	r1, sp, #8
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <HAL_TIM_MspPostInit+0x48>)
 800128a:	f000 fcaf 	bl	8001bec <HAL_GPIO_Init>
 800128e:	e7e8      	b.n	8001262 <HAL_TIM_MspPostInit+0x16>
 8001290:	40000400 	.word	0x40000400
 8001294:	40010c00 	.word	0x40010c00

08001298 <HAL_UART_MspInit>:
 8001298:	b510      	push	{r4, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	2300      	movs	r3, #0
 800129e:	9306      	str	r3, [sp, #24]
 80012a0:	9307      	str	r3, [sp, #28]
 80012a2:	9308      	str	r3, [sp, #32]
 80012a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80012a6:	6803      	ldr	r3, [r0, #0]
 80012a8:	4a45      	ldr	r2, [pc, #276]	@ (80013c0 <HAL_UART_MspInit+0x128>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_UART_MspInit+0x26>
 80012ae:	4a45      	ldr	r2, [pc, #276]	@ (80013c4 <HAL_UART_MspInit+0x12c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d033      	beq.n	800131c <HAL_UART_MspInit+0x84>
 80012b4:	4a44      	ldr	r2, [pc, #272]	@ (80013c8 <HAL_UART_MspInit+0x130>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d058      	beq.n	800136c <HAL_UART_MspInit+0xd4>
 80012ba:	b00a      	add	sp, #40	@ 0x28
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	4b43      	ldr	r3, [pc, #268]	@ (80013cc <HAL_UART_MspInit+0x134>)
 80012c0:	699a      	ldr	r2, [r3, #24]
 80012c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	699a      	ldr	r2, [r3, #24]
 80012ca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012ce:	9200      	str	r2, [sp, #0]
 80012d0:	9a00      	ldr	r2, [sp, #0]
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	f042 0208 	orr.w	r2, r2, #8
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	2340      	movs	r3, #64	@ 0x40
 80012e6:	9306      	str	r3, [sp, #24]
 80012e8:	2302      	movs	r3, #2
 80012ea:	9307      	str	r3, [sp, #28]
 80012ec:	2303      	movs	r3, #3
 80012ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80012f0:	4c37      	ldr	r4, [pc, #220]	@ (80013d0 <HAL_UART_MspInit+0x138>)
 80012f2:	a906      	add	r1, sp, #24
 80012f4:	4620      	mov	r0, r4
 80012f6:	f000 fc79 	bl	8001bec <HAL_GPIO_Init>
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	9306      	str	r3, [sp, #24]
 80012fe:	2300      	movs	r3, #0
 8001300:	9307      	str	r3, [sp, #28]
 8001302:	9308      	str	r3, [sp, #32]
 8001304:	a906      	add	r1, sp, #24
 8001306:	4620      	mov	r0, r4
 8001308:	f000 fc70 	bl	8001bec <HAL_GPIO_Init>
 800130c:	4a31      	ldr	r2, [pc, #196]	@ (80013d4 <HAL_UART_MspInit+0x13c>)
 800130e:	6853      	ldr	r3, [r2, #4]
 8001310:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6053      	str	r3, [r2, #4]
 800131a:	e7ce      	b.n	80012ba <HAL_UART_MspInit+0x22>
 800131c:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <HAL_UART_MspInit+0x134>)
 800131e:	69da      	ldr	r2, [r3, #28]
 8001320:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001324:	61da      	str	r2, [r3, #28]
 8001326:	69da      	ldr	r2, [r3, #28]
 8001328:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	9a02      	ldr	r2, [sp, #8]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	f042 0204 	orr.w	r2, r2, #4
 8001336:	619a      	str	r2, [r3, #24]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	9b03      	ldr	r3, [sp, #12]
 8001342:	2304      	movs	r3, #4
 8001344:	9306      	str	r3, [sp, #24]
 8001346:	2302      	movs	r3, #2
 8001348:	9307      	str	r3, [sp, #28]
 800134a:	2303      	movs	r3, #3
 800134c:	9309      	str	r3, [sp, #36]	@ 0x24
 800134e:	4c22      	ldr	r4, [pc, #136]	@ (80013d8 <HAL_UART_MspInit+0x140>)
 8001350:	a906      	add	r1, sp, #24
 8001352:	4620      	mov	r0, r4
 8001354:	f000 fc4a 	bl	8001bec <HAL_GPIO_Init>
 8001358:	2308      	movs	r3, #8
 800135a:	9306      	str	r3, [sp, #24]
 800135c:	2300      	movs	r3, #0
 800135e:	9307      	str	r3, [sp, #28]
 8001360:	9308      	str	r3, [sp, #32]
 8001362:	a906      	add	r1, sp, #24
 8001364:	4620      	mov	r0, r4
 8001366:	f000 fc41 	bl	8001bec <HAL_GPIO_Init>
 800136a:	e7a6      	b.n	80012ba <HAL_UART_MspInit+0x22>
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_UART_MspInit+0x134>)
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001374:	61da      	str	r2, [r3, #28]
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800137c:	9204      	str	r2, [sp, #16]
 800137e:	9a04      	ldr	r2, [sp, #16]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	f042 0208 	orr.w	r2, r2, #8
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	9305      	str	r3, [sp, #20]
 8001390:	9b05      	ldr	r3, [sp, #20]
 8001392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001396:	9306      	str	r3, [sp, #24]
 8001398:	2302      	movs	r3, #2
 800139a:	9307      	str	r3, [sp, #28]
 800139c:	2303      	movs	r3, #3
 800139e:	9309      	str	r3, [sp, #36]	@ 0x24
 80013a0:	4c0b      	ldr	r4, [pc, #44]	@ (80013d0 <HAL_UART_MspInit+0x138>)
 80013a2:	a906      	add	r1, sp, #24
 80013a4:	4620      	mov	r0, r4
 80013a6:	f000 fc21 	bl	8001bec <HAL_GPIO_Init>
 80013aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ae:	9306      	str	r3, [sp, #24]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9307      	str	r3, [sp, #28]
 80013b4:	9308      	str	r3, [sp, #32]
 80013b6:	a906      	add	r1, sp, #24
 80013b8:	4620      	mov	r0, r4
 80013ba:	f000 fc17 	bl	8001bec <HAL_GPIO_Init>
 80013be:	e77c      	b.n	80012ba <HAL_UART_MspInit+0x22>
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40004400 	.word	0x40004400
 80013c8:	40004800 	.word	0x40004800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40010000 	.word	0x40010000
 80013d8:	40010800 	.word	0x40010800

080013dc <NMI_Handler>:
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler>

080013de <HardFault_Handler>:
 80013de:	e7fe      	b.n	80013de <HardFault_Handler>

080013e0 <MemManage_Handler>:
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler>

080013e2 <BusFault_Handler>:
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler>

080013e4 <UsageFault_Handler>:
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler>

080013e6 <SVC_Handler>:
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:
 80013ec:	b508      	push	{r3, lr}
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <SysTick_Handler+0x20>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	b113      	cbz	r3, 80013fa <SysTick_Handler+0xe>
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <SysTick_Handler+0x20>)
 80013f8:	8013      	strh	r3, [r2, #0]
 80013fa:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <SysTick_Handler+0x24>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b113      	cbz	r3, 8001406 <SysTick_Handler+0x1a>
 8001400:	3b01      	subs	r3, #1
 8001402:	4a03      	ldr	r2, [pc, #12]	@ (8001410 <SysTick_Handler+0x24>)
 8001404:	8013      	strh	r3, [r2, #0]
 8001406:	f000 f8c3 	bl	8001590 <HAL_IncTick>
 800140a:	bd08      	pop	{r3, pc}
 800140c:	200003b8 	.word	0x200003b8
 8001410:	200003ba 	.word	0x200003ba

08001414 <_getpid>:
 8001414:	2001      	movs	r0, #1
 8001416:	4770      	bx	lr

08001418 <_kill>:
 8001418:	b508      	push	{r3, lr}
 800141a:	f007 fec1 	bl	80091a0 <__errno>
 800141e:	2316      	movs	r3, #22
 8001420:	6003      	str	r3, [r0, #0]
 8001422:	f04f 30ff 	mov.w	r0, #4294967295
 8001426:	bd08      	pop	{r3, pc}

08001428 <_exit>:
 8001428:	b508      	push	{r3, lr}
 800142a:	f04f 31ff 	mov.w	r1, #4294967295
 800142e:	f7ff fff3 	bl	8001418 <_kill>
 8001432:	e7fe      	b.n	8001432 <_exit+0xa>

08001434 <_read>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	460c      	mov	r4, r1
 8001438:	4616      	mov	r6, r2
 800143a:	2500      	movs	r5, #0
 800143c:	e006      	b.n	800144c <_read+0x18>
 800143e:	f3af 8000 	nop.w
 8001442:	4621      	mov	r1, r4
 8001444:	f801 0b01 	strb.w	r0, [r1], #1
 8001448:	3501      	adds	r5, #1
 800144a:	460c      	mov	r4, r1
 800144c:	42b5      	cmp	r5, r6
 800144e:	dbf6      	blt.n	800143e <_read+0xa>
 8001450:	4630      	mov	r0, r6
 8001452:	bd70      	pop	{r4, r5, r6, pc}

08001454 <_close>:
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	4770      	bx	lr

0800145a <_fstat>:
 800145a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	2000      	movs	r0, #0
 8001462:	4770      	bx	lr

08001464 <_isatty>:
 8001464:	2001      	movs	r0, #1
 8001466:	4770      	bx	lr

08001468 <_lseek>:
 8001468:	2000      	movs	r0, #0
 800146a:	4770      	bx	lr

0800146c <_sbrk>:
 800146c:	b510      	push	{r4, lr}
 800146e:	4603      	mov	r3, r0
 8001470:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <_sbrk+0x38>)
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <_sbrk+0x3c>)
 8001474:	480d      	ldr	r0, [pc, #52]	@ (80014ac <_sbrk+0x40>)
 8001476:	6800      	ldr	r0, [r0, #0]
 8001478:	b140      	cbz	r0, 800148c <_sbrk+0x20>
 800147a:	480c      	ldr	r0, [pc, #48]	@ (80014ac <_sbrk+0x40>)
 800147c:	6800      	ldr	r0, [r0, #0]
 800147e:	4403      	add	r3, r0
 8001480:	1a52      	subs	r2, r2, r1
 8001482:	4293      	cmp	r3, r2
 8001484:	d806      	bhi.n	8001494 <_sbrk+0x28>
 8001486:	4a09      	ldr	r2, [pc, #36]	@ (80014ac <_sbrk+0x40>)
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	bd10      	pop	{r4, pc}
 800148c:	4807      	ldr	r0, [pc, #28]	@ (80014ac <_sbrk+0x40>)
 800148e:	4c08      	ldr	r4, [pc, #32]	@ (80014b0 <_sbrk+0x44>)
 8001490:	6004      	str	r4, [r0, #0]
 8001492:	e7f2      	b.n	800147a <_sbrk+0xe>
 8001494:	f007 fe84 	bl	80091a0 <__errno>
 8001498:	230c      	movs	r3, #12
 800149a:	6003      	str	r3, [r0, #0]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	e7f3      	b.n	800148a <_sbrk+0x1e>
 80014a2:	bf00      	nop
 80014a4:	20005000 	.word	0x20005000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	200003a8 	.word	0x200003a8
 80014b0:	20000738 	.word	0x20000738

080014b4 <SystemInit>:
 80014b4:	4770      	bx	lr
	...

080014b8 <Reset_Handler>:
 80014b8:	f7ff fffc 	bl	80014b4 <SystemInit>
 80014bc:	480b      	ldr	r0, [pc, #44]	@ (80014ec <LoopFillZerobss+0xe>)
 80014be:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <LoopFillZerobss+0x12>)
 80014c0:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <LoopFillZerobss+0x16>)
 80014c2:	2300      	movs	r3, #0
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:
 80014c6:	58d4      	ldr	r4, [r2, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:
 80014cc:	18c4      	adds	r4, r0, r3
 80014ce:	428c      	cmp	r4, r1
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <LoopFillZerobss+0x1a>)
 80014d4:	4c09      	ldr	r4, [pc, #36]	@ (80014fc <LoopFillZerobss+0x1e>)
 80014d6:	2300      	movs	r3, #0
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:
 80014de:	42a2      	cmp	r2, r4
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>
 80014e2:	f007 fe63 	bl	80091ac <__libc_init_array>
 80014e6:	f7ff fe0a 	bl	80010fe <main>
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000
 80014f0:	200001ec 	.word	0x200001ec
 80014f4:	0800b954 	.word	0x0800b954
 80014f8:	200001ec 	.word	0x200001ec
 80014fc:	20000738 	.word	0x20000738

08001500 <ADC1_2_IRQHandler>:
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>
	...

08001504 <HAL_Init>:
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <HAL_Init+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	@ (800152c <HAL_Init+0x28>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	2003      	movs	r0, #3
 8001516:	f000 fb19 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>
 800151a:	200f      	movs	r0, #15
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>
 8001520:	f7ff fe06 	bl	8001130 <HAL_MspInit>
 8001524:	2300      	movs	r3, #0
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_InitTick>:
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fb23 	bl	8001b9a <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 faf9 	bl	8001b62 <HAL_NVIC_SetPriority>
 8001570:	4a06      	ldr	r2, [pc, #24]	@ (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
 800157a:	2301      	movs	r3, #1
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a03      	ldr	r2, [pc, #12]	@ (80015b0 <HAL_IncTick+0x20>)
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000008 	.word	0x20000008
 80015b0:	200003ac 	.word	0x200003ac

080015b4 <HAL_GetTick>:
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4b02      	ldr	r3, [pc, #8]	@ (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	200003ac 	.word	0x200003ac

080015c8 <HAL_ADC_Init>:
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	2300      	movs	r3, #0
 80015d2:	75fb      	strb	r3, [r7, #23]
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Init+0x22>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0be      	b.n	8001768 <HAL_ADC_Init+0x1a0>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_ADC_Init+0x44>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fdb4 	bl	8001174 <HAL_ADC_MspInit>
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f9ab 	bl	8001968 <ADC_ConversionStop_Disable>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8099 	bne.w	8001756 <HAL_ADC_Init+0x18e>
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 8095 	bne.w	8001756 <HAL_ADC_Init+0x18e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001634:	f023 0302 	bic.w	r3, r3, #2
 8001638:	f043 0202 	orr.w	r2, r3, #2
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7b1b      	ldrb	r3, [r3, #12]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4313      	orrs	r3, r2
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	4313      	orrs	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001660:	d003      	beq.n	800166a <HAL_ADC_Init+0xa2>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d102      	bne.n	8001670 <HAL_ADC_Init+0xa8>
 800166a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800166e:	e000      	b.n	8001672 <HAL_ADC_Init+0xaa>
 8001670:	2300      	movs	r3, #0
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7d1b      	ldrb	r3, [r3, #20]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d119      	bne.n	80016b4 <HAL_ADC_Init+0xec>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7b1b      	ldrb	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d109      	bne.n	800169c <HAL_ADC_Init+0xd4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	3b01      	subs	r3, #1
 800168e:	035a      	lsls	r2, r3, #13
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e00b      	b.n	80016b4 <HAL_ADC_Init+0xec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	f043 0220 	orr.w	r2, r3, #32
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <HAL_ADC_Init+0x1a8>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	430b      	orrs	r3, r1
 80016da:	6093      	str	r3, [r2, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016e4:	d003      	beq.n	80016ee <HAL_ADC_Init+0x126>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d104      	bne.n	80016f8 <HAL_ADC_Init+0x130>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	430a      	orrs	r2, r1
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_ADC_Init+0x1ac>)
 8001714:	4013      	ands	r3, r2
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	429a      	cmp	r2, r3
 800171a:	d10b      	bne.n	8001734 <HAL_ADC_Init+0x16c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
 8001732:	e018      	b.n	8001766 <HAL_ADC_Init+0x19e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001738:	f023 0312 	bic.w	r3, r3, #18
 800173c:	f043 0210 	orr.w	r2, r3, #16
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001750:	2301      	movs	r3, #1
 8001752:	75fb      	strb	r3, [r7, #23]
 8001754:	e007      	b.n	8001766 <HAL_ADC_Init+0x19e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	@ 0x28
 8001762:	2301      	movs	r3, #1
 8001764:	75fb      	strb	r3, [r7, #23]
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	ffe1f7fd 	.word	0xffe1f7fd
 8001774:	ff1f0efe 	.word	0xff1f0efe

08001778 <HAL_ADC_ConfigChannel>:
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x20>
 8001794:	2302      	movs	r3, #2
 8001796:	e0dc      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1da>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b06      	cmp	r3, #6
 80017a6:	d81c      	bhi.n	80017e2 <HAL_ADC_ConfigChannel+0x6a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b05      	subs	r3, #5
 80017ba:	221f      	movs	r2, #31
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	3b05      	subs	r3, #5
 80017d4:	fa00 f203 	lsl.w	r2, r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e0:	e03c      	b.n	800185c <HAL_ADC_ConfigChannel+0xe4>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d81c      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0xac>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	3b23      	subs	r3, #35	@ 0x23
 80017fc:	221f      	movs	r2, #31
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	4019      	ands	r1, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b23      	subs	r3, #35	@ 0x23
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	@ 0x30
 8001822:	e01b      	b.n	800185c <HAL_ADC_ConfigChannel+0xe4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b41      	subs	r3, #65	@ 0x41
 8001836:	221f      	movs	r2, #31
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	4019      	ands	r1, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b41      	subs	r3, #65	@ 0x41
 8001850:	fa00 f203 	lsl.w	r2, r0, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b09      	cmp	r3, #9
 8001862:	d91c      	bls.n	800189e <HAL_ADC_ConfigChannel+0x126>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68d9      	ldr	r1, [r3, #12]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	3b1e      	subs	r3, #30
 8001876:	2207      	movs	r2, #7
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	4019      	ands	r1, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6898      	ldr	r0, [r3, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	3b1e      	subs	r3, #30
 8001890:	fa00 f203 	lsl.w	r2, r0, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	e019      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x15a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6919      	ldr	r1, [r3, #16]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	2207      	movs	r2, #7
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d003      	beq.n	80018e2 <HAL_ADC_ConfigChannel+0x16a>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b11      	cmp	r3, #17
 80018e0:	d132      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1d0>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1d      	ldr	r2, [pc, #116]	@ (800195c <HAL_ADC_ConfigChannel+0x1e4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d125      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1c0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d126      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1d0>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d11a      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1d0>
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <HAL_ADC_ConfigChannel+0x1e8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a13      	ldr	r2, [pc, #76]	@ (8001964 <HAL_ADC_ConfigChannel+0x1ec>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9a      	lsrs	r2, r3, #18
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	e002      	b.n	8001930 <HAL_ADC_ConfigChannel+0x1b8>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3b01      	subs	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <HAL_ADC_ConfigChannel+0x1b2>
 8001936:	e007      	b.n	8001948 <HAL_ADC_ConfigChannel+0x1d0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193c:	f043 0220 	orr.w	r2, r3, #32
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40012400 	.word	0x40012400
 8001960:	20000000 	.word	0x20000000
 8001964:	431bde83 	.word	0x431bde83

08001968 <ADC_ConversionStop_Disable>:
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d12e      	bne.n	80019e0 <ADC_ConversionStop_Disable+0x78>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	f7ff fe0f 	bl	80015b4 <HAL_GetTick>
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	e01b      	b.n	80019d2 <ADC_ConversionStop_Disable+0x6a>
 800199a:	f7ff fe0b 	bl	80015b4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d914      	bls.n	80019d2 <ADC_ConversionStop_Disable+0x6a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d10d      	bne.n	80019d2 <ADC_ConversionStop_Disable+0x6a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019ce:	2301      	movs	r3, #1
 80019d0:	e007      	b.n	80019e2 <ADC_ConversionStop_Disable+0x7a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d0dc      	beq.n	800199a <ADC_ConversionStop_Disable+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <__NVIC_SetPriorityGrouping>:
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_SetPriority>:
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	@ (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	@ (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
 8001afc:	4313      	orrs	r3, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	@ 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <SysTick_Config>:
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff90 	bl	8001a50 <__NVIC_SetPriority>
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff49 	bl	80019ec <__NVIC_SetPriorityGrouping>
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	f7ff ff5e 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff90 	bl	8001aa4 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5f 	bl	8001a50 <__NVIC_SetPriority>
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffb0 	bl	8001b08 <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_CRC_Init>:
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_CRC_Init+0x12>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e00e      	b.n	8001be2 <HAL_CRC_Init+0x30>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	795b      	ldrb	r3, [r3, #5]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <HAL_CRC_Init+0x28>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	711a      	strb	r2, [r3, #4]
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fafd 	bl	80011d4 <HAL_CRC_MspInit>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	715a      	strb	r2, [r3, #5]
 8001be0:	2300      	movs	r3, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	@ 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	e169      	b.n	8001ed4 <HAL_GPIO_Init+0x2e8>
 8001c00:	2201      	movs	r2, #1
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8158 	bne.w	8001ece <HAL_GPIO_Init+0x2e2>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a9a      	ldr	r2, [pc, #616]	@ (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d05e      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c28:	4a98      	ldr	r2, [pc, #608]	@ (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d875      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c2e:	4a98      	ldr	r2, [pc, #608]	@ (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d058      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c34:	4a96      	ldr	r2, [pc, #600]	@ (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d86f      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c3a:	4a96      	ldr	r2, [pc, #600]	@ (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d052      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c40:	4a94      	ldr	r2, [pc, #592]	@ (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d869      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c46:	4a94      	ldr	r2, [pc, #592]	@ (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04c      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a92      	ldr	r2, [pc, #584]	@ (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d863      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c52:	4a92      	ldr	r2, [pc, #584]	@ (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d046      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c58:	4a90      	ldr	r2, [pc, #576]	@ (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d85d      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d82a      	bhi.n	8001cb8 <HAL_GPIO_Init+0xcc>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d859      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c66:	a201      	add	r2, pc, #4	@ (adr r2, 8001c6c <HAL_GPIO_Init+0x80>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001cc1 	.word	0x08001cc1
 8001c74:	08001cd3 	.word	0x08001cd3
 8001c78:	08001d15 	.word	0x08001d15
 8001c7c:	08001d1b 	.word	0x08001d1b
 8001c80:	08001d1b 	.word	0x08001d1b
 8001c84:	08001d1b 	.word	0x08001d1b
 8001c88:	08001d1b 	.word	0x08001d1b
 8001c8c:	08001d1b 	.word	0x08001d1b
 8001c90:	08001d1b 	.word	0x08001d1b
 8001c94:	08001d1b 	.word	0x08001d1b
 8001c98:	08001d1b 	.word	0x08001d1b
 8001c9c:	08001d1b 	.word	0x08001d1b
 8001ca0:	08001d1b 	.word	0x08001d1b
 8001ca4:	08001d1b 	.word	0x08001d1b
 8001ca8:	08001d1b 	.word	0x08001d1b
 8001cac:	08001d1b 	.word	0x08001d1b
 8001cb0:	08001cc9 	.word	0x08001cc9
 8001cb4:	08001cdd 	.word	0x08001cdd
 8001cb8:	4a79      	ldr	r2, [pc, #484]	@ (8001ea0 <HAL_GPIO_Init+0x2b4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001cbe:	e02c      	b.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	e029      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	e024      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	e01f      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	e01a      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_GPIO_Init+0x108>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	e013      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_GPIO_Init+0x11c>
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	e009      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	615a      	str	r2, [r3, #20]
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x130>
 8001d1a:	bf00      	nop
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	@ 0xff
 8001d20:	d801      	bhi.n	8001d26 <HAL_GPIO_Init+0x13a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_Init+0x13e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	@ 0xff
 8001d30:	d802      	bhi.n	8001d38 <HAL_GPIO_Init+0x14c>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x152>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	3b08      	subs	r3, #8
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	210f      	movs	r1, #15
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80b1 	beq.w	8001ece <HAL_GPIO_Init+0x2e2>
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4a48      	ldr	r2, [pc, #288]	@ (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a40      	ldr	r2, [pc, #256]	@ (8001eac <HAL_GPIO_Init+0x2c0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_GPIO_Init+0x1ec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3f      	ldr	r2, [pc, #252]	@ (8001eb0 <HAL_GPIO_Init+0x2c4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb4 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb8 <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1e0>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	492f      	ldr	r1, [pc, #188]	@ (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
 8001e04:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	492c      	ldr	r1, [pc, #176]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x234>
 8001e12:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4928      	ldr	r1, [pc, #160]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_GPIO_Init+0x24e>
 8001e2c:	4b23      	ldr	r3, [pc, #140]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4922      	ldr	r1, [pc, #136]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x25c>
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	491e      	ldr	r1, [pc, #120]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <HAL_GPIO_Init+0x276>
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4918      	ldr	r1, [pc, #96]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x284>
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4914      	ldr	r1, [pc, #80]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d021      	beq.n	8001ec0 <HAL_GPIO_Init+0x2d4>
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e021      	b.n	8001ece <HAL_GPIO_Init+0x2e2>
 8001e8a:	bf00      	nop
 8001e8c:	10320000 	.word	0x10320000
 8001e90:	10310000 	.word	0x10310000
 8001e94:	10220000 	.word	0x10220000
 8001e98:	10210000 	.word	0x10210000
 8001e9c:	10120000 	.word	0x10120000
 8001ea0:	10110000 	.word	0x10110000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40011400 	.word	0x40011400
 8001ebc:	40010400 	.word	0x40010400
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_GPIO_Init+0x304>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4909      	ldr	r1, [pc, #36]	@ (8001ef0 <HAL_GPIO_Init+0x304>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f47f ae8e 	bne.w	8001c00 <HAL_GPIO_Init+0x14>
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	372c      	adds	r7, #44	@ 0x2c
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_RCC_OscConfig>:
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e272      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x12e>
 8001f14:	4b92      	ldr	r3, [pc, #584]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46>
 8001f20:	4b8f      	ldr	r3, [pc, #572]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
 8001f3a:	4b89      	ldr	r3, [pc, #548]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x12c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x12c>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e24c      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x76>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a7f      	ldr	r2, [pc, #508]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b7b      	ldr	r3, [pc, #492]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7a      	ldr	r2, [pc, #488]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b78      	ldr	r3, [pc, #480]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a77      	ldr	r2, [pc, #476]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xbc>
 8001f96:	4b72      	ldr	r3, [pc, #456]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a71      	ldr	r2, [pc, #452]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b68      	ldr	r3, [pc, #416]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x104>
 8001fd0:	f7ff faf0 	bl	80015b4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xf6>
 8001fd8:	f7ff faec 	bl	80015b4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf6>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e200      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 8001fea:	4b5d      	ldr	r3, [pc, #372]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe4>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
 8001ff8:	f7ff fadc 	bl	80015b4 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x11e>
 8002000:	f7ff fad8 	bl	80015b4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x11e>
 800200e:	2303      	movs	r3, #3
 8002010:	e1ec      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 8002012:	4b53      	ldr	r3, [pc, #332]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x10c>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
 8002020:	bf00      	nop
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x202>
 800202e:	4b4c      	ldr	r3, [pc, #304]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x15e>
 800203a:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
 8002046:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
 8002052:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
 8002066:	2301      	movs	r3, #1
 8002068:	e1c0      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 800206a:	4b3d      	ldr	r3, [pc, #244]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4939      	ldr	r1, [pc, #228]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1d6>
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f7ff fa91 	bl	80015b4 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
 8002096:	f7ff fa8d 	bl	80015b4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1a1      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 80020a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x1a2>
 80020b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4927      	ldr	r1, [pc, #156]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f7ff fa70 	bl	80015b4 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1f6>
 80020d8:	f7ff fa6c 	bl	80015b4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1f6>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e180      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 80020ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1e4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03a      	beq.n	8002178 <HAL_RCC_OscConfig+0x284>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x24a>
 800210a:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_RCC_OscConfig+0x274>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f7ff fa50 	bl	80015b4 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x236>
 8002118:	f7ff fa4c 	bl	80015b4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x236>
 8002126:	2303      	movs	r3, #3
 8002128:	e160      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x224>
 8002136:	2001      	movs	r0, #1
 8002138:	f000 fad0 	bl	80026dc <RCC_Delay>
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x284>
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_RCC_OscConfig+0x274>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f7ff fa36 	bl	80015b4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x278>
 800214c:	f7ff fa32 	bl	80015b4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x278>
 800215a:	2303      	movs	r3, #3
 800215c:	e146      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	42420000 	.word	0x42420000
 8002168:	42420480 	.word	0x42420480
 800216c:	4b92      	ldr	r3, [pc, #584]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e9      	bne.n	800214c <HAL_RCC_OscConfig+0x258>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a6 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3de>
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
 800218a:	4b8b      	ldr	r3, [pc, #556]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2be>
 8002196:	4b88      	ldr	r3, [pc, #544]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a87      	ldr	r2, [pc, #540]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b85      	ldr	r3, [pc, #532]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
 80021b2:	4b82      	ldr	r3, [pc, #520]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2fc>
 80021be:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7e      	ldr	r2, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	f7ff f9f3 	bl	80015b4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
 80021d2:	f7ff f9ef 	bl	80015b4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	@ 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
 80021e0:	2303      	movs	r3, #3
 80021e2:	e103      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 80021e4:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2de>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x312>
 80021f8:	4b6f      	ldr	r3, [pc, #444]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a6e      	ldr	r2, [pc, #440]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x334>
 800220e:	4b6a      	ldr	r3, [pc, #424]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a69      	ldr	r2, [pc, #420]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b67      	ldr	r3, [pc, #412]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a66      	ldr	r2, [pc, #408]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x356>
 8002230:	4b61      	ldr	r3, [pc, #388]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a60      	ldr	r2, [pc, #384]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4b5e      	ldr	r3, [pc, #376]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a5d      	ldr	r2, [pc, #372]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 800224a:	4b5b      	ldr	r3, [pc, #364]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a5a      	ldr	r2, [pc, #360]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b58      	ldr	r3, [pc, #352]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a57      	ldr	r2, [pc, #348]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3a2>
 800226a:	f7ff f9a3 	bl	80015b4 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x394>
 8002272:	f7ff f99f 	bl	80015b4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x394>
 8002284:	2303      	movs	r3, #3
 8002286:	e0b1      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 8002288:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x37e>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3cc>
 8002296:	f7ff f98d 	bl	80015b4 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
 800229e:	f7ff f989 	bl	80015b4 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
 80022b0:	2303      	movs	r3, #3
 80022b2:	e09b      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 80022b4:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3aa>
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3de>
 80022c6:	4b3c      	ldr	r3, [pc, #240]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a3b      	ldr	r2, [pc, #236]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0x4f6>
 80022dc:	4b36      	ldr	r3, [pc, #216]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d061      	beq.n	80023ac <HAL_RCC_OscConfig+0x4b8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d146      	bne.n	800237e <HAL_RCC_OscConfig+0x48a>
 80022f0:	4b33      	ldr	r3, [pc, #204]	@ (80023c0 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f7ff f95d 	bl	80015b4 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
 80022fe:	f7ff f959 	bl	80015b4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x41c>
 800230c:	2303      	movs	r3, #3
 800230e:	e06d      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 8002310:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x40a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
 8002326:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4921      	ldr	r1, [pc, #132]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
 8002338:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a19      	ldr	r1, [r3, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	430b      	orrs	r3, r1
 800234a:	491b      	ldr	r1, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x4cc>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f7ff f92d 	bl	80015b4 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x47c>
 800235e:	f7ff f929 	bl	80015b4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x47c>
 800236c:	2303      	movs	r3, #3
 800236e:	e03d      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x46a>
 800237c:	e035      	b.n	80023ea <HAL_RCC_OscConfig+0x4f6>
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_OscConfig+0x4cc>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f7ff f916 	bl	80015b4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4aa>
 800238c:	f7ff f912 	bl	80015b4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4aa>
 800239a:	2303      	movs	r3, #3
 800239c:	e026      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x498>
 80023aa:	e01e      	b.n	80023ea <HAL_RCC_OscConfig+0x4f6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4d0>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e019      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42420060 	.word	0x42420060
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCC_OscConfig+0x500>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x4f2>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x4f6>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 80023ea:	2300      	movs	r3, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_RCC_ClockConfig>:
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
 800240c:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x44>
 800241a:	4b67      	ldr	r3, [pc, #412]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4965      	ldr	r1, [pc, #404]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
 800242a:	4b63      	ldr	r3, [pc, #396]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x44>
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x92>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x68>
 8002454:	4b59      	ldr	r3, [pc, #356]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800245e:	6053      	str	r3, [r2, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x80>
 800246c:	4b53      	ldr	r3, [pc, #332]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002476:	6053      	str	r3, [r2, #4]
 8002478:	4b50      	ldr	r3, [pc, #320]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d040      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xb6>
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
 80024b6:	4b41      	ldr	r3, [pc, #260]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e073      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
 80024c6:	4b3d      	ldr	r3, [pc, #244]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
 80024d6:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4936      	ldr	r1, [pc, #216]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	f7ff f864 	bl	80015b4 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
 80024f0:	f7ff f860 	bl	80015b4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
 8002502:	2303      	movs	r3, #3
 8002504:	e053      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
 8002506:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
 8002518:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d210      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x150>
 8002526:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4922      	ldr	r1, [pc, #136]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x150>
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x16e>
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x18e>
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490a      	ldr	r1, [pc, #40]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	@ (80025c4 <HAL_RCC_ClockConfig+0x1cc>)
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_ClockConfig+0x1d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe ffc2 	bl	8001530 <HAL_InitTick>
 80025ac:	2300      	movs	r3, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	0800b060 	.word	0x0800b060
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x30>
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x36>
 80025fa:	e027      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x80>
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e027      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x86>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a17      	ldr	r2, [pc, #92]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x9c>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x70>
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x94>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0c5b      	lsrs	r3, r3, #17
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	4a11      	ldr	r2, [pc, #68]	@ (800266c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 800262e:	fb03 f202 	mul.w	r2, r3, r2
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e004      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x7a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x86>
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xa8>)
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	bf00      	nop
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4618      	mov	r0, r3
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	00f42400 	.word	0x00f42400
 8002668:	0800b070 	.word	0x0800b070
 800266c:	0800b080 	.word	0x0800b080
 8002670:	003d0900 	.word	0x003d0900
 8002674:	007a1200 	.word	0x007a1200

08002678 <HAL_RCC_GetHCLKFreq>:
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
 800267c:	4b02      	ldr	r3, [pc, #8]	@ (8002688 <HAL_RCC_GetHCLKFreq+0x10>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	20000000 	.word	0x20000000

0800268c <HAL_RCC_GetPCLK1Freq>:
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
 8002690:	f7ff fff2 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	@ (80026b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	0800b058 	.word	0x0800b058

080026b4 <HAL_RCC_GetPCLK2Freq>:
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	f7ff ffde 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0adb      	lsrs	r3, r3, #11
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	@ (80026d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	0800b058 	.word	0x0800b058

080026dc <RCC_Delay>:
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <RCC_Delay+0x34>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <RCC_Delay+0x38>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0a5b      	lsrs	r3, r3, #9
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	bf00      	nop
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	60fa      	str	r2, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f9      	bne.n	80026f8 <RCC_Delay+0x1c>
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000000 	.word	0x20000000
 8002714:	10624dd3 	.word	0x10624dd3

08002718 <HAL_RCCEx_PeriphCLKConfig>:
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07d      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002734:	2300      	movs	r3, #0
 8002736:	75fb      	strb	r3, [r7, #23]
 8002738:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002744:	4b4c      	ldr	r3, [pc, #304]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	4a4b      	ldr	r2, [pc, #300]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274e:	61d3      	str	r3, [r2, #28]
 8002750:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2301      	movs	r3, #1
 800275e:	75fb      	strb	r3, [r7, #23]
 8002760:	4b46      	ldr	r3, [pc, #280]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d118      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x86>
 800276c:	4b43      	ldr	r3, [pc, #268]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a42      	ldr	r2, [pc, #264]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	f7fe ff1c 	bl	80015b4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]
 800277e:	e008      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002780:	f7fe ff18 	bl	80015b4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800278e:	2303      	movs	r3, #3
 8002790:	e06d      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002792:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800279e:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02e      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d027      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	4a29      	ldr	r2, [pc, #164]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027e2:	f7fe fee7 	bl	80015b4 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]
 80027e8:	e00a      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027ea:	f7fe fee3 	bl	80015b4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027fc:	2303      	movs	r3, #3
 80027fe:	e036      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002800:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ee      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4917      	ldr	r1, [pc, #92]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	4313      	orrs	r3, r2
 800281c:	620b      	str	r3, [r1, #32]
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a13      	ldr	r2, [pc, #76]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282e:	61d3      	str	r3, [r2, #28]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800283c:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	490b      	ldr	r1, [pc, #44]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4904      	ldr	r1, [pc, #16]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	2300      	movs	r3, #0
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	42420440 	.word	0x42420440

08002884 <HAL_TIM_Base_Init>:
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_Base_Init+0x12>
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_Base_Init+0x96>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_Base_Init+0x2c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fca8 	bl	8001200 <HAL_TIM_Base_MspInit>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 fa10 	bl	8002ce8 <TIM_Base_SetConfig>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002918:	2300      	movs	r3, #0
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_TIM_PWM_Init>:
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_TIM_PWM_Init+0x12>
 8002930:	2301      	movs	r3, #1
 8002932:	e041      	b.n	80029b8 <HAL_TIM_PWM_Init+0x96>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <HAL_TIM_PWM_Init+0x2c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f839 	bl	80029c0 <HAL_TIM_PWM_MspInit>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f000 f9c1 	bl	8002ce8 <TIM_Base_SetConfig>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80029b6:	2300      	movs	r3, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_PWM_MspInit>:
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_TIM_PWM_ConfigChannel>:
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	2300      	movs	r3, #0
 80029e2:	75fb      	strb	r3, [r7, #23]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0ae      	b.n	8002b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	f200 809f 	bhi.w	8002b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a02:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002b41 	.word	0x08002b41
 8002a10:	08002b41 	.word	0x08002b41
 8002a14:	08002b41 	.word	0x08002b41
 8002a18:	08002a7d 	.word	0x08002a7d
 8002a1c:	08002b41 	.word	0x08002b41
 8002a20:	08002b41 	.word	0x08002b41
 8002a24:	08002b41 	.word	0x08002b41
 8002a28:	08002abf 	.word	0x08002abf
 8002a2c:	08002b41 	.word	0x08002b41
 8002a30:	08002b41 	.word	0x08002b41
 8002a34:	08002b41 	.word	0x08002b41
 8002a38:	08002aff 	.word	0x08002aff
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f9b2 	bl	8002dac <TIM_OC1_SetConfig>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0208 	orr.w	r2, r2, #8
 8002a56:	619a      	str	r2, [r3, #24]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0204 	bic.w	r2, r2, #4
 8002a66:	619a      	str	r2, [r3, #24]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6999      	ldr	r1, [r3, #24]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e064      	b.n	8002b46 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f9f8 	bl	8002e78 <TIM_OC2_SetConfig>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6999      	ldr	r1, [r3, #24]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	619a      	str	r2, [r3, #24]
 8002abc:	e043      	b.n	8002b46 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fa41 	bl	8002f4c <TIM_OC3_SetConfig>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0208 	orr.w	r2, r2, #8
 8002ad8:	61da      	str	r2, [r3, #28]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0204 	bic.w	r2, r2, #4
 8002ae8:	61da      	str	r2, [r3, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69d9      	ldr	r1, [r3, #28]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]
 8002afc:	e023      	b.n	8002b46 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fa8b 	bl	8003020 <TIM_OC4_SetConfig>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b18:	61da      	str	r2, [r3, #28]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b28:	61da      	str	r2, [r3, #28]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69d9      	ldr	r1, [r3, #28]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	021a      	lsls	r2, r3, #8
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	61da      	str	r2, [r3, #28]
 8002b3e:	e002      	b.n	8002b46 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002b40:	2301      	movs	r3, #1
 8002b42:	75fb      	strb	r3, [r7, #23]
 8002b44:	bf00      	nop
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_ConfigClockSource>:
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0b4      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x186>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bac:	d03e      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0xd4>
 8002bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb2:	f200 8087 	bhi.w	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bba:	f000 8086 	beq.w	8002cca <HAL_TIM_ConfigClockSource+0x172>
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc2:	d87f      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b70      	cmp	r3, #112	@ 0x70
 8002bc6:	d01a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xa6>
 8002bc8:	2b70      	cmp	r3, #112	@ 0x70
 8002bca:	d87b      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b60      	cmp	r3, #96	@ 0x60
 8002bce:	d050      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x11a>
 8002bd0:	2b60      	cmp	r3, #96	@ 0x60
 8002bd2:	d877      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b50      	cmp	r3, #80	@ 0x50
 8002bd6:	d03c      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0xfa>
 8002bd8:	2b50      	cmp	r3, #80	@ 0x50
 8002bda:	d873      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b40      	cmp	r3, #64	@ 0x40
 8002bde:	d058      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x13a>
 8002be0:	2b40      	cmp	r3, #64	@ 0x40
 8002be2:	d86f      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b30      	cmp	r3, #48	@ 0x30
 8002be6:	d064      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002be8:	2b30      	cmp	r3, #48	@ 0x30
 8002bea:	d86b      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d060      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d867      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d05c      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d05a      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002bfc:	e062      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f000 facc 	bl	80031aa <TIM_ETR_SetConfig>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	e04f      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f000 fab5 	bl	80031aa <TIM_ETR_SetConfig>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	e03c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 fa2c 	bl	80030bc <TIM_TI1_ConfigInputStage>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2150      	movs	r1, #80	@ 0x50
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fa83 	bl	8003176 <TIM_ITRx_SetConfig>
 8002c70:	e02c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6859      	ldr	r1, [r3, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 fa4a 	bl	8003118 <TIM_TI2_ConfigInputStage>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2160      	movs	r1, #96	@ 0x60
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fa73 	bl	8003176 <TIM_ITRx_SetConfig>
 8002c90:	e01c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f000 fa0c 	bl	80030bc <TIM_TI1_ConfigInputStage>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2140      	movs	r1, #64	@ 0x40
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fa63 	bl	8003176 <TIM_ITRx_SetConfig>
 8002cb0:	e00c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	f000 fa5a 	bl	8003176 <TIM_ITRx_SetConfig>
 8002cc2:	e003      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e000      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x174>
 8002cca:	bf00      	nop
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <TIM_Base_SetConfig>:
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <TIM_Base_SetConfig+0xb8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00b      	beq.n	8002d18 <TIM_Base_SetConfig+0x30>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d06:	d007      	beq.n	8002d18 <TIM_Base_SetConfig+0x30>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a26      	ldr	r2, [pc, #152]	@ (8002da4 <TIM_Base_SetConfig+0xbc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_Base_SetConfig+0x30>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a25      	ldr	r2, [pc, #148]	@ (8002da8 <TIM_Base_SetConfig+0xc0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d108      	bne.n	8002d2a <TIM_Base_SetConfig+0x42>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <TIM_Base_SetConfig+0xb8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00b      	beq.n	8002d4a <TIM_Base_SetConfig+0x62>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d38:	d007      	beq.n	8002d4a <TIM_Base_SetConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <TIM_Base_SetConfig+0xbc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_Base_SetConfig+0x62>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <TIM_Base_SetConfig+0xc0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d108      	bne.n	8002d5c <TIM_Base_SetConfig+0x74>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a07      	ldr	r2, [pc, #28]	@ (8002da0 <TIM_Base_SetConfig+0xb8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d103      	bne.n	8002d90 <TIM_Base_SetConfig+0xa8>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	615a      	str	r2, [r3, #20]
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800

08002dac <TIM_OC1_SetConfig>:
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f023 0201 	bic.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	621a      	str	r2, [r3, #32]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 0302 	bic.w	r3, r3, #2
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a1c      	ldr	r2, [pc, #112]	@ (8002e74 <TIM_OC1_SetConfig+0xc8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10c      	bne.n	8002e22 <TIM_OC1_SetConfig+0x76>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0308 	bic.w	r3, r3, #8
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a13      	ldr	r2, [pc, #76]	@ (8002e74 <TIM_OC1_SetConfig+0xc8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d111      	bne.n	8002e4e <TIM_OC1_SetConfig+0xa2>
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	619a      	str	r2, [r3, #24]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	621a      	str	r2, [r3, #32]
 8002e68:	bf00      	nop
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40012c00 	.word	0x40012c00

08002e78 <TIM_OC2_SetConfig>:
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f023 0210 	bic.w	r2, r3, #16
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	621a      	str	r2, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0320 	bic.w	r3, r3, #32
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <TIM_OC2_SetConfig+0xd0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10d      	bne.n	8002ef4 <TIM_OC2_SetConfig+0x7c>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <TIM_OC2_SetConfig+0xd0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d113      	bne.n	8002f24 <TIM_OC2_SetConfig+0xac>
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	619a      	str	r2, [r3, #24]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	621a      	str	r2, [r3, #32]
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	40012c00 	.word	0x40012c00

08002f4c <TIM_OC3_SetConfig>:
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	621a      	str	r2, [r3, #32]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800301c <TIM_OC3_SetConfig+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10d      	bne.n	8002fc6 <TIM_OC3_SetConfig+0x7a>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <TIM_OC3_SetConfig+0xd0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d113      	bne.n	8002ff6 <TIM_OC3_SetConfig+0xaa>
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	61da      	str	r2, [r3, #28]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	63da      	str	r2, [r3, #60]	@ 0x3c
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	621a      	str	r2, [r3, #32]
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40012c00 	.word	0x40012c00

08003020 <TIM_OC4_SetConfig>:
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	621a      	str	r2, [r3, #32]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <TIM_OC4_SetConfig+0x98>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d109      	bne.n	8003094 <TIM_OC4_SetConfig+0x74>
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	61da      	str	r2, [r3, #28]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	621a      	str	r2, [r3, #32]
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00

080030bc <TIM_TI1_ConfigInputStage>:
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f023 0201 	bic.w	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 030a 	bic.w	r3, r3, #10
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	619a      	str	r2, [r3, #24]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	621a      	str	r2, [r3, #32]
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <TIM_TI2_ConfigInputStage>:
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f023 0210 	bic.w	r2, r3, #16
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	621a      	str	r2, [r3, #32]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	031b      	lsls	r3, r3, #12
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	619a      	str	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <TIM_ITRx_SetConfig>:
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	f043 0307 	orr.w	r3, r3, #7
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <TIM_ETR_SetConfig>:
 80031aa:	b480      	push	{r7}
 80031ac:	b087      	sub	sp, #28
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	021a      	lsls	r2, r3, #8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIMEx_MasterConfigSynchronization>:
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e046      	b.n	800328e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00e      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324c:	d009      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a12      	ldr	r2, [pc, #72]	@ (800329c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d004      	beq.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a10      	ldr	r2, [pc, #64]	@ (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10c      	bne.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4313      	orrs	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800328c:	2300      	movs	r3, #0
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800

080032a4 <HAL_UART_Init>:
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e042      	b.n	800333c <HAL_UART_Init+0x98>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_Init+0x2c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd ffe4 	bl	8001298 <HAL_UART_MspInit>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	@ 0x24
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f82b 	bl	8003344 <UART_SetConfig>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032fc:	611a      	str	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800330c:	615a      	str	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	635a      	str	r2, [r3, #52]	@ 0x34
 800333a:	2300      	movs	r3, #0
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_SetConfig>:
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	611a      	str	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800337e:	f023 030c 	bic.w	r3, r3, #12
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	430b      	orrs	r3, r1
 800338a:	60d3      	str	r3, [r2, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	615a      	str	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003458 <UART_SetConfig+0x114>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d103      	bne.n	80033b4 <UART_SetConfig+0x70>
 80033ac:	f7ff f982 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	e002      	b.n	80033ba <UART_SetConfig+0x76>
 80033b4:	f7ff f96a 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	4a22      	ldr	r2, [pc, #136]	@ (800345c <UART_SetConfig+0x118>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	0119      	lsls	r1, r3, #4
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f0:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <UART_SetConfig+0x118>)
 80033f2:	fba3 0302 	umull	r0, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2064      	movs	r0, #100	@ 0x64
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	@ 0x32
 8003404:	4a15      	ldr	r2, [pc, #84]	@ (800345c <UART_SetConfig+0x118>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003410:	4419      	add	r1, r3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <UART_SetConfig+0x118>)
 800342a:	fba3 0302 	umull	r0, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2064      	movs	r0, #100	@ 0x64
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	3332      	adds	r3, #50	@ 0x32
 800343c:	4a07      	ldr	r2, [pc, #28]	@ (800345c <UART_SetConfig+0x118>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	440a      	add	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40013800 	.word	0x40013800
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003464:	4904      	ldr	r1, [pc, #16]	@ (8003478 <MX_FATFS_Init+0x18>)
 8003466:	4805      	ldr	r0, [pc, #20]	@ (800347c <MX_FATFS_Init+0x1c>)
 8003468:	f004 fea4 	bl	80081b4 <FATFS_LinkDriver>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	4b03      	ldr	r3, [pc, #12]	@ (8003480 <MX_FATFS_Init+0x20>)
 8003472:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200003b4 	.word	0x200003b4
 800347c:	2000000c 	.word	0x2000000c
 8003480:	200003b0 	.word	0x200003b0

08003484 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003488:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f9d4 	bl	800384c <SD_disk_initialize>
 80034a4:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 faac 	bl	8003a18 <SD_disk_status>
 80034c0:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4603      	mov	r3, r0
 80034d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80034da:	7bf8      	ldrb	r0, [r7, #15]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	f000 faad 	bl	8003a40 <SD_disk_read>
 80034e6:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4603      	mov	r3, r0
 80034fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003500:	7bf8      	ldrb	r0, [r7, #15]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	f000 fb04 	bl	8003b14 <SD_disk_write>
 800350c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	603a      	str	r2, [r7, #0]
 8003520:	71fb      	strb	r3, [r7, #7]
 8003522:	460b      	mov	r3, r1
 8003524:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003526:	79b9      	ldrb	r1, [r7, #6]
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fb75 	bl	8003c1c <SD_disk_ioctl>
 8003532:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	Write_GPIO(SD_CS_PORT, SD_CS_PIN, HIGH);
 8003540:	2201      	movs	r2, #1
 8003542:	2104      	movs	r1, #4
 8003544:	2001      	movs	r0, #1
 8003546:	f7fd fb09 	bl	8000b5c <Write_GPIO>
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}

0800354e <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	af00      	add	r7, sp, #0
	Write_GPIO(SD_CS_PORT, SD_CS_PIN, LOW);
 8003552:	2200      	movs	r2, #0
 8003554:	2104      	movs	r1, #4
 8003556:	2001      	movs	r0, #1
 8003558:	f7fd fb00 	bl	8000b5c <Write_GPIO>
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}

08003560 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
	SPI1_TX(&data, 1);
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd fb14 	bl	8000b9c <SPI1_TX>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
	SPI1_TX(buffer, len);
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd fb05 	bl	8000b9c <SPI1_TX>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
  uint8_t data;
  SPI1_RX(&data, 1);
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	2101      	movs	r1, #1
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fb17 	bl	8000bd8 <SPI1_RX>
  return data;
 80035aa:	79fb      	ldrb	r3, [r7, #7]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80035bc:	f7ff ffed 	bl	800359a <SPI_RxByte>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	701a      	strb	r2, [r3, #0]
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <SD_ReadyWait+0x30>)
 80035d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80035dc:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80035de:	f7ff ffdc 	bl	800359a <SPI_RxByte>
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	2bff      	cmp	r3, #255	@ 0xff
 80035ea:	d003      	beq.n	80035f4 <SD_ReadyWait+0x24>
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <SD_ReadyWait+0x30>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f4      	bne.n	80035de <SD_ReadyWait+0xe>
  return res;
 80035f4:	79fb      	ldrb	r3, [r7, #7]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200003ba 	.word	0x200003ba

08003604 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
	Init_GPIO(SD_CS_PORT, SD_CS_PIN, OUT2, O_GP_PP);
 800360a:	2300      	movs	r3, #0
 800360c:	2202      	movs	r2, #2
 800360e:	2104      	movs	r1, #4
 8003610:	2001      	movs	r0, #1
 8003612:	f7fd fa59 	bl	8000ac8 <Init_GPIO>
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8003616:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800361a:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800361c:	f7ff ff97 	bl	800354e <DESELECT>
  for(int i = 0; i < 10; i++)
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	e005      	b.n	8003632 <SD_PowerOn+0x2e>
  {
    SPI_TxByte(0xFF);
 8003626:	20ff      	movs	r0, #255	@ 0xff
 8003628:	f7ff ff9a 	bl	8003560 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	3301      	adds	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b09      	cmp	r3, #9
 8003636:	ddf6      	ble.n	8003626 <SD_PowerOn+0x22>
  }
  /* slave select */
  SELECT();
 8003638:	f7ff ff80 	bl	800353c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800363c:	2340      	movs	r3, #64	@ 0x40
 800363e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8003650:	2395      	movs	r3, #149	@ 0x95
 8003652:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8003654:	463b      	mov	r3, r7
 8003656:	2106      	movs	r1, #6
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff8f 	bl	800357c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800365e:	e002      	b.n	8003666 <SD_PowerOn+0x62>
  {
    cnt--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3b01      	subs	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8003666:	f7ff ff98 	bl	800359a <SPI_RxByte>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d002      	beq.n	8003676 <SD_PowerOn+0x72>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f4      	bne.n	8003660 <SD_PowerOn+0x5c>
  }
  DESELECT();
 8003676:	f7ff ff6a 	bl	800354e <DESELECT>
  SPI_TxByte(0XFF);
 800367a:	20ff      	movs	r0, #255	@ 0xff
 800367c:	f7ff ff70 	bl	8003560 <SPI_TxByte>
  PowerFlag = 1;
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <SD_PowerOn+0x8c>)
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200003bd 	.word	0x200003bd

08003694 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8003698:	4b03      	ldr	r3, [pc, #12]	@ (80036a8 <SD_PowerOff+0x14>)
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	200003bd 	.word	0x200003bd

080036ac <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return PowerFlag;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <SD_CheckPower+0x10>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	200003bd 	.word	0x200003bd

080036c0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80036ca:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <SD_RxDataBlock+0x58>)
 80036cc:	22c8      	movs	r2, #200	@ 0xc8
 80036ce:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80036d0:	f7ff ff63 	bl	800359a <SPI_RxByte>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2bff      	cmp	r3, #255	@ 0xff
 80036dc:	d103      	bne.n	80036e6 <SD_RxDataBlock+0x26>
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <SD_RxDataBlock+0x58>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f4      	bne.n	80036d0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80036ea:	d001      	beq.n	80036f0 <SD_RxDataBlock+0x30>
 80036ec:	2300      	movs	r3, #0
 80036ee:	e00f      	b.n	8003710 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ff5c 	bl	80035b4 <SPI_RxBytePtr>
  } while(len--);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	603a      	str	r2, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f4      	bne.n	80036f0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8003706:	f7ff ff48 	bl	800359a <SPI_RxByte>
  SPI_RxByte();
 800370a:	f7ff ff46 	bl	800359a <SPI_RxByte>
  return TRUE;
 800370e:	2301      	movs	r3, #1
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200003b8 	.word	0x200003b8

0800371c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800372c:	f7ff ff50 	bl	80035d0 <SD_ReadyWait>
 8003730:	4603      	mov	r3, r0
 8003732:	2bff      	cmp	r3, #255	@ 0xff
 8003734:	d001      	beq.n	800373a <SD_TxDataBlock+0x1e>
 8003736:	2300      	movs	r3, #0
 8003738:	e02f      	b.n	800379a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff0f 	bl	8003560 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	2bfd      	cmp	r3, #253	@ 0xfd
 8003746:	d020      	beq.n	800378a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8003748:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff15 	bl	800357c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8003752:	f7ff ff22 	bl	800359a <SPI_RxByte>
    SPI_RxByte();
 8003756:	f7ff ff20 	bl	800359a <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800375a:	e00b      	b.n	8003774 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800375c:	f7ff ff1d 	bl	800359a <SPI_RxByte>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2b05      	cmp	r3, #5
 800376c:	d006      	beq.n	800377c <SD_TxDataBlock+0x60>
      i++;
 800376e:	7bbb      	ldrb	r3, [r7, #14]
 8003770:	3301      	adds	r3, #1
 8003772:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8003774:	7bbb      	ldrb	r3, [r7, #14]
 8003776:	2b40      	cmp	r3, #64	@ 0x40
 8003778:	d9f0      	bls.n	800375c <SD_TxDataBlock+0x40>
 800377a:	e000      	b.n	800377e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800377c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800377e:	bf00      	nop
 8003780:	f7ff ff0b 	bl	800359a <SPI_RxByte>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0fa      	beq.n	8003780 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	2b05      	cmp	r3, #5
 8003792:	d101      	bne.n	8003798 <SD_TxDataBlock+0x7c>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <SD_TxDataBlock+0x7e>

  return FALSE;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	6039      	str	r1, [r7, #0]
 80037ac:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80037ae:	f7ff ff0f 	bl	80035d0 <SD_ReadyWait>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2bff      	cmp	r3, #255	@ 0xff
 80037b6:	d001      	beq.n	80037bc <SD_SendCmd+0x1a>
 80037b8:	23ff      	movs	r3, #255	@ 0xff
 80037ba:	e042      	b.n	8003842 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fece 	bl	8003560 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	0e1b      	lsrs	r3, r3, #24
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fec8 	bl	8003560 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fec2 	bl	8003560 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff febc 	bl	8003560 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff feb7 	bl	8003560 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	2b40      	cmp	r3, #64	@ 0x40
 80037f6:	d102      	bne.n	80037fe <SD_SendCmd+0x5c>
 80037f8:	2395      	movs	r3, #149	@ 0x95
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e007      	b.n	800380e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b48      	cmp	r3, #72	@ 0x48
 8003802:	d102      	bne.n	800380a <SD_SendCmd+0x68>
 8003804:	2387      	movs	r3, #135	@ 0x87
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e001      	b.n	800380e <SD_SendCmd+0x6c>
  else crc = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fea5 	bl	8003560 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2b4c      	cmp	r3, #76	@ 0x4c
 800381a:	d101      	bne.n	8003820 <SD_SendCmd+0x7e>
 800381c:	f7ff febd 	bl	800359a <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8003820:	230a      	movs	r3, #10
 8003822:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8003824:	f7ff feb9 	bl	800359a <SPI_RxByte>
 8003828:	4603      	mov	r3, r0
 800382a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800382c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003830:	2b00      	cmp	r3, #0
 8003832:	da05      	bge.n	8003840 <SD_SendCmd+0x9e>
 8003834:	7bbb      	ldrb	r3, [r7, #14]
 8003836:	3b01      	subs	r3, #1
 8003838:	73bb      	strb	r3, [r7, #14]
 800383a:	7bbb      	ldrb	r3, [r7, #14]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f1      	bne.n	8003824 <SD_SendCmd+0x82>

  return res;
 8003840:	7b7b      	ldrb	r3, [r7, #13]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <SD_disk_initialize+0x14>
 800385c:	2301      	movs	r3, #1
 800385e:	e0d1      	b.n	8003a04 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8003860:	4b6a      	ldr	r3, [pc, #424]	@ (8003a0c <SD_disk_initialize+0x1c0>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <SD_disk_initialize+0x2a>
 800386e:	4b67      	ldr	r3, [pc, #412]	@ (8003a0c <SD_disk_initialize+0x1c0>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	e0c6      	b.n	8003a04 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8003876:	f7ff fec5 	bl	8003604 <SD_PowerOn>
  /* slave select */
  SELECT();
 800387a:	f7ff fe5f 	bl	800353c <SELECT>
  /* check disk type */
  type = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003882:	2100      	movs	r1, #0
 8003884:	2040      	movs	r0, #64	@ 0x40
 8003886:	f7ff ff8c 	bl	80037a2 <SD_SendCmd>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	f040 80a1 	bne.w	80039d4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8003892:	4b5f      	ldr	r3, [pc, #380]	@ (8003a10 <SD_disk_initialize+0x1c4>)
 8003894:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003898:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800389a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800389e:	2048      	movs	r0, #72	@ 0x48
 80038a0:	f7ff ff7f 	bl	80037a2 <SD_SendCmd>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d155      	bne.n	8003956 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
 80038ae:	e00c      	b.n	80038ca <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80038b0:	7bfc      	ldrb	r4, [r7, #15]
 80038b2:	f7ff fe72 	bl	800359a <SPI_RxByte>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	f104 0310 	add.w	r3, r4, #16
 80038be:	443b      	add	r3, r7
 80038c0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d9ef      	bls.n	80038b0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80038d0:	7abb      	ldrb	r3, [r7, #10]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d17e      	bne.n	80039d4 <SD_disk_initialize+0x188>
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	2baa      	cmp	r3, #170	@ 0xaa
 80038da:	d17b      	bne.n	80039d4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80038dc:	2100      	movs	r1, #0
 80038de:	2077      	movs	r0, #119	@ 0x77
 80038e0:	f7ff ff5f 	bl	80037a2 <SD_SendCmd>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d807      	bhi.n	80038fa <SD_disk_initialize+0xae>
 80038ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80038ee:	2069      	movs	r0, #105	@ 0x69
 80038f0:	f7ff ff57 	bl	80037a2 <SD_SendCmd>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80038fa:	4b45      	ldr	r3, [pc, #276]	@ (8003a10 <SD_disk_initialize+0x1c4>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ec      	bne.n	80038dc <SD_disk_initialize+0x90>
 8003902:	e000      	b.n	8003906 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003904:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003906:	4b42      	ldr	r3, [pc, #264]	@ (8003a10 <SD_disk_initialize+0x1c4>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d062      	beq.n	80039d4 <SD_disk_initialize+0x188>
 800390e:	2100      	movs	r1, #0
 8003910:	207a      	movs	r0, #122	@ 0x7a
 8003912:	f7ff ff46 	bl	80037a2 <SD_SendCmd>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d15b      	bne.n	80039d4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e00c      	b.n	800393c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8003922:	7bfc      	ldrb	r4, [r7, #15]
 8003924:	f7ff fe39 	bl	800359a <SPI_RxByte>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	f104 0310 	add.w	r3, r4, #16
 8003930:	443b      	add	r3, r7
 8003932:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	3301      	adds	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d9ef      	bls.n	8003922 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003942:	7a3b      	ldrb	r3, [r7, #8]
 8003944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <SD_disk_initialize+0x104>
 800394c:	230c      	movs	r3, #12
 800394e:	e000      	b.n	8003952 <SD_disk_initialize+0x106>
 8003950:	2304      	movs	r3, #4
 8003952:	73bb      	strb	r3, [r7, #14]
 8003954:	e03e      	b.n	80039d4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003956:	2100      	movs	r1, #0
 8003958:	2077      	movs	r0, #119	@ 0x77
 800395a:	f7ff ff22 	bl	80037a2 <SD_SendCmd>
 800395e:	4603      	mov	r3, r0
 8003960:	2b01      	cmp	r3, #1
 8003962:	d808      	bhi.n	8003976 <SD_disk_initialize+0x12a>
 8003964:	2100      	movs	r1, #0
 8003966:	2069      	movs	r0, #105	@ 0x69
 8003968:	f7ff ff1b 	bl	80037a2 <SD_SendCmd>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d801      	bhi.n	8003976 <SD_disk_initialize+0x12a>
 8003972:	2302      	movs	r3, #2
 8003974:	e000      	b.n	8003978 <SD_disk_initialize+0x12c>
 8003976:	2301      	movs	r3, #1
 8003978:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800397a:	7bbb      	ldrb	r3, [r7, #14]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d10e      	bne.n	800399e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003980:	2100      	movs	r1, #0
 8003982:	2077      	movs	r0, #119	@ 0x77
 8003984:	f7ff ff0d 	bl	80037a2 <SD_SendCmd>
 8003988:	4603      	mov	r3, r0
 800398a:	2b01      	cmp	r3, #1
 800398c:	d80e      	bhi.n	80039ac <SD_disk_initialize+0x160>
 800398e:	2100      	movs	r1, #0
 8003990:	2069      	movs	r0, #105	@ 0x69
 8003992:	f7ff ff06 	bl	80037a2 <SD_SendCmd>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <SD_disk_initialize+0x160>
 800399c:	e00c      	b.n	80039b8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800399e:	2100      	movs	r1, #0
 80039a0:	2041      	movs	r0, #65	@ 0x41
 80039a2:	f7ff fefe 	bl	80037a2 <SD_SendCmd>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80039ac:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <SD_disk_initialize+0x1c4>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e2      	bne.n	800397a <SD_disk_initialize+0x12e>
 80039b4:	e000      	b.n	80039b8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80039b6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80039b8:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <SD_disk_initialize+0x1c4>)
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <SD_disk_initialize+0x184>
 80039c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039c4:	2050      	movs	r0, #80	@ 0x50
 80039c6:	f7ff feec 	bl	80037a2 <SD_SendCmd>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <SD_disk_initialize+0x188>
 80039d0:	2300      	movs	r3, #0
 80039d2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80039d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a14 <SD_disk_initialize+0x1c8>)
 80039d6:	7bbb      	ldrb	r3, [r7, #14]
 80039d8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80039da:	f7ff fdb8 	bl	800354e <DESELECT>
  SPI_RxByte();
 80039de:	f7ff fddc 	bl	800359a <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80039e2:	7bbb      	ldrb	r3, [r7, #14]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <SD_disk_initialize+0x1c0>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <SD_disk_initialize+0x1c0>)
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e001      	b.n	80039fe <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80039fa:	f7ff fe4b 	bl	8003694 <SD_PowerOff>
  }
  return Stat;
 80039fe:	4b03      	ldr	r3, [pc, #12]	@ (8003a0c <SD_disk_initialize+0x1c0>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd90      	pop	{r4, r7, pc}
 8003a0c:	20000020 	.word	0x20000020
 8003a10:	200003b8 	.word	0x200003b8
 8003a14:	200003bc 	.word	0x200003bc

08003a18 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SD_disk_status+0x14>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e002      	b.n	8003a32 <SD_disk_status+0x1a>
  return Stat;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	@ (8003a3c <SD_disk_status+0x24>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	20000020 	.word	0x20000020

08003a40 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <SD_disk_read+0x1c>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <SD_disk_read+0x20>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	e051      	b.n	8003b04 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <SD_disk_read+0xcc>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <SD_disk_read+0x32>
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e048      	b.n	8003b04 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003a72:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <SD_disk_read+0xd0>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <SD_disk_read+0x44>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	025b      	lsls	r3, r3, #9
 8003a82:	607b      	str	r3, [r7, #4]

  SELECT();
 8003a84:	f7ff fd5a 	bl	800353c <SELECT>

  if (count == 1)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d111      	bne.n	8003ab2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	2051      	movs	r0, #81	@ 0x51
 8003a92:	f7ff fe86 	bl	80037a2 <SD_SendCmd>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d129      	bne.n	8003af0 <SD_disk_read+0xb0>
 8003a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aa0:	68b8      	ldr	r0, [r7, #8]
 8003aa2:	f7ff fe0d 	bl	80036c0 <SD_RxDataBlock>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d021      	beq.n	8003af0 <SD_disk_read+0xb0>
 8003aac:	2300      	movs	r3, #0
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	e01e      	b.n	8003af0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	2052      	movs	r0, #82	@ 0x52
 8003ab6:	f7ff fe74 	bl	80037a2 <SD_SendCmd>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d117      	bne.n	8003af0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8003ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ac4:	68b8      	ldr	r0, [r7, #8]
 8003ac6:	f7ff fdfb 	bl	80036c0 <SD_RxDataBlock>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <SD_disk_read+0xa6>
        buff += 512;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ad6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ed      	bne.n	8003ac0 <SD_disk_read+0x80>
 8003ae4:	e000      	b.n	8003ae8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8003ae6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	204c      	movs	r0, #76	@ 0x4c
 8003aec:	f7ff fe59 	bl	80037a2 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8003af0:	f7ff fd2d 	bl	800354e <DESELECT>
  SPI_RxByte();
 8003af4:	f7ff fd51 	bl	800359a <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000020 	.word	0x20000020
 8003b10:	200003bc 	.word	0x200003bc

08003b14 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <SD_disk_write+0x1c>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <SD_disk_write+0x20>
 8003b30:	2304      	movs	r3, #4
 8003b32:	e06b      	b.n	8003c0c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003b34:	4b37      	ldr	r3, [pc, #220]	@ (8003c14 <SD_disk_write+0x100>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <SD_disk_write+0x32>
 8003b42:	2303      	movs	r3, #3
 8003b44:	e062      	b.n	8003c0c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003b46:	4b33      	ldr	r3, [pc, #204]	@ (8003c14 <SD_disk_write+0x100>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <SD_disk_write+0x44>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e059      	b.n	8003c0c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003b58:	4b2f      	ldr	r3, [pc, #188]	@ (8003c18 <SD_disk_write+0x104>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <SD_disk_write+0x56>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	025b      	lsls	r3, r3, #9
 8003b68:	607b      	str	r3, [r7, #4]

  SELECT();
 8003b6a:	f7ff fce7 	bl	800353c <SELECT>

  if (count == 1)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d110      	bne.n	8003b96 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	2058      	movs	r0, #88	@ 0x58
 8003b78:	f7ff fe13 	bl	80037a2 <SD_SendCmd>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d13a      	bne.n	8003bf8 <SD_disk_write+0xe4>
 8003b82:	21fe      	movs	r1, #254	@ 0xfe
 8003b84:	68b8      	ldr	r0, [r7, #8]
 8003b86:	f7ff fdc9 	bl	800371c <SD_TxDataBlock>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d033      	beq.n	8003bf8 <SD_disk_write+0xe4>
      count = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	e030      	b.n	8003bf8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <SD_disk_write+0x104>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2077      	movs	r0, #119	@ 0x77
 8003ba6:	f7ff fdfc 	bl	80037a2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003baa:	6839      	ldr	r1, [r7, #0]
 8003bac:	2057      	movs	r0, #87	@ 0x57
 8003bae:	f7ff fdf8 	bl	80037a2 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	2059      	movs	r0, #89	@ 0x59
 8003bb6:	f7ff fdf4 	bl	80037a2 <SD_SendCmd>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d11b      	bne.n	8003bf8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003bc0:	21fc      	movs	r1, #252	@ 0xfc
 8003bc2:	68b8      	ldr	r0, [r7, #8]
 8003bc4:	f7ff fdaa 	bl	800371c <SD_TxDataBlock>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <SD_disk_write+0xd0>
        buff += 512;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003bd4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ee      	bne.n	8003bc0 <SD_disk_write+0xac>
 8003be2:	e000      	b.n	8003be6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003be4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8003be6:	21fd      	movs	r1, #253	@ 0xfd
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7ff fd97 	bl	800371c <SD_TxDataBlock>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <SD_disk_write+0xe4>
      {
        count = 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8003bf8:	f7ff fca9 	bl	800354e <DESELECT>
  SPI_RxByte();
 8003bfc:	f7ff fccd 	bl	800359a <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000020 	.word	0x20000020
 8003c18:	200003bc 	.word	0x200003bc

08003c1c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b08b      	sub	sp, #44	@ 0x2c
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	603a      	str	r2, [r7, #0]
 8003c26:	71fb      	strb	r3, [r7, #7]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <SD_disk_ioctl+0x1e>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e113      	b.n	8003e62 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003c40:	79bb      	ldrb	r3, [r7, #6]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d124      	bne.n	8003c90 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d012      	beq.n	8003c74 <SD_disk_ioctl+0x58>
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	dc1a      	bgt.n	8003c88 <SD_disk_ioctl+0x6c>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <SD_disk_ioctl+0x40>
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d006      	beq.n	8003c68 <SD_disk_ioctl+0x4c>
 8003c5a:	e015      	b.n	8003c88 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003c5c:	f7ff fd1a 	bl	8003694 <SD_PowerOff>
      res = RES_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c66:	e0fa      	b.n	8003e5e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8003c68:	f7ff fccc 	bl	8003604 <SD_PowerOn>
      res = RES_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c72:	e0f4      	b.n	8003e5e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	1c5c      	adds	r4, r3, #1
 8003c78:	f7ff fd18 	bl	80036ac <SD_CheckPower>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c86:	e0ea      	b.n	8003e5e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c8e:	e0e6      	b.n	8003e5e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8003c90:	4b76      	ldr	r3, [pc, #472]	@ (8003e6c <SD_disk_ioctl+0x250>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0df      	b.n	8003e62 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8003ca2:	f7ff fc4b 	bl	800353c <SELECT>
    switch (ctrl)
 8003ca6:	79bb      	ldrb	r3, [r7, #6]
 8003ca8:	2b0d      	cmp	r3, #13
 8003caa:	f200 80c9 	bhi.w	8003e40 <SD_disk_ioctl+0x224>
 8003cae:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <SD_disk_ioctl+0x98>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003dab 	.word	0x08003dab
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003d9b 	.word	0x08003d9b
 8003cc0:	08003e41 	.word	0x08003e41
 8003cc4:	08003e41 	.word	0x08003e41
 8003cc8:	08003e41 	.word	0x08003e41
 8003ccc:	08003e41 	.word	0x08003e41
 8003cd0:	08003e41 	.word	0x08003e41
 8003cd4:	08003e41 	.word	0x08003e41
 8003cd8:	08003e41 	.word	0x08003e41
 8003cdc:	08003e41 	.word	0x08003e41
 8003ce0:	08003dbd 	.word	0x08003dbd
 8003ce4:	08003de1 	.word	0x08003de1
 8003ce8:	08003e05 	.word	0x08003e05
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003cec:	2100      	movs	r1, #0
 8003cee:	2049      	movs	r0, #73	@ 0x49
 8003cf0:	f7ff fd57 	bl	80037a2 <SD_SendCmd>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 80a6 	bne.w	8003e48 <SD_disk_ioctl+0x22c>
 8003cfc:	f107 030c 	add.w	r3, r7, #12
 8003d00:	2110      	movs	r1, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fcdc 	bl	80036c0 <SD_RxDataBlock>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 809c 	beq.w	8003e48 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8003d10:	7b3b      	ldrb	r3, [r7, #12]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10d      	bne.n	8003d36 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003d1a:	7d7b      	ldrb	r3, [r7, #21]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	7d3b      	ldrb	r3, [r7, #20]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003d2c:	8bfb      	ldrh	r3, [r7, #30]
 8003d2e:	029a      	lsls	r2, r3, #10
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e02d      	b.n	8003d92 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003d36:	7c7b      	ldrb	r3, [r7, #17]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	7dbb      	ldrb	r3, [r7, #22]
 8003d40:	09db      	lsrs	r3, r3, #7
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	7d7b      	ldrb	r3, [r7, #21]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f003 0306 	and.w	r3, r3, #6
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3302      	adds	r3, #2
 8003d5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003d5e:	7d3b      	ldrb	r3, [r7, #20]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	7cbb      	ldrb	r3, [r7, #18]
 8003d72:	029b      	lsls	r3, r3, #10
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3301      	adds	r3, #1
 8003d82:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003d84:	8bfa      	ldrh	r2, [r7, #30]
 8003d86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d8a:	3b09      	subs	r3, #9
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8003d98:	e056      	b.n	8003e48 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003da8:	e055      	b.n	8003e56 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003daa:	f7ff fc11 	bl	80035d0 <SD_ReadyWait>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2bff      	cmp	r3, #255	@ 0xff
 8003db2:	d14b      	bne.n	8003e4c <SD_disk_ioctl+0x230>
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003dba:	e047      	b.n	8003e4c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	2049      	movs	r0, #73	@ 0x49
 8003dc0:	f7ff fcef 	bl	80037a2 <SD_SendCmd>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d142      	bne.n	8003e50 <SD_disk_ioctl+0x234>
 8003dca:	2110      	movs	r1, #16
 8003dcc:	6a38      	ldr	r0, [r7, #32]
 8003dce:	f7ff fc77 	bl	80036c0 <SD_RxDataBlock>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03b      	beq.n	8003e50 <SD_disk_ioctl+0x234>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003dde:	e037      	b.n	8003e50 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003de0:	2100      	movs	r1, #0
 8003de2:	204a      	movs	r0, #74	@ 0x4a
 8003de4:	f7ff fcdd 	bl	80037a2 <SD_SendCmd>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d132      	bne.n	8003e54 <SD_disk_ioctl+0x238>
 8003dee:	2110      	movs	r1, #16
 8003df0:	6a38      	ldr	r0, [r7, #32]
 8003df2:	f7ff fc65 	bl	80036c0 <SD_RxDataBlock>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02b      	beq.n	8003e54 <SD_disk_ioctl+0x238>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003e02:	e027      	b.n	8003e54 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003e04:	2100      	movs	r1, #0
 8003e06:	207a      	movs	r0, #122	@ 0x7a
 8003e08:	f7ff fccb 	bl	80037a2 <SD_SendCmd>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003e18:	e00b      	b.n	8003e32 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8003e1a:	6a3c      	ldr	r4, [r7, #32]
 8003e1c:	1c63      	adds	r3, r4, #1
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	f7ff fbbb 	bl	800359a <SPI_RxByte>
 8003e24:	4603      	mov	r3, r0
 8003e26:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003e32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d9ef      	bls.n	8003e1a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8003e40:	2304      	movs	r3, #4
 8003e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003e46:	e006      	b.n	8003e56 <SD_disk_ioctl+0x23a>
      break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <SD_disk_ioctl+0x23a>
      break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <SD_disk_ioctl+0x23a>
      break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <SD_disk_ioctl+0x23a>
      break;
 8003e54:	bf00      	nop
    }
    DESELECT();
 8003e56:	f7ff fb7a 	bl	800354e <DESELECT>
    SPI_RxByte();
 8003e5a:	f7ff fb9e 	bl	800359a <SPI_RxByte>
  }
  return res;
 8003e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	372c      	adds	r7, #44	@ 0x2c
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000020 	.word	0x20000020

08003e70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	4a08      	ldr	r2, [pc, #32]	@ (8003ea0 <disk_status+0x30>)
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	79fa      	ldrb	r2, [r7, #7]
 8003e88:	4905      	ldr	r1, [pc, #20]	@ (8003ea0 <disk_status+0x30>)
 8003e8a:	440a      	add	r2, r1
 8003e8c:	7a12      	ldrb	r2, [r2, #8]
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4798      	blx	r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200005e0 	.word	0x200005e0

08003ea4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003eec <disk_initialize+0x48>)
 8003eb6:	5cd3      	ldrb	r3, [r2, r3]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d111      	bne.n	8003ee0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8003eec <disk_initialize+0x48>)
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <disk_initialize+0x48>)
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	79fa      	ldrb	r2, [r7, #7]
 8003ed2:	4906      	ldr	r1, [pc, #24]	@ (8003eec <disk_initialize+0x48>)
 8003ed4:	440a      	add	r2, r1
 8003ed6:	7a12      	ldrb	r2, [r2, #8]
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4798      	blx	r3
 8003edc:	4603      	mov	r3, r0
 8003ede:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200005e0 	.word	0x200005e0

08003ef0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <disk_read+0x3c>)
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	689c      	ldr	r4, [r3, #8]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <disk_read+0x3c>)
 8003f10:	4413      	add	r3, r2
 8003f12:	7a18      	ldrb	r0, [r3, #8]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	47a0      	blx	r4
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200005e0 	.word	0x200005e0

08003f30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	4a0a      	ldr	r2, [pc, #40]	@ (8003f6c <disk_write+0x3c>)
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	68dc      	ldr	r4, [r3, #12]
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <disk_write+0x3c>)
 8003f50:	4413      	add	r3, r2
 8003f52:	7a18      	ldrb	r0, [r3, #8]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	47a0      	blx	r4
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200005e0 	.word	0x200005e0

08003f70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	603a      	str	r2, [r7, #0]
 8003f7a:	71fb      	strb	r3, [r7, #7]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	4a09      	ldr	r2, [pc, #36]	@ (8003fa8 <disk_ioctl+0x38>)
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	79fa      	ldrb	r2, [r7, #7]
 8003f8e:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <disk_ioctl+0x38>)
 8003f90:	440a      	add	r2, r1
 8003f92:	7a10      	ldrb	r0, [r2, #8]
 8003f94:	79b9      	ldrb	r1, [r7, #6]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	4798      	blx	r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200005e0 	.word	0x200005e0

08003fac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003fc0:	e007      	b.n	8003fd2 <mem_cpy+0x26>
		*d++ = *s++;
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	1c53      	adds	r3, r2, #1
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	6179      	str	r1, [r7, #20]
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	1e5a      	subs	r2, r3, #1
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f2      	bne.n	8003fc2 <mem_cpy+0x16>
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003ff8:	e005      	b.n	8004006 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	617a      	str	r2, [r7, #20]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1e5a      	subs	r2, r3, #1
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f4      	bne.n	8003ffa <mem_set+0x12>
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	@ 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004034:	bf00      	nop
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <mem_cmp+0x40>
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	61fa      	str	r2, [r7, #28]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	61ba      	str	r2, [r7, #24]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	1acb      	subs	r3, r1, r3
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ec      	beq.n	8004036 <mem_cmp+0x1a>
	return r;
 800405c:	697b      	ldr	r3, [r7, #20]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3724      	adds	r7, #36	@ 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004072:	e002      	b.n	800407a <chk_chr+0x12>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3301      	adds	r3, #1
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <chk_chr+0x26>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4293      	cmp	r3, r2
 800408c:	d1f2      	bne.n	8004074 <chk_chr+0xc>
	return *str;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	781b      	ldrb	r3, [r3, #0]
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e03b      	b.n	8004128 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80040b0:	4931      	ldr	r1, [pc, #196]	@ (8004178 <chk_lock+0xdc>)
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02c      	beq.n	800411e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80040c4:	492c      	ldr	r1, [pc, #176]	@ (8004178 <chk_lock+0xdc>)
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d120      	bne.n	8004122 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80040e0:	4925      	ldr	r1, [pc, #148]	@ (8004178 <chk_lock+0xdc>)
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3304      	adds	r3, #4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f8:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d111      	bne.n	8004122 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80040fe:	491e      	ldr	r1, [pc, #120]	@ (8004178 <chk_lock+0xdc>)
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	3308      	adds	r3, #8
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004116:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004118:	429a      	cmp	r2, r3
 800411a:	d102      	bne.n	8004122 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800411c:	e007      	b.n	800412e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3301      	adds	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d9c0      	bls.n	80040b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d109      	bne.n	8004148 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <chk_lock+0xa4>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d101      	bne.n	8004144 <chk_lock+0xa8>
 8004140:	2300      	movs	r3, #0
 8004142:	e013      	b.n	800416c <chk_lock+0xd0>
 8004144:	2312      	movs	r3, #18
 8004146:	e011      	b.n	800416c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <chk_lock+0xca>
 800414e:	490a      	ldr	r1, [pc, #40]	@ (8004178 <chk_lock+0xdc>)
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	330a      	adds	r3, #10
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004164:	d101      	bne.n	800416a <chk_lock+0xce>
 8004166:	2310      	movs	r3, #16
 8004168:	e000      	b.n	800416c <chk_lock+0xd0>
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	200003c8 	.word	0x200003c8

0800417c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	e002      	b.n	800418e <enq_lock+0x12>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3301      	adds	r3, #1
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d809      	bhi.n	80041a8 <enq_lock+0x2c>
 8004194:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <enq_lock+0x44>)
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ef      	bne.n	8004188 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	bf14      	ite	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	2300      	moveq	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200003c8 	.word	0x200003c8

080041c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e02e      	b.n	8004232 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80041d4:	4958      	ldr	r1, [pc, #352]	@ (8004338 <inc_lock+0x174>)
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d11d      	bne.n	800422c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80041f0:	4951      	ldr	r1, [pc, #324]	@ (8004338 <inc_lock+0x174>)
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	3304      	adds	r3, #4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004208:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800420a:	429a      	cmp	r2, r3
 800420c:	d10e      	bne.n	800422c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800420e:	494a      	ldr	r1, [pc, #296]	@ (8004338 <inc_lock+0x174>)
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4613      	mov	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3308      	adds	r3, #8
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004226:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8004228:	429a      	cmp	r2, r3
 800422a:	d006      	beq.n	800423a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d9cd      	bls.n	80041d4 <inc_lock+0x10>
 8004238:	e000      	b.n	800423c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800423a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d148      	bne.n	80042d4 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e002      	b.n	800424e <inc_lock+0x8a>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3301      	adds	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d809      	bhi.n	8004268 <inc_lock+0xa4>
 8004254:	4938      	ldr	r1, [pc, #224]	@ (8004338 <inc_lock+0x174>)
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4613      	mov	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1ef      	bne.n	8004248 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d101      	bne.n	8004272 <inc_lock+0xae>
 800426e:	2300      	movs	r3, #0
 8004270:	e05d      	b.n	800432e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	482f      	ldr	r0, [pc, #188]	@ (8004338 <inc_lock+0x174>)
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4403      	add	r3, r0
 8004288:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004290:	6899      	ldr	r1, [r3, #8]
 8004292:	4829      	ldr	r0, [pc, #164]	@ (8004338 <inc_lock+0x174>)
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4613      	mov	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4403      	add	r3, r0
 80042a0:	3304      	adds	r3, #4
 80042a2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042aa:	88d8      	ldrh	r0, [r3, #6]
 80042ac:	4922      	ldr	r1, [pc, #136]	@ (8004338 <inc_lock+0x174>)
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	3308      	adds	r3, #8
 80042bc:	4602      	mov	r2, r0
 80042be:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80042c0:	491d      	ldr	r1, [pc, #116]	@ (8004338 <inc_lock+0x174>)
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	330a      	adds	r3, #10
 80042d0:	2200      	movs	r2, #0
 80042d2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <inc_lock+0x130>
 80042da:	4917      	ldr	r1, [pc, #92]	@ (8004338 <inc_lock+0x174>)
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4613      	mov	r3, r2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	330a      	adds	r3, #10
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <inc_lock+0x130>
 80042f0:	2300      	movs	r3, #0
 80042f2:	e01c      	b.n	800432e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <inc_lock+0x14e>
 80042fa:	490f      	ldr	r1, [pc, #60]	@ (8004338 <inc_lock+0x174>)
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4613      	mov	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	330a      	adds	r3, #10
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	b299      	uxth	r1, r3
 8004310:	e001      	b.n	8004316 <inc_lock+0x152>
 8004312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004316:	4808      	ldr	r0, [pc, #32]	@ (8004338 <inc_lock+0x174>)
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4403      	add	r3, r0
 8004324:	330a      	adds	r3, #10
 8004326:	460a      	mov	r2, r1
 8004328:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3301      	adds	r3, #1
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	200003c8 	.word	0x200003c8

0800433c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d82e      	bhi.n	80043ae <dec_lock+0x72>
		n = Files[i].ctr;
 8004350:	491b      	ldr	r1, [pc, #108]	@ (80043c0 <dec_lock+0x84>)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	330a      	adds	r3, #10
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004364:	89fb      	ldrh	r3, [r7, #14]
 8004366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436a:	d101      	bne.n	8004370 <dec_lock+0x34>
 800436c:	2300      	movs	r3, #0
 800436e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004370:	89fb      	ldrh	r3, [r7, #14]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <dec_lock+0x40>
 8004376:	89fb      	ldrh	r3, [r7, #14]
 8004378:	3b01      	subs	r3, #1
 800437a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800437c:	4910      	ldr	r1, [pc, #64]	@ (80043c0 <dec_lock+0x84>)
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	330a      	adds	r3, #10
 800438c:	89fa      	ldrh	r2, [r7, #14]
 800438e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004390:	89fb      	ldrh	r3, [r7, #14]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d108      	bne.n	80043a8 <dec_lock+0x6c>
 8004396:	490a      	ldr	r1, [pc, #40]	@ (80043c0 <dec_lock+0x84>)
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	737b      	strb	r3, [r7, #13]
 80043ac:	e001      	b.n	80043b2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043ae:	2302      	movs	r3, #2
 80043b0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	200003c8 	.word	0x200003c8

080043c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e016      	b.n	8004400 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043d2:	4910      	ldr	r1, [pc, #64]	@ (8004414 <clear_lock+0x50>)
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d108      	bne.n	80043fa <clear_lock+0x36>
 80043e8:	490a      	ldr	r1, [pc, #40]	@ (8004414 <clear_lock+0x50>)
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d9e5      	bls.n	80043d2 <clear_lock+0xe>
	}
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	200003c8 	.word	0x200003c8

08004418 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d040      	beq.n	80044b2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004440:	7858      	ldrb	r0, [r3, #1]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	2301      	movs	r3, #1
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	f7ff fd72 	bl	8003f30 <disk_write>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <sync_window+0x40>
			res = FR_DISK_ERR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e02c      	b.n	80044b2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445e:	2200      	movs	r2, #0
 8004460:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	429a      	cmp	r2, r3
 8004478:	d21b      	bcs.n	80044b2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004480:	78db      	ldrb	r3, [r3, #3]
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e012      	b.n	80044ac <sync_window+0x94>
					wsect += fs->fsize;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449a:	7858      	ldrb	r0, [r3, #1]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	2301      	movs	r3, #1
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	f7ff fd45 	bl	8003f30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d8e9      	bhi.n	8004486 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d01e      	beq.n	8004516 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ff9d 	bl	8004418 <sync_window>
 80044de:	4603      	mov	r3, r0
 80044e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ee:	7858      	ldrb	r0, [r3, #1]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	2301      	movs	r3, #1
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	f7ff fcfb 	bl	8003ef0 <disk_read>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004510:	461a      	mov	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ff75 	bl	8004418 <sync_window>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 80ad 	bne.w	8004694 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b03      	cmp	r3, #3
 8004544:	f040 8098 	bne.w	8004678 <sync_fs+0x158>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454e:	795b      	ldrb	r3, [r3, #5]
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 8091 	bne.w	8004678 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455e:	895b      	ldrh	r3, [r3, #10]
 8004560:	461a      	mov	r2, r3
 8004562:	2100      	movs	r1, #0
 8004564:	f7ff fd40 	bl	8003fe8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2255      	movs	r2, #85	@ 0x55
 800456c:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	22aa      	movs	r2, #170	@ 0xaa
 8004574:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2252      	movs	r2, #82	@ 0x52
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2252      	movs	r2, #82	@ 0x52
 8004582:	705a      	strb	r2, [r3, #1]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2261      	movs	r2, #97	@ 0x61
 8004588:	709a      	strb	r2, [r3, #2]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2241      	movs	r2, #65	@ 0x41
 800458e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2272      	movs	r2, #114	@ 0x72
 8004594:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2272      	movs	r2, #114	@ 0x72
 800459c:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2241      	movs	r2, #65	@ 0x41
 80045a4:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2261      	movs	r2, #97	@ 0x61
 80045ac:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	b29b      	uxth	r3, r3
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	b29b      	uxth	r3, r3
 8004618:	b2da      	uxtb	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	b2da      	uxtb	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	0e1b      	lsrs	r3, r3, #24
 800463c:	b2da      	uxtb	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	3301      	adds	r3, #1
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004654:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800465c:	7858      	ldrb	r0, [r3, #1]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004668:	2301      	movs	r3, #1
 800466a:	f7ff fc61 	bl	8003f30 <disk_write>
			fs->fsi_flag = 0;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004674:	2200      	movs	r2, #0
 8004676:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2200      	movs	r2, #0
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fc73 	bl	8003f70 <disk_ioctl>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004694:	7bfb      	ldrb	r3, [r7, #15]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	3b02      	subs	r3, #2
 80046ac:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	3b02      	subs	r3, #2
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d301      	bcc.n	80046c2 <clust2sect+0x24>
 80046be:	2300      	movs	r3, #0
 80046c0:	e00c      	b.n	80046dc <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c8:	789b      	ldrb	r3, [r3, #2]
 80046ca:	461a      	mov	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	fb03 f202 	mul.w	r2, r3, r2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	4413      	add	r3, r2
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b086      	sub	sp, #24
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d906      	bls.n	8004704 <get_fat+0x1e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <get_fat+0x24>
		val = 1;	/* Internal error */
 8004704:	2301      	movs	r3, #1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e0e3      	b.n	80048d2 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b03      	cmp	r3, #3
 800471a:	f000 8097 	beq.w	800484c <get_fat+0x166>
 800471e:	2b03      	cmp	r3, #3
 8004720:	f300 80cd 	bgt.w	80048be <get_fat+0x1d8>
 8004724:	2b01      	cmp	r3, #1
 8004726:	d002      	beq.n	800472e <get_fat+0x48>
 8004728:	2b02      	cmp	r3, #2
 800472a:	d05e      	beq.n	80047ea <get_fat+0x104>
 800472c:	e0c7      	b.n	80048be <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474a:	895b      	ldrh	r3, [r3, #10]
 800474c:	4619      	mov	r1, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	fbb3 f3f1 	udiv	r3, r3, r1
 8004754:	4413      	add	r3, r2
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff feaf 	bl	80044bc <move_window>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	f040 80af 	bne.w	80048c4 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	60fa      	str	r2, [r7, #12]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004772:	8952      	ldrh	r2, [r2, #10]
 8004774:	fbb3 f1f2 	udiv	r1, r3, r2
 8004778:	fb01 f202 	mul.w	r2, r1, r2
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	5cd3      	ldrb	r3, [r2, r3]
 8004782:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004792:	895b      	ldrh	r3, [r3, #10]
 8004794:	4619      	mov	r1, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	fbb3 f3f1 	udiv	r3, r3, r1
 800479c:	4413      	add	r3, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff fe8b 	bl	80044bc <move_window>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 808d 	bne.w	80048c8 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b4:	895b      	ldrh	r3, [r3, #10]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80047be:	fb01 f202 	mul.w	r2, r1, r2
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <get_fat+0xfa>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	e002      	b.n	80047e6 <get_fat+0x100>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e6:	617b      	str	r3, [r7, #20]
			break;
 80047e8:	e073      	b.n	80048d2 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f8:	895b      	ldrh	r3, [r3, #10]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	4619      	mov	r1, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	fbb3 f3f1 	udiv	r3, r3, r1
 8004806:	4413      	add	r3, r2
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fe56 	bl	80044bc <move_window>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d15a      	bne.n	80048cc <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004820:	8952      	ldrh	r2, [r2, #10]
 8004822:	fbb3 f1f2 	udiv	r1, r3, r2
 8004826:	fb01 f202 	mul.w	r2, r1, r2
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4413      	add	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3301      	adds	r3, #1
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	b21a      	sxth	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b21b      	sxth	r3, r3
 8004842:	4313      	orrs	r3, r2
 8004844:	b21b      	sxth	r3, r3
 8004846:	b29b      	uxth	r3, r3
 8004848:	617b      	str	r3, [r7, #20]
			break;
 800484a:	e042      	b.n	80048d2 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800485a:	895b      	ldrh	r3, [r3, #10]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	b29b      	uxth	r3, r3
 8004860:	4619      	mov	r1, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	fbb3 f3f1 	udiv	r3, r3, r1
 8004868:	4413      	add	r3, r2
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fe25 	bl	80044bc <move_window>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d12b      	bne.n	80048d0 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004882:	8952      	ldrh	r2, [r2, #10]
 8004884:	fbb3 f1f2 	udiv	r1, r3, r2
 8004888:	fb01 f202 	mul.w	r2, r1, r2
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	3303      	adds	r3, #3
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	061a      	lsls	r2, r3, #24
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3302      	adds	r3, #2
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	431a      	orrs	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3301      	adds	r3, #1
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	4313      	orrs	r3, r2
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	7812      	ldrb	r2, [r2, #0]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048ba:	617b      	str	r3, [r7, #20]
			break;
 80048bc:	e009      	b.n	80048d2 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 80048be:	2301      	movs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e006      	b.n	80048d2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048c4:	bf00      	nop
 80048c6:	e004      	b.n	80048d2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048c8:	bf00      	nop
 80048ca:	e002      	b.n	80048d2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80048d0:	bf00      	nop
		}
	}

	return val;
 80048d2:	697b      	ldr	r3, [r7, #20]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d906      	bls.n	80048fc <put_fat+0x20>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <put_fat+0x26>
		res = FR_INT_ERR;
 80048fc:	2302      	movs	r3, #2
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e13a      	b.n	8004b78 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b03      	cmp	r3, #3
 800490c:	f000 80d0 	beq.w	8004ab0 <put_fat+0x1d4>
 8004910:	2b03      	cmp	r3, #3
 8004912:	f300 8127 	bgt.w	8004b64 <put_fat+0x288>
 8004916:	2b01      	cmp	r3, #1
 8004918:	d003      	beq.n	8004922 <put_fat+0x46>
 800491a:	2b02      	cmp	r3, #2
 800491c:	f000 808f 	beq.w	8004a3e <put_fat+0x162>
 8004920:	e120      	b.n	8004b64 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4413      	add	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800493e:	895b      	ldrh	r3, [r3, #10]
 8004940:	4619      	mov	r1, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	fbb3 f3f1 	udiv	r3, r3, r1
 8004948:	4413      	add	r3, r2
 800494a:	4619      	mov	r1, r3
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fdb5 	bl	80044bc <move_window>
 8004952:	4603      	mov	r3, r0
 8004954:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004956:	7ffb      	ldrb	r3, [r7, #31]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 8106 	bne.w	8004b6a <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	617a      	str	r2, [r7, #20]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800496a:	8952      	ldrh	r2, [r2, #10]
 800496c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004970:	fb01 f202 	mul.w	r2, r1, r2
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <put_fat+0xc6>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	b25b      	sxtb	r3, r3
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	b25a      	sxtb	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	b25b      	sxtb	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	b25b      	sxtb	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	e001      	b.n	80049a6 <put_fat+0xca>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b0:	2201      	movs	r2, #1
 80049b2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c2:	895b      	ldrh	r3, [r3, #10]
 80049c4:	4619      	mov	r1, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80049cc:	4413      	add	r3, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff fd73 	bl	80044bc <move_window>
 80049d6:	4603      	mov	r3, r0
 80049d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049da:	7ffb      	ldrb	r3, [r7, #31]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f040 80c6 	bne.w	8004b6e <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e8:	895b      	ldrh	r3, [r3, #10]
 80049ea:	461a      	mov	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80049f2:	fb01 f202 	mul.w	r2, r1, r2
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <put_fat+0x134>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e00e      	b.n	8004a2e <put_fat+0x152>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	f023 030f 	bic.w	r3, r3, #15
 8004a1a:	b25a      	sxtb	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b25b      	sxtb	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a38:	2201      	movs	r2, #1
 8004a3a:	711a      	strb	r2, [r3, #4]
			break;
 8004a3c:	e09c      	b.n	8004b78 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4c:	895b      	ldrh	r3, [r3, #10]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	4619      	mov	r1, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff fd2c 	bl	80044bc <move_window>
 8004a64:	4603      	mov	r3, r0
 8004a66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a68:	7ffb      	ldrb	r3, [r7, #31]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 8081 	bne.w	8004b72 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a7a:	8952      	ldrh	r2, [r2, #10]
 8004a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a80:	fb01 f202 	mul.w	r2, r1, r2
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aaa:	2201      	movs	r2, #1
 8004aac:	711a      	strb	r2, [r3, #4]
			break;
 8004aae:	e063      	b.n	8004b78 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004abe:	895b      	ldrh	r3, [r3, #10]
 8004ac0:	089b      	lsrs	r3, r3, #2
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004acc:	4413      	add	r3, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff fcf3 	bl	80044bc <move_window>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d14a      	bne.n	8004b76 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004aea:	8952      	ldrh	r2, [r2, #10]
 8004aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004af0:	fb01 f202 	mul.w	r2, r1, r2
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	3303      	adds	r3, #3
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	061a      	lsls	r2, r3, #24
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	3302      	adds	r3, #2
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	3301      	adds	r3, #1
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	4313      	orrs	r3, r2
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	0c1a      	lsrs	r2, r3, #16
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3302      	adds	r3, #2
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	0e1a      	lsrs	r2, r3, #24
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3303      	adds	r3, #3
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b5e:	2201      	movs	r2, #1
 8004b60:	711a      	strb	r2, [r3, #4]
			break;
 8004b62:	e009      	b.n	8004b78 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8004b64:	2302      	movs	r3, #2
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e006      	b.n	8004b78 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004b6a:	bf00      	nop
 8004b6c:	e004      	b.n	8004b78 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004b76:	bf00      	nop
		}
	}

	return res;
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d906      	bls.n	8004ba0 <remove_chain+0x1e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <remove_chain+0x24>
		res = FR_INT_ERR;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	73fb      	strb	r3, [r7, #15]
 8004ba4:	e049      	b.n	8004c3a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004baa:	e03b      	b.n	8004c24 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fd99 	bl	80046e6 <get_fat>
 8004bb4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03b      	beq.n	8004c34 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d102      	bne.n	8004bc8 <remove_chain+0x46>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e038      	b.n	8004c3a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d102      	bne.n	8004bd6 <remove_chain+0x54>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e031      	b.n	8004c3a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fe7e 	bl	80048dc <put_fat>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d126      	bne.n	8004c38 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d013      	beq.n	8004c20 <remove_chain+0x9e>
				fs->free_clust++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	3301      	adds	r3, #1
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c08:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c10:	795b      	ldrb	r3, [r3, #5]
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c1e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d3bc      	bcc.n	8004bac <remove_chain+0x2a>
 8004c32:	e002      	b.n	8004c3a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8004c34:	bf00      	nop
 8004c36:	e000      	b.n	8004c3a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8004c38:	bf00      	nop
		}
	}

	return res;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d111      	bne.n	8004c78 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <create_chain+0x2e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d31d      	bcc.n	8004cae <create_chain+0x6a>
 8004c72:	2301      	movs	r3, #1
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e01a      	b.n	8004cae <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004c78:	6839      	ldr	r1, [r7, #0]
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fd33 	bl	80046e6 <get_fat>
 8004c80:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d801      	bhi.n	8004c8c <create_chain+0x48>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e07f      	b.n	8004d8c <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d101      	bne.n	8004c98 <create_chain+0x54>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	e079      	b.n	8004d8c <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d201      	bcs.n	8004caa <create_chain+0x66>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	e070      	b.n	8004d8c <create_chain+0x148>
		scl = clst;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d307      	bcc.n	8004cd6 <create_chain+0x92>
			ncl = 2;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d901      	bls.n	8004cd6 <create_chain+0x92>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e05a      	b.n	8004d8c <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fd04 	bl	80046e6 <get_fat>
 8004cde:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d002      	beq.n	8004cf4 <create_chain+0xb0>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <create_chain+0xb4>
			return cs;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	e049      	b.n	8004d8c <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d1d8      	bne.n	8004cb2 <create_chain+0x6e>
 8004d00:	2300      	movs	r3, #0
 8004d02:	e043      	b.n	8004d8c <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8004d04:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004d06:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8004d0a:	6979      	ldr	r1, [r7, #20]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fde5 	bl	80048dc <put_fat>
 8004d12:	4603      	mov	r3, r0
 8004d14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <create_chain+0xec>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff fdd8 	bl	80048dc <put_fat>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d121      	bne.n	8004d7a <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d01c      	beq.n	8004d8a <create_chain+0x146>
			fs->free_clust--;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004d60:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d68:	795b      	ldrb	r3, [r3, #5]
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d76:	715a      	strb	r2, [r3, #5]
 8004d78:	e007      	b.n	8004d8a <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <create_chain+0x142>
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
 8004d84:	e000      	b.n	8004d88 <create_chain+0x144>
 8004d86:	2301      	movs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004d8a:	697b      	ldr	r3, [r7, #20]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	3304      	adds	r3, #4
 8004da8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004db6:	895b      	ldrh	r3, [r3, #10]
 8004db8:	461a      	mov	r2, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004dcc:	7892      	ldrb	r2, [r2, #2]
 8004dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1d1a      	adds	r2, r3, #4
 8004dd8:	613a      	str	r2, [r7, #16]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <clmt_clust+0x54>
 8004de4:	2300      	movs	r3, #0
 8004de6:	e010      	b.n	8004e0a <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d307      	bcc.n	8004e00 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dfe:	e7e9      	b.n	8004dd4 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8004e00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	4413      	add	r3, r2
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e28:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d009      	beq.n	8004e4e <dir_sdi+0x3a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d301      	bcc.n	8004e52 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e0aa      	b.n	8004fa8 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d110      	bne.n	8004e7a <dir_sdi+0x66>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d107      	bne.n	8004e7a <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d115      	bne.n	8004eac <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8c:	891b      	ldrh	r3, [r3, #8]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d301      	bcc.n	8004e9a <dir_sdi+0x86>
			return FR_INT_ERR;
 8004e96:	2302      	movs	r3, #2
 8004e98:	e086      	b.n	8004fa8 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	e043      	b.n	8004f34 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb8:	895b      	ldrh	r3, [r3, #10]
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ecc:	789b      	ldrb	r3, [r3, #2]
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004ed4:	e021      	b.n	8004f1a <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fc00 	bl	80046e6 <get_fat>
 8004ee6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d101      	bne.n	8004ef4 <dir_sdi+0xe0>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e059      	b.n	8004fa8 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d909      	bls.n	8004f0e <dir_sdi+0xfa>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d301      	bcc.n	8004f12 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e04a      	b.n	8004fa8 <dir_sdi+0x194>
			idx -= ic;
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d2d9      	bcs.n	8004ed6 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6979      	ldr	r1, [r7, #20]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fbb6 	bl	800469e <clust2sect>
 8004f32:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <dir_sdi+0x136>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e02e      	b.n	8004fa8 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f56:	895b      	ldrh	r3, [r3, #10]
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f6e:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f86:	895b      	ldrh	r3, [r3, #10]
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f94:	fb01 f202 	mul.w	r2, r1, r2
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	015b      	lsls	r3, r3, #5
 8004f9c:	4403      	add	r3, r0
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fa4:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fc0:	88db      	ldrh	r3, [r3, #6]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <dir_next+0x2a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <dir_next+0x2e>
		return FR_NO_FILE;
 8004fda:	2304      	movs	r3, #4
 8004fdc:	e12e      	b.n	800523c <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fea:	895b      	ldrh	r3, [r3, #10]
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ff8:	fb01 f202 	mul.w	r2, r1, r2
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 80fa 	bne.w	80051f8 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	3301      	adds	r3, #1
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005014:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800502e:	891b      	ldrh	r3, [r3, #8]
 8005030:	461a      	mov	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4293      	cmp	r3, r2
 8005036:	f0c0 80df 	bcc.w	80051f8 <dir_next+0x248>
				return FR_NO_FILE;
 800503a:	2304      	movs	r3, #4
 800503c:	e0fe      	b.n	800523c <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800504a:	895b      	ldrh	r3, [r3, #10]
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	b29b      	uxth	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	fbb3 f3f2 	udiv	r3, r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005064:	7892      	ldrb	r2, [r2, #2]
 8005066:	3a01      	subs	r2, #1
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 80c4 	bne.w	80051f8 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f7ff fb2f 	bl	80046e6 <get_fat>
 8005088:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d801      	bhi.n	8005094 <dir_next+0xe4>
 8005090:	2302      	movs	r3, #2
 8005092:	e0d3      	b.n	800523c <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d101      	bne.n	80050a0 <dir_next+0xf0>
 800509c:	2301      	movs	r3, #1
 800509e:	e0cd      	b.n	800523c <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	f0c0 808e 	bcc.w	80051d2 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <dir_next+0x110>
 80050bc:	2304      	movs	r3, #4
 80050be:	e0bd      	b.n	800523c <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7ff fdb6 	bl	8004c44 <create_chain>
 80050d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <dir_next+0x134>
 80050e0:	2307      	movs	r3, #7
 80050e2:	e0ab      	b.n	800523c <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <dir_next+0x13e>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e0a6      	b.n	800523c <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d101      	bne.n	80050fa <dir_next+0x14a>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0a0      	b.n	800523c <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f988 	bl	8004418 <sync_window>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <dir_next+0x162>
 800510e:	2301      	movs	r3, #1
 8005110:	e094      	b.n	800523c <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005128:	895b      	ldrh	r3, [r3, #10]
 800512a:	461a      	mov	r2, r3
 800512c:	2100      	movs	r1, #0
 800512e:	f7fe ff5b 	bl	8003fe8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005140:	681c      	ldr	r4, [r3, #0]
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	4610      	mov	r0, r2
 8005146:	f7ff faaa 	bl	800469e <clust2sect>
 800514a:	4603      	mov	r3, r0
 800514c:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8005150:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e021      	b.n	800519c <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005164:	2201      	movs	r2, #1
 8005166:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f951 	bl	8004418 <sync_window>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <dir_next+0x1d0>
 800517c:	2301      	movs	r3, #1
 800517e:	e05d      	b.n	800523c <dir_next+0x28c>
						dp->fs->winsect++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800518c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800518e:	3201      	adds	r2, #1
 8005190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005194:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a8:	789b      	ldrb	r3, [r3, #2]
 80051aa:	461a      	mov	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d3d2      	bcc.n	8005158 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1acb      	subs	r3, r1, r3
 80051cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d8:	461a      	mov	r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6979      	ldr	r1, [r7, #20]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fa58 	bl	800469e <clust2sect>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005202:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521a:	895b      	ldrh	r3, [r3, #10]
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	b29b      	uxth	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	fbb3 f1f2 	udiv	r1, r3, r2
 8005228:	fb01 f202 	mul.w	r2, r1, r2
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	015b      	lsls	r3, r3, #5
 8005230:	4403      	add	r3, r0
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005238:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}

08005244 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800524e:	2100      	movs	r1, #0
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fddf 	bl	8004e14 <dir_sdi>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d135      	bne.n	80052cc <dir_alloc+0x88>
		n = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7ff f920 	bl	80044bc <move_window>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d121      	bne.n	80052ca <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2be5      	cmp	r3, #229	@ 0xe5
 8005292:	d006      	beq.n	80052a2 <dir_alloc+0x5e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d107      	bne.n	80052b2 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d102      	bne.n	80052b6 <dir_alloc+0x72>
 80052b0:	e00c      	b.n	80052cc <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80052b6:	2101      	movs	r1, #1
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fe79 	bl	8004fb0 <dir_next>
 80052be:	4603      	mov	r3, r0
 80052c0:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0cd      	beq.n	8005264 <dir_alloc+0x20>
 80052c8:	e000      	b.n	80052cc <dir_alloc+0x88>
			if (res != FR_OK) break;
 80052ca:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d101      	bne.n	80052d6 <dir_alloc+0x92>
 80052d2:	2307      	movs	r3, #7
 80052d4:	73fb      	strb	r3, [r7, #15]
	return res;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	331b      	adds	r3, #27
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	b21a      	sxth	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	331a      	adds	r3, #26
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b21b      	sxth	r3, r3
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b21b      	sxth	r3, r3
 8005300:	b29b      	uxth	r3, r3
 8005302:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d10f      	bne.n	8005330 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	3315      	adds	r3, #21
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	b21a      	sxth	r2, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b21b      	sxth	r3, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	b21b      	sxth	r3, r3
 8005326:	b29b      	uxth	r3, r3
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

	return cl;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	331a      	adds	r3, #26
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	331b      	adds	r3, #27
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	0c1a      	lsrs	r2, r3, #16
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3314      	adds	r3, #20
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	b29b      	uxth	r3, r3
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3315      	adds	r3, #21
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539a:	1e5a      	subs	r2, r3, #1
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	2301      	movs	r3, #1
 80053ae:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80053b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005460 <cmp_lfn+0xd8>)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4413      	add	r3, r2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	3301      	adds	r3, #1
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	b21a      	sxth	r2, r3
 80053c4:	4926      	ldr	r1, [pc, #152]	@ (8005460 <cmp_lfn+0xd8>)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	440b      	add	r3, r1
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	4619      	mov	r1, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	440b      	add	r3, r1
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	b21b      	sxth	r3, r3
 80053da:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d019      	beq.n	8005416 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80053e2:	89bb      	ldrh	r3, [r7, #12]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 ff2f 	bl	8008248 <ff_wtoupper>
 80053ea:	4603      	mov	r3, r0
 80053ec:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80053f2:	d80e      	bhi.n	8005412 <cmp_lfn+0x8a>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	617a      	str	r2, [r7, #20]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f002 ff20 	bl	8008248 <ff_wtoupper>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	89fb      	ldrh	r3, [r7, #14]
 800540e:	4293      	cmp	r3, r2
 8005410:	d008      	beq.n	8005424 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8005412:	2300      	movs	r3, #0
 8005414:	e01f      	b.n	8005456 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005416:	89bb      	ldrh	r3, [r7, #12]
 8005418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800541c:	4293      	cmp	r3, r2
 800541e:	d001      	beq.n	8005424 <cmp_lfn+0x9c>
 8005420:	2300      	movs	r3, #0
 8005422:	e018      	b.n	8005456 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3301      	adds	r3, #1
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d9bf      	bls.n	80053b0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <cmp_lfn+0xcc>
 800543c:	89fb      	ldrh	r3, [r7, #14]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <cmp_lfn+0xcc>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <cmp_lfn+0xcc>
		return 0;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005454:	2301      	movs	r3, #1
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	0800b104 	.word	0x0800b104

08005464 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005464:	b480      	push	{r7}
 8005466:	b089      	sub	sp, #36	@ 0x24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4611      	mov	r1, r2
 8005470:	461a      	mov	r2, r3
 8005472:	460b      	mov	r3, r1
 8005474:	71fb      	strb	r3, [r7, #7]
 8005476:	4613      	mov	r3, r2
 8005478:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	330d      	adds	r3, #13
 800547e:	79ba      	ldrb	r2, [r7, #6]
 8005480:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	330b      	adds	r3, #11
 8005486:	220f      	movs	r2, #15
 8005488:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	330c      	adds	r3, #12
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	331a      	adds	r3, #26
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	331b      	adds	r3, #27
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	1e5a      	subs	r2, r3, #1
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	82fb      	strh	r3, [r7, #22]
 80054b6:	2300      	movs	r3, #0
 80054b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80054ba:	8afb      	ldrh	r3, [r7, #22]
 80054bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <fit_lfn+0x70>
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	61fa      	str	r2, [r7, #28]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <fit_lfn+0xe4>)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4413      	add	r3, r2
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4413      	add	r3, r2
 80054e2:	8afa      	ldrh	r2, [r7, #22]
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	8afb      	ldrh	r3, [r7, #22]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b299      	uxth	r1, r3
 80054ee:	4a16      	ldr	r2, [pc, #88]	@ (8005548 <fit_lfn+0xe4>)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4413      	add	r3, r2
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	3301      	adds	r3, #1
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	4413      	add	r3, r2
 80054fc:	b2ca      	uxtb	r2, r1
 80054fe:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005500:	8afb      	ldrh	r3, [r7, #22]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <fit_lfn+0xa8>
 8005506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800550a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3301      	adds	r3, #1
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b0c      	cmp	r3, #12
 8005516:	d9d0      	bls.n	80054ba <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005518:	8afb      	ldrh	r3, [r7, #22]
 800551a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800551e:	4293      	cmp	r3, r2
 8005520:	d006      	beq.n	8005530 <fit_lfn+0xcc>
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <fit_lfn+0xd4>
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005536:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	79fa      	ldrb	r2, [r7, #7]
 800553c:	701a      	strb	r2, [r3, #0]
}
 800553e:	bf00      	nop
 8005540:	3724      	adds	r7, #36	@ 0x24
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	0800b104 	.word	0x0800b104

0800554c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	@ 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800555a:	220b      	movs	r2, #11
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7fe fd24 	bl	8003fac <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b05      	cmp	r3, #5
 8005568:	d92b      	bls.n	80055c2 <gen_numname+0x76>
		sr = seq;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800556e:	e022      	b.n	80055b6 <gen_numname+0x6a>
			wc = *lfn++;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	1c9a      	adds	r2, r3, #2
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800557a:	2300      	movs	r3, #0
 800557c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800557e:	e017      	b.n	80055b0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	005a      	lsls	r2, r3, #1
 8005584:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800558e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <gen_numname+0x5e>
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80055a4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80055a8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80055aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ac:	3301      	adds	r3, #1
 80055ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	d9e4      	bls.n	8005580 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1d8      	bne.n	8005570 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80055c2:	2307      	movs	r3, #7
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	3330      	adds	r3, #48	@ 0x30
 80055d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80055d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055da:	2b39      	cmp	r3, #57	@ 0x39
 80055dc:	d904      	bls.n	80055e8 <gen_numname+0x9c>
 80055de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055e2:	3307      	adds	r3, #7
 80055e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80055e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055ee:	3330      	adds	r3, #48	@ 0x30
 80055f0:	443b      	add	r3, r7
 80055f2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80055f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1df      	bne.n	80055c6 <gen_numname+0x7a>
	ns[i] = '~';
 8005606:	f107 0214 	add.w	r2, r7, #20
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	4413      	add	r3, r2
 800560e:	227e      	movs	r2, #126	@ 0x7e
 8005610:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005612:	2300      	movs	r3, #0
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
 8005616:	e002      	b.n	800561e <gen_numname+0xd2>
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	3301      	adds	r3, #1
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
 800561e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	429a      	cmp	r2, r3
 8005624:	d205      	bcs.n	8005632 <gen_numname+0xe6>
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	4413      	add	r3, r2
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b20      	cmp	r3, #32
 8005630:	d1f2      	bne.n	8005618 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	2b07      	cmp	r3, #7
 8005636:	d807      	bhi.n	8005648 <gen_numname+0xfc>
 8005638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800563e:	3330      	adds	r3, #48	@ 0x30
 8005640:	443b      	add	r3, r7
 8005642:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005646:	e000      	b.n	800564a <gen_numname+0xfe>
 8005648:	2120      	movs	r1, #32
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	460a      	mov	r2, r1
 8005656:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	2b07      	cmp	r3, #7
 800565c:	d9e9      	bls.n	8005632 <gen_numname+0xe6>
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	3730      	adds	r7, #48	@ 0x30
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005674:	230b      	movs	r3, #11
 8005676:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	0852      	lsrs	r2, r2, #1
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	4313      	orrs	r3, r2
 8005682:	b2da      	uxtb	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	1c59      	adds	r1, r3, #1
 8005688:	6079      	str	r1, [r7, #4]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	4413      	add	r3, r2
 800568e:	73fb      	strb	r3, [r7, #15]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	3b01      	subs	r3, #1
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1ed      	bne.n	8005678 <sum_sfn+0x10>
	return sum;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056b0:	2100      	movs	r1, #0
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fbae 	bl	8004e14 <dir_sdi>
 80056b8:	4603      	mov	r3, r0
 80056ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <dir_find+0x1e>
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	e0b8      	b.n	8005838 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80056c6:	23ff      	movs	r3, #255	@ 0xff
 80056c8:	753b      	strb	r3, [r7, #20]
 80056ca:	7d3b      	ldrb	r3, [r7, #20]
 80056cc:	757b      	strb	r3, [r7, #21]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056d8:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fe fee5 	bl	80044bc <move_window>
 80056f2:	4603      	mov	r3, r0
 80056f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8097 	bne.w	800582c <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800570e:	7dbb      	ldrb	r3, [r7, #22]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <dir_find+0x72>
 8005714:	2304      	movs	r3, #4
 8005716:	75fb      	strb	r3, [r7, #23]
 8005718:	e08d      	b.n	8005836 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	330b      	adds	r3, #11
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005724:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005726:	7dbb      	ldrb	r3, [r7, #22]
 8005728:	2be5      	cmp	r3, #229	@ 0xe5
 800572a:	d007      	beq.n	800573c <dir_find+0x94>
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <dir_find+0xa6>
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d008      	beq.n	800574e <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800573c:	23ff      	movs	r3, #255	@ 0xff
 800573e:	757b      	strb	r3, [r7, #21]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800574a:	849a      	strh	r2, [r3, #36]	@ 0x24
 800574c:	e063      	b.n	8005816 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d137      	bne.n	80057c4 <dir_find+0x11c>
				if (dp->lfn) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05a      	beq.n	8005816 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005760:	7dbb      	ldrb	r3, [r7, #22]
 8005762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d010      	beq.n	800578c <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	7b5b      	ldrb	r3, [r3, #13]
 800576e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005770:	7dbb      	ldrb	r3, [r7, #22]
 8005772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005776:	75bb      	strb	r3, [r7, #22]
 8005778:	7dbb      	ldrb	r3, [r7, #22]
 800577a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005782:	88da      	ldrh	r2, [r3, #6]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800578a:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800578c:	7dba      	ldrb	r2, [r7, #22]
 800578e:	7d7b      	ldrb	r3, [r7, #21]
 8005790:	429a      	cmp	r2, r3
 8005792:	d114      	bne.n	80057be <dir_find+0x116>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	330d      	adds	r3, #13
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	7d3a      	ldrb	r2, [r7, #20]
 800579c:	429a      	cmp	r2, r3
 800579e:	d10e      	bne.n	80057be <dir_find+0x116>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	6939      	ldr	r1, [r7, #16]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fdec 	bl	8005388 <cmp_lfn>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <dir_find+0x116>
 80057b6:	7d7b      	ldrb	r3, [r7, #21]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	e000      	b.n	80057c0 <dir_find+0x118>
 80057be:	23ff      	movs	r3, #255	@ 0xff
 80057c0:	757b      	strb	r3, [r7, #21]
 80057c2:	e028      	b.n	8005816 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80057c4:	7d7b      	ldrb	r3, [r7, #21]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <dir_find+0x132>
 80057ca:	6938      	ldr	r0, [r7, #16]
 80057cc:	f7ff ff4c 	bl	8005668 <sum_sfn>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	7d3b      	ldrb	r3, [r7, #20]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02a      	beq.n	8005830 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	330b      	adds	r3, #11
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <dir_find+0x15e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	220b      	movs	r2, #11
 80057f8:	4619      	mov	r1, r3
 80057fa:	6938      	ldr	r0, [r7, #16]
 80057fc:	f7fe fc0e 	bl	800401c <mem_cmp>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d016      	beq.n	8005834 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005806:	23ff      	movs	r3, #255	@ 0xff
 8005808:	757b      	strb	r3, [r7, #21]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005814:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005816:	2100      	movs	r1, #0
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fbc9 	bl	8004fb0 <dir_next>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f43f af58 	beq.w	80056da <dir_find+0x32>
 800582a:	e004      	b.n	8005836 <dir_find+0x18e>
		if (res != FR_OK) break;
 800582c:	bf00      	nop
 800582e:	e002      	b.n	8005836 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005834:	bf00      	nop

	return res;
 8005836:	7dfb      	ldrb	r3, [r7, #23]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	@ 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800585c:	f107 030c 	add.w	r3, r7, #12
 8005860:	220c      	movs	r2, #12
 8005862:	6a39      	ldr	r1, [r7, #32]
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fba1 	bl	8003fac <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d03b      	beq.n	80058ec <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	330b      	adds	r3, #11
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005882:	461a      	mov	r2, r3
 8005884:	2300      	movs	r3, #0
 8005886:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8005888:	2301      	movs	r3, #1
 800588a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800588c:	e013      	b.n	80058b6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800588e:	f107 010c 	add.w	r1, r7, #12
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	6a38      	ldr	r0, [r7, #32]
 8005898:	f7ff fe58 	bl	800554c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff03 	bl	80056a8 <dir_find>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80058a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80058b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b2:	3301      	adds	r3, #1
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	2b63      	cmp	r3, #99	@ 0x63
 80058ba:	d9e8      	bls.n	800588e <dir_register+0x4e>
 80058bc:	e000      	b.n	80058c0 <dir_register+0x80>
			if (res != FR_OK) break;
 80058be:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	2b64      	cmp	r3, #100	@ 0x64
 80058c4:	d101      	bne.n	80058ca <dir_register+0x8a>
 80058c6:	2307      	movs	r3, #7
 80058c8:	e0d8      	b.n	8005a7c <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80058ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d002      	beq.n	80058d8 <dir_register+0x98>
 80058d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80058d6:	e0d1      	b.n	8005a7c <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	330b      	adds	r3, #11
 80058dc:	7dfa      	ldrb	r2, [r7, #23]
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058e6:	461a      	mov	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d014      	beq.n	8005920 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80058f6:	2300      	movs	r3, #0
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058fa:	e002      	b.n	8005902 <dir_register+0xc2>
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	3301      	adds	r3, #1
 8005900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f5      	bne.n	80058fc <dir_register+0xbc>
		nent = (n + 25) / 13;
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	3319      	adds	r3, #25
 8005914:	4a5b      	ldr	r2, [pc, #364]	@ (8005a84 <dir_register+0x244>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
 800591e:	e001      	b.n	8005924 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005920:	2301      	movs	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fc8c 	bl	8005244 <dir_alloc>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005936:	2b00      	cmp	r3, #0
 8005938:	d15b      	bne.n	80059f2 <dir_register+0x1b2>
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	3b01      	subs	r3, #1
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d055      	beq.n	80059f2 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594c:	88db      	ldrh	r3, [r3, #6]
 800594e:	461a      	mov	r2, r3
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fa5c 	bl	8004e14 <dir_sdi>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005966:	2b00      	cmp	r3, #0
 8005968:	d143      	bne.n	80059f2 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fe78 	bl	8005668 <sum_sfn>
 8005978:	4603      	mov	r3, r0
 800597a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe fd94 	bl	80044bc <move_window>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800599a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d126      	bne.n	80059f0 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059a8:	6a18      	ldr	r0, [r3, #32]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b0:	6959      	ldr	r1, [r3, #20]
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	7efb      	ldrb	r3, [r7, #27]
 80059b8:	f7ff fd54 	bl	8005464 <fit_lfn>
				dp->fs->wflag = 1;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c8:	2201      	movs	r2, #1
 80059ca:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 80059cc:	2100      	movs	r1, #0
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff faee 	bl	8004fb0 <dir_next>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80059da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d107      	bne.n	80059f2 <dir_register+0x1b2>
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	3b01      	subs	r3, #1
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1c6      	bne.n	800597c <dir_register+0x13c>
 80059ee:	e000      	b.n	80059f2 <dir_register+0x1b2>
				if (res != FR_OK) break;
 80059f0:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80059f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d13e      	bne.n	8005a78 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7fe fd55 	bl	80044bc <move_window>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005a18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d12b      	bne.n	8005a78 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fadb 	bl	8003fe8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a38:	6958      	ldr	r0, [r3, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	220b      	movs	r2, #11
 8005a44:	4619      	mov	r1, r3
 8005a46:	f7fe fab1 	bl	8003fac <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	330b      	adds	r3, #11
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	f002 0218 	and.w	r2, r2, #24
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a74:	2201      	movs	r2, #1
 8005a76:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005a78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3730      	adds	r7, #48	@ 0x30
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	4ec4ec4f 	.word	0x4ec4ec4f

08005a88 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	@ 0x28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e002      	b.n	8005aa0 <create_name+0x18>
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005aa6:	d0f8      	beq.n	8005a9a <create_name+0x12>
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b5c      	cmp	r3, #92	@ 0x5c
 8005aae:	d0f4      	beq.n	8005a9a <create_name+0x12>
	lfn = dp->lfn;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	61ba      	str	r2, [r7, #24]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005ad0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ad2:	2b1f      	cmp	r3, #31
 8005ad4:	d92f      	bls.n	8005b36 <create_name+0xae>
 8005ad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ad8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ada:	d02c      	beq.n	8005b36 <create_name+0xae>
 8005adc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ade:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ae0:	d029      	beq.n	8005b36 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ae6:	d901      	bls.n	8005aec <create_name+0x64>
			return FR_INVALID_NAME;
 8005ae8:	2306      	movs	r3, #6
 8005aea:	e186      	b.n	8005dfa <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005aec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005af2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005af4:	2101      	movs	r1, #1
 8005af6:	4618      	mov	r0, r3
 8005af8:	f002 fb6c 	bl	80081d4 <ff_convert>
 8005afc:	4603      	mov	r3, r0
 8005afe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005b00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <create_name+0x82>
 8005b06:	2306      	movs	r3, #6
 8005b08:	e177      	b.n	8005dfa <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005b0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b0e:	d809      	bhi.n	8005b24 <create_name+0x9c>
 8005b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b12:	4619      	mov	r1, r3
 8005b14:	488e      	ldr	r0, [pc, #568]	@ (8005d50 <create_name+0x2c8>)
 8005b16:	f7fe faa7 	bl	8004068 <chk_chr>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <create_name+0x9c>
			return FR_INVALID_NAME;
 8005b20:	2306      	movs	r3, #6
 8005b22:	e16a      	b.n	8005dfa <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	617a      	str	r2, [r7, #20]
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b32:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005b34:	e7c5      	b.n	8005ac2 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	441a      	add	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005b40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b42:	2b1f      	cmp	r3, #31
 8005b44:	d801      	bhi.n	8005b4a <create_name+0xc2>
 8005b46:	2304      	movs	r3, #4
 8005b48:	e000      	b.n	8005b4c <create_name+0xc4>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005b50:	e011      	b.n	8005b76 <create_name+0xee>
		w = lfn[di - 1];
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d002      	beq.n	8005b70 <create_name+0xe8>
 8005b6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b6e:	d106      	bne.n	8005b7e <create_name+0xf6>
		di--;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1ea      	bne.n	8005b52 <create_name+0xca>
 8005b7c:	e000      	b.n	8005b80 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005b7e:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <create_name+0x102>
 8005b86:	2306      	movs	r3, #6
 8005b88:	e137      	b.n	8005dfa <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	220b      	movs	r2, #11
 8005ba0:	2120      	movs	r1, #32
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fa20 	bl	8003fe8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	e002      	b.n	8005bb4 <create_name+0x12c>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d0f5      	beq.n	8005bae <create_name+0x126>
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bce:	d0ee      	beq.n	8005bae <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <create_name+0x162>
 8005bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bda:	f043 0303 	orr.w	r3, r3, #3
 8005bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005be2:	e002      	b.n	8005bea <create_name+0x162>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <create_name+0x17c>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c02:	d1ef      	bne.n	8005be4 <create_name+0x15c>

	b = i = 0; ni = 8;
 8005c04:	2300      	movs	r3, #0
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005c0e:	2308      	movs	r3, #8
 8005c10:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	61ba      	str	r2, [r7, #24]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8091 	beq.w	8005d4c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d006      	beq.n	8005c3e <create_name+0x1b6>
 8005c30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c34:	d10a      	bne.n	8005c4c <create_name+0x1c4>
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d006      	beq.n	8005c4c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8005c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c42:	f043 0303 	orr.w	r3, r3, #3
 8005c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c4a:	e07e      	b.n	8005d4a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d203      	bcs.n	8005c5c <create_name+0x1d4>
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d123      	bne.n	8005ca4 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b0b      	cmp	r3, #11
 8005c60:	d106      	bne.n	8005c70 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8005c62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c66:	f043 0303 	orr.w	r3, r3, #3
 8005c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c6e:	e076      	b.n	8005d5e <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d005      	beq.n	8005c84 <create_name+0x1fc>
 8005c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c7c:	f043 0303 	orr.w	r3, r3, #3
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d867      	bhi.n	8005d5c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	2308      	movs	r3, #8
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	230b      	movs	r3, #11
 8005c96:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005c98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005ca2:	e052      	b.n	8005d4a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005ca4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca8:	d914      	bls.n	8005cd4 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cac:	2100      	movs	r1, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f002 fa90 	bl	80081d4 <ff_convert>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005cb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <create_name+0x240>
 8005cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cc0:	3b80      	subs	r3, #128	@ 0x80
 8005cc2:	4a24      	ldr	r2, [pc, #144]	@ (8005d54 <create_name+0x2cc>)
 8005cc4:	5cd3      	ldrb	r3, [r2, r3]
 8005cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005cd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <create_name+0x262>
 8005cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cdc:	4619      	mov	r1, r3
 8005cde:	481e      	ldr	r0, [pc, #120]	@ (8005d58 <create_name+0x2d0>)
 8005ce0:	f7fe f9c2 	bl	8004068 <chk_chr>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005cea:	235f      	movs	r3, #95	@ 0x5f
 8005cec:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cf2:	f043 0303 	orr.w	r3, r3, #3
 8005cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005cfa:	e01b      	b.n	8005d34 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005cfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cfe:	2b40      	cmp	r3, #64	@ 0x40
 8005d00:	d909      	bls.n	8005d16 <create_name+0x28e>
 8005d02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d04:	2b5a      	cmp	r3, #90	@ 0x5a
 8005d06:	d806      	bhi.n	8005d16 <create_name+0x28e>
					b |= 2;
 8005d08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d0c:	f043 0302 	orr.w	r3, r3, #2
 8005d10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005d14:	e00e      	b.n	8005d34 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d18:	2b60      	cmp	r3, #96	@ 0x60
 8005d1a:	d90b      	bls.n	8005d34 <create_name+0x2ac>
 8005d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d1e:	2b7a      	cmp	r3, #122	@ 0x7a
 8005d20:	d808      	bhi.n	8005d34 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8005d22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d30:	3b20      	subs	r3, #32
 8005d32:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	6239      	str	r1, [r7, #32]
 8005d42:	4413      	add	r3, r2
 8005d44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005d4a:	e762      	b.n	8005c12 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8005d4c:	bf00      	nop
 8005d4e:	e006      	b.n	8005d5e <create_name+0x2d6>
 8005d50:	0800acb0 	.word	0x0800acb0
 8005d54:	0800b084 	.word	0x0800b084
 8005d58:	0800acbc 	.word	0x0800acbc
			if (si > di) break;			/* No extension */
 8005d5c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2be5      	cmp	r3, #229	@ 0xe5
 8005d6a:	d105      	bne.n	8005d78 <create_name+0x2f0>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	2205      	movs	r2, #5
 8005d76:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d104      	bne.n	8005d88 <create_name+0x300>
 8005d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005d88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d005      	beq.n	8005da0 <create_name+0x318>
 8005d94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d105      	bne.n	8005dac <create_name+0x324>
		cf |= NS_LFN;
 8005da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005da4:	f043 0302 	orr.w	r3, r3, #2
 8005da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d117      	bne.n	8005de8 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005db8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <create_name+0x348>
 8005dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dc8:	f043 0310 	orr.w	r3, r3, #16
 8005dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d105      	bne.n	8005de8 <create_name+0x360>
 8005ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005de0:	f043 0308 	orr.w	r3, r3, #8
 8005de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	330b      	adds	r3, #11
 8005df2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005df6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005df8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3728      	adds	r7, #40	@ 0x28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop

08005e04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e14:	d003      	beq.n	8005e1e <follow_path+0x1a>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e1c:	d102      	bne.n	8005e24 <follow_path+0x20>
		path++;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b1f      	cmp	r3, #31
 8005e36:	d80c      	bhi.n	8005e52 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fe ffea 	bl	8004e14 <dir_sdi>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6153      	str	r3, [r2, #20]
 8005e50:	e049      	b.n	8005ee6 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e52:	463b      	mov	r3, r7
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fe16 	bl	8005a88 <create_name>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d13a      	bne.n	8005edc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fc1e 	bl	80056a8 <dir_find>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	7adb      	ldrb	r3, [r3, #11]
 8005e7a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d12b      	bne.n	8005ee0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d126      	bne.n	8005ee0 <follow_path+0xdc>
 8005e92:	2305      	movs	r3, #5
 8005e94:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005e96:	e023      	b.n	8005ee0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d120      	bne.n	8005ee4 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	330b      	adds	r3, #11
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8005eba:	2305      	movs	r3, #5
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	e012      	b.n	8005ee6 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fa08 	bl	80052e0 <ld_clust>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005eda:	e7ba      	b.n	8005e52 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005edc:	bf00      	nop
 8005ede:	e002      	b.n	8005ee6 <follow_path+0xe2>
				break;
 8005ee0:	bf00      	nop
 8005ee2:	e000      	b.n	8005ee6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ee4:	bf00      	nop
		}
	}

	return res;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8005efc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d031      	beq.n	8005f6a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e002      	b.n	8005f14 <get_ldnumber+0x24>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	3301      	adds	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b1f      	cmp	r3, #31
 8005f1a:	d903      	bls.n	8005f24 <get_ldnumber+0x34>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b3a      	cmp	r3, #58	@ 0x3a
 8005f22:	d1f4      	bne.n	8005f0e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b3a      	cmp	r3, #58	@ 0x3a
 8005f2a:	d11c      	bne.n	8005f66 <get_ldnumber+0x76>
			tp = *path;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	60fa      	str	r2, [r7, #12]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	3b30      	subs	r3, #48	@ 0x30
 8005f3c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d80e      	bhi.n	8005f62 <get_ldnumber+0x72>
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d10a      	bne.n	8005f62 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d107      	bne.n	8005f62 <get_ldnumber+0x72>
					vol = (int)i;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	e002      	b.n	8005f6c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f6a:	693b      	ldr	r3, [r7, #16]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
	...

08005f78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f88:	2200      	movs	r2, #0
 8005f8a:	711a      	strb	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f92:	461a      	mov	r2, r3
 8005f94:	f04f 33ff 	mov.w	r3, #4294967295
 8005f98:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fe fa8d 	bl	80044bc <move_window>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <check_fs+0x34>
		return 3;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e04a      	b.n	8006042 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	b21a      	sxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005fc0:	b21b      	sxth	r3, r3
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	4a21      	ldr	r2, [pc, #132]	@ (800604c <check_fs+0xd4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d001      	beq.n	8005fd0 <check_fs+0x58>
		return 2;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e038      	b.n	8006042 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3336      	adds	r3, #54	@ 0x36
 8005fd4:	3303      	adds	r3, #3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	061a      	lsls	r2, r3, #24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3336      	adds	r3, #54	@ 0x36
 8005fde:	3302      	adds	r3, #2
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3336      	adds	r3, #54	@ 0x36
 8005fea:	3301      	adds	r3, #1
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ffe:	4a14      	ldr	r2, [pc, #80]	@ (8006050 <check_fs+0xd8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d101      	bne.n	8006008 <check_fs+0x90>
		return 0;
 8006004:	2300      	movs	r3, #0
 8006006:	e01c      	b.n	8006042 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3352      	adds	r3, #82	@ 0x52
 800600c:	3303      	adds	r3, #3
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	061a      	lsls	r2, r3, #24
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3352      	adds	r3, #82	@ 0x52
 8006016:	3302      	adds	r3, #2
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3352      	adds	r3, #82	@ 0x52
 8006022:	3301      	adds	r3, #1
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	4313      	orrs	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8006030:	4313      	orrs	r3, r2
 8006032:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006036:	4a06      	ldr	r2, [pc, #24]	@ (8006050 <check_fs+0xd8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d101      	bne.n	8006040 <check_fs+0xc8>
		return 0;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <check_fs+0xca>

	return 1;
 8006040:	2301      	movs	r3, #1
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	ffffaa55 	.word	0xffffaa55
 8006050:	00544146 	.word	0x00544146

08006054 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b096      	sub	sp, #88	@ 0x58
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006068:	68b8      	ldr	r0, [r7, #8]
 800606a:	f7ff ff41 	bl	8005ef0 <get_ldnumber>
 800606e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006072:	2b00      	cmp	r3, #0
 8006074:	da01      	bge.n	800607a <find_volume+0x26>
 8006076:	230b      	movs	r3, #11
 8006078:	e311      	b.n	800669e <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800607a:	4a98      	ldr	r2, [pc, #608]	@ (80062dc <find_volume+0x288>)
 800607c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006082:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <find_volume+0x3a>
 800608a:	230c      	movs	r3, #12
 800608c:	e307      	b.n	800669e <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006092:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01c      	beq.n	80060da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fd fee1 	bl	8003e70 <disk_status>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80060b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10c      	bne.n	80060da <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <find_volume+0x82>
 80060c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80060d2:	230a      	movs	r3, #10
 80060d4:	e2e3      	b.n	800669e <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80060d6:	2300      	movs	r3, #0
 80060d8:	e2e1      	b.n	800669e <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fd fed3 	bl	8003ea4 <disk_initialize>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006104:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006110:	2303      	movs	r3, #3
 8006112:	e2c4      	b.n	800669e <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <find_volume+0xd6>
 800611a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8006126:	230a      	movs	r3, #10
 8006128:	e2b9      	b.n	800669e <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800612a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006130:	7858      	ldrb	r0, [r3, #1]
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006138:	330a      	adds	r3, #10
 800613a:	461a      	mov	r2, r3
 800613c:	2102      	movs	r1, #2
 800613e:	f7fd ff17 	bl	8003f70 <disk_ioctl>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10d      	bne.n	8006164 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614e:	895b      	ldrh	r3, [r3, #10]
 8006150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006154:	d306      	bcc.n	8006164 <find_volume+0x110>
 8006156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800615c:	895b      	ldrh	r3, [r3, #10]
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006162:	d901      	bls.n	8006168 <find_volume+0x114>
 8006164:	2301      	movs	r3, #1
 8006166:	e29a      	b.n	800669e <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800616c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800616e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006170:	f7ff ff02 	bl	8005f78 <check_fs>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800617a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800617e:	2b01      	cmp	r3, #1
 8006180:	d153      	bne.n	800622a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006182:	2300      	movs	r3, #0
 8006184:	643b      	str	r3, [r7, #64]	@ 0x40
 8006186:	e028      	b.n	80061da <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006188:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800618a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006192:	4413      	add	r3, r2
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	3304      	adds	r3, #4
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d012      	beq.n	80061c6 <find_volume+0x172>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	330b      	adds	r3, #11
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	061a      	lsls	r2, r3, #24
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	330a      	adds	r3, #10
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	431a      	orrs	r2, r3
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	3309      	adds	r3, #9
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	4313      	orrs	r3, r2
 80061bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061be:	3208      	adds	r2, #8
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	e000      	b.n	80061c8 <find_volume+0x174>
 80061c6:	2200      	movs	r2, #0
 80061c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	3358      	adds	r3, #88	@ 0x58
 80061ce:	443b      	add	r3, r7
 80061d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80061d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d6:	3301      	adds	r3, #1
 80061d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80061da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d9d3      	bls.n	8006188 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80061e0:	2300      	movs	r3, #0
 80061e2:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80061e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <find_volume+0x19c>
 80061ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ec:	3b01      	subs	r3, #1
 80061ee:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80061f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	3358      	adds	r3, #88	@ 0x58
 80061f6:	443b      	add	r3, r7
 80061f8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061fc:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80061fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <find_volume+0x1bc>
 8006204:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006206:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006208:	f7ff feb6 	bl	8005f78 <check_fs>
 800620c:	4603      	mov	r3, r0
 800620e:	e000      	b.n	8006212 <find_volume+0x1be>
 8006210:	2302      	movs	r3, #2
 8006212:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006216:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <find_volume+0x1d6>
 800621e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006220:	3301      	adds	r3, #1
 8006222:	643b      	str	r3, [r7, #64]	@ 0x40
 8006224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006226:	2b03      	cmp	r3, #3
 8006228:	d9e2      	bls.n	80061f0 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800622a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800622e:	2b03      	cmp	r3, #3
 8006230:	d101      	bne.n	8006236 <find_volume+0x1e2>
 8006232:	2301      	movs	r3, #1
 8006234:	e233      	b.n	800669e <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006236:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <find_volume+0x1ee>
 800623e:	230d      	movs	r3, #13
 8006240:	e22d      	b.n	800669e <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006244:	7b1b      	ldrb	r3, [r3, #12]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	b21a      	sxth	r2, r3
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	7adb      	ldrb	r3, [r3, #11]
 800624e:	b21b      	sxth	r3, r3
 8006250:	4313      	orrs	r3, r2
 8006252:	b21a      	sxth	r2, r3
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800625a:	895b      	ldrh	r3, [r3, #10]
 800625c:	b21b      	sxth	r3, r3
 800625e:	429a      	cmp	r2, r3
 8006260:	d001      	beq.n	8006266 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006262:	230d      	movs	r3, #13
 8006264:	e21b      	b.n	800669e <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	7ddb      	ldrb	r3, [r3, #23]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	b21a      	sxth	r2, r3
 800626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006270:	7d9b      	ldrb	r3, [r3, #22]
 8006272:	b21b      	sxth	r3, r3
 8006274:	4313      	orrs	r3, r2
 8006276:	b21b      	sxth	r3, r3
 8006278:	b29b      	uxth	r3, r3
 800627a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800627c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d112      	bne.n	80062a8 <find_volume+0x254>
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006288:	061a      	lsls	r2, r3, #24
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006290:	041b      	lsls	r3, r3, #16
 8006292:	431a      	orrs	r2, r3
 8006294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006296:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	4313      	orrs	r3, r2
 800629e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062a0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80062a4:	4313      	orrs	r3, r2
 80062a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ae:	461a      	mov	r2, r3
 80062b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062b2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	7c1a      	ldrb	r2, [r3, #16]
 80062b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062be:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c6:	78db      	ldrb	r3, [r3, #3]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d009      	beq.n	80062e0 <find_volume+0x28c>
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d2:	78db      	ldrb	r3, [r3, #3]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d003      	beq.n	80062e0 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80062d8:	230d      	movs	r3, #13
 80062da:	e1e0      	b.n	800669e <find_volume+0x64a>
 80062dc:	200003c0 	.word	0x200003c0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e6:	78db      	ldrb	r3, [r3, #3]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ec:	fb02 f303 	mul.w	r3, r2, r3
 80062f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	7b5a      	ldrb	r2, [r3, #13]
 80062f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fc:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006304:	789b      	ldrb	r3, [r3, #2]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00c      	beq.n	8006324 <find_volume+0x2d0>
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006310:	789b      	ldrb	r3, [r3, #2]
 8006312:	461a      	mov	r2, r3
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800631a:	789b      	ldrb	r3, [r3, #2]
 800631c:	3b01      	subs	r3, #1
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8006324:	230d      	movs	r3, #13
 8006326:	e1ba      	b.n	800669e <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	7c9b      	ldrb	r3, [r3, #18]
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	b21a      	sxth	r2, r3
 8006330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006332:	7c5b      	ldrb	r3, [r3, #17]
 8006334:	b21b      	sxth	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b21b      	sxth	r3, r3
 800633a:	b29a      	uxth	r2, r3
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006342:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634a:	891b      	ldrh	r3, [r3, #8]
 800634c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800634e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006352:	8952      	ldrh	r2, [r2, #10]
 8006354:	0952      	lsrs	r2, r2, #5
 8006356:	b292      	uxth	r2, r2
 8006358:	fbb3 f1f2 	udiv	r1, r3, r2
 800635c:	fb01 f202 	mul.w	r2, r1, r2
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8006368:	230d      	movs	r3, #13
 800636a:	e198      	b.n	800669e <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	7d1b      	ldrb	r3, [r3, #20]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	b21a      	sxth	r2, r3
 8006374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006376:	7cdb      	ldrb	r3, [r3, #19]
 8006378:	b21b      	sxth	r3, r3
 800637a:	4313      	orrs	r3, r2
 800637c:	b21b      	sxth	r3, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006384:	2b00      	cmp	r3, #0
 8006386:	d112      	bne.n	80063ae <find_volume+0x35a>
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800638e:	061a      	lsls	r2, r3, #24
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	431a      	orrs	r2, r3
 800639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	4313      	orrs	r3, r2
 80063a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80063ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b0:	7bdb      	ldrb	r3, [r3, #15]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	b21a      	sxth	r2, r3
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	7b9b      	ldrb	r3, [r3, #14]
 80063ba:	b21b      	sxth	r3, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	b21b      	sxth	r3, r3
 80063c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80063c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <find_volume+0x378>
 80063c8:	230d      	movs	r3, #13
 80063ca:	e168      	b.n	800669e <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80063cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80063ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d0:	4413      	add	r3, r2
 80063d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063d8:	8911      	ldrh	r1, [r2, #8]
 80063da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063e0:	8952      	ldrh	r2, [r2, #10]
 80063e2:	0952      	lsrs	r2, r2, #5
 80063e4:	b292      	uxth	r2, r2
 80063e6:	fbb1 f2f2 	udiv	r2, r1, r2
 80063ea:	b292      	uxth	r2, r2
 80063ec:	4413      	add	r3, r2
 80063ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80063f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d201      	bcs.n	80063fc <find_volume+0x3a8>
 80063f8:	230d      	movs	r3, #13
 80063fa:	e150      	b.n	800669e <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80063fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006404:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006408:	7892      	ldrb	r2, [r2, #2]
 800640a:	fbb3 f3f2 	udiv	r3, r3, r2
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <find_volume+0x3c6>
 8006416:	230d      	movs	r3, #13
 8006418:	e141      	b.n	800669e <find_volume+0x64a>
	fmt = FS_FAT12;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006426:	4293      	cmp	r3, r2
 8006428:	d902      	bls.n	8006430 <find_volume+0x3dc>
 800642a:	2302      	movs	r3, #2
 800642c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006436:	4293      	cmp	r3, r2
 8006438:	d902      	bls.n	8006440 <find_volume+0x3ec>
 800643a:	2303      	movs	r3, #3
 800643c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	3302      	adds	r3, #2
 8006444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800644a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006452:	461a      	mov	r2, r3
 8006454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006456:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006458:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800645a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800645c:	4413      	add	r3, r2
 800645e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006460:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006464:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006466:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646a:	4413      	add	r3, r2
 800646c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800646e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006472:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8006474:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006478:	2b03      	cmp	r3, #3
 800647a:	d124      	bne.n	80064c6 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006482:	891b      	ldrh	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <find_volume+0x438>
 8006488:	230d      	movs	r3, #13
 800648a:	e108      	b.n	800669e <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800648c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006492:	061a      	lsls	r2, r3, #24
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	431a      	orrs	r2, r3
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	4313      	orrs	r3, r2
 80064a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064aa:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80064ae:	4313      	orrs	r3, r2
 80064b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064b6:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c4:	e02b      	b.n	800651e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80064c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064cc:	891b      	ldrh	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <find_volume+0x482>
 80064d2:	230d      	movs	r3, #13
 80064d4:	e0e3      	b.n	800669e <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e0:	4413      	add	r3, r2
 80064e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064e8:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d105      	bne.n	80064fe <find_volume+0x4aa>
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	e00e      	b.n	800651c <find_volume+0x4c8>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006504:	695a      	ldr	r2, [r3, #20]
 8006506:	4613      	mov	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	4413      	add	r3, r2
 800650c:	085a      	lsrs	r2, r3, #1
 800650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800651c:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800652c:	895b      	ldrh	r3, [r3, #10]
 800652e:	4619      	mov	r1, r3
 8006530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006532:	440b      	add	r3, r1
 8006534:	3b01      	subs	r3, #1
 8006536:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006538:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800653c:	8949      	ldrh	r1, [r1, #10]
 800653e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006542:	429a      	cmp	r2, r3
 8006544:	d201      	bcs.n	800654a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8006546:	230d      	movs	r3, #13
 8006548:	e0a9      	b.n	800669e <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006550:	461a      	mov	r2, r3
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
 8006556:	6113      	str	r3, [r2, #16]
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006562:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006566:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656e:	2280      	movs	r2, #128	@ 0x80
 8006570:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006572:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006576:	2b03      	cmp	r3, #3
 8006578:	d17a      	bne.n	8006670 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	b21a      	sxth	r2, r3
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800658a:	b21b      	sxth	r3, r3
 800658c:	4313      	orrs	r3, r2
 800658e:	b21b      	sxth	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	d16d      	bne.n	8006670 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006596:	3301      	adds	r3, #1
 8006598:	4619      	mov	r1, r3
 800659a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800659c:	f7fd ff8e 	bl	80044bc <move_window>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d164      	bne.n	8006670 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ac:	2200      	movs	r2, #0
 80065ae:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	b21a      	sxth	r2, r3
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80065c0:	b21b      	sxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b21b      	sxth	r3, r3
 80065c6:	4a38      	ldr	r2, [pc, #224]	@ (80066a8 <find_volume+0x654>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d151      	bne.n	8006670 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	78db      	ldrb	r3, [r3, #3]
 80065d0:	061a      	lsls	r2, r3, #24
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	789b      	ldrb	r3, [r3, #2]
 80065d6:	041b      	lsls	r3, r3, #16
 80065d8:	431a      	orrs	r2, r3
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	4313      	orrs	r3, r2
 80065e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	4a30      	ldr	r2, [pc, #192]	@ (80066ac <find_volume+0x658>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d140      	bne.n	8006670 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80065f4:	061a      	lsls	r2, r3, #24
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	431a      	orrs	r2, r3
 8006600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006602:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	4313      	orrs	r3, r2
 800660a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800660c:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8006610:	4313      	orrs	r3, r2
 8006612:	4a27      	ldr	r2, [pc, #156]	@ (80066b0 <find_volume+0x65c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d12b      	bne.n	8006670 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800661e:	061a      	lsls	r2, r3, #24
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8006626:	041b      	lsls	r3, r3, #16
 8006628:	431a      	orrs	r2, r3
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	4313      	orrs	r3, r2
 8006634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006636:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800663a:	4313      	orrs	r3, r2
 800663c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800663e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006642:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800664a:	061a      	lsls	r2, r3, #24
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	431a      	orrs	r2, r3
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	4313      	orrs	r3, r2
 8006660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006662:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8006666:	4313      	orrs	r3, r2
 8006668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800666a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800666e:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006676:	461a      	mov	r2, r3
 8006678:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800667c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <find_volume+0x660>)
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	4b0b      	ldr	r3, [pc, #44]	@ (80066b4 <find_volume+0x660>)
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <find_volume+0x660>)
 800668c:	881a      	ldrh	r2, [r3, #0]
 800668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006694:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006696:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006698:	f7fd fe94 	bl	80043c4 <clear_lock>
#endif

	return FR_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3758      	adds	r7, #88	@ 0x58
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	ffffaa55 	.word	0xffffaa55
 80066ac:	41615252 	.word	0x41615252
 80066b0:	61417272 	.word	0x61417272
 80066b4:	200003c4 	.word	0x200003c4

080066b8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d02a      	beq.n	8006720 <validate+0x68>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d024      	beq.n	8006720 <validate+0x68>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01b      	beq.n	8006720 <validate+0x68>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f4:	88da      	ldrh	r2, [r3, #6]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066fc:	889b      	ldrh	r3, [r3, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d10e      	bne.n	8006720 <validate+0x68>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd fbad 	bl	8003e70 <disk_status>
 8006716:	4603      	mov	r3, r0
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006720:	2309      	movs	r3, #9
 8006722:	e000      	b.n	8006726 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006742:	f107 0310 	add.w	r3, r7, #16
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fbd2 	bl	8005ef0 <get_ldnumber>
 800674c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b00      	cmp	r3, #0
 8006752:	da01      	bge.n	8006758 <f_mount+0x28>
 8006754:	230b      	movs	r3, #11
 8006756:	e02f      	b.n	80067b8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006758:	4a19      	ldr	r2, [pc, #100]	@ (80067c0 <f_mount+0x90>)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006760:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006768:	69b8      	ldr	r0, [r7, #24]
 800676a:	f7fd fe2b 	bl	80043c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	490d      	ldr	r1, [pc, #52]	@ (80067c0 <f_mount+0x90>)
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <f_mount+0x6e>
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d001      	beq.n	80067a2 <f_mount+0x72>
 800679e:	2300      	movs	r3, #0
 80067a0:	e00a      	b.n	80067b8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80067a2:	f107 0108 	add.w	r1, r7, #8
 80067a6:	f107 030c 	add.w	r3, r7, #12
 80067aa:	2200      	movs	r2, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fc51 	bl	8006054 <find_volume>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	200003c0 	.word	0x200003c0

080067c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80067d2:	f843 0c4c 	str.w	r0, [r3, #-76]
 80067d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80067da:	f843 1c50 	str.w	r1, [r3, #-80]
 80067de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80067e2:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80067e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80067ea:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <f_open+0x32>
 80067f2:	2309      	movs	r3, #9
 80067f4:	e2f3      	b.n	8006dde <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 80067f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80067fa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006808:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800680c:	461a      	mov	r2, r3
 800680e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006812:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800681e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006822:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	b2da      	uxtb	r2, r3
 800682c:	f107 0118 	add.w	r1, r7, #24
 8006830:	3910      	subs	r1, #16
 8006832:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006836:	3b18      	subs	r3, #24
 8006838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fc09 	bl	8006054 <find_volume>
 8006842:	4603      	mov	r3, r0
 8006844:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006848:	f102 0217 	add.w	r2, r2, #23
 800684c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800684e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006852:	f103 0317 	add.w	r3, r3, #23
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f040 82bb 	bne.w	8006dd4 <f_open+0x610>
		INIT_BUF(dj);
 800685e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006862:	461a      	mov	r2, r3
 8006864:	f107 0318 	add.w	r3, r7, #24
 8006868:	3b04      	subs	r3, #4
 800686a:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 800686e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006872:	461a      	mov	r2, r3
 8006874:	4bd3      	ldr	r3, [pc, #844]	@ (8006bc4 <f_open+0x400>)
 8006876:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800687a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800687e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8006882:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006886:	3b18      	subs	r3, #24
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff faba 	bl	8005e04 <follow_path>
 8006890:	4603      	mov	r3, r0
 8006892:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006896:	f102 0217 	add.w	r2, r2, #23
 800689a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800689c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80068a0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80068a4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80068a8:	f102 0210 	add.w	r2, r2, #16
 80068ac:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80068ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80068b2:	f103 0317 	add.w	r3, r3, #23
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d124      	bne.n	8006906 <f_open+0x142>
			if (!dir)	/* Default directory itself */
 80068bc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80068c0:	f103 0310 	add.w	r3, r3, #16
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <f_open+0x114>
				res = FR_INVALID_NAME;
 80068ca:	2306      	movs	r3, #6
 80068cc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80068d0:	f102 0217 	add.w	r2, r2, #23
 80068d4:	7013      	strb	r3, [r2, #0]
 80068d6:	e016      	b.n	8006906 <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80068d8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80068dc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf8c      	ite	hi
 80068e4:	2301      	movhi	r3, #1
 80068e6:	2300      	movls	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80068f0:	3b18      	subs	r3, #24
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fd fbd1 	bl	800409c <chk_lock>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006900:	f102 0217 	add.w	r2, r2, #23
 8006904:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006906:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800690a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800690e:	f003 031c 	and.w	r3, r3, #28
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 813c 	beq.w	8006b90 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8006918:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800691c:	f103 0317 	add.w	r3, r3, #23
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d02e      	beq.n	8006984 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006926:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800692a:	f103 0317 	add.w	r3, r3, #23
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b04      	cmp	r3, #4
 8006932:	d112      	bne.n	800695a <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006934:	f7fd fc22 	bl	800417c <enq_lock>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <f_open+0x18a>
 800693e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006942:	3b18      	subs	r3, #24
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe ff7b 	bl	8005840 <dir_register>
 800694a:	4603      	mov	r3, r0
 800694c:	e000      	b.n	8006950 <f_open+0x18c>
 800694e:	2312      	movs	r3, #18
 8006950:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006954:	f102 0217 	add.w	r2, r2, #23
 8006958:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800695a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800695e:	461a      	mov	r2, r3
 8006960:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006964:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006968:	f043 0308 	orr.w	r3, r3, #8
 800696c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8006970:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006974:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8006978:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800697c:	f102 0210 	add.w	r2, r2, #16
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e01f      	b.n	80069c4 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006984:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006988:	f103 0310 	add.w	r3, r3, #16
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330b      	adds	r3, #11
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	f003 0311 	and.w	r3, r3, #17
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <f_open+0x1e4>
					res = FR_DENIED;
 800699a:	2307      	movs	r3, #7
 800699c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80069a0:	f102 0217 	add.w	r2, r2, #23
 80069a4:	7013      	strb	r3, [r2, #0]
 80069a6:	e00d      	b.n	80069c4 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80069a8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069ac:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <f_open+0x200>
						res = FR_EXIST;
 80069b8:	2308      	movs	r3, #8
 80069ba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80069be:	f102 0217 	add.w	r2, r2, #23
 80069c2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80069c4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80069c8:	f103 0317 	add.w	r3, r3, #23
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f040 8113 	bne.w	8006bfa <f_open+0x436>
 80069d4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80069d8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 810a 	beq.w	8006bfa <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 80069e6:	f7fc fd4d 	bl	8003484 <get_fattime>
 80069ea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80069ee:	f103 030c 	add.w	r3, r3, #12
 80069f2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80069f4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80069f8:	f103 0310 	add.w	r3, r3, #16
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330e      	adds	r3, #14
 8006a00:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006a04:	f102 020c 	add.w	r2, r2, #12
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a12:	f103 030c 	add.w	r3, r3, #12
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a22:	f103 0310 	add.w	r3, r3, #16
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330f      	adds	r3, #15
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a32:	f103 030c 	add.w	r3, r3, #12
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	0c1a      	lsrs	r2, r3, #16
 8006a3a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a3e:	f103 0310 	add.w	r3, r3, #16
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3310      	adds	r3, #16
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a4e:	f103 030c 	add.w	r3, r3, #12
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	0e1a      	lsrs	r2, r3, #24
 8006a56:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a5a:	f103 0310 	add.w	r3, r3, #16
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3311      	adds	r3, #17
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006a66:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a6a:	f103 0310 	add.w	r3, r3, #16
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330b      	adds	r3, #11
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006a76:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a7a:	f103 0310 	add.w	r3, r3, #16
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	331c      	adds	r3, #28
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a8a:	f103 0310 	add.w	r3, r3, #16
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	331d      	adds	r3, #29
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006a9a:	f103 0310 	add.w	r3, r3, #16
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	331e      	adds	r3, #30
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006aaa:	f103 0310 	add.w	r3, r3, #16
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	331f      	adds	r3, #31
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006ab6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006aba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006abe:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006ac2:	f102 0210 	add.w	r2, r2, #16
 8006ac6:	6811      	ldr	r1, [r2, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fc09 	bl	80052e0 <ld_clust>
 8006ace:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006ad2:	f103 0308 	add.w	r3, r3, #8
 8006ad6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8006ad8:	2100      	movs	r1, #0
 8006ada:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006ade:	f103 0310 	add.w	r3, r3, #16
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	f7fe fc2a 	bl	800533c <st_clust>
				dj.fs->wflag = 1;
 8006ae8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006aec:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af4:	2201      	movs	r2, #1
 8006af6:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8006af8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006afc:	f103 0308 	add.w	r3, r3, #8
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d079      	beq.n	8006bfa <f_open+0x436>
					dw = dj.fs->winsect;
 8006b06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b0a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b18:	f102 020c 	add.w	r2, r2, #12
 8006b1c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006b1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b22:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006b26:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b2a:	f102 0208 	add.w	r2, r2, #8
 8006b2e:	6811      	ldr	r1, [r2, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe f826 	bl	8004b82 <remove_chain>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b3c:	f102 0217 	add.w	r2, r2, #23
 8006b40:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006b42:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006b46:	f103 0317 	add.w	r3, r3, #23
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d154      	bne.n	8006bfa <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006b50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b54:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8006b58:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006b5c:	f103 0308 	add.w	r3, r3, #8
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b68:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8006b6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b6e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006b72:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b76:	f102 020c 	add.w	r2, r2, #12
 8006b7a:	6811      	ldr	r1, [r2, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fd fc9d 	bl	80044bc <move_window>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006b88:	f102 0217 	add.w	r2, r2, #23
 8006b8c:	7013      	strb	r3, [r2, #0]
 8006b8e:	e034      	b.n	8006bfa <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006b90:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006b94:	f103 0317 	add.w	r3, r3, #23
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d12d      	bne.n	8006bfa <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006b9e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006ba2:	f103 0310 	add.w	r3, r3, #16
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330b      	adds	r3, #11
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <f_open+0x404>
					res = FR_NO_FILE;
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006bba:	f102 0217 	add.w	r2, r2, #23
 8006bbe:	7013      	strb	r3, [r2, #0]
 8006bc0:	e01b      	b.n	8006bfa <f_open+0x436>
 8006bc2:	bf00      	nop
 8006bc4:	200003e0 	.word	0x200003e0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006bc8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006bcc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d010      	beq.n	8006bfa <f_open+0x436>
 8006bd8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006bdc:	f103 0310 	add.w	r3, r3, #16
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330b      	adds	r3, #11
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <f_open+0x436>
						res = FR_DENIED;
 8006bee:	2307      	movs	r3, #7
 8006bf0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006bf4:	f102 0217 	add.w	r2, r2, #23
 8006bf8:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006bfa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006bfe:	f103 0317 	add.w	r3, r3, #23
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d155      	bne.n	8006cb4 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006c08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c0c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <f_open+0x46a>
				mode |= FA__WRITTEN;
 8006c18:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c22:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006c26:	f043 0320 	orr.w	r3, r3, #32
 8006c2a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006c2e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c32:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006c40:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006c44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c48:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8006c4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c4e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c56:	461a      	mov	r2, r3
 8006c58:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006c5c:	f103 0310 	add.w	r3, r3, #16
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c64:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c68:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf8c      	ite	hi
 8006c70:	2301      	movhi	r3, #1
 8006c72:	2300      	movls	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c7c:	3b18      	subs	r3, #24
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd fa9f 	bl	80041c4 <inc_lock>
 8006c86:	4602      	mov	r2, r0
 8006c88:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c8c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c94:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8006c96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006c9a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <f_open+0x4f0>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006cae:	f102 0217 	add.w	r2, r2, #23
 8006cb2:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006cb4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006cb8:	f103 0317 	add.w	r3, r3, #23
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 8088 	bne.w	8006dd4 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 8006cc4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006cc8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006cd6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006cda:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8006cdc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006ce0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce8:	2200      	movs	r2, #0
 8006cea:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006cec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006cf0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006cf4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006cf8:	f102 0210 	add.w	r2, r2, #16
 8006cfc:	6811      	ldr	r1, [r2, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe faee 	bl	80052e0 <ld_clust>
 8006d04:	4602      	mov	r2, r0
 8006d06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006d0a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d12:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006d14:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006d18:	f103 0310 	add.w	r3, r3, #16
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	331f      	adds	r3, #31
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	061a      	lsls	r2, r3, #24
 8006d24:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006d28:	f103 0310 	add.w	r3, r3, #16
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	331e      	adds	r3, #30
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	431a      	orrs	r2, r3
 8006d36:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006d3a:	f103 0310 	add.w	r3, r3, #16
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	331d      	adds	r3, #29
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006d4c:	f102 0210 	add.w	r2, r2, #16
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	321c      	adds	r2, #28
 8006d54:	7812      	ldrb	r2, [r2, #0]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006d5c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d64:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8006d66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006d6a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d72:	461a      	mov	r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8006d78:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006d7c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006d8a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006d8e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d96:	461a      	mov	r2, r3
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006d9c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006da0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006da4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006da8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006dac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006db0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8006db2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006db6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc4:	88da      	ldrh	r2, [r3, #6]
 8006dc6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006dca:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006dd4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006dd8:	f103 0317 	add.w	r3, r3, #23
 8006ddc:	781b      	ldrb	r3, [r3, #0]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08c      	sub	sp, #48	@ 0x30
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff fc57 	bl	80066b8 <validate>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006e0e:	7ffb      	ldrb	r3, [r7, #31]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <f_read+0x2c>
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	e1cd      	b.n	80071b4 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1e:	79db      	ldrb	r3, [r3, #7]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2a:	79db      	ldrb	r3, [r3, #7]
 8006e2c:	e1c2      	b.n	80071b4 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e34:	799b      	ldrb	r3, [r3, #6]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006e3e:	2307      	movs	r3, #7
 8006e40:	e1b8      	b.n	80071b4 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	f240 81a5 	bls.w	80071aa <f_read+0x3be>
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006e64:	e1a1      	b.n	80071aa <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e7a:	8952      	ldrh	r2, [r2, #10]
 8006e7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e80:	fb01 f202 	mul.w	r2, r1, r2
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 8140 	bne.w	800710c <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ea0:	8952      	ldrh	r2, [r2, #10]
 8006ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb4:	789b      	ldrb	r3, [r3, #2]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	4013      	ands	r3, r2
 8006ebc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d143      	bne.n	8006f4c <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d105      	bne.n	8006edc <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eda:	e01c      	b.n	8006f16 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7fd ff4e 	bl	8004d94 <clmt_clust>
 8006ef8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006efa:	e00c      	b.n	8006f16 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fd fbe9 	bl	80046e6 <get_fat>
 8006f14:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d806      	bhi.n	8006f2a <f_read+0x13e>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f22:	2202      	movs	r2, #2
 8006f24:	71da      	strb	r2, [r3, #7]
 8006f26:	2302      	movs	r3, #2
 8006f28:	e144      	b.n	80071b4 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d106      	bne.n	8006f40 <f_read+0x154>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f38:	2201      	movs	r2, #1
 8006f3a:	71da      	strb	r2, [r3, #7]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e139      	b.n	80071b4 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f46:	461a      	mov	r2, r3
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f7fd fb9d 	bl	800469e <clust2sect>
 8006f64:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <f_read+0x18e>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f72:	2202      	movs	r2, #2
 8006f74:	71da      	strb	r2, [r3, #7]
 8006f76:	2302      	movs	r3, #2
 8006f78:	e11c      	b.n	80071b4 <f_read+0x3c8>
			sect += csect;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4413      	add	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8e:	895b      	ldrh	r3, [r3, #10]
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f98:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d066      	beq.n	800706e <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006fa0:	7dfa      	ldrb	r2, [r7, #23]
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	4413      	add	r3, r2
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fac:	6812      	ldr	r2, [r2, #0]
 8006fae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fb2:	7892      	ldrb	r2, [r2, #2]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d90a      	bls.n	8006fce <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fc4:	789b      	ldrb	r3, [r3, #2]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fda:	7858      	ldrb	r0, [r3, #1]
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	6a39      	ldr	r1, [r7, #32]
 8006fe2:	f7fc ff85 	bl	8003ef0 <disk_read>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	71da      	strb	r2, [r3, #7]
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0dc      	b.n	80071b4 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007000:	799b      	ldrb	r3, [r3, #6]
 8007002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d024      	beq.n	8007054 <f_read+0x268>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007018:	429a      	cmp	r2, r3
 800701a:	d91b      	bls.n	8007054 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007034:	8952      	ldrh	r2, [r2, #10]
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	6a3a      	ldr	r2, [r7, #32]
 800703c:	18d0      	adds	r0, r2, r3
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800704c:	895b      	ldrh	r3, [r3, #10]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fc ffac 	bl	8003fac <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007060:	895b      	ldrh	r3, [r3, #10]
 8007062:	461a      	mov	r2, r3
 8007064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007066:	fb02 f303 	mul.w	r3, r2, r3
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 800706c:	e085      	b.n	800717a <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	429a      	cmp	r2, r3
 800707a:	d041      	beq.n	8007100 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007082:	799b      	ldrb	r3, [r3, #6]
 8007084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d023      	beq.n	80070d4 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007098:	7858      	ldrb	r0, [r3, #1]
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	2301      	movs	r3, #1
 80070a6:	f7fc ff43 	bl	8003f30 <disk_write>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d006      	beq.n	80070be <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070b6:	2201      	movs	r2, #1
 80070b8:	71da      	strb	r2, [r3, #7]
 80070ba:	2301      	movs	r3, #1
 80070bc:	e07a      	b.n	80071b4 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c4:	799b      	ldrb	r3, [r3, #6]
 80070c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d2:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070e0:	7858      	ldrb	r0, [r3, #1]
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	2301      	movs	r3, #1
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	f7fc ff02 	bl	8003ef0 <disk_read>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d006      	beq.n	8007100 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f8:	2201      	movs	r2, #1
 80070fa:	71da      	strb	r2, [r3, #7]
 80070fc:	2301      	movs	r3, #1
 80070fe:	e059      	b.n	80071b4 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007106:	461a      	mov	r2, r3
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007118:	895b      	ldrh	r3, [r3, #10]
 800711a:	4618      	mov	r0, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007130:	8952      	ldrh	r2, [r2, #10]
 8007132:	fbb3 f1f2 	udiv	r1, r3, r2
 8007136:	fb01 f202 	mul.w	r2, r1, r2
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	1ac3      	subs	r3, r0, r3
 800713e:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8007140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d901      	bls.n	800714c <f_read+0x360>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007160:	8952      	ldrh	r2, [r2, #10]
 8007162:	fbb3 f1f2 	udiv	r1, r3, r2
 8007166:	fb01 f202 	mul.w	r2, r1, r2
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007172:	4619      	mov	r1, r3
 8007174:	6a38      	ldr	r0, [r7, #32]
 8007176:	f7fc ff19 	bl	8003fac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	4413      	add	r3, r2
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	4413      	add	r3, r2
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007194:	6093      	str	r3, [r2, #8]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	441a      	add	r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f47f ae5a 	bne.w	8006e66 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3730      	adds	r7, #48	@ 0x30
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	@ 0x28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff fa6f 	bl	80066b8 <validate>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <f_write+0x2c>
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	e21e      	b.n	8007626 <f_write+0x46a>
	if (fp->err)							/* Check error */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ee:	79db      	ldrb	r3, [r3, #7]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071fa:	79db      	ldrb	r3, [r3, #7]
 80071fc:	e213      	b.n	8007626 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007204:	799b      	ldrb	r3, [r3, #6]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800720e:	2307      	movs	r3, #7
 8007210:	e209      	b.n	8007626 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	441a      	add	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	429a      	cmp	r2, r3
 8007228:	f080 81d9 	bcs.w	80075de <f_write+0x422>
 800722c:	2300      	movs	r3, #0
 800722e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007230:	e1d5      	b.n	80075de <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007246:	8952      	ldrh	r2, [r2, #10]
 8007248:	fbb3 f1f2 	udiv	r1, r3, r2
 800724c:	fb01 f202 	mul.w	r2, r1, r2
 8007250:	1a9b      	subs	r3, r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 8169 	bne.w	800752a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800726c:	8952      	ldrh	r2, [r2, #10]
 800726e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007272:	b2da      	uxtb	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007280:	789b      	ldrb	r3, [r3, #2]
 8007282:	3b01      	subs	r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	4013      	ands	r3, r2
 8007288:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800728a:	7dbb      	ldrb	r3, [r7, #22]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d15f      	bne.n	8007350 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d111      	bne.n	80072c0 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d126      	bne.n	80072fa <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fd fcc4 	bl	8004c44 <create_chain>
 80072bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80072be:	e01c      	b.n	80072fa <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d009      	beq.n	80072e0 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4619      	mov	r1, r3
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7fd fd5c 	bl	8004d94 <clmt_clust>
 80072dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80072de:	e00c      	b.n	80072fa <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7fd fca6 	bl	8004c44 <create_chain>
 80072f8:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8173 	beq.w	80075e8 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	2b01      	cmp	r3, #1
 8007306:	d106      	bne.n	8007316 <f_write+0x15a>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800730e:	2202      	movs	r2, #2
 8007310:	71da      	strb	r2, [r3, #7]
 8007312:	2302      	movs	r3, #2
 8007314:	e187      	b.n	8007626 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731c:	d106      	bne.n	800732c <f_write+0x170>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007324:	2201      	movs	r2, #1
 8007326:	71da      	strb	r2, [r3, #7]
 8007328:	2301      	movs	r3, #1
 800732a:	e17c      	b.n	8007626 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007332:	461a      	mov	r2, r3
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <f_write+0x194>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800734a:	461a      	mov	r2, r3
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007356:	799b      	ldrb	r3, [r3, #6]
 8007358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d023      	beq.n	80073a8 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800736c:	7858      	ldrb	r0, [r3, #1]
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	2301      	movs	r3, #1
 800737a:	f7fc fdd9 	bl	8003f30 <disk_write>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d006      	beq.n	8007392 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800738a:	2201      	movs	r2, #1
 800738c:	71da      	strb	r2, [r3, #7]
 800738e:	2301      	movs	r3, #1
 8007390:	e149      	b.n	8007626 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007398:	799b      	ldrb	r3, [r3, #6]
 800739a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073a6:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7fd f96f 	bl	800469e <clust2sect>
 80073c0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <f_write+0x21a>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ce:	2202      	movs	r2, #2
 80073d0:	71da      	strb	r2, [r3, #7]
 80073d2:	2302      	movs	r3, #2
 80073d4:	e127      	b.n	8007626 <f_write+0x46a>
			sect += csect;
 80073d6:	7dbb      	ldrb	r3, [r7, #22]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4413      	add	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ea:	895b      	ldrh	r3, [r3, #10]
 80073ec:	461a      	mov	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d069      	beq.n	80074d0 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80073fc:	7dba      	ldrb	r2, [r7, #22]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800740e:	7892      	ldrb	r2, [r2, #2]
 8007410:	4293      	cmp	r3, r2
 8007412:	d90a      	bls.n	800742a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007420:	789b      	ldrb	r3, [r3, #2]
 8007422:	461a      	mov	r2, r3
 8007424:	7dbb      	ldrb	r3, [r7, #22]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007436:	7858      	ldrb	r0, [r3, #1]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	69b9      	ldr	r1, [r7, #24]
 800743e:	f7fc fd77 	bl	8003f30 <disk_write>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d006      	beq.n	8007456 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800744e:	2201      	movs	r2, #1
 8007450:	71da      	strb	r2, [r3, #7]
 8007452:	2301      	movs	r3, #1
 8007454:	e0e7      	b.n	8007626 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	429a      	cmp	r2, r3
 8007466:	d926      	bls.n	80074b6 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007482:	8952      	ldrh	r2, [r2, #10]
 8007484:	fb02 f303 	mul.w	r3, r2, r3
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	18d1      	adds	r1, r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007498:	895b      	ldrh	r3, [r3, #10]
 800749a:	461a      	mov	r2, r3
 800749c:	f7fc fd86 	bl	8003fac <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074a6:	799b      	ldrb	r3, [r3, #6]
 80074a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074b4:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074c2:	895b      	ldrh	r3, [r3, #10]
 80074c4:	461a      	mov	r2, r3
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	fb02 f303 	mul.w	r3, r2, r3
 80074cc:	623b      	str	r3, [r7, #32]
				continue;
 80074ce:	e06e      	b.n	80075ae <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d01f      	beq.n	800751e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d215      	bcs.n	800751e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074fe:	7858      	ldrb	r0, [r3, #1]
 8007500:	68f9      	ldr	r1, [r7, #12]
 8007502:	2301      	movs	r3, #1
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	f7fc fcf3 	bl	8003ef0 <disk_read>
 800750a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007516:	2201      	movs	r2, #1
 8007518:	71da      	strb	r2, [r3, #7]
 800751a:	2301      	movs	r3, #1
 800751c:	e083      	b.n	8007626 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007524:	461a      	mov	r2, r3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007536:	895b      	ldrh	r3, [r3, #10]
 8007538:	4618      	mov	r0, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007548:	6812      	ldr	r2, [r2, #0]
 800754a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800754e:	8952      	ldrh	r2, [r2, #10]
 8007550:	fbb3 f1f2 	udiv	r1, r3, r2
 8007554:	fb01 f202 	mul.w	r2, r1, r2
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	1ac3      	subs	r3, r0, r3
 800755c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	429a      	cmp	r2, r3
 8007564:	d901      	bls.n	800756a <f_write+0x3ae>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800757e:	8952      	ldrh	r2, [r2, #10]
 8007580:	fbb3 f1f2 	udiv	r1, r3, r2
 8007584:	fb01 f202 	mul.w	r2, r1, r2
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	6a3a      	ldr	r2, [r7, #32]
 8007590:	69b9      	ldr	r1, [r7, #24]
 8007592:	4618      	mov	r0, r3
 8007594:	f7fc fd0a 	bl	8003fac <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800759e:	799b      	ldrb	r3, [r3, #6]
 80075a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ac:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	4413      	add	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	4413      	add	r3, r2
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075c8:	6093      	str	r3, [r2, #8]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	441a      	add	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f47f ae26 	bne.w	8007232 <f_write+0x76>
 80075e6:	e000      	b.n	80075ea <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075e8:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d907      	bls.n	800760e <f_write+0x452>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800760c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007614:	799b      	ldrb	r3, [r3, #6]
 8007616:	f043 0320 	orr.w	r3, r3, #32
 800761a:	b2da      	uxtb	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007622:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3728      	adds	r7, #40	@ 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff f83e 	bl	80066b8 <validate>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007640:	7dfb      	ldrb	r3, [r7, #23]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 80bc 	bne.w	80077c0 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800764e:	799b      	ldrb	r3, [r3, #6]
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 80b3 	beq.w	80077c0 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007660:	799b      	ldrb	r3, [r3, #6]
 8007662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d01e      	beq.n	80076a8 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007676:	7858      	ldrb	r0, [r3, #1]
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	2301      	movs	r3, #1
 8007684:	f7fc fc54 	bl	8003f30 <disk_write>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800768e:	2301      	movs	r3, #1
 8007690:	e097      	b.n	80077c2 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007698:	799b      	ldrb	r3, [r3, #6]
 800769a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a6:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f7fc fefe 	bl	80044bc <move_window>
 80076c0:	4603      	mov	r3, r0
 80076c2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d17a      	bne.n	80077c0 <f_sync+0x192>
				dir = fp->dir_ptr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	330b      	adds	r3, #11
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	330b      	adds	r3, #11
 80076de:	f042 0220 	orr.w	r2, r2, #32
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	331c      	adds	r3, #28
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	0a1b      	lsrs	r3, r3, #8
 8007702:	b29a      	uxth	r2, r3
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	331d      	adds	r3, #29
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	0c1a      	lsrs	r2, r3, #16
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	331e      	adds	r3, #30
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	0e1a      	lsrs	r2, r3, #24
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	331f      	adds	r3, #31
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	4619      	mov	r1, r3
 800773a:	6938      	ldr	r0, [r7, #16]
 800773c:	f7fd fdfe 	bl	800533c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007740:	f7fb fea0 	bl	8003484 <get_fattime>
 8007744:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3316      	adds	r3, #22
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	b29b      	uxth	r3, r3
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	b29a      	uxth	r2, r3
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	3317      	adds	r3, #23
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	0c1a      	lsrs	r2, r3, #16
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	3318      	adds	r3, #24
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0e1a      	lsrs	r2, r3, #24
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3319      	adds	r3, #25
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	3312      	adds	r3, #18
 800777c:	2200      	movs	r2, #0
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	3313      	adds	r3, #19
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800778e:	799b      	ldrb	r3, [r3, #6]
 8007790:	f023 0320 	bic.w	r3, r3, #32
 8007794:	b2da      	uxtb	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800779c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077aa:	2201      	movs	r2, #1
 80077ac:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fc feb2 	bl	8004520 <sync_fs>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff ff2b 	bl	800762e <f_sync>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d119      	bne.n	8007816 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fe ff68 	bl	80066b8 <validate>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d111      	bne.n	8007816 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fc fd9e 	bl	800433c <dec_lock>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007810:	461a      	mov	r2, r3
 8007812:	2300      	movs	r3, #0
 8007814:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b090      	sub	sp, #64	@ 0x40
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fe ff44 	bl	80066b8 <validate>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007836:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <f_lseek+0x24>
 800783e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007842:	e2da      	b.n	8007dfa <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800784a:	79db      	ldrb	r3, [r3, #7]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007856:	79db      	ldrb	r3, [r3, #7]
 8007858:	e2cf      	b.n	8007dfa <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8124 	beq.w	8007ab0 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d16c      	bne.n	800794a <f_lseek+0x12a>
			tbl = fp->cltbl;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	2302      	movs	r3, #2
 8007886:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d046      	beq.n	8007926 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	2300      	movs	r3, #0
 800789e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	3302      	adds	r3, #2
 80078a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ac:	3301      	adds	r3, #1
 80078ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fc ff13 	bl	80046e6 <get_fat>
 80078c0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d806      	bhi.n	80078d6 <f_lseek+0xb6>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078ce:	2202      	movs	r2, #2
 80078d0:	71da      	strb	r2, [r3, #7]
 80078d2:	2302      	movs	r3, #2
 80078d4:	e291      	b.n	8007dfa <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d106      	bne.n	80078ec <f_lseek+0xcc>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078e4:	2201      	movs	r2, #1
 80078e6:	71da      	strb	r2, [r3, #7]
 80078e8:	2301      	movs	r3, #1
 80078ea:	e286      	b.n	8007dfa <f_lseek+0x5da>
					} while (cl == pcl + 1);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d0d7      	beq.n	80078a6 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80078f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d809      	bhi.n	8007912 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	1d1a      	adds	r2, r3, #4
 8007902:	627a      	str	r2, [r7, #36]	@ 0x24
 8007904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	1d1a      	adds	r2, r3, #4
 800790c:	627a      	str	r2, [r7, #36]	@ 0x24
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007922:	429a      	cmp	r2, r3
 8007924:	d3b8      	bcc.n	8007898 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007930:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	429a      	cmp	r2, r3
 8007938:	d803      	bhi.n	8007942 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e259      	b.n	8007df6 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007942:	2311      	movs	r3, #17
 8007944:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007948:	e255      	b.n	8007df6 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d904      	bls.n	8007962 <f_lseek+0x142>
				ofs = fp->fsize;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007968:	461a      	mov	r2, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 8240 	beq.w	8007df6 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	3b01      	subs	r3, #1
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fd fa09 	bl	8004d94 <clmt_clust>
 8007982:	4602      	mov	r2, r0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7fc fe7d 	bl	800469e <clust2sect>
 80079a4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <f_lseek+0x19a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079b2:	2202      	movs	r2, #2
 80079b4:	71da      	strb	r2, [r3, #7]
 80079b6:	2302      	movs	r3, #2
 80079b8:	e21f      	b.n	8007dfa <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	3b01      	subs	r3, #1
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079ca:	8952      	ldrh	r2, [r2, #10]
 80079cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079dc:	7892      	ldrb	r2, [r2, #2]
 80079de:	3a01      	subs	r2, #1
 80079e0:	4013      	ands	r3, r2
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	4413      	add	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079fc:	8952      	ldrh	r2, [r2, #10]
 80079fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a02:	fb01 f202 	mul.w	r2, r1, r2
 8007a06:	1a9b      	subs	r3, r3, r2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 81f4 	beq.w	8007df6 <f_lseek+0x5d6>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	f000 81ec 	beq.w	8007df6 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a24:	799b      	ldrb	r3, [r3, #6]
 8007a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d023      	beq.n	8007a76 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a3a:	7858      	ldrb	r0, [r3, #1]
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	2301      	movs	r3, #1
 8007a48:	f7fc fa72 	bl	8003f30 <disk_write>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d006      	beq.n	8007a60 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a58:	2201      	movs	r2, #1
 8007a5a:	71da      	strb	r2, [r3, #7]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e1cc      	b.n	8007dfa <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a66:	799b      	ldrb	r3, [r3, #6]
 8007a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a74:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a82:	7858      	ldrb	r0, [r3, #1]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	2301      	movs	r3, #1
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	f7fc fa31 	bl	8003ef0 <disk_read>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d006      	beq.n	8007aa2 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	71da      	strb	r2, [r3, #7]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e1ab      	b.n	8007dfa <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	6193      	str	r3, [r2, #24]
 8007aae:	e1a2      	b.n	8007df6 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d90c      	bls.n	8007ad8 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ac4:	799b      	ldrb	r3, [r3, #6]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d104      	bne.n	8007ad8 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aec:	461a      	mov	r2, r3
 8007aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af0:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8100 	beq.w	8007cfa <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b06:	789b      	ldrb	r3, [r3, #2]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b16:	895b      	ldrh	r3, [r3, #10]
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
 8007b1c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d021      	beq.n	8007b68 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	1e5a      	subs	r2, r3, #1
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	1e59      	subs	r1, r3, #1
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d315      	bcc.n	8007b68 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	1e5a      	subs	r2, r3, #1
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	425b      	negs	r3, r3
 8007b44:	4013      	ands	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b4c:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b66:	e031      	b.n	8007bcc <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d123      	bne.n	8007bc0 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd f85e 	bl	8004c44 <create_chain>
 8007b88:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d106      	bne.n	8007b9e <f_lseek+0x37e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b96:	2202      	movs	r2, #2
 8007b98:	71da      	strb	r2, [r3, #7]
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e12d      	b.n	8007dfa <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d106      	bne.n	8007bb4 <f_lseek+0x394>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bac:	2201      	movs	r2, #1
 8007bae:	71da      	strb	r2, [r3, #7]
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e122      	b.n	8007dfa <f_lseek+0x5da>
					fp->sclust = clst;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8093 	beq.w	8007cfa <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8007bd4:	e052      	b.n	8007c7c <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bdc:	799b      	ldrb	r3, [r3, #6]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00e      	beq.n	8007c04 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fd f827 	bl	8004c44 <create_chain>
 8007bf6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10b      	bne.n	8007c16 <f_lseek+0x3f6>
							ofs = bcs; break;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	e03f      	b.n	8007c84 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fc fd69 	bl	80046e6 <get_fat>
 8007c14:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d106      	bne.n	8007c2c <f_lseek+0x40c>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c24:	2201      	movs	r2, #1
 8007c26:	71da      	strb	r2, [r3, #7]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0e6      	b.n	8007dfa <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d909      	bls.n	8007c46 <f_lseek+0x426>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d306      	bcc.n	8007c54 <f_lseek+0x434>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	71da      	strb	r2, [r3, #7]
 8007c50:	2302      	movs	r3, #2
 8007c52:	e0d2      	b.n	8007dfa <f_lseek+0x5da>
					fp->clust = clst;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5e:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c72:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d8a8      	bhi.n	8007bd6 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	4413      	add	r3, r2
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c96:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ca4:	895b      	ldrh	r3, [r3, #10]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cae:	fb01 f202 	mul.w	r2, r1, r2
 8007cb2:	1a9b      	subs	r3, r3, r2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d020      	beq.n	8007cfa <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fc fceb 	bl	800469e <clust2sect>
 8007cc8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <f_lseek+0x4be>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	71da      	strb	r2, [r3, #7]
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e08d      	b.n	8007dfa <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cea:	895b      	ldrh	r3, [r3, #10]
 8007cec:	461a      	mov	r2, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cf6:	4413      	add	r3, r2
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007d0e:	8952      	ldrh	r2, [r2, #10]
 8007d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d14:	fb01 f202 	mul.w	r2, r1, r2
 8007d18:	1a9b      	subs	r3, r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d04e      	beq.n	8007dbc <f_lseek+0x59c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d047      	beq.n	8007dbc <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d32:	799b      	ldrb	r3, [r3, #6]
 8007d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d023      	beq.n	8007d84 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d48:	7858      	ldrb	r0, [r3, #1]
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d52:	699a      	ldr	r2, [r3, #24]
 8007d54:	2301      	movs	r3, #1
 8007d56:	f7fc f8eb 	bl	8003f30 <disk_write>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d66:	2201      	movs	r2, #1
 8007d68:	71da      	strb	r2, [r3, #7]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e045      	b.n	8007dfa <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d74:	799b      	ldrb	r3, [r3, #6]
 8007d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d82:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d90:	7858      	ldrb	r0, [r3, #1]
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	2301      	movs	r3, #1
 8007d96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d98:	f7fc f8aa 	bl	8003ef0 <disk_read>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d006      	beq.n	8007db0 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007da8:	2201      	movs	r2, #1
 8007daa:	71da      	strb	r2, [r3, #7]
 8007dac:	2301      	movs	r3, #1
 8007dae:	e024      	b.n	8007dfa <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007db6:	461a      	mov	r2, r3
 8007db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dba:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d912      	bls.n	8007df6 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007dde:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007de6:	799b      	ldrb	r3, [r3, #6]
 8007de8:	f043 0320 	orr.w	r3, r3, #32
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007df4:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007df6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3740      	adds	r7, #64	@ 0x40
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b08e      	sub	sp, #56	@ 0x38
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8007e0e:	f107 030c 	add.w	r3, r7, #12
 8007e12:	2200      	movs	r2, #0
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fe f91c 	bl	8006054 <find_volume>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8007e28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 80bc 	bne.w	8007faa <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	3b02      	subs	r3, #2
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d806      	bhi.n	8007e56 <f_getfree+0x54>
			*nclst = fs->free_clust;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e0a9      	b.n	8007faa <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 8007e64:	7efb      	ldrb	r3, [r7, #27]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d126      	bne.n	8007eb8 <f_getfree+0xb6>
				clst = 2;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8007e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e70:	69f8      	ldr	r0, [r7, #28]
 8007e72:	f7fc fc38 	bl	80046e6 <get_fat>
 8007e76:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d103      	bne.n	8007e88 <f_getfree+0x86>
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007e86:	e07c      	b.n	8007f82 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d103      	bne.n	8007e96 <f_getfree+0x94>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007e94:	e075      	b.n	8007f82 <f_getfree+0x180>
					if (stat == 0) n++;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <f_getfree+0xa0>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 8007ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3db      	bcc.n	8007e6e <f_getfree+0x6c>
 8007eb6:	e064      	b.n	8007f82 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d114      	bne.n	8007f04 <f_getfree+0x102>
						res = move_window(fs, sect++);
 8007eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	69f8      	ldr	r0, [r7, #28]
 8007ee4:	f7fc faea 	bl	80044bc <move_window>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 8007eee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d144      	bne.n	8007f80 <f_getfree+0x17e>
						p = fs->win.d8;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f00:	895b      	ldrh	r3, [r3, #10]
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8007f04:	7efb      	ldrb	r3, [r7, #27]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d115      	bne.n	8007f36 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	b21a      	sxth	r2, r3
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b21b      	sxth	r3, r3
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b21b      	sxth	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <f_getfree+0x126>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	3301      	adds	r3, #1
 8007f26:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	3302      	adds	r3, #2
 8007f2c:	623b      	str	r3, [r7, #32]
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	3b02      	subs	r3, #2
 8007f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f34:	e01d      	b.n	8007f72 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	3303      	adds	r3, #3
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	061a      	lsls	r2, r3, #24
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	3302      	adds	r3, #2
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	041b      	lsls	r3, r3, #16
 8007f46:	431a      	orrs	r2, r3
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	4313      	orrs	r3, r2
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	7812      	ldrb	r2, [r2, #0]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <f_getfree+0x164>
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	3301      	adds	r3, #1
 8007f64:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	623b      	str	r3, [r7, #32]
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 8007f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f74:	3b01      	subs	r3, #1
 8007f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1aa      	bne.n	8007ed4 <f_getfree+0xd2>
 8007f7e:	e000      	b.n	8007f82 <f_getfree+0x180>
						if (res != FR_OK) break;
 8007f80:	bf00      	nop
			}
			fs->free_clust = n;
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f94:	795b      	ldrb	r3, [r3, #5]
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fa2:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa8:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8007faa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3738      	adds	r7, #56	@ 0x38
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b088      	sub	sp, #32
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007fca:	e01c      	b.n	8008006 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007fcc:	f107 0310 	add.w	r3, r7, #16
 8007fd0:	f107 0114 	add.w	r1, r7, #20
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fe ff08 	bl	8006dec <f_read>
		if (rc != 1) break;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d117      	bne.n	8008012 <f_gets+0x5c>
		c = s[0];
 8007fe2:	7d3b      	ldrb	r3, [r7, #20]
 8007fe4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b0d      	cmp	r3, #13
 8007fea:	d00b      	beq.n	8008004 <f_gets+0x4e>
		*p++ = c;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	61ba      	str	r2, [r7, #24]
 8007ff2:	7dfa      	ldrb	r2, [r7, #23]
 8007ff4:	701a      	strb	r2, [r3, #0]
		n++;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	2b0a      	cmp	r3, #10
 8008000:	d009      	beq.n	8008016 <f_gets+0x60>
 8008002:	e000      	b.n	8008006 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008004:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3b01      	subs	r3, #1
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	429a      	cmp	r2, r3
 800800e:	dbdd      	blt.n	8007fcc <f_gets+0x16>
 8008010:	e002      	b.n	8008018 <f_gets+0x62>
		if (rc != 1) break;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008016:	bf00      	nop
	}
	*p = 0;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2200      	movs	r2, #0
 800801c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <f_gets+0x72>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	e000      	b.n	800802a <f_gets+0x74>
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3720      	adds	r7, #32
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	2b0a      	cmp	r3, #10
 8008042:	d103      	bne.n	800804c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008044:	210d      	movs	r1, #13
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff fff3 	bl	8008032 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	db25      	blt.n	80080a4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	60fa      	str	r2, [r7, #12]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	4413      	add	r3, r2
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b3c      	cmp	r3, #60	@ 0x3c
 800806a:	dd12      	ble.n	8008092 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f103 010c 	add.w	r1, r3, #12
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	f107 0308 	add.w	r3, r7, #8
 800807c:	f7ff f89e 	bl	80071bc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d101      	bne.n	800808c <putc_bfd+0x5a>
 8008088:	2300      	movs	r3, #0
 800808a:	e001      	b.n	8008090 <putc_bfd+0x5e>
 800808c:	f04f 33ff 	mov.w	r3, #4294967295
 8008090:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	609a      	str	r2, [r3, #8]
 80080a2:	e000      	b.n	80080a6 <putc_bfd+0x74>
	if (i < 0) return;
 80080a4:	bf00      	nop
}
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80080ac:	b590      	push	{r4, r7, lr}
 80080ae:	b097      	sub	sp, #92	@ 0x5c
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80080c2:	e009      	b.n	80080d8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	607a      	str	r2, [r7, #4]
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	f107 030c 	add.w	r3, r7, #12
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff ffad 	bl	8008032 <putc_bfd>
	while (*str)			/* Put the string */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f1      	bne.n	80080c4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	db15      	blt.n	8008112 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	461c      	mov	r4, r3
 80080ec:	f107 0208 	add.w	r2, r7, #8
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	f103 010c 	add.w	r1, r3, #12
 80080f8:	4613      	mov	r3, r2
 80080fa:	4622      	mov	r2, r4
 80080fc:	f7ff f85e 	bl	80071bc <f_write>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	4293      	cmp	r3, r2
 800810c:	d101      	bne.n	8008112 <f_puts+0x66>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	e001      	b.n	8008116 <f_puts+0x6a>
	return EOF;
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008116:	4618      	mov	r0, r3
 8008118:	375c      	adds	r7, #92	@ 0x5c
 800811a:	46bd      	mov	sp, r7
 800811c:	bd90      	pop	{r4, r7, pc}
	...

08008120 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800812e:	2301      	movs	r3, #1
 8008130:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008136:	4b1e      	ldr	r3, [pc, #120]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 8008138:	7a5b      	ldrb	r3, [r3, #9]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b01      	cmp	r3, #1
 800813e:	d831      	bhi.n	80081a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008140:	4b1b      	ldr	r3, [pc, #108]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 8008142:	7a5b      	ldrb	r3, [r3, #9]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	461a      	mov	r2, r3
 8008148:	4b19      	ldr	r3, [pc, #100]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 800814a:	2100      	movs	r1, #0
 800814c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800814e:	4b18      	ldr	r3, [pc, #96]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 8008150:	7a5b      	ldrb	r3, [r3, #9]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4a16      	ldr	r2, [pc, #88]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800815e:	4b14      	ldr	r3, [pc, #80]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 8008160:	7a5b      	ldrb	r3, [r3, #9]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	4b12      	ldr	r3, [pc, #72]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 8008168:	4413      	add	r3, r2
 800816a:	79fa      	ldrb	r2, [r7, #7]
 800816c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800816e:	4b10      	ldr	r3, [pc, #64]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 8008170:	7a5b      	ldrb	r3, [r3, #9]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	b2d1      	uxtb	r1, r2
 8008178:	4a0d      	ldr	r2, [pc, #52]	@ (80081b0 <FATFS_LinkDriverEx+0x90>)
 800817a:	7251      	strb	r1, [r2, #9]
 800817c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800817e:	7dbb      	ldrb	r3, [r7, #22]
 8008180:	3330      	adds	r3, #48	@ 0x30
 8008182:	b2da      	uxtb	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	3301      	adds	r3, #1
 800818c:	223a      	movs	r2, #58	@ 0x3a
 800818e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	3302      	adds	r3, #2
 8008194:	222f      	movs	r2, #47	@ 0x2f
 8008196:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3303      	adds	r3, #3
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr
 80081b0:	200005e0 	.word	0x200005e0

080081b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081be:	2200      	movs	r2, #0
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff ffac 	bl	8008120 <FATFS_LinkDriverEx>
 80081c8:	4603      	mov	r3, r0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80081e4:	d802      	bhi.n	80081ec <ff_convert+0x18>
		c = chr;
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	81fb      	strh	r3, [r7, #14]
 80081ea:	e025      	b.n	8008238 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	2bff      	cmp	r3, #255	@ 0xff
 80081f6:	d805      	bhi.n	8008204 <ff_convert+0x30>
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	3b80      	subs	r3, #128	@ 0x80
 80081fc:	4a11      	ldr	r2, [pc, #68]	@ (8008244 <ff_convert+0x70>)
 80081fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008202:	e000      	b.n	8008206 <ff_convert+0x32>
 8008204:	2300      	movs	r3, #0
 8008206:	81fb      	strh	r3, [r7, #14]
 8008208:	e016      	b.n	8008238 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800820a:	2300      	movs	r3, #0
 800820c:	81fb      	strh	r3, [r7, #14]
 800820e:	e009      	b.n	8008224 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008210:	89fb      	ldrh	r3, [r7, #14]
 8008212:	4a0c      	ldr	r2, [pc, #48]	@ (8008244 <ff_convert+0x70>)
 8008214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008218:	88fa      	ldrh	r2, [r7, #6]
 800821a:	429a      	cmp	r2, r3
 800821c:	d006      	beq.n	800822c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800821e:	89fb      	ldrh	r3, [r7, #14]
 8008220:	3301      	adds	r3, #1
 8008222:	81fb      	strh	r3, [r7, #14]
 8008224:	89fb      	ldrh	r3, [r7, #14]
 8008226:	2b7f      	cmp	r3, #127	@ 0x7f
 8008228:	d9f2      	bls.n	8008210 <ff_convert+0x3c>
 800822a:	e000      	b.n	800822e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800822c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800822e:	89fb      	ldrh	r3, [r7, #14]
 8008230:	3380      	adds	r3, #128	@ 0x80
 8008232:	b29b      	uxth	r3, r3
 8008234:	b2db      	uxtb	r3, r3
 8008236:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008238:	89fb      	ldrh	r3, [r7, #14]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr
 8008244:	0800b114 	.word	0x0800b114

08008248 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e002      	b.n	800825e <ff_wtoupper+0x16>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	4a0f      	ldr	r2, [pc, #60]	@ (800829c <ff_wtoupper+0x54>)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d006      	beq.n	8008278 <ff_wtoupper+0x30>
 800826a:	4a0c      	ldr	r2, [pc, #48]	@ (800829c <ff_wtoupper+0x54>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008272:	88fa      	ldrh	r2, [r7, #6]
 8008274:	429a      	cmp	r2, r3
 8008276:	d1ef      	bne.n	8008258 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008278:	4a08      	ldr	r2, [pc, #32]	@ (800829c <ff_wtoupper+0x54>)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d004      	beq.n	800828e <ff_wtoupper+0x46>
 8008284:	4a06      	ldr	r2, [pc, #24]	@ (80082a0 <ff_wtoupper+0x58>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800828c:	e000      	b.n	8008290 <ff_wtoupper+0x48>
 800828e:	88fb      	ldrh	r3, [r7, #6]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	0800b214 	.word	0x0800b214
 80082a0:	0800b3f4 	.word	0x0800b3f4

080082a4 <malloc>:
 80082a4:	4b02      	ldr	r3, [pc, #8]	@ (80082b0 <malloc+0xc>)
 80082a6:	4601      	mov	r1, r0
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f000 b825 	b.w	80082f8 <_malloc_r>
 80082ae:	bf00      	nop
 80082b0:	2000019c 	.word	0x2000019c

080082b4 <sbrk_aligned>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4e0f      	ldr	r6, [pc, #60]	@ (80082f4 <sbrk_aligned+0x40>)
 80082b8:	460c      	mov	r4, r1
 80082ba:	6831      	ldr	r1, [r6, #0]
 80082bc:	4605      	mov	r5, r0
 80082be:	b911      	cbnz	r1, 80082c6 <sbrk_aligned+0x12>
 80082c0:	f000 ff4c 	bl	800915c <_sbrk_r>
 80082c4:	6030      	str	r0, [r6, #0]
 80082c6:	4621      	mov	r1, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 ff47 	bl	800915c <_sbrk_r>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d103      	bne.n	80082da <sbrk_aligned+0x26>
 80082d2:	f04f 34ff 	mov.w	r4, #4294967295
 80082d6:	4620      	mov	r0, r4
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	1cc4      	adds	r4, r0, #3
 80082dc:	f024 0403 	bic.w	r4, r4, #3
 80082e0:	42a0      	cmp	r0, r4
 80082e2:	d0f8      	beq.n	80082d6 <sbrk_aligned+0x22>
 80082e4:	1a21      	subs	r1, r4, r0
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 ff38 	bl	800915c <_sbrk_r>
 80082ec:	3001      	adds	r0, #1
 80082ee:	d1f2      	bne.n	80082d6 <sbrk_aligned+0x22>
 80082f0:	e7ef      	b.n	80082d2 <sbrk_aligned+0x1e>
 80082f2:	bf00      	nop
 80082f4:	200005ec 	.word	0x200005ec

080082f8 <_malloc_r>:
 80082f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082fc:	1ccd      	adds	r5, r1, #3
 80082fe:	f025 0503 	bic.w	r5, r5, #3
 8008302:	3508      	adds	r5, #8
 8008304:	2d0c      	cmp	r5, #12
 8008306:	bf38      	it	cc
 8008308:	250c      	movcc	r5, #12
 800830a:	2d00      	cmp	r5, #0
 800830c:	4606      	mov	r6, r0
 800830e:	db01      	blt.n	8008314 <_malloc_r+0x1c>
 8008310:	42a9      	cmp	r1, r5
 8008312:	d904      	bls.n	800831e <_malloc_r+0x26>
 8008314:	230c      	movs	r3, #12
 8008316:	6033      	str	r3, [r6, #0]
 8008318:	2000      	movs	r0, #0
 800831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083f4 <_malloc_r+0xfc>
 8008322:	f000 f869 	bl	80083f8 <__malloc_lock>
 8008326:	f8d8 3000 	ldr.w	r3, [r8]
 800832a:	461c      	mov	r4, r3
 800832c:	bb44      	cbnz	r4, 8008380 <_malloc_r+0x88>
 800832e:	4629      	mov	r1, r5
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff ffbf 	bl	80082b4 <sbrk_aligned>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	4604      	mov	r4, r0
 800833a:	d158      	bne.n	80083ee <_malloc_r+0xf6>
 800833c:	f8d8 4000 	ldr.w	r4, [r8]
 8008340:	4627      	mov	r7, r4
 8008342:	2f00      	cmp	r7, #0
 8008344:	d143      	bne.n	80083ce <_malloc_r+0xd6>
 8008346:	2c00      	cmp	r4, #0
 8008348:	d04b      	beq.n	80083e2 <_malloc_r+0xea>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	4639      	mov	r1, r7
 800834e:	4630      	mov	r0, r6
 8008350:	eb04 0903 	add.w	r9, r4, r3
 8008354:	f000 ff02 	bl	800915c <_sbrk_r>
 8008358:	4581      	cmp	r9, r0
 800835a:	d142      	bne.n	80083e2 <_malloc_r+0xea>
 800835c:	6821      	ldr	r1, [r4, #0]
 800835e:	4630      	mov	r0, r6
 8008360:	1a6d      	subs	r5, r5, r1
 8008362:	4629      	mov	r1, r5
 8008364:	f7ff ffa6 	bl	80082b4 <sbrk_aligned>
 8008368:	3001      	adds	r0, #1
 800836a:	d03a      	beq.n	80083e2 <_malloc_r+0xea>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	442b      	add	r3, r5
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	f8d8 3000 	ldr.w	r3, [r8]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	bb62      	cbnz	r2, 80083d4 <_malloc_r+0xdc>
 800837a:	f8c8 7000 	str.w	r7, [r8]
 800837e:	e00f      	b.n	80083a0 <_malloc_r+0xa8>
 8008380:	6822      	ldr	r2, [r4, #0]
 8008382:	1b52      	subs	r2, r2, r5
 8008384:	d420      	bmi.n	80083c8 <_malloc_r+0xd0>
 8008386:	2a0b      	cmp	r2, #11
 8008388:	d917      	bls.n	80083ba <_malloc_r+0xc2>
 800838a:	1961      	adds	r1, r4, r5
 800838c:	42a3      	cmp	r3, r4
 800838e:	6025      	str	r5, [r4, #0]
 8008390:	bf18      	it	ne
 8008392:	6059      	strne	r1, [r3, #4]
 8008394:	6863      	ldr	r3, [r4, #4]
 8008396:	bf08      	it	eq
 8008398:	f8c8 1000 	streq.w	r1, [r8]
 800839c:	5162      	str	r2, [r4, r5]
 800839e:	604b      	str	r3, [r1, #4]
 80083a0:	4630      	mov	r0, r6
 80083a2:	f000 f82f 	bl	8008404 <__malloc_unlock>
 80083a6:	f104 000b 	add.w	r0, r4, #11
 80083aa:	1d23      	adds	r3, r4, #4
 80083ac:	f020 0007 	bic.w	r0, r0, #7
 80083b0:	1ac2      	subs	r2, r0, r3
 80083b2:	bf1c      	itt	ne
 80083b4:	1a1b      	subne	r3, r3, r0
 80083b6:	50a3      	strne	r3, [r4, r2]
 80083b8:	e7af      	b.n	800831a <_malloc_r+0x22>
 80083ba:	6862      	ldr	r2, [r4, #4]
 80083bc:	42a3      	cmp	r3, r4
 80083be:	bf0c      	ite	eq
 80083c0:	f8c8 2000 	streq.w	r2, [r8]
 80083c4:	605a      	strne	r2, [r3, #4]
 80083c6:	e7eb      	b.n	80083a0 <_malloc_r+0xa8>
 80083c8:	4623      	mov	r3, r4
 80083ca:	6864      	ldr	r4, [r4, #4]
 80083cc:	e7ae      	b.n	800832c <_malloc_r+0x34>
 80083ce:	463c      	mov	r4, r7
 80083d0:	687f      	ldr	r7, [r7, #4]
 80083d2:	e7b6      	b.n	8008342 <_malloc_r+0x4a>
 80083d4:	461a      	mov	r2, r3
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d1fb      	bne.n	80083d4 <_malloc_r+0xdc>
 80083dc:	2300      	movs	r3, #0
 80083de:	6053      	str	r3, [r2, #4]
 80083e0:	e7de      	b.n	80083a0 <_malloc_r+0xa8>
 80083e2:	230c      	movs	r3, #12
 80083e4:	4630      	mov	r0, r6
 80083e6:	6033      	str	r3, [r6, #0]
 80083e8:	f000 f80c 	bl	8008404 <__malloc_unlock>
 80083ec:	e794      	b.n	8008318 <_malloc_r+0x20>
 80083ee:	6005      	str	r5, [r0, #0]
 80083f0:	e7d6      	b.n	80083a0 <_malloc_r+0xa8>
 80083f2:	bf00      	nop
 80083f4:	200005f0 	.word	0x200005f0

080083f8 <__malloc_lock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	@ (8008400 <__malloc_lock+0x8>)
 80083fa:	f000 befc 	b.w	80091f6 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	20000734 	.word	0x20000734

08008404 <__malloc_unlock>:
 8008404:	4801      	ldr	r0, [pc, #4]	@ (800840c <__malloc_unlock+0x8>)
 8008406:	f000 bef7 	b.w	80091f8 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	20000734 	.word	0x20000734

08008410 <__cvt>:
 8008410:	2b00      	cmp	r3, #0
 8008412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008416:	461d      	mov	r5, r3
 8008418:	bfbb      	ittet	lt
 800841a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800841e:	461d      	movlt	r5, r3
 8008420:	2300      	movge	r3, #0
 8008422:	232d      	movlt	r3, #45	@ 0x2d
 8008424:	b088      	sub	sp, #32
 8008426:	4614      	mov	r4, r2
 8008428:	bfb8      	it	lt
 800842a:	4614      	movlt	r4, r2
 800842c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800842e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008430:	7013      	strb	r3, [r2, #0]
 8008432:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008434:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008438:	f023 0820 	bic.w	r8, r3, #32
 800843c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008440:	d005      	beq.n	800844e <__cvt+0x3e>
 8008442:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008446:	d100      	bne.n	800844a <__cvt+0x3a>
 8008448:	3601      	adds	r6, #1
 800844a:	2302      	movs	r3, #2
 800844c:	e000      	b.n	8008450 <__cvt+0x40>
 800844e:	2303      	movs	r3, #3
 8008450:	aa07      	add	r2, sp, #28
 8008452:	9204      	str	r2, [sp, #16]
 8008454:	aa06      	add	r2, sp, #24
 8008456:	e9cd a202 	strd	sl, r2, [sp, #8]
 800845a:	e9cd 3600 	strd	r3, r6, [sp]
 800845e:	4622      	mov	r2, r4
 8008460:	462b      	mov	r3, r5
 8008462:	f000 ff8d 	bl	8009380 <_dtoa_r>
 8008466:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800846a:	4607      	mov	r7, r0
 800846c:	d119      	bne.n	80084a2 <__cvt+0x92>
 800846e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008470:	07db      	lsls	r3, r3, #31
 8008472:	d50e      	bpl.n	8008492 <__cvt+0x82>
 8008474:	eb00 0906 	add.w	r9, r0, r6
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f8 fa92 	bl	80009a8 <__aeabi_dcmpeq>
 8008484:	b108      	cbz	r0, 800848a <__cvt+0x7a>
 8008486:	f8cd 901c 	str.w	r9, [sp, #28]
 800848a:	2230      	movs	r2, #48	@ 0x30
 800848c:	9b07      	ldr	r3, [sp, #28]
 800848e:	454b      	cmp	r3, r9
 8008490:	d31e      	bcc.n	80084d0 <__cvt+0xc0>
 8008492:	4638      	mov	r0, r7
 8008494:	9b07      	ldr	r3, [sp, #28]
 8008496:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008498:	1bdb      	subs	r3, r3, r7
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	b008      	add	sp, #32
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084a6:	eb00 0906 	add.w	r9, r0, r6
 80084aa:	d1e5      	bne.n	8008478 <__cvt+0x68>
 80084ac:	7803      	ldrb	r3, [r0, #0]
 80084ae:	2b30      	cmp	r3, #48	@ 0x30
 80084b0:	d10a      	bne.n	80084c8 <__cvt+0xb8>
 80084b2:	2200      	movs	r2, #0
 80084b4:	2300      	movs	r3, #0
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f8 fa75 	bl	80009a8 <__aeabi_dcmpeq>
 80084be:	b918      	cbnz	r0, 80084c8 <__cvt+0xb8>
 80084c0:	f1c6 0601 	rsb	r6, r6, #1
 80084c4:	f8ca 6000 	str.w	r6, [sl]
 80084c8:	f8da 3000 	ldr.w	r3, [sl]
 80084cc:	4499      	add	r9, r3
 80084ce:	e7d3      	b.n	8008478 <__cvt+0x68>
 80084d0:	1c59      	adds	r1, r3, #1
 80084d2:	9107      	str	r1, [sp, #28]
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e7d9      	b.n	800848c <__cvt+0x7c>

080084d8 <__exponent>:
 80084d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084da:	2900      	cmp	r1, #0
 80084dc:	bfb6      	itet	lt
 80084de:	232d      	movlt	r3, #45	@ 0x2d
 80084e0:	232b      	movge	r3, #43	@ 0x2b
 80084e2:	4249      	neglt	r1, r1
 80084e4:	2909      	cmp	r1, #9
 80084e6:	7002      	strb	r2, [r0, #0]
 80084e8:	7043      	strb	r3, [r0, #1]
 80084ea:	dd29      	ble.n	8008540 <__exponent+0x68>
 80084ec:	f10d 0307 	add.w	r3, sp, #7
 80084f0:	461d      	mov	r5, r3
 80084f2:	270a      	movs	r7, #10
 80084f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80084f8:	461a      	mov	r2, r3
 80084fa:	fb07 1416 	mls	r4, r7, r6, r1
 80084fe:	3430      	adds	r4, #48	@ 0x30
 8008500:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008504:	460c      	mov	r4, r1
 8008506:	2c63      	cmp	r4, #99	@ 0x63
 8008508:	4631      	mov	r1, r6
 800850a:	f103 33ff 	add.w	r3, r3, #4294967295
 800850e:	dcf1      	bgt.n	80084f4 <__exponent+0x1c>
 8008510:	3130      	adds	r1, #48	@ 0x30
 8008512:	1e94      	subs	r4, r2, #2
 8008514:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008518:	4623      	mov	r3, r4
 800851a:	1c41      	adds	r1, r0, #1
 800851c:	42ab      	cmp	r3, r5
 800851e:	d30a      	bcc.n	8008536 <__exponent+0x5e>
 8008520:	f10d 0309 	add.w	r3, sp, #9
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	42ac      	cmp	r4, r5
 8008528:	bf88      	it	hi
 800852a:	2300      	movhi	r3, #0
 800852c:	3302      	adds	r3, #2
 800852e:	4403      	add	r3, r0
 8008530:	1a18      	subs	r0, r3, r0
 8008532:	b003      	add	sp, #12
 8008534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008536:	f813 6b01 	ldrb.w	r6, [r3], #1
 800853a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800853e:	e7ed      	b.n	800851c <__exponent+0x44>
 8008540:	2330      	movs	r3, #48	@ 0x30
 8008542:	3130      	adds	r1, #48	@ 0x30
 8008544:	7083      	strb	r3, [r0, #2]
 8008546:	70c1      	strb	r1, [r0, #3]
 8008548:	1d03      	adds	r3, r0, #4
 800854a:	e7f1      	b.n	8008530 <__exponent+0x58>

0800854c <_printf_float>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	b091      	sub	sp, #68	@ 0x44
 8008552:	460c      	mov	r4, r1
 8008554:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008558:	4616      	mov	r6, r2
 800855a:	461f      	mov	r7, r3
 800855c:	4605      	mov	r5, r0
 800855e:	f000 fdc5 	bl	80090ec <_localeconv_r>
 8008562:	6803      	ldr	r3, [r0, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	f7f7 fdf2 	bl	8000150 <strlen>
 800856c:	2300      	movs	r3, #0
 800856e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008570:	f8d8 3000 	ldr.w	r3, [r8]
 8008574:	9009      	str	r0, [sp, #36]	@ 0x24
 8008576:	3307      	adds	r3, #7
 8008578:	f023 0307 	bic.w	r3, r3, #7
 800857c:	f103 0208 	add.w	r2, r3, #8
 8008580:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008584:	f8d4 b000 	ldr.w	fp, [r4]
 8008588:	f8c8 2000 	str.w	r2, [r8]
 800858c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008590:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008594:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008596:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800859a:	f04f 32ff 	mov.w	r2, #4294967295
 800859e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80085a6:	4b9c      	ldr	r3, [pc, #624]	@ (8008818 <_printf_float+0x2cc>)
 80085a8:	f7f8 fa30 	bl	8000a0c <__aeabi_dcmpun>
 80085ac:	bb70      	cbnz	r0, 800860c <_printf_float+0xc0>
 80085ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085b2:	f04f 32ff 	mov.w	r2, #4294967295
 80085b6:	4b98      	ldr	r3, [pc, #608]	@ (8008818 <_printf_float+0x2cc>)
 80085b8:	f7f8 fa0a 	bl	80009d0 <__aeabi_dcmple>
 80085bc:	bb30      	cbnz	r0, 800860c <_printf_float+0xc0>
 80085be:	2200      	movs	r2, #0
 80085c0:	2300      	movs	r3, #0
 80085c2:	4640      	mov	r0, r8
 80085c4:	4649      	mov	r1, r9
 80085c6:	f7f8 f9f9 	bl	80009bc <__aeabi_dcmplt>
 80085ca:	b110      	cbz	r0, 80085d2 <_printf_float+0x86>
 80085cc:	232d      	movs	r3, #45	@ 0x2d
 80085ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d2:	4a92      	ldr	r2, [pc, #584]	@ (800881c <_printf_float+0x2d0>)
 80085d4:	4b92      	ldr	r3, [pc, #584]	@ (8008820 <_printf_float+0x2d4>)
 80085d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085da:	bf94      	ite	ls
 80085dc:	4690      	movls	r8, r2
 80085de:	4698      	movhi	r8, r3
 80085e0:	2303      	movs	r3, #3
 80085e2:	f04f 0900 	mov.w	r9, #0
 80085e6:	6123      	str	r3, [r4, #16]
 80085e8:	f02b 0304 	bic.w	r3, fp, #4
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	4633      	mov	r3, r6
 80085f0:	4621      	mov	r1, r4
 80085f2:	4628      	mov	r0, r5
 80085f4:	9700      	str	r7, [sp, #0]
 80085f6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80085f8:	f000 f9d4 	bl	80089a4 <_printf_common>
 80085fc:	3001      	adds	r0, #1
 80085fe:	f040 8090 	bne.w	8008722 <_printf_float+0x1d6>
 8008602:	f04f 30ff 	mov.w	r0, #4294967295
 8008606:	b011      	add	sp, #68	@ 0x44
 8008608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860c:	4642      	mov	r2, r8
 800860e:	464b      	mov	r3, r9
 8008610:	4640      	mov	r0, r8
 8008612:	4649      	mov	r1, r9
 8008614:	f7f8 f9fa 	bl	8000a0c <__aeabi_dcmpun>
 8008618:	b148      	cbz	r0, 800862e <_printf_float+0xe2>
 800861a:	464b      	mov	r3, r9
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfb8      	it	lt
 8008620:	232d      	movlt	r3, #45	@ 0x2d
 8008622:	4a80      	ldr	r2, [pc, #512]	@ (8008824 <_printf_float+0x2d8>)
 8008624:	bfb8      	it	lt
 8008626:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800862a:	4b7f      	ldr	r3, [pc, #508]	@ (8008828 <_printf_float+0x2dc>)
 800862c:	e7d3      	b.n	80085d6 <_printf_float+0x8a>
 800862e:	6863      	ldr	r3, [r4, #4]
 8008630:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	d13f      	bne.n	80086b8 <_printf_float+0x16c>
 8008638:	2306      	movs	r3, #6
 800863a:	6063      	str	r3, [r4, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	9206      	str	r2, [sp, #24]
 8008646:	aa0e      	add	r2, sp, #56	@ 0x38
 8008648:	e9cd a204 	strd	sl, r2, [sp, #16]
 800864c:	aa0d      	add	r2, sp, #52	@ 0x34
 800864e:	9203      	str	r2, [sp, #12]
 8008650:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008654:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	4642      	mov	r2, r8
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4628      	mov	r0, r5
 8008660:	464b      	mov	r3, r9
 8008662:	910a      	str	r1, [sp, #40]	@ 0x28
 8008664:	f7ff fed4 	bl	8008410 <__cvt>
 8008668:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800866a:	4680      	mov	r8, r0
 800866c:	2947      	cmp	r1, #71	@ 0x47
 800866e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008670:	d128      	bne.n	80086c4 <_printf_float+0x178>
 8008672:	1cc8      	adds	r0, r1, #3
 8008674:	db02      	blt.n	800867c <_printf_float+0x130>
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	4299      	cmp	r1, r3
 800867a:	dd40      	ble.n	80086fe <_printf_float+0x1b2>
 800867c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008680:	fa5f fa8a 	uxtb.w	sl, sl
 8008684:	4652      	mov	r2, sl
 8008686:	3901      	subs	r1, #1
 8008688:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800868c:	910d      	str	r1, [sp, #52]	@ 0x34
 800868e:	f7ff ff23 	bl	80084d8 <__exponent>
 8008692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008694:	4681      	mov	r9, r0
 8008696:	1813      	adds	r3, r2, r0
 8008698:	2a01      	cmp	r2, #1
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	dc02      	bgt.n	80086a4 <_printf_float+0x158>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	07d2      	lsls	r2, r2, #31
 80086a2:	d501      	bpl.n	80086a8 <_printf_float+0x15c>
 80086a4:	3301      	adds	r3, #1
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d09e      	beq.n	80085ee <_printf_float+0xa2>
 80086b0:	232d      	movs	r3, #45	@ 0x2d
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086b6:	e79a      	b.n	80085ee <_printf_float+0xa2>
 80086b8:	2947      	cmp	r1, #71	@ 0x47
 80086ba:	d1bf      	bne.n	800863c <_printf_float+0xf0>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1bd      	bne.n	800863c <_printf_float+0xf0>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e7ba      	b.n	800863a <_printf_float+0xee>
 80086c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086c8:	d9dc      	bls.n	8008684 <_printf_float+0x138>
 80086ca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086ce:	d118      	bne.n	8008702 <_printf_float+0x1b6>
 80086d0:	2900      	cmp	r1, #0
 80086d2:	6863      	ldr	r3, [r4, #4]
 80086d4:	dd0b      	ble.n	80086ee <_printf_float+0x1a2>
 80086d6:	6121      	str	r1, [r4, #16]
 80086d8:	b913      	cbnz	r3, 80086e0 <_printf_float+0x194>
 80086da:	6822      	ldr	r2, [r4, #0]
 80086dc:	07d0      	lsls	r0, r2, #31
 80086de:	d502      	bpl.n	80086e6 <_printf_float+0x19a>
 80086e0:	3301      	adds	r3, #1
 80086e2:	440b      	add	r3, r1
 80086e4:	6123      	str	r3, [r4, #16]
 80086e6:	f04f 0900 	mov.w	r9, #0
 80086ea:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086ec:	e7dc      	b.n	80086a8 <_printf_float+0x15c>
 80086ee:	b913      	cbnz	r3, 80086f6 <_printf_float+0x1aa>
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	07d2      	lsls	r2, r2, #31
 80086f4:	d501      	bpl.n	80086fa <_printf_float+0x1ae>
 80086f6:	3302      	adds	r3, #2
 80086f8:	e7f4      	b.n	80086e4 <_printf_float+0x198>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e7f2      	b.n	80086e4 <_printf_float+0x198>
 80086fe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008704:	4299      	cmp	r1, r3
 8008706:	db05      	blt.n	8008714 <_printf_float+0x1c8>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	6121      	str	r1, [r4, #16]
 800870c:	07d8      	lsls	r0, r3, #31
 800870e:	d5ea      	bpl.n	80086e6 <_printf_float+0x19a>
 8008710:	1c4b      	adds	r3, r1, #1
 8008712:	e7e7      	b.n	80086e4 <_printf_float+0x198>
 8008714:	2900      	cmp	r1, #0
 8008716:	bfcc      	ite	gt
 8008718:	2201      	movgt	r2, #1
 800871a:	f1c1 0202 	rsble	r2, r1, #2
 800871e:	4413      	add	r3, r2
 8008720:	e7e0      	b.n	80086e4 <_printf_float+0x198>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	055a      	lsls	r2, r3, #21
 8008726:	d407      	bmi.n	8008738 <_printf_float+0x1ec>
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	4642      	mov	r2, r8
 800872c:	4631      	mov	r1, r6
 800872e:	4628      	mov	r0, r5
 8008730:	47b8      	blx	r7
 8008732:	3001      	adds	r0, #1
 8008734:	d12b      	bne.n	800878e <_printf_float+0x242>
 8008736:	e764      	b.n	8008602 <_printf_float+0xb6>
 8008738:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800873c:	f240 80dc 	bls.w	80088f8 <_printf_float+0x3ac>
 8008740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008744:	2200      	movs	r2, #0
 8008746:	2300      	movs	r3, #0
 8008748:	f7f8 f92e 	bl	80009a8 <__aeabi_dcmpeq>
 800874c:	2800      	cmp	r0, #0
 800874e:	d033      	beq.n	80087b8 <_printf_float+0x26c>
 8008750:	2301      	movs	r3, #1
 8008752:	4631      	mov	r1, r6
 8008754:	4628      	mov	r0, r5
 8008756:	4a35      	ldr	r2, [pc, #212]	@ (800882c <_printf_float+0x2e0>)
 8008758:	47b8      	blx	r7
 800875a:	3001      	adds	r0, #1
 800875c:	f43f af51 	beq.w	8008602 <_printf_float+0xb6>
 8008760:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008764:	4543      	cmp	r3, r8
 8008766:	db02      	blt.n	800876e <_printf_float+0x222>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	07d8      	lsls	r0, r3, #31
 800876c:	d50f      	bpl.n	800878e <_printf_float+0x242>
 800876e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008772:	4631      	mov	r1, r6
 8008774:	4628      	mov	r0, r5
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	f43f af42 	beq.w	8008602 <_printf_float+0xb6>
 800877e:	f04f 0900 	mov.w	r9, #0
 8008782:	f108 38ff 	add.w	r8, r8, #4294967295
 8008786:	f104 0a1a 	add.w	sl, r4, #26
 800878a:	45c8      	cmp	r8, r9
 800878c:	dc09      	bgt.n	80087a2 <_printf_float+0x256>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	079b      	lsls	r3, r3, #30
 8008792:	f100 8102 	bmi.w	800899a <_printf_float+0x44e>
 8008796:	68e0      	ldr	r0, [r4, #12]
 8008798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800879a:	4298      	cmp	r0, r3
 800879c:	bfb8      	it	lt
 800879e:	4618      	movlt	r0, r3
 80087a0:	e731      	b.n	8008606 <_printf_float+0xba>
 80087a2:	2301      	movs	r3, #1
 80087a4:	4652      	mov	r2, sl
 80087a6:	4631      	mov	r1, r6
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b8      	blx	r7
 80087ac:	3001      	adds	r0, #1
 80087ae:	f43f af28 	beq.w	8008602 <_printf_float+0xb6>
 80087b2:	f109 0901 	add.w	r9, r9, #1
 80087b6:	e7e8      	b.n	800878a <_printf_float+0x23e>
 80087b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dc38      	bgt.n	8008830 <_printf_float+0x2e4>
 80087be:	2301      	movs	r3, #1
 80087c0:	4631      	mov	r1, r6
 80087c2:	4628      	mov	r0, r5
 80087c4:	4a19      	ldr	r2, [pc, #100]	@ (800882c <_printf_float+0x2e0>)
 80087c6:	47b8      	blx	r7
 80087c8:	3001      	adds	r0, #1
 80087ca:	f43f af1a 	beq.w	8008602 <_printf_float+0xb6>
 80087ce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80087d2:	ea59 0303 	orrs.w	r3, r9, r3
 80087d6:	d102      	bne.n	80087de <_printf_float+0x292>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	07d9      	lsls	r1, r3, #31
 80087dc:	d5d7      	bpl.n	800878e <_printf_float+0x242>
 80087de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	f43f af0a 	beq.w	8008602 <_printf_float+0xb6>
 80087ee:	f04f 0a00 	mov.w	sl, #0
 80087f2:	f104 0b1a 	add.w	fp, r4, #26
 80087f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087f8:	425b      	negs	r3, r3
 80087fa:	4553      	cmp	r3, sl
 80087fc:	dc01      	bgt.n	8008802 <_printf_float+0x2b6>
 80087fe:	464b      	mov	r3, r9
 8008800:	e793      	b.n	800872a <_printf_float+0x1de>
 8008802:	2301      	movs	r3, #1
 8008804:	465a      	mov	r2, fp
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	47b8      	blx	r7
 800880c:	3001      	adds	r0, #1
 800880e:	f43f aef8 	beq.w	8008602 <_printf_float+0xb6>
 8008812:	f10a 0a01 	add.w	sl, sl, #1
 8008816:	e7ee      	b.n	80087f6 <_printf_float+0x2aa>
 8008818:	7fefffff 	.word	0x7fefffff
 800881c:	0800b5d4 	.word	0x0800b5d4
 8008820:	0800b5d8 	.word	0x0800b5d8
 8008824:	0800b5dc 	.word	0x0800b5dc
 8008828:	0800b5e0 	.word	0x0800b5e0
 800882c:	0800b5e4 	.word	0x0800b5e4
 8008830:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008832:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008836:	4553      	cmp	r3, sl
 8008838:	bfa8      	it	ge
 800883a:	4653      	movge	r3, sl
 800883c:	2b00      	cmp	r3, #0
 800883e:	4699      	mov	r9, r3
 8008840:	dc36      	bgt.n	80088b0 <_printf_float+0x364>
 8008842:	f04f 0b00 	mov.w	fp, #0
 8008846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800884a:	f104 021a 	add.w	r2, r4, #26
 800884e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008850:	930a      	str	r3, [sp, #40]	@ 0x28
 8008852:	eba3 0309 	sub.w	r3, r3, r9
 8008856:	455b      	cmp	r3, fp
 8008858:	dc31      	bgt.n	80088be <_printf_float+0x372>
 800885a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800885c:	459a      	cmp	sl, r3
 800885e:	dc3a      	bgt.n	80088d6 <_printf_float+0x38a>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	07da      	lsls	r2, r3, #31
 8008864:	d437      	bmi.n	80088d6 <_printf_float+0x38a>
 8008866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008868:	ebaa 0903 	sub.w	r9, sl, r3
 800886c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800886e:	ebaa 0303 	sub.w	r3, sl, r3
 8008872:	4599      	cmp	r9, r3
 8008874:	bfa8      	it	ge
 8008876:	4699      	movge	r9, r3
 8008878:	f1b9 0f00 	cmp.w	r9, #0
 800887c:	dc33      	bgt.n	80088e6 <_printf_float+0x39a>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008886:	f104 0b1a 	add.w	fp, r4, #26
 800888a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800888c:	ebaa 0303 	sub.w	r3, sl, r3
 8008890:	eba3 0309 	sub.w	r3, r3, r9
 8008894:	4543      	cmp	r3, r8
 8008896:	f77f af7a 	ble.w	800878e <_printf_float+0x242>
 800889a:	2301      	movs	r3, #1
 800889c:	465a      	mov	r2, fp
 800889e:	4631      	mov	r1, r6
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b8      	blx	r7
 80088a4:	3001      	adds	r0, #1
 80088a6:	f43f aeac 	beq.w	8008602 <_printf_float+0xb6>
 80088aa:	f108 0801 	add.w	r8, r8, #1
 80088ae:	e7ec      	b.n	800888a <_printf_float+0x33e>
 80088b0:	4642      	mov	r2, r8
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	d1c2      	bne.n	8008842 <_printf_float+0x2f6>
 80088bc:	e6a1      	b.n	8008602 <_printf_float+0xb6>
 80088be:	2301      	movs	r3, #1
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	f43f ae9a 	beq.w	8008602 <_printf_float+0xb6>
 80088ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088d0:	f10b 0b01 	add.w	fp, fp, #1
 80088d4:	e7bb      	b.n	800884e <_printf_float+0x302>
 80088d6:	4631      	mov	r1, r6
 80088d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	d1c0      	bne.n	8008866 <_printf_float+0x31a>
 80088e4:	e68d      	b.n	8008602 <_printf_float+0xb6>
 80088e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088e8:	464b      	mov	r3, r9
 80088ea:	4631      	mov	r1, r6
 80088ec:	4628      	mov	r0, r5
 80088ee:	4442      	add	r2, r8
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	d1c3      	bne.n	800887e <_printf_float+0x332>
 80088f6:	e684      	b.n	8008602 <_printf_float+0xb6>
 80088f8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80088fc:	f1ba 0f01 	cmp.w	sl, #1
 8008900:	dc01      	bgt.n	8008906 <_printf_float+0x3ba>
 8008902:	07db      	lsls	r3, r3, #31
 8008904:	d536      	bpl.n	8008974 <_printf_float+0x428>
 8008906:	2301      	movs	r3, #1
 8008908:	4642      	mov	r2, r8
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f ae76 	beq.w	8008602 <_printf_float+0xb6>
 8008916:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	f43f ae6e 	beq.w	8008602 <_printf_float+0xb6>
 8008926:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008932:	f7f8 f839 	bl	80009a8 <__aeabi_dcmpeq>
 8008936:	b9c0      	cbnz	r0, 800896a <_printf_float+0x41e>
 8008938:	4653      	mov	r3, sl
 800893a:	f108 0201 	add.w	r2, r8, #1
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	d10c      	bne.n	8008962 <_printf_float+0x416>
 8008948:	e65b      	b.n	8008602 <_printf_float+0xb6>
 800894a:	2301      	movs	r3, #1
 800894c:	465a      	mov	r2, fp
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f ae54 	beq.w	8008602 <_printf_float+0xb6>
 800895a:	f108 0801 	add.w	r8, r8, #1
 800895e:	45d0      	cmp	r8, sl
 8008960:	dbf3      	blt.n	800894a <_printf_float+0x3fe>
 8008962:	464b      	mov	r3, r9
 8008964:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008968:	e6e0      	b.n	800872c <_printf_float+0x1e0>
 800896a:	f04f 0800 	mov.w	r8, #0
 800896e:	f104 0b1a 	add.w	fp, r4, #26
 8008972:	e7f4      	b.n	800895e <_printf_float+0x412>
 8008974:	2301      	movs	r3, #1
 8008976:	4642      	mov	r2, r8
 8008978:	e7e1      	b.n	800893e <_printf_float+0x3f2>
 800897a:	2301      	movs	r3, #1
 800897c:	464a      	mov	r2, r9
 800897e:	4631      	mov	r1, r6
 8008980:	4628      	mov	r0, r5
 8008982:	47b8      	blx	r7
 8008984:	3001      	adds	r0, #1
 8008986:	f43f ae3c 	beq.w	8008602 <_printf_float+0xb6>
 800898a:	f108 0801 	add.w	r8, r8, #1
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008992:	1a5b      	subs	r3, r3, r1
 8008994:	4543      	cmp	r3, r8
 8008996:	dcf0      	bgt.n	800897a <_printf_float+0x42e>
 8008998:	e6fd      	b.n	8008796 <_printf_float+0x24a>
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	f104 0919 	add.w	r9, r4, #25
 80089a2:	e7f4      	b.n	800898e <_printf_float+0x442>

080089a4 <_printf_common>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	4616      	mov	r6, r2
 80089aa:	4698      	mov	r8, r3
 80089ac:	688a      	ldr	r2, [r1, #8]
 80089ae:	690b      	ldr	r3, [r1, #16]
 80089b0:	4607      	mov	r7, r0
 80089b2:	4293      	cmp	r3, r2
 80089b4:	bfb8      	it	lt
 80089b6:	4613      	movlt	r3, r2
 80089b8:	6033      	str	r3, [r6, #0]
 80089ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089be:	460c      	mov	r4, r1
 80089c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089c4:	b10a      	cbz	r2, 80089ca <_printf_common+0x26>
 80089c6:	3301      	adds	r3, #1
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	0699      	lsls	r1, r3, #26
 80089ce:	bf42      	ittt	mi
 80089d0:	6833      	ldrmi	r3, [r6, #0]
 80089d2:	3302      	addmi	r3, #2
 80089d4:	6033      	strmi	r3, [r6, #0]
 80089d6:	6825      	ldr	r5, [r4, #0]
 80089d8:	f015 0506 	ands.w	r5, r5, #6
 80089dc:	d106      	bne.n	80089ec <_printf_common+0x48>
 80089de:	f104 0a19 	add.w	sl, r4, #25
 80089e2:	68e3      	ldr	r3, [r4, #12]
 80089e4:	6832      	ldr	r2, [r6, #0]
 80089e6:	1a9b      	subs	r3, r3, r2
 80089e8:	42ab      	cmp	r3, r5
 80089ea:	dc2b      	bgt.n	8008a44 <_printf_common+0xa0>
 80089ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089f0:	6822      	ldr	r2, [r4, #0]
 80089f2:	3b00      	subs	r3, #0
 80089f4:	bf18      	it	ne
 80089f6:	2301      	movne	r3, #1
 80089f8:	0692      	lsls	r2, r2, #26
 80089fa:	d430      	bmi.n	8008a5e <_printf_common+0xba>
 80089fc:	4641      	mov	r1, r8
 80089fe:	4638      	mov	r0, r7
 8008a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a04:	47c8      	blx	r9
 8008a06:	3001      	adds	r0, #1
 8008a08:	d023      	beq.n	8008a52 <_printf_common+0xae>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	6922      	ldr	r2, [r4, #16]
 8008a0e:	f003 0306 	and.w	r3, r3, #6
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	bf14      	ite	ne
 8008a16:	2500      	movne	r5, #0
 8008a18:	6833      	ldreq	r3, [r6, #0]
 8008a1a:	f04f 0600 	mov.w	r6, #0
 8008a1e:	bf08      	it	eq
 8008a20:	68e5      	ldreq	r5, [r4, #12]
 8008a22:	f104 041a 	add.w	r4, r4, #26
 8008a26:	bf08      	it	eq
 8008a28:	1aed      	subeq	r5, r5, r3
 8008a2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a2e:	bf08      	it	eq
 8008a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bfc4      	itt	gt
 8008a38:	1a9b      	subgt	r3, r3, r2
 8008a3a:	18ed      	addgt	r5, r5, r3
 8008a3c:	42b5      	cmp	r5, r6
 8008a3e:	d11a      	bne.n	8008a76 <_printf_common+0xd2>
 8008a40:	2000      	movs	r0, #0
 8008a42:	e008      	b.n	8008a56 <_printf_common+0xb2>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4652      	mov	r2, sl
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c8      	blx	r9
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d103      	bne.n	8008a5a <_printf_common+0xb6>
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295
 8008a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5a:	3501      	adds	r5, #1
 8008a5c:	e7c1      	b.n	80089e2 <_printf_common+0x3e>
 8008a5e:	2030      	movs	r0, #48	@ 0x30
 8008a60:	18e1      	adds	r1, r4, r3
 8008a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a6c:	4422      	add	r2, r4
 8008a6e:	3302      	adds	r3, #2
 8008a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a74:	e7c2      	b.n	80089fc <_printf_common+0x58>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4641      	mov	r1, r8
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	47c8      	blx	r9
 8008a80:	3001      	adds	r0, #1
 8008a82:	d0e6      	beq.n	8008a52 <_printf_common+0xae>
 8008a84:	3601      	adds	r6, #1
 8008a86:	e7d9      	b.n	8008a3c <_printf_common+0x98>

08008a88 <_printf_i>:
 8008a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8c:	7e0f      	ldrb	r7, [r1, #24]
 8008a8e:	4691      	mov	r9, r2
 8008a90:	2f78      	cmp	r7, #120	@ 0x78
 8008a92:	4680      	mov	r8, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	469a      	mov	sl, r3
 8008a98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a9e:	d807      	bhi.n	8008ab0 <_printf_i+0x28>
 8008aa0:	2f62      	cmp	r7, #98	@ 0x62
 8008aa2:	d80a      	bhi.n	8008aba <_printf_i+0x32>
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	f000 80d3 	beq.w	8008c50 <_printf_i+0x1c8>
 8008aaa:	2f58      	cmp	r7, #88	@ 0x58
 8008aac:	f000 80ba 	beq.w	8008c24 <_printf_i+0x19c>
 8008ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ab8:	e03a      	b.n	8008b30 <_printf_i+0xa8>
 8008aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008abe:	2b15      	cmp	r3, #21
 8008ac0:	d8f6      	bhi.n	8008ab0 <_printf_i+0x28>
 8008ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ac8 <_printf_i+0x40>)
 8008ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ac8:	08008b21 	.word	0x08008b21
 8008acc:	08008b35 	.word	0x08008b35
 8008ad0:	08008ab1 	.word	0x08008ab1
 8008ad4:	08008ab1 	.word	0x08008ab1
 8008ad8:	08008ab1 	.word	0x08008ab1
 8008adc:	08008ab1 	.word	0x08008ab1
 8008ae0:	08008b35 	.word	0x08008b35
 8008ae4:	08008ab1 	.word	0x08008ab1
 8008ae8:	08008ab1 	.word	0x08008ab1
 8008aec:	08008ab1 	.word	0x08008ab1
 8008af0:	08008ab1 	.word	0x08008ab1
 8008af4:	08008c37 	.word	0x08008c37
 8008af8:	08008b5f 	.word	0x08008b5f
 8008afc:	08008bf1 	.word	0x08008bf1
 8008b00:	08008ab1 	.word	0x08008ab1
 8008b04:	08008ab1 	.word	0x08008ab1
 8008b08:	08008c59 	.word	0x08008c59
 8008b0c:	08008ab1 	.word	0x08008ab1
 8008b10:	08008b5f 	.word	0x08008b5f
 8008b14:	08008ab1 	.word	0x08008ab1
 8008b18:	08008ab1 	.word	0x08008ab1
 8008b1c:	08008bf9 	.word	0x08008bf9
 8008b20:	6833      	ldr	r3, [r6, #0]
 8008b22:	1d1a      	adds	r2, r3, #4
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6032      	str	r2, [r6, #0]
 8008b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b30:	2301      	movs	r3, #1
 8008b32:	e09e      	b.n	8008c72 <_printf_i+0x1ea>
 8008b34:	6833      	ldr	r3, [r6, #0]
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	1d19      	adds	r1, r3, #4
 8008b3a:	6031      	str	r1, [r6, #0]
 8008b3c:	0606      	lsls	r6, r0, #24
 8008b3e:	d501      	bpl.n	8008b44 <_printf_i+0xbc>
 8008b40:	681d      	ldr	r5, [r3, #0]
 8008b42:	e003      	b.n	8008b4c <_printf_i+0xc4>
 8008b44:	0645      	lsls	r5, r0, #25
 8008b46:	d5fb      	bpl.n	8008b40 <_printf_i+0xb8>
 8008b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b4c:	2d00      	cmp	r5, #0
 8008b4e:	da03      	bge.n	8008b58 <_printf_i+0xd0>
 8008b50:	232d      	movs	r3, #45	@ 0x2d
 8008b52:	426d      	negs	r5, r5
 8008b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b58:	230a      	movs	r3, #10
 8008b5a:	4859      	ldr	r0, [pc, #356]	@ (8008cc0 <_printf_i+0x238>)
 8008b5c:	e011      	b.n	8008b82 <_printf_i+0xfa>
 8008b5e:	6821      	ldr	r1, [r4, #0]
 8008b60:	6833      	ldr	r3, [r6, #0]
 8008b62:	0608      	lsls	r0, r1, #24
 8008b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b68:	d402      	bmi.n	8008b70 <_printf_i+0xe8>
 8008b6a:	0649      	lsls	r1, r1, #25
 8008b6c:	bf48      	it	mi
 8008b6e:	b2ad      	uxthmi	r5, r5
 8008b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	bf14      	ite	ne
 8008b76:	230a      	movne	r3, #10
 8008b78:	2308      	moveq	r3, #8
 8008b7a:	4851      	ldr	r0, [pc, #324]	@ (8008cc0 <_printf_i+0x238>)
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b82:	6866      	ldr	r6, [r4, #4]
 8008b84:	2e00      	cmp	r6, #0
 8008b86:	bfa8      	it	ge
 8008b88:	6821      	ldrge	r1, [r4, #0]
 8008b8a:	60a6      	str	r6, [r4, #8]
 8008b8c:	bfa4      	itt	ge
 8008b8e:	f021 0104 	bicge.w	r1, r1, #4
 8008b92:	6021      	strge	r1, [r4, #0]
 8008b94:	b90d      	cbnz	r5, 8008b9a <_printf_i+0x112>
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	d04b      	beq.n	8008c32 <_printf_i+0x1aa>
 8008b9a:	4616      	mov	r6, r2
 8008b9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ba0:	fb03 5711 	mls	r7, r3, r1, r5
 8008ba4:	5dc7      	ldrb	r7, [r0, r7]
 8008ba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008baa:	462f      	mov	r7, r5
 8008bac:	42bb      	cmp	r3, r7
 8008bae:	460d      	mov	r5, r1
 8008bb0:	d9f4      	bls.n	8008b9c <_printf_i+0x114>
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	d10b      	bne.n	8008bce <_printf_i+0x146>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	07df      	lsls	r7, r3, #31
 8008bba:	d508      	bpl.n	8008bce <_printf_i+0x146>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	6861      	ldr	r1, [r4, #4]
 8008bc0:	4299      	cmp	r1, r3
 8008bc2:	bfde      	ittt	le
 8008bc4:	2330      	movle	r3, #48	@ 0x30
 8008bc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bce:	1b92      	subs	r2, r2, r6
 8008bd0:	6122      	str	r2, [r4, #16]
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f8cd a000 	str.w	sl, [sp]
 8008bdc:	aa03      	add	r2, sp, #12
 8008bde:	f7ff fee1 	bl	80089a4 <_printf_common>
 8008be2:	3001      	adds	r0, #1
 8008be4:	d14a      	bne.n	8008c7c <_printf_i+0x1f4>
 8008be6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bea:	b004      	add	sp, #16
 8008bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	f043 0320 	orr.w	r3, r3, #32
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	2778      	movs	r7, #120	@ 0x78
 8008bfa:	4832      	ldr	r0, [pc, #200]	@ (8008cc4 <_printf_i+0x23c>)
 8008bfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	061f      	lsls	r7, r3, #24
 8008c06:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c0a:	d402      	bmi.n	8008c12 <_printf_i+0x18a>
 8008c0c:	065f      	lsls	r7, r3, #25
 8008c0e:	bf48      	it	mi
 8008c10:	b2ad      	uxthmi	r5, r5
 8008c12:	6031      	str	r1, [r6, #0]
 8008c14:	07d9      	lsls	r1, r3, #31
 8008c16:	bf44      	itt	mi
 8008c18:	f043 0320 	orrmi.w	r3, r3, #32
 8008c1c:	6023      	strmi	r3, [r4, #0]
 8008c1e:	b11d      	cbz	r5, 8008c28 <_printf_i+0x1a0>
 8008c20:	2310      	movs	r3, #16
 8008c22:	e7ab      	b.n	8008b7c <_printf_i+0xf4>
 8008c24:	4826      	ldr	r0, [pc, #152]	@ (8008cc0 <_printf_i+0x238>)
 8008c26:	e7e9      	b.n	8008bfc <_printf_i+0x174>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	f023 0320 	bic.w	r3, r3, #32
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	e7f6      	b.n	8008c20 <_printf_i+0x198>
 8008c32:	4616      	mov	r6, r2
 8008c34:	e7bd      	b.n	8008bb2 <_printf_i+0x12a>
 8008c36:	6833      	ldr	r3, [r6, #0]
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	1d18      	adds	r0, r3, #4
 8008c3c:	6961      	ldr	r1, [r4, #20]
 8008c3e:	6030      	str	r0, [r6, #0]
 8008c40:	062e      	lsls	r6, r5, #24
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	d501      	bpl.n	8008c4a <_printf_i+0x1c2>
 8008c46:	6019      	str	r1, [r3, #0]
 8008c48:	e002      	b.n	8008c50 <_printf_i+0x1c8>
 8008c4a:	0668      	lsls	r0, r5, #25
 8008c4c:	d5fb      	bpl.n	8008c46 <_printf_i+0x1be>
 8008c4e:	8019      	strh	r1, [r3, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	4616      	mov	r6, r2
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	e7bc      	b.n	8008bd2 <_printf_i+0x14a>
 8008c58:	6833      	ldr	r3, [r6, #0]
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	1d1a      	adds	r2, r3, #4
 8008c5e:	6032      	str	r2, [r6, #0]
 8008c60:	681e      	ldr	r6, [r3, #0]
 8008c62:	6862      	ldr	r2, [r4, #4]
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 fac8 	bl	80091fa <memchr>
 8008c6a:	b108      	cbz	r0, 8008c70 <_printf_i+0x1e8>
 8008c6c:	1b80      	subs	r0, r0, r6
 8008c6e:	6060      	str	r0, [r4, #4]
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	2300      	movs	r3, #0
 8008c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c7a:	e7aa      	b.n	8008bd2 <_printf_i+0x14a>
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	4649      	mov	r1, r9
 8008c80:	4640      	mov	r0, r8
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	47d0      	blx	sl
 8008c86:	3001      	adds	r0, #1
 8008c88:	d0ad      	beq.n	8008be6 <_printf_i+0x15e>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	079b      	lsls	r3, r3, #30
 8008c8e:	d413      	bmi.n	8008cb8 <_printf_i+0x230>
 8008c90:	68e0      	ldr	r0, [r4, #12]
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	4298      	cmp	r0, r3
 8008c96:	bfb8      	it	lt
 8008c98:	4618      	movlt	r0, r3
 8008c9a:	e7a6      	b.n	8008bea <_printf_i+0x162>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	47d0      	blx	sl
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d09d      	beq.n	8008be6 <_printf_i+0x15e>
 8008caa:	3501      	adds	r5, #1
 8008cac:	68e3      	ldr	r3, [r4, #12]
 8008cae:	9903      	ldr	r1, [sp, #12]
 8008cb0:	1a5b      	subs	r3, r3, r1
 8008cb2:	42ab      	cmp	r3, r5
 8008cb4:	dcf2      	bgt.n	8008c9c <_printf_i+0x214>
 8008cb6:	e7eb      	b.n	8008c90 <_printf_i+0x208>
 8008cb8:	2500      	movs	r5, #0
 8008cba:	f104 0619 	add.w	r6, r4, #25
 8008cbe:	e7f5      	b.n	8008cac <_printf_i+0x224>
 8008cc0:	0800b5e6 	.word	0x0800b5e6
 8008cc4:	0800b5f7 	.word	0x0800b5f7

08008cc8 <std>:
 8008cc8:	2300      	movs	r3, #0
 8008cca:	b510      	push	{r4, lr}
 8008ccc:	4604      	mov	r4, r0
 8008cce:	e9c0 3300 	strd	r3, r3, [r0]
 8008cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cd6:	6083      	str	r3, [r0, #8]
 8008cd8:	8181      	strh	r1, [r0, #12]
 8008cda:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cdc:	81c2      	strh	r2, [r0, #14]
 8008cde:	6183      	str	r3, [r0, #24]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	2208      	movs	r2, #8
 8008ce4:	305c      	adds	r0, #92	@ 0x5c
 8008ce6:	f000 f9f9 	bl	80090dc <memset>
 8008cea:	4b0d      	ldr	r3, [pc, #52]	@ (8008d20 <std+0x58>)
 8008cec:	6224      	str	r4, [r4, #32]
 8008cee:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <std+0x5c>)
 8008cf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d28 <std+0x60>)
 8008cf6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d2c <std+0x64>)
 8008cfa:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d30 <std+0x68>)
 8008cfe:	429c      	cmp	r4, r3
 8008d00:	d006      	beq.n	8008d10 <std+0x48>
 8008d02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d06:	4294      	cmp	r4, r2
 8008d08:	d002      	beq.n	8008d10 <std+0x48>
 8008d0a:	33d0      	adds	r3, #208	@ 0xd0
 8008d0c:	429c      	cmp	r4, r3
 8008d0e:	d105      	bne.n	8008d1c <std+0x54>
 8008d10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d18:	f000 ba6c 	b.w	80091f4 <__retarget_lock_init_recursive>
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	bf00      	nop
 8008d20:	08008f2d 	.word	0x08008f2d
 8008d24:	08008f4f 	.word	0x08008f4f
 8008d28:	08008f87 	.word	0x08008f87
 8008d2c:	08008fab 	.word	0x08008fab
 8008d30:	200005f4 	.word	0x200005f4

08008d34 <stdio_exit_handler>:
 8008d34:	4a02      	ldr	r2, [pc, #8]	@ (8008d40 <stdio_exit_handler+0xc>)
 8008d36:	4903      	ldr	r1, [pc, #12]	@ (8008d44 <stdio_exit_handler+0x10>)
 8008d38:	4803      	ldr	r0, [pc, #12]	@ (8008d48 <stdio_exit_handler+0x14>)
 8008d3a:	f000 b869 	b.w	8008e10 <_fwalk_sglue>
 8008d3e:	bf00      	nop
 8008d40:	20000024 	.word	0x20000024
 8008d44:	0800aa5d 	.word	0x0800aa5d
 8008d48:	200001a0 	.word	0x200001a0

08008d4c <cleanup_stdio>:
 8008d4c:	6841      	ldr	r1, [r0, #4]
 8008d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d80 <cleanup_stdio+0x34>)
 8008d50:	b510      	push	{r4, lr}
 8008d52:	4299      	cmp	r1, r3
 8008d54:	4604      	mov	r4, r0
 8008d56:	d001      	beq.n	8008d5c <cleanup_stdio+0x10>
 8008d58:	f001 fe80 	bl	800aa5c <_fflush_r>
 8008d5c:	68a1      	ldr	r1, [r4, #8]
 8008d5e:	4b09      	ldr	r3, [pc, #36]	@ (8008d84 <cleanup_stdio+0x38>)
 8008d60:	4299      	cmp	r1, r3
 8008d62:	d002      	beq.n	8008d6a <cleanup_stdio+0x1e>
 8008d64:	4620      	mov	r0, r4
 8008d66:	f001 fe79 	bl	800aa5c <_fflush_r>
 8008d6a:	68e1      	ldr	r1, [r4, #12]
 8008d6c:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <cleanup_stdio+0x3c>)
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	d004      	beq.n	8008d7c <cleanup_stdio+0x30>
 8008d72:	4620      	mov	r0, r4
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d78:	f001 be70 	b.w	800aa5c <_fflush_r>
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	bf00      	nop
 8008d80:	200005f4 	.word	0x200005f4
 8008d84:	2000065c 	.word	0x2000065c
 8008d88:	200006c4 	.word	0x200006c4

08008d8c <global_stdio_init.part.0>:
 8008d8c:	b510      	push	{r4, lr}
 8008d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008dbc <global_stdio_init.part.0+0x30>)
 8008d90:	4c0b      	ldr	r4, [pc, #44]	@ (8008dc0 <global_stdio_init.part.0+0x34>)
 8008d92:	4a0c      	ldr	r2, [pc, #48]	@ (8008dc4 <global_stdio_init.part.0+0x38>)
 8008d94:	4620      	mov	r0, r4
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	2104      	movs	r1, #4
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f7ff ff94 	bl	8008cc8 <std>
 8008da0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008da4:	2201      	movs	r2, #1
 8008da6:	2109      	movs	r1, #9
 8008da8:	f7ff ff8e 	bl	8008cc8 <std>
 8008dac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008db0:	2202      	movs	r2, #2
 8008db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db6:	2112      	movs	r1, #18
 8008db8:	f7ff bf86 	b.w	8008cc8 <std>
 8008dbc:	2000072c 	.word	0x2000072c
 8008dc0:	200005f4 	.word	0x200005f4
 8008dc4:	08008d35 	.word	0x08008d35

08008dc8 <__sfp_lock_acquire>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	@ (8008dd0 <__sfp_lock_acquire+0x8>)
 8008dca:	f000 ba14 	b.w	80091f6 <__retarget_lock_acquire_recursive>
 8008dce:	bf00      	nop
 8008dd0:	20000735 	.word	0x20000735

08008dd4 <__sfp_lock_release>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	@ (8008ddc <__sfp_lock_release+0x8>)
 8008dd6:	f000 ba0f 	b.w	80091f8 <__retarget_lock_release_recursive>
 8008dda:	bf00      	nop
 8008ddc:	20000735 	.word	0x20000735

08008de0 <__sinit>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	4604      	mov	r4, r0
 8008de4:	f7ff fff0 	bl	8008dc8 <__sfp_lock_acquire>
 8008de8:	6a23      	ldr	r3, [r4, #32]
 8008dea:	b11b      	cbz	r3, 8008df4 <__sinit+0x14>
 8008dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df0:	f7ff bff0 	b.w	8008dd4 <__sfp_lock_release>
 8008df4:	4b04      	ldr	r3, [pc, #16]	@ (8008e08 <__sinit+0x28>)
 8008df6:	6223      	str	r3, [r4, #32]
 8008df8:	4b04      	ldr	r3, [pc, #16]	@ (8008e0c <__sinit+0x2c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1f5      	bne.n	8008dec <__sinit+0xc>
 8008e00:	f7ff ffc4 	bl	8008d8c <global_stdio_init.part.0>
 8008e04:	e7f2      	b.n	8008dec <__sinit+0xc>
 8008e06:	bf00      	nop
 8008e08:	08008d4d 	.word	0x08008d4d
 8008e0c:	2000072c 	.word	0x2000072c

08008e10 <_fwalk_sglue>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	4607      	mov	r7, r0
 8008e16:	4688      	mov	r8, r1
 8008e18:	4614      	mov	r4, r2
 8008e1a:	2600      	movs	r6, #0
 8008e1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e20:	f1b9 0901 	subs.w	r9, r9, #1
 8008e24:	d505      	bpl.n	8008e32 <_fwalk_sglue+0x22>
 8008e26:	6824      	ldr	r4, [r4, #0]
 8008e28:	2c00      	cmp	r4, #0
 8008e2a:	d1f7      	bne.n	8008e1c <_fwalk_sglue+0xc>
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d907      	bls.n	8008e48 <_fwalk_sglue+0x38>
 8008e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	d003      	beq.n	8008e48 <_fwalk_sglue+0x38>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4638      	mov	r0, r7
 8008e44:	47c0      	blx	r8
 8008e46:	4306      	orrs	r6, r0
 8008e48:	3568      	adds	r5, #104	@ 0x68
 8008e4a:	e7e9      	b.n	8008e20 <_fwalk_sglue+0x10>

08008e4c <iprintf>:
 8008e4c:	b40f      	push	{r0, r1, r2, r3}
 8008e4e:	b507      	push	{r0, r1, r2, lr}
 8008e50:	4906      	ldr	r1, [pc, #24]	@ (8008e6c <iprintf+0x20>)
 8008e52:	ab04      	add	r3, sp, #16
 8008e54:	6808      	ldr	r0, [r1, #0]
 8008e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e5a:	6881      	ldr	r1, [r0, #8]
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	f001 fc65 	bl	800a72c <_vfiprintf_r>
 8008e62:	b003      	add	sp, #12
 8008e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e68:	b004      	add	sp, #16
 8008e6a:	4770      	bx	lr
 8008e6c:	2000019c 	.word	0x2000019c

08008e70 <_puts_r>:
 8008e70:	6a03      	ldr	r3, [r0, #32]
 8008e72:	b570      	push	{r4, r5, r6, lr}
 8008e74:	4605      	mov	r5, r0
 8008e76:	460e      	mov	r6, r1
 8008e78:	6884      	ldr	r4, [r0, #8]
 8008e7a:	b90b      	cbnz	r3, 8008e80 <_puts_r+0x10>
 8008e7c:	f7ff ffb0 	bl	8008de0 <__sinit>
 8008e80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e82:	07db      	lsls	r3, r3, #31
 8008e84:	d405      	bmi.n	8008e92 <_puts_r+0x22>
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	0598      	lsls	r0, r3, #22
 8008e8a:	d402      	bmi.n	8008e92 <_puts_r+0x22>
 8008e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e8e:	f000 f9b2 	bl	80091f6 <__retarget_lock_acquire_recursive>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	0719      	lsls	r1, r3, #28
 8008e96:	d502      	bpl.n	8008e9e <_puts_r+0x2e>
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d135      	bne.n	8008f0a <_puts_r+0x9a>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f000 f8c5 	bl	8009030 <__swsetup_r>
 8008ea6:	b380      	cbz	r0, 8008f0a <_puts_r+0x9a>
 8008ea8:	f04f 35ff 	mov.w	r5, #4294967295
 8008eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eae:	07da      	lsls	r2, r3, #31
 8008eb0:	d405      	bmi.n	8008ebe <_puts_r+0x4e>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	059b      	lsls	r3, r3, #22
 8008eb6:	d402      	bmi.n	8008ebe <_puts_r+0x4e>
 8008eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eba:	f000 f99d 	bl	80091f8 <__retarget_lock_release_recursive>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	bd70      	pop	{r4, r5, r6, pc}
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da04      	bge.n	8008ed0 <_puts_r+0x60>
 8008ec6:	69a2      	ldr	r2, [r4, #24]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	dc17      	bgt.n	8008efc <_puts_r+0x8c>
 8008ecc:	290a      	cmp	r1, #10
 8008ece:	d015      	beq.n	8008efc <_puts_r+0x8c>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	6022      	str	r2, [r4, #0]
 8008ed6:	7019      	strb	r1, [r3, #0]
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	2900      	cmp	r1, #0
 8008ee4:	d1ed      	bne.n	8008ec2 <_puts_r+0x52>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	da11      	bge.n	8008f0e <_puts_r+0x9e>
 8008eea:	4622      	mov	r2, r4
 8008eec:	210a      	movs	r1, #10
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f85f 	bl	8008fb2 <__swbuf_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d0d7      	beq.n	8008ea8 <_puts_r+0x38>
 8008ef8:	250a      	movs	r5, #10
 8008efa:	e7d7      	b.n	8008eac <_puts_r+0x3c>
 8008efc:	4622      	mov	r2, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 f857 	bl	8008fb2 <__swbuf_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d1e7      	bne.n	8008ed8 <_puts_r+0x68>
 8008f08:	e7ce      	b.n	8008ea8 <_puts_r+0x38>
 8008f0a:	3e01      	subs	r6, #1
 8008f0c:	e7e4      	b.n	8008ed8 <_puts_r+0x68>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	220a      	movs	r2, #10
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e7ee      	b.n	8008ef8 <_puts_r+0x88>
	...

08008f1c <puts>:
 8008f1c:	4b02      	ldr	r3, [pc, #8]	@ (8008f28 <puts+0xc>)
 8008f1e:	4601      	mov	r1, r0
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	f7ff bfa5 	b.w	8008e70 <_puts_r>
 8008f26:	bf00      	nop
 8008f28:	2000019c 	.word	0x2000019c

08008f2c <__sread>:
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	460c      	mov	r4, r1
 8008f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f34:	f000 f900 	bl	8009138 <_read_r>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	bfab      	itete	ge
 8008f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f40:	181b      	addge	r3, r3, r0
 8008f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f46:	bfac      	ite	ge
 8008f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f4a:	81a3      	strhlt	r3, [r4, #12]
 8008f4c:	bd10      	pop	{r4, pc}

08008f4e <__swrite>:
 8008f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	461f      	mov	r7, r3
 8008f54:	898b      	ldrh	r3, [r1, #12]
 8008f56:	4605      	mov	r5, r0
 8008f58:	05db      	lsls	r3, r3, #23
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	d505      	bpl.n	8008f6c <__swrite+0x1e>
 8008f60:	2302      	movs	r3, #2
 8008f62:	2200      	movs	r2, #0
 8008f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f68:	f000 f8d4 	bl	8009114 <_lseek_r>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	4632      	mov	r2, r6
 8008f70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	4628      	mov	r0, r5
 8008f78:	463b      	mov	r3, r7
 8008f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	f000 b8fb 	b.w	800917c <_write_r>

08008f86 <__sseek>:
 8008f86:	b510      	push	{r4, lr}
 8008f88:	460c      	mov	r4, r1
 8008f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8e:	f000 f8c1 	bl	8009114 <_lseek_r>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	bf15      	itete	ne
 8008f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008fa2:	81a3      	strheq	r3, [r4, #12]
 8008fa4:	bf18      	it	ne
 8008fa6:	81a3      	strhne	r3, [r4, #12]
 8008fa8:	bd10      	pop	{r4, pc}

08008faa <__sclose>:
 8008faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fae:	f000 b8a1 	b.w	80090f4 <_close_r>

08008fb2 <__swbuf_r>:
 8008fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb4:	460e      	mov	r6, r1
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	4605      	mov	r5, r0
 8008fba:	b118      	cbz	r0, 8008fc4 <__swbuf_r+0x12>
 8008fbc:	6a03      	ldr	r3, [r0, #32]
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <__swbuf_r+0x12>
 8008fc0:	f7ff ff0e 	bl	8008de0 <__sinit>
 8008fc4:	69a3      	ldr	r3, [r4, #24]
 8008fc6:	60a3      	str	r3, [r4, #8]
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	071a      	lsls	r2, r3, #28
 8008fcc:	d501      	bpl.n	8008fd2 <__swbuf_r+0x20>
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	b943      	cbnz	r3, 8008fe4 <__swbuf_r+0x32>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f000 f82b 	bl	8009030 <__swsetup_r>
 8008fda:	b118      	cbz	r0, 8008fe4 <__swbuf_r+0x32>
 8008fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	6922      	ldr	r2, [r4, #16]
 8008fe8:	b2f6      	uxtb	r6, r6
 8008fea:	1a98      	subs	r0, r3, r2
 8008fec:	6963      	ldr	r3, [r4, #20]
 8008fee:	4637      	mov	r7, r6
 8008ff0:	4283      	cmp	r3, r0
 8008ff2:	dc05      	bgt.n	8009000 <__swbuf_r+0x4e>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f001 fd30 	bl	800aa5c <_fflush_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d1ed      	bne.n	8008fdc <__swbuf_r+0x2a>
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	3b01      	subs	r3, #1
 8009004:	60a3      	str	r3, [r4, #8]
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	6022      	str	r2, [r4, #0]
 800900c:	701e      	strb	r6, [r3, #0]
 800900e:	6962      	ldr	r2, [r4, #20]
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	429a      	cmp	r2, r3
 8009014:	d004      	beq.n	8009020 <__swbuf_r+0x6e>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	07db      	lsls	r3, r3, #31
 800901a:	d5e1      	bpl.n	8008fe0 <__swbuf_r+0x2e>
 800901c:	2e0a      	cmp	r6, #10
 800901e:	d1df      	bne.n	8008fe0 <__swbuf_r+0x2e>
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	f001 fd1a 	bl	800aa5c <_fflush_r>
 8009028:	2800      	cmp	r0, #0
 800902a:	d0d9      	beq.n	8008fe0 <__swbuf_r+0x2e>
 800902c:	e7d6      	b.n	8008fdc <__swbuf_r+0x2a>
	...

08009030 <__swsetup_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4b29      	ldr	r3, [pc, #164]	@ (80090d8 <__swsetup_r+0xa8>)
 8009034:	4605      	mov	r5, r0
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	460c      	mov	r4, r1
 800903a:	b118      	cbz	r0, 8009044 <__swsetup_r+0x14>
 800903c:	6a03      	ldr	r3, [r0, #32]
 800903e:	b90b      	cbnz	r3, 8009044 <__swsetup_r+0x14>
 8009040:	f7ff fece 	bl	8008de0 <__sinit>
 8009044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009048:	0719      	lsls	r1, r3, #28
 800904a:	d422      	bmi.n	8009092 <__swsetup_r+0x62>
 800904c:	06da      	lsls	r2, r3, #27
 800904e:	d407      	bmi.n	8009060 <__swsetup_r+0x30>
 8009050:	2209      	movs	r2, #9
 8009052:	602a      	str	r2, [r5, #0]
 8009054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	e033      	b.n	80090c8 <__swsetup_r+0x98>
 8009060:	0758      	lsls	r0, r3, #29
 8009062:	d512      	bpl.n	800908a <__swsetup_r+0x5a>
 8009064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009066:	b141      	cbz	r1, 800907a <__swsetup_r+0x4a>
 8009068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800906c:	4299      	cmp	r1, r3
 800906e:	d002      	beq.n	8009076 <__swsetup_r+0x46>
 8009070:	4628      	mov	r0, r5
 8009072:	f000 ff4d 	bl	8009f10 <_free_r>
 8009076:	2300      	movs	r3, #0
 8009078:	6363      	str	r3, [r4, #52]	@ 0x34
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009080:	81a3      	strh	r3, [r4, #12]
 8009082:	2300      	movs	r3, #0
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	f043 0308 	orr.w	r3, r3, #8
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	b94b      	cbnz	r3, 80090aa <__swsetup_r+0x7a>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800909c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090a0:	d003      	beq.n	80090aa <__swsetup_r+0x7a>
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f001 fd38 	bl	800ab1a <__smakebuf_r>
 80090aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ae:	f013 0201 	ands.w	r2, r3, #1
 80090b2:	d00a      	beq.n	80090ca <__swsetup_r+0x9a>
 80090b4:	2200      	movs	r2, #0
 80090b6:	60a2      	str	r2, [r4, #8]
 80090b8:	6962      	ldr	r2, [r4, #20]
 80090ba:	4252      	negs	r2, r2
 80090bc:	61a2      	str	r2, [r4, #24]
 80090be:	6922      	ldr	r2, [r4, #16]
 80090c0:	b942      	cbnz	r2, 80090d4 <__swsetup_r+0xa4>
 80090c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090c6:	d1c5      	bne.n	8009054 <__swsetup_r+0x24>
 80090c8:	bd38      	pop	{r3, r4, r5, pc}
 80090ca:	0799      	lsls	r1, r3, #30
 80090cc:	bf58      	it	pl
 80090ce:	6962      	ldrpl	r2, [r4, #20]
 80090d0:	60a2      	str	r2, [r4, #8]
 80090d2:	e7f4      	b.n	80090be <__swsetup_r+0x8e>
 80090d4:	2000      	movs	r0, #0
 80090d6:	e7f7      	b.n	80090c8 <__swsetup_r+0x98>
 80090d8:	2000019c 	.word	0x2000019c

080090dc <memset>:
 80090dc:	4603      	mov	r3, r0
 80090de:	4402      	add	r2, r0
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d100      	bne.n	80090e6 <memset+0xa>
 80090e4:	4770      	bx	lr
 80090e6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ea:	e7f9      	b.n	80090e0 <memset+0x4>

080090ec <_localeconv_r>:
 80090ec:	4800      	ldr	r0, [pc, #0]	@ (80090f0 <_localeconv_r+0x4>)
 80090ee:	4770      	bx	lr
 80090f0:	20000120 	.word	0x20000120

080090f4 <_close_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	2300      	movs	r3, #0
 80090f8:	4d05      	ldr	r5, [pc, #20]	@ (8009110 <_close_r+0x1c>)
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	602b      	str	r3, [r5, #0]
 8009100:	f7f8 f9a8 	bl	8001454 <_close>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_close_r+0x1a>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	b103      	cbz	r3, 800910e <_close_r+0x1a>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	20000730 	.word	0x20000730

08009114 <_lseek_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4604      	mov	r4, r0
 8009118:	4608      	mov	r0, r1
 800911a:	4611      	mov	r1, r2
 800911c:	2200      	movs	r2, #0
 800911e:	4d05      	ldr	r5, [pc, #20]	@ (8009134 <_lseek_r+0x20>)
 8009120:	602a      	str	r2, [r5, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	f7f8 f9a0 	bl	8001468 <_lseek>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_lseek_r+0x1e>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_lseek_r+0x1e>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	20000730 	.word	0x20000730

08009138 <_read_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	2200      	movs	r2, #0
 8009142:	4d05      	ldr	r5, [pc, #20]	@ (8009158 <_read_r+0x20>)
 8009144:	602a      	str	r2, [r5, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	f7f8 f974 	bl	8001434 <_read>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_read_r+0x1e>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_read_r+0x1e>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	20000730 	.word	0x20000730

0800915c <_sbrk_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	2300      	movs	r3, #0
 8009160:	4d05      	ldr	r5, [pc, #20]	@ (8009178 <_sbrk_r+0x1c>)
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7f8 f980 	bl	800146c <_sbrk>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_sbrk_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_sbrk_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000730 	.word	0x20000730

0800917c <_write_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	2200      	movs	r2, #0
 8009186:	4d05      	ldr	r5, [pc, #20]	@ (800919c <_write_r+0x20>)
 8009188:	602a      	str	r2, [r5, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	f7f7 fe56 	bl	8000e3c <_write>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_write_r+0x1e>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_write_r+0x1e>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	20000730 	.word	0x20000730

080091a0 <__errno>:
 80091a0:	4b01      	ldr	r3, [pc, #4]	@ (80091a8 <__errno+0x8>)
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	2000019c 	.word	0x2000019c

080091ac <__libc_init_array>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	2600      	movs	r6, #0
 80091b0:	4d0c      	ldr	r5, [pc, #48]	@ (80091e4 <__libc_init_array+0x38>)
 80091b2:	4c0d      	ldr	r4, [pc, #52]	@ (80091e8 <__libc_init_array+0x3c>)
 80091b4:	1b64      	subs	r4, r4, r5
 80091b6:	10a4      	asrs	r4, r4, #2
 80091b8:	42a6      	cmp	r6, r4
 80091ba:	d109      	bne.n	80091d0 <__libc_init_array+0x24>
 80091bc:	f001 fd6c 	bl	800ac98 <_init>
 80091c0:	2600      	movs	r6, #0
 80091c2:	4d0a      	ldr	r5, [pc, #40]	@ (80091ec <__libc_init_array+0x40>)
 80091c4:	4c0a      	ldr	r4, [pc, #40]	@ (80091f0 <__libc_init_array+0x44>)
 80091c6:	1b64      	subs	r4, r4, r5
 80091c8:	10a4      	asrs	r4, r4, #2
 80091ca:	42a6      	cmp	r6, r4
 80091cc:	d105      	bne.n	80091da <__libc_init_array+0x2e>
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d4:	4798      	blx	r3
 80091d6:	3601      	adds	r6, #1
 80091d8:	e7ee      	b.n	80091b8 <__libc_init_array+0xc>
 80091da:	f855 3b04 	ldr.w	r3, [r5], #4
 80091de:	4798      	blx	r3
 80091e0:	3601      	adds	r6, #1
 80091e2:	e7f2      	b.n	80091ca <__libc_init_array+0x1e>
 80091e4:	0800b94c 	.word	0x0800b94c
 80091e8:	0800b94c 	.word	0x0800b94c
 80091ec:	0800b94c 	.word	0x0800b94c
 80091f0:	0800b950 	.word	0x0800b950

080091f4 <__retarget_lock_init_recursive>:
 80091f4:	4770      	bx	lr

080091f6 <__retarget_lock_acquire_recursive>:
 80091f6:	4770      	bx	lr

080091f8 <__retarget_lock_release_recursive>:
 80091f8:	4770      	bx	lr

080091fa <memchr>:
 80091fa:	4603      	mov	r3, r0
 80091fc:	b510      	push	{r4, lr}
 80091fe:	b2c9      	uxtb	r1, r1
 8009200:	4402      	add	r2, r0
 8009202:	4293      	cmp	r3, r2
 8009204:	4618      	mov	r0, r3
 8009206:	d101      	bne.n	800920c <memchr+0x12>
 8009208:	2000      	movs	r0, #0
 800920a:	e003      	b.n	8009214 <memchr+0x1a>
 800920c:	7804      	ldrb	r4, [r0, #0]
 800920e:	3301      	adds	r3, #1
 8009210:	428c      	cmp	r4, r1
 8009212:	d1f6      	bne.n	8009202 <memchr+0x8>
 8009214:	bd10      	pop	{r4, pc}

08009216 <memcpy>:
 8009216:	440a      	add	r2, r1
 8009218:	4291      	cmp	r1, r2
 800921a:	f100 33ff 	add.w	r3, r0, #4294967295
 800921e:	d100      	bne.n	8009222 <memcpy+0xc>
 8009220:	4770      	bx	lr
 8009222:	b510      	push	{r4, lr}
 8009224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009228:	4291      	cmp	r1, r2
 800922a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800922e:	d1f9      	bne.n	8009224 <memcpy+0xe>
 8009230:	bd10      	pop	{r4, pc}
	...

08009234 <__assert_func>:
 8009234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009236:	4614      	mov	r4, r2
 8009238:	461a      	mov	r2, r3
 800923a:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <__assert_func+0x2c>)
 800923c:	4605      	mov	r5, r0
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68d8      	ldr	r0, [r3, #12]
 8009242:	b954      	cbnz	r4, 800925a <__assert_func+0x26>
 8009244:	4b07      	ldr	r3, [pc, #28]	@ (8009264 <__assert_func+0x30>)
 8009246:	461c      	mov	r4, r3
 8009248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800924c:	9100      	str	r1, [sp, #0]
 800924e:	462b      	mov	r3, r5
 8009250:	4905      	ldr	r1, [pc, #20]	@ (8009268 <__assert_func+0x34>)
 8009252:	f001 fc2b 	bl	800aaac <fiprintf>
 8009256:	f001 fcbf 	bl	800abd8 <abort>
 800925a:	4b04      	ldr	r3, [pc, #16]	@ (800926c <__assert_func+0x38>)
 800925c:	e7f4      	b.n	8009248 <__assert_func+0x14>
 800925e:	bf00      	nop
 8009260:	2000019c 	.word	0x2000019c
 8009264:	0800b64d 	.word	0x0800b64d
 8009268:	0800b61f 	.word	0x0800b61f
 800926c:	0800b612 	.word	0x0800b612

08009270 <quorem>:
 8009270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	6903      	ldr	r3, [r0, #16]
 8009276:	690c      	ldr	r4, [r1, #16]
 8009278:	4607      	mov	r7, r0
 800927a:	42a3      	cmp	r3, r4
 800927c:	db7e      	blt.n	800937c <quorem+0x10c>
 800927e:	3c01      	subs	r4, #1
 8009280:	00a3      	lsls	r3, r4, #2
 8009282:	f100 0514 	add.w	r5, r0, #20
 8009286:	f101 0814 	add.w	r8, r1, #20
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800929a:	3301      	adds	r3, #1
 800929c:	429a      	cmp	r2, r3
 800929e:	fbb2 f6f3 	udiv	r6, r2, r3
 80092a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092a6:	d32e      	bcc.n	8009306 <quorem+0x96>
 80092a8:	f04f 0a00 	mov.w	sl, #0
 80092ac:	46c4      	mov	ip, r8
 80092ae:	46ae      	mov	lr, r5
 80092b0:	46d3      	mov	fp, sl
 80092b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092b6:	b298      	uxth	r0, r3
 80092b8:	fb06 a000 	mla	r0, r6, r0, sl
 80092bc:	0c1b      	lsrs	r3, r3, #16
 80092be:	0c02      	lsrs	r2, r0, #16
 80092c0:	fb06 2303 	mla	r3, r6, r3, r2
 80092c4:	f8de 2000 	ldr.w	r2, [lr]
 80092c8:	b280      	uxth	r0, r0
 80092ca:	b292      	uxth	r2, r2
 80092cc:	1a12      	subs	r2, r2, r0
 80092ce:	445a      	add	r2, fp
 80092d0:	f8de 0000 	ldr.w	r0, [lr]
 80092d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092d8:	b29b      	uxth	r3, r3
 80092da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092e2:	b292      	uxth	r2, r2
 80092e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092e8:	45e1      	cmp	r9, ip
 80092ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092ee:	f84e 2b04 	str.w	r2, [lr], #4
 80092f2:	d2de      	bcs.n	80092b2 <quorem+0x42>
 80092f4:	9b00      	ldr	r3, [sp, #0]
 80092f6:	58eb      	ldr	r3, [r5, r3]
 80092f8:	b92b      	cbnz	r3, 8009306 <quorem+0x96>
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	3b04      	subs	r3, #4
 80092fe:	429d      	cmp	r5, r3
 8009300:	461a      	mov	r2, r3
 8009302:	d32f      	bcc.n	8009364 <quorem+0xf4>
 8009304:	613c      	str	r4, [r7, #16]
 8009306:	4638      	mov	r0, r7
 8009308:	f001 f8d4 	bl	800a4b4 <__mcmp>
 800930c:	2800      	cmp	r0, #0
 800930e:	db25      	blt.n	800935c <quorem+0xec>
 8009310:	4629      	mov	r1, r5
 8009312:	2000      	movs	r0, #0
 8009314:	f858 2b04 	ldr.w	r2, [r8], #4
 8009318:	f8d1 c000 	ldr.w	ip, [r1]
 800931c:	fa1f fe82 	uxth.w	lr, r2
 8009320:	fa1f f38c 	uxth.w	r3, ip
 8009324:	eba3 030e 	sub.w	r3, r3, lr
 8009328:	4403      	add	r3, r0
 800932a:	0c12      	lsrs	r2, r2, #16
 800932c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009330:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009334:	b29b      	uxth	r3, r3
 8009336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800933a:	45c1      	cmp	r9, r8
 800933c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009340:	f841 3b04 	str.w	r3, [r1], #4
 8009344:	d2e6      	bcs.n	8009314 <quorem+0xa4>
 8009346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800934a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800934e:	b922      	cbnz	r2, 800935a <quorem+0xea>
 8009350:	3b04      	subs	r3, #4
 8009352:	429d      	cmp	r5, r3
 8009354:	461a      	mov	r2, r3
 8009356:	d30b      	bcc.n	8009370 <quorem+0x100>
 8009358:	613c      	str	r4, [r7, #16]
 800935a:	3601      	adds	r6, #1
 800935c:	4630      	mov	r0, r6
 800935e:	b003      	add	sp, #12
 8009360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009364:	6812      	ldr	r2, [r2, #0]
 8009366:	3b04      	subs	r3, #4
 8009368:	2a00      	cmp	r2, #0
 800936a:	d1cb      	bne.n	8009304 <quorem+0x94>
 800936c:	3c01      	subs	r4, #1
 800936e:	e7c6      	b.n	80092fe <quorem+0x8e>
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	3b04      	subs	r3, #4
 8009374:	2a00      	cmp	r2, #0
 8009376:	d1ef      	bne.n	8009358 <quorem+0xe8>
 8009378:	3c01      	subs	r4, #1
 800937a:	e7ea      	b.n	8009352 <quorem+0xe2>
 800937c:	2000      	movs	r0, #0
 800937e:	e7ee      	b.n	800935e <quorem+0xee>

08009380 <_dtoa_r>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	4614      	mov	r4, r2
 8009386:	461d      	mov	r5, r3
 8009388:	69c7      	ldr	r7, [r0, #28]
 800938a:	b097      	sub	sp, #92	@ 0x5c
 800938c:	4683      	mov	fp, r0
 800938e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009392:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009394:	b97f      	cbnz	r7, 80093b6 <_dtoa_r+0x36>
 8009396:	2010      	movs	r0, #16
 8009398:	f7fe ff84 	bl	80082a4 <malloc>
 800939c:	4602      	mov	r2, r0
 800939e:	f8cb 001c 	str.w	r0, [fp, #28]
 80093a2:	b920      	cbnz	r0, 80093ae <_dtoa_r+0x2e>
 80093a4:	21ef      	movs	r1, #239	@ 0xef
 80093a6:	4ba8      	ldr	r3, [pc, #672]	@ (8009648 <_dtoa_r+0x2c8>)
 80093a8:	48a8      	ldr	r0, [pc, #672]	@ (800964c <_dtoa_r+0x2cc>)
 80093aa:	f7ff ff43 	bl	8009234 <__assert_func>
 80093ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80093b2:	6007      	str	r7, [r0, #0]
 80093b4:	60c7      	str	r7, [r0, #12]
 80093b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093ba:	6819      	ldr	r1, [r3, #0]
 80093bc:	b159      	cbz	r1, 80093d6 <_dtoa_r+0x56>
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	2301      	movs	r3, #1
 80093c2:	4093      	lsls	r3, r2
 80093c4:	604a      	str	r2, [r1, #4]
 80093c6:	608b      	str	r3, [r1, #8]
 80093c8:	4658      	mov	r0, fp
 80093ca:	f000 fe3b 	bl	800a044 <_Bfree>
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	1e2b      	subs	r3, r5, #0
 80093d8:	bfaf      	iteee	ge
 80093da:	2300      	movge	r3, #0
 80093dc:	2201      	movlt	r2, #1
 80093de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093e2:	9303      	strlt	r3, [sp, #12]
 80093e4:	bfa8      	it	ge
 80093e6:	6033      	strge	r3, [r6, #0]
 80093e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80093ec:	4b98      	ldr	r3, [pc, #608]	@ (8009650 <_dtoa_r+0x2d0>)
 80093ee:	bfb8      	it	lt
 80093f0:	6032      	strlt	r2, [r6, #0]
 80093f2:	ea33 0308 	bics.w	r3, r3, r8
 80093f6:	d112      	bne.n	800941e <_dtoa_r+0x9e>
 80093f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009404:	4323      	orrs	r3, r4
 8009406:	f000 8550 	beq.w	8009eaa <_dtoa_r+0xb2a>
 800940a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800940c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009654 <_dtoa_r+0x2d4>
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 8552 	beq.w	8009eba <_dtoa_r+0xb3a>
 8009416:	f10a 0303 	add.w	r3, sl, #3
 800941a:	f000 bd4c 	b.w	8009eb6 <_dtoa_r+0xb36>
 800941e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009422:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	f7f7 fabb 	bl	80009a8 <__aeabi_dcmpeq>
 8009432:	4607      	mov	r7, r0
 8009434:	b158      	cbz	r0, 800944e <_dtoa_r+0xce>
 8009436:	2301      	movs	r3, #1
 8009438:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800943e:	b113      	cbz	r3, 8009446 <_dtoa_r+0xc6>
 8009440:	4b85      	ldr	r3, [pc, #532]	@ (8009658 <_dtoa_r+0x2d8>)
 8009442:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800965c <_dtoa_r+0x2dc>
 800944a:	f000 bd36 	b.w	8009eba <_dtoa_r+0xb3a>
 800944e:	ab14      	add	r3, sp, #80	@ 0x50
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	ab15      	add	r3, sp, #84	@ 0x54
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	4658      	mov	r0, fp
 8009458:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800945c:	f001 f8da 	bl	800a614 <__d2b>
 8009460:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009464:	4681      	mov	r9, r0
 8009466:	2e00      	cmp	r6, #0
 8009468:	d077      	beq.n	800955a <_dtoa_r+0x1da>
 800946a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800946e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009470:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009478:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800947c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009480:	9712      	str	r7, [sp, #72]	@ 0x48
 8009482:	4619      	mov	r1, r3
 8009484:	2200      	movs	r2, #0
 8009486:	4b76      	ldr	r3, [pc, #472]	@ (8009660 <_dtoa_r+0x2e0>)
 8009488:	f7f6 fe6e 	bl	8000168 <__aeabi_dsub>
 800948c:	a368      	add	r3, pc, #416	@ (adr r3, 8009630 <_dtoa_r+0x2b0>)
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	f7f7 f821 	bl	80004d8 <__aeabi_dmul>
 8009496:	a368      	add	r3, pc, #416	@ (adr r3, 8009638 <_dtoa_r+0x2b8>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f6 fe66 	bl	800016c <__adddf3>
 80094a0:	4604      	mov	r4, r0
 80094a2:	4630      	mov	r0, r6
 80094a4:	460d      	mov	r5, r1
 80094a6:	f7f6 ffad 	bl	8000404 <__aeabi_i2d>
 80094aa:	a365      	add	r3, pc, #404	@ (adr r3, 8009640 <_dtoa_r+0x2c0>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f7 f812 	bl	80004d8 <__aeabi_dmul>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4620      	mov	r0, r4
 80094ba:	4629      	mov	r1, r5
 80094bc:	f7f6 fe56 	bl	800016c <__adddf3>
 80094c0:	4604      	mov	r4, r0
 80094c2:	460d      	mov	r5, r1
 80094c4:	f7f7 fab8 	bl	8000a38 <__aeabi_d2iz>
 80094c8:	2200      	movs	r2, #0
 80094ca:	4607      	mov	r7, r0
 80094cc:	2300      	movs	r3, #0
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7f7 fa73 	bl	80009bc <__aeabi_dcmplt>
 80094d6:	b140      	cbz	r0, 80094ea <_dtoa_r+0x16a>
 80094d8:	4638      	mov	r0, r7
 80094da:	f7f6 ff93 	bl	8000404 <__aeabi_i2d>
 80094de:	4622      	mov	r2, r4
 80094e0:	462b      	mov	r3, r5
 80094e2:	f7f7 fa61 	bl	80009a8 <__aeabi_dcmpeq>
 80094e6:	b900      	cbnz	r0, 80094ea <_dtoa_r+0x16a>
 80094e8:	3f01      	subs	r7, #1
 80094ea:	2f16      	cmp	r7, #22
 80094ec:	d853      	bhi.n	8009596 <_dtoa_r+0x216>
 80094ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094f2:	4b5c      	ldr	r3, [pc, #368]	@ (8009664 <_dtoa_r+0x2e4>)
 80094f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f7 fa5e 	bl	80009bc <__aeabi_dcmplt>
 8009500:	2800      	cmp	r0, #0
 8009502:	d04a      	beq.n	800959a <_dtoa_r+0x21a>
 8009504:	2300      	movs	r3, #0
 8009506:	3f01      	subs	r7, #1
 8009508:	930f      	str	r3, [sp, #60]	@ 0x3c
 800950a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800950c:	1b9b      	subs	r3, r3, r6
 800950e:	1e5a      	subs	r2, r3, #1
 8009510:	bf46      	itte	mi
 8009512:	f1c3 0801 	rsbmi	r8, r3, #1
 8009516:	2300      	movmi	r3, #0
 8009518:	f04f 0800 	movpl.w	r8, #0
 800951c:	9209      	str	r2, [sp, #36]	@ 0x24
 800951e:	bf48      	it	mi
 8009520:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009522:	2f00      	cmp	r7, #0
 8009524:	db3b      	blt.n	800959e <_dtoa_r+0x21e>
 8009526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009528:	970e      	str	r7, [sp, #56]	@ 0x38
 800952a:	443b      	add	r3, r7
 800952c:	9309      	str	r3, [sp, #36]	@ 0x24
 800952e:	2300      	movs	r3, #0
 8009530:	930a      	str	r3, [sp, #40]	@ 0x28
 8009532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009534:	2b09      	cmp	r3, #9
 8009536:	d866      	bhi.n	8009606 <_dtoa_r+0x286>
 8009538:	2b05      	cmp	r3, #5
 800953a:	bfc4      	itt	gt
 800953c:	3b04      	subgt	r3, #4
 800953e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009540:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009542:	bfc8      	it	gt
 8009544:	2400      	movgt	r4, #0
 8009546:	f1a3 0302 	sub.w	r3, r3, #2
 800954a:	bfd8      	it	le
 800954c:	2401      	movle	r4, #1
 800954e:	2b03      	cmp	r3, #3
 8009550:	d864      	bhi.n	800961c <_dtoa_r+0x29c>
 8009552:	e8df f003 	tbb	[pc, r3]
 8009556:	382b      	.short	0x382b
 8009558:	5636      	.short	0x5636
 800955a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800955e:	441e      	add	r6, r3
 8009560:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009564:	2b20      	cmp	r3, #32
 8009566:	bfc1      	itttt	gt
 8009568:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800956c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009570:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009574:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009578:	bfd6      	itet	le
 800957a:	f1c3 0320 	rsble	r3, r3, #32
 800957e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009582:	fa04 f003 	lslle.w	r0, r4, r3
 8009586:	f7f6 ff2d 	bl	80003e4 <__aeabi_ui2d>
 800958a:	2201      	movs	r2, #1
 800958c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009590:	3e01      	subs	r6, #1
 8009592:	9212      	str	r2, [sp, #72]	@ 0x48
 8009594:	e775      	b.n	8009482 <_dtoa_r+0x102>
 8009596:	2301      	movs	r3, #1
 8009598:	e7b6      	b.n	8009508 <_dtoa_r+0x188>
 800959a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800959c:	e7b5      	b.n	800950a <_dtoa_r+0x18a>
 800959e:	427b      	negs	r3, r7
 80095a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80095a2:	2300      	movs	r3, #0
 80095a4:	eba8 0807 	sub.w	r8, r8, r7
 80095a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80095aa:	e7c2      	b.n	8009532 <_dtoa_r+0x1b2>
 80095ac:	2300      	movs	r3, #0
 80095ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dc35      	bgt.n	8009622 <_dtoa_r+0x2a2>
 80095b6:	2301      	movs	r3, #1
 80095b8:	461a      	mov	r2, r3
 80095ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80095be:	9221      	str	r2, [sp, #132]	@ 0x84
 80095c0:	e00b      	b.n	80095da <_dtoa_r+0x25a>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e7f3      	b.n	80095ae <_dtoa_r+0x22e>
 80095c6:	2300      	movs	r3, #0
 80095c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095cc:	18fb      	adds	r3, r7, r3
 80095ce:	9308      	str	r3, [sp, #32]
 80095d0:	3301      	adds	r3, #1
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	9307      	str	r3, [sp, #28]
 80095d6:	bfb8      	it	lt
 80095d8:	2301      	movlt	r3, #1
 80095da:	2100      	movs	r1, #0
 80095dc:	2204      	movs	r2, #4
 80095de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80095e2:	f102 0514 	add.w	r5, r2, #20
 80095e6:	429d      	cmp	r5, r3
 80095e8:	d91f      	bls.n	800962a <_dtoa_r+0x2aa>
 80095ea:	6041      	str	r1, [r0, #4]
 80095ec:	4658      	mov	r0, fp
 80095ee:	f000 fce9 	bl	8009fc4 <_Balloc>
 80095f2:	4682      	mov	sl, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d139      	bne.n	800966c <_dtoa_r+0x2ec>
 80095f8:	4602      	mov	r2, r0
 80095fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80095fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009668 <_dtoa_r+0x2e8>)
 8009600:	e6d2      	b.n	80093a8 <_dtoa_r+0x28>
 8009602:	2301      	movs	r3, #1
 8009604:	e7e0      	b.n	80095c8 <_dtoa_r+0x248>
 8009606:	2401      	movs	r4, #1
 8009608:	2300      	movs	r3, #0
 800960a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800960c:	9320      	str	r3, [sp, #128]	@ 0x80
 800960e:	f04f 33ff 	mov.w	r3, #4294967295
 8009612:	2200      	movs	r2, #0
 8009614:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009618:	2312      	movs	r3, #18
 800961a:	e7d0      	b.n	80095be <_dtoa_r+0x23e>
 800961c:	2301      	movs	r3, #1
 800961e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009620:	e7f5      	b.n	800960e <_dtoa_r+0x28e>
 8009622:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009624:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009628:	e7d7      	b.n	80095da <_dtoa_r+0x25a>
 800962a:	3101      	adds	r1, #1
 800962c:	0052      	lsls	r2, r2, #1
 800962e:	e7d8      	b.n	80095e2 <_dtoa_r+0x262>
 8009630:	636f4361 	.word	0x636f4361
 8009634:	3fd287a7 	.word	0x3fd287a7
 8009638:	8b60c8b3 	.word	0x8b60c8b3
 800963c:	3fc68a28 	.word	0x3fc68a28
 8009640:	509f79fb 	.word	0x509f79fb
 8009644:	3fd34413 	.word	0x3fd34413
 8009648:	0800b65b 	.word	0x0800b65b
 800964c:	0800b672 	.word	0x0800b672
 8009650:	7ff00000 	.word	0x7ff00000
 8009654:	0800b657 	.word	0x0800b657
 8009658:	0800b5e5 	.word	0x0800b5e5
 800965c:	0800b5e4 	.word	0x0800b5e4
 8009660:	3ff80000 	.word	0x3ff80000
 8009664:	0800b768 	.word	0x0800b768
 8009668:	0800b6ca 	.word	0x0800b6ca
 800966c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009670:	6018      	str	r0, [r3, #0]
 8009672:	9b07      	ldr	r3, [sp, #28]
 8009674:	2b0e      	cmp	r3, #14
 8009676:	f200 80a4 	bhi.w	80097c2 <_dtoa_r+0x442>
 800967a:	2c00      	cmp	r4, #0
 800967c:	f000 80a1 	beq.w	80097c2 <_dtoa_r+0x442>
 8009680:	2f00      	cmp	r7, #0
 8009682:	dd33      	ble.n	80096ec <_dtoa_r+0x36c>
 8009684:	4b86      	ldr	r3, [pc, #536]	@ (80098a0 <_dtoa_r+0x520>)
 8009686:	f007 020f 	and.w	r2, r7, #15
 800968a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800968e:	05f8      	lsls	r0, r7, #23
 8009690:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009694:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009698:	ea4f 1427 	mov.w	r4, r7, asr #4
 800969c:	d516      	bpl.n	80096cc <_dtoa_r+0x34c>
 800969e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096a2:	4b80      	ldr	r3, [pc, #512]	@ (80098a4 <_dtoa_r+0x524>)
 80096a4:	2603      	movs	r6, #3
 80096a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096aa:	f7f7 f83f 	bl	800072c <__aeabi_ddiv>
 80096ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096b2:	f004 040f 	and.w	r4, r4, #15
 80096b6:	4d7b      	ldr	r5, [pc, #492]	@ (80098a4 <_dtoa_r+0x524>)
 80096b8:	b954      	cbnz	r4, 80096d0 <_dtoa_r+0x350>
 80096ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c2:	f7f7 f833 	bl	800072c <__aeabi_ddiv>
 80096c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ca:	e028      	b.n	800971e <_dtoa_r+0x39e>
 80096cc:	2602      	movs	r6, #2
 80096ce:	e7f2      	b.n	80096b6 <_dtoa_r+0x336>
 80096d0:	07e1      	lsls	r1, r4, #31
 80096d2:	d508      	bpl.n	80096e6 <_dtoa_r+0x366>
 80096d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096dc:	f7f6 fefc 	bl	80004d8 <__aeabi_dmul>
 80096e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096e4:	3601      	adds	r6, #1
 80096e6:	1064      	asrs	r4, r4, #1
 80096e8:	3508      	adds	r5, #8
 80096ea:	e7e5      	b.n	80096b8 <_dtoa_r+0x338>
 80096ec:	f000 80d2 	beq.w	8009894 <_dtoa_r+0x514>
 80096f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096f4:	427c      	negs	r4, r7
 80096f6:	4b6a      	ldr	r3, [pc, #424]	@ (80098a0 <_dtoa_r+0x520>)
 80096f8:	f004 020f 	and.w	r2, r4, #15
 80096fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 fee8 	bl	80004d8 <__aeabi_dmul>
 8009708:	2602      	movs	r6, #2
 800970a:	2300      	movs	r3, #0
 800970c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009710:	4d64      	ldr	r5, [pc, #400]	@ (80098a4 <_dtoa_r+0x524>)
 8009712:	1124      	asrs	r4, r4, #4
 8009714:	2c00      	cmp	r4, #0
 8009716:	f040 80b2 	bne.w	800987e <_dtoa_r+0x4fe>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1d3      	bne.n	80096c6 <_dtoa_r+0x346>
 800971e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 80b7 	beq.w	8009898 <_dtoa_r+0x518>
 800972a:	2200      	movs	r2, #0
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	4b5d      	ldr	r3, [pc, #372]	@ (80098a8 <_dtoa_r+0x528>)
 8009732:	f7f7 f943 	bl	80009bc <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	f000 80ae 	beq.w	8009898 <_dtoa_r+0x518>
 800973c:	9b07      	ldr	r3, [sp, #28]
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 80aa 	beq.w	8009898 <_dtoa_r+0x518>
 8009744:	9b08      	ldr	r3, [sp, #32]
 8009746:	2b00      	cmp	r3, #0
 8009748:	dd37      	ble.n	80097ba <_dtoa_r+0x43a>
 800974a:	1e7b      	subs	r3, r7, #1
 800974c:	4620      	mov	r0, r4
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	2200      	movs	r2, #0
 8009752:	4629      	mov	r1, r5
 8009754:	4b55      	ldr	r3, [pc, #340]	@ (80098ac <_dtoa_r+0x52c>)
 8009756:	f7f6 febf 	bl	80004d8 <__aeabi_dmul>
 800975a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800975e:	9c08      	ldr	r4, [sp, #32]
 8009760:	3601      	adds	r6, #1
 8009762:	4630      	mov	r0, r6
 8009764:	f7f6 fe4e 	bl	8000404 <__aeabi_i2d>
 8009768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800976c:	f7f6 feb4 	bl	80004d8 <__aeabi_dmul>
 8009770:	2200      	movs	r2, #0
 8009772:	4b4f      	ldr	r3, [pc, #316]	@ (80098b0 <_dtoa_r+0x530>)
 8009774:	f7f6 fcfa 	bl	800016c <__adddf3>
 8009778:	4605      	mov	r5, r0
 800977a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800977e:	2c00      	cmp	r4, #0
 8009780:	f040 809a 	bne.w	80098b8 <_dtoa_r+0x538>
 8009784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009788:	2200      	movs	r2, #0
 800978a:	4b4a      	ldr	r3, [pc, #296]	@ (80098b4 <_dtoa_r+0x534>)
 800978c:	f7f6 fcec 	bl	8000168 <__aeabi_dsub>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009798:	462a      	mov	r2, r5
 800979a:	4633      	mov	r3, r6
 800979c:	f7f7 f92c 	bl	80009f8 <__aeabi_dcmpgt>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	f040 828e 	bne.w	8009cc2 <_dtoa_r+0x942>
 80097a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097aa:	462a      	mov	r2, r5
 80097ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80097b0:	f7f7 f904 	bl	80009bc <__aeabi_dcmplt>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f040 8127 	bne.w	8009a08 <_dtoa_r+0x688>
 80097ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80097be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80097c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f2c0 8163 	blt.w	8009a90 <_dtoa_r+0x710>
 80097ca:	2f0e      	cmp	r7, #14
 80097cc:	f300 8160 	bgt.w	8009a90 <_dtoa_r+0x710>
 80097d0:	4b33      	ldr	r3, [pc, #204]	@ (80098a0 <_dtoa_r+0x520>)
 80097d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	da03      	bge.n	80097ec <_dtoa_r+0x46c>
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f340 8100 	ble.w	80099ec <_dtoa_r+0x66c>
 80097ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097f0:	4656      	mov	r6, sl
 80097f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 ff97 	bl	800072c <__aeabi_ddiv>
 80097fe:	f7f7 f91b 	bl	8000a38 <__aeabi_d2iz>
 8009802:	4680      	mov	r8, r0
 8009804:	f7f6 fdfe 	bl	8000404 <__aeabi_i2d>
 8009808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800980c:	f7f6 fe64 	bl	80004d8 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f6 fca6 	bl	8000168 <__aeabi_dsub>
 800981c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009820:	9d07      	ldr	r5, [sp, #28]
 8009822:	f806 4b01 	strb.w	r4, [r6], #1
 8009826:	eba6 040a 	sub.w	r4, r6, sl
 800982a:	42a5      	cmp	r5, r4
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	f040 8116 	bne.w	8009a60 <_dtoa_r+0x6e0>
 8009834:	f7f6 fc9a 	bl	800016c <__adddf3>
 8009838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800983c:	4604      	mov	r4, r0
 800983e:	460d      	mov	r5, r1
 8009840:	f7f7 f8da 	bl	80009f8 <__aeabi_dcmpgt>
 8009844:	2800      	cmp	r0, #0
 8009846:	f040 80f8 	bne.w	8009a3a <_dtoa_r+0x6ba>
 800984a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800984e:	4620      	mov	r0, r4
 8009850:	4629      	mov	r1, r5
 8009852:	f7f7 f8a9 	bl	80009a8 <__aeabi_dcmpeq>
 8009856:	b118      	cbz	r0, 8009860 <_dtoa_r+0x4e0>
 8009858:	f018 0f01 	tst.w	r8, #1
 800985c:	f040 80ed 	bne.w	8009a3a <_dtoa_r+0x6ba>
 8009860:	4649      	mov	r1, r9
 8009862:	4658      	mov	r0, fp
 8009864:	f000 fbee 	bl	800a044 <_Bfree>
 8009868:	2300      	movs	r3, #0
 800986a:	7033      	strb	r3, [r6, #0]
 800986c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800986e:	3701      	adds	r7, #1
 8009870:	601f      	str	r7, [r3, #0]
 8009872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 8320 	beq.w	8009eba <_dtoa_r+0xb3a>
 800987a:	601e      	str	r6, [r3, #0]
 800987c:	e31d      	b.n	8009eba <_dtoa_r+0xb3a>
 800987e:	07e2      	lsls	r2, r4, #31
 8009880:	d505      	bpl.n	800988e <_dtoa_r+0x50e>
 8009882:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009886:	f7f6 fe27 	bl	80004d8 <__aeabi_dmul>
 800988a:	2301      	movs	r3, #1
 800988c:	3601      	adds	r6, #1
 800988e:	1064      	asrs	r4, r4, #1
 8009890:	3508      	adds	r5, #8
 8009892:	e73f      	b.n	8009714 <_dtoa_r+0x394>
 8009894:	2602      	movs	r6, #2
 8009896:	e742      	b.n	800971e <_dtoa_r+0x39e>
 8009898:	9c07      	ldr	r4, [sp, #28]
 800989a:	9704      	str	r7, [sp, #16]
 800989c:	e761      	b.n	8009762 <_dtoa_r+0x3e2>
 800989e:	bf00      	nop
 80098a0:	0800b768 	.word	0x0800b768
 80098a4:	0800b740 	.word	0x0800b740
 80098a8:	3ff00000 	.word	0x3ff00000
 80098ac:	40240000 	.word	0x40240000
 80098b0:	401c0000 	.word	0x401c0000
 80098b4:	40140000 	.word	0x40140000
 80098b8:	4b70      	ldr	r3, [pc, #448]	@ (8009a7c <_dtoa_r+0x6fc>)
 80098ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098c4:	4454      	add	r4, sl
 80098c6:	2900      	cmp	r1, #0
 80098c8:	d045      	beq.n	8009956 <_dtoa_r+0x5d6>
 80098ca:	2000      	movs	r0, #0
 80098cc:	496c      	ldr	r1, [pc, #432]	@ (8009a80 <_dtoa_r+0x700>)
 80098ce:	f7f6 ff2d 	bl	800072c <__aeabi_ddiv>
 80098d2:	4633      	mov	r3, r6
 80098d4:	462a      	mov	r2, r5
 80098d6:	f7f6 fc47 	bl	8000168 <__aeabi_dsub>
 80098da:	4656      	mov	r6, sl
 80098dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098e4:	f7f7 f8a8 	bl	8000a38 <__aeabi_d2iz>
 80098e8:	4605      	mov	r5, r0
 80098ea:	f7f6 fd8b 	bl	8000404 <__aeabi_i2d>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098f6:	f7f6 fc37 	bl	8000168 <__aeabi_dsub>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	3530      	adds	r5, #48	@ 0x30
 8009900:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009904:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009908:	f806 5b01 	strb.w	r5, [r6], #1
 800990c:	f7f7 f856 	bl	80009bc <__aeabi_dcmplt>
 8009910:	2800      	cmp	r0, #0
 8009912:	d163      	bne.n	80099dc <_dtoa_r+0x65c>
 8009914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009918:	2000      	movs	r0, #0
 800991a:	495a      	ldr	r1, [pc, #360]	@ (8009a84 <_dtoa_r+0x704>)
 800991c:	f7f6 fc24 	bl	8000168 <__aeabi_dsub>
 8009920:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009924:	f7f7 f84a 	bl	80009bc <__aeabi_dcmplt>
 8009928:	2800      	cmp	r0, #0
 800992a:	f040 8087 	bne.w	8009a3c <_dtoa_r+0x6bc>
 800992e:	42a6      	cmp	r6, r4
 8009930:	f43f af43 	beq.w	80097ba <_dtoa_r+0x43a>
 8009934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009938:	2200      	movs	r2, #0
 800993a:	4b53      	ldr	r3, [pc, #332]	@ (8009a88 <_dtoa_r+0x708>)
 800993c:	f7f6 fdcc 	bl	80004d8 <__aeabi_dmul>
 8009940:	2200      	movs	r2, #0
 8009942:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800994a:	4b4f      	ldr	r3, [pc, #316]	@ (8009a88 <_dtoa_r+0x708>)
 800994c:	f7f6 fdc4 	bl	80004d8 <__aeabi_dmul>
 8009950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009954:	e7c4      	b.n	80098e0 <_dtoa_r+0x560>
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	f7f6 fdbd 	bl	80004d8 <__aeabi_dmul>
 800995e:	4656      	mov	r6, sl
 8009960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009964:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800996a:	f7f7 f865 	bl	8000a38 <__aeabi_d2iz>
 800996e:	4605      	mov	r5, r0
 8009970:	f7f6 fd48 	bl	8000404 <__aeabi_i2d>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800997c:	f7f6 fbf4 	bl	8000168 <__aeabi_dsub>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	3530      	adds	r5, #48	@ 0x30
 8009986:	f806 5b01 	strb.w	r5, [r6], #1
 800998a:	42a6      	cmp	r6, r4
 800998c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	d124      	bne.n	80099e0 <_dtoa_r+0x660>
 8009996:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800999a:	4b39      	ldr	r3, [pc, #228]	@ (8009a80 <_dtoa_r+0x700>)
 800999c:	f7f6 fbe6 	bl	800016c <__adddf3>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a8:	f7f7 f826 	bl	80009f8 <__aeabi_dcmpgt>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d145      	bne.n	8009a3c <_dtoa_r+0x6bc>
 80099b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099b4:	2000      	movs	r0, #0
 80099b6:	4932      	ldr	r1, [pc, #200]	@ (8009a80 <_dtoa_r+0x700>)
 80099b8:	f7f6 fbd6 	bl	8000168 <__aeabi_dsub>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c4:	f7f6 fffa 	bl	80009bc <__aeabi_dcmplt>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f43f aef6 	beq.w	80097ba <_dtoa_r+0x43a>
 80099ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80099d0:	1e73      	subs	r3, r6, #1
 80099d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099d8:	2b30      	cmp	r3, #48	@ 0x30
 80099da:	d0f8      	beq.n	80099ce <_dtoa_r+0x64e>
 80099dc:	9f04      	ldr	r7, [sp, #16]
 80099de:	e73f      	b.n	8009860 <_dtoa_r+0x4e0>
 80099e0:	4b29      	ldr	r3, [pc, #164]	@ (8009a88 <_dtoa_r+0x708>)
 80099e2:	f7f6 fd79 	bl	80004d8 <__aeabi_dmul>
 80099e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ea:	e7bc      	b.n	8009966 <_dtoa_r+0x5e6>
 80099ec:	d10c      	bne.n	8009a08 <_dtoa_r+0x688>
 80099ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099f2:	2200      	movs	r2, #0
 80099f4:	4b25      	ldr	r3, [pc, #148]	@ (8009a8c <_dtoa_r+0x70c>)
 80099f6:	f7f6 fd6f 	bl	80004d8 <__aeabi_dmul>
 80099fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099fe:	f7f6 fff1 	bl	80009e4 <__aeabi_dcmpge>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f000 815b 	beq.w	8009cbe <_dtoa_r+0x93e>
 8009a08:	2400      	movs	r4, #0
 8009a0a:	4625      	mov	r5, r4
 8009a0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a0e:	4656      	mov	r6, sl
 8009a10:	43db      	mvns	r3, r3
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	2700      	movs	r7, #0
 8009a16:	4621      	mov	r1, r4
 8009a18:	4658      	mov	r0, fp
 8009a1a:	f000 fb13 	bl	800a044 <_Bfree>
 8009a1e:	2d00      	cmp	r5, #0
 8009a20:	d0dc      	beq.n	80099dc <_dtoa_r+0x65c>
 8009a22:	b12f      	cbz	r7, 8009a30 <_dtoa_r+0x6b0>
 8009a24:	42af      	cmp	r7, r5
 8009a26:	d003      	beq.n	8009a30 <_dtoa_r+0x6b0>
 8009a28:	4639      	mov	r1, r7
 8009a2a:	4658      	mov	r0, fp
 8009a2c:	f000 fb0a 	bl	800a044 <_Bfree>
 8009a30:	4629      	mov	r1, r5
 8009a32:	4658      	mov	r0, fp
 8009a34:	f000 fb06 	bl	800a044 <_Bfree>
 8009a38:	e7d0      	b.n	80099dc <_dtoa_r+0x65c>
 8009a3a:	9704      	str	r7, [sp, #16]
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	461e      	mov	r6, r3
 8009a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a44:	2a39      	cmp	r2, #57	@ 0x39
 8009a46:	d107      	bne.n	8009a58 <_dtoa_r+0x6d8>
 8009a48:	459a      	cmp	sl, r3
 8009a4a:	d1f8      	bne.n	8009a3e <_dtoa_r+0x6be>
 8009a4c:	9a04      	ldr	r2, [sp, #16]
 8009a4e:	3201      	adds	r2, #1
 8009a50:	9204      	str	r2, [sp, #16]
 8009a52:	2230      	movs	r2, #48	@ 0x30
 8009a54:	f88a 2000 	strb.w	r2, [sl]
 8009a58:	781a      	ldrb	r2, [r3, #0]
 8009a5a:	3201      	adds	r2, #1
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e7bd      	b.n	80099dc <_dtoa_r+0x65c>
 8009a60:	2200      	movs	r2, #0
 8009a62:	4b09      	ldr	r3, [pc, #36]	@ (8009a88 <_dtoa_r+0x708>)
 8009a64:	f7f6 fd38 	bl	80004d8 <__aeabi_dmul>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	460d      	mov	r5, r1
 8009a70:	f7f6 ff9a 	bl	80009a8 <__aeabi_dcmpeq>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f43f aebc 	beq.w	80097f2 <_dtoa_r+0x472>
 8009a7a:	e6f1      	b.n	8009860 <_dtoa_r+0x4e0>
 8009a7c:	0800b768 	.word	0x0800b768
 8009a80:	3fe00000 	.word	0x3fe00000
 8009a84:	3ff00000 	.word	0x3ff00000
 8009a88:	40240000 	.word	0x40240000
 8009a8c:	40140000 	.word	0x40140000
 8009a90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a92:	2a00      	cmp	r2, #0
 8009a94:	f000 80db 	beq.w	8009c4e <_dtoa_r+0x8ce>
 8009a98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009a9a:	2a01      	cmp	r2, #1
 8009a9c:	f300 80bf 	bgt.w	8009c1e <_dtoa_r+0x89e>
 8009aa0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	f000 80b7 	beq.w	8009c16 <_dtoa_r+0x896>
 8009aa8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009aac:	4646      	mov	r6, r8
 8009aae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	441a      	add	r2, r3
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	4498      	add	r8, r3
 8009aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8009abc:	f000 fb76 	bl	800a1ac <__i2b>
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	b15e      	cbz	r6, 8009adc <_dtoa_r+0x75c>
 8009ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	dd08      	ble.n	8009adc <_dtoa_r+0x75c>
 8009aca:	42b3      	cmp	r3, r6
 8009acc:	bfa8      	it	ge
 8009ace:	4633      	movge	r3, r6
 8009ad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ad2:	eba8 0803 	sub.w	r8, r8, r3
 8009ad6:	1af6      	subs	r6, r6, r3
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8009adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ade:	b1f3      	cbz	r3, 8009b1e <_dtoa_r+0x79e>
 8009ae0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 80b7 	beq.w	8009c56 <_dtoa_r+0x8d6>
 8009ae8:	b18c      	cbz	r4, 8009b0e <_dtoa_r+0x78e>
 8009aea:	4629      	mov	r1, r5
 8009aec:	4622      	mov	r2, r4
 8009aee:	4658      	mov	r0, fp
 8009af0:	f000 fc1a 	bl	800a328 <__pow5mult>
 8009af4:	464a      	mov	r2, r9
 8009af6:	4601      	mov	r1, r0
 8009af8:	4605      	mov	r5, r0
 8009afa:	4658      	mov	r0, fp
 8009afc:	f000 fb6c 	bl	800a1d8 <__multiply>
 8009b00:	4649      	mov	r1, r9
 8009b02:	9004      	str	r0, [sp, #16]
 8009b04:	4658      	mov	r0, fp
 8009b06:	f000 fa9d 	bl	800a044 <_Bfree>
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	4699      	mov	r9, r3
 8009b0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b10:	1b1a      	subs	r2, r3, r4
 8009b12:	d004      	beq.n	8009b1e <_dtoa_r+0x79e>
 8009b14:	4649      	mov	r1, r9
 8009b16:	4658      	mov	r0, fp
 8009b18:	f000 fc06 	bl	800a328 <__pow5mult>
 8009b1c:	4681      	mov	r9, r0
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4658      	mov	r0, fp
 8009b22:	f000 fb43 	bl	800a1ac <__i2b>
 8009b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b28:	4604      	mov	r4, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 81c9 	beq.w	8009ec2 <_dtoa_r+0xb42>
 8009b30:	461a      	mov	r2, r3
 8009b32:	4601      	mov	r1, r0
 8009b34:	4658      	mov	r0, fp
 8009b36:	f000 fbf7 	bl	800a328 <__pow5mult>
 8009b3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	f300 808f 	bgt.w	8009c62 <_dtoa_r+0x8e2>
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f040 8087 	bne.w	8009c5a <_dtoa_r+0x8da>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f040 8083 	bne.w	8009c5e <_dtoa_r+0x8de>
 8009b58:	9b03      	ldr	r3, [sp, #12]
 8009b5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b5e:	0d1b      	lsrs	r3, r3, #20
 8009b60:	051b      	lsls	r3, r3, #20
 8009b62:	b12b      	cbz	r3, 8009b70 <_dtoa_r+0x7f0>
 8009b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b66:	f108 0801 	add.w	r8, r8, #1
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b6e:	2301      	movs	r3, #1
 8009b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 81aa 	beq.w	8009ece <_dtoa_r+0xb4e>
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b80:	6918      	ldr	r0, [r3, #16]
 8009b82:	f000 fac7 	bl	800a114 <__hi0bits>
 8009b86:	f1c0 0020 	rsb	r0, r0, #32
 8009b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8c:	4418      	add	r0, r3
 8009b8e:	f010 001f 	ands.w	r0, r0, #31
 8009b92:	d071      	beq.n	8009c78 <_dtoa_r+0x8f8>
 8009b94:	f1c0 0320 	rsb	r3, r0, #32
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	dd65      	ble.n	8009c68 <_dtoa_r+0x8e8>
 8009b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9e:	f1c0 001c 	rsb	r0, r0, #28
 8009ba2:	4403      	add	r3, r0
 8009ba4:	4480      	add	r8, r0
 8009ba6:	4406      	add	r6, r0
 8009ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009baa:	f1b8 0f00 	cmp.w	r8, #0
 8009bae:	dd05      	ble.n	8009bbc <_dtoa_r+0x83c>
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	4658      	mov	r0, fp
 8009bb6:	f000 fc11 	bl	800a3dc <__lshift>
 8009bba:	4681      	mov	r9, r0
 8009bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dd05      	ble.n	8009bce <_dtoa_r+0x84e>
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4658      	mov	r0, fp
 8009bc8:	f000 fc08 	bl	800a3dc <__lshift>
 8009bcc:	4604      	mov	r4, r0
 8009bce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d053      	beq.n	8009c7c <_dtoa_r+0x8fc>
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	f000 fc6c 	bl	800a4b4 <__mcmp>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	da4d      	bge.n	8009c7c <_dtoa_r+0x8fc>
 8009be0:	1e7b      	subs	r3, r7, #1
 8009be2:	4649      	mov	r1, r9
 8009be4:	9304      	str	r3, [sp, #16]
 8009be6:	220a      	movs	r2, #10
 8009be8:	2300      	movs	r3, #0
 8009bea:	4658      	mov	r0, fp
 8009bec:	f000 fa4c 	bl	800a088 <__multadd>
 8009bf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bf2:	4681      	mov	r9, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 816c 	beq.w	8009ed2 <_dtoa_r+0xb52>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	220a      	movs	r2, #10
 8009c00:	4658      	mov	r0, fp
 8009c02:	f000 fa41 	bl	800a088 <__multadd>
 8009c06:	9b08      	ldr	r3, [sp, #32]
 8009c08:	4605      	mov	r5, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	dc61      	bgt.n	8009cd2 <_dtoa_r+0x952>
 8009c0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	dc3b      	bgt.n	8009c8c <_dtoa_r+0x90c>
 8009c14:	e05d      	b.n	8009cd2 <_dtoa_r+0x952>
 8009c16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c18:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c1c:	e746      	b.n	8009aac <_dtoa_r+0x72c>
 8009c1e:	9b07      	ldr	r3, [sp, #28]
 8009c20:	1e5c      	subs	r4, r3, #1
 8009c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	bfbf      	itttt	lt
 8009c28:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009c2a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009c2c:	1ae3      	sublt	r3, r4, r3
 8009c2e:	18d2      	addlt	r2, r2, r3
 8009c30:	bfa8      	it	ge
 8009c32:	1b1c      	subge	r4, r3, r4
 8009c34:	9b07      	ldr	r3, [sp, #28]
 8009c36:	bfbe      	ittt	lt
 8009c38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009c3a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009c3c:	2400      	movlt	r4, #0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfb5      	itete	lt
 8009c42:	eba8 0603 	sublt.w	r6, r8, r3
 8009c46:	4646      	movge	r6, r8
 8009c48:	2300      	movlt	r3, #0
 8009c4a:	9b07      	ldrge	r3, [sp, #28]
 8009c4c:	e730      	b.n	8009ab0 <_dtoa_r+0x730>
 8009c4e:	4646      	mov	r6, r8
 8009c50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009c54:	e735      	b.n	8009ac2 <_dtoa_r+0x742>
 8009c56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c58:	e75c      	b.n	8009b14 <_dtoa_r+0x794>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e788      	b.n	8009b70 <_dtoa_r+0x7f0>
 8009c5e:	9b02      	ldr	r3, [sp, #8]
 8009c60:	e786      	b.n	8009b70 <_dtoa_r+0x7f0>
 8009c62:	2300      	movs	r3, #0
 8009c64:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c66:	e788      	b.n	8009b7a <_dtoa_r+0x7fa>
 8009c68:	d09f      	beq.n	8009baa <_dtoa_r+0x82a>
 8009c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c6c:	331c      	adds	r3, #28
 8009c6e:	441a      	add	r2, r3
 8009c70:	4498      	add	r8, r3
 8009c72:	441e      	add	r6, r3
 8009c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c76:	e798      	b.n	8009baa <_dtoa_r+0x82a>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	e7f6      	b.n	8009c6a <_dtoa_r+0x8ea>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	9704      	str	r7, [sp, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	dc20      	bgt.n	8009cc6 <_dtoa_r+0x946>
 8009c84:	9308      	str	r3, [sp, #32]
 8009c86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	dd1e      	ble.n	8009cca <_dtoa_r+0x94a>
 8009c8c:	9b08      	ldr	r3, [sp, #32]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f47f aebc 	bne.w	8009a0c <_dtoa_r+0x68c>
 8009c94:	4621      	mov	r1, r4
 8009c96:	2205      	movs	r2, #5
 8009c98:	4658      	mov	r0, fp
 8009c9a:	f000 f9f5 	bl	800a088 <__multadd>
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	f000 fc06 	bl	800a4b4 <__mcmp>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f77f aeaf 	ble.w	8009a0c <_dtoa_r+0x68c>
 8009cae:	2331      	movs	r3, #49	@ 0x31
 8009cb0:	4656      	mov	r6, sl
 8009cb2:	f806 3b01 	strb.w	r3, [r6], #1
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	e6aa      	b.n	8009a14 <_dtoa_r+0x694>
 8009cbe:	9c07      	ldr	r4, [sp, #28]
 8009cc0:	9704      	str	r7, [sp, #16]
 8009cc2:	4625      	mov	r5, r4
 8009cc4:	e7f3      	b.n	8009cae <_dtoa_r+0x92e>
 8009cc6:	9b07      	ldr	r3, [sp, #28]
 8009cc8:	9308      	str	r3, [sp, #32]
 8009cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 8104 	beq.w	8009eda <_dtoa_r+0xb5a>
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	dd05      	ble.n	8009ce2 <_dtoa_r+0x962>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4658      	mov	r0, fp
 8009cdc:	f000 fb7e 	bl	800a3dc <__lshift>
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d05a      	beq.n	8009d9e <_dtoa_r+0xa1e>
 8009ce8:	4658      	mov	r0, fp
 8009cea:	6869      	ldr	r1, [r5, #4]
 8009cec:	f000 f96a 	bl	8009fc4 <_Balloc>
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	b928      	cbnz	r0, 8009d00 <_dtoa_r+0x980>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cfa:	4b83      	ldr	r3, [pc, #524]	@ (8009f08 <_dtoa_r+0xb88>)
 8009cfc:	f7ff bb54 	b.w	80093a8 <_dtoa_r+0x28>
 8009d00:	692a      	ldr	r2, [r5, #16]
 8009d02:	f105 010c 	add.w	r1, r5, #12
 8009d06:	3202      	adds	r2, #2
 8009d08:	0092      	lsls	r2, r2, #2
 8009d0a:	300c      	adds	r0, #12
 8009d0c:	f7ff fa83 	bl	8009216 <memcpy>
 8009d10:	2201      	movs	r2, #1
 8009d12:	4631      	mov	r1, r6
 8009d14:	4658      	mov	r0, fp
 8009d16:	f000 fb61 	bl	800a3dc <__lshift>
 8009d1a:	462f      	mov	r7, r5
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	f10a 0301 	add.w	r3, sl, #1
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	9b08      	ldr	r3, [sp, #32]
 8009d26:	4453      	add	r3, sl
 8009d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d2a:	9b02      	ldr	r3, [sp, #8]
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d32:	9b07      	ldr	r3, [sp, #28]
 8009d34:	4621      	mov	r1, r4
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4648      	mov	r0, r9
 8009d3a:	9302      	str	r3, [sp, #8]
 8009d3c:	f7ff fa98 	bl	8009270 <quorem>
 8009d40:	4639      	mov	r1, r7
 8009d42:	9008      	str	r0, [sp, #32]
 8009d44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d48:	4648      	mov	r0, r9
 8009d4a:	f000 fbb3 	bl	800a4b4 <__mcmp>
 8009d4e:	462a      	mov	r2, r5
 8009d50:	9009      	str	r0, [sp, #36]	@ 0x24
 8009d52:	4621      	mov	r1, r4
 8009d54:	4658      	mov	r0, fp
 8009d56:	f000 fbc9 	bl	800a4ec <__mdiff>
 8009d5a:	68c2      	ldr	r2, [r0, #12]
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	bb02      	cbnz	r2, 8009da2 <_dtoa_r+0xa22>
 8009d60:	4601      	mov	r1, r0
 8009d62:	4648      	mov	r0, r9
 8009d64:	f000 fba6 	bl	800a4b4 <__mcmp>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	4658      	mov	r0, fp
 8009d6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d70:	f000 f968 	bl	800a044 <_Bfree>
 8009d74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d78:	9e07      	ldr	r6, [sp, #28]
 8009d7a:	ea43 0102 	orr.w	r1, r3, r2
 8009d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d80:	4319      	orrs	r1, r3
 8009d82:	d110      	bne.n	8009da6 <_dtoa_r+0xa26>
 8009d84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d88:	d029      	beq.n	8009dde <_dtoa_r+0xa5e>
 8009d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dd02      	ble.n	8009d96 <_dtoa_r+0xa16>
 8009d90:	9b08      	ldr	r3, [sp, #32]
 8009d92:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d96:	9b02      	ldr	r3, [sp, #8]
 8009d98:	f883 8000 	strb.w	r8, [r3]
 8009d9c:	e63b      	b.n	8009a16 <_dtoa_r+0x696>
 8009d9e:	4628      	mov	r0, r5
 8009da0:	e7bb      	b.n	8009d1a <_dtoa_r+0x99a>
 8009da2:	2201      	movs	r2, #1
 8009da4:	e7e1      	b.n	8009d6a <_dtoa_r+0x9ea>
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	db04      	blt.n	8009db6 <_dtoa_r+0xa36>
 8009dac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009dae:	430b      	orrs	r3, r1
 8009db0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009db2:	430b      	orrs	r3, r1
 8009db4:	d120      	bne.n	8009df8 <_dtoa_r+0xa78>
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	dded      	ble.n	8009d96 <_dtoa_r+0xa16>
 8009dba:	4649      	mov	r1, r9
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f000 fb0c 	bl	800a3dc <__lshift>
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4681      	mov	r9, r0
 8009dc8:	f000 fb74 	bl	800a4b4 <__mcmp>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	dc03      	bgt.n	8009dd8 <_dtoa_r+0xa58>
 8009dd0:	d1e1      	bne.n	8009d96 <_dtoa_r+0xa16>
 8009dd2:	f018 0f01 	tst.w	r8, #1
 8009dd6:	d0de      	beq.n	8009d96 <_dtoa_r+0xa16>
 8009dd8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ddc:	d1d8      	bne.n	8009d90 <_dtoa_r+0xa10>
 8009dde:	2339      	movs	r3, #57	@ 0x39
 8009de0:	9a02      	ldr	r2, [sp, #8]
 8009de2:	7013      	strb	r3, [r2, #0]
 8009de4:	4633      	mov	r3, r6
 8009de6:	461e      	mov	r6, r3
 8009de8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	2a39      	cmp	r2, #57	@ 0x39
 8009df0:	d052      	beq.n	8009e98 <_dtoa_r+0xb18>
 8009df2:	3201      	adds	r2, #1
 8009df4:	701a      	strb	r2, [r3, #0]
 8009df6:	e60e      	b.n	8009a16 <_dtoa_r+0x696>
 8009df8:	2a00      	cmp	r2, #0
 8009dfa:	dd07      	ble.n	8009e0c <_dtoa_r+0xa8c>
 8009dfc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e00:	d0ed      	beq.n	8009dde <_dtoa_r+0xa5e>
 8009e02:	9a02      	ldr	r2, [sp, #8]
 8009e04:	f108 0301 	add.w	r3, r8, #1
 8009e08:	7013      	strb	r3, [r2, #0]
 8009e0a:	e604      	b.n	8009a16 <_dtoa_r+0x696>
 8009e0c:	9b07      	ldr	r3, [sp, #28]
 8009e0e:	9a07      	ldr	r2, [sp, #28]
 8009e10:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d028      	beq.n	8009e6c <_dtoa_r+0xaec>
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	220a      	movs	r2, #10
 8009e20:	4658      	mov	r0, fp
 8009e22:	f000 f931 	bl	800a088 <__multadd>
 8009e26:	42af      	cmp	r7, r5
 8009e28:	4681      	mov	r9, r0
 8009e2a:	f04f 0300 	mov.w	r3, #0
 8009e2e:	f04f 020a 	mov.w	r2, #10
 8009e32:	4639      	mov	r1, r7
 8009e34:	4658      	mov	r0, fp
 8009e36:	d107      	bne.n	8009e48 <_dtoa_r+0xac8>
 8009e38:	f000 f926 	bl	800a088 <__multadd>
 8009e3c:	4607      	mov	r7, r0
 8009e3e:	4605      	mov	r5, r0
 8009e40:	9b07      	ldr	r3, [sp, #28]
 8009e42:	3301      	adds	r3, #1
 8009e44:	9307      	str	r3, [sp, #28]
 8009e46:	e774      	b.n	8009d32 <_dtoa_r+0x9b2>
 8009e48:	f000 f91e 	bl	800a088 <__multadd>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	4607      	mov	r7, r0
 8009e50:	2300      	movs	r3, #0
 8009e52:	220a      	movs	r2, #10
 8009e54:	4658      	mov	r0, fp
 8009e56:	f000 f917 	bl	800a088 <__multadd>
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	e7f0      	b.n	8009e40 <_dtoa_r+0xac0>
 8009e5e:	9b08      	ldr	r3, [sp, #32]
 8009e60:	2700      	movs	r7, #0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	bfcc      	ite	gt
 8009e66:	461e      	movgt	r6, r3
 8009e68:	2601      	movle	r6, #1
 8009e6a:	4456      	add	r6, sl
 8009e6c:	4649      	mov	r1, r9
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4658      	mov	r0, fp
 8009e72:	f000 fab3 	bl	800a3dc <__lshift>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4681      	mov	r9, r0
 8009e7a:	f000 fb1b 	bl	800a4b4 <__mcmp>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	dcb0      	bgt.n	8009de4 <_dtoa_r+0xa64>
 8009e82:	d102      	bne.n	8009e8a <_dtoa_r+0xb0a>
 8009e84:	f018 0f01 	tst.w	r8, #1
 8009e88:	d1ac      	bne.n	8009de4 <_dtoa_r+0xa64>
 8009e8a:	4633      	mov	r3, r6
 8009e8c:	461e      	mov	r6, r3
 8009e8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e92:	2a30      	cmp	r2, #48	@ 0x30
 8009e94:	d0fa      	beq.n	8009e8c <_dtoa_r+0xb0c>
 8009e96:	e5be      	b.n	8009a16 <_dtoa_r+0x696>
 8009e98:	459a      	cmp	sl, r3
 8009e9a:	d1a4      	bne.n	8009de6 <_dtoa_r+0xa66>
 8009e9c:	9b04      	ldr	r3, [sp, #16]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	2331      	movs	r3, #49	@ 0x31
 8009ea4:	f88a 3000 	strb.w	r3, [sl]
 8009ea8:	e5b5      	b.n	8009a16 <_dtoa_r+0x696>
 8009eaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009eac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f0c <_dtoa_r+0xb8c>
 8009eb0:	b11b      	cbz	r3, 8009eba <_dtoa_r+0xb3a>
 8009eb2:	f10a 0308 	add.w	r3, sl, #8
 8009eb6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	4650      	mov	r0, sl
 8009ebc:	b017      	add	sp, #92	@ 0x5c
 8009ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	f77f ae3d 	ble.w	8009b44 <_dtoa_r+0x7c4>
 8009eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ece:	2001      	movs	r0, #1
 8009ed0:	e65b      	b.n	8009b8a <_dtoa_r+0x80a>
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f77f aed6 	ble.w	8009c86 <_dtoa_r+0x906>
 8009eda:	4656      	mov	r6, sl
 8009edc:	4621      	mov	r1, r4
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f7ff f9c6 	bl	8009270 <quorem>
 8009ee4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ee8:	9b08      	ldr	r3, [sp, #32]
 8009eea:	f806 8b01 	strb.w	r8, [r6], #1
 8009eee:	eba6 020a 	sub.w	r2, r6, sl
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	ddb3      	ble.n	8009e5e <_dtoa_r+0xade>
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	2300      	movs	r3, #0
 8009efa:	220a      	movs	r2, #10
 8009efc:	4658      	mov	r0, fp
 8009efe:	f000 f8c3 	bl	800a088 <__multadd>
 8009f02:	4681      	mov	r9, r0
 8009f04:	e7ea      	b.n	8009edc <_dtoa_r+0xb5c>
 8009f06:	bf00      	nop
 8009f08:	0800b6ca 	.word	0x0800b6ca
 8009f0c:	0800b64e 	.word	0x0800b64e

08009f10 <_free_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4605      	mov	r5, r0
 8009f14:	2900      	cmp	r1, #0
 8009f16:	d040      	beq.n	8009f9a <_free_r+0x8a>
 8009f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f1c:	1f0c      	subs	r4, r1, #4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bfb8      	it	lt
 8009f22:	18e4      	addlt	r4, r4, r3
 8009f24:	f7fe fa68 	bl	80083f8 <__malloc_lock>
 8009f28:	4a1c      	ldr	r2, [pc, #112]	@ (8009f9c <_free_r+0x8c>)
 8009f2a:	6813      	ldr	r3, [r2, #0]
 8009f2c:	b933      	cbnz	r3, 8009f3c <_free_r+0x2c>
 8009f2e:	6063      	str	r3, [r4, #4]
 8009f30:	6014      	str	r4, [r2, #0]
 8009f32:	4628      	mov	r0, r5
 8009f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f38:	f7fe ba64 	b.w	8008404 <__malloc_unlock>
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	d908      	bls.n	8009f52 <_free_r+0x42>
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	1821      	adds	r1, r4, r0
 8009f44:	428b      	cmp	r3, r1
 8009f46:	bf01      	itttt	eq
 8009f48:	6819      	ldreq	r1, [r3, #0]
 8009f4a:	685b      	ldreq	r3, [r3, #4]
 8009f4c:	1809      	addeq	r1, r1, r0
 8009f4e:	6021      	streq	r1, [r4, #0]
 8009f50:	e7ed      	b.n	8009f2e <_free_r+0x1e>
 8009f52:	461a      	mov	r2, r3
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	b10b      	cbz	r3, 8009f5c <_free_r+0x4c>
 8009f58:	42a3      	cmp	r3, r4
 8009f5a:	d9fa      	bls.n	8009f52 <_free_r+0x42>
 8009f5c:	6811      	ldr	r1, [r2, #0]
 8009f5e:	1850      	adds	r0, r2, r1
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d10b      	bne.n	8009f7c <_free_r+0x6c>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	4401      	add	r1, r0
 8009f68:	1850      	adds	r0, r2, r1
 8009f6a:	4283      	cmp	r3, r0
 8009f6c:	6011      	str	r1, [r2, #0]
 8009f6e:	d1e0      	bne.n	8009f32 <_free_r+0x22>
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	4408      	add	r0, r1
 8009f76:	6010      	str	r0, [r2, #0]
 8009f78:	6053      	str	r3, [r2, #4]
 8009f7a:	e7da      	b.n	8009f32 <_free_r+0x22>
 8009f7c:	d902      	bls.n	8009f84 <_free_r+0x74>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	602b      	str	r3, [r5, #0]
 8009f82:	e7d6      	b.n	8009f32 <_free_r+0x22>
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	1821      	adds	r1, r4, r0
 8009f88:	428b      	cmp	r3, r1
 8009f8a:	bf01      	itttt	eq
 8009f8c:	6819      	ldreq	r1, [r3, #0]
 8009f8e:	685b      	ldreq	r3, [r3, #4]
 8009f90:	1809      	addeq	r1, r1, r0
 8009f92:	6021      	streq	r1, [r4, #0]
 8009f94:	6063      	str	r3, [r4, #4]
 8009f96:	6054      	str	r4, [r2, #4]
 8009f98:	e7cb      	b.n	8009f32 <_free_r+0x22>
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	200005f0 	.word	0x200005f0

08009fa0 <__ascii_mbtowc>:
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	b901      	cbnz	r1, 8009fa6 <__ascii_mbtowc+0x6>
 8009fa4:	a901      	add	r1, sp, #4
 8009fa6:	b142      	cbz	r2, 8009fba <__ascii_mbtowc+0x1a>
 8009fa8:	b14b      	cbz	r3, 8009fbe <__ascii_mbtowc+0x1e>
 8009faa:	7813      	ldrb	r3, [r2, #0]
 8009fac:	600b      	str	r3, [r1, #0]
 8009fae:	7812      	ldrb	r2, [r2, #0]
 8009fb0:	1e10      	subs	r0, r2, #0
 8009fb2:	bf18      	it	ne
 8009fb4:	2001      	movne	r0, #1
 8009fb6:	b002      	add	sp, #8
 8009fb8:	4770      	bx	lr
 8009fba:	4610      	mov	r0, r2
 8009fbc:	e7fb      	b.n	8009fb6 <__ascii_mbtowc+0x16>
 8009fbe:	f06f 0001 	mvn.w	r0, #1
 8009fc2:	e7f8      	b.n	8009fb6 <__ascii_mbtowc+0x16>

08009fc4 <_Balloc>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	69c6      	ldr	r6, [r0, #28]
 8009fc8:	4604      	mov	r4, r0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	b976      	cbnz	r6, 8009fec <_Balloc+0x28>
 8009fce:	2010      	movs	r0, #16
 8009fd0:	f7fe f968 	bl	80082a4 <malloc>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	61e0      	str	r0, [r4, #28]
 8009fd8:	b920      	cbnz	r0, 8009fe4 <_Balloc+0x20>
 8009fda:	216b      	movs	r1, #107	@ 0x6b
 8009fdc:	4b17      	ldr	r3, [pc, #92]	@ (800a03c <_Balloc+0x78>)
 8009fde:	4818      	ldr	r0, [pc, #96]	@ (800a040 <_Balloc+0x7c>)
 8009fe0:	f7ff f928 	bl	8009234 <__assert_func>
 8009fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fe8:	6006      	str	r6, [r0, #0]
 8009fea:	60c6      	str	r6, [r0, #12]
 8009fec:	69e6      	ldr	r6, [r4, #28]
 8009fee:	68f3      	ldr	r3, [r6, #12]
 8009ff0:	b183      	cbz	r3, 800a014 <_Balloc+0x50>
 8009ff2:	69e3      	ldr	r3, [r4, #28]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ffa:	b9b8      	cbnz	r0, 800a02c <_Balloc+0x68>
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	fa01 f605 	lsl.w	r6, r1, r5
 800a002:	1d72      	adds	r2, r6, #5
 800a004:	4620      	mov	r0, r4
 800a006:	0092      	lsls	r2, r2, #2
 800a008:	f000 fded 	bl	800abe6 <_calloc_r>
 800a00c:	b160      	cbz	r0, 800a028 <_Balloc+0x64>
 800a00e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a012:	e00e      	b.n	800a032 <_Balloc+0x6e>
 800a014:	2221      	movs	r2, #33	@ 0x21
 800a016:	2104      	movs	r1, #4
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 fde4 	bl	800abe6 <_calloc_r>
 800a01e:	69e3      	ldr	r3, [r4, #28]
 800a020:	60f0      	str	r0, [r6, #12]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e4      	bne.n	8009ff2 <_Balloc+0x2e>
 800a028:	2000      	movs	r0, #0
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	6802      	ldr	r2, [r0, #0]
 800a02e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a032:	2300      	movs	r3, #0
 800a034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a038:	e7f7      	b.n	800a02a <_Balloc+0x66>
 800a03a:	bf00      	nop
 800a03c:	0800b65b 	.word	0x0800b65b
 800a040:	0800b6db 	.word	0x0800b6db

0800a044 <_Bfree>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	69c6      	ldr	r6, [r0, #28]
 800a048:	4605      	mov	r5, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	b976      	cbnz	r6, 800a06c <_Bfree+0x28>
 800a04e:	2010      	movs	r0, #16
 800a050:	f7fe f928 	bl	80082a4 <malloc>
 800a054:	4602      	mov	r2, r0
 800a056:	61e8      	str	r0, [r5, #28]
 800a058:	b920      	cbnz	r0, 800a064 <_Bfree+0x20>
 800a05a:	218f      	movs	r1, #143	@ 0x8f
 800a05c:	4b08      	ldr	r3, [pc, #32]	@ (800a080 <_Bfree+0x3c>)
 800a05e:	4809      	ldr	r0, [pc, #36]	@ (800a084 <_Bfree+0x40>)
 800a060:	f7ff f8e8 	bl	8009234 <__assert_func>
 800a064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a068:	6006      	str	r6, [r0, #0]
 800a06a:	60c6      	str	r6, [r0, #12]
 800a06c:	b13c      	cbz	r4, 800a07e <_Bfree+0x3a>
 800a06e:	69eb      	ldr	r3, [r5, #28]
 800a070:	6862      	ldr	r2, [r4, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a078:	6021      	str	r1, [r4, #0]
 800a07a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
 800a080:	0800b65b 	.word	0x0800b65b
 800a084:	0800b6db 	.word	0x0800b6db

0800a088 <__multadd>:
 800a088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08c:	4607      	mov	r7, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	461e      	mov	r6, r3
 800a092:	2000      	movs	r0, #0
 800a094:	690d      	ldr	r5, [r1, #16]
 800a096:	f101 0c14 	add.w	ip, r1, #20
 800a09a:	f8dc 3000 	ldr.w	r3, [ip]
 800a09e:	3001      	adds	r0, #1
 800a0a0:	b299      	uxth	r1, r3
 800a0a2:	fb02 6101 	mla	r1, r2, r1, r6
 800a0a6:	0c1e      	lsrs	r6, r3, #16
 800a0a8:	0c0b      	lsrs	r3, r1, #16
 800a0aa:	fb02 3306 	mla	r3, r2, r6, r3
 800a0ae:	b289      	uxth	r1, r1
 800a0b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0b4:	4285      	cmp	r5, r0
 800a0b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a0be:	dcec      	bgt.n	800a09a <__multadd+0x12>
 800a0c0:	b30e      	cbz	r6, 800a106 <__multadd+0x7e>
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	42ab      	cmp	r3, r5
 800a0c6:	dc19      	bgt.n	800a0fc <__multadd+0x74>
 800a0c8:	6861      	ldr	r1, [r4, #4]
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	3101      	adds	r1, #1
 800a0ce:	f7ff ff79 	bl	8009fc4 <_Balloc>
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	b928      	cbnz	r0, 800a0e2 <__multadd+0x5a>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	21ba      	movs	r1, #186	@ 0xba
 800a0da:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <__multadd+0x84>)
 800a0dc:	480c      	ldr	r0, [pc, #48]	@ (800a110 <__multadd+0x88>)
 800a0de:	f7ff f8a9 	bl	8009234 <__assert_func>
 800a0e2:	6922      	ldr	r2, [r4, #16]
 800a0e4:	f104 010c 	add.w	r1, r4, #12
 800a0e8:	3202      	adds	r2, #2
 800a0ea:	0092      	lsls	r2, r2, #2
 800a0ec:	300c      	adds	r0, #12
 800a0ee:	f7ff f892 	bl	8009216 <memcpy>
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f7ff ffa5 	bl	800a044 <_Bfree>
 800a0fa:	4644      	mov	r4, r8
 800a0fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a100:	3501      	adds	r5, #1
 800a102:	615e      	str	r6, [r3, #20]
 800a104:	6125      	str	r5, [r4, #16]
 800a106:	4620      	mov	r0, r4
 800a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a10c:	0800b6ca 	.word	0x0800b6ca
 800a110:	0800b6db 	.word	0x0800b6db

0800a114 <__hi0bits>:
 800a114:	4603      	mov	r3, r0
 800a116:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a11a:	bf3a      	itte	cc
 800a11c:	0403      	lslcc	r3, r0, #16
 800a11e:	2010      	movcc	r0, #16
 800a120:	2000      	movcs	r0, #0
 800a122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a126:	bf3c      	itt	cc
 800a128:	021b      	lslcc	r3, r3, #8
 800a12a:	3008      	addcc	r0, #8
 800a12c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a130:	bf3c      	itt	cc
 800a132:	011b      	lslcc	r3, r3, #4
 800a134:	3004      	addcc	r0, #4
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a13a:	bf3c      	itt	cc
 800a13c:	009b      	lslcc	r3, r3, #2
 800a13e:	3002      	addcc	r0, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	db05      	blt.n	800a150 <__hi0bits+0x3c>
 800a144:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a148:	f100 0001 	add.w	r0, r0, #1
 800a14c:	bf08      	it	eq
 800a14e:	2020      	moveq	r0, #32
 800a150:	4770      	bx	lr

0800a152 <__lo0bits>:
 800a152:	6803      	ldr	r3, [r0, #0]
 800a154:	4602      	mov	r2, r0
 800a156:	f013 0007 	ands.w	r0, r3, #7
 800a15a:	d00b      	beq.n	800a174 <__lo0bits+0x22>
 800a15c:	07d9      	lsls	r1, r3, #31
 800a15e:	d421      	bmi.n	800a1a4 <__lo0bits+0x52>
 800a160:	0798      	lsls	r0, r3, #30
 800a162:	bf49      	itett	mi
 800a164:	085b      	lsrmi	r3, r3, #1
 800a166:	089b      	lsrpl	r3, r3, #2
 800a168:	2001      	movmi	r0, #1
 800a16a:	6013      	strmi	r3, [r2, #0]
 800a16c:	bf5c      	itt	pl
 800a16e:	2002      	movpl	r0, #2
 800a170:	6013      	strpl	r3, [r2, #0]
 800a172:	4770      	bx	lr
 800a174:	b299      	uxth	r1, r3
 800a176:	b909      	cbnz	r1, 800a17c <__lo0bits+0x2a>
 800a178:	2010      	movs	r0, #16
 800a17a:	0c1b      	lsrs	r3, r3, #16
 800a17c:	b2d9      	uxtb	r1, r3
 800a17e:	b909      	cbnz	r1, 800a184 <__lo0bits+0x32>
 800a180:	3008      	adds	r0, #8
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	0719      	lsls	r1, r3, #28
 800a186:	bf04      	itt	eq
 800a188:	091b      	lsreq	r3, r3, #4
 800a18a:	3004      	addeq	r0, #4
 800a18c:	0799      	lsls	r1, r3, #30
 800a18e:	bf04      	itt	eq
 800a190:	089b      	lsreq	r3, r3, #2
 800a192:	3002      	addeq	r0, #2
 800a194:	07d9      	lsls	r1, r3, #31
 800a196:	d403      	bmi.n	800a1a0 <__lo0bits+0x4e>
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	f100 0001 	add.w	r0, r0, #1
 800a19e:	d003      	beq.n	800a1a8 <__lo0bits+0x56>
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	4770      	bx	lr
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	4770      	bx	lr
 800a1a8:	2020      	movs	r0, #32
 800a1aa:	4770      	bx	lr

0800a1ac <__i2b>:
 800a1ac:	b510      	push	{r4, lr}
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	f7ff ff07 	bl	8009fc4 <_Balloc>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	b928      	cbnz	r0, 800a1c6 <__i2b+0x1a>
 800a1ba:	f240 1145 	movw	r1, #325	@ 0x145
 800a1be:	4b04      	ldr	r3, [pc, #16]	@ (800a1d0 <__i2b+0x24>)
 800a1c0:	4804      	ldr	r0, [pc, #16]	@ (800a1d4 <__i2b+0x28>)
 800a1c2:	f7ff f837 	bl	8009234 <__assert_func>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	6144      	str	r4, [r0, #20]
 800a1ca:	6103      	str	r3, [r0, #16]
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	bf00      	nop
 800a1d0:	0800b6ca 	.word	0x0800b6ca
 800a1d4:	0800b6db 	.word	0x0800b6db

0800a1d8 <__multiply>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	4614      	mov	r4, r2
 800a1de:	690a      	ldr	r2, [r1, #16]
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	bfa2      	ittt	ge
 800a1e8:	4623      	movge	r3, r4
 800a1ea:	460c      	movge	r4, r1
 800a1ec:	461f      	movge	r7, r3
 800a1ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a1f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a1f6:	68a3      	ldr	r3, [r4, #8]
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	eb0a 0609 	add.w	r6, sl, r9
 800a1fe:	42b3      	cmp	r3, r6
 800a200:	b085      	sub	sp, #20
 800a202:	bfb8      	it	lt
 800a204:	3101      	addlt	r1, #1
 800a206:	f7ff fedd 	bl	8009fc4 <_Balloc>
 800a20a:	b930      	cbnz	r0, 800a21a <__multiply+0x42>
 800a20c:	4602      	mov	r2, r0
 800a20e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a212:	4b43      	ldr	r3, [pc, #268]	@ (800a320 <__multiply+0x148>)
 800a214:	4843      	ldr	r0, [pc, #268]	@ (800a324 <__multiply+0x14c>)
 800a216:	f7ff f80d 	bl	8009234 <__assert_func>
 800a21a:	f100 0514 	add.w	r5, r0, #20
 800a21e:	462b      	mov	r3, r5
 800a220:	2200      	movs	r2, #0
 800a222:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a226:	4543      	cmp	r3, r8
 800a228:	d321      	bcc.n	800a26e <__multiply+0x96>
 800a22a:	f107 0114 	add.w	r1, r7, #20
 800a22e:	f104 0214 	add.w	r2, r4, #20
 800a232:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a236:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a23a:	9302      	str	r3, [sp, #8]
 800a23c:	1b13      	subs	r3, r2, r4
 800a23e:	3b15      	subs	r3, #21
 800a240:	f023 0303 	bic.w	r3, r3, #3
 800a244:	3304      	adds	r3, #4
 800a246:	f104 0715 	add.w	r7, r4, #21
 800a24a:	42ba      	cmp	r2, r7
 800a24c:	bf38      	it	cc
 800a24e:	2304      	movcc	r3, #4
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	9b02      	ldr	r3, [sp, #8]
 800a254:	9103      	str	r1, [sp, #12]
 800a256:	428b      	cmp	r3, r1
 800a258:	d80c      	bhi.n	800a274 <__multiply+0x9c>
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	dd03      	ble.n	800a266 <__multiply+0x8e>
 800a25e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a262:	2b00      	cmp	r3, #0
 800a264:	d05a      	beq.n	800a31c <__multiply+0x144>
 800a266:	6106      	str	r6, [r0, #16]
 800a268:	b005      	add	sp, #20
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	f843 2b04 	str.w	r2, [r3], #4
 800a272:	e7d8      	b.n	800a226 <__multiply+0x4e>
 800a274:	f8b1 a000 	ldrh.w	sl, [r1]
 800a278:	f1ba 0f00 	cmp.w	sl, #0
 800a27c:	d023      	beq.n	800a2c6 <__multiply+0xee>
 800a27e:	46a9      	mov	r9, r5
 800a280:	f04f 0c00 	mov.w	ip, #0
 800a284:	f104 0e14 	add.w	lr, r4, #20
 800a288:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a28c:	f8d9 3000 	ldr.w	r3, [r9]
 800a290:	fa1f fb87 	uxth.w	fp, r7
 800a294:	b29b      	uxth	r3, r3
 800a296:	fb0a 330b 	mla	r3, sl, fp, r3
 800a29a:	4463      	add	r3, ip
 800a29c:	f8d9 c000 	ldr.w	ip, [r9]
 800a2a0:	0c3f      	lsrs	r7, r7, #16
 800a2a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a2a6:	fb0a c707 	mla	r7, sl, r7, ip
 800a2aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2b4:	4572      	cmp	r2, lr
 800a2b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a2ba:	f849 3b04 	str.w	r3, [r9], #4
 800a2be:	d8e3      	bhi.n	800a288 <__multiply+0xb0>
 800a2c0:	9b01      	ldr	r3, [sp, #4]
 800a2c2:	f845 c003 	str.w	ip, [r5, r3]
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	3104      	adds	r1, #4
 800a2ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2ce:	f1b9 0f00 	cmp.w	r9, #0
 800a2d2:	d021      	beq.n	800a318 <__multiply+0x140>
 800a2d4:	46ae      	mov	lr, r5
 800a2d6:	f04f 0a00 	mov.w	sl, #0
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	f104 0c14 	add.w	ip, r4, #20
 800a2e0:	f8bc b000 	ldrh.w	fp, [ip]
 800a2e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	fb09 770b 	mla	r7, r9, fp, r7
 800a2ee:	4457      	add	r7, sl
 800a2f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2f4:	f84e 3b04 	str.w	r3, [lr], #4
 800a2f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a300:	f8be 3000 	ldrh.w	r3, [lr]
 800a304:	4562      	cmp	r2, ip
 800a306:	fb09 330a 	mla	r3, r9, sl, r3
 800a30a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a30e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a312:	d8e5      	bhi.n	800a2e0 <__multiply+0x108>
 800a314:	9f01      	ldr	r7, [sp, #4]
 800a316:	51eb      	str	r3, [r5, r7]
 800a318:	3504      	adds	r5, #4
 800a31a:	e79a      	b.n	800a252 <__multiply+0x7a>
 800a31c:	3e01      	subs	r6, #1
 800a31e:	e79c      	b.n	800a25a <__multiply+0x82>
 800a320:	0800b6ca 	.word	0x0800b6ca
 800a324:	0800b6db 	.word	0x0800b6db

0800a328 <__pow5mult>:
 800a328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4615      	mov	r5, r2
 800a32e:	f012 0203 	ands.w	r2, r2, #3
 800a332:	4607      	mov	r7, r0
 800a334:	460e      	mov	r6, r1
 800a336:	d007      	beq.n	800a348 <__pow5mult+0x20>
 800a338:	4c25      	ldr	r4, [pc, #148]	@ (800a3d0 <__pow5mult+0xa8>)
 800a33a:	3a01      	subs	r2, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a342:	f7ff fea1 	bl	800a088 <__multadd>
 800a346:	4606      	mov	r6, r0
 800a348:	10ad      	asrs	r5, r5, #2
 800a34a:	d03d      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a34c:	69fc      	ldr	r4, [r7, #28]
 800a34e:	b97c      	cbnz	r4, 800a370 <__pow5mult+0x48>
 800a350:	2010      	movs	r0, #16
 800a352:	f7fd ffa7 	bl	80082a4 <malloc>
 800a356:	4602      	mov	r2, r0
 800a358:	61f8      	str	r0, [r7, #28]
 800a35a:	b928      	cbnz	r0, 800a368 <__pow5mult+0x40>
 800a35c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a360:	4b1c      	ldr	r3, [pc, #112]	@ (800a3d4 <__pow5mult+0xac>)
 800a362:	481d      	ldr	r0, [pc, #116]	@ (800a3d8 <__pow5mult+0xb0>)
 800a364:	f7fe ff66 	bl	8009234 <__assert_func>
 800a368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a36c:	6004      	str	r4, [r0, #0]
 800a36e:	60c4      	str	r4, [r0, #12]
 800a370:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a378:	b94c      	cbnz	r4, 800a38e <__pow5mult+0x66>
 800a37a:	f240 2171 	movw	r1, #625	@ 0x271
 800a37e:	4638      	mov	r0, r7
 800a380:	f7ff ff14 	bl	800a1ac <__i2b>
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	f8c8 0008 	str.w	r0, [r8, #8]
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	07eb      	lsls	r3, r5, #31
 800a394:	d50a      	bpl.n	800a3ac <__pow5mult+0x84>
 800a396:	4631      	mov	r1, r6
 800a398:	4622      	mov	r2, r4
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7ff ff1c 	bl	800a1d8 <__multiply>
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	f7ff fe4d 	bl	800a044 <_Bfree>
 800a3aa:	4646      	mov	r6, r8
 800a3ac:	106d      	asrs	r5, r5, #1
 800a3ae:	d00b      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	b938      	cbnz	r0, 800a3c4 <__pow5mult+0x9c>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ff0d 	bl	800a1d8 <__multiply>
 800a3be:	6020      	str	r0, [r4, #0]
 800a3c0:	f8c0 9000 	str.w	r9, [r0]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	e7e4      	b.n	800a392 <__pow5mult+0x6a>
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800b734 	.word	0x0800b734
 800a3d4:	0800b65b 	.word	0x0800b65b
 800a3d8:	0800b6db 	.word	0x0800b6db

0800a3dc <__lshift>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	4607      	mov	r7, r0
 800a3e4:	4691      	mov	r9, r2
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	6849      	ldr	r1, [r1, #4]
 800a3ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3f4:	f108 0601 	add.w	r6, r8, #1
 800a3f8:	42b3      	cmp	r3, r6
 800a3fa:	db0b      	blt.n	800a414 <__lshift+0x38>
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff fde1 	bl	8009fc4 <_Balloc>
 800a402:	4605      	mov	r5, r0
 800a404:	b948      	cbnz	r0, 800a41a <__lshift+0x3e>
 800a406:	4602      	mov	r2, r0
 800a408:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a40c:	4b27      	ldr	r3, [pc, #156]	@ (800a4ac <__lshift+0xd0>)
 800a40e:	4828      	ldr	r0, [pc, #160]	@ (800a4b0 <__lshift+0xd4>)
 800a410:	f7fe ff10 	bl	8009234 <__assert_func>
 800a414:	3101      	adds	r1, #1
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	e7ee      	b.n	800a3f8 <__lshift+0x1c>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f100 0114 	add.w	r1, r0, #20
 800a420:	f100 0210 	add.w	r2, r0, #16
 800a424:	4618      	mov	r0, r3
 800a426:	4553      	cmp	r3, sl
 800a428:	db33      	blt.n	800a492 <__lshift+0xb6>
 800a42a:	6920      	ldr	r0, [r4, #16]
 800a42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a430:	f104 0314 	add.w	r3, r4, #20
 800a434:	f019 091f 	ands.w	r9, r9, #31
 800a438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a43c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a440:	d02b      	beq.n	800a49a <__lshift+0xbe>
 800a442:	468a      	mov	sl, r1
 800a444:	2200      	movs	r2, #0
 800a446:	f1c9 0e20 	rsb	lr, r9, #32
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	fa00 f009 	lsl.w	r0, r0, r9
 800a450:	4310      	orrs	r0, r2
 800a452:	f84a 0b04 	str.w	r0, [sl], #4
 800a456:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45a:	459c      	cmp	ip, r3
 800a45c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a460:	d8f3      	bhi.n	800a44a <__lshift+0x6e>
 800a462:	ebac 0304 	sub.w	r3, ip, r4
 800a466:	3b15      	subs	r3, #21
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	3304      	adds	r3, #4
 800a46e:	f104 0015 	add.w	r0, r4, #21
 800a472:	4584      	cmp	ip, r0
 800a474:	bf38      	it	cc
 800a476:	2304      	movcc	r3, #4
 800a478:	50ca      	str	r2, [r1, r3]
 800a47a:	b10a      	cbz	r2, 800a480 <__lshift+0xa4>
 800a47c:	f108 0602 	add.w	r6, r8, #2
 800a480:	3e01      	subs	r6, #1
 800a482:	4638      	mov	r0, r7
 800a484:	4621      	mov	r1, r4
 800a486:	612e      	str	r6, [r5, #16]
 800a488:	f7ff fddc 	bl	800a044 <_Bfree>
 800a48c:	4628      	mov	r0, r5
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	f842 0f04 	str.w	r0, [r2, #4]!
 800a496:	3301      	adds	r3, #1
 800a498:	e7c5      	b.n	800a426 <__lshift+0x4a>
 800a49a:	3904      	subs	r1, #4
 800a49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a0:	459c      	cmp	ip, r3
 800a4a2:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4a6:	d8f9      	bhi.n	800a49c <__lshift+0xc0>
 800a4a8:	e7ea      	b.n	800a480 <__lshift+0xa4>
 800a4aa:	bf00      	nop
 800a4ac:	0800b6ca 	.word	0x0800b6ca
 800a4b0:	0800b6db 	.word	0x0800b6db

0800a4b4 <__mcmp>:
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	690a      	ldr	r2, [r1, #16]
 800a4b8:	6900      	ldr	r0, [r0, #16]
 800a4ba:	b530      	push	{r4, r5, lr}
 800a4bc:	1a80      	subs	r0, r0, r2
 800a4be:	d10e      	bne.n	800a4de <__mcmp+0x2a>
 800a4c0:	3314      	adds	r3, #20
 800a4c2:	3114      	adds	r1, #20
 800a4c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4d4:	4295      	cmp	r5, r2
 800a4d6:	d003      	beq.n	800a4e0 <__mcmp+0x2c>
 800a4d8:	d205      	bcs.n	800a4e6 <__mcmp+0x32>
 800a4da:	f04f 30ff 	mov.w	r0, #4294967295
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	d3f3      	bcc.n	800a4cc <__mcmp+0x18>
 800a4e4:	e7fb      	b.n	800a4de <__mcmp+0x2a>
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	e7f9      	b.n	800a4de <__mcmp+0x2a>
	...

0800a4ec <__mdiff>:
 800a4ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	4689      	mov	r9, r1
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4648      	mov	r0, r9
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	f7ff ffdb 	bl	800a4b4 <__mcmp>
 800a4fe:	1e05      	subs	r5, r0, #0
 800a500:	d112      	bne.n	800a528 <__mdiff+0x3c>
 800a502:	4629      	mov	r1, r5
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff fd5d 	bl	8009fc4 <_Balloc>
 800a50a:	4602      	mov	r2, r0
 800a50c:	b928      	cbnz	r0, 800a51a <__mdiff+0x2e>
 800a50e:	f240 2137 	movw	r1, #567	@ 0x237
 800a512:	4b3e      	ldr	r3, [pc, #248]	@ (800a60c <__mdiff+0x120>)
 800a514:	483e      	ldr	r0, [pc, #248]	@ (800a610 <__mdiff+0x124>)
 800a516:	f7fe fe8d 	bl	8009234 <__assert_func>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a520:	4610      	mov	r0, r2
 800a522:	b003      	add	sp, #12
 800a524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a528:	bfbc      	itt	lt
 800a52a:	464b      	movlt	r3, r9
 800a52c:	46a1      	movlt	r9, r4
 800a52e:	4630      	mov	r0, r6
 800a530:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a534:	bfba      	itte	lt
 800a536:	461c      	movlt	r4, r3
 800a538:	2501      	movlt	r5, #1
 800a53a:	2500      	movge	r5, #0
 800a53c:	f7ff fd42 	bl	8009fc4 <_Balloc>
 800a540:	4602      	mov	r2, r0
 800a542:	b918      	cbnz	r0, 800a54c <__mdiff+0x60>
 800a544:	f240 2145 	movw	r1, #581	@ 0x245
 800a548:	4b30      	ldr	r3, [pc, #192]	@ (800a60c <__mdiff+0x120>)
 800a54a:	e7e3      	b.n	800a514 <__mdiff+0x28>
 800a54c:	f100 0b14 	add.w	fp, r0, #20
 800a550:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a554:	f109 0310 	add.w	r3, r9, #16
 800a558:	60c5      	str	r5, [r0, #12]
 800a55a:	f04f 0c00 	mov.w	ip, #0
 800a55e:	f109 0514 	add.w	r5, r9, #20
 800a562:	46d9      	mov	r9, fp
 800a564:	6926      	ldr	r6, [r4, #16]
 800a566:	f104 0e14 	add.w	lr, r4, #20
 800a56a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a56e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	9b01      	ldr	r3, [sp, #4]
 800a576:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a57a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a57e:	b281      	uxth	r1, r0
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	fa1f f38a 	uxth.w	r3, sl
 800a586:	1a5b      	subs	r3, r3, r1
 800a588:	0c00      	lsrs	r0, r0, #16
 800a58a:	4463      	add	r3, ip
 800a58c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a590:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a594:	b29b      	uxth	r3, r3
 800a596:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a59a:	4576      	cmp	r6, lr
 800a59c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5a0:	f849 3b04 	str.w	r3, [r9], #4
 800a5a4:	d8e6      	bhi.n	800a574 <__mdiff+0x88>
 800a5a6:	1b33      	subs	r3, r6, r4
 800a5a8:	3b15      	subs	r3, #21
 800a5aa:	f023 0303 	bic.w	r3, r3, #3
 800a5ae:	3415      	adds	r4, #21
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	42a6      	cmp	r6, r4
 800a5b4:	bf38      	it	cc
 800a5b6:	2304      	movcc	r3, #4
 800a5b8:	441d      	add	r5, r3
 800a5ba:	445b      	add	r3, fp
 800a5bc:	461e      	mov	r6, r3
 800a5be:	462c      	mov	r4, r5
 800a5c0:	4544      	cmp	r4, r8
 800a5c2:	d30e      	bcc.n	800a5e2 <__mdiff+0xf6>
 800a5c4:	f108 0103 	add.w	r1, r8, #3
 800a5c8:	1b49      	subs	r1, r1, r5
 800a5ca:	f021 0103 	bic.w	r1, r1, #3
 800a5ce:	3d03      	subs	r5, #3
 800a5d0:	45a8      	cmp	r8, r5
 800a5d2:	bf38      	it	cc
 800a5d4:	2100      	movcc	r1, #0
 800a5d6:	440b      	add	r3, r1
 800a5d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5dc:	b199      	cbz	r1, 800a606 <__mdiff+0x11a>
 800a5de:	6117      	str	r7, [r2, #16]
 800a5e0:	e79e      	b.n	800a520 <__mdiff+0x34>
 800a5e2:	46e6      	mov	lr, ip
 800a5e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5e8:	fa1f fc81 	uxth.w	ip, r1
 800a5ec:	44f4      	add	ip, lr
 800a5ee:	0c08      	lsrs	r0, r1, #16
 800a5f0:	4471      	add	r1, lr
 800a5f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5f6:	b289      	uxth	r1, r1
 800a5f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a600:	f846 1b04 	str.w	r1, [r6], #4
 800a604:	e7dc      	b.n	800a5c0 <__mdiff+0xd4>
 800a606:	3f01      	subs	r7, #1
 800a608:	e7e6      	b.n	800a5d8 <__mdiff+0xec>
 800a60a:	bf00      	nop
 800a60c:	0800b6ca 	.word	0x0800b6ca
 800a610:	0800b6db 	.word	0x0800b6db

0800a614 <__d2b>:
 800a614:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a618:	2101      	movs	r1, #1
 800a61a:	4690      	mov	r8, r2
 800a61c:	4699      	mov	r9, r3
 800a61e:	9e08      	ldr	r6, [sp, #32]
 800a620:	f7ff fcd0 	bl	8009fc4 <_Balloc>
 800a624:	4604      	mov	r4, r0
 800a626:	b930      	cbnz	r0, 800a636 <__d2b+0x22>
 800a628:	4602      	mov	r2, r0
 800a62a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a62e:	4b23      	ldr	r3, [pc, #140]	@ (800a6bc <__d2b+0xa8>)
 800a630:	4823      	ldr	r0, [pc, #140]	@ (800a6c0 <__d2b+0xac>)
 800a632:	f7fe fdff 	bl	8009234 <__assert_func>
 800a636:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a63a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a63e:	b10d      	cbz	r5, 800a644 <__d2b+0x30>
 800a640:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	f1b8 0300 	subs.w	r3, r8, #0
 800a64a:	d024      	beq.n	800a696 <__d2b+0x82>
 800a64c:	4668      	mov	r0, sp
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	f7ff fd7f 	bl	800a152 <__lo0bits>
 800a654:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a658:	b1d8      	cbz	r0, 800a692 <__d2b+0x7e>
 800a65a:	f1c0 0320 	rsb	r3, r0, #32
 800a65e:	fa02 f303 	lsl.w	r3, r2, r3
 800a662:	430b      	orrs	r3, r1
 800a664:	40c2      	lsrs	r2, r0
 800a666:	6163      	str	r3, [r4, #20]
 800a668:	9201      	str	r2, [sp, #4]
 800a66a:	9b01      	ldr	r3, [sp, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bf0c      	ite	eq
 800a670:	2201      	moveq	r2, #1
 800a672:	2202      	movne	r2, #2
 800a674:	61a3      	str	r3, [r4, #24]
 800a676:	6122      	str	r2, [r4, #16]
 800a678:	b1ad      	cbz	r5, 800a6a6 <__d2b+0x92>
 800a67a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a67e:	4405      	add	r5, r0
 800a680:	6035      	str	r5, [r6, #0]
 800a682:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a688:	6018      	str	r0, [r3, #0]
 800a68a:	4620      	mov	r0, r4
 800a68c:	b002      	add	sp, #8
 800a68e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a692:	6161      	str	r1, [r4, #20]
 800a694:	e7e9      	b.n	800a66a <__d2b+0x56>
 800a696:	a801      	add	r0, sp, #4
 800a698:	f7ff fd5b 	bl	800a152 <__lo0bits>
 800a69c:	9b01      	ldr	r3, [sp, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	6163      	str	r3, [r4, #20]
 800a6a2:	3020      	adds	r0, #32
 800a6a4:	e7e7      	b.n	800a676 <__d2b+0x62>
 800a6a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a6aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6ae:	6030      	str	r0, [r6, #0]
 800a6b0:	6918      	ldr	r0, [r3, #16]
 800a6b2:	f7ff fd2f 	bl	800a114 <__hi0bits>
 800a6b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6ba:	e7e4      	b.n	800a686 <__d2b+0x72>
 800a6bc:	0800b6ca 	.word	0x0800b6ca
 800a6c0:	0800b6db 	.word	0x0800b6db

0800a6c4 <__ascii_wctomb>:
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	b141      	cbz	r1, 800a6dc <__ascii_wctomb+0x18>
 800a6ca:	2aff      	cmp	r2, #255	@ 0xff
 800a6cc:	d904      	bls.n	800a6d8 <__ascii_wctomb+0x14>
 800a6ce:	228a      	movs	r2, #138	@ 0x8a
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	4770      	bx	lr
 800a6d8:	2001      	movs	r0, #1
 800a6da:	700a      	strb	r2, [r1, #0]
 800a6dc:	4770      	bx	lr

0800a6de <__sfputc_r>:
 800a6de:	6893      	ldr	r3, [r2, #8]
 800a6e0:	b410      	push	{r4}
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	6093      	str	r3, [r2, #8]
 800a6e8:	da07      	bge.n	800a6fa <__sfputc_r+0x1c>
 800a6ea:	6994      	ldr	r4, [r2, #24]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	db01      	blt.n	800a6f4 <__sfputc_r+0x16>
 800a6f0:	290a      	cmp	r1, #10
 800a6f2:	d102      	bne.n	800a6fa <__sfputc_r+0x1c>
 800a6f4:	bc10      	pop	{r4}
 800a6f6:	f7fe bc5c 	b.w	8008fb2 <__swbuf_r>
 800a6fa:	6813      	ldr	r3, [r2, #0]
 800a6fc:	1c58      	adds	r0, r3, #1
 800a6fe:	6010      	str	r0, [r2, #0]
 800a700:	7019      	strb	r1, [r3, #0]
 800a702:	4608      	mov	r0, r1
 800a704:	bc10      	pop	{r4}
 800a706:	4770      	bx	lr

0800a708 <__sfputs_r>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	4614      	mov	r4, r2
 800a710:	18d5      	adds	r5, r2, r3
 800a712:	42ac      	cmp	r4, r5
 800a714:	d101      	bne.n	800a71a <__sfputs_r+0x12>
 800a716:	2000      	movs	r0, #0
 800a718:	e007      	b.n	800a72a <__sfputs_r+0x22>
 800a71a:	463a      	mov	r2, r7
 800a71c:	4630      	mov	r0, r6
 800a71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a722:	f7ff ffdc 	bl	800a6de <__sfputc_r>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d1f3      	bne.n	800a712 <__sfputs_r+0xa>
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a72c <_vfiprintf_r>:
 800a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	460d      	mov	r5, r1
 800a732:	4614      	mov	r4, r2
 800a734:	4698      	mov	r8, r3
 800a736:	4606      	mov	r6, r0
 800a738:	b09d      	sub	sp, #116	@ 0x74
 800a73a:	b118      	cbz	r0, 800a744 <_vfiprintf_r+0x18>
 800a73c:	6a03      	ldr	r3, [r0, #32]
 800a73e:	b90b      	cbnz	r3, 800a744 <_vfiprintf_r+0x18>
 800a740:	f7fe fb4e 	bl	8008de0 <__sinit>
 800a744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a746:	07d9      	lsls	r1, r3, #31
 800a748:	d405      	bmi.n	800a756 <_vfiprintf_r+0x2a>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	059a      	lsls	r2, r3, #22
 800a74e:	d402      	bmi.n	800a756 <_vfiprintf_r+0x2a>
 800a750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a752:	f7fe fd50 	bl	80091f6 <__retarget_lock_acquire_recursive>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	071b      	lsls	r3, r3, #28
 800a75a:	d501      	bpl.n	800a760 <_vfiprintf_r+0x34>
 800a75c:	692b      	ldr	r3, [r5, #16]
 800a75e:	b99b      	cbnz	r3, 800a788 <_vfiprintf_r+0x5c>
 800a760:	4629      	mov	r1, r5
 800a762:	4630      	mov	r0, r6
 800a764:	f7fe fc64 	bl	8009030 <__swsetup_r>
 800a768:	b170      	cbz	r0, 800a788 <_vfiprintf_r+0x5c>
 800a76a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a76c:	07dc      	lsls	r4, r3, #31
 800a76e:	d504      	bpl.n	800a77a <_vfiprintf_r+0x4e>
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	b01d      	add	sp, #116	@ 0x74
 800a776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77a:	89ab      	ldrh	r3, [r5, #12]
 800a77c:	0598      	lsls	r0, r3, #22
 800a77e:	d4f7      	bmi.n	800a770 <_vfiprintf_r+0x44>
 800a780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a782:	f7fe fd39 	bl	80091f8 <__retarget_lock_release_recursive>
 800a786:	e7f3      	b.n	800a770 <_vfiprintf_r+0x44>
 800a788:	2300      	movs	r3, #0
 800a78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a78c:	2320      	movs	r3, #32
 800a78e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a792:	2330      	movs	r3, #48	@ 0x30
 800a794:	f04f 0901 	mov.w	r9, #1
 800a798:	f8cd 800c 	str.w	r8, [sp, #12]
 800a79c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a948 <_vfiprintf_r+0x21c>
 800a7a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7a4:	4623      	mov	r3, r4
 800a7a6:	469a      	mov	sl, r3
 800a7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ac:	b10a      	cbz	r2, 800a7b2 <_vfiprintf_r+0x86>
 800a7ae:	2a25      	cmp	r2, #37	@ 0x25
 800a7b0:	d1f9      	bne.n	800a7a6 <_vfiprintf_r+0x7a>
 800a7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a7b6:	d00b      	beq.n	800a7d0 <_vfiprintf_r+0xa4>
 800a7b8:	465b      	mov	r3, fp
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ffa2 	bl	800a708 <__sfputs_r>
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	f000 80a7 	beq.w	800a918 <_vfiprintf_r+0x1ec>
 800a7ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7cc:	445a      	add	r2, fp
 800a7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 809f 	beq.w	800a918 <_vfiprintf_r+0x1ec>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7e4:	f10a 0a01 	add.w	sl, sl, #1
 800a7e8:	9304      	str	r3, [sp, #16]
 800a7ea:	9307      	str	r3, [sp, #28]
 800a7ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7f2:	4654      	mov	r4, sl
 800a7f4:	2205      	movs	r2, #5
 800a7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fa:	4853      	ldr	r0, [pc, #332]	@ (800a948 <_vfiprintf_r+0x21c>)
 800a7fc:	f7fe fcfd 	bl	80091fa <memchr>
 800a800:	9a04      	ldr	r2, [sp, #16]
 800a802:	b9d8      	cbnz	r0, 800a83c <_vfiprintf_r+0x110>
 800a804:	06d1      	lsls	r1, r2, #27
 800a806:	bf44      	itt	mi
 800a808:	2320      	movmi	r3, #32
 800a80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a80e:	0713      	lsls	r3, r2, #28
 800a810:	bf44      	itt	mi
 800a812:	232b      	movmi	r3, #43	@ 0x2b
 800a814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a818:	f89a 3000 	ldrb.w	r3, [sl]
 800a81c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a81e:	d015      	beq.n	800a84c <_vfiprintf_r+0x120>
 800a820:	4654      	mov	r4, sl
 800a822:	2000      	movs	r0, #0
 800a824:	f04f 0c0a 	mov.w	ip, #10
 800a828:	9a07      	ldr	r2, [sp, #28]
 800a82a:	4621      	mov	r1, r4
 800a82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a830:	3b30      	subs	r3, #48	@ 0x30
 800a832:	2b09      	cmp	r3, #9
 800a834:	d94b      	bls.n	800a8ce <_vfiprintf_r+0x1a2>
 800a836:	b1b0      	cbz	r0, 800a866 <_vfiprintf_r+0x13a>
 800a838:	9207      	str	r2, [sp, #28]
 800a83a:	e014      	b.n	800a866 <_vfiprintf_r+0x13a>
 800a83c:	eba0 0308 	sub.w	r3, r0, r8
 800a840:	fa09 f303 	lsl.w	r3, r9, r3
 800a844:	4313      	orrs	r3, r2
 800a846:	46a2      	mov	sl, r4
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	e7d2      	b.n	800a7f2 <_vfiprintf_r+0xc6>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	1d19      	adds	r1, r3, #4
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	9103      	str	r1, [sp, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfbb      	ittet	lt
 800a858:	425b      	neglt	r3, r3
 800a85a:	f042 0202 	orrlt.w	r2, r2, #2
 800a85e:	9307      	strge	r3, [sp, #28]
 800a860:	9307      	strlt	r3, [sp, #28]
 800a862:	bfb8      	it	lt
 800a864:	9204      	strlt	r2, [sp, #16]
 800a866:	7823      	ldrb	r3, [r4, #0]
 800a868:	2b2e      	cmp	r3, #46	@ 0x2e
 800a86a:	d10a      	bne.n	800a882 <_vfiprintf_r+0x156>
 800a86c:	7863      	ldrb	r3, [r4, #1]
 800a86e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a870:	d132      	bne.n	800a8d8 <_vfiprintf_r+0x1ac>
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	3402      	adds	r4, #2
 800a876:	1d1a      	adds	r2, r3, #4
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	9203      	str	r2, [sp, #12]
 800a87c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a880:	9305      	str	r3, [sp, #20]
 800a882:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a94c <_vfiprintf_r+0x220>
 800a886:	2203      	movs	r2, #3
 800a888:	4650      	mov	r0, sl
 800a88a:	7821      	ldrb	r1, [r4, #0]
 800a88c:	f7fe fcb5 	bl	80091fa <memchr>
 800a890:	b138      	cbz	r0, 800a8a2 <_vfiprintf_r+0x176>
 800a892:	2240      	movs	r2, #64	@ 0x40
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	eba0 000a 	sub.w	r0, r0, sl
 800a89a:	4082      	lsls	r2, r0
 800a89c:	4313      	orrs	r3, r2
 800a89e:	3401      	adds	r4, #1
 800a8a0:	9304      	str	r3, [sp, #16]
 800a8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a6:	2206      	movs	r2, #6
 800a8a8:	4829      	ldr	r0, [pc, #164]	@ (800a950 <_vfiprintf_r+0x224>)
 800a8aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8ae:	f7fe fca4 	bl	80091fa <memchr>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d03f      	beq.n	800a936 <_vfiprintf_r+0x20a>
 800a8b6:	4b27      	ldr	r3, [pc, #156]	@ (800a954 <_vfiprintf_r+0x228>)
 800a8b8:	bb1b      	cbnz	r3, 800a902 <_vfiprintf_r+0x1d6>
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	3307      	adds	r3, #7
 800a8be:	f023 0307 	bic.w	r3, r3, #7
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	9303      	str	r3, [sp, #12]
 800a8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c8:	443b      	add	r3, r7
 800a8ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8cc:	e76a      	b.n	800a7a4 <_vfiprintf_r+0x78>
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8d6:	e7a8      	b.n	800a82a <_vfiprintf_r+0xfe>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f04f 0c0a 	mov.w	ip, #10
 800a8de:	4619      	mov	r1, r3
 800a8e0:	3401      	adds	r4, #1
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ea:	3a30      	subs	r2, #48	@ 0x30
 800a8ec:	2a09      	cmp	r2, #9
 800a8ee:	d903      	bls.n	800a8f8 <_vfiprintf_r+0x1cc>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0c6      	beq.n	800a882 <_vfiprintf_r+0x156>
 800a8f4:	9105      	str	r1, [sp, #20]
 800a8f6:	e7c4      	b.n	800a882 <_vfiprintf_r+0x156>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a900:	e7f0      	b.n	800a8e4 <_vfiprintf_r+0x1b8>
 800a902:	ab03      	add	r3, sp, #12
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	462a      	mov	r2, r5
 800a908:	4630      	mov	r0, r6
 800a90a:	4b13      	ldr	r3, [pc, #76]	@ (800a958 <_vfiprintf_r+0x22c>)
 800a90c:	a904      	add	r1, sp, #16
 800a90e:	f7fd fe1d 	bl	800854c <_printf_float>
 800a912:	4607      	mov	r7, r0
 800a914:	1c78      	adds	r0, r7, #1
 800a916:	d1d6      	bne.n	800a8c6 <_vfiprintf_r+0x19a>
 800a918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a91a:	07d9      	lsls	r1, r3, #31
 800a91c:	d405      	bmi.n	800a92a <_vfiprintf_r+0x1fe>
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	059a      	lsls	r2, r3, #22
 800a922:	d402      	bmi.n	800a92a <_vfiprintf_r+0x1fe>
 800a924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a926:	f7fe fc67 	bl	80091f8 <__retarget_lock_release_recursive>
 800a92a:	89ab      	ldrh	r3, [r5, #12]
 800a92c:	065b      	lsls	r3, r3, #25
 800a92e:	f53f af1f 	bmi.w	800a770 <_vfiprintf_r+0x44>
 800a932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a934:	e71e      	b.n	800a774 <_vfiprintf_r+0x48>
 800a936:	ab03      	add	r3, sp, #12
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	462a      	mov	r2, r5
 800a93c:	4630      	mov	r0, r6
 800a93e:	4b06      	ldr	r3, [pc, #24]	@ (800a958 <_vfiprintf_r+0x22c>)
 800a940:	a904      	add	r1, sp, #16
 800a942:	f7fe f8a1 	bl	8008a88 <_printf_i>
 800a946:	e7e4      	b.n	800a912 <_vfiprintf_r+0x1e6>
 800a948:	0800b931 	.word	0x0800b931
 800a94c:	0800b937 	.word	0x0800b937
 800a950:	0800b93b 	.word	0x0800b93b
 800a954:	0800854d 	.word	0x0800854d
 800a958:	0800a709 	.word	0x0800a709

0800a95c <__sflush_r>:
 800a95c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	0716      	lsls	r6, r2, #28
 800a964:	4605      	mov	r5, r0
 800a966:	460c      	mov	r4, r1
 800a968:	d454      	bmi.n	800aa14 <__sflush_r+0xb8>
 800a96a:	684b      	ldr	r3, [r1, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dc02      	bgt.n	800a976 <__sflush_r+0x1a>
 800a970:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd48      	ble.n	800aa08 <__sflush_r+0xac>
 800a976:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a978:	2e00      	cmp	r6, #0
 800a97a:	d045      	beq.n	800aa08 <__sflush_r+0xac>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a982:	682f      	ldr	r7, [r5, #0]
 800a984:	6a21      	ldr	r1, [r4, #32]
 800a986:	602b      	str	r3, [r5, #0]
 800a988:	d030      	beq.n	800a9ec <__sflush_r+0x90>
 800a98a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	0759      	lsls	r1, r3, #29
 800a990:	d505      	bpl.n	800a99e <__sflush_r+0x42>
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	1ad2      	subs	r2, r2, r3
 800a996:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a998:	b10b      	cbz	r3, 800a99e <__sflush_r+0x42>
 800a99a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a99c:	1ad2      	subs	r2, r2, r3
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9a4:	6a21      	ldr	r1, [r4, #32]
 800a9a6:	47b0      	blx	r6
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	d106      	bne.n	800a9bc <__sflush_r+0x60>
 800a9ae:	6829      	ldr	r1, [r5, #0]
 800a9b0:	291d      	cmp	r1, #29
 800a9b2:	d82b      	bhi.n	800aa0c <__sflush_r+0xb0>
 800a9b4:	4a28      	ldr	r2, [pc, #160]	@ (800aa58 <__sflush_r+0xfc>)
 800a9b6:	410a      	asrs	r2, r1
 800a9b8:	07d6      	lsls	r6, r2, #31
 800a9ba:	d427      	bmi.n	800aa0c <__sflush_r+0xb0>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	6062      	str	r2, [r4, #4]
 800a9c0:	6922      	ldr	r2, [r4, #16]
 800a9c2:	04d9      	lsls	r1, r3, #19
 800a9c4:	6022      	str	r2, [r4, #0]
 800a9c6:	d504      	bpl.n	800a9d2 <__sflush_r+0x76>
 800a9c8:	1c42      	adds	r2, r0, #1
 800a9ca:	d101      	bne.n	800a9d0 <__sflush_r+0x74>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b903      	cbnz	r3, 800a9d2 <__sflush_r+0x76>
 800a9d0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9d4:	602f      	str	r7, [r5, #0]
 800a9d6:	b1b9      	cbz	r1, 800aa08 <__sflush_r+0xac>
 800a9d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d002      	beq.n	800a9e6 <__sflush_r+0x8a>
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f7ff fa95 	bl	8009f10 <_free_r>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9ea:	e00d      	b.n	800aa08 <__sflush_r+0xac>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	47b0      	blx	r6
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	1c50      	adds	r0, r2, #1
 800a9f6:	d1c9      	bne.n	800a98c <__sflush_r+0x30>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0c6      	beq.n	800a98c <__sflush_r+0x30>
 800a9fe:	2b1d      	cmp	r3, #29
 800aa00:	d001      	beq.n	800aa06 <__sflush_r+0xaa>
 800aa02:	2b16      	cmp	r3, #22
 800aa04:	d11d      	bne.n	800aa42 <__sflush_r+0xe6>
 800aa06:	602f      	str	r7, [r5, #0]
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e021      	b.n	800aa50 <__sflush_r+0xf4>
 800aa0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa10:	b21b      	sxth	r3, r3
 800aa12:	e01a      	b.n	800aa4a <__sflush_r+0xee>
 800aa14:	690f      	ldr	r7, [r1, #16]
 800aa16:	2f00      	cmp	r7, #0
 800aa18:	d0f6      	beq.n	800aa08 <__sflush_r+0xac>
 800aa1a:	0793      	lsls	r3, r2, #30
 800aa1c:	bf18      	it	ne
 800aa1e:	2300      	movne	r3, #0
 800aa20:	680e      	ldr	r6, [r1, #0]
 800aa22:	bf08      	it	eq
 800aa24:	694b      	ldreq	r3, [r1, #20]
 800aa26:	1bf6      	subs	r6, r6, r7
 800aa28:	600f      	str	r7, [r1, #0]
 800aa2a:	608b      	str	r3, [r1, #8]
 800aa2c:	2e00      	cmp	r6, #0
 800aa2e:	ddeb      	ble.n	800aa08 <__sflush_r+0xac>
 800aa30:	4633      	mov	r3, r6
 800aa32:	463a      	mov	r2, r7
 800aa34:	4628      	mov	r0, r5
 800aa36:	6a21      	ldr	r1, [r4, #32]
 800aa38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aa3c:	47e0      	blx	ip
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	dc07      	bgt.n	800aa52 <__sflush_r+0xf6>
 800aa42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa52:	4407      	add	r7, r0
 800aa54:	1a36      	subs	r6, r6, r0
 800aa56:	e7e9      	b.n	800aa2c <__sflush_r+0xd0>
 800aa58:	dfbffffe 	.word	0xdfbffffe

0800aa5c <_fflush_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	690b      	ldr	r3, [r1, #16]
 800aa60:	4605      	mov	r5, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	b913      	cbnz	r3, 800aa6c <_fflush_r+0x10>
 800aa66:	2500      	movs	r5, #0
 800aa68:	4628      	mov	r0, r5
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	b118      	cbz	r0, 800aa76 <_fflush_r+0x1a>
 800aa6e:	6a03      	ldr	r3, [r0, #32]
 800aa70:	b90b      	cbnz	r3, 800aa76 <_fflush_r+0x1a>
 800aa72:	f7fe f9b5 	bl	8008de0 <__sinit>
 800aa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0f3      	beq.n	800aa66 <_fflush_r+0xa>
 800aa7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa80:	07d0      	lsls	r0, r2, #31
 800aa82:	d404      	bmi.n	800aa8e <_fflush_r+0x32>
 800aa84:	0599      	lsls	r1, r3, #22
 800aa86:	d402      	bmi.n	800aa8e <_fflush_r+0x32>
 800aa88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa8a:	f7fe fbb4 	bl	80091f6 <__retarget_lock_acquire_recursive>
 800aa8e:	4628      	mov	r0, r5
 800aa90:	4621      	mov	r1, r4
 800aa92:	f7ff ff63 	bl	800a95c <__sflush_r>
 800aa96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa98:	4605      	mov	r5, r0
 800aa9a:	07da      	lsls	r2, r3, #31
 800aa9c:	d4e4      	bmi.n	800aa68 <_fflush_r+0xc>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	059b      	lsls	r3, r3, #22
 800aaa2:	d4e1      	bmi.n	800aa68 <_fflush_r+0xc>
 800aaa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaa6:	f7fe fba7 	bl	80091f8 <__retarget_lock_release_recursive>
 800aaaa:	e7dd      	b.n	800aa68 <_fflush_r+0xc>

0800aaac <fiprintf>:
 800aaac:	b40e      	push	{r1, r2, r3}
 800aaae:	b503      	push	{r0, r1, lr}
 800aab0:	4601      	mov	r1, r0
 800aab2:	ab03      	add	r3, sp, #12
 800aab4:	4805      	ldr	r0, [pc, #20]	@ (800aacc <fiprintf+0x20>)
 800aab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaba:	6800      	ldr	r0, [r0, #0]
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	f7ff fe35 	bl	800a72c <_vfiprintf_r>
 800aac2:	b002      	add	sp, #8
 800aac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aac8:	b003      	add	sp, #12
 800aaca:	4770      	bx	lr
 800aacc:	2000019c 	.word	0x2000019c

0800aad0 <__swhatbuf_r>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	460c      	mov	r4, r1
 800aad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad8:	4615      	mov	r5, r2
 800aada:	2900      	cmp	r1, #0
 800aadc:	461e      	mov	r6, r3
 800aade:	b096      	sub	sp, #88	@ 0x58
 800aae0:	da0c      	bge.n	800aafc <__swhatbuf_r+0x2c>
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	2100      	movs	r1, #0
 800aae6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aaea:	bf14      	ite	ne
 800aaec:	2340      	movne	r3, #64	@ 0x40
 800aaee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	6031      	str	r1, [r6, #0]
 800aaf6:	602b      	str	r3, [r5, #0]
 800aaf8:	b016      	add	sp, #88	@ 0x58
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	466a      	mov	r2, sp
 800aafe:	f000 f849 	bl	800ab94 <_fstat_r>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	dbed      	blt.n	800aae2 <__swhatbuf_r+0x12>
 800ab06:	9901      	ldr	r1, [sp, #4]
 800ab08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab10:	4259      	negs	r1, r3
 800ab12:	4159      	adcs	r1, r3
 800ab14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab18:	e7eb      	b.n	800aaf2 <__swhatbuf_r+0x22>

0800ab1a <__smakebuf_r>:
 800ab1a:	898b      	ldrh	r3, [r1, #12]
 800ab1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab1e:	079d      	lsls	r5, r3, #30
 800ab20:	4606      	mov	r6, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	d507      	bpl.n	800ab36 <__smakebuf_r+0x1c>
 800ab26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	6123      	str	r3, [r4, #16]
 800ab2e:	2301      	movs	r3, #1
 800ab30:	6163      	str	r3, [r4, #20]
 800ab32:	b003      	add	sp, #12
 800ab34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab36:	466a      	mov	r2, sp
 800ab38:	ab01      	add	r3, sp, #4
 800ab3a:	f7ff ffc9 	bl	800aad0 <__swhatbuf_r>
 800ab3e:	9f00      	ldr	r7, [sp, #0]
 800ab40:	4605      	mov	r5, r0
 800ab42:	4639      	mov	r1, r7
 800ab44:	4630      	mov	r0, r6
 800ab46:	f7fd fbd7 	bl	80082f8 <_malloc_r>
 800ab4a:	b948      	cbnz	r0, 800ab60 <__smakebuf_r+0x46>
 800ab4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab50:	059a      	lsls	r2, r3, #22
 800ab52:	d4ee      	bmi.n	800ab32 <__smakebuf_r+0x18>
 800ab54:	f023 0303 	bic.w	r3, r3, #3
 800ab58:	f043 0302 	orr.w	r3, r3, #2
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	e7e2      	b.n	800ab26 <__smakebuf_r+0xc>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	6020      	str	r0, [r4, #0]
 800ab70:	b15b      	cbz	r3, 800ab8a <__smakebuf_r+0x70>
 800ab72:	4630      	mov	r0, r6
 800ab74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab78:	f000 f81e 	bl	800abb8 <_isatty_r>
 800ab7c:	b128      	cbz	r0, 800ab8a <__smakebuf_r+0x70>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f023 0303 	bic.w	r3, r3, #3
 800ab84:	f043 0301 	orr.w	r3, r3, #1
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	431d      	orrs	r5, r3
 800ab8e:	81a5      	strh	r5, [r4, #12]
 800ab90:	e7cf      	b.n	800ab32 <__smakebuf_r+0x18>
	...

0800ab94 <_fstat_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	2300      	movs	r3, #0
 800ab98:	4d06      	ldr	r5, [pc, #24]	@ (800abb4 <_fstat_r+0x20>)
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	4611      	mov	r1, r2
 800aba0:	602b      	str	r3, [r5, #0]
 800aba2:	f7f6 fc5a 	bl	800145a <_fstat>
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	d102      	bne.n	800abb0 <_fstat_r+0x1c>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	b103      	cbz	r3, 800abb0 <_fstat_r+0x1c>
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	bd38      	pop	{r3, r4, r5, pc}
 800abb2:	bf00      	nop
 800abb4:	20000730 	.word	0x20000730

0800abb8 <_isatty_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	2300      	movs	r3, #0
 800abbc:	4d05      	ldr	r5, [pc, #20]	@ (800abd4 <_isatty_r+0x1c>)
 800abbe:	4604      	mov	r4, r0
 800abc0:	4608      	mov	r0, r1
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	f7f6 fc4e 	bl	8001464 <_isatty>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_isatty_r+0x1a>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_isatty_r+0x1a>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20000730 	.word	0x20000730

0800abd8 <abort>:
 800abd8:	2006      	movs	r0, #6
 800abda:	b508      	push	{r3, lr}
 800abdc:	f000 f840 	bl	800ac60 <raise>
 800abe0:	2001      	movs	r0, #1
 800abe2:	f7f6 fc21 	bl	8001428 <_exit>

0800abe6 <_calloc_r>:
 800abe6:	b570      	push	{r4, r5, r6, lr}
 800abe8:	fba1 5402 	umull	r5, r4, r1, r2
 800abec:	b93c      	cbnz	r4, 800abfe <_calloc_r+0x18>
 800abee:	4629      	mov	r1, r5
 800abf0:	f7fd fb82 	bl	80082f8 <_malloc_r>
 800abf4:	4606      	mov	r6, r0
 800abf6:	b928      	cbnz	r0, 800ac04 <_calloc_r+0x1e>
 800abf8:	2600      	movs	r6, #0
 800abfa:	4630      	mov	r0, r6
 800abfc:	bd70      	pop	{r4, r5, r6, pc}
 800abfe:	220c      	movs	r2, #12
 800ac00:	6002      	str	r2, [r0, #0]
 800ac02:	e7f9      	b.n	800abf8 <_calloc_r+0x12>
 800ac04:	462a      	mov	r2, r5
 800ac06:	4621      	mov	r1, r4
 800ac08:	f7fe fa68 	bl	80090dc <memset>
 800ac0c:	e7f5      	b.n	800abfa <_calloc_r+0x14>

0800ac0e <_raise_r>:
 800ac0e:	291f      	cmp	r1, #31
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4605      	mov	r5, r0
 800ac14:	460c      	mov	r4, r1
 800ac16:	d904      	bls.n	800ac22 <_raise_r+0x14>
 800ac18:	2316      	movs	r3, #22
 800ac1a:	6003      	str	r3, [r0, #0]
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	bd38      	pop	{r3, r4, r5, pc}
 800ac22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac24:	b112      	cbz	r2, 800ac2c <_raise_r+0x1e>
 800ac26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac2a:	b94b      	cbnz	r3, 800ac40 <_raise_r+0x32>
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f000 f831 	bl	800ac94 <_getpid_r>
 800ac32:	4622      	mov	r2, r4
 800ac34:	4601      	mov	r1, r0
 800ac36:	4628      	mov	r0, r5
 800ac38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac3c:	f000 b818 	b.w	800ac70 <_kill_r>
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d00a      	beq.n	800ac5a <_raise_r+0x4c>
 800ac44:	1c59      	adds	r1, r3, #1
 800ac46:	d103      	bne.n	800ac50 <_raise_r+0x42>
 800ac48:	2316      	movs	r3, #22
 800ac4a:	6003      	str	r3, [r0, #0]
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	e7e7      	b.n	800ac20 <_raise_r+0x12>
 800ac50:	2100      	movs	r1, #0
 800ac52:	4620      	mov	r0, r4
 800ac54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac58:	4798      	blx	r3
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	e7e0      	b.n	800ac20 <_raise_r+0x12>
	...

0800ac60 <raise>:
 800ac60:	4b02      	ldr	r3, [pc, #8]	@ (800ac6c <raise+0xc>)
 800ac62:	4601      	mov	r1, r0
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	f7ff bfd2 	b.w	800ac0e <_raise_r>
 800ac6a:	bf00      	nop
 800ac6c:	2000019c 	.word	0x2000019c

0800ac70 <_kill_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	2300      	movs	r3, #0
 800ac74:	4d06      	ldr	r5, [pc, #24]	@ (800ac90 <_kill_r+0x20>)
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	602b      	str	r3, [r5, #0]
 800ac7e:	f7f6 fbcb 	bl	8001418 <_kill>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	d102      	bne.n	800ac8c <_kill_r+0x1c>
 800ac86:	682b      	ldr	r3, [r5, #0]
 800ac88:	b103      	cbz	r3, 800ac8c <_kill_r+0x1c>
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	bd38      	pop	{r3, r4, r5, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000730 	.word	0x20000730

0800ac94 <_getpid_r>:
 800ac94:	f7f6 bbbe 	b.w	8001414 <_getpid>

0800ac98 <_init>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr

0800aca4 <_fini>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	bf00      	nop
 800aca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acaa:	bc08      	pop	{r3}
 800acac:	469e      	mov	lr, r3
 800acae:	4770      	bx	lr
