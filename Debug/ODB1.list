
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009858  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08009968  08009968  0000a968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a40c  0800a40c  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a40c  0800a40c  0000b40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a414  0800a414  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a414  0800a414  0000b414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a418  0800a418  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a41c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001ec  0800a608  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800a608  0000c600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c000  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002538  00000000  00000000  00018215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000011e8  00000000  00000000  0001a74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  0001b935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000573  00000000  00000000  0001c07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c378  00000000  00000000  0001c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001043e  00000000  00000000  00038968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096ce0  00000000  00000000  00048da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dfa86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029d8  00000000  00000000  000dfacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08009950 	.word	0x08009950

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08009950 	.word	0x08009950

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_ldivmod>:
 8001064:	b97b      	cbnz	r3, 8001086 <__aeabi_ldivmod+0x22>
 8001066:	b972      	cbnz	r2, 8001086 <__aeabi_ldivmod+0x22>
 8001068:	2900      	cmp	r1, #0
 800106a:	bfbe      	ittt	lt
 800106c:	2000      	movlt	r0, #0
 800106e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001072:	e006      	blt.n	8001082 <__aeabi_ldivmod+0x1e>
 8001074:	bf08      	it	eq
 8001076:	2800      	cmpeq	r0, #0
 8001078:	bf1c      	itt	ne
 800107a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800107e:	f04f 30ff 	movne.w	r0, #4294967295
 8001082:	f000 b99b 	b.w	80013bc <__aeabi_idiv0>
 8001086:	f1ad 0c08 	sub.w	ip, sp, #8
 800108a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800108e:	2900      	cmp	r1, #0
 8001090:	db09      	blt.n	80010a6 <__aeabi_ldivmod+0x42>
 8001092:	2b00      	cmp	r3, #0
 8001094:	db1a      	blt.n	80010cc <__aeabi_ldivmod+0x68>
 8001096:	f000 f835 	bl	8001104 <__udivmoddi4>
 800109a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010a2:	b004      	add	sp, #16
 80010a4:	4770      	bx	lr
 80010a6:	4240      	negs	r0, r0
 80010a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db1b      	blt.n	80010e8 <__aeabi_ldivmod+0x84>
 80010b0:	f000 f828 	bl	8001104 <__udivmoddi4>
 80010b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010bc:	b004      	add	sp, #16
 80010be:	4240      	negs	r0, r0
 80010c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010c4:	4252      	negs	r2, r2
 80010c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ca:	4770      	bx	lr
 80010cc:	4252      	negs	r2, r2
 80010ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010d2:	f000 f817 	bl	8001104 <__udivmoddi4>
 80010d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010de:	b004      	add	sp, #16
 80010e0:	4240      	negs	r0, r0
 80010e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010e6:	4770      	bx	lr
 80010e8:	4252      	negs	r2, r2
 80010ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ee:	f000 f809 	bl	8001104 <__udivmoddi4>
 80010f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010fa:	b004      	add	sp, #16
 80010fc:	4252      	negs	r2, r2
 80010fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001102:	4770      	bx	lr

08001104 <__udivmoddi4>:
 8001104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001108:	9d08      	ldr	r5, [sp, #32]
 800110a:	460c      	mov	r4, r1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d14e      	bne.n	80011ae <__udivmoddi4+0xaa>
 8001110:	4694      	mov	ip, r2
 8001112:	458c      	cmp	ip, r1
 8001114:	4686      	mov	lr, r0
 8001116:	fab2 f282 	clz	r2, r2
 800111a:	d962      	bls.n	80011e2 <__udivmoddi4+0xde>
 800111c:	b14a      	cbz	r2, 8001132 <__udivmoddi4+0x2e>
 800111e:	f1c2 0320 	rsb	r3, r2, #32
 8001122:	4091      	lsls	r1, r2
 8001124:	fa20 f303 	lsr.w	r3, r0, r3
 8001128:	fa0c fc02 	lsl.w	ip, ip, r2
 800112c:	4319      	orrs	r1, r3
 800112e:	fa00 fe02 	lsl.w	lr, r0, r2
 8001132:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001136:	fbb1 f4f7 	udiv	r4, r1, r7
 800113a:	fb07 1114 	mls	r1, r7, r4, r1
 800113e:	fa1f f68c 	uxth.w	r6, ip
 8001142:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001146:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800114a:	fb04 f106 	mul.w	r1, r4, r6
 800114e:	4299      	cmp	r1, r3
 8001150:	d90a      	bls.n	8001168 <__udivmoddi4+0x64>
 8001152:	eb1c 0303 	adds.w	r3, ip, r3
 8001156:	f104 30ff 	add.w	r0, r4, #4294967295
 800115a:	f080 8110 	bcs.w	800137e <__udivmoddi4+0x27a>
 800115e:	4299      	cmp	r1, r3
 8001160:	f240 810d 	bls.w	800137e <__udivmoddi4+0x27a>
 8001164:	3c02      	subs	r4, #2
 8001166:	4463      	add	r3, ip
 8001168:	1a59      	subs	r1, r3, r1
 800116a:	fbb1 f0f7 	udiv	r0, r1, r7
 800116e:	fb07 1110 	mls	r1, r7, r0, r1
 8001172:	fb00 f606 	mul.w	r6, r0, r6
 8001176:	fa1f f38e 	uxth.w	r3, lr
 800117a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800117e:	429e      	cmp	r6, r3
 8001180:	d90a      	bls.n	8001198 <__udivmoddi4+0x94>
 8001182:	eb1c 0303 	adds.w	r3, ip, r3
 8001186:	f100 31ff 	add.w	r1, r0, #4294967295
 800118a:	f080 80fa 	bcs.w	8001382 <__udivmoddi4+0x27e>
 800118e:	429e      	cmp	r6, r3
 8001190:	f240 80f7 	bls.w	8001382 <__udivmoddi4+0x27e>
 8001194:	4463      	add	r3, ip
 8001196:	3802      	subs	r0, #2
 8001198:	2100      	movs	r1, #0
 800119a:	1b9b      	subs	r3, r3, r6
 800119c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011a0:	b11d      	cbz	r5, 80011aa <__udivmoddi4+0xa6>
 80011a2:	40d3      	lsrs	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	e9c5 3200 	strd	r3, r2, [r5]
 80011aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ae:	428b      	cmp	r3, r1
 80011b0:	d905      	bls.n	80011be <__udivmoddi4+0xba>
 80011b2:	b10d      	cbz	r5, 80011b8 <__udivmoddi4+0xb4>
 80011b4:	e9c5 0100 	strd	r0, r1, [r5]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4608      	mov	r0, r1
 80011bc:	e7f5      	b.n	80011aa <__udivmoddi4+0xa6>
 80011be:	fab3 f183 	clz	r1, r3
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d146      	bne.n	8001254 <__udivmoddi4+0x150>
 80011c6:	42a3      	cmp	r3, r4
 80011c8:	d302      	bcc.n	80011d0 <__udivmoddi4+0xcc>
 80011ca:	4290      	cmp	r0, r2
 80011cc:	f0c0 80ee 	bcc.w	80013ac <__udivmoddi4+0x2a8>
 80011d0:	1a86      	subs	r6, r0, r2
 80011d2:	eb64 0303 	sbc.w	r3, r4, r3
 80011d6:	2001      	movs	r0, #1
 80011d8:	2d00      	cmp	r5, #0
 80011da:	d0e6      	beq.n	80011aa <__udivmoddi4+0xa6>
 80011dc:	e9c5 6300 	strd	r6, r3, [r5]
 80011e0:	e7e3      	b.n	80011aa <__udivmoddi4+0xa6>
 80011e2:	2a00      	cmp	r2, #0
 80011e4:	f040 808f 	bne.w	8001306 <__udivmoddi4+0x202>
 80011e8:	eba1 040c 	sub.w	r4, r1, ip
 80011ec:	2101      	movs	r1, #1
 80011ee:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011f2:	fa1f f78c 	uxth.w	r7, ip
 80011f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011fa:	fb08 4416 	mls	r4, r8, r6, r4
 80011fe:	fb07 f006 	mul.w	r0, r7, r6
 8001202:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001206:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800120a:	4298      	cmp	r0, r3
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x11c>
 800120e:	eb1c 0303 	adds.w	r3, ip, r3
 8001212:	f106 34ff 	add.w	r4, r6, #4294967295
 8001216:	d202      	bcs.n	800121e <__udivmoddi4+0x11a>
 8001218:	4298      	cmp	r0, r3
 800121a:	f200 80cb 	bhi.w	80013b4 <__udivmoddi4+0x2b0>
 800121e:	4626      	mov	r6, r4
 8001220:	1a1c      	subs	r4, r3, r0
 8001222:	fbb4 f0f8 	udiv	r0, r4, r8
 8001226:	fb08 4410 	mls	r4, r8, r0, r4
 800122a:	fb00 f707 	mul.w	r7, r0, r7
 800122e:	fa1f f38e 	uxth.w	r3, lr
 8001232:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001236:	429f      	cmp	r7, r3
 8001238:	d908      	bls.n	800124c <__udivmoddi4+0x148>
 800123a:	eb1c 0303 	adds.w	r3, ip, r3
 800123e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001242:	d202      	bcs.n	800124a <__udivmoddi4+0x146>
 8001244:	429f      	cmp	r7, r3
 8001246:	f200 80ae 	bhi.w	80013a6 <__udivmoddi4+0x2a2>
 800124a:	4620      	mov	r0, r4
 800124c:	1bdb      	subs	r3, r3, r7
 800124e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001252:	e7a5      	b.n	80011a0 <__udivmoddi4+0x9c>
 8001254:	f1c1 0720 	rsb	r7, r1, #32
 8001258:	408b      	lsls	r3, r1
 800125a:	fa22 fc07 	lsr.w	ip, r2, r7
 800125e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001262:	fa24 f607 	lsr.w	r6, r4, r7
 8001266:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800126a:	fbb6 f8f9 	udiv	r8, r6, r9
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	fb09 6618 	mls	r6, r9, r8, r6
 8001276:	fa20 f307 	lsr.w	r3, r0, r7
 800127a:	408c      	lsls	r4, r1
 800127c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001280:	fb08 f00e 	mul.w	r0, r8, lr
 8001284:	431c      	orrs	r4, r3
 8001286:	0c23      	lsrs	r3, r4, #16
 8001288:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800128c:	4298      	cmp	r0, r3
 800128e:	fa02 f201 	lsl.w	r2, r2, r1
 8001292:	d90a      	bls.n	80012aa <__udivmoddi4+0x1a6>
 8001294:	eb1c 0303 	adds.w	r3, ip, r3
 8001298:	f108 36ff 	add.w	r6, r8, #4294967295
 800129c:	f080 8081 	bcs.w	80013a2 <__udivmoddi4+0x29e>
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d97e      	bls.n	80013a2 <__udivmoddi4+0x29e>
 80012a4:	f1a8 0802 	sub.w	r8, r8, #2
 80012a8:	4463      	add	r3, ip
 80012aa:	1a1e      	subs	r6, r3, r0
 80012ac:	fbb6 f3f9 	udiv	r3, r6, r9
 80012b0:	fb09 6613 	mls	r6, r9, r3, r6
 80012b4:	fb03 fe0e 	mul.w	lr, r3, lr
 80012b8:	b2a4      	uxth	r4, r4
 80012ba:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012be:	45a6      	cmp	lr, r4
 80012c0:	d908      	bls.n	80012d4 <__udivmoddi4+0x1d0>
 80012c2:	eb1c 0404 	adds.w	r4, ip, r4
 80012c6:	f103 30ff 	add.w	r0, r3, #4294967295
 80012ca:	d266      	bcs.n	800139a <__udivmoddi4+0x296>
 80012cc:	45a6      	cmp	lr, r4
 80012ce:	d964      	bls.n	800139a <__udivmoddi4+0x296>
 80012d0:	3b02      	subs	r3, #2
 80012d2:	4464      	add	r4, ip
 80012d4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012d8:	fba0 8302 	umull	r8, r3, r0, r2
 80012dc:	eba4 040e 	sub.w	r4, r4, lr
 80012e0:	429c      	cmp	r4, r3
 80012e2:	46c6      	mov	lr, r8
 80012e4:	461e      	mov	r6, r3
 80012e6:	d350      	bcc.n	800138a <__udivmoddi4+0x286>
 80012e8:	d04d      	beq.n	8001386 <__udivmoddi4+0x282>
 80012ea:	b155      	cbz	r5, 8001302 <__udivmoddi4+0x1fe>
 80012ec:	ebba 030e 	subs.w	r3, sl, lr
 80012f0:	eb64 0406 	sbc.w	r4, r4, r6
 80012f4:	fa04 f707 	lsl.w	r7, r4, r7
 80012f8:	40cb      	lsrs	r3, r1
 80012fa:	431f      	orrs	r7, r3
 80012fc:	40cc      	lsrs	r4, r1
 80012fe:	e9c5 7400 	strd	r7, r4, [r5]
 8001302:	2100      	movs	r1, #0
 8001304:	e751      	b.n	80011aa <__udivmoddi4+0xa6>
 8001306:	fa0c fc02 	lsl.w	ip, ip, r2
 800130a:	f1c2 0320 	rsb	r3, r2, #32
 800130e:	40d9      	lsrs	r1, r3
 8001310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001314:	fa20 f303 	lsr.w	r3, r0, r3
 8001318:	fa00 fe02 	lsl.w	lr, r0, r2
 800131c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001320:	fb08 1110 	mls	r1, r8, r0, r1
 8001324:	4094      	lsls	r4, r2
 8001326:	431c      	orrs	r4, r3
 8001328:	fa1f f78c 	uxth.w	r7, ip
 800132c:	0c23      	lsrs	r3, r4, #16
 800132e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001332:	fb00 f107 	mul.w	r1, r0, r7
 8001336:	4299      	cmp	r1, r3
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x248>
 800133a:	eb1c 0303 	adds.w	r3, ip, r3
 800133e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001342:	d22c      	bcs.n	800139e <__udivmoddi4+0x29a>
 8001344:	4299      	cmp	r1, r3
 8001346:	d92a      	bls.n	800139e <__udivmoddi4+0x29a>
 8001348:	3802      	subs	r0, #2
 800134a:	4463      	add	r3, ip
 800134c:	1a5b      	subs	r3, r3, r1
 800134e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001352:	fb08 3311 	mls	r3, r8, r1, r3
 8001356:	b2a4      	uxth	r4, r4
 8001358:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800135c:	fb01 f307 	mul.w	r3, r1, r7
 8001360:	42a3      	cmp	r3, r4
 8001362:	d908      	bls.n	8001376 <__udivmoddi4+0x272>
 8001364:	eb1c 0404 	adds.w	r4, ip, r4
 8001368:	f101 36ff 	add.w	r6, r1, #4294967295
 800136c:	d213      	bcs.n	8001396 <__udivmoddi4+0x292>
 800136e:	42a3      	cmp	r3, r4
 8001370:	d911      	bls.n	8001396 <__udivmoddi4+0x292>
 8001372:	3902      	subs	r1, #2
 8001374:	4464      	add	r4, ip
 8001376:	1ae4      	subs	r4, r4, r3
 8001378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800137c:	e73b      	b.n	80011f6 <__udivmoddi4+0xf2>
 800137e:	4604      	mov	r4, r0
 8001380:	e6f2      	b.n	8001168 <__udivmoddi4+0x64>
 8001382:	4608      	mov	r0, r1
 8001384:	e708      	b.n	8001198 <__udivmoddi4+0x94>
 8001386:	45c2      	cmp	sl, r8
 8001388:	d2af      	bcs.n	80012ea <__udivmoddi4+0x1e6>
 800138a:	ebb8 0e02 	subs.w	lr, r8, r2
 800138e:	eb63 060c 	sbc.w	r6, r3, ip
 8001392:	3801      	subs	r0, #1
 8001394:	e7a9      	b.n	80012ea <__udivmoddi4+0x1e6>
 8001396:	4631      	mov	r1, r6
 8001398:	e7ed      	b.n	8001376 <__udivmoddi4+0x272>
 800139a:	4603      	mov	r3, r0
 800139c:	e79a      	b.n	80012d4 <__udivmoddi4+0x1d0>
 800139e:	4630      	mov	r0, r6
 80013a0:	e7d4      	b.n	800134c <__udivmoddi4+0x248>
 80013a2:	46b0      	mov	r8, r6
 80013a4:	e781      	b.n	80012aa <__udivmoddi4+0x1a6>
 80013a6:	4463      	add	r3, ip
 80013a8:	3802      	subs	r0, #2
 80013aa:	e74f      	b.n	800124c <__udivmoddi4+0x148>
 80013ac:	4606      	mov	r6, r0
 80013ae:	4623      	mov	r3, r4
 80013b0:	4608      	mov	r0, r1
 80013b2:	e711      	b.n	80011d8 <__udivmoddi4+0xd4>
 80013b4:	3e02      	subs	r6, #2
 80013b6:	4463      	add	r3, ip
 80013b8:	e732      	b.n	8001220 <__udivmoddi4+0x11c>
 80013ba:	bf00      	nop

080013bc <__aeabi_idiv0>:
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <BMP280_ReadRegister>:

	float altitude = (T0 / alpha) * (1 - pow((pressure / P0), (1 / beta)));
    return altitude;
}

uint8_t BMP280_ReadRegister(uint8_t reg) {
 80013c0:	b500      	push	{lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	f88d 0007 	strb.w	r0, [sp, #7]

    uint8_t received_data;
    Write_GPIO(PA, 8, LOW); // Disable CS
 80013c8:	2200      	movs	r2, #0
 80013ca:	2108      	movs	r1, #8
 80013cc:	2001      	movs	r0, #1
 80013ce:	f000 fe63 	bl	8002098 <Write_GPIO>
    SPI2_TX(&reg, 1);
 80013d2:	2101      	movs	r1, #1
 80013d4:	f10d 0007 	add.w	r0, sp, #7
 80013d8:	f000 ff14 	bl	8002204 <SPI2_TX>
    SPI2_RX(&received_data, 1);
 80013dc:	2101      	movs	r1, #1
 80013de:	f10d 000f 	add.w	r0, sp, #15
 80013e2:	f000 ff45 	bl	8002270 <SPI2_RX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 80013e6:	2201      	movs	r2, #1
 80013e8:	2108      	movs	r1, #8
 80013ea:	4610      	mov	r0, r2
 80013ec:	f000 fe54 	bl	8002098 <Write_GPIO>
    return received_data;
}
 80013f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80013f4:	b005      	add	sp, #20
 80013f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080013fc <BMP280_ReadTemperature>:
uint8_t BMP280_ReadTemperature(BMP280 *devBMP) {
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4604      	mov	r4, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0 || (BMP280_ReadRegister(BMP280_REG_STATUS) & 0x01) != 0);
 8001400:	20f3      	movs	r0, #243	@ 0xf3
 8001402:	f7ff ffdd 	bl	80013c0 <BMP280_ReadRegister>
 8001406:	f010 0f04 	tst.w	r0, #4
 800140a:	d1f9      	bne.n	8001400 <BMP280_ReadTemperature+0x4>
 800140c:	20f3      	movs	r0, #243	@ 0xf3
 800140e:	f7ff ffd7 	bl	80013c0 <BMP280_ReadRegister>
 8001412:	f010 0f01 	tst.w	r0, #1
 8001416:	d1f3      	bne.n	8001400 <BMP280_ReadTemperature+0x4>
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 8001418:	20fa      	movs	r0, #250	@ 0xfa
 800141a:	f7ff ffd1 	bl	80013c0 <BMP280_ReadRegister>
 800141e:	0305      	lsls	r5, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_TEMP_LSB) << 4) |
 8001420:	20fb      	movs	r0, #251	@ 0xfb
 8001422:	f7ff ffcd 	bl	80013c0 <BMP280_ReadRegister>
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 8001426:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
					((BMP280_ReadRegister(BMP280_REG_TEMP_XLSB) >> 4) & 0x0F);
 800142a:	20fc      	movs	r0, #252	@ 0xfc
 800142c:	f7ff ffc8 	bl	80013c0 <BMP280_ReadRegister>
 8001430:	f3c0 1307 	ubfx	r3, r0, #4, #8
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 8001434:	ea45 0203 	orr.w	r2, r5, r3
    int32_t var1 = ((((adc_T >> 3) - ((int32_t)devBMP->calib_data.dig_T1 << 1))) * ((int32_t)devBMP->calib_data.dig_T2)) >> 11;
 8001438:	8923      	ldrh	r3, [r4, #8]
 800143a:	0059      	lsls	r1, r3, #1
 800143c:	ebc1 01e2 	rsb	r1, r1, r2, asr #3
 8001440:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8001444:	fb00 f101 	mul.w	r1, r0, r1
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1)) * ((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1))) >> 12) * ((int32_t)devBMP->calib_data.dig_T3)) >> 14;
 8001448:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800144c:	fb03 f303 	mul.w	r3, r3, r3
 8001450:	131b      	asrs	r3, r3, #12
 8001452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	139b      	asrs	r3, r3, #14
    devBMP->t_fine = var1 + var2;
 800145c:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 8001460:	6223      	str	r3, [r4, #32]
    int32_t T = (devBMP->t_fine * 5 + 128) >> 8;
 8001462:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001466:	3380      	adds	r3, #128	@ 0x80
    devBMP->temp_C = (float)(T / 100.0); // + devBMP->temperature_ref;
 8001468:	1218      	asrs	r0, r3, #8
 800146a:	f7fe ffcb 	bl	8000404 <__aeabi_i2d>
 800146e:	2200      	movs	r2, #0
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <BMP280_ReadTemperature+0x84>)
 8001472:	f7ff f95b 	bl	800072c <__aeabi_ddiv>
 8001476:	f7ff fb27 	bl	8000ac8 <__aeabi_d2f>
 800147a:	6060      	str	r0, [r4, #4]
}
 800147c:	2001      	movs	r0, #1
 800147e:	bd38      	pop	{r3, r4, r5, pc}
 8001480:	40590000 	.word	0x40590000

08001484 <BMP280_ReadPressure>:
uint8_t BMP280_ReadPressure(BMP280 *devBMP) {
 8001484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001488:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0 || (BMP280_ReadRegister(BMP280_REG_STATUS) & 0x01) != 0);
 800148a:	20f3      	movs	r0, #243	@ 0xf3
 800148c:	f7ff ff98 	bl	80013c0 <BMP280_ReadRegister>
 8001490:	f010 0f04 	tst.w	r0, #4
 8001494:	d1f9      	bne.n	800148a <BMP280_ReadPressure+0x6>
 8001496:	20f3      	movs	r0, #243	@ 0xf3
 8001498:	f7ff ff92 	bl	80013c0 <BMP280_ReadRegister>
 800149c:	f010 0401 	ands.w	r4, r0, #1
 80014a0:	d1f3      	bne.n	800148a <BMP280_ReadPressure+0x6>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 80014a2:	20f7      	movs	r0, #247	@ 0xf7
 80014a4:	f7ff ff8c 	bl	80013c0 <BMP280_ReadRegister>
 80014a8:	0306      	lsls	r6, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_PRESS_LSB) << 4) |
 80014aa:	20f8      	movs	r0, #248	@ 0xf8
 80014ac:	f7ff ff88 	bl	80013c0 <BMP280_ReadRegister>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 80014b0:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
                    ((BMP280_ReadRegister(BMP280_REG_PRESS_XLSB) >> 4) & 0x0F);
 80014b4:	20f9      	movs	r0, #249	@ 0xf9
 80014b6:	f7ff ff83 	bl	80013c0 <BMP280_ReadRegister>
 80014ba:	f3c0 1307 	ubfx	r3, r0, #4, #8
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 80014be:	ea46 0103 	orr.w	r1, r6, r3
    int64_t var1 = ((int64_t)devBMP->t_fine) - 128000;
 80014c2:	6a28      	ldr	r0, [r5, #32]
 80014c4:	17c3      	asrs	r3, r0, #31
 80014c6:	f5b0 30fa 	subs.w	r0, r0, #128000	@ 0x1f400
 80014ca:	f143 33ff 	adc.w	r3, r3, #4294967295
    int64_t var2 = var1 * var1 * (int64_t)devBMP->calib_data.dig_P6;
 80014ce:	fb00 f203 	mul.w	r2, r0, r3
 80014d2:	fba0 7800 	umull	r7, r8, r0, r0
 80014d6:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 80014da:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
 80014de:	17d6      	asrs	r6, r2, #31
 80014e0:	fb07 f606 	mul.w	r6, r7, r6
 80014e4:	fb02 6608 	mla	r6, r2, r8, r6
 80014e8:	fba7 c202 	umull	ip, r2, r7, r2
 80014ec:	4416      	add	r6, r2
    var2 = var2 + ((var1 * (int64_t)devBMP->calib_data.dig_P5) << 17);
 80014ee:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 80014f2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80014f6:	fb02 fe03 	mul.w	lr, r2, r3
 80014fa:	fb00 ee09 	mla	lr, r0, r9, lr
 80014fe:	fba2 2900 	umull	r2, r9, r2, r0
 8001502:	44ce      	add	lr, r9
 8001504:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 8001508:	ea4e 3ed2 	orr.w	lr, lr, r2, lsr #15
 800150c:	0452      	lsls	r2, r2, #17
 800150e:	eb12 0c0c 	adds.w	ip, r2, ip
 8001512:	eb46 060e 	adc.w	r6, r6, lr
    var2 = var2 + (((int64_t)devBMP->calib_data.dig_P4) << 35);
 8001516:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 800151a:	eb06 0ec2 	add.w	lr, r6, r2, lsl #3
    var1 = ((var1 * var1 * (int64_t)devBMP->calib_data.dig_P3) >> 8) + ((var1 * (int64_t)devBMP->calib_data.dig_P2) << 12);
 800151e:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8001522:	17d6      	asrs	r6, r2, #31
 8001524:	fb07 f606 	mul.w	r6, r7, r6
 8001528:	fb02 6608 	mla	r6, r2, r8, r6
 800152c:	fba7 2702 	umull	r2, r7, r7, r2
 8001530:	443e      	add	r6, r7
 8001532:	0a12      	lsrs	r2, r2, #8
 8001534:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8001538:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
 800153c:	ea4f 78e7 	mov.w	r8, r7, asr #31
 8001540:	fb07 f303 	mul.w	r3, r7, r3
 8001544:	fb00 3308 	mla	r3, r0, r8, r3
 8001548:	fba7 7000 	umull	r7, r0, r7, r0
 800154c:	4403      	add	r3, r0
 800154e:	031b      	lsls	r3, r3, #12
 8001550:	ea43 5317 	orr.w	r3, r3, r7, lsr #20
 8001554:	0338      	lsls	r0, r7, #12
 8001556:	1812      	adds	r2, r2, r0
 8001558:	eb43 2326 	adc.w	r3, r3, r6, asr #8
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)devBMP->calib_data.dig_P1) >> 33;
 800155c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001560:	89ee      	ldrh	r6, [r5, #14]
 8001562:	fba2 2006 	umull	r2, r0, r2, r6
 8001566:	fb06 0003 	mla	r0, r6, r3, r0
 800156a:	1042      	asrs	r2, r0, #1
 800156c:	17c3      	asrs	r3, r0, #31
    if (var1 == 0) {
 800156e:	ea53 0060 	orrs.w	r0, r3, r0, asr #1
 8001572:	d065      	beq.n	8001640 <BMP280_ReadPressure+0x1bc>
    int64_t p = 1048576 - adc_P;
 8001574:	f5c1 1480 	rsb	r4, r1, #1048576	@ 0x100000
    p = (((p << 31) - var2) * 3125) / var1;
 8001578:	1061      	asrs	r1, r4, #1
 800157a:	07e4      	lsls	r4, r4, #31
 800157c:	ebb4 040c 	subs.w	r4, r4, ip
 8001580:	eb61 010e 	sbc.w	r1, r1, lr
 8001584:	1920      	adds	r0, r4, r4
 8001586:	eb41 0c01 	adc.w	ip, r1, r1
 800158a:	1900      	adds	r0, r0, r4
 800158c:	eb41 0c0c 	adc.w	ip, r1, ip
 8001590:	ea4f 168c 	mov.w	r6, ip, lsl #6
 8001594:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8001598:	0187      	lsls	r7, r0, #6
 800159a:	19c0      	adds	r0, r0, r7
 800159c:	eb4c 0c06 	adc.w	ip, ip, r6
 80015a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80015a4:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 80015a8:	0080      	lsls	r0, r0, #2
 80015aa:	1900      	adds	r0, r0, r4
 80015ac:	eb41 0c0c 	adc.w	ip, r1, ip
 80015b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80015b4:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 80015b8:	0080      	lsls	r0, r0, #2
 80015ba:	1900      	adds	r0, r0, r4
 80015bc:	eb41 010c 	adc.w	r1, r1, ip
 80015c0:	f7ff fd50 	bl	8001064 <__aeabi_ldivmod>
 80015c4:	4603      	mov	r3, r0
    var1 = (((int64_t)devBMP->calib_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80015c6:	f9b5 401e 	ldrsh.w	r4, [r5, #30]
 80015ca:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 80015ce:	0b42      	lsrs	r2, r0, #13
 80015d0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80015d4:	134f      	asrs	r7, r1, #13
 80015d6:	fb04 f607 	mul.w	r6, r4, r7
 80015da:	fb02 660c 	mla	r6, r2, ip, r6
 80015de:	fba4 4c02 	umull	r4, ip, r4, r2
 80015e2:	4466      	add	r6, ip
 80015e4:	fb02 f606 	mul.w	r6, r2, r6
 80015e8:	fb04 6607 	mla	r6, r4, r7, r6
 80015ec:	fba2 2404 	umull	r2, r4, r2, r4
 80015f0:	4434      	add	r4, r6
 80015f2:	0e52      	lsrs	r2, r2, #25
 80015f4:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
    var2 = (((int64_t)devBMP->calib_data.dig_P8) * p) >> 19;
 80015f8:	f9b5 601c 	ldrsh.w	r6, [r5, #28]
 80015fc:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 8001600:	fb06 f701 	mul.w	r7, r6, r1
 8001604:	fb0c 7700 	mla	r7, ip, r0, r7
 8001608:	fba6 6000 	umull	r6, r0, r6, r0
 800160c:	4407      	add	r7, r0
 800160e:	0cf0      	lsrs	r0, r6, #19
 8001610:	ea40 3047 	orr.w	r0, r0, r7, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)devBMP->calib_data.dig_P7) << 4);
 8001614:	189b      	adds	r3, r3, r2
 8001616:	eb41 6264 	adc.w	r2, r1, r4, asr #25
 800161a:	181b      	adds	r3, r3, r0
 800161c:	eb42 42e7 	adc.w	r2, r2, r7, asr #19
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001626:	f9b5 001a 	ldrsh.w	r0, [r5, #26]
    devBMP->pressure_Pa = (float)p / (float)(1 << 8); // + devBMP->pressure_ref;
 800162a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800162e:	2100      	movs	r1, #0
 8001630:	f7ff fb6a 	bl	8000d08 <__aeabi_l2f>
 8001634:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8001638:	f7ff fba4 	bl	8000d84 <__aeabi_fmul>
 800163c:	6028      	str	r0, [r5, #0]
    return 1; // OK
 800163e:	2401      	movs	r4, #1
}
 8001640:	4620      	mov	r0, r4
 8001642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001646 <BMP280_MeasureReference>:
uint8_t BMP280_MeasureReference(BMP280 *devBMP, float temp_ref, float press_ref) {
 8001646:	b570      	push	{r4, r5, r6, lr}
 8001648:	4604      	mov	r4, r0
 800164a:	460e      	mov	r6, r1
 800164c:	4615      	mov	r5, r2
    devBMP->temperature_ref = BMP280_ReadTemperature(devBMP) - temp_ref;
 800164e:	f7ff fed5 	bl	80013fc <BMP280_ReadTemperature>
 8001652:	f7ff fb43 	bl	8000cdc <__aeabi_i2f>
 8001656:	4631      	mov	r1, r6
 8001658:	f7ff fa8a 	bl	8000b70 <__aeabi_fsub>
 800165c:	6260      	str	r0, [r4, #36]	@ 0x24
    devBMP->pressure_ref = BMP280_ReadPressure(devBMP) - press_ref;
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff ff10 	bl	8001484 <BMP280_ReadPressure>
 8001664:	f7ff fb3a 	bl	8000cdc <__aeabi_i2f>
 8001668:	4629      	mov	r1, r5
 800166a:	f7ff fa81 	bl	8000b70 <__aeabi_fsub>
 800166e:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 8001670:	2001      	movs	r0, #1
 8001672:	bd70      	pop	{r4, r5, r6, pc}

08001674 <BMP280_ReadCalibrationData>:
void BMP280_ReadCalibrationData(BMP280 *devBMP) {
 8001674:	b530      	push	{r4, r5, lr}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 800167a:	20f3      	movs	r0, #243	@ 0xf3
 800167c:	f7ff fea0 	bl	80013c0 <BMP280_ReadRegister>
 8001680:	f010 0f04 	tst.w	r0, #4
 8001684:	d1f9      	bne.n	800167a <BMP280_ReadCalibrationData+0x6>
    for (int i = 0; i < 26; i++) {
 8001686:	2400      	movs	r4, #0
 8001688:	e00a      	b.n	80016a0 <BMP280_ReadCalibrationData+0x2c>
        calib[i] = BMP280_ReadRegister(BMP280_REG_CALIB_00 + i);
 800168a:	f1a4 0078 	sub.w	r0, r4, #120	@ 0x78
 800168e:	b2c0      	uxtb	r0, r0
 8001690:	f7ff fe96 	bl	80013c0 <BMP280_ReadRegister>
 8001694:	f104 0320 	add.w	r3, r4, #32
 8001698:	446b      	add	r3, sp
 800169a:	f803 0c1c 	strb.w	r0, [r3, #-28]
    for (int i = 0; i < 26; i++) {
 800169e:	3401      	adds	r4, #1
 80016a0:	2c19      	cmp	r4, #25
 80016a2:	ddf2      	ble.n	800168a <BMP280_ReadCalibrationData+0x16>
    devBMP->calib_data.dig_T1 = (calib[1] << 8) | calib[0];
 80016a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80016a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016b0:	812b      	strh	r3, [r5, #8]
    devBMP->calib_data.dig_T2 = (calib[3] << 8) | calib[2];
 80016b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80016b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80016ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016be:	816b      	strh	r3, [r5, #10]
    devBMP->calib_data.dig_T3 = (calib[5] << 8) | calib[4];
 80016c0:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80016c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80016c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016cc:	81ab      	strh	r3, [r5, #12]
    devBMP->calib_data.dig_P1 = (calib[7] << 8) | calib[6];
 80016ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80016d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80016d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016da:	81eb      	strh	r3, [r5, #14]
    devBMP->calib_data.dig_P2 = (calib[9] << 8) | calib[8];
 80016dc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80016e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80016e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e8:	822b      	strh	r3, [r5, #16]
    devBMP->calib_data.dig_P3 = (calib[11] << 8) | calib[10];
 80016ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80016ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80016f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016f6:	826b      	strh	r3, [r5, #18]
    devBMP->calib_data.dig_P4 = (calib[13] << 8) | calib[12];
 80016f8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80016fc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001700:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001704:	82ab      	strh	r3, [r5, #20]
    devBMP->calib_data.dig_P5 = (calib[15] << 8) | calib[14];
 8001706:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800170a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800170e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001712:	82eb      	strh	r3, [r5, #22]
    devBMP->calib_data.dig_P6 = (calib[17] << 8) | calib[16];
 8001714:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001718:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800171c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001720:	832b      	strh	r3, [r5, #24]
    devBMP->calib_data.dig_P7 = (calib[19] << 8) | calib[18];
 8001722:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8001726:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800172a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800172e:	836b      	strh	r3, [r5, #26]
    devBMP->calib_data.dig_P8 = (calib[21] << 8) | calib[20];
 8001730:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8001734:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800173c:	83ab      	strh	r3, [r5, #28]
    devBMP->calib_data.dig_P9 = (calib[23] << 8) | calib[22];
 800173e:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8001742:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800174a:	83eb      	strh	r3, [r5, #30]
}
 800174c:	b009      	add	sp, #36	@ 0x24
 800174e:	bd30      	pop	{r4, r5, pc}

08001750 <BMP280_WriteRegister>:

uint8_t BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8001750:	b500      	push	{lr}
 8001752:	b083      	sub	sp, #12

    uint8_t data[2] = {reg, value};
 8001754:	f88d 0004 	strb.w	r0, [sp, #4]
 8001758:	f88d 1005 	strb.w	r1, [sp, #5]
    Write_GPIO(PA, 8, LOW); // Disable CS
 800175c:	2200      	movs	r2, #0
 800175e:	2108      	movs	r1, #8
 8001760:	2001      	movs	r0, #1
 8001762:	f000 fc99 	bl	8002098 <Write_GPIO>
    SPI2_TX(data, 2);
 8001766:	2102      	movs	r1, #2
 8001768:	a801      	add	r0, sp, #4
 800176a:	f000 fd4b 	bl	8002204 <SPI2_TX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 800176e:	2201      	movs	r2, #1
 8001770:	2108      	movs	r1, #8
 8001772:	4610      	mov	r0, r2
 8001774:	f000 fc90 	bl	8002098 <Write_GPIO>
    return 1; // OK
}
 8001778:	2001      	movs	r0, #1
 800177a:	b003      	add	sp, #12
 800177c:	f85d fb04 	ldr.w	pc, [sp], #4

08001780 <BMP280_Init>:
uint8_t BMP280_Init(BMP280 *devBMP, unsigned short spi_port) {
 8001780:	b510      	push	{r4, lr}
 8001782:	4604      	mov	r4, r0
	SPI_Init(spi_port);
 8001784:	4608      	mov	r0, r1
 8001786:	f000 fcbb 	bl	8002100 <SPI_Init>
    BMP280_WriteRegister(BMP280_REG_RESET, BMP280_RESET_WORD); // Reset
 800178a:	21b6      	movs	r1, #182	@ 0xb6
 800178c:	20e0      	movs	r0, #224	@ 0xe0
 800178e:	f7ff ffdf 	bl	8001750 <BMP280_WriteRegister>
    if (BMP280_ReadRegister(BMP280_REG_ID) != BMP280_DEVICE_ID) {
 8001792:	20d0      	movs	r0, #208	@ 0xd0
 8001794:	f7ff fe14 	bl	80013c0 <BMP280_ReadRegister>
 8001798:	2858      	cmp	r0, #88	@ 0x58
 800179a:	d001      	beq.n	80017a0 <BMP280_Init+0x20>
        return 0; // Error
 800179c:	2000      	movs	r0, #0
}
 800179e:	bd10      	pop	{r4, pc}
    BMP280_ReadCalibrationData(devBMP);
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff ff67 	bl	8001674 <BMP280_ReadCalibrationData>
    BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, BMP280_SETTING_CTRL_MEAS_NORMAL);
 80017a6:	2157      	movs	r1, #87	@ 0x57
 80017a8:	20f4      	movs	r0, #244	@ 0xf4
 80017aa:	f7ff ffd1 	bl	8001750 <BMP280_WriteRegister>
    BMP280_WriteRegister(BMP280_REG_CONFIG, BMP280_SETTING_CONFIG);
 80017ae:	2108      	movs	r1, #8
 80017b0:	20f5      	movs	r0, #245	@ 0xf5
 80017b2:	f7ff ffcd 	bl	8001750 <BMP280_WriteRegister>
    BMP280_MeasureReference(devBMP, T0, 101325.0);
 80017b6:	4a03      	ldr	r2, [pc, #12]	@ (80017c4 <BMP280_Init+0x44>)
 80017b8:	4903      	ldr	r1, [pc, #12]	@ (80017c8 <BMP280_Init+0x48>)
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff ff43 	bl	8001646 <BMP280_MeasureReference>
    return 1;
 80017c0:	2001      	movs	r0, #1
 80017c2:	e7ec      	b.n	800179e <BMP280_Init+0x1e>
 80017c4:	47c5e680 	.word	0x47c5e680
 80017c8:	43901333 	.word	0x43901333

080017cc <Buzz>:
    {1, 280, 230, 100, 1000},  // PENDING
    {3, 280, 230, 100, 1000},  // ARMED
    {1, 280, 279, 3000, 10}    // CRASH
};

void Buzz(TIM_HandleTypeDef *htim, uint32_t channel, buzzRoutines_t routine){
 80017cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017d0:	4606      	mov	r6, r0
 80017d2:	460f      	mov	r7, r1
 80017d4:	4614      	mov	r4, r2

	HAL_TIM_PWM_Start(htim, channel);
 80017d6:	f003 f8ad 	bl	8004934 <HAL_TIM_PWM_Start>

	const buzzParametres_t *params = &buzzParams[routine];

	uint8_t counter = params->nbBips;
 80017da:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80017de:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <Buzz+0xe8>)
 80017e0:	f813 5022 	ldrb.w	r5, [r3, r2, lsl #2]
	int freq;

	while (counter > 0) {
 80017e4:	2d00      	cmp	r5, #0
 80017e6:	d05f      	beq.n	80018a8 <Buzz+0xdc>
		if(Delay_Wait(params->delayPause)) {
 80017e8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80017ec:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <Buzz+0xe8>)
 80017ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80017f2:	6918      	ldr	r0, [r3, #16]
 80017f4:	f000 fc70 	bl	80020d8 <Delay_Wait>
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d0f3      	beq.n	80017e4 <Buzz+0x18>
			for(freq = params->frequencyStart; freq > params->frequencyEnd; freq--)
 80017fc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001800:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <Buzz+0xe8>)
 8001802:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001806:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800180a:	e00b      	b.n	8001824 <Buzz+0x58>
			{
				if(Delay_Wait(params->delayModulation) == true) {
					__HAL_TIM_SET_AUTORELOAD(htim, freq);
					__HAL_TIM_SET_COMPARE(htim, channel, freq);
 800180c:	2f04      	cmp	r7, #4
 800180e:	d028      	beq.n	8001862 <Buzz+0x96>
 8001810:	2f08      	cmp	r7, #8
 8001812:	d02a      	beq.n	800186a <Buzz+0x9e>
 8001814:	6833      	ldr	r3, [r6, #0]
 8001816:	f8c3 8040 	str.w	r8, [r3, #64]	@ 0x40
					Delay_Wait(params->delayModulation);
 800181a:	4648      	mov	r0, r9
 800181c:	f000 fc5c 	bl	80020d8 <Delay_Wait>
			for(freq = params->frequencyStart; freq > params->frequencyEnd; freq--)
 8001820:	f108 38ff 	add.w	r8, r8, #4294967295
 8001824:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <Buzz+0xe8>)
 800182a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4543      	cmp	r3, r8
 8001832:	da1e      	bge.n	8001872 <Buzz+0xa6>
				if(Delay_Wait(params->delayModulation) == true) {
 8001834:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <Buzz+0xe8>)
 800183a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800183e:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8001842:	4648      	mov	r0, r9
 8001844:	f000 fc48 	bl	80020d8 <Delay_Wait>
 8001848:	2800      	cmp	r0, #0
 800184a:	d0e9      	beq.n	8001820 <Buzz+0x54>
					__HAL_TIM_SET_AUTORELOAD(htim, freq);
 800184c:	6833      	ldr	r3, [r6, #0]
 800184e:	f8c3 802c 	str.w	r8, [r3, #44]	@ 0x2c
 8001852:	f8c6 800c 	str.w	r8, [r6, #12]
					__HAL_TIM_SET_COMPARE(htim, channel, freq);
 8001856:	2f00      	cmp	r7, #0
 8001858:	d1d8      	bne.n	800180c <Buzz+0x40>
 800185a:	6833      	ldr	r3, [r6, #0]
 800185c:	f8c3 8034 	str.w	r8, [r3, #52]	@ 0x34
 8001860:	e7db      	b.n	800181a <Buzz+0x4e>
 8001862:	6833      	ldr	r3, [r6, #0]
 8001864:	f8c3 8038 	str.w	r8, [r3, #56]	@ 0x38
 8001868:	e7d7      	b.n	800181a <Buzz+0x4e>
 800186a:	6833      	ldr	r3, [r6, #0]
 800186c:	f8c3 803c 	str.w	r8, [r3, #60]	@ 0x3c
 8001870:	e7d3      	b.n	800181a <Buzz+0x4e>
				}
			}
			__HAL_TIM_SET_AUTORELOAD(htim, 0);
 8001872:	6832      	ldr	r2, [r6, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001878:	60f3      	str	r3, [r6, #12]
			__HAL_TIM_SET_COMPARE(htim, channel, 0);
 800187a:	b92f      	cbnz	r7, 8001888 <Buzz+0xbc>
 800187c:	6833      	ldr	r3, [r6, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
			counter--;
 8001882:	3d01      	subs	r5, #1
 8001884:	b2ed      	uxtb	r5, r5
 8001886:	e7ad      	b.n	80017e4 <Buzz+0x18>
			__HAL_TIM_SET_COMPARE(htim, channel, 0);
 8001888:	2f04      	cmp	r7, #4
 800188a:	d005      	beq.n	8001898 <Buzz+0xcc>
 800188c:	2f08      	cmp	r7, #8
 800188e:	d007      	beq.n	80018a0 <Buzz+0xd4>
 8001890:	6833      	ldr	r3, [r6, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40
 8001896:	e7f4      	b.n	8001882 <Buzz+0xb6>
 8001898:	6833      	ldr	r3, [r6, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	639a      	str	r2, [r3, #56]	@ 0x38
 800189e:	e7f0      	b.n	8001882 <Buzz+0xb6>
 80018a0:	6833      	ldr	r3, [r6, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018a6:	e7ec      	b.n	8001882 <Buzz+0xb6>
		}
	}

	HAL_TIM_PWM_Stop(htim, channel);
 80018a8:	4639      	mov	r1, r7
 80018aa:	4630      	mov	r0, r6
 80018ac:	f003 f8e4 	bl	8004a78 <HAL_TIM_PWM_Stop>
}
 80018b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018b4:	08009968 	.word	0x08009968

080018b8 <CD74HC4051_Init>:

uint32_t ADC_Sampling (ADC_HandleTypeDef *hadc);

uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {

	if (hadc == NULL) {
 80018b8:	b370      	cbz	r0, 8001918 <CD74HC4051_Init+0x60>
uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {
 80018ba:	b510      	push	{r4, lr}
 80018bc:	4604      	mov	r4, r0
		return 0; // Error
	}
	// Read pin
	Init_GPIO(PA, 0, IN, I_AN); // MUL_AN
 80018be:	2300      	movs	r3, #0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	2001      	movs	r0, #1
 80018c6:	f000 fb9d 	bl	8002004 <Init_GPIO>
	// Batteries
	Init_GPIO(PC, 13, OUT2, O_GP_PP); // MUL_S0
 80018ca:	2300      	movs	r3, #0
 80018cc:	2202      	movs	r2, #2
 80018ce:	210d      	movs	r1, #13
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 fb97 	bl	8002004 <Init_GPIO>
	Init_GPIO(PC, 14, OUT2, O_GP_PP); // MUL_S1
 80018d6:	2300      	movs	r3, #0
 80018d8:	2202      	movs	r2, #2
 80018da:	210e      	movs	r1, #14
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 fb91 	bl	8002004 <Init_GPIO>
	Init_GPIO(PC, 15, OUT2, O_GP_PP); // MUL_S2
 80018e2:	2300      	movs	r3, #0
 80018e4:	2202      	movs	r2, #2
 80018e6:	210f      	movs	r1, #15
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 fb8b 	bl	8002004 <Init_GPIO>
	Init_GPIO(PB, 8, OUT2, O_GP_PP); // MUL_E~
 80018ee:	2300      	movs	r3, #0
 80018f0:	2202      	movs	r2, #2
 80018f2:	2108      	movs	r1, #8
 80018f4:	4610      	mov	r0, r2
 80018f6:	f000 fb85 	bl	8002004 <Init_GPIO>
	// Set MUL_E~ (inverse)
	Write_GPIO(PB, 8, HIGH);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2108      	movs	r1, #8
 80018fe:	2002      	movs	r0, #2
 8001900:	f000 fbca 	bl	8002098 <Write_GPIO>
	// Pyros
	Pyro_Init();
 8001904:	f000 fac6 	bl	8001e94 <Pyro_Init>

	//ADC calibration
	ADC_Stop(hadc);
 8001908:	4620      	mov	r0, r4
 800190a:	f000 fb5b 	bl	8001fc4 <ADC_Stop>
	ADC_Calibration(hadc);
 800190e:	4620      	mov	r0, r4
 8001910:	f000 fb53 	bl	8001fba <ADC_Calibration>

	return 1; // OK
 8001914:	2001      	movs	r0, #1
}
 8001916:	bd10      	pop	{r4, pc}
		return 0; // Error
 8001918:	2000      	movs	r0, #0
}
 800191a:	4770      	bx	lr

0800191c <CD74HC4051_AnRead>:

uint16_t CD74HC4051_AnRead(ADC_HandleTypeDef *hadc, uint8_t channel, uint8_t pyro_channel, float vref) {

	if (hadc == NULL) {
 800191c:	2800      	cmp	r0, #0
 800191e:	d060      	beq.n	80019e2 <CD74HC4051_AnRead+0xc6>
uint16_t CD74HC4051_AnRead(ADC_HandleTypeDef *hadc, uint8_t channel, uint8_t pyro_channel, float vref) {
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001922:	460c      	mov	r4, r1
 8001924:	4615      	mov	r5, r2
 8001926:	461e      	mov	r6, r3
 8001928:	4607      	mov	r7, r0
		return 0;
	}
	if(channel == CHANNEL_1 || channel == CHANNEL_7) {
 800192a:	2901      	cmp	r1, #1
 800192c:	d05b      	beq.n	80019e6 <CD74HC4051_AnRead+0xca>
		return 0;
	}

	ADC_Start(hadc);
 800192e:	f000 fb3f 	bl	8001fb0 <ADC_Start>

	Write_GPIO(PB, 8, HIGH); // MUL_E~ (inverse)
 8001932:	2201      	movs	r2, #1
 8001934:	2108      	movs	r1, #8
 8001936:	2002      	movs	r0, #2
 8001938:	f000 fbae 	bl	8002098 <Write_GPIO>
	Write_GPIO(PA, 15, LOW); // Pyro_Test (inverse)
 800193c:	2200      	movs	r2, #0
 800193e:	210f      	movs	r1, #15
 8001940:	2001      	movs	r0, #1
 8001942:	f000 fba9 	bl	8002098 <Write_GPIO>
	if(channel == CHANNEL_0) {
 8001946:	b98c      	cbnz	r4, 800196c <CD74HC4051_AnRead+0x50>
		if(pyro_channel == PYRO_CHANNEL_0) {
 8001948:	2d01      	cmp	r5, #1
 800194a:	d003      	beq.n	8001954 <CD74HC4051_AnRead+0x38>
			Write_GPIO(PB, 4, HIGH); // Pyro_ON0
		} else if (pyro_channel == PYRO_CHANNEL_1) {
 800194c:	2d02      	cmp	r5, #2
 800194e:	d007      	beq.n	8001960 <CD74HC4051_AnRead+0x44>
			Write_GPIO(PB, 5, HIGH); // Pyro_ON1
		} else {
			return 0;
 8001950:	2000      	movs	r0, #0
 8001952:	e045      	b.n	80019e0 <CD74HC4051_AnRead+0xc4>
			Write_GPIO(PB, 4, HIGH); // Pyro_ON0
 8001954:	2201      	movs	r2, #1
 8001956:	2104      	movs	r1, #4
 8001958:	2002      	movs	r0, #2
 800195a:	f000 fb9d 	bl	8002098 <Write_GPIO>
 800195e:	e017      	b.n	8001990 <CD74HC4051_AnRead+0x74>
			Write_GPIO(PB, 5, HIGH); // Pyro_ON1
 8001960:	2201      	movs	r2, #1
 8001962:	2105      	movs	r1, #5
 8001964:	2002      	movs	r0, #2
 8001966:	f000 fb97 	bl	8002098 <Write_GPIO>
 800196a:	e011      	b.n	8001990 <CD74HC4051_AnRead+0x74>
		}
	} else {
		// Set channel
		Write_GPIO(PC, 13, (channel & 0x01) ? HIGH : LOW);
 800196c:	f004 0201 	and.w	r2, r4, #1
 8001970:	210d      	movs	r1, #13
 8001972:	2003      	movs	r0, #3
 8001974:	f000 fb90 	bl	8002098 <Write_GPIO>
		Write_GPIO(PC, 14, (channel & 0x02) ? HIGH : LOW);
 8001978:	f3c4 0240 	ubfx	r2, r4, #1, #1
 800197c:	210e      	movs	r1, #14
 800197e:	2003      	movs	r0, #3
 8001980:	f000 fb8a 	bl	8002098 <Write_GPIO>
		Write_GPIO(PC, 15, (channel & 0x04) ? HIGH : LOW);
 8001984:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8001988:	210f      	movs	r1, #15
 800198a:	2003      	movs	r0, #3
 800198c:	f000 fb84 	bl	8002098 <Write_GPIO>
	}
	// Reactiver multiplexer pour lecture
	Write_GPIO(PB, 8, LOW); // MUL_E~ (inverse)
 8001990:	2200      	movs	r2, #0
 8001992:	2108      	movs	r1, #8
 8001994:	2002      	movs	r0, #2
 8001996:	f000 fb7f 	bl	8002098 <Write_GPIO>
	// Lecture
	uint32_t adc_value = ADC_Sampling(hadc);
 800199a:	4638      	mov	r0, r7
 800199c:	f000 fb18 	bl	8001fd0 <ADC_Sampling>
 80019a0:	4604      	mov	r4, r0
	// Desactiver pyros (ordre important)
	Write_GPIO(PB, 4, LOW); // Pyro_ON0
 80019a2:	2200      	movs	r2, #0
 80019a4:	2104      	movs	r1, #4
 80019a6:	2002      	movs	r0, #2
 80019a8:	f000 fb76 	bl	8002098 <Write_GPIO>
	Write_GPIO(PB, 5, LOW); // Pyro_ON1
 80019ac:	2200      	movs	r2, #0
 80019ae:	2105      	movs	r1, #5
 80019b0:	2002      	movs	r0, #2
 80019b2:	f000 fb71 	bl	8002098 <Write_GPIO>
	Write_GPIO(PA, 15, HIGH); // Pyro_Test~
 80019b6:	2201      	movs	r2, #1
 80019b8:	210f      	movs	r1, #15
 80019ba:	4610      	mov	r0, r2
 80019bc:	f000 fb6c 	bl	8002098 <Write_GPIO>

	return (uint16_t)((adc_value * vref / 4096) * 1000);
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff f987 	bl	8000cd4 <__aeabi_ui2f>
 80019c6:	4631      	mov	r1, r6
 80019c8:	f7ff f9dc 	bl	8000d84 <__aeabi_fmul>
 80019cc:	f04f 5166 	mov.w	r1, #964689920	@ 0x39800000
 80019d0:	f7ff f9d8 	bl	8000d84 <__aeabi_fmul>
 80019d4:	4905      	ldr	r1, [pc, #20]	@ (80019ec <CD74HC4051_AnRead+0xd0>)
 80019d6:	f7ff f9d5 	bl	8000d84 <__aeabi_fmul>
 80019da:	f7ff fb23 	bl	8001024 <__aeabi_f2uiz>
 80019de:	b280      	uxth	r0, r0
}
 80019e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 80019e2:	2000      	movs	r0, #0
}
 80019e4:	4770      	bx	lr
		return 0;
 80019e6:	2000      	movs	r0, #0
 80019e8:	e7fa      	b.n	80019e0 <CD74HC4051_AnRead+0xc4>
 80019ea:	bf00      	nop
 80019ec:	447a0000 	.word	0x447a0000

080019f0 <HM10BLE_Send>:

	USART_RX(usart_port, response, sizeof(response));
	return 1; // OK
}

uint8_t HM10BLE_Send(unsigned short usart_port, uint8_t *message, uint8_t size) {
 80019f0:	b508      	push	{r3, lr}

	USART_TX(usart_port, message, sizeof(message));
 80019f2:	2204      	movs	r2, #4
 80019f4:	f000 fcc2 	bl	800237c <USART_TX>
	return 1; // OK
}
 80019f8:	2001      	movs	r0, #1
 80019fa:	bd08      	pop	{r3, pc}

080019fc <HM10BLE_Init>:
uint8_t HM10BLE_Init(HM10BLE *devHM10, unsigned short usart_port) {
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
	HM10BLE_Send(usart_port, (uint8_t *)"AT\n", strlen("AT\n"));							// Awake
 8001a02:	2203      	movs	r2, #3
 8001a04:	490b      	ldr	r1, [pc, #44]	@ (8001a34 <HM10BLE_Init+0x38>)
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7ff fff2 	bl	80019f0 <HM10BLE_Send>
	HM10BLE_Send(usart_port, (uint8_t *)"AT+NAMEBulldogs\n", strlen("AT+NAMEMerope\n"));	// Name device
 8001a0c:	220e      	movs	r2, #14
 8001a0e:	490a      	ldr	r1, [pc, #40]	@ (8001a38 <HM10BLE_Init+0x3c>)
 8001a10:	4628      	mov	r0, r5
 8001a12:	f7ff ffed 	bl	80019f0 <HM10BLE_Send>
	HM10BLE_Send(usart_port, (uint8_t *)"AT+IMME1\n", strlen("AT+IMME1\n"));				// Start
 8001a16:	2209      	movs	r2, #9
 8001a18:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <HM10BLE_Init+0x40>)
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f7ff ffe8 	bl	80019f0 <HM10BLE_Send>
	devHM10->hm10_status = false;
 8001a20:	2300      	movs	r3, #0
 8001a22:	7023      	strb	r3, [r4, #0]
	devHM10->rfd_status = false;
 8001a24:	7063      	strb	r3, [r4, #1]
	devHM10->icm_status = false;
 8001a26:	70a3      	strb	r3, [r4, #2]
	devHM10->l76lm33_status = false;
 8001a28:	70e3      	strb	r3, [r4, #3]
	devHM10->bmp_status = false;
 8001a2a:	7123      	strb	r3, [r4, #4]
	devHM10->bat_status = 0x00;
 8001a2c:	7163      	strb	r3, [r4, #5]
	devHM10->sd_status = false;
 8001a2e:	71a3      	strb	r3, [r4, #6]
}
 8001a30:	2001      	movs	r0, #1
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
 8001a34:	080099cc 	.word	0x080099cc
 8001a38:	080099d0 	.word	0x080099d0
 8001a3c:	080099e4 	.word	0x080099e4

08001a40 <ICM20602_Read>:
{
	return Read_GPIO(PA, 10);
}

void ICM20602_Read(uint8_t address, uint8_t rxData[], uint8_t size)
{
 8001a40:	b530      	push	{r4, r5, lr}
 8001a42:	b083      	sub	sp, #12
 8001a44:	460c      	mov	r4, r1
 8001a46:	4615      	mov	r5, r2
 8001a48:	f88d 0007 	strb.w	r0, [sp, #7]
	address |= 0x80;  // read operation
 8001a4c:	b2c3      	uxtb	r3, r0
 8001a4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a52:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(PB, 12, LOW);
 8001a56:	2200      	movs	r2, #0
 8001a58:	210c      	movs	r1, #12
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f000 fb1c 	bl	8002098 <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8001a60:	2101      	movs	r1, #1
 8001a62:	f10d 0007 	add.w	r0, sp, #7
 8001a66:	f000 fbcd 	bl	8002204 <SPI2_TX>
	SPI2_RX(rxData, size);  // receive 6 bytes data
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f000 fbff 	bl	8002270 <SPI2_RX>
	Write_GPIO(PB, 12, HIGH);
 8001a72:	2201      	movs	r2, #1
 8001a74:	210c      	movs	r1, #12
 8001a76:	2002      	movs	r0, #2
 8001a78:	f000 fb0e 	bl	8002098 <Write_GPIO>
}
 8001a7c:	b003      	add	sp, #12
 8001a7e:	bd30      	pop	{r4, r5, pc}

08001a80 <ICM20602_Write>:

void ICM20602_Write(uint8_t address, uint8_t value)
{
 8001a80:	b500      	push	{lr}
 8001a82:	b083      	sub	sp, #12
 8001a84:	f88d 0007 	strb.w	r0, [sp, #7]
 8001a88:	f88d 1006 	strb.w	r1, [sp, #6]
	Write_GPIO(PB, 12, LOW);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	210c      	movs	r1, #12
 8001a90:	2002      	movs	r0, #2
 8001a92:	f000 fb01 	bl	8002098 <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8001a96:	2101      	movs	r1, #1
 8001a98:	f10d 0007 	add.w	r0, sp, #7
 8001a9c:	f000 fbb2 	bl	8002204 <SPI2_TX>
	SPI2_TX(&value, 1);  // send value
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	f10d 0006 	add.w	r0, sp, #6
 8001aa6:	f000 fbad 	bl	8002204 <SPI2_TX>
	Write_GPIO(PB, 12, HIGH);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	210c      	movs	r1, #12
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f000 faf2 	bl	8002098 <Write_GPIO>
	HAL_Delay(20);
 8001ab4:	2014      	movs	r0, #20
 8001ab6:	f001 f969 	bl	8002d8c <HAL_Delay>
}
 8001aba:	b003      	add	sp, #12
 8001abc:	f85d fb04 	ldr.w	pc, [sp], #4

08001ac0 <ICM20602_Remove_DC_Offset>:
{
 8001ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	460d      	mov	r5, r1
	int16_t offset[3] = {0,0,0};
 8001ac8:	2400      	movs	r4, #0
 8001aca:	f8ad 4008 	strh.w	r4, [sp, #8]
 8001ace:	f8ad 400a 	strh.w	r4, [sp, #10]
 8001ad2:	f8ad 400c 	strh.w	r4, [sp, #12]
	for(i = 0; i < mean; i++)
 8001ad6:	e027      	b.n	8001b28 <ICM20602_Remove_DC_Offset+0x68>
		ICM20602_Read(ICM20602_REG_GYRO_XOUT_H, rxData, 6);
 8001ad8:	2206      	movs	r2, #6
 8001ada:	4669      	mov	r1, sp
 8001adc:	2043      	movs	r0, #67	@ 0x43
 8001ade:	f7ff ffaf 	bl	8001a40 <ICM20602_Read>
		offset[0] += (rxData[0] << 8) | rxData[1];
 8001ae2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8001ae6:	f89d 1000 	ldrb.w	r1, [sp]
 8001aea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001aee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001af2:	4413      	add	r3, r2
 8001af4:	f8ad 3008 	strh.w	r3, [sp, #8]
		offset[1] += (rxData[2] << 8) | rxData[3];
 8001af8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001afc:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001b00:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001b04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b08:	4413      	add	r3, r2
 8001b0a:	f8ad 300a 	strh.w	r3, [sp, #10]
		offset[2] += (rxData[4] << 8) | rxData[5];
 8001b0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001b12:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001b16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001b1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b1e:	4413      	add	r3, r2
 8001b20:	f8ad 300c 	strh.w	r3, [sp, #12]
	for(i = 0; i < mean; i++)
 8001b24:	3401      	adds	r4, #1
 8001b26:	b264      	sxtb	r4, r4
 8001b28:	42ac      	cmp	r4, r5
 8001b2a:	dbd5      	blt.n	8001ad8 <ICM20602_Remove_DC_Offset+0x18>
	offset[0] /= mean;
 8001b2c:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 8001b30:	fb97 f7f5 	sdiv	r7, r7, r5
 8001b34:	b239      	sxth	r1, r7
 8001b36:	f8ad 1008 	strh.w	r1, [sp, #8]
	offset[1] /= mean;
 8001b3a:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8001b3e:	fb96 f6f5 	sdiv	r6, r6, r5
 8001b42:	fa0f f886 	sxth.w	r8, r6
 8001b46:	f8ad 800a 	strh.w	r8, [sp, #10]
	offset[2] /= mean;
 8001b4a:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 8001b4e:	fb94 f4f5 	sdiv	r4, r4, r5
 8001b52:	b225      	sxth	r5, r4
 8001b54:	f8ad 500c 	strh.w	r5, [sp, #12]
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRH, (offset[0]*-2)>>8);
 8001b58:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
 8001b5c:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8001b60:	2013      	movs	r0, #19
 8001b62:	f7ff ff8d 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRL, offset[0]*-2);
 8001b66:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
 8001b6a:	0079      	lsls	r1, r7, #1
 8001b6c:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001b70:	2014      	movs	r0, #20
 8001b72:	f7ff ff85 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRH, (offset[1]*-2)>>8);
 8001b76:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8001b7a:	f3c8 11c7 	ubfx	r1, r8, #7, #8
 8001b7e:	2015      	movs	r0, #21
 8001b80:	f7ff ff7e 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRL, offset[1]*-2);
 8001b84:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
 8001b88:	0071      	lsls	r1, r6, #1
 8001b8a:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001b8e:	2016      	movs	r0, #22
 8001b90:	f7ff ff76 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRH, (offset[2]*-2)>>8);
 8001b94:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8001b98:	f3c5 11c7 	ubfx	r1, r5, #7, #8
 8001b9c:	2017      	movs	r0, #23
 8001b9e:	f7ff ff6f 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRL, offset[2]*-2);
 8001ba2:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 8001ba6:	0061      	lsls	r1, r4, #1
 8001ba8:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001bac:	2018      	movs	r0, #24
 8001bae:	f7ff ff67 	bl	8001a80 <ICM20602_Write>
}
 8001bb2:	b004      	add	sp, #16
 8001bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bb8 <ICM20602_Init>:
{
 8001bb8:	b530      	push	{r4, r5, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	4604      	mov	r4, r0
	dev->gyroXRaw = 	0.0f;
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	8005      	strh	r5, [r0, #0]
	dev->gyroYRaw = 	0.0f;
 8001bc2:	8045      	strh	r5, [r0, #2]
	dev->gyroZRaw = 	0.0f;
 8001bc4:	8085      	strh	r5, [r0, #4]
	dev->accXRaw = 		0.0f;
 8001bc6:	80c5      	strh	r5, [r0, #6]
	dev->accYRaw = 		0.0f;
 8001bc8:	8105      	strh	r5, [r0, #8]
	dev->accZRaw = 		0.0f;
 8001bca:	8145      	strh	r5, [r0, #10]
	dev->temperatureC = 0.0f;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6243      	str	r3, [r0, #36]	@ 0x24
	Init_GPIO(PA,  10, IN, I_PP); // Init GPIO for the interrupt
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	462a      	mov	r2, r5
 8001bd4:	210a      	movs	r1, #10
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 fa14 	bl	8002004 <Init_GPIO>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x80);
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	206b      	movs	r0, #107	@ 0x6b
 8001be0:	f7ff ff4e 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_I2C_IF, 0x40);
 8001be4:	2140      	movs	r1, #64	@ 0x40
 8001be6:	2070      	movs	r0, #112	@ 0x70
 8001be8:	f7ff ff4a 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x01);
 8001bec:	2101      	movs	r1, #1
 8001bee:	206b      	movs	r0, #107	@ 0x6b
 8001bf0:	f7ff ff46 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_SMPLRT_DIV, 0x00);
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	2019      	movs	r0, #25
 8001bf8:	f7ff ff42 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_CONFIG, 0x05);
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	201a      	movs	r0, #26
 8001c00:	f7ff ff3e 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_GYRO_CONFIG, 0x018);
 8001c04:	2118      	movs	r1, #24
 8001c06:	201b      	movs	r0, #27
 8001c08:	f7ff ff3a 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG, 0x18);
 8001c0c:	2118      	movs	r1, #24
 8001c0e:	201c      	movs	r0, #28
 8001c10:	f7ff ff36 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001c14:	2103      	movs	r1, #3
 8001c16:	201d      	movs	r0, #29
 8001c18:	f7ff ff32 	bl	8001a80 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_INT_ENABLE, 0x01);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2038      	movs	r0, #56	@ 0x38
 8001c20:	f7ff ff2e 	bl	8001a80 <ICM20602_Write>
	ICM20602_Read(ICM20602_REG_WHO_AM_I, rxData, 1);
 8001c24:	2201      	movs	r2, #1
 8001c26:	a901      	add	r1, sp, #4
 8001c28:	2075      	movs	r0, #117	@ 0x75
 8001c2a:	f7ff ff09 	bl	8001a40 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_I2C_IF, rxData, 1);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	a901      	add	r1, sp, #4
 8001c32:	2070      	movs	r0, #112	@ 0x70
 8001c34:	f7ff ff04 	bl	8001a40 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_PWR_MGMT_1, rxData, 1);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	a901      	add	r1, sp, #4
 8001c3c:	206b      	movs	r0, #107	@ 0x6b
 8001c3e:	f7ff feff 	bl	8001a40 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_SMPLRT_DIV, rxData, 1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	a901      	add	r1, sp, #4
 8001c46:	2019      	movs	r0, #25
 8001c48:	f7ff fefa 	bl	8001a40 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_CONFIG, rxData, 1);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	a901      	add	r1, sp, #4
 8001c50:	201a      	movs	r0, #26
 8001c52:	f7ff fef5 	bl	8001a40 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG, rxData, 1);
 8001c56:	2201      	movs	r2, #1
 8001c58:	a901      	add	r1, sp, #4
 8001c5a:	201c      	movs	r0, #28
 8001c5c:	f7ff fef0 	bl	8001a40 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG2, rxData, 1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	a901      	add	r1, sp, #4
 8001c64:	201d      	movs	r0, #29
 8001c66:	f7ff feeb 	bl	8001a40 <ICM20602_Read>
	ICM20602_Remove_DC_Offset(dev,2);
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff ff27 	bl	8001ac0 <ICM20602_Remove_DC_Offset>
}
 8001c72:	4628      	mov	r0, r5
 8001c74:	b003      	add	sp, #12
 8001c76:	bd30      	pop	{r4, r5, pc}

08001c78 <L76LM33_SendCommand>:
	return 1; // OK
}

uint8_t L76LM33_SendCommand(unsigned short usart_port, char *command) {

    if (command == NULL) {
 8001c78:	b161      	cbz	r1, 8001c94 <L76LM33_SendCommand+0x1c>
uint8_t L76LM33_SendCommand(unsigned short usart_port, char *command) {
 8001c7a:	b538      	push	{r3, r4, r5, lr}
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	460d      	mov	r5, r1
        return 0; // Error
    }
    USART_TX(usart_port, (uint8_t*)command, strlen(command));
 8001c80:	4608      	mov	r0, r1
 8001c82:	f7fe fa65 	bl	8000150 <strlen>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4629      	mov	r1, r5
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f000 fb76 	bl	800237c <USART_TX>
    return 1; // OK
 8001c90:	2001      	movs	r0, #1
}
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
        return 0; // Error
 8001c94:	2000      	movs	r0, #0
}
 8001c96:	4770      	bx	lr

08001c98 <L76LM33_Init>:
uint8_t L76LM33_Init (unsigned short usart_port) {
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	b09a      	sub	sp, #104	@ 0x68
 8001c9c:	4606      	mov	r6, r0
	char PROTOCOL_SETRMS[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*35\r\n";
 8001c9e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8001ca2:	4c17      	ldr	r4, [pc, #92]	@ (8001d00 <L76LM33_Init+0x68>)
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001cb6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8001cbe:	f8ac 2000 	strh.w	r2, [ip]
	char PROTOCOL_GPSSEARCHONLY[] = "$PMTK353,1,0,0,0,0*2A\r\n";
 8001cc2:	ac05      	add	r4, sp, #20
 8001cc4:	4d0f      	ldr	r5, [pc, #60]	@ (8001d04 <L76LM33_Init+0x6c>)
 8001cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cce:	e884 0003 	stmia.w	r4, {r0, r1}
	char PROTOCOL_NAVMODE[] = "PMTK886,2*2A\r\n";
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <L76LM33_Init+0x70>)
 8001cd4:	ac01      	add	r4, sp, #4
 8001cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd8:	c407      	stmia	r4!, {r0, r1, r2}
 8001cda:	f824 3b02 	strh.w	r3, [r4], #2
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	7023      	strb	r3, [r4, #0]
	L76LM33_SendCommand(usart_port, PROTOCOL_SETRMS);
 8001ce2:	a90b      	add	r1, sp, #44	@ 0x2c
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f7ff ffc7 	bl	8001c78 <L76LM33_SendCommand>
	L76LM33_SendCommand(usart_port, PROTOCOL_GPSSEARCHONLY);
 8001cea:	a905      	add	r1, sp, #20
 8001cec:	4630      	mov	r0, r6
 8001cee:	f7ff ffc3 	bl	8001c78 <L76LM33_SendCommand>
	L76LM33_SendCommand(usart_port, PROTOCOL_NAVMODE);
 8001cf2:	a901      	add	r1, sp, #4
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f7ff ffbf 	bl	8001c78 <L76LM33_SendCommand>
}
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	b01a      	add	sp, #104	@ 0x68
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	080099f0 	.word	0x080099f0
 8001d04:	08009a2c 	.word	0x08009a2c
 8001d08:	08009a44 	.word	0x08009a44

08001d0c <FATFS_ErrorToString>:
#include "GAUL_Drivers/MEM2067.h"

// Debugging
const char* FATFS_ErrorToString(FRESULT result) {

    switch (result) {
 8001d0c:	2813      	cmp	r0, #19
 8001d0e:	d831      	bhi.n	8001d74 <FATFS_ErrorToString+0x68>
 8001d10:	e8df f000 	tbb	[pc, r0]
 8001d14:	0e0c320a 	.word	0x0e0c320a
 8001d18:	16141210 	.word	0x16141210
 8001d1c:	1e1c1a18 	.word	0x1e1c1a18
 8001d20:	26242220 	.word	0x26242220
 8001d24:	2e2c2a28 	.word	0x2e2c2a28
 8001d28:	4814      	ldr	r0, [pc, #80]	@ (8001d7c <FATFS_ErrorToString+0x70>)
 8001d2a:	4770      	bx	lr
        case FR_OK: return "Succeeded\r\n";
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer\r\n";
        case FR_INT_ERR: return "Assertion failed\r\n";
 8001d2c:	4814      	ldr	r0, [pc, #80]	@ (8001d80 <FATFS_ErrorToString+0x74>)
 8001d2e:	4770      	bx	lr
        case FR_NOT_READY: return "The physical drive cannot work\r\n";
 8001d30:	4814      	ldr	r0, [pc, #80]	@ (8001d84 <FATFS_ErrorToString+0x78>)
 8001d32:	4770      	bx	lr
        case FR_NO_FILE: return "Could not find the file\r\n";
 8001d34:	4814      	ldr	r0, [pc, #80]	@ (8001d88 <FATFS_ErrorToString+0x7c>)
 8001d36:	4770      	bx	lr
        case FR_NO_PATH: return "Could not find the path\r\n";
 8001d38:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <FATFS_ErrorToString+0x80>)
 8001d3a:	4770      	bx	lr
        case FR_INVALID_NAME: return "The path name format is invalid\r\n";
 8001d3c:	4814      	ldr	r0, [pc, #80]	@ (8001d90 <FATFS_ErrorToString+0x84>)
 8001d3e:	4770      	bx	lr
        case FR_DENIED: return "Access denied due to prohibited access or directory full\r\n";
 8001d40:	4814      	ldr	r0, [pc, #80]	@ (8001d94 <FATFS_ErrorToString+0x88>)
 8001d42:	4770      	bx	lr
        case FR_EXIST: return "Access denied due to prohibited access\r\n";
 8001d44:	4814      	ldr	r0, [pc, #80]	@ (8001d98 <FATFS_ErrorToString+0x8c>)
 8001d46:	4770      	bx	lr
        case FR_INVALID_OBJECT: return "The file/directory object is invalid\r\n";
 8001d48:	4814      	ldr	r0, [pc, #80]	@ (8001d9c <FATFS_ErrorToString+0x90>)
 8001d4a:	4770      	bx	lr
        case FR_WRITE_PROTECTED: return "The physical drive is write protected\r\n";
 8001d4c:	4814      	ldr	r0, [pc, #80]	@ (8001da0 <FATFS_ErrorToString+0x94>)
 8001d4e:	4770      	bx	lr
        case FR_INVALID_DRIVE: return "The logical drive number is invalid\r\n";
 8001d50:	4814      	ldr	r0, [pc, #80]	@ (8001da4 <FATFS_ErrorToString+0x98>)
 8001d52:	4770      	bx	lr
        case FR_NOT_ENABLED: return "The volume has no work area\r\n";
 8001d54:	4814      	ldr	r0, [pc, #80]	@ (8001da8 <FATFS_ErrorToString+0x9c>)
 8001d56:	4770      	bx	lr
        case FR_NO_FILESYSTEM: return "There is no valid FAT volume\r\n";
 8001d58:	4814      	ldr	r0, [pc, #80]	@ (8001dac <FATFS_ErrorToString+0xa0>)
 8001d5a:	4770      	bx	lr
        case FR_MKFS_ABORTED: return "The f_mkfs() aborted due to any parameter error\r\n";
 8001d5c:	4814      	ldr	r0, [pc, #80]	@ (8001db0 <FATFS_ErrorToString+0xa4>)
 8001d5e:	4770      	bx	lr
        case FR_TIMEOUT: return "Could not get a grant to access the volume within defined period\r\n";
 8001d60:	4814      	ldr	r0, [pc, #80]	@ (8001db4 <FATFS_ErrorToString+0xa8>)
 8001d62:	4770      	bx	lr
        case FR_LOCKED: return "The operation is rejected according to the file sharing policy\r\n";
 8001d64:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <FATFS_ErrorToString+0xac>)
 8001d66:	4770      	bx	lr
        case FR_NOT_ENOUGH_CORE: return "LFN working buffer could not be allocated\r\n";
 8001d68:	4814      	ldr	r0, [pc, #80]	@ (8001dbc <FATFS_ErrorToString+0xb0>)
 8001d6a:	4770      	bx	lr
        case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_SHARE\r\n";
 8001d6c:	4814      	ldr	r0, [pc, #80]	@ (8001dc0 <FATFS_ErrorToString+0xb4>)
 8001d6e:	4770      	bx	lr
        case FR_INVALID_PARAMETER: return "Given parameter is invalid\r\n";
 8001d70:	4814      	ldr	r0, [pc, #80]	@ (8001dc4 <FATFS_ErrorToString+0xb8>)
 8001d72:	4770      	bx	lr
        default: return "Unknown error";
 8001d74:	4814      	ldr	r0, [pc, #80]	@ (8001dc8 <FATFS_ErrorToString+0xbc>)
 8001d76:	4770      	bx	lr
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer\r\n";
 8001d78:	4814      	ldr	r0, [pc, #80]	@ (8001dcc <FATFS_ErrorToString+0xc0>)
    }
}
 8001d7a:	4770      	bx	lr
 8001d7c:	08009a54 	.word	0x08009a54
 8001d80:	08009a98 	.word	0x08009a98
 8001d84:	08009aac 	.word	0x08009aac
 8001d88:	08009ad0 	.word	0x08009ad0
 8001d8c:	08009aec 	.word	0x08009aec
 8001d90:	08009b08 	.word	0x08009b08
 8001d94:	08009b2c 	.word	0x08009b2c
 8001d98:	08009b68 	.word	0x08009b68
 8001d9c:	08009b94 	.word	0x08009b94
 8001da0:	08009bbc 	.word	0x08009bbc
 8001da4:	08009be4 	.word	0x08009be4
 8001da8:	08009c0c 	.word	0x08009c0c
 8001dac:	08009c2c 	.word	0x08009c2c
 8001db0:	08009c4c 	.word	0x08009c4c
 8001db4:	08009c80 	.word	0x08009c80
 8001db8:	08009cc4 	.word	0x08009cc4
 8001dbc:	08009d08 	.word	0x08009d08
 8001dc0:	08009d34 	.word	0x08009d34
 8001dc4:	08009d58 	.word	0x08009d58
 8001dc8:	08009d78 	.word	0x08009d78
 8001dcc:	08009a60 	.word	0x08009a60

08001dd0 <MEM2067_Mount>:

uint8_t MEM2067_Mount(void) {
 8001dd0:	b530      	push	{r4, r5, lr}
 8001dd2:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8001dd6:	b087      	sub	sp, #28
	DWORD free_clusters;
	uint32_t total_size, free_space;
	char rw_buffer[200];

	//------------------[ Mount The SD Card ]--------------------
	Init_GPIO(PA, 4, OUT2, O_GP_PP);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2202      	movs	r2, #2
 8001ddc:	2104      	movs	r1, #4
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 f910 	bl	8002004 <Init_GPIO>
	SPI_Init(1);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f000 f98b 	bl	8002100 <SPI_Init>
	Write_GPIO(PA, 4, HIGH);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2104      	movs	r1, #4
 8001dee:	4610      	mov	r0, r2
 8001df0:	f000 f952 	bl	8002098 <Write_GPIO>
	fr_result = f_mount(&fatfs, "", 1);
 8001df4:	2201      	movs	r2, #1
 8001df6:	4921      	ldr	r1, [pc, #132]	@ (8001e7c <MEM2067_Mount+0xac>)
 8001df8:	a802      	add	r0, sp, #8
 8001dfa:	f004 ff31 	bl	8006c60 <f_mount>
	if(fr_result != FR_OK) {
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d134      	bne.n	8001e6c <MEM2067_Mount+0x9c>
		printf("Failed: %s", FATFS_ErrorToString(fr_result));
		return 0;
	}
	printf("Succeeded: %s", FATFS_ErrorToString(fr_result));
 8001e02:	f7ff ff83 	bl	8001d0c <FATFS_ErrorToString>
 8001e06:	4601      	mov	r1, r0
 8001e08:	481d      	ldr	r0, [pc, #116]	@ (8001e80 <MEM2067_Mount+0xb0>)
 8001e0a:	f005 fe7b 	bl	8007b04 <iprintf>
	//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
	f_getfree("", &free_clusters, &fr_ptr);
 8001e0e:	aa01      	add	r2, sp, #4
 8001e10:	4669      	mov	r1, sp
 8001e12:	481a      	ldr	r0, [pc, #104]	@ (8001e7c <MEM2067_Mount+0xac>)
 8001e14:	f004 ff6e 	bl	8006cf4 <f_getfree>
	total_size = (uint32_t)((fr_ptr->n_fatent - 2) * fr_ptr->csize * 0.5);
 8001e18:	9b01      	ldr	r3, [sp, #4]
 8001e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1e:	6958      	ldr	r0, [r3, #20]
 8001e20:	3802      	subs	r0, #2
 8001e22:	789c      	ldrb	r4, [r3, #2]
 8001e24:	fb04 f000 	mul.w	r0, r4, r0
 8001e28:	f7fe fadc 	bl	80003e4 <__aeabi_ui2d>
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <MEM2067_Mount+0xb4>)
 8001e30:	f7fe fb52 	bl	80004d8 <__aeabi_dmul>
 8001e34:	f7fe fe28 	bl	8000a88 <__aeabi_d2uiz>
 8001e38:	4605      	mov	r5, r0
	free_space = (uint32_t)(free_clusters * fr_ptr->csize * 0.5);
 8001e3a:	9800      	ldr	r0, [sp, #0]
 8001e3c:	fb04 f000 	mul.w	r0, r4, r0
 8001e40:	f7fe fad0 	bl	80003e4 <__aeabi_ui2d>
 8001e44:	2200      	movs	r2, #0
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MEM2067_Mount+0xb4>)
 8001e48:	f7fe fb46 	bl	80004d8 <__aeabi_dmul>
 8001e4c:	f7fe fe1c 	bl	8000a88 <__aeabi_d2uiz>
 8001e50:	4604      	mov	r4, r0
	printf("Total SD Card Size: %lu Bytes\r\n", total_size);
 8001e52:	4629      	mov	r1, r5
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <MEM2067_Mount+0xb8>)
 8001e56:	f005 fe55 	bl	8007b04 <iprintf>
	printf("Free SD Card Space: %lu Bytes\r\n\n", free_space);
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <MEM2067_Mount+0xbc>)
 8001e5e:	f005 fe51 	bl	8007b04 <iprintf>

	return 1;
 8001e62:	2001      	movs	r0, #1
}
 8001e64:	f50d 5d81 	add.w	sp, sp, #4128	@ 0x1020
 8001e68:	b007      	add	sp, #28
 8001e6a:	bd30      	pop	{r4, r5, pc}
		printf("Failed: %s", FATFS_ErrorToString(fr_result));
 8001e6c:	f7ff ff4e 	bl	8001d0c <FATFS_ErrorToString>
 8001e70:	4601      	mov	r1, r0
 8001e72:	4807      	ldr	r0, [pc, #28]	@ (8001e90 <MEM2067_Mount+0xc0>)
 8001e74:	f005 fe46 	bl	8007b04 <iprintf>
		return 0;
 8001e78:	2000      	movs	r0, #0
 8001e7a:	e7f3      	b.n	8001e64 <MEM2067_Mount+0x94>
 8001e7c:	08009de4 	.word	0x08009de4
 8001e80:	08009d94 	.word	0x08009d94
 8001e84:	3fe00000 	.word	0x3fe00000
 8001e88:	08009da4 	.word	0x08009da4
 8001e8c:	08009dc4 	.word	0x08009dc4
 8001e90:	08009d88 	.word	0x08009d88

08001e94 <Pyro_Init>:
 *      Author: gagno
 */

#include "GAUL_Drivers/Pyros.h"

void Pyro_Init(void) {
 8001e94:	b508      	push	{r3, lr}
	// Pyros
	Init_GPIO(PB, 4, OUT2, O_GP_PP); // PyroON0
 8001e96:	2300      	movs	r3, #0
 8001e98:	2202      	movs	r2, #2
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f000 f8b1 	bl	8002004 <Init_GPIO>
	Init_GPIO(PB, 5, OUT2, O_GP_PP); // PyroON1
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 f8ab 	bl	8002004 <Init_GPIO>
	Init_GPIO(PA, 15, OUT2, O_GP_PP); // Pyro_Test~
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f000 f8a5 	bl	8002004 <Init_GPIO>
	// Set Pyro_Test~ (inverse) et Pyros_ON LOW
	Write_GPIO(PA, 15, HIGH);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f000 f8ea 	bl	8002098 <Write_GPIO>
	Write_GPIO(PB, 4, LOW);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f000 f8e5 	bl	8002098 <Write_GPIO>
	Write_GPIO(PB, 5, LOW);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f000 f8e0 	bl	8002098 <Write_GPIO>
}
 8001ed8:	bd08      	pop	{r3, pc}
	...

08001edc <ws2812_timer2_init>:
static uint16_t ws2812_gpio_set_bits = 0;
static uint16_t dma_buffer[DMA_BUFFER_SIZE];


static void ws2812_timer2_init(void)
{
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	b08e      	sub	sp, #56	@ 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	940a      	str	r4, [sp, #40]	@ 0x28
 8001ee4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001ee6:	940c      	str	r4, [sp, #48]	@ 0x30
 8001ee8:	940d      	str	r4, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eea:	9408      	str	r4, [sp, #32]
 8001eec:	9409      	str	r4, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001eee:	9401      	str	r4, [sp, #4]
 8001ef0:	9402      	str	r4, [sp, #8]
 8001ef2:	9403      	str	r4, [sp, #12]
 8001ef4:	9404      	str	r4, [sp, #16]
 8001ef6:	9405      	str	r4, [sp, #20]
 8001ef8:	9406      	str	r4, [sp, #24]
 8001efa:	9407      	str	r4, [sp, #28]

    htimer2.Instance = TIM2;
 8001efc:	4d1a      	ldr	r5, [pc, #104]	@ (8001f68 <ws2812_timer2_init+0x8c>)
 8001efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f02:	602b      	str	r3, [r5, #0]
    htimer2.Init.Prescaler = 0;
 8001f04:	606c      	str	r4, [r5, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	60ac      	str	r4, [r5, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8001f08:	235a      	movs	r3, #90	@ 0x5a
 8001f0a:	60eb      	str	r3, [r5, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0c:	612c      	str	r4, [r5, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htimer2);
 8001f10:	4628      	mov	r0, r5
 8001f12:	f002 fc67 	bl	80047e4 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1a:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8001f1c:	a90a      	add	r1, sp, #40	@ 0x28
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f002 fed0 	bl	8004cc4 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8001f24:	4628      	mov	r0, r5
 8001f26:	f002 fcac 	bl	8004882 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2a:	9408      	str	r4, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8001f2e:	a908      	add	r1, sp, #32
 8001f30:	4628      	mov	r0, r5
 8001f32:	f003 fa33 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f36:	2660      	movs	r6, #96	@ 0x60
 8001f38:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8001f3a:	231c      	movs	r3, #28
 8001f3c:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3e:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f40:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001f42:	4622      	mov	r2, r4
 8001f44:	a901      	add	r1, sp, #4
 8001f46:	4628      	mov	r0, r5
 8001f48:	f002 fdfa 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4c:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8001f4e:	2339      	movs	r3, #57	@ 0x39
 8001f50:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f52:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f54:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001f56:	2204      	movs	r2, #4
 8001f58:	eb0d 0102 	add.w	r1, sp, r2
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	f002 fdef 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
}
 8001f62:	b00e      	add	sp, #56	@ 0x38
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	bf00      	nop
 8001f68:	20000208 	.word	0x20000208

08001f6c <WS2812_Init>:
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
}

void WS2812_Init()
{
 8001f6c:	b500      	push	{lr}
 8001f6e:	b083      	sub	sp, #12
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <WS2812_Init+0x40>)
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	9b01      	ldr	r3, [sp, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	4611      	mov	r1, r2
 8001f88:	200c      	movs	r0, #12
 8001f8a:	f001 fce4 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4611      	mov	r1, r2
 8001f92:	200f      	movs	r0, #15
 8001f94:	f001 fcdf 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	2011      	movs	r0, #17
 8001f9e:	f001 fcda 	bl	8003956 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001fa2:	f7ff ff9b 	bl	8001edc <ws2812_timer2_init>
}
 8001fa6:	b003      	add	sp, #12
 8001fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fac:	40021000 	.word	0x40021000

08001fb0 <ADC_Start>:


#include "GAUL_Drivers/Low_Level_Drivers/ADC_driver.h"


uint8_t ADC_Start(ADC_HandleTypeDef *hadc) {
 8001fb0:	b508      	push	{r3, lr}

	HAL_ADC_Start(hadc);
 8001fb2:	f000 ffe7 	bl	8002f84 <HAL_ADC_Start>
	return 1; // OK
}
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	bd08      	pop	{r3, pc}

08001fba <ADC_Calibration>:

uint8_t ADC_Calibration(ADC_HandleTypeDef *hadc) {
 8001fba:	b508      	push	{r3, lr}

	HAL_ADCEx_Calibration_Start(hadc);
 8001fbc:	f001 fb62 	bl	8003684 <HAL_ADCEx_Calibration_Start>
	return 1; // OK
}
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	bd08      	pop	{r3, pc}

08001fc4 <ADC_Stop>:

uint8_t ADC_Stop(ADC_HandleTypeDef *hadc) {
 8001fc4:	b508      	push	{r3, lr}

	HAL_ADC_Stop(hadc);
 8001fc6:	f001 f88b 	bl	80030e0 <HAL_ADC_Stop>
	return 1; // OK
}
 8001fca:	2001      	movs	r0, #1
 8001fcc:	bd08      	pop	{r3, pc}
	...

08001fd0 <ADC_Sampling>:

uint32_t ADC_Sampling (ADC_HandleTypeDef *hadc) {
 8001fd0:	b538      	push	{r3, r4, r5, lr}

	if (!(ADC1->CR2 & ADC_CR2_ADON)) {
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <ADC_Sampling+0x30>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f013 0f01 	tst.w	r3, #1
 8001fda:	d00d      	beq.n	8001ff8 <ADC_Sampling+0x28>
 8001fdc:	4604      	mov	r4, r0
		return 0xFFFF;
	}
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY); // Timeout peut etre ajuste
 8001fde:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe2:	f001 f8a9 	bl	8003138 <HAL_ADC_PollForConversion>
	uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f001 f9ac 	bl	8003344 <HAL_ADC_GetValue>
 8001fec:	4605      	mov	r5, r0
	HAL_ADC_Stop(hadc);
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f001 f876 	bl	80030e0 <HAL_ADC_Stop>

	return adc_value;
}
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFFFF;
 8001ff8:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8001ffc:	e7fa      	b.n	8001ff4 <ADC_Sampling+0x24>
 8001ffe:	bf00      	nop
 8002000:	40012400 	.word	0x40012400

08002004 <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8002004:	b510      	push	{r4, lr}
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 unsigned short offset = 0x00;

	if(pin > 7)
 8002006:	2907      	cmp	r1, #7
 8002008:	d904      	bls.n	8002014 <Init_GPIO+0x10>
		{
			tPIN -= 8;
 800200a:	3908      	subs	r1, #8
 800200c:	b289      	uxth	r1, r1
			offset = 0x01;
 800200e:	f04f 0e01 	mov.w	lr, #1
 8002012:	e001      	b.n	8002018 <Init_GPIO+0x14>
 unsigned short offset = 0x00;
 8002014:	f04f 0e00 	mov.w	lr, #0
		}

	if(port == 1)
 8002018:	2801      	cmp	r0, #1
 800201a:	d00f      	beq.n	800203c <Init_GPIO+0x38>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 800201c:	2802      	cmp	r0, #2
 800201e:	d02d      	beq.n	800207c <Init_GPIO+0x78>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8002020:	2803      	cmp	r0, #3
 8002022:	d116      	bne.n	8002052 <Init_GPIO+0x4e>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 8002024:	4c1b      	ldr	r4, [pc, #108]	@ (8002094 <Init_GPIO+0x90>)
 8002026:	69a0      	ldr	r0, [r4, #24]
 8002028:	f040 0010 	orr.w	r0, r0, #16
 800202c:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 800202e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002032:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8002036:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 800203a:	e00a      	b.n	8002052 <Init_GPIO+0x4e>
			RCC_APB2ENR |= 4; //// Enabling PORT A
 800203c:	4c15      	ldr	r4, [pc, #84]	@ (8002094 <Init_GPIO+0x90>)
 800203e:	69a0      	ldr	r0, [r4, #24]
 8002040:	f040 0004 	orr.w	r0, r0, #4
 8002044:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 8002046:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800204a:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 800204e:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 8002052:	f8dc 0000 	ldr.w	r0, [ip]
 8002056:	0089      	lsls	r1, r1, #2
 8002058:	f04f 0e0f 	mov.w	lr, #15
 800205c:	fa0e fe01 	lsl.w	lr, lr, r1
 8002060:	ea20 000e 	bic.w	r0, r0, lr
 8002064:	f8cc 0000 	str.w	r0, [ip]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8002068:	f8dc 0000 	ldr.w	r0, [ip]
 800206c:	408a      	lsls	r2, r1
 800206e:	3102      	adds	r1, #2
 8002070:	408b      	lsls	r3, r1
 8002072:	431a      	orrs	r2, r3
 8002074:	4302      	orrs	r2, r0
 8002076:	f8cc 2000 	str.w	r2, [ip]
}
 800207a:	bd10      	pop	{r4, pc}
			RCC_APB2ENR |= 8; //// Enabling PORT A
 800207c:	4c05      	ldr	r4, [pc, #20]	@ (8002094 <Init_GPIO+0x90>)
 800207e:	69a0      	ldr	r0, [r4, #24]
 8002080:	f040 0008 	orr.w	r0, r0, #8
 8002084:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 8002086:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800208a:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 800208e:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 8002092:	e7de      	b.n	8002052 <Init_GPIO+0x4e>
 8002094:	40021000 	.word	0x40021000

08002098 <Write_GPIO>:
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
 8002098:	2801      	cmp	r0, #1
 800209a:	d005      	beq.n	80020a8 <Write_GPIO+0x10>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 800209c:	2802      	cmp	r0, #2
 800209e:	d00a      	beq.n	80020b6 <Write_GPIO+0x1e>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 80020a0:	2803      	cmp	r0, #3
 80020a2:	d102      	bne.n	80020aa <Write_GPIO+0x12>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <Write_GPIO+0x34>)
 80020a6:	e000      	b.n	80020aa <Write_GPIO+0x12>
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <Write_GPIO+0x38>)
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 80020aa:	b132      	cbz	r2, 80020ba <Write_GPIO+0x22>
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	408a      	lsls	r2, r1
 80020b0:	4302      	orrs	r2, r0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	4770      	bx	lr
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <Write_GPIO+0x3c>)
 80020b8:	e7f7      	b.n	80020aa <Write_GPIO+0x12>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f101 	lsl.w	r1, r0, r1
 80020c2:	ea22 0201 	bic.w	r2, r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	4001100c 	.word	0x4001100c
 80020d0:	4001080c 	.word	0x4001080c
 80020d4:	40010c0c 	.word	0x40010c0c

080020d8 <Delay_Wait>:

#include "GAUL_Drivers/Low_Level_Drivers/NonBlockingDelay_driver.h"

uint32_t lastGetTick = 0;

bool Delay_Wait(uint32_t delay) {
 80020d8:	b510      	push	{r4, lr}
 80020da:	4604      	mov	r4, r0

	if((HAL_GetTick() - lastGetTick) >= delay) {
 80020dc:	f000 fe4c 	bl	8002d78 <HAL_GetTick>
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <Delay_Wait+0x24>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1ac0      	subs	r0, r0, r3
 80020e6:	42a0      	cmp	r0, r4
 80020e8:	d201      	bcs.n	80020ee <Delay_Wait+0x16>
		lastGetTick = HAL_GetTick();
		return true;
	} else {
		return false;
 80020ea:	2000      	movs	r0, #0
	}
}
 80020ec:	bd10      	pop	{r4, pc}
		lastGetTick = HAL_GetTick();
 80020ee:	f000 fe43 	bl	8002d78 <HAL_GetTick>
 80020f2:	4b02      	ldr	r3, [pc, #8]	@ (80020fc <Delay_Wait+0x24>)
 80020f4:	6018      	str	r0, [r3, #0]
		return true;
 80020f6:	2001      	movs	r0, #1
 80020f8:	e7f8      	b.n	80020ec <Delay_Wait+0x14>
 80020fa:	bf00      	nop
 80020fc:	20000250 	.word	0x20000250

08002100 <SPI_Init>:

#include "main.h"
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"
#include "GAUL_Drivers/Low_Level_Drivers/SPI_driver.h"

void SPI_Init(unsigned short spi) {
 8002100:	b508      	push	{r3, lr}
    if(spi == 1) {
 8002102:	2801      	cmp	r0, #1
 8002104:	d002      	beq.n	800210c <SPI_Init+0xc>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1

        Write_GPIO(PA, 4, HIGH);

        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    } else if(spi == 2) {
 8002106:	2802      	cmp	r0, #2
 8002108:	d026      	beq.n	8002158 <SPI_Init+0x58>
        Write_GPIO(PA, 8, HIGH);
        Write_GPIO(PB, 12, HIGH);

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}
 800210a:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800210c:	4a2b      	ldr	r2, [pc, #172]	@ (80021bc <SPI_Init+0xbc>)
 800210e:	6993      	ldr	r3, [r2, #24]
 8002110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002114:	6193      	str	r3, [r2, #24]
        Init_GPIO(PA, 4, OUT50, O_GP_PP); // CS
 8002116:	2300      	movs	r3, #0
 8002118:	2203      	movs	r2, #3
 800211a:	2104      	movs	r1, #4
 800211c:	f7ff ff72 	bl	8002004 <Init_GPIO>
        Init_GPIO(PA, 5, OUT50, O_AF_PP); // CLK
 8002120:	2302      	movs	r3, #2
 8002122:	2203      	movs	r2, #3
 8002124:	2105      	movs	r1, #5
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff ff6c 	bl	8002004 <Init_GPIO>
        Init_GPIO(PA, 6, IN, I_PP);    // MISO SPI1
 800212c:	2302      	movs	r3, #2
 800212e:	2200      	movs	r2, #0
 8002130:	2106      	movs	r1, #6
 8002132:	2001      	movs	r0, #1
 8002134:	f7ff ff66 	bl	8002004 <Init_GPIO>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1
 8002138:	2302      	movs	r3, #2
 800213a:	2203      	movs	r2, #3
 800213c:	2107      	movs	r1, #7
 800213e:	2001      	movs	r0, #1
 8002140:	f7ff ff60 	bl	8002004 <Init_GPIO>
        Write_GPIO(PA, 4, HIGH);
 8002144:	2201      	movs	r2, #1
 8002146:	2104      	movs	r1, #4
 8002148:	4610      	mov	r0, r2
 800214a:	f7ff ffa5 	bl	8002098 <Write_GPIO>
        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 800214e:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <SPI_Init+0xc0>)
 8002150:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e7d8      	b.n	800210a <SPI_Init+0xa>
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002158:	4a18      	ldr	r2, [pc, #96]	@ (80021bc <SPI_Init+0xbc>)
 800215a:	69d3      	ldr	r3, [r2, #28]
 800215c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002160:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 8, OUT50, O_GP_PP); // CS (optionnel)
 8002162:	2300      	movs	r3, #0
 8002164:	2203      	movs	r2, #3
 8002166:	2108      	movs	r1, #8
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff ff4b 	bl	8002004 <Init_GPIO>
        Init_GPIO(PB, 12, OUT50, O_GP_PP); // CS
 800216e:	2300      	movs	r3, #0
 8002170:	2203      	movs	r2, #3
 8002172:	210c      	movs	r1, #12
 8002174:	2002      	movs	r0, #2
 8002176:	f7ff ff45 	bl	8002004 <Init_GPIO>
        Init_GPIO(PB, 13, OUT50, O_AF_PP); // CLK
 800217a:	2302      	movs	r3, #2
 800217c:	2203      	movs	r2, #3
 800217e:	210d      	movs	r1, #13
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff3f 	bl	8002004 <Init_GPIO>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
 8002186:	2302      	movs	r3, #2
 8002188:	2200      	movs	r2, #0
 800218a:	210e      	movs	r1, #14
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff39 	bl	8002004 <Init_GPIO>
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2
 8002192:	2302      	movs	r3, #2
 8002194:	2203      	movs	r2, #3
 8002196:	210f      	movs	r1, #15
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff33 	bl	8002004 <Init_GPIO>
        Write_GPIO(PA, 8, HIGH);
 800219e:	2201      	movs	r2, #1
 80021a0:	2108      	movs	r1, #8
 80021a2:	4610      	mov	r0, r2
 80021a4:	f7ff ff78 	bl	8002098 <Write_GPIO>
        Write_GPIO(PB, 12, HIGH);
 80021a8:	2201      	movs	r2, #1
 80021aa:	210c      	movs	r1, #12
 80021ac:	2002      	movs	r0, #2
 80021ae:	f7ff ff73 	bl	8002098 <Write_GPIO>
        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SPI_Init+0xc4>)
 80021b4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	e7a6      	b.n	800210a <SPI_Init+0xa>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40013000 	.word	0x40013000
 80021c4:	40003800 	.word	0x40003800

080021c8 <SPI1_TX>:

void SPI1_TX(uint8_t *data, int size) {
 80021c8:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 80021ca:	2200      	movs	r2, #0
 80021cc:	e008      	b.n	80021e0 <SPI1_TX+0x18>
        while (!(SPI1->SR & SPI_SR_TXE)) {}
 80021ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <SPI1_TX+0x38>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f013 0f02 	tst.w	r3, #2
 80021d6:	d0fa      	beq.n	80021ce <SPI1_TX+0x6>
        SPI1->DR = data[i];
 80021d8:	5c81      	ldrb	r1, [r0, r2]
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <SPI1_TX+0x38>)
 80021dc:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 80021de:	3201      	adds	r2, #1
 80021e0:	4562      	cmp	r2, ip
 80021e2:	dbf4      	blt.n	80021ce <SPI1_TX+0x6>
    }

    while (!(SPI1->SR & SPI_SR_TXE)) {}
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <SPI1_TX+0x38>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f013 0f02 	tst.w	r3, #2
 80021ec:	d0fa      	beq.n	80021e4 <SPI1_TX+0x1c>
    while (SPI1->SR & SPI_SR_BSY) {}
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SPI1_TX+0x38>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021f6:	d1fa      	bne.n	80021ee <SPI1_TX+0x26>

    uint8_t temp = SPI1->DR;
 80021f8:	4b01      	ldr	r3, [pc, #4]	@ (8002200 <SPI1_TX+0x38>)
 80021fa:	68da      	ldr	r2, [r3, #12]
    temp = SPI1->SR;
 80021fc:	689b      	ldr	r3, [r3, #8]
}
 80021fe:	4770      	bx	lr
 8002200:	40013000 	.word	0x40013000

08002204 <SPI2_TX>:

void SPI2_TX(uint8_t *data, int size) {
 8002204:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 8002206:	2200      	movs	r2, #0
 8002208:	e008      	b.n	800221c <SPI2_TX+0x18>
        while (!(SPI2->SR & SPI_SR_TXE)) {}
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <SPI2_TX+0x38>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f013 0f02 	tst.w	r3, #2
 8002212:	d0fa      	beq.n	800220a <SPI2_TX+0x6>
        SPI2->DR = data[i];
 8002214:	5c81      	ldrb	r1, [r0, r2]
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <SPI2_TX+0x38>)
 8002218:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 800221a:	3201      	adds	r2, #1
 800221c:	4562      	cmp	r2, ip
 800221e:	dbf4      	blt.n	800220a <SPI2_TX+0x6>
    }

    while (!(SPI2->SR & SPI_SR_TXE)) {}
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <SPI2_TX+0x38>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f013 0f02 	tst.w	r3, #2
 8002228:	d0fa      	beq.n	8002220 <SPI2_TX+0x1c>
    while (SPI2->SR & SPI_SR_BSY) {}
 800222a:	4b04      	ldr	r3, [pc, #16]	@ (800223c <SPI2_TX+0x38>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002232:	d1fa      	bne.n	800222a <SPI2_TX+0x26>

    uint8_t temp = SPI2->DR;
 8002234:	4b01      	ldr	r3, [pc, #4]	@ (800223c <SPI2_TX+0x38>)
 8002236:	68da      	ldr	r2, [r3, #12]
    temp = SPI2->SR;
 8002238:	689b      	ldr	r3, [r3, #8]
}
 800223a:	4770      	bx	lr
 800223c:	40003800 	.word	0x40003800

08002240 <SPI1_RX>:

void SPI1_RX(uint8_t *data, int size) {

    while (size) {
 8002240:	e011      	b.n	8002266 <SPI1_RX+0x26>
        while (SPI1->SR & SPI_SR_BSY) {}
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <SPI1_RX+0x2c>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800224a:	d1fa      	bne.n	8002242 <SPI1_RX+0x2>
        SPI1->DR = 0;
 800224c:	4b07      	ldr	r3, [pc, #28]	@ (800226c <SPI1_RX+0x2c>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
        while (!(SPI1->SR & SPI_SR_RXNE)) {}
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <SPI1_RX+0x2c>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f013 0f01 	tst.w	r3, #1
 800225a:	d0fa      	beq.n	8002252 <SPI1_RX+0x12>
        *data++ = SPI1->DR;
 800225c:	4b03      	ldr	r3, [pc, #12]	@ (800226c <SPI1_RX+0x2c>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 8002264:	3901      	subs	r1, #1
    while (size) {
 8002266:	2900      	cmp	r1, #0
 8002268:	d1eb      	bne.n	8002242 <SPI1_RX+0x2>
    }
}
 800226a:	4770      	bx	lr
 800226c:	40013000 	.word	0x40013000

08002270 <SPI2_RX>:

void SPI2_RX(uint8_t *data, int size) {

    while (size) {
 8002270:	e011      	b.n	8002296 <SPI2_RX+0x26>
        while (SPI2->SR & SPI_SR_BSY) {}
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <SPI2_RX+0x2c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800227a:	d1fa      	bne.n	8002272 <SPI2_RX+0x2>
        SPI2->DR = 0;
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <SPI2_RX+0x2c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
        while (!(SPI2->SR & SPI_SR_RXNE)) {}
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <SPI2_RX+0x2c>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f013 0f01 	tst.w	r3, #1
 800228a:	d0fa      	beq.n	8002282 <SPI2_RX+0x12>
        *data++ = SPI2->DR;
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <SPI2_RX+0x2c>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 8002294:	3901      	subs	r1, #1
    while (size) {
 8002296:	2900      	cmp	r1, #0
 8002298:	d1eb      	bne.n	8002272 <SPI2_RX+0x2>
    }
}
 800229a:	4770      	bx	lr
 800229c:	40003800 	.word	0x40003800

080022a0 <USART_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/USART_driver.h"
#include "main.h"


void USART_Init(unsigned short usart)
{
 80022a0:	b508      	push	{r3, lr}
    if(usart == 1) {
 80022a2:	2801      	cmp	r0, #1
 80022a4:	d004      	beq.n	80022b0 <USART_Init+0x10>

        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
    }
    else if(usart == 2) {
 80022a6:	2802      	cmp	r0, #2
 80022a8:	d021      	beq.n	80022ee <USART_Init+0x4e>

        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
    }
    else if(usart == 3) {
 80022aa:	2803      	cmp	r0, #3
 80022ac:	d03e      	beq.n	800232c <USART_Init+0x8c>

        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
    }
}
 80022ae:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80022b0:	4a2e      	ldr	r2, [pc, #184]	@ (800236c <USART_Init+0xcc>)
 80022b2:	6993      	ldr	r3, [r2, #24]
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b8:	6193      	str	r3, [r2, #24]
        Init_GPIO(PB, 6, OUT50, O_AF_PP); // TX
 80022ba:	2302      	movs	r3, #2
 80022bc:	2203      	movs	r2, #3
 80022be:	2106      	movs	r1, #6
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fe9f 	bl	8002004 <Init_GPIO>
        Init_GPIO(PB, 7, IN, I_PP); // RX
 80022c6:	2302      	movs	r3, #2
 80022c8:	2200      	movs	r2, #0
 80022ca:	2107      	movs	r1, #7
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fe99 	bl	8002004 <Init_GPIO>
        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
 80022d2:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <USART_Init+0xd0>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022da:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	f042 0208 	orr.w	r2, r2, #8
 80022e2:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	f042 0204 	orr.w	r2, r2, #4
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	e7df      	b.n	80022ae <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80022ee:	4a1f      	ldr	r2, [pc, #124]	@ (800236c <USART_Init+0xcc>)
 80022f0:	69d3      	ldr	r3, [r2, #28]
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f6:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 2, OUT50, O_AF_PP); // TX
 80022f8:	2302      	movs	r3, #2
 80022fa:	2203      	movs	r2, #3
 80022fc:	4619      	mov	r1, r3
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff fe80 	bl	8002004 <Init_GPIO>
        Init_GPIO(PA, 3, IN, I_PP); // RX
 8002304:	2302      	movs	r3, #2
 8002306:	2200      	movs	r2, #0
 8002308:	2103      	movs	r1, #3
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fe7a 	bl	8002004 <Init_GPIO>
        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <USART_Init+0xd4>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002318:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	f042 0208 	orr.w	r2, r2, #8
 8002320:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	f042 0204 	orr.w	r2, r2, #4
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	e7c0      	b.n	80022ae <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART3EN ;
 800232c:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <USART_Init+0xcc>)
 800232e:	69d3      	ldr	r3, [r2, #28]
 8002330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002334:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 10, OUT50, O_AF_PP); // TX
 8002336:	2302      	movs	r3, #2
 8002338:	2203      	movs	r2, #3
 800233a:	210a      	movs	r1, #10
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fe61 	bl	8002004 <Init_GPIO>
        Init_GPIO(PB, 11, IN, I_PP); // RX
 8002342:	2302      	movs	r3, #2
 8002344:	2200      	movs	r2, #0
 8002346:	210b      	movs	r1, #11
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fe5b 	bl	8002004 <Init_GPIO>
        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <USART_Init+0xd8>)
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002356:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	f042 0208 	orr.w	r2, r2, #8
 800235e:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	f042 0204 	orr.w	r2, r2, #4
 8002366:	60da      	str	r2, [r3, #12]
}
 8002368:	e7a1      	b.n	80022ae <USART_Init+0xe>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40013800 	.word	0x40013800
 8002374:	40004400 	.word	0x40004400
 8002378:	40004800 	.word	0x40004800

0800237c <USART_TX>:

void USART_TX(unsigned short usart, const uint8_t *data, int size) {
 800237c:	b410      	push	{r4}

    if (usart == 1) {
 800237e:	2801      	cmp	r0, #1
 8002380:	d027      	beq.n	80023d2 <USART_TX+0x56>
        for (int i = 0; i < size; i++) {
            while (!(USART1->SR & USART_SR_TXE));
            USART1->DR = data[i];
            while (!(USART1->SR & USART_SR_TC));
        }
    } else if (usart == 2) {
 8002382:	2802      	cmp	r0, #2
 8002384:	d038      	beq.n	80023f8 <USART_TX+0x7c>
        for (int i = 0; i < size; i++) {
            while (!(USART2->SR & USART_SR_TXE));
            USART2->DR = data[i];
            while (!(USART2->SR & USART_SR_TC));
        }
    } else if (usart == 3) {
 8002386:	2803      	cmp	r0, #3
 8002388:	d121      	bne.n	80023ce <USART_TX+0x52>
        for (int i = 0; i < size; i++) {
 800238a:	2000      	movs	r0, #0
 800238c:	4290      	cmp	r0, r2
 800238e:	da1e      	bge.n	80023ce <USART_TX+0x52>
            while (!(USART3->SR & USART_SR_TXE));
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <USART_TX+0x80>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002398:	d0fa      	beq.n	8002390 <USART_TX+0x14>
            USART3->DR = data[i];
 800239a:	5c0c      	ldrb	r4, [r1, r0]
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <USART_TX+0x80>)
 800239e:	605c      	str	r4, [r3, #4]
            while (!(USART3->SR & USART_SR_TC));
 80023a0:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <USART_TX+0x80>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80023a8:	d0fa      	beq.n	80023a0 <USART_TX+0x24>
        for (int i = 0; i < size; i++) {
 80023aa:	3001      	adds	r0, #1
 80023ac:	e7ee      	b.n	800238c <USART_TX+0x10>
            while (!(USART1->SR & USART_SR_TXE));
 80023ae:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <USART_TX+0x84>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023b6:	d0fa      	beq.n	80023ae <USART_TX+0x32>
            USART1->DR = data[i];
 80023b8:	5c0c      	ldrb	r4, [r1, r0]
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <USART_TX+0x84>)
 80023bc:	605c      	str	r4, [r3, #4]
            while (!(USART1->SR & USART_SR_TC));
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <USART_TX+0x84>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80023c6:	d0fa      	beq.n	80023be <USART_TX+0x42>
        for (int i = 0; i < size; i++) {
 80023c8:	3001      	adds	r0, #1
 80023ca:	4290      	cmp	r0, r2
 80023cc:	dbef      	blt.n	80023ae <USART_TX+0x32>
        }
    }
}
 80023ce:	bc10      	pop	{r4}
 80023d0:	4770      	bx	lr
        for (int i = 0; i < size; i++) {
 80023d2:	2000      	movs	r0, #0
 80023d4:	e7f9      	b.n	80023ca <USART_TX+0x4e>
            while (!(USART2->SR & USART_SR_TXE));
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <USART_TX+0x88>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023de:	d0fa      	beq.n	80023d6 <USART_TX+0x5a>
            USART2->DR = data[i];
 80023e0:	5c0c      	ldrb	r4, [r1, r0]
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <USART_TX+0x88>)
 80023e4:	605c      	str	r4, [r3, #4]
            while (!(USART2->SR & USART_SR_TC));
 80023e6:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <USART_TX+0x88>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80023ee:	d0fa      	beq.n	80023e6 <USART_TX+0x6a>
        for (int i = 0; i < size; i++) {
 80023f0:	3001      	adds	r0, #1
 80023f2:	4290      	cmp	r0, r2
 80023f4:	dbef      	blt.n	80023d6 <USART_TX+0x5a>
 80023f6:	e7ea      	b.n	80023ce <USART_TX+0x52>
 80023f8:	2000      	movs	r0, #0
 80023fa:	e7fa      	b.n	80023f2 <USART_TX+0x76>
 80023fc:	40004800 	.word	0x40004800
 8002400:	40013800 	.word	0x40013800
 8002404:	40004400 	.word	0x40004400

08002408 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002408:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800240c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002410:	f013 0f01 	tst.w	r3, #1
 8002414:	d011      	beq.n	800243a <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002416:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800241a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800241e:	f013 0f01 	tst.w	r3, #1
 8002422:	d101      	bne.n	8002428 <ITM_SendChar+0x20>
 8002424:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002426:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002428:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f9      	beq.n	8002426 <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002432:	b2c3      	uxtb	r3, r0
 8002434:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002438:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 800243a:	4770      	bx	lr

0800243c <ROCKET_SetMode>:
	packet.data[index + 3] = (uint8_t)(data & 0xFF);
}

uint8_t ROCKET_SetMode(uint8_t mode) {

	if(mode != MODE_PREFLIGHT && mode != MODE_INFLIGHT && mode != MODE_POSTFLIGHT) {
 800243c:	2802      	cmp	r0, #2
 800243e:	d803      	bhi.n	8002448 <ROCKET_SetMode+0xc>
		return 0;
	}
	packet.header_states.mode = mode;
 8002440:	4b02      	ldr	r3, [pc, #8]	@ (800244c <ROCKET_SetMode+0x10>)
 8002442:	7018      	strb	r0, [r3, #0]
	return 1; // OK
 8002444:	2001      	movs	r0, #1
 8002446:	4770      	bx	lr
		return 0;
 8002448:	2000      	movs	r0, #0
}
 800244a:	4770      	bx	lr
 800244c:	20000254 	.word	0x20000254

08002450 <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	460c      	mov	r4, r1
 8002454:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	2500      	movs	r5, #0
 8002458:	e004      	b.n	8002464 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 800245a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800245e:	f7ff ffd3 	bl	8002408 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	3501      	adds	r5, #1
 8002464:	42b5      	cmp	r5, r6
 8002466:	dbf8      	blt.n	800245a <_write+0xa>
	}
	return len;
}
 8002468:	4630      	mov	r0, r6
 800246a:	bd70      	pop	{r4, r5, r6, pc}

0800246c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246e:	e7fe      	b.n	800246e <Error_Handler+0x2>

08002470 <MX_USART1_UART_Init>:
{
 8002470:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002472:	480a      	ldr	r0, [pc, #40]	@ (800249c <MX_USART1_UART_Init+0x2c>)
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <MX_USART1_UART_Init+0x30>)
 8002476:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002478:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800247c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800247e:	2300      	movs	r3, #0
 8002480:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002482:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002484:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002486:	220c      	movs	r2, #12
 8002488:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800248e:	f002 ffe3 	bl	8005458 <HAL_UART_Init>
 8002492:	b900      	cbnz	r0, 8002496 <MX_USART1_UART_Init+0x26>
}
 8002494:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002496:	f7ff ffe9 	bl	800246c <Error_Handler>
 800249a:	bf00      	nop
 800249c:	20000360 	.word	0x20000360
 80024a0:	40013800 	.word	0x40013800

080024a4 <MX_USART2_UART_Init>:
{
 80024a4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80024a6:	480a      	ldr	r0, [pc, #40]	@ (80024d0 <MX_USART2_UART_Init+0x2c>)
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <MX_USART2_UART_Init+0x30>)
 80024aa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80024ac:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80024b0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024b2:	2300      	movs	r3, #0
 80024b4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024b8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024ba:	220c      	movs	r2, #12
 80024bc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024c2:	f002 ffc9 	bl	8005458 <HAL_UART_Init>
 80024c6:	b900      	cbnz	r0, 80024ca <MX_USART2_UART_Init+0x26>
}
 80024c8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80024ca:	f7ff ffcf 	bl	800246c <Error_Handler>
 80024ce:	bf00      	nop
 80024d0:	20000318 	.word	0x20000318
 80024d4:	40004400 	.word	0x40004400

080024d8 <MX_USART3_UART_Init>:
{
 80024d8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80024da:	480a      	ldr	r0, [pc, #40]	@ (8002504 <MX_USART3_UART_Init+0x2c>)
 80024dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <MX_USART3_UART_Init+0x30>)
 80024de:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 80024e0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80024e4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024e6:	2300      	movs	r3, #0
 80024e8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ea:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024ec:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024ee:	220c      	movs	r2, #12
 80024f0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024f6:	f002 ffaf 	bl	8005458 <HAL_UART_Init>
 80024fa:	b900      	cbnz	r0, 80024fe <MX_USART3_UART_Init+0x26>
}
 80024fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80024fe:	f7ff ffb5 	bl	800246c <Error_Handler>
 8002502:	bf00      	nop
 8002504:	200002d0 	.word	0x200002d0
 8002508:	40004800 	.word	0x40004800

0800250c <MX_TIM3_Init>:
{
 800250c:	b500      	push	{lr}
 800250e:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002510:	2300      	movs	r3, #0
 8002512:	930a      	str	r3, [sp, #40]	@ 0x28
 8002514:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002516:	930c      	str	r3, [sp, #48]	@ 0x30
 8002518:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251a:	9308      	str	r3, [sp, #32]
 800251c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	9303      	str	r3, [sp, #12]
 8002524:	9304      	str	r3, [sp, #16]
 8002526:	9305      	str	r3, [sp, #20]
 8002528:	9306      	str	r3, [sp, #24]
 800252a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 800252c:	481e      	ldr	r0, [pc, #120]	@ (80025a8 <MX_TIM3_Init+0x9c>)
 800252e:	4a1f      	ldr	r2, [pc, #124]	@ (80025ac <MX_TIM3_Init+0xa0>)
 8002530:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 8002532:	227f      	movs	r2, #127	@ 0x7f
 8002534:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002536:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 8002538:	2214      	movs	r2, #20
 800253a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002540:	f002 f950 	bl	80047e4 <HAL_TIM_Base_Init>
 8002544:	bb28      	cbnz	r0, 8002592 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800254a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800254c:	a90a      	add	r1, sp, #40	@ 0x28
 800254e:	4816      	ldr	r0, [pc, #88]	@ (80025a8 <MX_TIM3_Init+0x9c>)
 8002550:	f002 fbb8 	bl	8004cc4 <HAL_TIM_ConfigClockSource>
 8002554:	b9f8      	cbnz	r0, 8002596 <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002556:	4814      	ldr	r0, [pc, #80]	@ (80025a8 <MX_TIM3_Init+0x9c>)
 8002558:	f002 f993 	bl	8004882 <HAL_TIM_PWM_Init>
 800255c:	b9e8      	cbnz	r0, 800259a <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002564:	a908      	add	r1, sp, #32
 8002566:	4810      	ldr	r0, [pc, #64]	@ (80025a8 <MX_TIM3_Init+0x9c>)
 8002568:	f002 ff18 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	b9b8      	cbnz	r0, 800259e <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256e:	2360      	movs	r3, #96	@ 0x60
 8002570:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002576:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002578:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800257a:	220c      	movs	r2, #12
 800257c:	a901      	add	r1, sp, #4
 800257e:	480a      	ldr	r0, [pc, #40]	@ (80025a8 <MX_TIM3_Init+0x9c>)
 8002580:	f002 fade 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
 8002584:	b968      	cbnz	r0, 80025a2 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8002586:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <MX_TIM3_Init+0x9c>)
 8002588:	f000 fa42 	bl	8002a10 <HAL_TIM_MspPostInit>
}
 800258c:	b00f      	add	sp, #60	@ 0x3c
 800258e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002592:	f7ff ff6b 	bl	800246c <Error_Handler>
    Error_Handler();
 8002596:	f7ff ff69 	bl	800246c <Error_Handler>
    Error_Handler();
 800259a:	f7ff ff67 	bl	800246c <Error_Handler>
    Error_Handler();
 800259e:	f7ff ff65 	bl	800246c <Error_Handler>
    Error_Handler();
 80025a2:	f7ff ff63 	bl	800246c <Error_Handler>
 80025a6:	bf00      	nop
 80025a8:	200003a8 	.word	0x200003a8
 80025ac:	40000400 	.word	0x40000400

080025b0 <MX_TIM2_Init>:
{
 80025b0:	b500      	push	{lr}
 80025b2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b4:	2300      	movs	r3, #0
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	9303      	str	r3, [sp, #12]
 80025ba:	9304      	str	r3, [sp, #16]
 80025bc:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 80025c2:	4814      	ldr	r0, [pc, #80]	@ (8002614 <MX_TIM2_Init+0x64>)
 80025c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025c8:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 80025ca:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 80025ce:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80025d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025da:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025dc:	f002 f902 	bl	80047e4 <HAL_TIM_Base_Init>
 80025e0:	b990      	cbnz	r0, 8002608 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025e8:	a902      	add	r1, sp, #8
 80025ea:	480a      	ldr	r0, [pc, #40]	@ (8002614 <MX_TIM2_Init+0x64>)
 80025ec:	f002 fb6a 	bl	8004cc4 <HAL_TIM_ConfigClockSource>
 80025f0:	b960      	cbnz	r0, 800260c <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f8:	4669      	mov	r1, sp
 80025fa:	4806      	ldr	r0, [pc, #24]	@ (8002614 <MX_TIM2_Init+0x64>)
 80025fc:	f002 fece 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	b930      	cbnz	r0, 8002610 <MX_TIM2_Init+0x60>
}
 8002602:	b007      	add	sp, #28
 8002604:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002608:	f7ff ff30 	bl	800246c <Error_Handler>
    Error_Handler();
 800260c:	f7ff ff2e 	bl	800246c <Error_Handler>
    Error_Handler();
 8002610:	f7ff ff2c 	bl	800246c <Error_Handler>
 8002614:	200003f0 	.word	0x200003f0

08002618 <MX_ADC1_Init>:
{
 8002618:	b500      	push	{lr}
 800261a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800261c:	2300      	movs	r3, #0
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8002624:	480f      	ldr	r0, [pc, #60]	@ (8002664 <MX_ADC1_Init+0x4c>)
 8002626:	4a10      	ldr	r2, [pc, #64]	@ (8002668 <MX_ADC1_Init+0x50>)
 8002628:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800262a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800262c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800262e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002630:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002634:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002636:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800263c:	f000 fbca 	bl	8002dd4 <HAL_ADC_Init>
 8002640:	b960      	cbnz	r0, 800265c <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 8002642:	2300      	movs	r3, #0
 8002644:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002646:	2201      	movs	r2, #1
 8002648:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800264a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800264c:	a901      	add	r1, sp, #4
 800264e:	4805      	ldr	r0, [pc, #20]	@ (8002664 <MX_ADC1_Init+0x4c>)
 8002650:	f000 fe84 	bl	800335c <HAL_ADC_ConfigChannel>
 8002654:	b920      	cbnz	r0, 8002660 <MX_ADC1_Init+0x48>
}
 8002656:	b005      	add	sp, #20
 8002658:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800265c:	f7ff ff06 	bl	800246c <Error_Handler>
    Error_Handler();
 8002660:	f7ff ff04 	bl	800246c <Error_Handler>
 8002664:	20000440 	.word	0x20000440
 8002668:	40012400 	.word	0x40012400

0800266c <MX_CRC_Init>:
{
 800266c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800266e:	4804      	ldr	r0, [pc, #16]	@ (8002680 <MX_CRC_Init+0x14>)
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <MX_CRC_Init+0x18>)
 8002672:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002674:	f001 f997 	bl	80039a6 <HAL_CRC_Init>
 8002678:	b900      	cbnz	r0, 800267c <MX_CRC_Init+0x10>
}
 800267a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800267c:	f7ff fef6 	bl	800246c <Error_Handler>
 8002680:	20000438 	.word	0x20000438
 8002684:	40023000 	.word	0x40023000

08002688 <SystemClock_Config>:
{
 8002688:	b500      	push	{lr}
 800268a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268c:	2228      	movs	r2, #40	@ 0x28
 800268e:	2100      	movs	r1, #0
 8002690:	eb0d 0002 	add.w	r0, sp, r2
 8002694:	f005 fb7e 	bl	8007d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002698:	2300      	movs	r3, #0
 800269a:	9305      	str	r3, [sp, #20]
 800269c:	9306      	str	r3, [sp, #24]
 800269e:	9307      	str	r3, [sp, #28]
 80026a0:	9308      	str	r3, [sp, #32]
 80026a2:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	9302      	str	r3, [sp, #8]
 80026a8:	9303      	str	r3, [sp, #12]
 80026aa:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026ac:	2201      	movs	r2, #1
 80026ae:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026b4:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80026b6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80026ba:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026bc:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026be:	2202      	movs	r2, #2
 80026c0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026c2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026c4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80026c8:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ca:	a80a      	add	r0, sp, #40	@ 0x28
 80026cc:	f001 fb0c 	bl	8003ce8 <HAL_RCC_OscConfig>
 80026d0:	b9c8      	cbnz	r0, 8002706 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d2:	230f      	movs	r3, #15
 80026d4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d6:	2102      	movs	r1, #2
 80026d8:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026da:	2300      	movs	r3, #0
 80026dc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026e2:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026e6:	a805      	add	r0, sp, #20
 80026e8:	f001 fd80 	bl	80041ec <HAL_RCC_ClockConfig>
 80026ec:	b968      	cbnz	r0, 800270a <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026ee:	2302      	movs	r3, #2
 80026f0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f8:	a801      	add	r0, sp, #4
 80026fa:	f001 ff07 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80026fe:	b930      	cbnz	r0, 800270e <SystemClock_Config+0x86>
}
 8002700:	b015      	add	sp, #84	@ 0x54
 8002702:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002706:	f7ff feb1 	bl	800246c <Error_Handler>
    Error_Handler();
 800270a:	f7ff feaf 	bl	800246c <Error_Handler>
    Error_Handler();
 800270e:	f7ff fead 	bl	800246c <Error_Handler>
	...

08002714 <ROCKET_InitRoutine>:
void ROCKET_InitRoutine(void) {
 8002714:	b570      	push	{r4, r5, r6, lr}
	HAL_Init();
 8002716:	f000 fad7 	bl	8002cc8 <HAL_Init>
	SystemClock_Config();
 800271a:	f7ff ffb5 	bl	8002688 <SystemClock_Config>
	MX_USART1_UART_Init();
 800271e:	f7ff fea7 	bl	8002470 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002722:	f7ff febf 	bl	80024a4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002726:	f7ff fed7 	bl	80024d8 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 800272a:	f7ff feef 	bl	800250c <MX_TIM3_Init>
	MX_TIM2_Init();
 800272e:	f7ff ff3f 	bl	80025b0 <MX_TIM2_Init>
	MX_ADC1_Init();
 8002732:	f7ff ff71 	bl	8002618 <MX_ADC1_Init>
	MX_CRC_Init();
 8002736:	f7ff ff99 	bl	800266c <MX_CRC_Init>
	MX_FATFS_Init();
 800273a:	f002 ff6b 	bl	8005614 <MX_FATFS_Init>
	printf("|----------Starting----------|\r\n");
 800273e:	484f      	ldr	r0, [pc, #316]	@ (800287c <ROCKET_InitRoutine+0x168>)
 8002740:	f005 fa48 	bl	8007bd4 <puts>
	Buzz(&htim3, TIM_CHANNEL_4, START);
 8002744:	2201      	movs	r2, #1
 8002746:	210c      	movs	r1, #12
 8002748:	484d      	ldr	r0, [pc, #308]	@ (8002880 <ROCKET_InitRoutine+0x16c>)
 800274a:	f7ff f83f 	bl	80017cc <Buzz>
	SPI_Init(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f7ff fcd6 	bl	8002100 <SPI_Init>
	printf("(+) SPI1 succeeded...\r\n");
 8002754:	484b      	ldr	r0, [pc, #300]	@ (8002884 <ROCKET_InitRoutine+0x170>)
 8002756:	f005 fa3d 	bl	8007bd4 <puts>
	SPI_Init(2);
 800275a:	2002      	movs	r0, #2
 800275c:	f7ff fcd0 	bl	8002100 <SPI_Init>
	printf("(+) SPI2 succeeded...\r\n");
 8002760:	4849      	ldr	r0, [pc, #292]	@ (8002888 <ROCKET_InitRoutine+0x174>)
 8002762:	f005 fa37 	bl	8007bd4 <puts>
	USART_Init(1);
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff fd9a 	bl	80022a0 <USART_Init>
	printf("(+) USART1 succeeded...\r\n");
 800276c:	4847      	ldr	r0, [pc, #284]	@ (800288c <ROCKET_InitRoutine+0x178>)
 800276e:	f005 fa31 	bl	8007bd4 <puts>
	USART_Init(2);
 8002772:	2002      	movs	r0, #2
 8002774:	f7ff fd94 	bl	80022a0 <USART_Init>
	printf("(+) USART2 succeeded...\r\n");
 8002778:	4845      	ldr	r0, [pc, #276]	@ (8002890 <ROCKET_InitRoutine+0x17c>)
 800277a:	f005 fa2b 	bl	8007bd4 <puts>
	USART_Init(3);
 800277e:	2003      	movs	r0, #3
 8002780:	f7ff fd8e 	bl	80022a0 <USART_Init>
	printf("(+) USART3 succeeded...\r\n");
 8002784:	4843      	ldr	r0, [pc, #268]	@ (8002894 <ROCKET_InitRoutine+0x180>)
 8002786:	f005 fa25 	bl	8007bd4 <puts>
	printf("|----------Components initialization----------|\r\n");
 800278a:	4843      	ldr	r0, [pc, #268]	@ (8002898 <ROCKET_InitRoutine+0x184>)
 800278c:	f005 fa22 	bl	8007bd4 <puts>
	ROCKET_SetMode(MODE_PREFLIGHT);
 8002790:	2000      	movs	r0, #0
 8002792:	f7ff fe53 	bl	800243c <ROCKET_SetMode>
	printf("(+) Mode flight: %i succeeded...\r\n", packet.header_states.mode);
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <ROCKET_InitRoutine+0x188>)
 8002798:	7819      	ldrb	r1, [r3, #0]
 800279a:	4841      	ldr	r0, [pc, #260]	@ (80028a0 <ROCKET_InitRoutine+0x18c>)
 800279c:	f005 f9b2 	bl	8007b04 <iprintf>
	WS2812_Init();
 80027a0:	f7ff fbe4 	bl	8001f6c <WS2812_Init>
	printf("(+) WS2812 succeeded...\r\n");
 80027a4:	483f      	ldr	r0, [pc, #252]	@ (80028a4 <ROCKET_InitRoutine+0x190>)
 80027a6:	f005 fa15 	bl	8007bd4 <puts>
	if (CD74HC4051_Init(&hadc1) != 1) {
 80027aa:	483f      	ldr	r0, [pc, #252]	@ (80028a8 <ROCKET_InitRoutine+0x194>)
 80027ac:	f7ff f884 	bl	80018b8 <CD74HC4051_Init>
 80027b0:	2801      	cmp	r0, #1
 80027b2:	d03d      	beq.n	8002830 <ROCKET_InitRoutine+0x11c>
	  printf("(-) CD74HC4051 failed...\r\n");
 80027b4:	483d      	ldr	r0, [pc, #244]	@ (80028ac <ROCKET_InitRoutine+0x198>)
 80027b6:	f005 fa0d 	bl	8007bd4 <puts>
	packet.header_states.barometer = BMP280_Init(&bmp_data, BMP_SPI_PORT) == 1 ? 0x01 : 0x00;
 80027ba:	2102      	movs	r1, #2
 80027bc:	483c      	ldr	r0, [pc, #240]	@ (80028b0 <ROCKET_InitRoutine+0x19c>)
 80027be:	f7fe ffdf 	bl	8001780 <BMP280_Init>
 80027c2:	2801      	cmp	r0, #1
 80027c4:	bf14      	ite	ne
 80027c6:	2000      	movne	r0, #0
 80027c8:	2001      	moveq	r0, #1
 80027ca:	4b34      	ldr	r3, [pc, #208]	@ (800289c <ROCKET_InitRoutine+0x188>)
 80027cc:	7118      	strb	r0, [r3, #4]
	printf(packet.header_states.barometer ? "(+) BMP280 succeeded...\r\n" : "(-) BMP280 failed...\r\n");
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d04b      	beq.n	800286a <ROCKET_InitRoutine+0x156>
 80027d2:	4838      	ldr	r0, [pc, #224]	@ (80028b4 <ROCKET_InitRoutine+0x1a0>)
 80027d4:	f005 f996 	bl	8007b04 <iprintf>
	packet.header_states.accelerometer = ICM20602_Init(&icm_data) == 0 ? 0x01 : 0x00;
 80027d8:	4837      	ldr	r0, [pc, #220]	@ (80028b8 <ROCKET_InitRoutine+0x1a4>)
 80027da:	f7ff f9ed 	bl	8001bb8 <ICM20602_Init>
 80027de:	fab0 f080 	clz	r0, r0
 80027e2:	0940      	lsrs	r0, r0, #5
 80027e4:	4b2d      	ldr	r3, [pc, #180]	@ (800289c <ROCKET_InitRoutine+0x188>)
 80027e6:	70d8      	strb	r0, [r3, #3]
	printf(packet.header_states.accelerometer ? "(+) ICM20602 succeeded...\r\n" : "(-) ICM20602 failed...\r\n");
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d040      	beq.n	800286e <ROCKET_InitRoutine+0x15a>
 80027ec:	4833      	ldr	r0, [pc, #204]	@ (80028bc <ROCKET_InitRoutine+0x1a8>)
 80027ee:	f005 f989 	bl	8007b04 <iprintf>
	packet.header_states.gps = L76LM33_Init(GPS_USART_PORT) == 1 ? 0x01 : 0x00;
 80027f2:	2002      	movs	r0, #2
 80027f4:	f7ff fa50 	bl	8001c98 <L76LM33_Init>
 80027f8:	2801      	cmp	r0, #1
 80027fa:	bf14      	ite	ne
 80027fc:	2000      	movne	r0, #0
 80027fe:	2001      	moveq	r0, #1
 8002800:	4b26      	ldr	r3, [pc, #152]	@ (800289c <ROCKET_InitRoutine+0x188>)
 8002802:	7158      	strb	r0, [r3, #5]
	printf(packet.header_states.gps ? "(+) L76LM33 succeeded...\r\n" : "(-) L76LM33 failed...\r\n");
 8002804:	2800      	cmp	r0, #0
 8002806:	d034      	beq.n	8002872 <ROCKET_InitRoutine+0x15e>
 8002808:	482d      	ldr	r0, [pc, #180]	@ (80028c0 <ROCKET_InitRoutine+0x1ac>)
 800280a:	f005 f97b 	bl	8007b04 <iprintf>
	packet.header_states.sd = MEM2067_Mount() == 1 ? 0x01 : 0x00;
 800280e:	f7ff fadf 	bl	8001dd0 <MEM2067_Mount>
 8002812:	2801      	cmp	r0, #1
 8002814:	bf14      	ite	ne
 8002816:	2000      	movne	r0, #0
 8002818:	2001      	moveq	r0, #1
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <ROCKET_InitRoutine+0x188>)
 800281c:	7198      	strb	r0, [r3, #6]
	printf(packet.header_states.sd ? "(+) SD card detected in MEM2067...\r\n" : "(-) No SD card detected in MEM2067...\r\n");
 800281e:	b350      	cbz	r0, 8002876 <ROCKET_InitRoutine+0x162>
 8002820:	4828      	ldr	r0, [pc, #160]	@ (80028c4 <ROCKET_InitRoutine+0x1b0>)
 8002822:	f005 f96f 	bl	8007b04 <iprintf>
	HM10BLE_Init(&ble_data, BT_USART_PORT);
 8002826:	2103      	movs	r1, #3
 8002828:	4827      	ldr	r0, [pc, #156]	@ (80028c8 <ROCKET_InitRoutine+0x1b4>)
 800282a:	f7ff f8e7 	bl	80019fc <HM10BLE_Init>
}
 800282e:	bd70      	pop	{r4, r5, r6, pc}
		packet.header_states.pyro0 = CD74HC4051_AnRead(&hadc1, CHANNEL_0, PYRO_CHANNEL_0, VREFPYRO);
 8002830:	4e26      	ldr	r6, [pc, #152]	@ (80028cc <ROCKET_InitRoutine+0x1b8>)
 8002832:	4d1d      	ldr	r5, [pc, #116]	@ (80028a8 <ROCKET_InitRoutine+0x194>)
 8002834:	4633      	mov	r3, r6
 8002836:	2201      	movs	r2, #1
 8002838:	2100      	movs	r1, #0
 800283a:	4628      	mov	r0, r5
 800283c:	f7ff f86e 	bl	800191c <CD74HC4051_AnRead>
 8002840:	4c16      	ldr	r4, [pc, #88]	@ (800289c <ROCKET_InitRoutine+0x188>)
 8002842:	7060      	strb	r0, [r4, #1]
		packet.header_states.pyro1 = CD74HC4051_AnRead(&hadc1, CHANNEL_0, PYRO_CHANNEL_1, VREFPYRO);
 8002844:	4633      	mov	r3, r6
 8002846:	2202      	movs	r2, #2
 8002848:	2100      	movs	r1, #0
 800284a:	4628      	mov	r0, r5
 800284c:	f7ff f866 	bl	800191c <CD74HC4051_AnRead>
 8002850:	70a0      	strb	r0, [r4, #2]
		printf(" -> Pyro0 state: %i\r\n", packet.header_states.pyro0);
 8002852:	7861      	ldrb	r1, [r4, #1]
 8002854:	481e      	ldr	r0, [pc, #120]	@ (80028d0 <ROCKET_InitRoutine+0x1bc>)
 8002856:	f005 f955 	bl	8007b04 <iprintf>
		printf(" -> Pyro1 state: %i\r\n", packet.header_states.pyro1);
 800285a:	78a1      	ldrb	r1, [r4, #2]
 800285c:	481d      	ldr	r0, [pc, #116]	@ (80028d4 <ROCKET_InitRoutine+0x1c0>)
 800285e:	f005 f951 	bl	8007b04 <iprintf>
		printf("(+) CD74HC4051 succeeded...\r\n");
 8002862:	481d      	ldr	r0, [pc, #116]	@ (80028d8 <ROCKET_InitRoutine+0x1c4>)
 8002864:	f005 f9b6 	bl	8007bd4 <puts>
 8002868:	e7a7      	b.n	80027ba <ROCKET_InitRoutine+0xa6>
	printf(packet.header_states.barometer ? "(+) BMP280 succeeded...\r\n" : "(-) BMP280 failed...\r\n");
 800286a:	481c      	ldr	r0, [pc, #112]	@ (80028dc <ROCKET_InitRoutine+0x1c8>)
 800286c:	e7b2      	b.n	80027d4 <ROCKET_InitRoutine+0xc0>
	printf(packet.header_states.accelerometer ? "(+) ICM20602 succeeded...\r\n" : "(-) ICM20602 failed...\r\n");
 800286e:	481c      	ldr	r0, [pc, #112]	@ (80028e0 <ROCKET_InitRoutine+0x1cc>)
 8002870:	e7bd      	b.n	80027ee <ROCKET_InitRoutine+0xda>
	printf(packet.header_states.gps ? "(+) L76LM33 succeeded...\r\n" : "(-) L76LM33 failed...\r\n");
 8002872:	481c      	ldr	r0, [pc, #112]	@ (80028e4 <ROCKET_InitRoutine+0x1d0>)
 8002874:	e7c9      	b.n	800280a <ROCKET_InitRoutine+0xf6>
	printf(packet.header_states.sd ? "(+) SD card detected in MEM2067...\r\n" : "(-) No SD card detected in MEM2067...\r\n");
 8002876:	481c      	ldr	r0, [pc, #112]	@ (80028e8 <ROCKET_InitRoutine+0x1d4>)
 8002878:	e7d3      	b.n	8002822 <ROCKET_InitRoutine+0x10e>
 800287a:	bf00      	nop
 800287c:	08009ed8 	.word	0x08009ed8
 8002880:	200003a8 	.word	0x200003a8
 8002884:	08009ef8 	.word	0x08009ef8
 8002888:	08009f10 	.word	0x08009f10
 800288c:	08009f28 	.word	0x08009f28
 8002890:	08009f44 	.word	0x08009f44
 8002894:	08009f60 	.word	0x08009f60
 8002898:	08009f7c 	.word	0x08009f7c
 800289c:	20000254 	.word	0x20000254
 80028a0:	08009fb0 	.word	0x08009fb0
 80028a4:	08009fd4 	.word	0x08009fd4
 80028a8:	20000440 	.word	0x20000440
 80028ac:	08009ff0 	.word	0x08009ff0
 80028b0:	200002a4 	.word	0x200002a4
 80028b4:	08009de8 	.word	0x08009de8
 80028b8:	2000026c 	.word	0x2000026c
 80028bc:	08009e1c 	.word	0x08009e1c
 80028c0:	08009e54 	.word	0x08009e54
 80028c4:	08009e88 	.word	0x08009e88
 80028c8:	20000264 	.word	0x20000264
 80028cc:	40533333 	.word	0x40533333
 80028d0:	0800a00c 	.word	0x0800a00c
 80028d4:	0800a024 	.word	0x0800a024
 80028d8:	0800a03c 	.word	0x0800a03c
 80028dc:	08009e04 	.word	0x08009e04
 80028e0:	08009e38 	.word	0x08009e38
 80028e4:	08009e70 	.word	0x08009e70
 80028e8:	08009eb0 	.word	0x08009eb0

080028ec <main>:
{
 80028ec:	b508      	push	{r3, lr}
	ROCKET_InitRoutine();
 80028ee:	f7ff ff11 	bl	8002714 <ROCKET_InitRoutine>
	while (1)
 80028f2:	e7fe      	b.n	80028f2 <main+0x6>

080028f4 <HAL_MspInit>:
 80028f4:	b082      	sub	sp, #8
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_MspInit+0x3c>)
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	619a      	str	r2, [r3, #24]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	f002 0201 	and.w	r2, r2, #1
 8002906:	9200      	str	r2, [sp, #0]
 8002908:	9a00      	ldr	r2, [sp, #0]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	9b01      	ldr	r3, [sp, #4]
 800291c:	4a05      	ldr	r2, [pc, #20]	@ (8002934 <HAL_MspInit+0x40>)
 800291e:	6853      	ldr	r3, [r2, #4]
 8002920:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002924:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002928:	6053      	str	r3, [r2, #4]
 800292a:	b002      	add	sp, #8
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000

08002938 <HAL_ADC_MspInit>:
 8002938:	b500      	push	{lr}
 800293a:	b087      	sub	sp, #28
 800293c:	2300      	movs	r3, #0
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	9303      	str	r3, [sp, #12]
 8002942:	9304      	str	r3, [sp, #16]
 8002944:	9305      	str	r3, [sp, #20]
 8002946:	6802      	ldr	r2, [r0, #0]
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_ADC_MspInit+0x58>)
 800294a:	429a      	cmp	r2, r3
 800294c:	d002      	beq.n	8002954 <HAL_ADC_MspInit+0x1c>
 800294e:	b007      	add	sp, #28
 8002950:	f85d fb04 	ldr.w	pc, [sp], #4
 8002954:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	619a      	str	r2, [r3, #24]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002966:	9200      	str	r2, [sp, #0]
 8002968:	9a00      	ldr	r2, [sp, #0]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	f042 0204 	orr.w	r2, r2, #4
 8002970:	619a      	str	r2, [r3, #24]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	9b01      	ldr	r3, [sp, #4]
 800297c:	2301      	movs	r3, #1
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	2303      	movs	r3, #3
 8002982:	9303      	str	r3, [sp, #12]
 8002984:	a902      	add	r1, sp, #8
 8002986:	4803      	ldr	r0, [pc, #12]	@ (8002994 <HAL_ADC_MspInit+0x5c>)
 8002988:	f001 f82a 	bl	80039e0 <HAL_GPIO_Init>
 800298c:	e7df      	b.n	800294e <HAL_ADC_MspInit+0x16>
 800298e:	bf00      	nop
 8002990:	40012400 	.word	0x40012400
 8002994:	40010800 	.word	0x40010800

08002998 <HAL_CRC_MspInit>:
 8002998:	6802      	ldr	r2, [r0, #0]
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <HAL_CRC_MspInit+0x28>)
 800299c:	429a      	cmp	r2, r3
 800299e:	d000      	beq.n	80029a2 <HAL_CRC_MspInit+0xa>
 80029a0:	4770      	bx	lr
 80029a2:	b082      	sub	sp, #8
 80029a4:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	9b01      	ldr	r3, [sp, #4]
 80029ba:	b002      	add	sp, #8
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40023000 	.word	0x40023000

080029c4 <HAL_TIM_Base_MspInit>:
 80029c4:	b082      	sub	sp, #8
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029cc:	d004      	beq.n	80029d8 <HAL_TIM_Base_MspInit+0x14>
 80029ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002a08 <HAL_TIM_Base_MspInit+0x44>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00d      	beq.n	80029f0 <HAL_TIM_Base_MspInit+0x2c>
 80029d4:	b002      	add	sp, #8
 80029d6:	4770      	bx	lr
 80029d8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	61da      	str	r2, [r3, #28]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	9b00      	ldr	r3, [sp, #0]
 80029ee:	e7f1      	b.n	80029d4 <HAL_TIM_Base_MspInit+0x10>
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_TIM_Base_MspInit+0x48>)
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	f042 0202 	orr.w	r2, r2, #2
 80029f8:	61da      	str	r2, [r3, #28]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	9b01      	ldr	r3, [sp, #4]
 8002a04:	e7e6      	b.n	80029d4 <HAL_TIM_Base_MspInit+0x10>
 8002a06:	bf00      	nop
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_TIM_MspPostInit>:
 8002a10:	b500      	push	{lr}
 8002a12:	b087      	sub	sp, #28
 8002a14:	2300      	movs	r3, #0
 8002a16:	9302      	str	r3, [sp, #8]
 8002a18:	9303      	str	r3, [sp, #12]
 8002a1a:	9304      	str	r3, [sp, #16]
 8002a1c:	9305      	str	r3, [sp, #20]
 8002a1e:	6802      	ldr	r2, [r0, #0]
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <HAL_TIM_MspPostInit+0x44>)
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d002      	beq.n	8002a2c <HAL_TIM_MspPostInit+0x1c>
 8002a26:	b007      	add	sp, #28
 8002a28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a2c:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	619a      	str	r2, [r3, #24]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9b01      	ldr	r3, [sp, #4]
 8002a42:	2302      	movs	r3, #2
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	9303      	str	r3, [sp, #12]
 8002a48:	9305      	str	r3, [sp, #20]
 8002a4a:	a902      	add	r1, sp, #8
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <HAL_TIM_MspPostInit+0x48>)
 8002a4e:	f000 ffc7 	bl	80039e0 <HAL_GPIO_Init>
 8002a52:	e7e8      	b.n	8002a26 <HAL_TIM_MspPostInit+0x16>
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40010c00 	.word	0x40010c00

08002a5c <HAL_UART_MspInit>:
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	2300      	movs	r3, #0
 8002a62:	9306      	str	r3, [sp, #24]
 8002a64:	9307      	str	r3, [sp, #28]
 8002a66:	9308      	str	r3, [sp, #32]
 8002a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a6a:	6803      	ldr	r3, [r0, #0]
 8002a6c:	4a45      	ldr	r2, [pc, #276]	@ (8002b84 <HAL_UART_MspInit+0x128>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_UART_MspInit+0x26>
 8002a72:	4a45      	ldr	r2, [pc, #276]	@ (8002b88 <HAL_UART_MspInit+0x12c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d033      	beq.n	8002ae0 <HAL_UART_MspInit+0x84>
 8002a78:	4a44      	ldr	r2, [pc, #272]	@ (8002b8c <HAL_UART_MspInit+0x130>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d058      	beq.n	8002b30 <HAL_UART_MspInit+0xd4>
 8002a7e:	b00a      	add	sp, #40	@ 0x28
 8002a80:	bd10      	pop	{r4, pc}
 8002a82:	4b43      	ldr	r3, [pc, #268]	@ (8002b90 <HAL_UART_MspInit+0x134>)
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a8a:	619a      	str	r2, [r3, #24]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	9a00      	ldr	r2, [sp, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	f042 0208 	orr.w	r2, r2, #8
 8002a9c:	619a      	str	r2, [r3, #24]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	9b01      	ldr	r3, [sp, #4]
 8002aa8:	2340      	movs	r3, #64	@ 0x40
 8002aaa:	9306      	str	r3, [sp, #24]
 8002aac:	2302      	movs	r3, #2
 8002aae:	9307      	str	r3, [sp, #28]
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ab4:	4c37      	ldr	r4, [pc, #220]	@ (8002b94 <HAL_UART_MspInit+0x138>)
 8002ab6:	a906      	add	r1, sp, #24
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f000 ff91 	bl	80039e0 <HAL_GPIO_Init>
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	9306      	str	r3, [sp, #24]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9307      	str	r3, [sp, #28]
 8002ac6:	9308      	str	r3, [sp, #32]
 8002ac8:	a906      	add	r1, sp, #24
 8002aca:	4620      	mov	r0, r4
 8002acc:	f000 ff88 	bl	80039e0 <HAL_GPIO_Init>
 8002ad0:	4a31      	ldr	r2, [pc, #196]	@ (8002b98 <HAL_UART_MspInit+0x13c>)
 8002ad2:	6853      	ldr	r3, [r2, #4]
 8002ad4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6053      	str	r3, [r2, #4]
 8002ade:	e7ce      	b.n	8002a7e <HAL_UART_MspInit+0x22>
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b90 <HAL_UART_MspInit+0x134>)
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002ae8:	61da      	str	r2, [r3, #28]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	9a02      	ldr	r2, [sp, #8]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	f042 0204 	orr.w	r2, r2, #4
 8002afa:	619a      	str	r2, [r3, #24]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	9303      	str	r3, [sp, #12]
 8002b04:	9b03      	ldr	r3, [sp, #12]
 8002b06:	2304      	movs	r3, #4
 8002b08:	9306      	str	r3, [sp, #24]
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	9307      	str	r3, [sp, #28]
 8002b0e:	2303      	movs	r3, #3
 8002b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b12:	4c22      	ldr	r4, [pc, #136]	@ (8002b9c <HAL_UART_MspInit+0x140>)
 8002b14:	a906      	add	r1, sp, #24
 8002b16:	4620      	mov	r0, r4
 8002b18:	f000 ff62 	bl	80039e0 <HAL_GPIO_Init>
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	9306      	str	r3, [sp, #24]
 8002b20:	2300      	movs	r3, #0
 8002b22:	9307      	str	r3, [sp, #28]
 8002b24:	9308      	str	r3, [sp, #32]
 8002b26:	a906      	add	r1, sp, #24
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 ff59 	bl	80039e0 <HAL_GPIO_Init>
 8002b2e:	e7a6      	b.n	8002a7e <HAL_UART_MspInit+0x22>
 8002b30:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <HAL_UART_MspInit+0x134>)
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002b38:	61da      	str	r2, [r3, #28]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002b40:	9204      	str	r2, [sp, #16]
 8002b42:	9a04      	ldr	r2, [sp, #16]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	619a      	str	r2, [r3, #24]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	9305      	str	r3, [sp, #20]
 8002b54:	9b05      	ldr	r3, [sp, #20]
 8002b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b5a:	9306      	str	r3, [sp, #24]
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	9307      	str	r3, [sp, #28]
 8002b60:	2303      	movs	r3, #3
 8002b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b64:	4c0b      	ldr	r4, [pc, #44]	@ (8002b94 <HAL_UART_MspInit+0x138>)
 8002b66:	a906      	add	r1, sp, #24
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f000 ff39 	bl	80039e0 <HAL_GPIO_Init>
 8002b6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b72:	9306      	str	r3, [sp, #24]
 8002b74:	2300      	movs	r3, #0
 8002b76:	9307      	str	r3, [sp, #28]
 8002b78:	9308      	str	r3, [sp, #32]
 8002b7a:	a906      	add	r1, sp, #24
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f000 ff2f 	bl	80039e0 <HAL_GPIO_Init>
 8002b82:	e77c      	b.n	8002a7e <HAL_UART_MspInit+0x22>
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40004800 	.word	0x40004800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010c00 	.word	0x40010c00
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010800 	.word	0x40010800

08002ba0 <NMI_Handler>:
 8002ba0:	e7fe      	b.n	8002ba0 <NMI_Handler>

08002ba2 <HardFault_Handler>:
 8002ba2:	e7fe      	b.n	8002ba2 <HardFault_Handler>

08002ba4 <MemManage_Handler>:
 8002ba4:	e7fe      	b.n	8002ba4 <MemManage_Handler>

08002ba6 <BusFault_Handler>:
 8002ba6:	e7fe      	b.n	8002ba6 <BusFault_Handler>

08002ba8 <UsageFault_Handler>:
 8002ba8:	e7fe      	b.n	8002ba8 <UsageFault_Handler>

08002baa <SVC_Handler>:
 8002baa:	4770      	bx	lr

08002bac <DebugMon_Handler>:
 8002bac:	4770      	bx	lr

08002bae <PendSV_Handler>:
 8002bae:	4770      	bx	lr

08002bb0 <SysTick_Handler>:
 8002bb0:	b508      	push	{r3, lr}
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <SysTick_Handler+0x20>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b113      	cbz	r3, 8002bbe <SysTick_Handler+0xe>
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	4a05      	ldr	r2, [pc, #20]	@ (8002bd0 <SysTick_Handler+0x20>)
 8002bbc:	8013      	strh	r3, [r2, #0]
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <SysTick_Handler+0x24>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b113      	cbz	r3, 8002bca <SysTick_Handler+0x1a>
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	4a03      	ldr	r2, [pc, #12]	@ (8002bd4 <SysTick_Handler+0x24>)
 8002bc8:	8013      	strh	r3, [r2, #0]
 8002bca:	f000 f8c3 	bl	8002d54 <HAL_IncTick>
 8002bce:	bd08      	pop	{r3, pc}
 8002bd0:	20000480 	.word	0x20000480
 8002bd4:	20000482 	.word	0x20000482

08002bd8 <_getpid>:
 8002bd8:	2001      	movs	r0, #1
 8002bda:	4770      	bx	lr

08002bdc <_kill>:
 8002bdc:	b508      	push	{r3, lr}
 8002bde:	f005 f93b 	bl	8007e58 <__errno>
 8002be2:	2316      	movs	r3, #22
 8002be4:	6003      	str	r3, [r0, #0]
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	bd08      	pop	{r3, pc}

08002bec <_exit>:
 8002bec:	b508      	push	{r3, lr}
 8002bee:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf2:	f7ff fff3 	bl	8002bdc <_kill>
 8002bf6:	e7fe      	b.n	8002bf6 <_exit+0xa>

08002bf8 <_read>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	4616      	mov	r6, r2
 8002bfe:	2500      	movs	r5, #0
 8002c00:	e006      	b.n	8002c10 <_read+0x18>
 8002c02:	f3af 8000 	nop.w
 8002c06:	4621      	mov	r1, r4
 8002c08:	f801 0b01 	strb.w	r0, [r1], #1
 8002c0c:	3501      	adds	r5, #1
 8002c0e:	460c      	mov	r4, r1
 8002c10:	42b5      	cmp	r5, r6
 8002c12:	dbf6      	blt.n	8002c02 <_read+0xa>
 8002c14:	4630      	mov	r0, r6
 8002c16:	bd70      	pop	{r4, r5, r6, pc}

08002c18 <_close>:
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	4770      	bx	lr

08002c1e <_fstat>:
 8002c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	2000      	movs	r0, #0
 8002c26:	4770      	bx	lr

08002c28 <_isatty>:
 8002c28:	2001      	movs	r0, #1
 8002c2a:	4770      	bx	lr

08002c2c <_lseek>:
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	4770      	bx	lr

08002c30 <_sbrk>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4603      	mov	r3, r0
 8002c34:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <_sbrk+0x38>)
 8002c36:	490d      	ldr	r1, [pc, #52]	@ (8002c6c <_sbrk+0x3c>)
 8002c38:	480d      	ldr	r0, [pc, #52]	@ (8002c70 <_sbrk+0x40>)
 8002c3a:	6800      	ldr	r0, [r0, #0]
 8002c3c:	b140      	cbz	r0, 8002c50 <_sbrk+0x20>
 8002c3e:	480c      	ldr	r0, [pc, #48]	@ (8002c70 <_sbrk+0x40>)
 8002c40:	6800      	ldr	r0, [r0, #0]
 8002c42:	4403      	add	r3, r0
 8002c44:	1a52      	subs	r2, r2, r1
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d806      	bhi.n	8002c58 <_sbrk+0x28>
 8002c4a:	4a09      	ldr	r2, [pc, #36]	@ (8002c70 <_sbrk+0x40>)
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	bd10      	pop	{r4, pc}
 8002c50:	4807      	ldr	r0, [pc, #28]	@ (8002c70 <_sbrk+0x40>)
 8002c52:	4c08      	ldr	r4, [pc, #32]	@ (8002c74 <_sbrk+0x44>)
 8002c54:	6004      	str	r4, [r0, #0]
 8002c56:	e7f2      	b.n	8002c3e <_sbrk+0xe>
 8002c58:	f005 f8fe 	bl	8007e58 <__errno>
 8002c5c:	230c      	movs	r3, #12
 8002c5e:	6003      	str	r3, [r0, #0]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	e7f3      	b.n	8002c4e <_sbrk+0x1e>
 8002c66:	bf00      	nop
 8002c68:	20005000 	.word	0x20005000
 8002c6c:	00000400 	.word	0x00000400
 8002c70:	20000470 	.word	0x20000470
 8002c74:	20000600 	.word	0x20000600

08002c78 <SystemInit>:
 8002c78:	4770      	bx	lr
	...

08002c7c <Reset_Handler>:
 8002c7c:	f7ff fffc 	bl	8002c78 <SystemInit>
 8002c80:	480b      	ldr	r0, [pc, #44]	@ (8002cb0 <LoopFillZerobss+0xe>)
 8002c82:	490c      	ldr	r1, [pc, #48]	@ (8002cb4 <LoopFillZerobss+0x12>)
 8002c84:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb8 <LoopFillZerobss+0x16>)
 8002c86:	2300      	movs	r3, #0
 8002c88:	e002      	b.n	8002c90 <LoopCopyDataInit>

08002c8a <CopyDataInit>:
 8002c8a:	58d4      	ldr	r4, [r2, r3]
 8002c8c:	50c4      	str	r4, [r0, r3]
 8002c8e:	3304      	adds	r3, #4

08002c90 <LoopCopyDataInit>:
 8002c90:	18c4      	adds	r4, r0, r3
 8002c92:	428c      	cmp	r4, r1
 8002c94:	d3f9      	bcc.n	8002c8a <CopyDataInit>
 8002c96:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <LoopFillZerobss+0x1a>)
 8002c98:	4c09      	ldr	r4, [pc, #36]	@ (8002cc0 <LoopFillZerobss+0x1e>)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e001      	b.n	8002ca2 <LoopFillZerobss>

08002c9e <FillZerobss>:
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	3204      	adds	r2, #4

08002ca2 <LoopFillZerobss>:
 8002ca2:	42a2      	cmp	r2, r4
 8002ca4:	d3fb      	bcc.n	8002c9e <FillZerobss>
 8002ca6:	f005 f8dd 	bl	8007e64 <__libc_init_array>
 8002caa:	f7ff fe1f 	bl	80028ec <main>
 8002cae:	4770      	bx	lr
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	200001ec 	.word	0x200001ec
 8002cb8:	0800a41c 	.word	0x0800a41c
 8002cbc:	200001ec 	.word	0x200001ec
 8002cc0:	20000600 	.word	0x20000600

08002cc4 <ADC1_2_IRQHandler>:
 8002cc4:	e7fe      	b.n	8002cc4 <ADC1_2_IRQHandler>
	...

08002cc8 <HAL_Init>:
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <HAL_Init+0x28>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	@ (8002cf0 <HAL_Init+0x28>)
 8002cd2:	f043 0310 	orr.w	r3, r3, #16
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 fe31 	bl	8003940 <HAL_NVIC_SetPriorityGrouping>
 8002cde:	200f      	movs	r0, #15
 8002ce0:	f000 f808 	bl	8002cf4 <HAL_InitTick>
 8002ce4:	f7ff fe06 	bl	80028f4 <HAL_MspInit>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000

08002cf4 <HAL_InitTick>:
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <HAL_InitTick+0x54>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <HAL_InitTick+0x58>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fe3b 	bl	800398e <HAL_SYSTICK_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_InitTick+0x2e>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00e      	b.n	8002d40 <HAL_InitTick+0x4c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	d80a      	bhi.n	8002d3e <HAL_InitTick+0x4a>
 8002d28:	2200      	movs	r2, #0
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f000 fe11 	bl	8003956 <HAL_NVIC_SetPriority>
 8002d34:	4a06      	ldr	r2, [pc, #24]	@ (8002d50 <HAL_InitTick+0x5c>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_InitTick+0x4c>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000008 	.word	0x20000008
 8002d50:	20000004 	.word	0x20000004

08002d54 <HAL_IncTick>:
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <HAL_IncTick+0x1c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_IncTick+0x20>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	4a03      	ldr	r2, [pc, #12]	@ (8002d74 <HAL_IncTick+0x20>)
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	20000008 	.word	0x20000008
 8002d74:	20000474 	.word	0x20000474

08002d78 <HAL_GetTick>:
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4b02      	ldr	r3, [pc, #8]	@ (8002d88 <HAL_GetTick+0x10>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	20000474 	.word	0x20000474

08002d8c <HAL_Delay>:
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d005      	beq.n	8002db2 <HAL_Delay+0x26>
 8002da6:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <HAL_Delay+0x44>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	bf00      	nop
 8002db4:	f7ff ffe0 	bl	8002d78 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d8f7      	bhi.n	8002db4 <HAL_Delay+0x28>
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000008 	.word	0x20000008

08002dd4 <HAL_ADC_Init>:
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_Init+0x22>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0be      	b.n	8002f74 <HAL_ADC_Init+0x1a0>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_ADC_Init+0x44>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fd90 	bl	8002938 <HAL_ADC_MspInit>
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fbf1 	bl	8003600 <ADC_ConversionStop_Disable>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 8099 	bne.w	8002f62 <HAL_ADC_Init+0x18e>
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 8095 	bne.w	8002f62 <HAL_ADC_Init+0x18e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e40:	f023 0302 	bic.w	r3, r3, #2
 8002e44:	f043 0202 	orr.w	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7b1b      	ldrb	r3, [r3, #12]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e6c:	d003      	beq.n	8002e76 <HAL_ADC_Init+0xa2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_ADC_Init+0xa8>
 8002e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e7a:	e000      	b.n	8002e7e <HAL_ADC_Init+0xaa>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7d1b      	ldrb	r3, [r3, #20]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d119      	bne.n	8002ec0 <HAL_ADC_Init+0xec>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7b1b      	ldrb	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_ADC_Init+0xd4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	035a      	lsls	r2, r3, #13
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_ADC_Init+0xec>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	4b28      	ldr	r3, [pc, #160]	@ (8002f7c <HAL_ADC_Init+0x1a8>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef0:	d003      	beq.n	8002efa <HAL_ADC_Init+0x126>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d104      	bne.n	8002f04 <HAL_ADC_Init+0x130>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	051b      	lsls	r3, r3, #20
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <HAL_ADC_Init+0x1ac>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d10b      	bne.n	8002f40 <HAL_ADC_Init+0x16c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f3e:	e018      	b.n	8002f72 <HAL_ADC_Init+0x19e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	f023 0312 	bic.w	r3, r3, #18
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	75fb      	strb	r3, [r7, #23]
 8002f60:	e007      	b.n	8002f72 <HAL_ADC_Init+0x19e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	f043 0210 	orr.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	ffe1f7fd 	.word	0xffe1f7fd
 8002f80:	ff1f0efe 	.word	0xff1f0efe

08002f84 <HAL_ADC_Start>:
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Start+0x1a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e098      	b.n	80030d0 <HAL_ADC_Start+0x14c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fad0 	bl	800354c <ADC_Enable>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f040 8087 	bne.w	80030c6 <HAL_ADC_Start+0x142>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a41      	ldr	r2, [pc, #260]	@ (80030d8 <HAL_ADC_Start+0x154>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d105      	bne.n	8002fe2 <HAL_ADC_Start+0x5e>
 8002fd6:	4b41      	ldr	r3, [pc, #260]	@ (80030dc <HAL_ADC_Start+0x158>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d115      	bne.n	800300e <HAL_ADC_Start+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d026      	beq.n	800304a <HAL_ADC_Start+0xc6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003004:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	@ 0x28
 800300c:	e01d      	b.n	800304a <HAL_ADC_Start+0xc6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	629a      	str	r2, [r3, #40]	@ 0x28
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2f      	ldr	r2, [pc, #188]	@ (80030dc <HAL_ADC_Start+0x158>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_ADC_Start+0xaa>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2b      	ldr	r2, [pc, #172]	@ (80030d8 <HAL_ADC_Start+0x154>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10d      	bne.n	800304a <HAL_ADC_Start+0xc6>
 800302e:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <HAL_ADC_Start+0x158>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_ADC_Start+0xc6>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003042:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	@ 0x28
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d006      	beq.n	8003064 <HAL_ADC_Start+0xe0>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	f023 0206 	bic.w	r2, r3, #6
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003062:	e002      	b.n	800306a <HAL_ADC_Start+0xe6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	62da      	str	r2, [r3, #44]	@ 0x2c
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f06f 0202 	mvn.w	r2, #2
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003086:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800308a:	d113      	bne.n	80030b4 <HAL_ADC_Start+0x130>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a11      	ldr	r2, [pc, #68]	@ (80030d8 <HAL_ADC_Start+0x154>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_Start+0x11e>
 8003096:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_ADC_Start+0x158>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_ADC_Start+0x130>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	e00c      	b.n	80030ce <HAL_ADC_Start+0x14a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	e003      	b.n	80030ce <HAL_ADC_Start+0x14a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40012800 	.word	0x40012800
 80030dc:	40012400 	.word	0x40012400

080030e0 <HAL_ADC_Stop>:
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_Stop+0x1a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e01a      	b.n	8003130 <HAL_ADC_Stop+0x50>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa7c 	bl	8003600 <ADC_ConversionStop_Disable>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_ADC_Stop+0x46>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003116:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_ADC_PollForConversion>:
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	f7ff fe13 	bl	8002d78 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_ADC_PollForConversion+0x42>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003176:	2301      	movs	r3, #1
 8003178:	e0d3      	b.n	8003322 <HAL_ADC_PollForConversion+0x1ea>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d131      	bne.n	80031ec <HAL_ADC_PollForConversion+0xb4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d12a      	bne.n	80031ec <HAL_ADC_PollForConversion+0xb4>
 8003196:	e021      	b.n	80031dc <HAL_ADC_PollForConversion+0xa4>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d01d      	beq.n	80031dc <HAL_ADC_PollForConversion+0xa4>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x7e>
 80031a6:	f7ff fde7 	bl	8002d78 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d212      	bcs.n	80031dc <HAL_ADC_PollForConversion+0xa4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <HAL_ADC_PollForConversion+0xa4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80031d8:	2303      	movs	r3, #3
 80031da:	e0a2      	b.n	8003322 <HAL_ADC_PollForConversion+0x1ea>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0d6      	beq.n	8003198 <HAL_ADC_PollForConversion+0x60>
 80031ea:	e070      	b.n	80032ce <HAL_ADC_PollForConversion+0x196>
 80031ec:	4b4f      	ldr	r3, [pc, #316]	@ (800332c <HAL_ADC_PollForConversion+0x1f4>)
 80031ee:	681c      	ldr	r4, [r3, #0]
 80031f0:	2002      	movs	r0, #2
 80031f2:	f001 fa41 	bl	8004678 <HAL_RCCEx_GetPeriphCLKFreq>
 80031f6:	4603      	mov	r3, r0
 80031f8:	fbb4 f2f3 	udiv	r2, r4, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6919      	ldr	r1, [r3, #16]
 8003202:	4b4b      	ldr	r3, [pc, #300]	@ (8003330 <HAL_ADC_PollForConversion+0x1f8>)
 8003204:	400b      	ands	r3, r1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_ADC_PollForConversion+0x104>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68d9      	ldr	r1, [r3, #12]
 8003210:	4b48      	ldr	r3, [pc, #288]	@ (8003334 <HAL_ADC_PollForConversion+0x1fc>)
 8003212:	400b      	ands	r3, r1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d111      	bne.n	800323c <HAL_ADC_PollForConversion+0x104>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6919      	ldr	r1, [r3, #16]
 800321e:	4b46      	ldr	r3, [pc, #280]	@ (8003338 <HAL_ADC_PollForConversion+0x200>)
 8003220:	400b      	ands	r3, r1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d108      	bne.n	8003238 <HAL_ADC_PollForConversion+0x100>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68d9      	ldr	r1, [r3, #12]
 800322c:	4b43      	ldr	r3, [pc, #268]	@ (800333c <HAL_ADC_PollForConversion+0x204>)
 800322e:	400b      	ands	r3, r1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_PollForConversion+0x100>
 8003234:	2314      	movs	r3, #20
 8003236:	e020      	b.n	800327a <HAL_ADC_PollForConversion+0x142>
 8003238:	2329      	movs	r3, #41	@ 0x29
 800323a:	e01e      	b.n	800327a <HAL_ADC_PollForConversion+0x142>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6919      	ldr	r1, [r3, #16]
 8003242:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <HAL_ADC_PollForConversion+0x200>)
 8003244:	400b      	ands	r3, r1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_ADC_PollForConversion+0x120>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	4b3a      	ldr	r3, [pc, #232]	@ (800333c <HAL_ADC_PollForConversion+0x204>)
 8003252:	400b      	ands	r3, r1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00d      	beq.n	8003274 <HAL_ADC_PollForConversion+0x13c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	4b38      	ldr	r3, [pc, #224]	@ (8003340 <HAL_ADC_PollForConversion+0x208>)
 8003260:	400b      	ands	r3, r1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <HAL_ADC_PollForConversion+0x140>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68d9      	ldr	r1, [r3, #12]
 800326c:	4b34      	ldr	r3, [pc, #208]	@ (8003340 <HAL_ADC_PollForConversion+0x208>)
 800326e:	400b      	ands	r3, r1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_PollForConversion+0x140>
 8003274:	2354      	movs	r3, #84	@ 0x54
 8003276:	e000      	b.n	800327a <HAL_ADC_PollForConversion+0x142>
 8003278:	23fc      	movs	r3, #252	@ 0xfc
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e021      	b.n	80032c6 <HAL_ADC_PollForConversion+0x18e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d01a      	beq.n	80032c0 <HAL_ADC_PollForConversion+0x188>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_ADC_PollForConversion+0x168>
 8003290:	f7ff fd72 	bl	8002d78 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d20f      	bcs.n	80032c0 <HAL_ADC_PollForConversion+0x188>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d90b      	bls.n	80032c0 <HAL_ADC_PollForConversion+0x188>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80032bc:	2303      	movs	r3, #3
 80032be:	e030      	b.n	8003322 <HAL_ADC_PollForConversion+0x1ea>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d8d9      	bhi.n	8003282 <HAL_ADC_PollForConversion+0x14a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f06f 0212 	mvn.w	r2, #18
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80032ee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80032f2:	d115      	bne.n	8003320 <HAL_ADC_PollForConversion+0x1e8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7b1b      	ldrb	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <HAL_ADC_PollForConversion+0x1e8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	@ 0x28
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_ADC_PollForConversion+0x1e8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003320:	2300      	movs	r3, #0
 8003322:	4618      	mov	r0, r3
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd90      	pop	{r4, r7, pc}
 800332a:	bf00      	nop
 800332c:	20000000 	.word	0x20000000
 8003330:	24924924 	.word	0x24924924
 8003334:	00924924 	.word	0x00924924
 8003338:	12492492 	.word	0x12492492
 800333c:	00492492 	.word	0x00492492
 8003340:	00249249 	.word	0x00249249

08003344 <HAL_ADC_GetValue>:
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_ADC_ConfigChannel>:
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x20>
 8003378:	2302      	movs	r3, #2
 800337a:	e0dc      	b.n	8003536 <HAL_ADC_ConfigChannel+0x1da>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d81c      	bhi.n	80033c6 <HAL_ADC_ConfigChannel+0x6a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b05      	subs	r3, #5
 800339e:	221f      	movs	r2, #31
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	4019      	ands	r1, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	3b05      	subs	r3, #5
 80033b8:	fa00 f203 	lsl.w	r2, r0, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c4:	e03c      	b.n	8003440 <HAL_ADC_ConfigChannel+0xe4>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d81c      	bhi.n	8003408 <HAL_ADC_ConfigChannel+0xac>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	3b23      	subs	r3, #35	@ 0x23
 80033e0:	221f      	movs	r2, #31
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	4019      	ands	r1, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	3b23      	subs	r3, #35	@ 0x23
 80033fa:	fa00 f203 	lsl.w	r2, r0, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
 8003406:	e01b      	b.n	8003440 <HAL_ADC_ConfigChannel+0xe4>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	3b41      	subs	r3, #65	@ 0x41
 800341a:	221f      	movs	r2, #31
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	4019      	ands	r1, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	3b41      	subs	r3, #65	@ 0x41
 8003434:	fa00 f203 	lsl.w	r2, r0, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b09      	cmp	r3, #9
 8003446:	d91c      	bls.n	8003482 <HAL_ADC_ConfigChannel+0x126>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68d9      	ldr	r1, [r3, #12]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	3b1e      	subs	r3, #30
 800345a:	2207      	movs	r2, #7
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	4019      	ands	r1, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6898      	ldr	r0, [r3, #8]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	3b1e      	subs	r3, #30
 8003474:	fa00 f203 	lsl.w	r2, r0, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	60da      	str	r2, [r3, #12]
 8003480:	e019      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x15a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6919      	ldr	r1, [r3, #16]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	2207      	movs	r2, #7
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	4019      	ands	r1, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6898      	ldr	r0, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	fa00 f203 	lsl.w	r2, r0, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d003      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x16a>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b11      	cmp	r3, #17
 80034c4:	d132      	bne.n	800352c <HAL_ADC_ConfigChannel+0x1d0>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <HAL_ADC_ConfigChannel+0x1e4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d125      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1c0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d126      	bne.n	800352c <HAL_ADC_ConfigChannel+0x1d0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d11a      	bne.n	800352c <HAL_ADC_ConfigChannel+0x1d0>
 80034f6:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <HAL_ADC_ConfigChannel+0x1e8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	@ (8003548 <HAL_ADC_ConfigChannel+0x1ec>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	0c9a      	lsrs	r2, r3, #18
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	e002      	b.n	8003514 <HAL_ADC_ConfigChannel+0x1b8>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3b01      	subs	r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f9      	bne.n	800350e <HAL_ADC_ConfigChannel+0x1b2>
 800351a:	e007      	b.n	800352c <HAL_ADC_ConfigChannel+0x1d0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012400 	.word	0x40012400
 8003544:	20000000 	.word	0x20000000
 8003548:	431bde83 	.word	0x431bde83

0800354c <ADC_Enable>:
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d040      	beq.n	80035ec <ADC_Enable+0xa0>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	4b1f      	ldr	r3, [pc, #124]	@ (80035f8 <ADC_Enable+0xac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1f      	ldr	r2, [pc, #124]	@ (80035fc <ADC_Enable+0xb0>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	0c9b      	lsrs	r3, r3, #18
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	e002      	b.n	8003590 <ADC_Enable+0x44>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3b01      	subs	r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f9      	bne.n	800358a <ADC_Enable+0x3e>
 8003596:	f7ff fbef 	bl	8002d78 <HAL_GetTick>
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	e01f      	b.n	80035de <ADC_Enable+0x92>
 800359e:	f7ff fbeb 	bl	8002d78 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d918      	bls.n	80035de <ADC_Enable+0x92>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d011      	beq.n	80035de <ADC_Enable+0x92>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035da:	2301      	movs	r3, #1
 80035dc:	e007      	b.n	80035ee <ADC_Enable+0xa2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d1d8      	bne.n	800359e <ADC_Enable+0x52>
 80035ec:	2300      	movs	r3, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000
 80035fc:	431bde83 	.word	0x431bde83

08003600 <ADC_ConversionStop_Disable>:
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d12e      	bne.n	8003678 <ADC_ConversionStop_Disable+0x78>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	f7ff fba5 	bl	8002d78 <HAL_GetTick>
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	e01b      	b.n	800366a <ADC_ConversionStop_Disable+0x6a>
 8003632:	f7ff fba1 	bl	8002d78 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d914      	bls.n	800366a <ADC_ConversionStop_Disable+0x6a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10d      	bne.n	800366a <ADC_ConversionStop_Disable+0x6a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	f043 0210 	orr.w	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	629a      	str	r2, [r3, #40]	@ 0x28
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003666:	2301      	movs	r3, #1
 8003668:	e007      	b.n	800367a <ADC_ConversionStop_Disable+0x7a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d0dc      	beq.n	8003632 <ADC_ConversionStop_Disable+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_ADCEx_Calibration_Start>:
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e097      	b.n	80037d2 <HAL_ADCEx_Calibration_Start+0x14e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffa8 	bl	8003600 <ADC_ConversionStop_Disable>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff49 	bl	800354c <ADC_Enable>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 8081 	bne.w	80037c8 <HAL_ADCEx_Calibration_Start+0x144>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036ce:	f023 0302 	bic.w	r3, r3, #2
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80036da:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <HAL_ADCEx_Calibration_Start+0x158>)
 80036dc:	681c      	ldr	r4, [r3, #0]
 80036de:	2002      	movs	r0, #2
 80036e0:	f000 ffca 	bl	8004678 <HAL_RCCEx_GetPeriphCLKFreq>
 80036e4:	4603      	mov	r3, r0
 80036e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e002      	b.n	80036f6 <HAL_ADCEx_Calibration_Start+0x72>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <HAL_ADCEx_Calibration_Start+0x6c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0208 	orr.w	r2, r2, #8
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	f7ff fb34 	bl	8002d78 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]
 8003712:	e01b      	b.n	800374c <HAL_ADCEx_Calibration_Start+0xc8>
 8003714:	f7ff fb30 	bl	8002d78 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b0a      	cmp	r3, #10
 8003720:	d914      	bls.n	800374c <HAL_ADCEx_Calibration_Start+0xc8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <HAL_ADCEx_Calibration_Start+0xc8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	f023 0312 	bic.w	r3, r3, #18
 8003738:	f043 0210 	orr.w	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003748:	2301      	movs	r3, #1
 800374a:	e042      	b.n	80037d2 <HAL_ADCEx_Calibration_Start+0x14e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1dc      	bne.n	8003714 <HAL_ADCEx_Calibration_Start+0x90>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0204 	orr.w	r2, r2, #4
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	f7ff fb05 	bl	8002d78 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]
 8003770:	e01b      	b.n	80037aa <HAL_ADCEx_Calibration_Start+0x126>
 8003772:	f7ff fb01 	bl	8002d78 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b0a      	cmp	r3, #10
 800377e:	d914      	bls.n	80037aa <HAL_ADCEx_Calibration_Start+0x126>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <HAL_ADCEx_Calibration_Start+0x126>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	f023 0312 	bic.w	r3, r3, #18
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	629a      	str	r2, [r3, #40]	@ 0x28
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037a6:	2301      	movs	r3, #1
 80037a8:	e013      	b.n	80037d2 <HAL_ADCEx_Calibration_Start+0x14e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1dc      	bne.n	8003772 <HAL_ADCEx_Calibration_Start+0xee>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	f023 0303 	bic.w	r3, r3, #3
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	4618      	mov	r0, r3
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <__NVIC_SetPriorityGrouping>:
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	021a      	lsls	r2, r3, #8
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800380c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4a04      	ldr	r2, [pc, #16]	@ (8003824 <__NVIC_SetPriorityGrouping+0x44>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	60d3      	str	r3, [r2, #12]
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_GetPriorityGrouping>:
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <__NVIC_GetPriorityGrouping+0x18>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <__NVIC_SetPriority>:
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	@ (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	@ (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	@ 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
 80038f0:	4313      	orrs	r3, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <SysTick_Config>:
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800390c:	d301      	bcc.n	8003912 <SysTick_Config+0x16>
 800390e:	2301      	movs	r3, #1
 8003910:	e00f      	b.n	8003932 <SysTick_Config+0x36>
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <SysTick_Config+0x40>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	6053      	str	r3, [r2, #4]
 800391a:	210f      	movs	r1, #15
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f7ff ff90 	bl	8003844 <__NVIC_SetPriority>
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <SysTick_Config+0x40>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	4b04      	ldr	r3, [pc, #16]	@ (800393c <SysTick_Config+0x40>)
 800392c:	2207      	movs	r2, #7
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	2300      	movs	r3, #0
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	e000e010 	.word	0xe000e010

08003940 <HAL_NVIC_SetPriorityGrouping>:
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff49 	bl	80037e0 <__NVIC_SetPriorityGrouping>
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_SetPriority>:
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	f7ff ff5e 	bl	8003828 <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff90 	bl	8003898 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5f 	bl	8003844 <__NVIC_SetPriority>
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_SYSTICK_Config>:
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ffb0 	bl	80038fc <SysTick_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_CRC_Init>:
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_CRC_Init+0x12>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e00e      	b.n	80039d6 <HAL_CRC_Init+0x30>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	795b      	ldrb	r3, [r3, #5]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <HAL_CRC_Init+0x28>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	711a      	strb	r2, [r3, #4]
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fe ffe5 	bl	8002998 <HAL_CRC_MspInit>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	715a      	strb	r2, [r3, #5]
 80039d4:	2300      	movs	r3, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_GPIO_Init>:
 80039e0:	b480      	push	{r7}
 80039e2:	b08b      	sub	sp, #44	@ 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	e169      	b.n	8003cc8 <HAL_GPIO_Init+0x2e8>
 80039f4:	2201      	movs	r2, #1
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	f040 8158 	bne.w	8003cc2 <HAL_GPIO_Init+0x2e2>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a9a      	ldr	r2, [pc, #616]	@ (8003c80 <HAL_GPIO_Init+0x2a0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d05e      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a1c:	4a98      	ldr	r2, [pc, #608]	@ (8003c80 <HAL_GPIO_Init+0x2a0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d875      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a22:	4a98      	ldr	r2, [pc, #608]	@ (8003c84 <HAL_GPIO_Init+0x2a4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d058      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a28:	4a96      	ldr	r2, [pc, #600]	@ (8003c84 <HAL_GPIO_Init+0x2a4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d86f      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a2e:	4a96      	ldr	r2, [pc, #600]	@ (8003c88 <HAL_GPIO_Init+0x2a8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d052      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a34:	4a94      	ldr	r2, [pc, #592]	@ (8003c88 <HAL_GPIO_Init+0x2a8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d869      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a3a:	4a94      	ldr	r2, [pc, #592]	@ (8003c8c <HAL_GPIO_Init+0x2ac>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04c      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a40:	4a92      	ldr	r2, [pc, #584]	@ (8003c8c <HAL_GPIO_Init+0x2ac>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d863      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a46:	4a92      	ldr	r2, [pc, #584]	@ (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d046      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a4c:	4a90      	ldr	r2, [pc, #576]	@ (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d85d      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d82a      	bhi.n	8003aac <HAL_GPIO_Init+0xcc>
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	d859      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <HAL_GPIO_Init+0x80>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003adb 	.word	0x08003adb
 8003a64:	08003ab5 	.word	0x08003ab5
 8003a68:	08003ac7 	.word	0x08003ac7
 8003a6c:	08003b09 	.word	0x08003b09
 8003a70:	08003b0f 	.word	0x08003b0f
 8003a74:	08003b0f 	.word	0x08003b0f
 8003a78:	08003b0f 	.word	0x08003b0f
 8003a7c:	08003b0f 	.word	0x08003b0f
 8003a80:	08003b0f 	.word	0x08003b0f
 8003a84:	08003b0f 	.word	0x08003b0f
 8003a88:	08003b0f 	.word	0x08003b0f
 8003a8c:	08003b0f 	.word	0x08003b0f
 8003a90:	08003b0f 	.word	0x08003b0f
 8003a94:	08003b0f 	.word	0x08003b0f
 8003a98:	08003b0f 	.word	0x08003b0f
 8003a9c:	08003b0f 	.word	0x08003b0f
 8003aa0:	08003b0f 	.word	0x08003b0f
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ad1 	.word	0x08003ad1
 8003aac:	4a79      	ldr	r2, [pc, #484]	@ (8003c94 <HAL_GPIO_Init+0x2b4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003ab2:	e02c      	b.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	623b      	str	r3, [r7, #32]
 8003aba:	e029      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	e024      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	3308      	adds	r3, #8
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	e01f      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	e01a      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_GPIO_Init+0x108>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	e013      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_GPIO_Init+0x11c>
 8003af0:	2308      	movs	r3, #8
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	e009      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003afc:	2308      	movs	r3, #8
 8003afe:	623b      	str	r3, [r7, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	615a      	str	r2, [r3, #20]
 8003b06:	e003      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	e000      	b.n	8003b10 <HAL_GPIO_Init+0x130>
 8003b0e:	bf00      	nop
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2bff      	cmp	r3, #255	@ 0xff
 8003b14:	d801      	bhi.n	8003b1a <HAL_GPIO_Init+0x13a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	e001      	b.n	8003b1e <HAL_GPIO_Init+0x13e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2bff      	cmp	r3, #255	@ 0xff
 8003b24:	d802      	bhi.n	8003b2c <HAL_GPIO_Init+0x14c>
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	e002      	b.n	8003b32 <HAL_GPIO_Init+0x152>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	3b08      	subs	r3, #8
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	210f      	movs	r1, #15
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	401a      	ands	r2, r3
 8003b44:	6a39      	ldr	r1, [r7, #32]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80b1 	beq.w	8003cc2 <HAL_GPIO_Init+0x2e2>
 8003b60:	4b4d      	ldr	r3, [pc, #308]	@ (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4a4c      	ldr	r2, [pc, #304]	@ (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6193      	str	r3, [r2, #24]
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4a48      	ldr	r2, [pc, #288]	@ (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	220f      	movs	r2, #15
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a40      	ldr	r2, [pc, #256]	@ (8003ca0 <HAL_GPIO_Init+0x2c0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_GPIO_Init+0x1ec>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca4 <HAL_GPIO_Init+0x2c4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00d      	beq.n	8003bc8 <HAL_GPIO_Init+0x1e8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca8 <HAL_GPIO_Init+0x2c8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0x1e4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3d      	ldr	r2, [pc, #244]	@ (8003cac <HAL_GPIO_Init+0x2cc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_GPIO_Init+0x1e0>
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e006      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	e004      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e002      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	f002 0203 	and.w	r2, r2, #3
 8003bd4:	0092      	lsls	r2, r2, #2
 8003bd6:	4093      	lsls	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	492f      	ldr	r1, [pc, #188]	@ (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_GPIO_Init+0x226>
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	492c      	ldr	r1, [pc, #176]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
 8003c04:	e006      	b.n	8003c14 <HAL_GPIO_Init+0x234>
 8003c06:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	4928      	ldr	r1, [pc, #160]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <HAL_GPIO_Init+0x24e>
 8003c20:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4922      	ldr	r1, [pc, #136]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x25c>
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	491e      	ldr	r1, [pc, #120]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60cb      	str	r3, [r1, #12]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <HAL_GPIO_Init+0x276>
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4918      	ldr	r1, [pc, #96]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_Init+0x284>
 8003c56:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	4914      	ldr	r1, [pc, #80]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d021      	beq.n	8003cb4 <HAL_GPIO_Init+0x2d4>
 8003c70:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	490e      	ldr	r1, [pc, #56]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	e021      	b.n	8003cc2 <HAL_GPIO_Init+0x2e2>
 8003c7e:	bf00      	nop
 8003c80:	10320000 	.word	0x10320000
 8003c84:	10310000 	.word	0x10310000
 8003c88:	10220000 	.word	0x10220000
 8003c8c:	10210000 	.word	0x10210000
 8003c90:	10120000 	.word	0x10120000
 8003c94:	10110000 	.word	0x10110000
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40010800 	.word	0x40010800
 8003ca4:	40010c00 	.word	0x40010c00
 8003ca8:	40011000 	.word	0x40011000
 8003cac:	40011400 	.word	0x40011400
 8003cb0:	40010400 	.word	0x40010400
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_GPIO_Init+0x304>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	4909      	ldr	r1, [pc, #36]	@ (8003ce4 <HAL_GPIO_Init+0x304>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f47f ae8e 	bne.w	80039f4 <HAL_GPIO_Init+0x14>
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	372c      	adds	r7, #44	@ 0x2c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <HAL_RCC_OscConfig>:
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e272      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8087 	beq.w	8003e16 <HAL_RCC_OscConfig+0x12e>
 8003d08:	4b92      	ldr	r3, [pc, #584]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46>
 8003d14:	4b8f      	ldr	r3, [pc, #572]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d112      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
 8003d20:	4b8c      	ldr	r3, [pc, #560]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
 8003d2e:	4b89      	ldr	r3, [pc, #548]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x12c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d168      	bne.n	8003e14 <HAL_RCC_OscConfig+0x12c>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e24c      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x76>
 8003d50:	4b80      	ldr	r3, [pc, #512]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7f      	ldr	r2, [pc, #508]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b7b      	ldr	r3, [pc, #492]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b78      	ldr	r3, [pc, #480]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a77      	ldr	r2, [pc, #476]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0xbc>
 8003d8a:	4b72      	ldr	r3, [pc, #456]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a71      	ldr	r2, [pc, #452]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6f      	ldr	r3, [pc, #444]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003da4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b68      	ldr	r3, [pc, #416]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a67      	ldr	r2, [pc, #412]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x104>
 8003dc4:	f7fe ffd8 	bl	8002d78 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xf6>
 8003dcc:	f7fe ffd4 	bl	8002d78 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xf6>
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e200      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003dde:	4b5d      	ldr	r3, [pc, #372]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe4>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
 8003dec:	f7fe ffc4 	bl	8002d78 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x11e>
 8003df4:	f7fe ffc0 	bl	8002d78 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	@ 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x11e>
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1ec      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003e06:	4b53      	ldr	r3, [pc, #332]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x10c>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
 8003e14:	bf00      	nop
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x202>
 8003e22:	4b4c      	ldr	r3, [pc, #304]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x15e>
 8003e2e:	4b49      	ldr	r3, [pc, #292]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
 8003e3a:	4b46      	ldr	r3, [pc, #280]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
 8003e46:	4b43      	ldr	r3, [pc, #268]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c0      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4939      	ldr	r1, [pc, #228]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1d6>
 8003e7c:	4b36      	ldr	r3, [pc, #216]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	f7fe ff79 	bl	8002d78 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
 8003e8a:	f7fe ff75 	bl	8002d78 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1a2>
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4927      	ldr	r1, [pc, #156]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
 8003ebe:	4b26      	ldr	r3, [pc, #152]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f7fe ff58 	bl	8002d78 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1f6>
 8003ecc:	f7fe ff54 	bl	8002d78 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1f6>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e180      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003ede:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03a      	beq.n	8003f6c <HAL_RCC_OscConfig+0x284>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d019      	beq.n	8003f32 <HAL_RCC_OscConfig+0x24a>
 8003efe:	4b17      	ldr	r3, [pc, #92]	@ (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f7fe ff38 	bl	8002d78 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x236>
 8003f0c:	f7fe ff34 	bl	8002d78 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x236>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e160      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x224>
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f000 fad0 	bl	80044d0 <RCC_Delay>
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x284>
 8003f32:	4b0a      	ldr	r3, [pc, #40]	@ (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f7fe ff1e 	bl	8002d78 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]
 8003f3e:	e00f      	b.n	8003f60 <HAL_RCC_OscConfig+0x278>
 8003f40:	f7fe ff1a 	bl	8002d78 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d908      	bls.n	8003f60 <HAL_RCC_OscConfig+0x278>
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e146      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	42420000 	.word	0x42420000
 8003f5c:	42420480 	.word	0x42420480
 8003f60:	4b92      	ldr	r3, [pc, #584]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e9      	bne.n	8003f40 <HAL_RCC_OscConfig+0x258>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a6 	beq.w	80040c6 <HAL_RCC_OscConfig+0x3de>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2be>
 8003f8a:	4b88      	ldr	r3, [pc, #544]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a87      	ldr	r2, [pc, #540]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	61d3      	str	r3, [r2, #28]
 8003f96:	4b85      	ldr	r3, [pc, #532]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
 8003fa6:	4b82      	ldr	r3, [pc, #520]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2fc>
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	f7fe fedb 	bl	8002d78 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
 8003fc6:	f7fe fed7 	bl	8002d78 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	@ 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e103      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003fd8:	4b75      	ldr	r3, [pc, #468]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2de>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x312>
 8003fec:	4b6f      	ldr	r3, [pc, #444]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6213      	str	r3, [r2, #32]
 8003ff8:	e02d      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x334>
 8004002:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a69      	ldr	r2, [pc, #420]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	4b67      	ldr	r3, [pc, #412]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a66      	ldr	r2, [pc, #408]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x356>
 8004024:	4b61      	ldr	r3, [pc, #388]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4a60      	ldr	r2, [pc, #384]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6213      	str	r3, [r2, #32]
 8004030:	4b5e      	ldr	r3, [pc, #376]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a5d      	ldr	r2, [pc, #372]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800403e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a5a      	ldr	r2, [pc, #360]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	4b58      	ldr	r3, [pc, #352]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a57      	ldr	r2, [pc, #348]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6213      	str	r3, [r2, #32]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x3a2>
 800405e:	f7fe fe8b 	bl	8002d78 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x394>
 8004066:	f7fe fe87 	bl	8002d78 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x394>
 8004078:	2303      	movs	r3, #3
 800407a:	e0b1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 800407c:	4b4b      	ldr	r3, [pc, #300]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x37e>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x3cc>
 800408a:	f7fe fe75 	bl	8002d78 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
 8004092:	f7fe fe71 	bl	8002d78 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
 80040a4:	2303      	movs	r3, #3
 80040a6:	e09b      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 80040a8:	4b40      	ldr	r3, [pc, #256]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x3aa>
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x3de>
 80040ba:	4b3c      	ldr	r3, [pc, #240]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a3b      	ldr	r2, [pc, #236]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	61d3      	str	r3, [r2, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8087 	beq.w	80041de <HAL_RCC_OscConfig+0x4f6>
 80040d0:	4b36      	ldr	r3, [pc, #216]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d061      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4b8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d146      	bne.n	8004172 <HAL_RCC_OscConfig+0x48a>
 80040e4:	4b33      	ldr	r3, [pc, #204]	@ (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f7fe fe45 	bl	8002d78 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x41c>
 80040f2:	f7fe fe41 	bl	8002d78 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x41c>
 8004100:	2303      	movs	r3, #3
 8004102:	e06d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8004104:	4b29      	ldr	r3, [pc, #164]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x40a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004118:	d108      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
 800411a:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4921      	ldr	r1, [pc, #132]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a19      	ldr	r1, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	430b      	orrs	r3, r1
 800413e:	491b      	ldr	r1, [pc, #108]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
 8004144:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f7fe fe15 	bl	8002d78 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x47c>
 8004152:	f7fe fe11 	bl	8002d78 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x47c>
 8004160:	2303      	movs	r3, #3
 8004162:	e03d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8004164:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x46a>
 8004170:	e035      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	f7fe fdfe 	bl	8002d78 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x4aa>
 8004180:	f7fe fdfa 	bl	8002d78 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x4aa>
 800418e:	2303      	movs	r3, #3
 8004190:	e026      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8004192:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x498>
 800419e:	e01e      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4d0>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e019      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42420060 	.word	0x42420060
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_OscConfig+0x500>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x4f2>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x4f6>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 80041de:	2300      	movs	r3, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000

080041ec <HAL_RCC_ClockConfig>:
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0d0      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
 8004200:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x44>
 800420e:	4b67      	ldr	r3, [pc, #412]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	4965      	ldr	r1, [pc, #404]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
 800421e:	4b63      	ldr	r3, [pc, #396]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x44>
 800422c:	2301      	movs	r3, #1
 800422e:	e0b8      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_ClockConfig+0x92>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x68>
 8004248:	4b59      	ldr	r3, [pc, #356]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a58      	ldr	r2, [pc, #352]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x80>
 8004260:	4b53      	ldr	r3, [pc, #332]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800426a:	6053      	str	r3, [r2, #4]
 800426c:	4b50      	ldr	r3, [pc, #320]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	494d      	ldr	r1, [pc, #308]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d040      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xb6>
 8004292:	4b47      	ldr	r3, [pc, #284]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d115      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
 80042aa:	4b41      	ldr	r3, [pc, #260]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e073      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
 80042ba:	4b3d      	ldr	r3, [pc, #244]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
 80042ca:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4936      	ldr	r1, [pc, #216]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
 80042dc:	f7fe fd4c 	bl	8002d78 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
 80042e4:	f7fe fd48 	bl	8002d78 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
 80042f6:	2303      	movs	r3, #3
 80042f8:	e053      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
 80042fa:	4b2d      	ldr	r3, [pc, #180]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
 800430c:	4b27      	ldr	r3, [pc, #156]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d210      	bcs.n	800433c <HAL_RCC_ClockConfig+0x150>
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	4922      	ldr	r1, [pc, #136]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
 800432a:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x150>
 8004338:	2301      	movs	r3, #1
 800433a:	e032      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x16e>
 8004348:	4b19      	ldr	r3, [pc, #100]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4916      	ldr	r1, [pc, #88]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x18e>
 8004366:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	490e      	ldr	r1, [pc, #56]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
 800437a:	f000 f821 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	490a      	ldr	r1, [pc, #40]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_ClockConfig+0x1d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fcaa 	bl	8002cf4 <HAL_InitTick>
 80043a0:	2300      	movs	r3, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40022000 	.word	0x40022000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	0800a064 	.word	0x0800a064
 80043b8:	20000000 	.word	0x20000000
 80043bc:	20000004 	.word	0x20000004

080043c0 <HAL_RCC_GetSysClockFreq>:
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	4b1e      	ldr	r3, [pc, #120]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x94>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x36>
 80043ee:	e027      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x80>
 80043f0:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	e027      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x86>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	4a17      	ldr	r2, [pc, #92]	@ (800445c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004400:	5cd3      	ldrb	r3, [r2, r3]
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x70>
 800440e:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x94>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	0c5b      	lsrs	r3, r3, #17
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	4a11      	ldr	r2, [pc, #68]	@ (8004460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 8004422:	fb03 f202 	mul.w	r2, r3, r2
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e004      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x7a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a0c      	ldr	r2, [pc, #48]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x86>
 8004440:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	bf00      	nop
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	00f42400 	.word	0x00f42400
 800445c:	0800a074 	.word	0x0800a074
 8004460:	0800a084 	.word	0x0800a084
 8004464:	003d0900 	.word	0x003d0900
 8004468:	007a1200 	.word	0x007a1200

0800446c <HAL_RCC_GetHCLKFreq>:
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
 8004470:	4b02      	ldr	r3, [pc, #8]	@ (800447c <HAL_RCC_GetHCLKFreq+0x10>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	20000000 	.word	0x20000000

08004480 <HAL_RCC_GetPCLK1Freq>:
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
 8004484:	f7ff fff2 	bl	800446c <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4903      	ldr	r1, [pc, #12]	@ (80044a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000
 80044a4:	0800a05c 	.word	0x0800a05c

080044a8 <HAL_RCC_GetPCLK2Freq>:
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	f7ff ffde 	bl	800446c <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	0adb      	lsrs	r3, r3, #11
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	@ (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	0800a05c 	.word	0x0800a05c

080044d0 <RCC_Delay>:
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004504 <RCC_Delay+0x34>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <RCC_Delay+0x38>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0a5b      	lsrs	r3, r3, #9
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	bf00      	nop
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f9      	bne.n	80044ec <RCC_Delay+0x1c>
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	20000000 	.word	0x20000000
 8004508:	10624dd3 	.word	0x10624dd3

0800450c <HAL_RCCEx_PeriphCLKConfig>:
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d07d      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
 800452c:	4b4f      	ldr	r3, [pc, #316]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10d      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004538:	4b4c      	ldr	r3, [pc, #304]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4a4b      	ldr	r2, [pc, #300]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004542:	61d3      	str	r3, [r2, #28]
 8004544:	4b49      	ldr	r3, [pc, #292]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
 8004554:	4b46      	ldr	r3, [pc, #280]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d118      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004560:	4b43      	ldr	r3, [pc, #268]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a42      	ldr	r2, [pc, #264]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	f7fe fc04 	bl	8002d78 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]
 8004572:	e008      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004574:	f7fe fc00 	bl	8002d78 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004582:	2303      	movs	r3, #3
 8004584:	e06d      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004586:	4b3a      	ldr	r3, [pc, #232]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004592:	4b36      	ldr	r3, [pc, #216]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02e      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d027      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045b0:	4b2e      	ldr	r3, [pc, #184]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	4a29      	ldr	r2, [pc, #164]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d014      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045d6:	f7fe fbcf 	bl	8002d78 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80045de:	f7fe fbcb 	bl	8002d78 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80045f0:	2303      	movs	r3, #3
 80045f2:	e036      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80045f4:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0ee      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004600:	4b1a      	ldr	r3, [pc, #104]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4917      	ldr	r1, [pc, #92]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	4313      	orrs	r3, r2
 8004610:	620b      	str	r3, [r1, #32]
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004618:	4b14      	ldr	r3, [pc, #80]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4a13      	ldr	r2, [pc, #76]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004622:	61d3      	str	r3, [r2, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004630:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	490b      	ldr	r1, [pc, #44]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800464e:	4b07      	ldr	r3, [pc, #28]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4904      	ldr	r1, [pc, #16]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
 8004660:	2300      	movs	r3, #0
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	40007000 	.word	0x40007000
 8004674:	42420440 	.word	0x42420440

08004678 <HAL_RCCEx_GetPeriphCLKFreq>:
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	2300      	movs	r3, #0
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b10      	cmp	r3, #16
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b10      	cmp	r3, #16
 800469e:	f200 8089 	bhi.w	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d045      	beq.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d074      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80046ae:	e081      	b.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80046b0:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	4b44      	ldr	r3, [pc, #272]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d07a      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	0c9b      	lsrs	r3, r3, #18
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	4a40      	ldr	r2, [pc, #256]	@ (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046cc:	5cd3      	ldrb	r3, [r2, r3]
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d015      	beq.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 80046da:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	0c5b      	lsrs	r3, r3, #17
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	4a3a      	ldr	r2, [pc, #232]	@ (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80046f4:	4a37      	ldr	r2, [pc, #220]	@ (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e004      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4a33      	ldr	r2, [pc, #204]	@ (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	4b2d      	ldr	r3, [pc, #180]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471c:	d102      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e049      	b.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4a2c      	ldr	r2, [pc, #176]	@ (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e041      	b.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004734:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004744:	d108      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e01e      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004762:	d109      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004764:	4b18      	ldr	r3, [pc, #96]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004770:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e00e      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800477e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004782:	d11b      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004784:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d015      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004790:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	e012      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004796:	e011      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004798:	f7ff fe86 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	0b9b      	lsrs	r3, r3, #14
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	3301      	adds	r3, #1
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047b4:	bf00      	nop
 80047b6:	e002      	b.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047bc:	bf00      	nop
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	0800a088 	.word	0x0800a088
 80047d0:	0800a098 	.word	0x0800a098
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	003d0900 	.word	0x003d0900
 80047dc:	aaaaaaab 	.word	0xaaaaaaab
 80047e0:	0001e848 	.word	0x0001e848

080047e4 <HAL_TIM_Base_Init>:
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_Base_Init+0x12>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e041      	b.n	800487a <HAL_TIM_Base_Init+0x96>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_TIM_Base_Init+0x2c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fe f8da 	bl	80029c4 <HAL_TIM_Base_MspInit>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f000 fb16 	bl	8004e54 <TIM_Base_SetConfig>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004878:	2300      	movs	r3, #0
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_PWM_Init>:
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_TIM_PWM_Init+0x12>
 8004890:	2301      	movs	r3, #1
 8004892:	e041      	b.n	8004918 <HAL_TIM_PWM_Init+0x96>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_TIM_PWM_Init+0x2c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f839 	bl	8004920 <HAL_TIM_PWM_MspInit>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f000 fac7 	bl	8004e54 <TIM_Base_SetConfig>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004916:	2300      	movs	r3, #0
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_PWM_MspInit>:
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr
	...

08004934 <HAL_TIM_PWM_Start>:
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_TIM_PWM_Start+0x24>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e022      	b.n	800499e <HAL_TIM_PWM_Start+0x6a>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b04      	cmp	r3, #4
 800495c:	d109      	bne.n	8004972 <HAL_TIM_PWM_Start+0x3e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	e015      	b.n	800499e <HAL_TIM_PWM_Start+0x6a>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d109      	bne.n	800498c <HAL_TIM_PWM_Start+0x58>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e008      	b.n	800499e <HAL_TIM_PWM_Start+0x6a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x72>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e05e      	b.n	8004a64 <HAL_TIM_PWM_Start+0x130>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Start+0x82>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b4:	e013      	b.n	80049de <HAL_TIM_PWM_Start+0xaa>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0x92>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c4:	e00b      	b.n	80049de <HAL_TIM_PWM_Start+0xaa>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0xa2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d4:	e003      	b.n	80049de <HAL_TIM_PWM_Start+0xaa>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fcb4 	bl	8005354 <TIM_CCxChannelCmd>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_TIM_PWM_Start+0x138>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_PWM_Start+0xd2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <HAL_TIM_PWM_Start+0x138>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xfa>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a18:	d009      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xfa>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <HAL_TIM_PWM_Start+0x13c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xfa>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a12      	ldr	r2, [pc, #72]	@ (8004a74 <HAL_TIM_PWM_Start+0x140>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d111      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x11e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d010      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x12e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <HAL_TIM_PWM_Start+0x12e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	2300      	movs	r3, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800

08004a78 <HAL_TIM_PWM_Stop>:
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	6839      	ldr	r1, [r7, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fc62 	bl	8005354 <TIM_CCxChannelCmd>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a29      	ldr	r2, [pc, #164]	@ (8004b3c <HAL_TIM_PWM_Stop+0xc4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d117      	bne.n	8004aca <HAL_TIM_PWM_Stop+0x52>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <HAL_TIM_PWM_Stop+0x52>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_PWM_Stop+0x52>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ac8:	645a      	str	r2, [r3, #68]	@ 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_TIM_PWM_Stop+0x82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_PWM_Stop+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Stop+0x92>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b08:	e013      	b.n	8004b32 <HAL_TIM_PWM_Stop+0xba>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Stop+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b18:	e00b      	b.n	8004b32 <HAL_TIM_PWM_Stop+0xba>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Stop+0xb2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b28:	e003      	b.n	8004b32 <HAL_TIM_PWM_Stop+0xba>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b32:	2300      	movs	r3, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40012c00 	.word	0x40012c00

08004b40 <HAL_TIM_PWM_ConfigChannel>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	75fb      	strb	r3, [r7, #23]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e0ae      	b.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	f200 809f 	bhi.w	8004cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004ba9 	.word	0x08004ba9
 8004b78:	08004cad 	.word	0x08004cad
 8004b7c:	08004cad 	.word	0x08004cad
 8004b80:	08004cad 	.word	0x08004cad
 8004b84:	08004be9 	.word	0x08004be9
 8004b88:	08004cad 	.word	0x08004cad
 8004b8c:	08004cad 	.word	0x08004cad
 8004b90:	08004cad 	.word	0x08004cad
 8004b94:	08004c2b 	.word	0x08004c2b
 8004b98:	08004cad 	.word	0x08004cad
 8004b9c:	08004cad 	.word	0x08004cad
 8004ba0:	08004cad 	.word	0x08004cad
 8004ba4:	08004c6b 	.word	0x08004c6b
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f9b2 	bl	8004f18 <TIM_OC1_SetConfig>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0208 	orr.w	r2, r2, #8
 8004bc2:	619a      	str	r2, [r3, #24]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0204 	bic.w	r2, r2, #4
 8004bd2:	619a      	str	r2, [r3, #24]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	619a      	str	r2, [r3, #24]
 8004be6:	e064      	b.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f9f8 	bl	8004fe4 <TIM_OC2_SetConfig>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c02:	619a      	str	r2, [r3, #24]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c12:	619a      	str	r2, [r3, #24]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6999      	ldr	r1, [r3, #24]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	021a      	lsls	r2, r3, #8
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	619a      	str	r2, [r3, #24]
 8004c28:	e043      	b.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fa41 	bl	80050b8 <TIM_OC3_SetConfig>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0208 	orr.w	r2, r2, #8
 8004c44:	61da      	str	r2, [r3, #28]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0204 	bic.w	r2, r2, #4
 8004c54:	61da      	str	r2, [r3, #28]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	61da      	str	r2, [r3, #28]
 8004c68:	e023      	b.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fa8b 	bl	800518c <TIM_OC4_SetConfig>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c84:	61da      	str	r2, [r3, #28]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c94:	61da      	str	r2, [r3, #28]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	021a      	lsls	r2, r3, #8
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	61da      	str	r2, [r3, #28]
 8004caa:	e002      	b.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
 8004cac:	2301      	movs	r3, #1
 8004cae:	75fb      	strb	r3, [r7, #23]
 8004cb0:	bf00      	nop
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_ConfigClockSource>:
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e0b4      	b.n	8004e4a <HAL_TIM_ConfigClockSource+0x186>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d18:	d03e      	beq.n	8004d98 <HAL_TIM_ConfigClockSource+0xd4>
 8004d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d1e:	f200 8087 	bhi.w	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d26:	f000 8086 	beq.w	8004e36 <HAL_TIM_ConfigClockSource+0x172>
 8004d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2e:	d87f      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b70      	cmp	r3, #112	@ 0x70
 8004d32:	d01a      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0xa6>
 8004d34:	2b70      	cmp	r3, #112	@ 0x70
 8004d36:	d87b      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b60      	cmp	r3, #96	@ 0x60
 8004d3a:	d050      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x11a>
 8004d3c:	2b60      	cmp	r3, #96	@ 0x60
 8004d3e:	d877      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b50      	cmp	r3, #80	@ 0x50
 8004d42:	d03c      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0xfa>
 8004d44:	2b50      	cmp	r3, #80	@ 0x50
 8004d46:	d873      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b40      	cmp	r3, #64	@ 0x40
 8004d4a:	d058      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x13a>
 8004d4c:	2b40      	cmp	r3, #64	@ 0x40
 8004d4e:	d86f      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b30      	cmp	r3, #48	@ 0x30
 8004d52:	d064      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	2b30      	cmp	r3, #48	@ 0x30
 8004d56:	d86b      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d060      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d867      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05c      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d05a      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x15a>
 8004d68:	e062      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x16c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6899      	ldr	r1, [r3, #8]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f000 facc 	bl	8005316 <TIM_ETR_SetConfig>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	e04f      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f000 fab5 	bl	8005316 <TIM_ETR_SetConfig>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	e03c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 fa2c 	bl	8005228 <TIM_TI1_ConfigInputStage>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2150      	movs	r1, #80	@ 0x50
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fa83 	bl	80052e2 <TIM_ITRx_SetConfig>
 8004ddc:	e02c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f000 fa4a 	bl	8005284 <TIM_TI2_ConfigInputStage>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2160      	movs	r1, #96	@ 0x60
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fa73 	bl	80052e2 <TIM_ITRx_SetConfig>
 8004dfc:	e01c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 fa0c 	bl	8005228 <TIM_TI1_ConfigInputStage>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2140      	movs	r1, #64	@ 0x40
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fa63 	bl	80052e2 <TIM_ITRx_SetConfig>
 8004e1c:	e00c      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f000 fa5a 	bl	80052e2 <TIM_ITRx_SetConfig>
 8004e2e:	e003      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e000      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x174>
 8004e36:	bf00      	nop
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <TIM_Base_SetConfig>:
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a29      	ldr	r2, [pc, #164]	@ (8004f0c <TIM_Base_SetConfig+0xb8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x30>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x30>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a26      	ldr	r2, [pc, #152]	@ (8004f10 <TIM_Base_SetConfig+0xbc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x30>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a25      	ldr	r2, [pc, #148]	@ (8004f14 <TIM_Base_SetConfig+0xc0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x42>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <TIM_Base_SetConfig+0xb8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <TIM_Base_SetConfig+0x62>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea4:	d007      	beq.n	8004eb6 <TIM_Base_SetConfig+0x62>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <TIM_Base_SetConfig+0xbc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_Base_SetConfig+0x62>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a18      	ldr	r2, [pc, #96]	@ (8004f14 <TIM_Base_SetConfig+0xc0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <TIM_Base_SetConfig+0x74>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a07      	ldr	r2, [pc, #28]	@ (8004f0c <TIM_Base_SetConfig+0xb8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <TIM_Base_SetConfig+0xa8>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	615a      	str	r2, [r3, #20]
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800

08004f18 <TIM_OC1_SetConfig>:
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 0201 	bic.w	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 0302 	bic.w	r3, r3, #2
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <TIM_OC1_SetConfig+0xc8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d10c      	bne.n	8004f8e <TIM_OC1_SetConfig+0x76>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0308 	bic.w	r3, r3, #8
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f023 0304 	bic.w	r3, r3, #4
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a13      	ldr	r2, [pc, #76]	@ (8004fe0 <TIM_OC1_SetConfig+0xc8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d111      	bne.n	8004fba <TIM_OC1_SetConfig+0xa2>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00

08004fe4 <TIM_OC2_SetConfig>:
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 0210 	bic.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	621a      	str	r2, [r3, #32]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0320 	bic.w	r3, r3, #32
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <TIM_OC2_SetConfig+0xd0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10d      	bne.n	8005060 <TIM_OC2_SetConfig+0x7c>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a14      	ldr	r2, [pc, #80]	@ (80050b4 <TIM_OC2_SetConfig+0xd0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d113      	bne.n	8005090 <TIM_OC2_SetConfig+0xac>
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	619a      	str	r2, [r3, #24]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	40012c00 	.word	0x40012c00

080050b8 <TIM_OC3_SetConfig>:
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	621a      	str	r2, [r3, #32]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1d      	ldr	r2, [pc, #116]	@ (8005188 <TIM_OC3_SetConfig+0xd0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10d      	bne.n	8005132 <TIM_OC3_SetConfig+0x7a>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a14      	ldr	r2, [pc, #80]	@ (8005188 <TIM_OC3_SetConfig+0xd0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d113      	bne.n	8005162 <TIM_OC3_SetConfig+0xaa>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	61da      	str	r2, [r3, #28]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	621a      	str	r2, [r3, #32]
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00

0800518c <TIM_OC4_SetConfig>:
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	621a      	str	r2, [r3, #32]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005224 <TIM_OC4_SetConfig+0x98>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d109      	bne.n	8005200 <TIM_OC4_SetConfig+0x74>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	61da      	str	r2, [r3, #28]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	641a      	str	r2, [r3, #64]	@ 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	621a      	str	r2, [r3, #32]
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr
 8005224:	40012c00 	.word	0x40012c00

08005228 <TIM_TI1_ConfigInputStage>:
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 030a 	bic.w	r3, r3, #10
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	619a      	str	r2, [r3, #24]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <TIM_TI2_ConfigInputStage>:
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f023 0210 	bic.w	r2, r3, #16
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	031b      	lsls	r3, r3, #12
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	619a      	str	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	621a      	str	r2, [r3, #32]
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <TIM_ITRx_SetConfig>:
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f043 0307 	orr.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <TIM_ETR_SetConfig>:
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	021a      	lsls	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	431a      	orrs	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4313      	orrs	r3, r2
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <TIM_CCxChannelCmd>:
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2201      	movs	r2, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_TIMEx_MasterConfigSynchronization>:
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e046      	b.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005400:	d009      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a12      	ldr	r2, [pc, #72]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a10      	ldr	r2, [pc, #64]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d10c      	bne.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005440:	2300      	movs	r3, #0
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	40012c00 	.word	0x40012c00
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800

08005458 <HAL_UART_Init>:
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_UART_Init+0x12>
 8005466:	2301      	movs	r3, #1
 8005468:	e042      	b.n	80054f0 <HAL_UART_Init+0x98>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_UART_Init+0x2c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fd faec 	bl	8002a5c <HAL_UART_MspInit>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2224      	movs	r2, #36	@ 0x24
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f82b 	bl	80054f8 <UART_SetConfig>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054b0:	611a      	str	r2, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054c0:	615a      	str	r2, [r3, #20]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80054ee:	2300      	movs	r3, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_SetConfig>:
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	611a      	str	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005532:	f023 030c 	bic.w	r3, r3, #12
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	430b      	orrs	r3, r1
 800553e:	60d3      	str	r3, [r2, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	615a      	str	r2, [r3, #20]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2c      	ldr	r2, [pc, #176]	@ (800560c <UART_SetConfig+0x114>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <UART_SetConfig+0x70>
 8005560:	f7fe ffa2 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	e002      	b.n	800556e <UART_SetConfig+0x76>
 8005568:	f7fe ff8a 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009a      	lsls	r2, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	4a22      	ldr	r2, [pc, #136]	@ (8005610 <UART_SetConfig+0x118>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	0119      	lsls	r1, r3, #4
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <UART_SetConfig+0x118>)
 80055a6:	fba3 0302 	umull	r0, r3, r3, r2
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2064      	movs	r0, #100	@ 0x64
 80055ae:	fb00 f303 	mul.w	r3, r0, r3
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	3332      	adds	r3, #50	@ 0x32
 80055b8:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <UART_SetConfig+0x118>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055c4:	4419      	add	r1, r3
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009a      	lsls	r2, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <UART_SetConfig+0x118>)
 80055de:	fba3 0302 	umull	r0, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2064      	movs	r0, #100	@ 0x64
 80055e6:	fb00 f303 	mul.w	r3, r0, r3
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	3332      	adds	r3, #50	@ 0x32
 80055f0:	4a07      	ldr	r2, [pc, #28]	@ (8005610 <UART_SetConfig+0x118>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	440a      	add	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40013800 	.word	0x40013800
 8005610:	51eb851f 	.word	0x51eb851f

08005614 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005618:	4904      	ldr	r1, [pc, #16]	@ (800562c <MX_FATFS_Init+0x18>)
 800561a:	4805      	ldr	r0, [pc, #20]	@ (8005630 <MX_FATFS_Init+0x1c>)
 800561c:	f001 fc8e 	bl	8006f3c <FATFS_LinkDriver>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	4b03      	ldr	r3, [pc, #12]	@ (8005634 <MX_FATFS_Init+0x20>)
 8005626:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005628:	bf00      	nop
 800562a:	bd80      	pop	{r7, pc}
 800562c:	2000047c 	.word	0x2000047c
 8005630:	2000000c 	.word	0x2000000c
 8005634:	20000478 	.word	0x20000478

08005638 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f9cf 	bl	80059e8 <SD_disk_initialize>
 800564a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 faa7 	bl	8005bb4 <SD_disk_status>
 8005666:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4603      	mov	r3, r0
 800567e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005680:	7bf8      	ldrb	r0, [r7, #15]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	f000 faa8 	bl	8005bdc <SD_disk_read>
 800568c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80056a6:	7bf8      	ldrb	r0, [r7, #15]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	f000 faff 	bl	8005cb0 <SD_disk_write>
 80056b2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	603a      	str	r2, [r7, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
 80056c8:	460b      	mov	r3, r1
 80056ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80056cc:	79b9      	ldrb	r1, [r7, #6]
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fb70 	bl	8005db8 <SD_disk_ioctl>
 80056d8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	af00      	add	r7, sp, #0
	Write_GPIO(SD_CS_PORT, SD_CS_PIN, HIGH);
 80056e6:	2201      	movs	r2, #1
 80056e8:	2104      	movs	r1, #4
 80056ea:	2001      	movs	r0, #1
 80056ec:	f7fc fcd4 	bl	8002098 <Write_GPIO>
}
 80056f0:	bf00      	nop
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
	Write_GPIO(SD_CS_PORT, SD_CS_PIN, LOW);
 80056f8:	2200      	movs	r2, #0
 80056fa:	2104      	movs	r1, #4
 80056fc:	2001      	movs	r0, #1
 80056fe:	f7fc fccb 	bl	8002098 <Write_GPIO>
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}

08005706 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	4603      	mov	r3, r0
 800570e:	71fb      	strb	r3, [r7, #7]
	SPI1_TX(&data, 1);
 8005710:	1dfb      	adds	r3, r7, #7
 8005712:	2101      	movs	r1, #1
 8005714:	4618      	mov	r0, r3
 8005716:	f7fc fd57 	bl	80021c8 <SPI1_TX>
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	807b      	strh	r3, [r7, #2]
	SPI1_TX(buffer, len);
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc fd48 	bl	80021c8 <SPI1_TX>
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
  uint8_t data;
  SPI1_RX(&data, 1);
 8005746:	1dfb      	adds	r3, r7, #7
 8005748:	2101      	movs	r1, #1
 800574a:	4618      	mov	r0, r3
 800574c:	f7fc fd78 	bl	8002240 <SPI1_RX>
  return data;
 8005750:	79fb      	ldrb	r3, [r7, #7]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8005762:	f7ff ffed 	bl	8005740 <SPI_RxByte>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800577e:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <SD_ReadyWait+0x30>)
 8005780:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005784:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8005786:	f7ff ffdb 	bl	8005740 <SPI_RxByte>
 800578a:	4603      	mov	r3, r0
 800578c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	2bff      	cmp	r3, #255	@ 0xff
 8005792:	d003      	beq.n	800579c <SD_ReadyWait+0x24>
 8005794:	4b04      	ldr	r3, [pc, #16]	@ (80057a8 <SD_ReadyWait+0x30>)
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f4      	bne.n	8005786 <SD_ReadyWait+0xe>
  return res;
 800579c:	79fb      	ldrb	r3, [r7, #7]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000482 	.word	0x20000482

080057ac <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80057b2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80057b6:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 80057b8:	f7ff ff9c 	bl	80056f4 <DESELECT>
  for(int i = 0; i < 10; i++)
 80057bc:	2300      	movs	r3, #0
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	e005      	b.n	80057ce <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80057c2:	20ff      	movs	r0, #255	@ 0xff
 80057c4:	f7ff ff9f 	bl	8005706 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b09      	cmp	r3, #9
 80057d2:	ddf6      	ble.n	80057c2 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 80057d4:	f7ff ff85 	bl	80056e2 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80057d8:	2340      	movs	r3, #64	@ 0x40
 80057da:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80057ec:	2395      	movs	r3, #149	@ 0x95
 80057ee:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80057f0:	463b      	mov	r3, r7
 80057f2:	2106      	movs	r1, #6
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff94 	bl	8005722 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80057fa:	e002      	b.n	8005802 <SD_PowerOn+0x56>
  {
    cnt--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b01      	subs	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8005802:	f7ff ff9d 	bl	8005740 <SPI_RxByte>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d002      	beq.n	8005812 <SD_PowerOn+0x66>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f4      	bne.n	80057fc <SD_PowerOn+0x50>
  }
  DESELECT();
 8005812:	f7ff ff6f 	bl	80056f4 <DESELECT>
  SPI_TxByte(0XFF);
 8005816:	20ff      	movs	r0, #255	@ 0xff
 8005818:	f7ff ff75 	bl	8005706 <SPI_TxByte>
  PowerFlag = 1;
 800581c:	4b03      	ldr	r3, [pc, #12]	@ (800582c <SD_PowerOn+0x80>)
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000485 	.word	0x20000485

08005830 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8005834:	4b03      	ldr	r3, [pc, #12]	@ (8005844 <SD_PowerOff+0x14>)
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
}
 800583a:	bf00      	nop
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000485 	.word	0x20000485

08005848 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800584c:	4b02      	ldr	r3, [pc, #8]	@ (8005858 <SD_CheckPower+0x10>)
 800584e:	781b      	ldrb	r3, [r3, #0]
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	20000485 	.word	0x20000485

0800585c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8005866:	4b13      	ldr	r3, [pc, #76]	@ (80058b4 <SD_RxDataBlock+0x58>)
 8005868:	22c8      	movs	r2, #200	@ 0xc8
 800586a:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800586c:	f7ff ff68 	bl	8005740 <SPI_RxByte>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	2bff      	cmp	r3, #255	@ 0xff
 8005878:	d103      	bne.n	8005882 <SD_RxDataBlock+0x26>
 800587a:	4b0e      	ldr	r3, [pc, #56]	@ (80058b4 <SD_RxDataBlock+0x58>)
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f4      	bne.n	800586c <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2bfe      	cmp	r3, #254	@ 0xfe
 8005886:	d001      	beq.n	800588c <SD_RxDataBlock+0x30>
 8005888:	2300      	movs	r3, #0
 800588a:	e00f      	b.n	80058ac <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ff61 	bl	800575a <SPI_RxBytePtr>
  } while(len--);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	1e5a      	subs	r2, r3, #1
 800589c:	603a      	str	r2, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f4      	bne.n	800588c <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80058a2:	f7ff ff4d 	bl	8005740 <SPI_RxByte>
  SPI_RxByte();
 80058a6:	f7ff ff4b 	bl	8005740 <SPI_RxByte>
  return TRUE;
 80058aa:	2301      	movs	r3, #1
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000480 	.word	0x20000480

080058b8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80058c8:	f7ff ff56 	bl	8005778 <SD_ReadyWait>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2bff      	cmp	r3, #255	@ 0xff
 80058d0:	d001      	beq.n	80058d6 <SD_TxDataBlock+0x1e>
 80058d2:	2300      	movs	r3, #0
 80058d4:	e02f      	b.n	8005936 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff ff14 	bl	8005706 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	2bfd      	cmp	r3, #253	@ 0xfd
 80058e2:	d020      	beq.n	8005926 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80058e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff1a 	bl	8005722 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80058ee:	f7ff ff27 	bl	8005740 <SPI_RxByte>
    SPI_RxByte();
 80058f2:	f7ff ff25 	bl	8005740 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80058f6:	e00b      	b.n	8005910 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80058f8:	f7ff ff22 	bl	8005740 <SPI_RxByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	2b05      	cmp	r3, #5
 8005908:	d006      	beq.n	8005918 <SD_TxDataBlock+0x60>
      i++;
 800590a:	7bbb      	ldrb	r3, [r7, #14]
 800590c:	3301      	adds	r3, #1
 800590e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b40      	cmp	r3, #64	@ 0x40
 8005914:	d9f0      	bls.n	80058f8 <SD_TxDataBlock+0x40>
 8005916:	e000      	b.n	800591a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8005918:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800591a:	bf00      	nop
 800591c:	f7ff ff10 	bl	8005740 <SPI_RxByte>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0fa      	beq.n	800591c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2b05      	cmp	r3, #5
 800592e:	d101      	bne.n	8005934 <SD_TxDataBlock+0x7c>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <SD_TxDataBlock+0x7e>

  return FALSE;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	4603      	mov	r3, r0
 8005946:	6039      	str	r1, [r7, #0]
 8005948:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800594a:	f7ff ff15 	bl	8005778 <SD_ReadyWait>
 800594e:	4603      	mov	r3, r0
 8005950:	2bff      	cmp	r3, #255	@ 0xff
 8005952:	d001      	beq.n	8005958 <SD_SendCmd+0x1a>
 8005954:	23ff      	movs	r3, #255	@ 0xff
 8005956:	e042      	b.n	80059de <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fed3 	bl	8005706 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fecd 	bl	8005706 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	0c1b      	lsrs	r3, r3, #16
 8005970:	b2db      	uxtb	r3, r3
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fec7 	bl	8005706 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	b2db      	uxtb	r3, r3
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff fec1 	bl	8005706 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff febc 	bl	8005706 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d102      	bne.n	800599a <SD_SendCmd+0x5c>
 8005994:	2395      	movs	r3, #149	@ 0x95
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	e007      	b.n	80059aa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	2b48      	cmp	r3, #72	@ 0x48
 800599e:	d102      	bne.n	80059a6 <SD_SendCmd+0x68>
 80059a0:	2387      	movs	r3, #135	@ 0x87
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e001      	b.n	80059aa <SD_SendCmd+0x6c>
  else crc = 1;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff feaa 	bl	8005706 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b4c      	cmp	r3, #76	@ 0x4c
 80059b6:	d101      	bne.n	80059bc <SD_SendCmd+0x7e>
 80059b8:	f7ff fec2 	bl	8005740 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 80059bc:	230a      	movs	r3, #10
 80059be:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80059c0:	f7ff febe 	bl	8005740 <SPI_RxByte>
 80059c4:	4603      	mov	r3, r0
 80059c6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80059c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da05      	bge.n	80059dc <SD_SendCmd+0x9e>
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	73bb      	strb	r3, [r7, #14]
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f1      	bne.n	80059c0 <SD_SendCmd+0x82>

  return res;
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <SD_disk_initialize+0x14>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0d1      	b.n	8005ba0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80059fc:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba8 <SD_disk_initialize+0x1c0>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <SD_disk_initialize+0x2a>
 8005a0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ba8 <SD_disk_initialize+0x1c0>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	e0c6      	b.n	8005ba0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8005a12:	f7ff fecb 	bl	80057ac <SD_PowerOn>
  /* slave select */
  SELECT();
 8005a16:	f7ff fe64 	bl	80056e2 <SELECT>
  /* check disk type */
  type = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8005a1e:	2100      	movs	r1, #0
 8005a20:	2040      	movs	r0, #64	@ 0x40
 8005a22:	f7ff ff8c 	bl	800593e <SD_SendCmd>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	f040 80a1 	bne.w	8005b70 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8005a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bac <SD_disk_initialize+0x1c4>)
 8005a30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a34:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005a36:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005a3a:	2048      	movs	r0, #72	@ 0x48
 8005a3c:	f7ff ff7f 	bl	800593e <SD_SendCmd>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d155      	bne.n	8005af2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
 8005a4a:	e00c      	b.n	8005a66 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8005a4c:	7bfc      	ldrb	r4, [r7, #15]
 8005a4e:	f7ff fe77 	bl	8005740 <SPI_RxByte>
 8005a52:	4603      	mov	r3, r0
 8005a54:	461a      	mov	r2, r3
 8005a56:	f104 0310 	add.w	r3, r4, #16
 8005a5a:	443b      	add	r3, r7
 8005a5c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	3301      	adds	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d9ef      	bls.n	8005a4c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005a6c:	7abb      	ldrb	r3, [r7, #10]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d17e      	bne.n	8005b70 <SD_disk_initialize+0x188>
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	2baa      	cmp	r3, #170	@ 0xaa
 8005a76:	d17b      	bne.n	8005b70 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005a78:	2100      	movs	r1, #0
 8005a7a:	2077      	movs	r0, #119	@ 0x77
 8005a7c:	f7ff ff5f 	bl	800593e <SD_SendCmd>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d807      	bhi.n	8005a96 <SD_disk_initialize+0xae>
 8005a86:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005a8a:	2069      	movs	r0, #105	@ 0x69
 8005a8c:	f7ff ff57 	bl	800593e <SD_SendCmd>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8005a96:	4b45      	ldr	r3, [pc, #276]	@ (8005bac <SD_disk_initialize+0x1c4>)
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1ec      	bne.n	8005a78 <SD_disk_initialize+0x90>
 8005a9e:	e000      	b.n	8005aa2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005aa0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005aa2:	4b42      	ldr	r3, [pc, #264]	@ (8005bac <SD_disk_initialize+0x1c4>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d062      	beq.n	8005b70 <SD_disk_initialize+0x188>
 8005aaa:	2100      	movs	r1, #0
 8005aac:	207a      	movs	r0, #122	@ 0x7a
 8005aae:	f7ff ff46 	bl	800593e <SD_SendCmd>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d15b      	bne.n	8005b70 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]
 8005abc:	e00c      	b.n	8005ad8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8005abe:	7bfc      	ldrb	r4, [r7, #15]
 8005ac0:	f7ff fe3e 	bl	8005740 <SPI_RxByte>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f104 0310 	add.w	r3, r4, #16
 8005acc:	443b      	add	r3, r7
 8005ace:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d9ef      	bls.n	8005abe <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005ade:	7a3b      	ldrb	r3, [r7, #8]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <SD_disk_initialize+0x104>
 8005ae8:	230c      	movs	r3, #12
 8005aea:	e000      	b.n	8005aee <SD_disk_initialize+0x106>
 8005aec:	2304      	movs	r3, #4
 8005aee:	73bb      	strb	r3, [r7, #14]
 8005af0:	e03e      	b.n	8005b70 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005af2:	2100      	movs	r1, #0
 8005af4:	2077      	movs	r0, #119	@ 0x77
 8005af6:	f7ff ff22 	bl	800593e <SD_SendCmd>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d808      	bhi.n	8005b12 <SD_disk_initialize+0x12a>
 8005b00:	2100      	movs	r1, #0
 8005b02:	2069      	movs	r0, #105	@ 0x69
 8005b04:	f7ff ff1b 	bl	800593e <SD_SendCmd>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d801      	bhi.n	8005b12 <SD_disk_initialize+0x12a>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e000      	b.n	8005b14 <SD_disk_initialize+0x12c>
 8005b12:	2301      	movs	r3, #1
 8005b14:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d10e      	bne.n	8005b3a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	2077      	movs	r0, #119	@ 0x77
 8005b20:	f7ff ff0d 	bl	800593e <SD_SendCmd>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d80e      	bhi.n	8005b48 <SD_disk_initialize+0x160>
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	2069      	movs	r0, #105	@ 0x69
 8005b2e:	f7ff ff06 	bl	800593e <SD_SendCmd>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d107      	bne.n	8005b48 <SD_disk_initialize+0x160>
 8005b38:	e00c      	b.n	8005b54 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	2041      	movs	r0, #65	@ 0x41
 8005b3e:	f7ff fefe 	bl	800593e <SD_SendCmd>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8005b48:	4b18      	ldr	r3, [pc, #96]	@ (8005bac <SD_disk_initialize+0x1c4>)
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e2      	bne.n	8005b16 <SD_disk_initialize+0x12e>
 8005b50:	e000      	b.n	8005b54 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005b52:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005b54:	4b15      	ldr	r3, [pc, #84]	@ (8005bac <SD_disk_initialize+0x1c4>)
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <SD_disk_initialize+0x184>
 8005b5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b60:	2050      	movs	r0, #80	@ 0x50
 8005b62:	f7ff feec 	bl	800593e <SD_SendCmd>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <SD_disk_initialize+0x188>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8005b70:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb0 <SD_disk_initialize+0x1c8>)
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8005b76:	f7ff fdbd 	bl	80056f4 <DESELECT>
  SPI_RxByte();
 8005b7a:	f7ff fde1 	bl	8005740 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8005b84:	4b08      	ldr	r3, [pc, #32]	@ (8005ba8 <SD_disk_initialize+0x1c0>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <SD_disk_initialize+0x1c0>)
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	e001      	b.n	8005b9a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8005b96:	f7ff fe4b 	bl	8005830 <SD_PowerOff>
  }
  return Stat;
 8005b9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ba8 <SD_disk_initialize+0x1c0>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd90      	pop	{r4, r7, pc}
 8005ba8:	20000020 	.word	0x20000020
 8005bac:	20000480 	.word	0x20000480
 8005bb0:	20000484 	.word	0x20000484

08005bb4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <SD_disk_status+0x14>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e002      	b.n	8005bce <SD_disk_status+0x1a>
  return Stat;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	@ (8005bd8 <SD_disk_status+0x24>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b2db      	uxtb	r3, r3
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr
 8005bd8:	20000020 	.word	0x20000020

08005bdc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <SD_disk_read+0x1c>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <SD_disk_read+0x20>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	e051      	b.n	8005ca0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8005ca8 <SD_disk_read+0xcc>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <SD_disk_read+0x32>
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e048      	b.n	8005ca0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8005c0e:	4b27      	ldr	r3, [pc, #156]	@ (8005cac <SD_disk_read+0xd0>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <SD_disk_read+0x44>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	607b      	str	r3, [r7, #4]

  SELECT();
 8005c20:	f7ff fd5f 	bl	80056e2 <SELECT>

  if (count == 1)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d111      	bne.n	8005c4e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	2051      	movs	r0, #81	@ 0x51
 8005c2e:	f7ff fe86 	bl	800593e <SD_SendCmd>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d129      	bne.n	8005c8c <SD_disk_read+0xb0>
 8005c38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c3c:	68b8      	ldr	r0, [r7, #8]
 8005c3e:	f7ff fe0d 	bl	800585c <SD_RxDataBlock>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d021      	beq.n	8005c8c <SD_disk_read+0xb0>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	e01e      	b.n	8005c8c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	2052      	movs	r0, #82	@ 0x52
 8005c52:	f7ff fe74 	bl	800593e <SD_SendCmd>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d117      	bne.n	8005c8c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8005c5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c60:	68b8      	ldr	r0, [r7, #8]
 8005c62:	f7ff fdfb 	bl	800585c <SD_RxDataBlock>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <SD_disk_read+0xa6>
        buff += 512;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005c72:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ed      	bne.n	8005c5c <SD_disk_read+0x80>
 8005c80:	e000      	b.n	8005c84 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8005c82:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8005c84:	2100      	movs	r1, #0
 8005c86:	204c      	movs	r0, #76	@ 0x4c
 8005c88:	f7ff fe59 	bl	800593e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8005c8c:	f7ff fd32 	bl	80056f4 <DESELECT>
  SPI_RxByte();
 8005c90:	f7ff fd56 	bl	8005740 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bf14      	ite	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	2300      	moveq	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000020 	.word	0x20000020
 8005cac:	20000484 	.word	0x20000484

08005cb0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <SD_disk_write+0x1c>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <SD_disk_write+0x20>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	e06b      	b.n	8005da8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005cd0:	4b37      	ldr	r3, [pc, #220]	@ (8005db0 <SD_disk_write+0x100>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <SD_disk_write+0x32>
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e062      	b.n	8005da8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8005ce2:	4b33      	ldr	r3, [pc, #204]	@ (8005db0 <SD_disk_write+0x100>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <SD_disk_write+0x44>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e059      	b.n	8005da8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8005cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8005db4 <SD_disk_write+0x104>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <SD_disk_write+0x56>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	025b      	lsls	r3, r3, #9
 8005d04:	607b      	str	r3, [r7, #4]

  SELECT();
 8005d06:	f7ff fcec 	bl	80056e2 <SELECT>

  if (count == 1)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d110      	bne.n	8005d32 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	2058      	movs	r0, #88	@ 0x58
 8005d14:	f7ff fe13 	bl	800593e <SD_SendCmd>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d13a      	bne.n	8005d94 <SD_disk_write+0xe4>
 8005d1e:	21fe      	movs	r1, #254	@ 0xfe
 8005d20:	68b8      	ldr	r0, [r7, #8]
 8005d22:	f7ff fdc9 	bl	80058b8 <SD_TxDataBlock>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d033      	beq.n	8005d94 <SD_disk_write+0xe4>
      count = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	e030      	b.n	8005d94 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8005d32:	4b20      	ldr	r3, [pc, #128]	@ (8005db4 <SD_disk_write+0x104>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8005d3e:	2100      	movs	r1, #0
 8005d40:	2077      	movs	r0, #119	@ 0x77
 8005d42:	f7ff fdfc 	bl	800593e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	2057      	movs	r0, #87	@ 0x57
 8005d4a:	f7ff fdf8 	bl	800593e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	2059      	movs	r0, #89	@ 0x59
 8005d52:	f7ff fdf4 	bl	800593e <SD_SendCmd>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11b      	bne.n	8005d94 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005d5c:	21fc      	movs	r1, #252	@ 0xfc
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f7ff fdaa 	bl	80058b8 <SD_TxDataBlock>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <SD_disk_write+0xd0>
        buff += 512;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005d70:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ee      	bne.n	8005d5c <SD_disk_write+0xac>
 8005d7e:	e000      	b.n	8005d82 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005d80:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8005d82:	21fd      	movs	r1, #253	@ 0xfd
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7ff fd97 	bl	80058b8 <SD_TxDataBlock>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <SD_disk_write+0xe4>
      {
        count = 1;
 8005d90:	2301      	movs	r3, #1
 8005d92:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8005d94:	f7ff fcae 	bl	80056f4 <DESELECT>
  SPI_RxByte();
 8005d98:	f7ff fcd2 	bl	8005740 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000020 	.word	0x20000020
 8005db4:	20000484 	.word	0x20000484

08005db8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b08b      	sub	sp, #44	@ 0x2c
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	603a      	str	r2, [r7, #0]
 8005dc2:	71fb      	strb	r3, [r7, #7]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <SD_disk_ioctl+0x1e>
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	e113      	b.n	8005ffe <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8005ddc:	79bb      	ldrb	r3, [r7, #6]
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	d124      	bne.n	8005e2c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d012      	beq.n	8005e10 <SD_disk_ioctl+0x58>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	dc1a      	bgt.n	8005e24 <SD_disk_ioctl+0x6c>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <SD_disk_ioctl+0x40>
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d006      	beq.n	8005e04 <SD_disk_ioctl+0x4c>
 8005df6:	e015      	b.n	8005e24 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8005df8:	f7ff fd1a 	bl	8005830 <SD_PowerOff>
      res = RES_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005e02:	e0fa      	b.n	8005ffa <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8005e04:	f7ff fcd2 	bl	80057ac <SD_PowerOn>
      res = RES_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005e0e:	e0f4      	b.n	8005ffa <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	1c5c      	adds	r4, r3, #1
 8005e14:	f7ff fd18 	bl	8005848 <SD_CheckPower>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005e22:	e0ea      	b.n	8005ffa <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e2a:	e0e6      	b.n	8005ffa <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8005e2c:	4b76      	ldr	r3, [pc, #472]	@ (8006008 <SD_disk_ioctl+0x250>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e0df      	b.n	8005ffe <SD_disk_ioctl+0x246>
    }
    SELECT();
 8005e3e:	f7ff fc50 	bl	80056e2 <SELECT>
    switch (ctrl)
 8005e42:	79bb      	ldrb	r3, [r7, #6]
 8005e44:	2b0d      	cmp	r3, #13
 8005e46:	f200 80c9 	bhi.w	8005fdc <SD_disk_ioctl+0x224>
 8005e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e50 <SD_disk_ioctl+0x98>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005f47 	.word	0x08005f47
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005f37 	.word	0x08005f37
 8005e5c:	08005fdd 	.word	0x08005fdd
 8005e60:	08005fdd 	.word	0x08005fdd
 8005e64:	08005fdd 	.word	0x08005fdd
 8005e68:	08005fdd 	.word	0x08005fdd
 8005e6c:	08005fdd 	.word	0x08005fdd
 8005e70:	08005fdd 	.word	0x08005fdd
 8005e74:	08005fdd 	.word	0x08005fdd
 8005e78:	08005fdd 	.word	0x08005fdd
 8005e7c:	08005f59 	.word	0x08005f59
 8005e80:	08005f7d 	.word	0x08005f7d
 8005e84:	08005fa1 	.word	0x08005fa1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8005e88:	2100      	movs	r1, #0
 8005e8a:	2049      	movs	r0, #73	@ 0x49
 8005e8c:	f7ff fd57 	bl	800593e <SD_SendCmd>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 80a6 	bne.w	8005fe4 <SD_disk_ioctl+0x22c>
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	2110      	movs	r1, #16
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff fcdc 	bl	800585c <SD_RxDataBlock>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 809c 	beq.w	8005fe4 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8005eac:	7b3b      	ldrb	r3, [r7, #12]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10d      	bne.n	8005ed2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005eb6:	7d7b      	ldrb	r3, [r7, #21]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	7d3b      	ldrb	r3, [r7, #20]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	029a      	lsls	r2, r3, #10
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e02d      	b.n	8005f2e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005ed2:	7c7b      	ldrb	r3, [r7, #17]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	7dbb      	ldrb	r3, [r7, #22]
 8005edc:	09db      	lsrs	r3, r3, #7
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	7d7b      	ldrb	r3, [r7, #21]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f003 0306 	and.w	r3, r3, #6
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005efa:	7d3b      	ldrb	r3, [r7, #20]
 8005efc:	099b      	lsrs	r3, r3, #6
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	4413      	add	r3, r2
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	7cbb      	ldrb	r3, [r7, #18]
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4413      	add	r3, r2
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005f20:	8bfa      	ldrh	r2, [r7, #30]
 8005f22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f26:	3b09      	subs	r3, #9
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8005f34:	e056      	b.n	8005fe4 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f3c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005f44:	e055      	b.n	8005ff2 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8005f46:	f7ff fc17 	bl	8005778 <SD_ReadyWait>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2bff      	cmp	r3, #255	@ 0xff
 8005f4e:	d14b      	bne.n	8005fe8 <SD_disk_ioctl+0x230>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005f56:	e047      	b.n	8005fe8 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005f58:	2100      	movs	r1, #0
 8005f5a:	2049      	movs	r0, #73	@ 0x49
 8005f5c:	f7ff fcef 	bl	800593e <SD_SendCmd>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d142      	bne.n	8005fec <SD_disk_ioctl+0x234>
 8005f66:	2110      	movs	r1, #16
 8005f68:	6a38      	ldr	r0, [r7, #32]
 8005f6a:	f7ff fc77 	bl	800585c <SD_RxDataBlock>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d03b      	beq.n	8005fec <SD_disk_ioctl+0x234>
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005f7a:	e037      	b.n	8005fec <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	204a      	movs	r0, #74	@ 0x4a
 8005f80:	f7ff fcdd 	bl	800593e <SD_SendCmd>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d132      	bne.n	8005ff0 <SD_disk_ioctl+0x238>
 8005f8a:	2110      	movs	r1, #16
 8005f8c:	6a38      	ldr	r0, [r7, #32]
 8005f8e:	f7ff fc65 	bl	800585c <SD_RxDataBlock>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d02b      	beq.n	8005ff0 <SD_disk_ioctl+0x238>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005f9e:	e027      	b.n	8005ff0 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	207a      	movs	r0, #122	@ 0x7a
 8005fa4:	f7ff fccb 	bl	800593e <SD_SendCmd>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d116      	bne.n	8005fdc <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005fb4:	e00b      	b.n	8005fce <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8005fb6:	6a3c      	ldr	r4, [r7, #32]
 8005fb8:	1c63      	adds	r3, r4, #1
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	f7ff fbc0 	bl	8005740 <SPI_RxByte>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8005fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005fce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d9ef      	bls.n	8005fb6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005fe2:	e006      	b.n	8005ff2 <SD_disk_ioctl+0x23a>
      break;
 8005fe4:	bf00      	nop
 8005fe6:	e004      	b.n	8005ff2 <SD_disk_ioctl+0x23a>
      break;
 8005fe8:	bf00      	nop
 8005fea:	e002      	b.n	8005ff2 <SD_disk_ioctl+0x23a>
      break;
 8005fec:	bf00      	nop
 8005fee:	e000      	b.n	8005ff2 <SD_disk_ioctl+0x23a>
      break;
 8005ff0:	bf00      	nop
    }
    DESELECT();
 8005ff2:	f7ff fb7f 	bl	80056f4 <DESELECT>
    SPI_RxByte();
 8005ff6:	f7ff fba3 	bl	8005740 <SPI_RxByte>
  }
  return res;
 8005ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	372c      	adds	r7, #44	@ 0x2c
 8006002:	46bd      	mov	sp, r7
 8006004:	bd90      	pop	{r4, r7, pc}
 8006006:	bf00      	nop
 8006008:	20000020 	.word	0x20000020

0800600c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	4a08      	ldr	r2, [pc, #32]	@ (800603c <disk_status+0x30>)
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	79fa      	ldrb	r2, [r7, #7]
 8006024:	4905      	ldr	r1, [pc, #20]	@ (800603c <disk_status+0x30>)
 8006026:	440a      	add	r2, r1
 8006028:	7a12      	ldrb	r2, [r2, #8]
 800602a:	4610      	mov	r0, r2
 800602c:	4798      	blx	r3
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	200004a8 	.word	0x200004a8

08006040 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	4a0d      	ldr	r2, [pc, #52]	@ (8006088 <disk_initialize+0x48>)
 8006052:	5cd3      	ldrb	r3, [r2, r3]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d111      	bne.n	800607c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	4a0b      	ldr	r2, [pc, #44]	@ (8006088 <disk_initialize+0x48>)
 800605c:	2101      	movs	r1, #1
 800605e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	4a09      	ldr	r2, [pc, #36]	@ (8006088 <disk_initialize+0x48>)
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	79fa      	ldrb	r2, [r7, #7]
 800606e:	4906      	ldr	r1, [pc, #24]	@ (8006088 <disk_initialize+0x48>)
 8006070:	440a      	add	r2, r1
 8006072:	7a12      	ldrb	r2, [r2, #8]
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200004a8 	.word	0x200004a8

0800608c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	4a0a      	ldr	r2, [pc, #40]	@ (80060c8 <disk_read+0x3c>)
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	689c      	ldr	r4, [r3, #8]
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	4a07      	ldr	r2, [pc, #28]	@ (80060c8 <disk_read+0x3c>)
 80060ac:	4413      	add	r3, r2
 80060ae:	7a18      	ldrb	r0, [r3, #8]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	47a0      	blx	r4
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200004a8 	.word	0x200004a8

080060cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	4a0a      	ldr	r2, [pc, #40]	@ (8006108 <disk_write+0x3c>)
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68dc      	ldr	r4, [r3, #12]
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	4a07      	ldr	r2, [pc, #28]	@ (8006108 <disk_write+0x3c>)
 80060ec:	4413      	add	r3, r2
 80060ee:	7a18      	ldrb	r0, [r3, #8]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	47a0      	blx	r4
 80060f8:	4603      	mov	r3, r0
 80060fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd90      	pop	{r4, r7, pc}
 8006106:	bf00      	nop
 8006108:	200004a8 	.word	0x200004a8

0800610c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	603a      	str	r2, [r7, #0]
 8006116:	71fb      	strb	r3, [r7, #7]
 8006118:	460b      	mov	r3, r1
 800611a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	4a09      	ldr	r2, [pc, #36]	@ (8006144 <disk_ioctl+0x38>)
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	79fa      	ldrb	r2, [r7, #7]
 800612a:	4906      	ldr	r1, [pc, #24]	@ (8006144 <disk_ioctl+0x38>)
 800612c:	440a      	add	r2, r1
 800612e:	7a10      	ldrb	r0, [r2, #8]
 8006130:	79b9      	ldrb	r1, [r7, #6]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4798      	blx	r3
 8006136:	4603      	mov	r3, r0
 8006138:	73fb      	strb	r3, [r7, #15]
  return res;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	200004a8 	.word	0x200004a8

08006148 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e016      	b.n	8006184 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006156:	4910      	ldr	r1, [pc, #64]	@ (8006198 <clear_lock+0x50>)
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d108      	bne.n	800617e <clear_lock+0x36>
 800616c:	490a      	ldr	r1, [pc, #40]	@ (8006198 <clear_lock+0x50>)
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4613      	mov	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d9e5      	bls.n	8006156 <clear_lock+0xe>
	}
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	20000490 	.word	0x20000490

0800619c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ae:	791b      	ldrb	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d040      	beq.n	8006236 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c4:	7858      	ldrb	r0, [r3, #1]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	2301      	movs	r3, #1
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	f7ff ff7e 	bl	80060cc <disk_write>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <sync_window+0x40>
			res = FR_DISK_ERR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
 80061da:	e02c      	b.n	8006236 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061e2:	2200      	movs	r2, #0
 80061e4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d21b      	bcs.n	8006236 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006204:	78db      	ldrb	r3, [r3, #3]
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	e012      	b.n	8006230 <sync_window+0x94>
					wsect += fs->fsize;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800621e:	7858      	ldrb	r0, [r3, #1]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	2301      	movs	r3, #1
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	f7ff ff51 	bl	80060cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3b01      	subs	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d8e9      	bhi.n	800620a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d01e      	beq.n	800629a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff ff9d 	bl	800619c <sync_window>
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006272:	7858      	ldrb	r0, [r3, #1]
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	2301      	movs	r3, #1
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	f7ff ff07 	bl	800608c <disk_read>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006294:	461a      	mov	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d906      	bls.n	80062c2 <get_fat+0x1e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <get_fat+0x24>
		val = 1;	/* Internal error */
 80062c2:	2301      	movs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	e0e3      	b.n	8006490 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80062c8:	f04f 33ff 	mov.w	r3, #4294967295
 80062cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	f000 8097 	beq.w	800640a <get_fat+0x166>
 80062dc:	2b03      	cmp	r3, #3
 80062de:	f300 80cd 	bgt.w	800647c <get_fat+0x1d8>
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d002      	beq.n	80062ec <get_fat+0x48>
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d05e      	beq.n	80063a8 <get_fat+0x104>
 80062ea:	e0c7      	b.n	800647c <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006308:	895b      	ldrh	r3, [r3, #10]
 800630a:	4619      	mov	r1, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006312:	4413      	add	r3, r2
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff ff92 	bl	8006240 <move_window>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 80af 	bne.w	8006482 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	60fa      	str	r2, [r7, #12]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006330:	8952      	ldrh	r2, [r2, #10]
 8006332:	fbb3 f1f2 	udiv	r1, r3, r2
 8006336:	fb01 f202 	mul.w	r2, r1, r2
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	5cd3      	ldrb	r3, [r2, r3]
 8006340:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006348:	6a1a      	ldr	r2, [r3, #32]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006350:	895b      	ldrh	r3, [r3, #10]
 8006352:	4619      	mov	r1, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	fbb3 f3f1 	udiv	r3, r3, r1
 800635a:	4413      	add	r3, r2
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ff6e 	bl	8006240 <move_window>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 808d 	bne.w	8006486 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006372:	895b      	ldrh	r3, [r3, #10]
 8006374:	461a      	mov	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	fbb3 f1f2 	udiv	r1, r3, r2
 800637c:	fb01 f202 	mul.w	r2, r1, r2
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	5cd3      	ldrb	r3, [r2, r3]
 8006386:	021b      	lsls	r3, r3, #8
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4313      	orrs	r3, r2
 800638c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <get_fat+0xfa>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	e002      	b.n	80063a4 <get_fat+0x100>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a4:	617b      	str	r3, [r7, #20]
			break;
 80063a6:	e073      	b.n	8006490 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b6:	895b      	ldrh	r3, [r3, #10]
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4619      	mov	r1, r3
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80063c4:	4413      	add	r3, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff39 	bl	8006240 <move_window>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d15a      	bne.n	800648a <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063de:	8952      	ldrh	r2, [r2, #10]
 80063e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063e4:	fb01 f202 	mul.w	r2, r1, r2
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	3301      	adds	r3, #1
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	b21a      	sxth	r2, r3
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	b21b      	sxth	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b21b      	sxth	r3, r3
 8006404:	b29b      	uxth	r3, r3
 8006406:	617b      	str	r3, [r7, #20]
			break;
 8006408:	e042      	b.n	8006490 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006418:	895b      	ldrh	r3, [r3, #10]
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	b29b      	uxth	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	fbb3 f3f1 	udiv	r3, r3, r1
 8006426:	4413      	add	r3, r2
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff ff08 	bl	8006240 <move_window>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d12b      	bne.n	800648e <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006440:	8952      	ldrh	r2, [r2, #10]
 8006442:	fbb3 f1f2 	udiv	r1, r3, r2
 8006446:	fb01 f202 	mul.w	r2, r1, r2
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3303      	adds	r3, #3
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	061a      	lsls	r2, r3, #24
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3302      	adds	r3, #2
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	041b      	lsls	r3, r3, #16
 8006462:	431a      	orrs	r2, r3
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	3301      	adds	r3, #1
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	4313      	orrs	r3, r2
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	7812      	ldrb	r2, [r2, #0]
 8006472:	4313      	orrs	r3, r2
 8006474:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006478:	617b      	str	r3, [r7, #20]
			break;
 800647a:	e009      	b.n	8006490 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800647c:	2301      	movs	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e006      	b.n	8006490 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800648e:	bf00      	nop
		}
	}

	return val;
 8006490:	697b      	ldr	r3, [r7, #20]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800649a:	b480      	push	{r7}
 800649c:	b087      	sub	sp, #28
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295
 80064a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d031      	beq.n	8006514 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e002      	b.n	80064be <get_ldnumber+0x24>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3301      	adds	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b1f      	cmp	r3, #31
 80064c4:	d903      	bls.n	80064ce <get_ldnumber+0x34>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80064cc:	d1f4      	bne.n	80064b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80064d4:	d11c      	bne.n	8006510 <get_ldnumber+0x76>
			tp = *path;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	60fa      	str	r2, [r7, #12]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	3b30      	subs	r3, #48	@ 0x30
 80064e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b09      	cmp	r3, #9
 80064ec:	d80e      	bhi.n	800650c <get_ldnumber+0x72>
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d10a      	bne.n	800650c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d107      	bne.n	800650c <get_ldnumber+0x72>
					vol = (int)i;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3301      	adds	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	e002      	b.n	8006516 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006514:	693b      	ldr	r3, [r7, #16]
}
 8006516:	4618      	mov	r0, r3
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006530:	2200      	movs	r2, #0
 8006532:	711a      	strb	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653a:	461a      	mov	r2, r3
 800653c:	f04f 33ff 	mov.w	r3, #4294967295
 8006540:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fe7b 	bl	8006240 <move_window>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <check_fs+0x34>
		return 3;
 8006550:	2303      	movs	r3, #3
 8006552:	e04a      	b.n	80065ea <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800655a:	3301      	adds	r3, #1
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	b21a      	sxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006568:	b21b      	sxth	r3, r3
 800656a:	4313      	orrs	r3, r2
 800656c:	b21b      	sxth	r3, r3
 800656e:	4a21      	ldr	r2, [pc, #132]	@ (80065f4 <check_fs+0xd4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d001      	beq.n	8006578 <check_fs+0x58>
		return 2;
 8006574:	2302      	movs	r3, #2
 8006576:	e038      	b.n	80065ea <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3336      	adds	r3, #54	@ 0x36
 800657c:	3303      	adds	r3, #3
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	061a      	lsls	r2, r3, #24
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3336      	adds	r3, #54	@ 0x36
 8006586:	3302      	adds	r3, #2
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3336      	adds	r3, #54	@ 0x36
 8006592:	3301      	adds	r3, #1
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	4313      	orrs	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80065a6:	4a14      	ldr	r2, [pc, #80]	@ (80065f8 <check_fs+0xd8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d101      	bne.n	80065b0 <check_fs+0x90>
		return 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	e01c      	b.n	80065ea <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3352      	adds	r3, #82	@ 0x52
 80065b4:	3303      	adds	r3, #3
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	061a      	lsls	r2, r3, #24
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3352      	adds	r3, #82	@ 0x52
 80065be:	3302      	adds	r3, #2
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3352      	adds	r3, #82	@ 0x52
 80065ca:	3301      	adds	r3, #1
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	4313      	orrs	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80065d8:	4313      	orrs	r3, r2
 80065da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80065de:	4a06      	ldr	r2, [pc, #24]	@ (80065f8 <check_fs+0xd8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d101      	bne.n	80065e8 <check_fs+0xc8>
		return 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <check_fs+0xca>

	return 1;
 80065e8:	2301      	movs	r3, #1
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	ffffaa55 	.word	0xffffaa55
 80065f8:	00544146 	.word	0x00544146

080065fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b096      	sub	sp, #88	@ 0x58
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006610:	68b8      	ldr	r0, [r7, #8]
 8006612:	f7ff ff42 	bl	800649a <get_ldnumber>
 8006616:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800661a:	2b00      	cmp	r3, #0
 800661c:	da01      	bge.n	8006622 <find_volume+0x26>
 800661e:	230b      	movs	r3, #11
 8006620:	e311      	b.n	8006c46 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006622:	4a98      	ldr	r2, [pc, #608]	@ (8006884 <find_volume+0x288>)
 8006624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <find_volume+0x3a>
 8006632:	230c      	movs	r3, #12
 8006634:	e307      	b.n	8006c46 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800663a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01c      	beq.n	8006682 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fcdb 	bl	800600c <disk_status>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800665c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10c      	bne.n	8006682 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <find_volume+0x82>
 800666e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800667a:	230a      	movs	r3, #10
 800667c:	e2e3      	b.n	8006c46 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800667e:	2300      	movs	r3, #0
 8006680:	e2e1      	b.n	8006c46 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800668c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668e:	b2da      	uxtb	r2, r3
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006696:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fccd 	bl	8006040 <disk_initialize>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80066ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80066b8:	2303      	movs	r3, #3
 80066ba:	e2c4      	b.n	8006c46 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <find_volume+0xd6>
 80066c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80066ce:	230a      	movs	r3, #10
 80066d0:	e2b9      	b.n	8006c46 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d8:	7858      	ldrb	r0, [r3, #1]
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e0:	330a      	adds	r3, #10
 80066e2:	461a      	mov	r2, r3
 80066e4:	2102      	movs	r1, #2
 80066e6:	f7ff fd11 	bl	800610c <disk_ioctl>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10d      	bne.n	800670c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80066f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f6:	895b      	ldrh	r3, [r3, #10]
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066fc:	d306      	bcc.n	800670c <find_volume+0x110>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006704:	895b      	ldrh	r3, [r3, #10]
 8006706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670a:	d901      	bls.n	8006710 <find_volume+0x114>
 800670c:	2301      	movs	r3, #1
 800670e:	e29a      	b.n	8006c46 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006714:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006716:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006718:	f7ff ff02 	bl	8006520 <check_fs>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006722:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006726:	2b01      	cmp	r3, #1
 8006728:	d153      	bne.n	80067d2 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800672a:	2300      	movs	r3, #0
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
 800672e:	e028      	b.n	8006782 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800673a:	4413      	add	r3, r2
 800673c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	3304      	adds	r3, #4
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d012      	beq.n	800676e <find_volume+0x172>
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	330b      	adds	r3, #11
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	061a      	lsls	r2, r3, #24
 8006750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006752:	330a      	adds	r3, #10
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	431a      	orrs	r2, r3
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	3309      	adds	r3, #9
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	4313      	orrs	r3, r2
 8006764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006766:	3208      	adds	r2, #8
 8006768:	7812      	ldrb	r2, [r2, #0]
 800676a:	431a      	orrs	r2, r3
 800676c:	e000      	b.n	8006770 <find_volume+0x174>
 800676e:	2200      	movs	r2, #0
 8006770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	3358      	adds	r3, #88	@ 0x58
 8006776:	443b      	add	r3, r7
 8006778:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800677c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800677e:	3301      	adds	r3, #1
 8006780:	643b      	str	r3, [r7, #64]	@ 0x40
 8006782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006784:	2b03      	cmp	r3, #3
 8006786:	d9d3      	bls.n	8006730 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006788:	2300      	movs	r3, #0
 800678a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800678c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <find_volume+0x19c>
 8006792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006794:	3b01      	subs	r3, #1
 8006796:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	3358      	adds	r3, #88	@ 0x58
 800679e:	443b      	add	r3, r7
 80067a0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80067a4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80067a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <find_volume+0x1bc>
 80067ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067b0:	f7ff feb6 	bl	8006520 <check_fs>
 80067b4:	4603      	mov	r3, r0
 80067b6:	e000      	b.n	80067ba <find_volume+0x1be>
 80067b8:	2302      	movs	r3, #2
 80067ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80067be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <find_volume+0x1d6>
 80067c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c8:	3301      	adds	r3, #1
 80067ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80067cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d9e2      	bls.n	8006798 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80067d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d101      	bne.n	80067de <find_volume+0x1e2>
 80067da:	2301      	movs	r3, #1
 80067dc:	e233      	b.n	8006c46 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80067de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <find_volume+0x1ee>
 80067e6:	230d      	movs	r3, #13
 80067e8:	e22d      	b.n	8006c46 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80067ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ec:	7b1b      	ldrb	r3, [r3, #12]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	b21a      	sxth	r2, r3
 80067f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f4:	7adb      	ldrb	r3, [r3, #11]
 80067f6:	b21b      	sxth	r3, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	b21a      	sxth	r2, r3
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006802:	895b      	ldrh	r3, [r3, #10]
 8006804:	b21b      	sxth	r3, r3
 8006806:	429a      	cmp	r2, r3
 8006808:	d001      	beq.n	800680e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800680a:	230d      	movs	r3, #13
 800680c:	e21b      	b.n	8006c46 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	7ddb      	ldrb	r3, [r3, #23]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	b21a      	sxth	r2, r3
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	7d9b      	ldrb	r3, [r3, #22]
 800681a:	b21b      	sxth	r3, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	b21b      	sxth	r3, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d112      	bne.n	8006850 <find_volume+0x254>
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006830:	061a      	lsls	r2, r3, #24
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006838:	041b      	lsls	r3, r3, #16
 800683a:	431a      	orrs	r2, r3
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	4313      	orrs	r3, r2
 8006846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006848:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800684c:	4313      	orrs	r3, r2
 800684e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006856:	461a      	mov	r2, r3
 8006858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800685a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800685c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685e:	7c1a      	ldrb	r2, [r3, #16]
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006866:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800686e:	78db      	ldrb	r3, [r3, #3]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d009      	beq.n	8006888 <find_volume+0x28c>
 8006874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d003      	beq.n	8006888 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8006880:	230d      	movs	r3, #13
 8006882:	e1e0      	b.n	8006c46 <find_volume+0x64a>
 8006884:	20000488 	.word	0x20000488
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688e:	78db      	ldrb	r3, [r3, #3]
 8006890:	461a      	mov	r2, r3
 8006892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800689a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689c:	7b5a      	ldrb	r2, [r3, #13]
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80068a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ac:	789b      	ldrb	r3, [r3, #2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <find_volume+0x2d0>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c2:	789b      	ldrb	r3, [r3, #2]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80068cc:	230d      	movs	r3, #13
 80068ce:	e1ba      	b.n	8006c46 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	7c9b      	ldrb	r3, [r3, #18]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	b21a      	sxth	r2, r3
 80068d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068da:	7c5b      	ldrb	r3, [r3, #17]
 80068dc:	b21b      	sxth	r3, r3
 80068de:	4313      	orrs	r3, r2
 80068e0:	b21b      	sxth	r3, r3
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ea:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80068ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f2:	891b      	ldrh	r3, [r3, #8]
 80068f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068fa:	8952      	ldrh	r2, [r2, #10]
 80068fc:	0952      	lsrs	r2, r2, #5
 80068fe:	b292      	uxth	r2, r2
 8006900:	fbb3 f1f2 	udiv	r1, r3, r2
 8006904:	fb01 f202 	mul.w	r2, r1, r2
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8006910:	230d      	movs	r3, #13
 8006912:	e198      	b.n	8006c46 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	7d1b      	ldrb	r3, [r3, #20]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	b21a      	sxth	r2, r3
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	7cdb      	ldrb	r3, [r3, #19]
 8006920:	b21b      	sxth	r3, r3
 8006922:	4313      	orrs	r3, r2
 8006924:	b21b      	sxth	r3, r3
 8006926:	b29b      	uxth	r3, r3
 8006928:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800692a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800692c:	2b00      	cmp	r3, #0
 800692e:	d112      	bne.n	8006956 <find_volume+0x35a>
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006936:	061a      	lsls	r2, r3, #24
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800693e:	041b      	lsls	r3, r3, #16
 8006940:	431a      	orrs	r2, r3
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	4313      	orrs	r3, r2
 800694c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800694e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006952:	4313      	orrs	r3, r2
 8006954:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006958:	7bdb      	ldrb	r3, [r3, #15]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	b21a      	sxth	r2, r3
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	7b9b      	ldrb	r3, [r3, #14]
 8006962:	b21b      	sxth	r3, r3
 8006964:	4313      	orrs	r3, r2
 8006966:	b21b      	sxth	r3, r3
 8006968:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800696a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <find_volume+0x378>
 8006970:	230d      	movs	r3, #13
 8006972:	e168      	b.n	8006c46 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006974:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006978:	4413      	add	r3, r2
 800697a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800697c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006980:	8911      	ldrh	r1, [r2, #8]
 8006982:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006984:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006988:	8952      	ldrh	r2, [r2, #10]
 800698a:	0952      	lsrs	r2, r2, #5
 800698c:	b292      	uxth	r2, r2
 800698e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006992:	b292      	uxth	r2, r2
 8006994:	4413      	add	r3, r2
 8006996:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800699a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699c:	429a      	cmp	r2, r3
 800699e:	d201      	bcs.n	80069a4 <find_volume+0x3a8>
 80069a0:	230d      	movs	r3, #13
 80069a2:	e150      	b.n	8006c46 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80069a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069b0:	7892      	ldrb	r2, [r2, #2]
 80069b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80069b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <find_volume+0x3c6>
 80069be:	230d      	movs	r3, #13
 80069c0:	e141      	b.n	8006c46 <find_volume+0x64a>
	fmt = FS_FAT12;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d902      	bls.n	80069d8 <find_volume+0x3dc>
 80069d2:	2302      	movs	r3, #2
 80069d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80069de:	4293      	cmp	r3, r2
 80069e0:	d902      	bls.n	80069e8 <find_volume+0x3ec>
 80069e2:	2303      	movs	r3, #3
 80069e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	3302      	adds	r3, #2
 80069ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069f2:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069fa:	461a      	mov	r2, r3
 80069fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069fe:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006a00:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a04:	4413      	add	r3, r2
 8006a06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a0c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006a0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	4413      	add	r3, r2
 8006a14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a1a:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8006a1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d124      	bne.n	8006a6e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2a:	891b      	ldrh	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <find_volume+0x438>
 8006a30:	230d      	movs	r3, #13
 8006a32:	e108      	b.n	8006c46 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006a3a:	061a      	lsls	r2, r3, #24
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006a42:	041b      	lsls	r3, r3, #16
 8006a44:	431a      	orrs	r2, r3
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a52:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8006a56:	4313      	orrs	r3, r2
 8006a58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a5e:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a6c:	e02b      	b.n	8006ac6 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a74:	891b      	ldrh	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <find_volume+0x482>
 8006a7a:	230d      	movs	r3, #13
 8006a7c:	e0e3      	b.n	8006c46 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a88:	4413      	add	r3, r2
 8006a8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a90:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d105      	bne.n	8006aa6 <find_volume+0x4aa>
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	e00e      	b.n	8006ac4 <find_volume+0x4c8>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4413      	add	r3, r2
 8006ab4:	085a      	lsrs	r2, r3, #1
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006ac4:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad4:	895b      	ldrh	r3, [r3, #10]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ada:	440b      	add	r3, r1
 8006adc:	3b01      	subs	r3, #1
 8006ade:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ae0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8006ae4:	8949      	ldrh	r1, [r1, #10]
 8006ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d201      	bcs.n	8006af2 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8006aee:	230d      	movs	r3, #13
 8006af0:	e0a9      	b.n	8006c46 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af8:	461a      	mov	r2, r3
 8006afa:	f04f 33ff 	mov.w	r3, #4294967295
 8006afe:	6113      	str	r3, [r2, #16]
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b0e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b16:	2280      	movs	r2, #128	@ 0x80
 8006b18:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d17a      	bne.n	8006c18 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	b21a      	sxth	r2, r3
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b32:	b21b      	sxth	r3, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d16d      	bne.n	8006c18 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b3e:	3301      	adds	r3, #1
 8006b40:	4619      	mov	r1, r3
 8006b42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b44:	f7ff fb7c 	bl	8006240 <move_window>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d164      	bne.n	8006c18 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b54:	2200      	movs	r2, #0
 8006b56:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	b21a      	sxth	r2, r3
 8006b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b64:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	4a38      	ldr	r2, [pc, #224]	@ (8006c50 <find_volume+0x654>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d151      	bne.n	8006c18 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	78db      	ldrb	r3, [r3, #3]
 8006b78:	061a      	lsls	r2, r3, #24
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7c:	789b      	ldrb	r3, [r3, #2]
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	431a      	orrs	r2, r3
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	4a30      	ldr	r2, [pc, #192]	@ (8006c54 <find_volume+0x658>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d140      	bne.n	8006c18 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8006b9c:	061a      	lsls	r2, r3, #24
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bb4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	4a27      	ldr	r2, [pc, #156]	@ (8006c58 <find_volume+0x65c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d12b      	bne.n	8006c18 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8006bc6:	061a      	lsls	r2, r3, #24
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bde:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8006be2:	4313      	orrs	r3, r2
 8006be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006be6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006bea:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bee:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8006bf2:	061a      	lsls	r2, r3, #24
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf6:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c00:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	4313      	orrs	r3, r2
 8006c08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c0a:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c16:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c24:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006c26:	4b0d      	ldr	r3, [pc, #52]	@ (8006c5c <find_volume+0x660>)
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c5c <find_volume+0x660>)
 8006c30:	801a      	strh	r2, [r3, #0]
 8006c32:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <find_volume+0x660>)
 8006c34:	881a      	ldrh	r2, [r3, #0]
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c3c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006c3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c40:	f7ff fa82 	bl	8006148 <clear_lock>
#endif

	return FR_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3758      	adds	r7, #88	@ 0x58
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	ffffaa55 	.word	0xffffaa55
 8006c54:	41615252 	.word	0x41615252
 8006c58:	61417272 	.word	0x61417272
 8006c5c:	2000048c 	.word	0x2000048c

08006c60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006c72:	f107 0310 	add.w	r3, r7, #16
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fc0f 	bl	800649a <get_ldnumber>
 8006c7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	da01      	bge.n	8006c88 <f_mount+0x28>
 8006c84:	230b      	movs	r3, #11
 8006c86:	e02f      	b.n	8006ce8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c88:	4a19      	ldr	r2, [pc, #100]	@ (8006cf0 <f_mount+0x90>)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006c98:	69b8      	ldr	r0, [r7, #24]
 8006c9a:	f7ff fa55 	bl	8006148 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	490d      	ldr	r1, [pc, #52]	@ (8006cf0 <f_mount+0x90>)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <f_mount+0x6e>
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d001      	beq.n	8006cd2 <f_mount+0x72>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e00a      	b.n	8006ce8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006cd2:	f107 0108 	add.w	r1, r7, #8
 8006cd6:	f107 030c 	add.w	r3, r7, #12
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fc8d 	bl	80065fc <find_volume>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20000488 	.word	0x20000488

08006cf4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08e      	sub	sp, #56	@ 0x38
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006d00:	f107 030c 	add.w	r3, r7, #12
 8006d04:	2200      	movs	r2, #0
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fc77 	bl	80065fc <find_volume>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006d1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 80bc 	bne.w	8006e9c <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	3b02      	subs	r3, #2
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d806      	bhi.n	8006d48 <f_getfree+0x54>
			*nclst = fs->free_clust;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e0a9      	b.n	8006e9c <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 8006d56:	7efb      	ldrb	r3, [r7, #27]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d126      	bne.n	8006daa <f_getfree+0xb6>
				clst = 2;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8006d60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d62:	69f8      	ldr	r0, [r7, #28]
 8006d64:	f7ff fa9e 	bl	80062a4 <get_fat>
 8006d68:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d103      	bne.n	8006d7a <f_getfree+0x86>
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006d78:	e07c      	b.n	8006e74 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d103      	bne.n	8006d88 <f_getfree+0x94>
 8006d80:	2302      	movs	r3, #2
 8006d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006d86:	e075      	b.n	8006e74 <f_getfree+0x180>
					if (stat == 0) n++;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <f_getfree+0xa0>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	3301      	adds	r3, #1
 8006d92:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 8006d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d96:	3301      	adds	r3, #1
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d3db      	bcc.n	8006d60 <f_getfree+0x6c>
 8006da8:	e064      	b.n	8006e74 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d114      	bne.n	8006df6 <f_getfree+0x102>
						res = move_window(fs, sect++);
 8006dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	69f8      	ldr	r0, [r7, #28]
 8006dd6:	f7ff fa33 	bl	8006240 <move_window>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 8006de0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d144      	bne.n	8006e72 <f_getfree+0x17e>
						p = fs->win.d8;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006df2:	895b      	ldrh	r3, [r3, #10]
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8006df6:	7efb      	ldrb	r3, [r7, #27]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d115      	bne.n	8006e28 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	b21a      	sxth	r2, r3
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	b21b      	sxth	r3, r3
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	b21b      	sxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <f_getfree+0x126>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	3301      	adds	r3, #1
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	623b      	str	r3, [r7, #32]
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	3b02      	subs	r3, #2
 8006e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e26:	e01d      	b.n	8006e64 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	3303      	adds	r3, #3
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	061a      	lsls	r2, r3, #24
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	3302      	adds	r3, #2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	041b      	lsls	r3, r3, #16
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	4313      	orrs	r3, r2
 8006e44:	6a3a      	ldr	r2, [r7, #32]
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <f_getfree+0x164>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	3301      	adds	r3, #1
 8006e56:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	623b      	str	r3, [r7, #32]
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	3b04      	subs	r3, #4
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 8006e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e66:	3b01      	subs	r3, #1
 8006e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1aa      	bne.n	8006dc6 <f_getfree+0xd2>
 8006e70:	e000      	b.n	8006e74 <f_getfree+0x180>
						if (res != FR_OK) break;
 8006e72:	bf00      	nop
			}
			fs->free_clust = n;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e86:	795b      	ldrb	r3, [r3, #5]
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e94:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e9a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3738      	adds	r7, #56	@ 0x38
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006ec0:	7a5b      	ldrb	r3, [r3, #9]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d831      	bhi.n	8006f2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006eca:	7a5b      	ldrb	r3, [r3, #9]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4b19      	ldr	r3, [pc, #100]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006ed6:	4b18      	ldr	r3, [pc, #96]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006ed8:	7a5b      	ldrb	r3, [r3, #9]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	4a16      	ldr	r2, [pc, #88]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006ee6:	4b14      	ldr	r3, [pc, #80]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006ee8:	7a5b      	ldrb	r3, [r3, #9]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	4b12      	ldr	r3, [pc, #72]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	79fa      	ldrb	r2, [r7, #7]
 8006ef4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006ef6:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006ef8:	7a5b      	ldrb	r3, [r3, #9]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	b2d1      	uxtb	r1, r2
 8006f00:	4a0d      	ldr	r2, [pc, #52]	@ (8006f38 <FATFS_LinkDriverEx+0x90>)
 8006f02:	7251      	strb	r1, [r2, #9]
 8006f04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f06:	7dbb      	ldrb	r3, [r7, #22]
 8006f08:	3330      	adds	r3, #48	@ 0x30
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	3301      	adds	r3, #1
 8006f14:	223a      	movs	r2, #58	@ 0x3a
 8006f16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	3302      	adds	r3, #2
 8006f1c:	222f      	movs	r2, #47	@ 0x2f
 8006f1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	3303      	adds	r3, #3
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	200004a8 	.word	0x200004a8

08006f3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f46:	2200      	movs	r2, #0
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff ffac 	bl	8006ea8 <FATFS_LinkDriverEx>
 8006f50:	4603      	mov	r3, r0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <malloc>:
 8006f5c:	4b02      	ldr	r3, [pc, #8]	@ (8006f68 <malloc+0xc>)
 8006f5e:	4601      	mov	r1, r0
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	f000 b825 	b.w	8006fb0 <_malloc_r>
 8006f66:	bf00      	nop
 8006f68:	2000019c 	.word	0x2000019c

08006f6c <sbrk_aligned>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006fac <sbrk_aligned+0x40>)
 8006f70:	460c      	mov	r4, r1
 8006f72:	6831      	ldr	r1, [r6, #0]
 8006f74:	4605      	mov	r5, r0
 8006f76:	b911      	cbnz	r1, 8006f7e <sbrk_aligned+0x12>
 8006f78:	f000 ff4c 	bl	8007e14 <_sbrk_r>
 8006f7c:	6030      	str	r0, [r6, #0]
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4628      	mov	r0, r5
 8006f82:	f000 ff47 	bl	8007e14 <_sbrk_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d103      	bne.n	8006f92 <sbrk_aligned+0x26>
 8006f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f8e:	4620      	mov	r0, r4
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	1cc4      	adds	r4, r0, #3
 8006f94:	f024 0403 	bic.w	r4, r4, #3
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d0f8      	beq.n	8006f8e <sbrk_aligned+0x22>
 8006f9c:	1a21      	subs	r1, r4, r0
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 ff38 	bl	8007e14 <_sbrk_r>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d1f2      	bne.n	8006f8e <sbrk_aligned+0x22>
 8006fa8:	e7ef      	b.n	8006f8a <sbrk_aligned+0x1e>
 8006faa:	bf00      	nop
 8006fac:	200004b4 	.word	0x200004b4

08006fb0 <_malloc_r>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	1ccd      	adds	r5, r1, #3
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	db01      	blt.n	8006fcc <_malloc_r+0x1c>
 8006fc8:	42a9      	cmp	r1, r5
 8006fca:	d904      	bls.n	8006fd6 <_malloc_r+0x26>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070ac <_malloc_r+0xfc>
 8006fda:	f000 f869 	bl	80070b0 <__malloc_lock>
 8006fde:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe2:	461c      	mov	r4, r3
 8006fe4:	bb44      	cbnz	r4, 8007038 <_malloc_r+0x88>
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7ff ffbf 	bl	8006f6c <sbrk_aligned>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	d158      	bne.n	80070a6 <_malloc_r+0xf6>
 8006ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ff8:	4627      	mov	r7, r4
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	d143      	bne.n	8007086 <_malloc_r+0xd6>
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d04b      	beq.n	800709a <_malloc_r+0xea>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	4639      	mov	r1, r7
 8007006:	4630      	mov	r0, r6
 8007008:	eb04 0903 	add.w	r9, r4, r3
 800700c:	f000 ff02 	bl	8007e14 <_sbrk_r>
 8007010:	4581      	cmp	r9, r0
 8007012:	d142      	bne.n	800709a <_malloc_r+0xea>
 8007014:	6821      	ldr	r1, [r4, #0]
 8007016:	4630      	mov	r0, r6
 8007018:	1a6d      	subs	r5, r5, r1
 800701a:	4629      	mov	r1, r5
 800701c:	f7ff ffa6 	bl	8006f6c <sbrk_aligned>
 8007020:	3001      	adds	r0, #1
 8007022:	d03a      	beq.n	800709a <_malloc_r+0xea>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	442b      	add	r3, r5
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	f8d8 3000 	ldr.w	r3, [r8]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	bb62      	cbnz	r2, 800708c <_malloc_r+0xdc>
 8007032:	f8c8 7000 	str.w	r7, [r8]
 8007036:	e00f      	b.n	8007058 <_malloc_r+0xa8>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	1b52      	subs	r2, r2, r5
 800703c:	d420      	bmi.n	8007080 <_malloc_r+0xd0>
 800703e:	2a0b      	cmp	r2, #11
 8007040:	d917      	bls.n	8007072 <_malloc_r+0xc2>
 8007042:	1961      	adds	r1, r4, r5
 8007044:	42a3      	cmp	r3, r4
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	bf18      	it	ne
 800704a:	6059      	strne	r1, [r3, #4]
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	bf08      	it	eq
 8007050:	f8c8 1000 	streq.w	r1, [r8]
 8007054:	5162      	str	r2, [r4, r5]
 8007056:	604b      	str	r3, [r1, #4]
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f82f 	bl	80070bc <__malloc_unlock>
 800705e:	f104 000b 	add.w	r0, r4, #11
 8007062:	1d23      	adds	r3, r4, #4
 8007064:	f020 0007 	bic.w	r0, r0, #7
 8007068:	1ac2      	subs	r2, r0, r3
 800706a:	bf1c      	itt	ne
 800706c:	1a1b      	subne	r3, r3, r0
 800706e:	50a3      	strne	r3, [r4, r2]
 8007070:	e7af      	b.n	8006fd2 <_malloc_r+0x22>
 8007072:	6862      	ldr	r2, [r4, #4]
 8007074:	42a3      	cmp	r3, r4
 8007076:	bf0c      	ite	eq
 8007078:	f8c8 2000 	streq.w	r2, [r8]
 800707c:	605a      	strne	r2, [r3, #4]
 800707e:	e7eb      	b.n	8007058 <_malloc_r+0xa8>
 8007080:	4623      	mov	r3, r4
 8007082:	6864      	ldr	r4, [r4, #4]
 8007084:	e7ae      	b.n	8006fe4 <_malloc_r+0x34>
 8007086:	463c      	mov	r4, r7
 8007088:	687f      	ldr	r7, [r7, #4]
 800708a:	e7b6      	b.n	8006ffa <_malloc_r+0x4a>
 800708c:	461a      	mov	r2, r3
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	42a3      	cmp	r3, r4
 8007092:	d1fb      	bne.n	800708c <_malloc_r+0xdc>
 8007094:	2300      	movs	r3, #0
 8007096:	6053      	str	r3, [r2, #4]
 8007098:	e7de      	b.n	8007058 <_malloc_r+0xa8>
 800709a:	230c      	movs	r3, #12
 800709c:	4630      	mov	r0, r6
 800709e:	6033      	str	r3, [r6, #0]
 80070a0:	f000 f80c 	bl	80070bc <__malloc_unlock>
 80070a4:	e794      	b.n	8006fd0 <_malloc_r+0x20>
 80070a6:	6005      	str	r5, [r0, #0]
 80070a8:	e7d6      	b.n	8007058 <_malloc_r+0xa8>
 80070aa:	bf00      	nop
 80070ac:	200004b8 	.word	0x200004b8

080070b0 <__malloc_lock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	@ (80070b8 <__malloc_lock+0x8>)
 80070b2:	f000 befc 	b.w	8007eae <__retarget_lock_acquire_recursive>
 80070b6:	bf00      	nop
 80070b8:	200005fc 	.word	0x200005fc

080070bc <__malloc_unlock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	@ (80070c4 <__malloc_unlock+0x8>)
 80070be:	f000 bef7 	b.w	8007eb0 <__retarget_lock_release_recursive>
 80070c2:	bf00      	nop
 80070c4:	200005fc 	.word	0x200005fc

080070c8 <__cvt>:
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ce:	461d      	mov	r5, r3
 80070d0:	bfbb      	ittet	lt
 80070d2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80070d6:	461d      	movlt	r5, r3
 80070d8:	2300      	movge	r3, #0
 80070da:	232d      	movlt	r3, #45	@ 0x2d
 80070dc:	b088      	sub	sp, #32
 80070de:	4614      	mov	r4, r2
 80070e0:	bfb8      	it	lt
 80070e2:	4614      	movlt	r4, r2
 80070e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80070e6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80070e8:	7013      	strb	r3, [r2, #0]
 80070ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80070f0:	f023 0820 	bic.w	r8, r3, #32
 80070f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070f8:	d005      	beq.n	8007106 <__cvt+0x3e>
 80070fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070fe:	d100      	bne.n	8007102 <__cvt+0x3a>
 8007100:	3601      	adds	r6, #1
 8007102:	2302      	movs	r3, #2
 8007104:	e000      	b.n	8007108 <__cvt+0x40>
 8007106:	2303      	movs	r3, #3
 8007108:	aa07      	add	r2, sp, #28
 800710a:	9204      	str	r2, [sp, #16]
 800710c:	aa06      	add	r2, sp, #24
 800710e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007112:	e9cd 3600 	strd	r3, r6, [sp]
 8007116:	4622      	mov	r2, r4
 8007118:	462b      	mov	r3, r5
 800711a:	f000 ff8d 	bl	8008038 <_dtoa_r>
 800711e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007122:	4607      	mov	r7, r0
 8007124:	d119      	bne.n	800715a <__cvt+0x92>
 8007126:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007128:	07db      	lsls	r3, r3, #31
 800712a:	d50e      	bpl.n	800714a <__cvt+0x82>
 800712c:	eb00 0906 	add.w	r9, r0, r6
 8007130:	2200      	movs	r2, #0
 8007132:	2300      	movs	r3, #0
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f7f9 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800713c:	b108      	cbz	r0, 8007142 <__cvt+0x7a>
 800713e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007142:	2230      	movs	r2, #48	@ 0x30
 8007144:	9b07      	ldr	r3, [sp, #28]
 8007146:	454b      	cmp	r3, r9
 8007148:	d31e      	bcc.n	8007188 <__cvt+0xc0>
 800714a:	4638      	mov	r0, r7
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007150:	1bdb      	subs	r3, r3, r7
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	b008      	add	sp, #32
 8007156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800715e:	eb00 0906 	add.w	r9, r0, r6
 8007162:	d1e5      	bne.n	8007130 <__cvt+0x68>
 8007164:	7803      	ldrb	r3, [r0, #0]
 8007166:	2b30      	cmp	r3, #48	@ 0x30
 8007168:	d10a      	bne.n	8007180 <__cvt+0xb8>
 800716a:	2200      	movs	r2, #0
 800716c:	2300      	movs	r3, #0
 800716e:	4620      	mov	r0, r4
 8007170:	4629      	mov	r1, r5
 8007172:	f7f9 fc19 	bl	80009a8 <__aeabi_dcmpeq>
 8007176:	b918      	cbnz	r0, 8007180 <__cvt+0xb8>
 8007178:	f1c6 0601 	rsb	r6, r6, #1
 800717c:	f8ca 6000 	str.w	r6, [sl]
 8007180:	f8da 3000 	ldr.w	r3, [sl]
 8007184:	4499      	add	r9, r3
 8007186:	e7d3      	b.n	8007130 <__cvt+0x68>
 8007188:	1c59      	adds	r1, r3, #1
 800718a:	9107      	str	r1, [sp, #28]
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e7d9      	b.n	8007144 <__cvt+0x7c>

08007190 <__exponent>:
 8007190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007192:	2900      	cmp	r1, #0
 8007194:	bfb6      	itet	lt
 8007196:	232d      	movlt	r3, #45	@ 0x2d
 8007198:	232b      	movge	r3, #43	@ 0x2b
 800719a:	4249      	neglt	r1, r1
 800719c:	2909      	cmp	r1, #9
 800719e:	7002      	strb	r2, [r0, #0]
 80071a0:	7043      	strb	r3, [r0, #1]
 80071a2:	dd29      	ble.n	80071f8 <__exponent+0x68>
 80071a4:	f10d 0307 	add.w	r3, sp, #7
 80071a8:	461d      	mov	r5, r3
 80071aa:	270a      	movs	r7, #10
 80071ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80071b0:	461a      	mov	r2, r3
 80071b2:	fb07 1416 	mls	r4, r7, r6, r1
 80071b6:	3430      	adds	r4, #48	@ 0x30
 80071b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80071bc:	460c      	mov	r4, r1
 80071be:	2c63      	cmp	r4, #99	@ 0x63
 80071c0:	4631      	mov	r1, r6
 80071c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80071c6:	dcf1      	bgt.n	80071ac <__exponent+0x1c>
 80071c8:	3130      	adds	r1, #48	@ 0x30
 80071ca:	1e94      	subs	r4, r2, #2
 80071cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071d0:	4623      	mov	r3, r4
 80071d2:	1c41      	adds	r1, r0, #1
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	d30a      	bcc.n	80071ee <__exponent+0x5e>
 80071d8:	f10d 0309 	add.w	r3, sp, #9
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	42ac      	cmp	r4, r5
 80071e0:	bf88      	it	hi
 80071e2:	2300      	movhi	r3, #0
 80071e4:	3302      	adds	r3, #2
 80071e6:	4403      	add	r3, r0
 80071e8:	1a18      	subs	r0, r3, r0
 80071ea:	b003      	add	sp, #12
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071f6:	e7ed      	b.n	80071d4 <__exponent+0x44>
 80071f8:	2330      	movs	r3, #48	@ 0x30
 80071fa:	3130      	adds	r1, #48	@ 0x30
 80071fc:	7083      	strb	r3, [r0, #2]
 80071fe:	70c1      	strb	r1, [r0, #3]
 8007200:	1d03      	adds	r3, r0, #4
 8007202:	e7f1      	b.n	80071e8 <__exponent+0x58>

08007204 <_printf_float>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	b091      	sub	sp, #68	@ 0x44
 800720a:	460c      	mov	r4, r1
 800720c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007210:	4616      	mov	r6, r2
 8007212:	461f      	mov	r7, r3
 8007214:	4605      	mov	r5, r0
 8007216:	f000 fdc5 	bl	8007da4 <_localeconv_r>
 800721a:	6803      	ldr	r3, [r0, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	9308      	str	r3, [sp, #32]
 8007220:	f7f8 ff96 	bl	8000150 <strlen>
 8007224:	2300      	movs	r3, #0
 8007226:	930e      	str	r3, [sp, #56]	@ 0x38
 8007228:	f8d8 3000 	ldr.w	r3, [r8]
 800722c:	9009      	str	r0, [sp, #36]	@ 0x24
 800722e:	3307      	adds	r3, #7
 8007230:	f023 0307 	bic.w	r3, r3, #7
 8007234:	f103 0208 	add.w	r2, r3, #8
 8007238:	f894 a018 	ldrb.w	sl, [r4, #24]
 800723c:	f8d4 b000 	ldr.w	fp, [r4]
 8007240:	f8c8 2000 	str.w	r2, [r8]
 8007244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007248:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800724c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800724e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007252:	f04f 32ff 	mov.w	r2, #4294967295
 8007256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800725a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800725e:	4b9c      	ldr	r3, [pc, #624]	@ (80074d0 <_printf_float+0x2cc>)
 8007260:	f7f9 fbd4 	bl	8000a0c <__aeabi_dcmpun>
 8007264:	bb70      	cbnz	r0, 80072c4 <_printf_float+0xc0>
 8007266:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800726a:	f04f 32ff 	mov.w	r2, #4294967295
 800726e:	4b98      	ldr	r3, [pc, #608]	@ (80074d0 <_printf_float+0x2cc>)
 8007270:	f7f9 fbae 	bl	80009d0 <__aeabi_dcmple>
 8007274:	bb30      	cbnz	r0, 80072c4 <_printf_float+0xc0>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 fb9d 	bl	80009bc <__aeabi_dcmplt>
 8007282:	b110      	cbz	r0, 800728a <_printf_float+0x86>
 8007284:	232d      	movs	r3, #45	@ 0x2d
 8007286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800728a:	4a92      	ldr	r2, [pc, #584]	@ (80074d4 <_printf_float+0x2d0>)
 800728c:	4b92      	ldr	r3, [pc, #584]	@ (80074d8 <_printf_float+0x2d4>)
 800728e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007292:	bf94      	ite	ls
 8007294:	4690      	movls	r8, r2
 8007296:	4698      	movhi	r8, r3
 8007298:	2303      	movs	r3, #3
 800729a:	f04f 0900 	mov.w	r9, #0
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	f02b 0304 	bic.w	r3, fp, #4
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	4633      	mov	r3, r6
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	9700      	str	r7, [sp, #0]
 80072ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 80072b0:	f000 f9d4 	bl	800765c <_printf_common>
 80072b4:	3001      	adds	r0, #1
 80072b6:	f040 8090 	bne.w	80073da <_printf_float+0x1d6>
 80072ba:	f04f 30ff 	mov.w	r0, #4294967295
 80072be:	b011      	add	sp, #68	@ 0x44
 80072c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c4:	4642      	mov	r2, r8
 80072c6:	464b      	mov	r3, r9
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	f7f9 fb9e 	bl	8000a0c <__aeabi_dcmpun>
 80072d0:	b148      	cbz	r0, 80072e6 <_printf_float+0xe2>
 80072d2:	464b      	mov	r3, r9
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bfb8      	it	lt
 80072d8:	232d      	movlt	r3, #45	@ 0x2d
 80072da:	4a80      	ldr	r2, [pc, #512]	@ (80074dc <_printf_float+0x2d8>)
 80072dc:	bfb8      	it	lt
 80072de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80072e2:	4b7f      	ldr	r3, [pc, #508]	@ (80074e0 <_printf_float+0x2dc>)
 80072e4:	e7d3      	b.n	800728e <_printf_float+0x8a>
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	d13f      	bne.n	8007370 <_printf_float+0x16c>
 80072f0:	2306      	movs	r3, #6
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	9206      	str	r2, [sp, #24]
 80072fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8007300:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007304:	aa0d      	add	r2, sp, #52	@ 0x34
 8007306:	9203      	str	r2, [sp, #12]
 8007308:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800730c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007310:	6863      	ldr	r3, [r4, #4]
 8007312:	4642      	mov	r2, r8
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4628      	mov	r0, r5
 8007318:	464b      	mov	r3, r9
 800731a:	910a      	str	r1, [sp, #40]	@ 0x28
 800731c:	f7ff fed4 	bl	80070c8 <__cvt>
 8007320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007322:	4680      	mov	r8, r0
 8007324:	2947      	cmp	r1, #71	@ 0x47
 8007326:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007328:	d128      	bne.n	800737c <_printf_float+0x178>
 800732a:	1cc8      	adds	r0, r1, #3
 800732c:	db02      	blt.n	8007334 <_printf_float+0x130>
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	4299      	cmp	r1, r3
 8007332:	dd40      	ble.n	80073b6 <_printf_float+0x1b2>
 8007334:	f1aa 0a02 	sub.w	sl, sl, #2
 8007338:	fa5f fa8a 	uxtb.w	sl, sl
 800733c:	4652      	mov	r2, sl
 800733e:	3901      	subs	r1, #1
 8007340:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007344:	910d      	str	r1, [sp, #52]	@ 0x34
 8007346:	f7ff ff23 	bl	8007190 <__exponent>
 800734a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800734c:	4681      	mov	r9, r0
 800734e:	1813      	adds	r3, r2, r0
 8007350:	2a01      	cmp	r2, #1
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	dc02      	bgt.n	800735c <_printf_float+0x158>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	07d2      	lsls	r2, r2, #31
 800735a:	d501      	bpl.n	8007360 <_printf_float+0x15c>
 800735c:	3301      	adds	r3, #1
 800735e:	6123      	str	r3, [r4, #16]
 8007360:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007364:	2b00      	cmp	r3, #0
 8007366:	d09e      	beq.n	80072a6 <_printf_float+0xa2>
 8007368:	232d      	movs	r3, #45	@ 0x2d
 800736a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800736e:	e79a      	b.n	80072a6 <_printf_float+0xa2>
 8007370:	2947      	cmp	r1, #71	@ 0x47
 8007372:	d1bf      	bne.n	80072f4 <_printf_float+0xf0>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1bd      	bne.n	80072f4 <_printf_float+0xf0>
 8007378:	2301      	movs	r3, #1
 800737a:	e7ba      	b.n	80072f2 <_printf_float+0xee>
 800737c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007380:	d9dc      	bls.n	800733c <_printf_float+0x138>
 8007382:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007386:	d118      	bne.n	80073ba <_printf_float+0x1b6>
 8007388:	2900      	cmp	r1, #0
 800738a:	6863      	ldr	r3, [r4, #4]
 800738c:	dd0b      	ble.n	80073a6 <_printf_float+0x1a2>
 800738e:	6121      	str	r1, [r4, #16]
 8007390:	b913      	cbnz	r3, 8007398 <_printf_float+0x194>
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	07d0      	lsls	r0, r2, #31
 8007396:	d502      	bpl.n	800739e <_printf_float+0x19a>
 8007398:	3301      	adds	r3, #1
 800739a:	440b      	add	r3, r1
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	f04f 0900 	mov.w	r9, #0
 80073a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80073a4:	e7dc      	b.n	8007360 <_printf_float+0x15c>
 80073a6:	b913      	cbnz	r3, 80073ae <_printf_float+0x1aa>
 80073a8:	6822      	ldr	r2, [r4, #0]
 80073aa:	07d2      	lsls	r2, r2, #31
 80073ac:	d501      	bpl.n	80073b2 <_printf_float+0x1ae>
 80073ae:	3302      	adds	r3, #2
 80073b0:	e7f4      	b.n	800739c <_printf_float+0x198>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e7f2      	b.n	800739c <_printf_float+0x198>
 80073b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80073ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073bc:	4299      	cmp	r1, r3
 80073be:	db05      	blt.n	80073cc <_printf_float+0x1c8>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	6121      	str	r1, [r4, #16]
 80073c4:	07d8      	lsls	r0, r3, #31
 80073c6:	d5ea      	bpl.n	800739e <_printf_float+0x19a>
 80073c8:	1c4b      	adds	r3, r1, #1
 80073ca:	e7e7      	b.n	800739c <_printf_float+0x198>
 80073cc:	2900      	cmp	r1, #0
 80073ce:	bfcc      	ite	gt
 80073d0:	2201      	movgt	r2, #1
 80073d2:	f1c1 0202 	rsble	r2, r1, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	e7e0      	b.n	800739c <_printf_float+0x198>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	055a      	lsls	r2, r3, #21
 80073de:	d407      	bmi.n	80073f0 <_printf_float+0x1ec>
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	4642      	mov	r2, r8
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	d12b      	bne.n	8007446 <_printf_float+0x242>
 80073ee:	e764      	b.n	80072ba <_printf_float+0xb6>
 80073f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073f4:	f240 80dc 	bls.w	80075b0 <_printf_float+0x3ac>
 80073f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073fc:	2200      	movs	r2, #0
 80073fe:	2300      	movs	r3, #0
 8007400:	f7f9 fad2 	bl	80009a8 <__aeabi_dcmpeq>
 8007404:	2800      	cmp	r0, #0
 8007406:	d033      	beq.n	8007470 <_printf_float+0x26c>
 8007408:	2301      	movs	r3, #1
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	4a35      	ldr	r2, [pc, #212]	@ (80074e4 <_printf_float+0x2e0>)
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	f43f af51 	beq.w	80072ba <_printf_float+0xb6>
 8007418:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800741c:	4543      	cmp	r3, r8
 800741e:	db02      	blt.n	8007426 <_printf_float+0x222>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	07d8      	lsls	r0, r3, #31
 8007424:	d50f      	bpl.n	8007446 <_printf_float+0x242>
 8007426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f af42 	beq.w	80072ba <_printf_float+0xb6>
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	f108 38ff 	add.w	r8, r8, #4294967295
 800743e:	f104 0a1a 	add.w	sl, r4, #26
 8007442:	45c8      	cmp	r8, r9
 8007444:	dc09      	bgt.n	800745a <_printf_float+0x256>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	079b      	lsls	r3, r3, #30
 800744a:	f100 8102 	bmi.w	8007652 <_printf_float+0x44e>
 800744e:	68e0      	ldr	r0, [r4, #12]
 8007450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007452:	4298      	cmp	r0, r3
 8007454:	bfb8      	it	lt
 8007456:	4618      	movlt	r0, r3
 8007458:	e731      	b.n	80072be <_printf_float+0xba>
 800745a:	2301      	movs	r3, #1
 800745c:	4652      	mov	r2, sl
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f af28 	beq.w	80072ba <_printf_float+0xb6>
 800746a:	f109 0901 	add.w	r9, r9, #1
 800746e:	e7e8      	b.n	8007442 <_printf_float+0x23e>
 8007470:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007472:	2b00      	cmp	r3, #0
 8007474:	dc38      	bgt.n	80074e8 <_printf_float+0x2e4>
 8007476:	2301      	movs	r3, #1
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	4a19      	ldr	r2, [pc, #100]	@ (80074e4 <_printf_float+0x2e0>)
 800747e:	47b8      	blx	r7
 8007480:	3001      	adds	r0, #1
 8007482:	f43f af1a 	beq.w	80072ba <_printf_float+0xb6>
 8007486:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800748a:	ea59 0303 	orrs.w	r3, r9, r3
 800748e:	d102      	bne.n	8007496 <_printf_float+0x292>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	07d9      	lsls	r1, r3, #31
 8007494:	d5d7      	bpl.n	8007446 <_printf_float+0x242>
 8007496:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	f43f af0a 	beq.w	80072ba <_printf_float+0xb6>
 80074a6:	f04f 0a00 	mov.w	sl, #0
 80074aa:	f104 0b1a 	add.w	fp, r4, #26
 80074ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b0:	425b      	negs	r3, r3
 80074b2:	4553      	cmp	r3, sl
 80074b4:	dc01      	bgt.n	80074ba <_printf_float+0x2b6>
 80074b6:	464b      	mov	r3, r9
 80074b8:	e793      	b.n	80073e2 <_printf_float+0x1de>
 80074ba:	2301      	movs	r3, #1
 80074bc:	465a      	mov	r2, fp
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	f43f aef8 	beq.w	80072ba <_printf_float+0xb6>
 80074ca:	f10a 0a01 	add.w	sl, sl, #1
 80074ce:	e7ee      	b.n	80074ae <_printf_float+0x2aa>
 80074d0:	7fefffff 	.word	0x7fefffff
 80074d4:	0800a09a 	.word	0x0800a09a
 80074d8:	0800a09e 	.word	0x0800a09e
 80074dc:	0800a0a2 	.word	0x0800a0a2
 80074e0:	0800a0a6 	.word	0x0800a0a6
 80074e4:	0800a0aa 	.word	0x0800a0aa
 80074e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80074ee:	4553      	cmp	r3, sl
 80074f0:	bfa8      	it	ge
 80074f2:	4653      	movge	r3, sl
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	4699      	mov	r9, r3
 80074f8:	dc36      	bgt.n	8007568 <_printf_float+0x364>
 80074fa:	f04f 0b00 	mov.w	fp, #0
 80074fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007502:	f104 021a 	add.w	r2, r4, #26
 8007506:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007508:	930a      	str	r3, [sp, #40]	@ 0x28
 800750a:	eba3 0309 	sub.w	r3, r3, r9
 800750e:	455b      	cmp	r3, fp
 8007510:	dc31      	bgt.n	8007576 <_printf_float+0x372>
 8007512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007514:	459a      	cmp	sl, r3
 8007516:	dc3a      	bgt.n	800758e <_printf_float+0x38a>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07da      	lsls	r2, r3, #31
 800751c:	d437      	bmi.n	800758e <_printf_float+0x38a>
 800751e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007520:	ebaa 0903 	sub.w	r9, sl, r3
 8007524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007526:	ebaa 0303 	sub.w	r3, sl, r3
 800752a:	4599      	cmp	r9, r3
 800752c:	bfa8      	it	ge
 800752e:	4699      	movge	r9, r3
 8007530:	f1b9 0f00 	cmp.w	r9, #0
 8007534:	dc33      	bgt.n	800759e <_printf_float+0x39a>
 8007536:	f04f 0800 	mov.w	r8, #0
 800753a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800753e:	f104 0b1a 	add.w	fp, r4, #26
 8007542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007544:	ebaa 0303 	sub.w	r3, sl, r3
 8007548:	eba3 0309 	sub.w	r3, r3, r9
 800754c:	4543      	cmp	r3, r8
 800754e:	f77f af7a 	ble.w	8007446 <_printf_float+0x242>
 8007552:	2301      	movs	r3, #1
 8007554:	465a      	mov	r2, fp
 8007556:	4631      	mov	r1, r6
 8007558:	4628      	mov	r0, r5
 800755a:	47b8      	blx	r7
 800755c:	3001      	adds	r0, #1
 800755e:	f43f aeac 	beq.w	80072ba <_printf_float+0xb6>
 8007562:	f108 0801 	add.w	r8, r8, #1
 8007566:	e7ec      	b.n	8007542 <_printf_float+0x33e>
 8007568:	4642      	mov	r2, r8
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	d1c2      	bne.n	80074fa <_printf_float+0x2f6>
 8007574:	e6a1      	b.n	80072ba <_printf_float+0xb6>
 8007576:	2301      	movs	r3, #1
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	920a      	str	r2, [sp, #40]	@ 0x28
 800757e:	47b8      	blx	r7
 8007580:	3001      	adds	r0, #1
 8007582:	f43f ae9a 	beq.w	80072ba <_printf_float+0xb6>
 8007586:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007588:	f10b 0b01 	add.w	fp, fp, #1
 800758c:	e7bb      	b.n	8007506 <_printf_float+0x302>
 800758e:	4631      	mov	r1, r6
 8007590:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007594:	4628      	mov	r0, r5
 8007596:	47b8      	blx	r7
 8007598:	3001      	adds	r0, #1
 800759a:	d1c0      	bne.n	800751e <_printf_float+0x31a>
 800759c:	e68d      	b.n	80072ba <_printf_float+0xb6>
 800759e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075a0:	464b      	mov	r3, r9
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	4442      	add	r2, r8
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	d1c3      	bne.n	8007536 <_printf_float+0x332>
 80075ae:	e684      	b.n	80072ba <_printf_float+0xb6>
 80075b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80075b4:	f1ba 0f01 	cmp.w	sl, #1
 80075b8:	dc01      	bgt.n	80075be <_printf_float+0x3ba>
 80075ba:	07db      	lsls	r3, r3, #31
 80075bc:	d536      	bpl.n	800762c <_printf_float+0x428>
 80075be:	2301      	movs	r3, #1
 80075c0:	4642      	mov	r2, r8
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	f43f ae76 	beq.w	80072ba <_printf_float+0xb6>
 80075ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	f43f ae6e 	beq.w	80072ba <_printf_float+0xb6>
 80075de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075e2:	2200      	movs	r2, #0
 80075e4:	2300      	movs	r3, #0
 80075e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ea:	f7f9 f9dd 	bl	80009a8 <__aeabi_dcmpeq>
 80075ee:	b9c0      	cbnz	r0, 8007622 <_printf_float+0x41e>
 80075f0:	4653      	mov	r3, sl
 80075f2:	f108 0201 	add.w	r2, r8, #1
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	d10c      	bne.n	800761a <_printf_float+0x416>
 8007600:	e65b      	b.n	80072ba <_printf_float+0xb6>
 8007602:	2301      	movs	r3, #1
 8007604:	465a      	mov	r2, fp
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f ae54 	beq.w	80072ba <_printf_float+0xb6>
 8007612:	f108 0801 	add.w	r8, r8, #1
 8007616:	45d0      	cmp	r8, sl
 8007618:	dbf3      	blt.n	8007602 <_printf_float+0x3fe>
 800761a:	464b      	mov	r3, r9
 800761c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007620:	e6e0      	b.n	80073e4 <_printf_float+0x1e0>
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	f104 0b1a 	add.w	fp, r4, #26
 800762a:	e7f4      	b.n	8007616 <_printf_float+0x412>
 800762c:	2301      	movs	r3, #1
 800762e:	4642      	mov	r2, r8
 8007630:	e7e1      	b.n	80075f6 <_printf_float+0x3f2>
 8007632:	2301      	movs	r3, #1
 8007634:	464a      	mov	r2, r9
 8007636:	4631      	mov	r1, r6
 8007638:	4628      	mov	r0, r5
 800763a:	47b8      	blx	r7
 800763c:	3001      	adds	r0, #1
 800763e:	f43f ae3c 	beq.w	80072ba <_printf_float+0xb6>
 8007642:	f108 0801 	add.w	r8, r8, #1
 8007646:	68e3      	ldr	r3, [r4, #12]
 8007648:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800764a:	1a5b      	subs	r3, r3, r1
 800764c:	4543      	cmp	r3, r8
 800764e:	dcf0      	bgt.n	8007632 <_printf_float+0x42e>
 8007650:	e6fd      	b.n	800744e <_printf_float+0x24a>
 8007652:	f04f 0800 	mov.w	r8, #0
 8007656:	f104 0919 	add.w	r9, r4, #25
 800765a:	e7f4      	b.n	8007646 <_printf_float+0x442>

0800765c <_printf_common>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	4616      	mov	r6, r2
 8007662:	4698      	mov	r8, r3
 8007664:	688a      	ldr	r2, [r1, #8]
 8007666:	690b      	ldr	r3, [r1, #16]
 8007668:	4607      	mov	r7, r0
 800766a:	4293      	cmp	r3, r2
 800766c:	bfb8      	it	lt
 800766e:	4613      	movlt	r3, r2
 8007670:	6033      	str	r3, [r6, #0]
 8007672:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007676:	460c      	mov	r4, r1
 8007678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800767c:	b10a      	cbz	r2, 8007682 <_printf_common+0x26>
 800767e:	3301      	adds	r3, #1
 8007680:	6033      	str	r3, [r6, #0]
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	0699      	lsls	r1, r3, #26
 8007686:	bf42      	ittt	mi
 8007688:	6833      	ldrmi	r3, [r6, #0]
 800768a:	3302      	addmi	r3, #2
 800768c:	6033      	strmi	r3, [r6, #0]
 800768e:	6825      	ldr	r5, [r4, #0]
 8007690:	f015 0506 	ands.w	r5, r5, #6
 8007694:	d106      	bne.n	80076a4 <_printf_common+0x48>
 8007696:	f104 0a19 	add.w	sl, r4, #25
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	6832      	ldr	r2, [r6, #0]
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dc2b      	bgt.n	80076fc <_printf_common+0xa0>
 80076a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	3b00      	subs	r3, #0
 80076ac:	bf18      	it	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	0692      	lsls	r2, r2, #26
 80076b2:	d430      	bmi.n	8007716 <_printf_common+0xba>
 80076b4:	4641      	mov	r1, r8
 80076b6:	4638      	mov	r0, r7
 80076b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076bc:	47c8      	blx	r9
 80076be:	3001      	adds	r0, #1
 80076c0:	d023      	beq.n	800770a <_printf_common+0xae>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	6922      	ldr	r2, [r4, #16]
 80076c6:	f003 0306 	and.w	r3, r3, #6
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	bf14      	ite	ne
 80076ce:	2500      	movne	r5, #0
 80076d0:	6833      	ldreq	r3, [r6, #0]
 80076d2:	f04f 0600 	mov.w	r6, #0
 80076d6:	bf08      	it	eq
 80076d8:	68e5      	ldreq	r5, [r4, #12]
 80076da:	f104 041a 	add.w	r4, r4, #26
 80076de:	bf08      	it	eq
 80076e0:	1aed      	subeq	r5, r5, r3
 80076e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076e6:	bf08      	it	eq
 80076e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076ec:	4293      	cmp	r3, r2
 80076ee:	bfc4      	itt	gt
 80076f0:	1a9b      	subgt	r3, r3, r2
 80076f2:	18ed      	addgt	r5, r5, r3
 80076f4:	42b5      	cmp	r5, r6
 80076f6:	d11a      	bne.n	800772e <_printf_common+0xd2>
 80076f8:	2000      	movs	r0, #0
 80076fa:	e008      	b.n	800770e <_printf_common+0xb2>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4652      	mov	r2, sl
 8007700:	4641      	mov	r1, r8
 8007702:	4638      	mov	r0, r7
 8007704:	47c8      	blx	r9
 8007706:	3001      	adds	r0, #1
 8007708:	d103      	bne.n	8007712 <_printf_common+0xb6>
 800770a:	f04f 30ff 	mov.w	r0, #4294967295
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	3501      	adds	r5, #1
 8007714:	e7c1      	b.n	800769a <_printf_common+0x3e>
 8007716:	2030      	movs	r0, #48	@ 0x30
 8007718:	18e1      	adds	r1, r4, r3
 800771a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007724:	4422      	add	r2, r4
 8007726:	3302      	adds	r3, #2
 8007728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800772c:	e7c2      	b.n	80076b4 <_printf_common+0x58>
 800772e:	2301      	movs	r3, #1
 8007730:	4622      	mov	r2, r4
 8007732:	4641      	mov	r1, r8
 8007734:	4638      	mov	r0, r7
 8007736:	47c8      	blx	r9
 8007738:	3001      	adds	r0, #1
 800773a:	d0e6      	beq.n	800770a <_printf_common+0xae>
 800773c:	3601      	adds	r6, #1
 800773e:	e7d9      	b.n	80076f4 <_printf_common+0x98>

08007740 <_printf_i>:
 8007740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	7e0f      	ldrb	r7, [r1, #24]
 8007746:	4691      	mov	r9, r2
 8007748:	2f78      	cmp	r7, #120	@ 0x78
 800774a:	4680      	mov	r8, r0
 800774c:	460c      	mov	r4, r1
 800774e:	469a      	mov	sl, r3
 8007750:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007756:	d807      	bhi.n	8007768 <_printf_i+0x28>
 8007758:	2f62      	cmp	r7, #98	@ 0x62
 800775a:	d80a      	bhi.n	8007772 <_printf_i+0x32>
 800775c:	2f00      	cmp	r7, #0
 800775e:	f000 80d3 	beq.w	8007908 <_printf_i+0x1c8>
 8007762:	2f58      	cmp	r7, #88	@ 0x58
 8007764:	f000 80ba 	beq.w	80078dc <_printf_i+0x19c>
 8007768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800776c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007770:	e03a      	b.n	80077e8 <_printf_i+0xa8>
 8007772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007776:	2b15      	cmp	r3, #21
 8007778:	d8f6      	bhi.n	8007768 <_printf_i+0x28>
 800777a:	a101      	add	r1, pc, #4	@ (adr r1, 8007780 <_printf_i+0x40>)
 800777c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077ed 	.word	0x080077ed
 8007788:	08007769 	.word	0x08007769
 800778c:	08007769 	.word	0x08007769
 8007790:	08007769 	.word	0x08007769
 8007794:	08007769 	.word	0x08007769
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007769 	.word	0x08007769
 80077a0:	08007769 	.word	0x08007769
 80077a4:	08007769 	.word	0x08007769
 80077a8:	08007769 	.word	0x08007769
 80077ac:	080078ef 	.word	0x080078ef
 80077b0:	08007817 	.word	0x08007817
 80077b4:	080078a9 	.word	0x080078a9
 80077b8:	08007769 	.word	0x08007769
 80077bc:	08007769 	.word	0x08007769
 80077c0:	08007911 	.word	0x08007911
 80077c4:	08007769 	.word	0x08007769
 80077c8:	08007817 	.word	0x08007817
 80077cc:	08007769 	.word	0x08007769
 80077d0:	08007769 	.word	0x08007769
 80077d4:	080078b1 	.word	0x080078b1
 80077d8:	6833      	ldr	r3, [r6, #0]
 80077da:	1d1a      	adds	r2, r3, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6032      	str	r2, [r6, #0]
 80077e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077e8:	2301      	movs	r3, #1
 80077ea:	e09e      	b.n	800792a <_printf_i+0x1ea>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	1d19      	adds	r1, r3, #4
 80077f2:	6031      	str	r1, [r6, #0]
 80077f4:	0606      	lsls	r6, r0, #24
 80077f6:	d501      	bpl.n	80077fc <_printf_i+0xbc>
 80077f8:	681d      	ldr	r5, [r3, #0]
 80077fa:	e003      	b.n	8007804 <_printf_i+0xc4>
 80077fc:	0645      	lsls	r5, r0, #25
 80077fe:	d5fb      	bpl.n	80077f8 <_printf_i+0xb8>
 8007800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007804:	2d00      	cmp	r5, #0
 8007806:	da03      	bge.n	8007810 <_printf_i+0xd0>
 8007808:	232d      	movs	r3, #45	@ 0x2d
 800780a:	426d      	negs	r5, r5
 800780c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007810:	230a      	movs	r3, #10
 8007812:	4859      	ldr	r0, [pc, #356]	@ (8007978 <_printf_i+0x238>)
 8007814:	e011      	b.n	800783a <_printf_i+0xfa>
 8007816:	6821      	ldr	r1, [r4, #0]
 8007818:	6833      	ldr	r3, [r6, #0]
 800781a:	0608      	lsls	r0, r1, #24
 800781c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007820:	d402      	bmi.n	8007828 <_printf_i+0xe8>
 8007822:	0649      	lsls	r1, r1, #25
 8007824:	bf48      	it	mi
 8007826:	b2ad      	uxthmi	r5, r5
 8007828:	2f6f      	cmp	r7, #111	@ 0x6f
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	bf14      	ite	ne
 800782e:	230a      	movne	r3, #10
 8007830:	2308      	moveq	r3, #8
 8007832:	4851      	ldr	r0, [pc, #324]	@ (8007978 <_printf_i+0x238>)
 8007834:	2100      	movs	r1, #0
 8007836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800783a:	6866      	ldr	r6, [r4, #4]
 800783c:	2e00      	cmp	r6, #0
 800783e:	bfa8      	it	ge
 8007840:	6821      	ldrge	r1, [r4, #0]
 8007842:	60a6      	str	r6, [r4, #8]
 8007844:	bfa4      	itt	ge
 8007846:	f021 0104 	bicge.w	r1, r1, #4
 800784a:	6021      	strge	r1, [r4, #0]
 800784c:	b90d      	cbnz	r5, 8007852 <_printf_i+0x112>
 800784e:	2e00      	cmp	r6, #0
 8007850:	d04b      	beq.n	80078ea <_printf_i+0x1aa>
 8007852:	4616      	mov	r6, r2
 8007854:	fbb5 f1f3 	udiv	r1, r5, r3
 8007858:	fb03 5711 	mls	r7, r3, r1, r5
 800785c:	5dc7      	ldrb	r7, [r0, r7]
 800785e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007862:	462f      	mov	r7, r5
 8007864:	42bb      	cmp	r3, r7
 8007866:	460d      	mov	r5, r1
 8007868:	d9f4      	bls.n	8007854 <_printf_i+0x114>
 800786a:	2b08      	cmp	r3, #8
 800786c:	d10b      	bne.n	8007886 <_printf_i+0x146>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	07df      	lsls	r7, r3, #31
 8007872:	d508      	bpl.n	8007886 <_printf_i+0x146>
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	6861      	ldr	r1, [r4, #4]
 8007878:	4299      	cmp	r1, r3
 800787a:	bfde      	ittt	le
 800787c:	2330      	movle	r3, #48	@ 0x30
 800787e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007882:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007886:	1b92      	subs	r2, r2, r6
 8007888:	6122      	str	r2, [r4, #16]
 800788a:	464b      	mov	r3, r9
 800788c:	4621      	mov	r1, r4
 800788e:	4640      	mov	r0, r8
 8007890:	f8cd a000 	str.w	sl, [sp]
 8007894:	aa03      	add	r2, sp, #12
 8007896:	f7ff fee1 	bl	800765c <_printf_common>
 800789a:	3001      	adds	r0, #1
 800789c:	d14a      	bne.n	8007934 <_printf_i+0x1f4>
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	b004      	add	sp, #16
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	f043 0320 	orr.w	r3, r3, #32
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	2778      	movs	r7, #120	@ 0x78
 80078b2:	4832      	ldr	r0, [pc, #200]	@ (800797c <_printf_i+0x23c>)
 80078b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	6831      	ldr	r1, [r6, #0]
 80078bc:	061f      	lsls	r7, r3, #24
 80078be:	f851 5b04 	ldr.w	r5, [r1], #4
 80078c2:	d402      	bmi.n	80078ca <_printf_i+0x18a>
 80078c4:	065f      	lsls	r7, r3, #25
 80078c6:	bf48      	it	mi
 80078c8:	b2ad      	uxthmi	r5, r5
 80078ca:	6031      	str	r1, [r6, #0]
 80078cc:	07d9      	lsls	r1, r3, #31
 80078ce:	bf44      	itt	mi
 80078d0:	f043 0320 	orrmi.w	r3, r3, #32
 80078d4:	6023      	strmi	r3, [r4, #0]
 80078d6:	b11d      	cbz	r5, 80078e0 <_printf_i+0x1a0>
 80078d8:	2310      	movs	r3, #16
 80078da:	e7ab      	b.n	8007834 <_printf_i+0xf4>
 80078dc:	4826      	ldr	r0, [pc, #152]	@ (8007978 <_printf_i+0x238>)
 80078de:	e7e9      	b.n	80078b4 <_printf_i+0x174>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	f023 0320 	bic.w	r3, r3, #32
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	e7f6      	b.n	80078d8 <_printf_i+0x198>
 80078ea:	4616      	mov	r6, r2
 80078ec:	e7bd      	b.n	800786a <_printf_i+0x12a>
 80078ee:	6833      	ldr	r3, [r6, #0]
 80078f0:	6825      	ldr	r5, [r4, #0]
 80078f2:	1d18      	adds	r0, r3, #4
 80078f4:	6961      	ldr	r1, [r4, #20]
 80078f6:	6030      	str	r0, [r6, #0]
 80078f8:	062e      	lsls	r6, r5, #24
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	d501      	bpl.n	8007902 <_printf_i+0x1c2>
 80078fe:	6019      	str	r1, [r3, #0]
 8007900:	e002      	b.n	8007908 <_printf_i+0x1c8>
 8007902:	0668      	lsls	r0, r5, #25
 8007904:	d5fb      	bpl.n	80078fe <_printf_i+0x1be>
 8007906:	8019      	strh	r1, [r3, #0]
 8007908:	2300      	movs	r3, #0
 800790a:	4616      	mov	r6, r2
 800790c:	6123      	str	r3, [r4, #16]
 800790e:	e7bc      	b.n	800788a <_printf_i+0x14a>
 8007910:	6833      	ldr	r3, [r6, #0]
 8007912:	2100      	movs	r1, #0
 8007914:	1d1a      	adds	r2, r3, #4
 8007916:	6032      	str	r2, [r6, #0]
 8007918:	681e      	ldr	r6, [r3, #0]
 800791a:	6862      	ldr	r2, [r4, #4]
 800791c:	4630      	mov	r0, r6
 800791e:	f000 fac8 	bl	8007eb2 <memchr>
 8007922:	b108      	cbz	r0, 8007928 <_printf_i+0x1e8>
 8007924:	1b80      	subs	r0, r0, r6
 8007926:	6060      	str	r0, [r4, #4]
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	2300      	movs	r3, #0
 800792e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007932:	e7aa      	b.n	800788a <_printf_i+0x14a>
 8007934:	4632      	mov	r2, r6
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	47d0      	blx	sl
 800793e:	3001      	adds	r0, #1
 8007940:	d0ad      	beq.n	800789e <_printf_i+0x15e>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	079b      	lsls	r3, r3, #30
 8007946:	d413      	bmi.n	8007970 <_printf_i+0x230>
 8007948:	68e0      	ldr	r0, [r4, #12]
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	4298      	cmp	r0, r3
 800794e:	bfb8      	it	lt
 8007950:	4618      	movlt	r0, r3
 8007952:	e7a6      	b.n	80078a2 <_printf_i+0x162>
 8007954:	2301      	movs	r3, #1
 8007956:	4632      	mov	r2, r6
 8007958:	4649      	mov	r1, r9
 800795a:	4640      	mov	r0, r8
 800795c:	47d0      	blx	sl
 800795e:	3001      	adds	r0, #1
 8007960:	d09d      	beq.n	800789e <_printf_i+0x15e>
 8007962:	3501      	adds	r5, #1
 8007964:	68e3      	ldr	r3, [r4, #12]
 8007966:	9903      	ldr	r1, [sp, #12]
 8007968:	1a5b      	subs	r3, r3, r1
 800796a:	42ab      	cmp	r3, r5
 800796c:	dcf2      	bgt.n	8007954 <_printf_i+0x214>
 800796e:	e7eb      	b.n	8007948 <_printf_i+0x208>
 8007970:	2500      	movs	r5, #0
 8007972:	f104 0619 	add.w	r6, r4, #25
 8007976:	e7f5      	b.n	8007964 <_printf_i+0x224>
 8007978:	0800a0ac 	.word	0x0800a0ac
 800797c:	0800a0bd 	.word	0x0800a0bd

08007980 <std>:
 8007980:	2300      	movs	r3, #0
 8007982:	b510      	push	{r4, lr}
 8007984:	4604      	mov	r4, r0
 8007986:	e9c0 3300 	strd	r3, r3, [r0]
 800798a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800798e:	6083      	str	r3, [r0, #8]
 8007990:	8181      	strh	r1, [r0, #12]
 8007992:	6643      	str	r3, [r0, #100]	@ 0x64
 8007994:	81c2      	strh	r2, [r0, #14]
 8007996:	6183      	str	r3, [r0, #24]
 8007998:	4619      	mov	r1, r3
 800799a:	2208      	movs	r2, #8
 800799c:	305c      	adds	r0, #92	@ 0x5c
 800799e:	f000 f9f9 	bl	8007d94 <memset>
 80079a2:	4b0d      	ldr	r3, [pc, #52]	@ (80079d8 <std+0x58>)
 80079a4:	6224      	str	r4, [r4, #32]
 80079a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80079a8:	4b0c      	ldr	r3, [pc, #48]	@ (80079dc <std+0x5c>)
 80079aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079ac:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <std+0x60>)
 80079ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <std+0x64>)
 80079b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80079b4:	4b0c      	ldr	r3, [pc, #48]	@ (80079e8 <std+0x68>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	d006      	beq.n	80079c8 <std+0x48>
 80079ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079be:	4294      	cmp	r4, r2
 80079c0:	d002      	beq.n	80079c8 <std+0x48>
 80079c2:	33d0      	adds	r3, #208	@ 0xd0
 80079c4:	429c      	cmp	r4, r3
 80079c6:	d105      	bne.n	80079d4 <std+0x54>
 80079c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d0:	f000 ba6c 	b.w	8007eac <__retarget_lock_init_recursive>
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	bf00      	nop
 80079d8:	08007be5 	.word	0x08007be5
 80079dc:	08007c07 	.word	0x08007c07
 80079e0:	08007c3f 	.word	0x08007c3f
 80079e4:	08007c63 	.word	0x08007c63
 80079e8:	200004bc 	.word	0x200004bc

080079ec <stdio_exit_handler>:
 80079ec:	4a02      	ldr	r2, [pc, #8]	@ (80079f8 <stdio_exit_handler+0xc>)
 80079ee:	4903      	ldr	r1, [pc, #12]	@ (80079fc <stdio_exit_handler+0x10>)
 80079f0:	4803      	ldr	r0, [pc, #12]	@ (8007a00 <stdio_exit_handler+0x14>)
 80079f2:	f000 b869 	b.w	8007ac8 <_fwalk_sglue>
 80079f6:	bf00      	nop
 80079f8:	20000024 	.word	0x20000024
 80079fc:	08009715 	.word	0x08009715
 8007a00:	200001a0 	.word	0x200001a0

08007a04 <cleanup_stdio>:
 8007a04:	6841      	ldr	r1, [r0, #4]
 8007a06:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <cleanup_stdio+0x34>)
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	d001      	beq.n	8007a14 <cleanup_stdio+0x10>
 8007a10:	f001 fe80 	bl	8009714 <_fflush_r>
 8007a14:	68a1      	ldr	r1, [r4, #8]
 8007a16:	4b09      	ldr	r3, [pc, #36]	@ (8007a3c <cleanup_stdio+0x38>)
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	d002      	beq.n	8007a22 <cleanup_stdio+0x1e>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f001 fe79 	bl	8009714 <_fflush_r>
 8007a22:	68e1      	ldr	r1, [r4, #12]
 8007a24:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <cleanup_stdio+0x3c>)
 8007a26:	4299      	cmp	r1, r3
 8007a28:	d004      	beq.n	8007a34 <cleanup_stdio+0x30>
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a30:	f001 be70 	b.w	8009714 <_fflush_r>
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	bf00      	nop
 8007a38:	200004bc 	.word	0x200004bc
 8007a3c:	20000524 	.word	0x20000524
 8007a40:	2000058c 	.word	0x2000058c

08007a44 <global_stdio_init.part.0>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <global_stdio_init.part.0+0x30>)
 8007a48:	4c0b      	ldr	r4, [pc, #44]	@ (8007a78 <global_stdio_init.part.0+0x34>)
 8007a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a7c <global_stdio_init.part.0+0x38>)
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	2104      	movs	r1, #4
 8007a52:	2200      	movs	r2, #0
 8007a54:	f7ff ff94 	bl	8007980 <std>
 8007a58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	2109      	movs	r1, #9
 8007a60:	f7ff ff8e 	bl	8007980 <std>
 8007a64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a68:	2202      	movs	r2, #2
 8007a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6e:	2112      	movs	r1, #18
 8007a70:	f7ff bf86 	b.w	8007980 <std>
 8007a74:	200005f4 	.word	0x200005f4
 8007a78:	200004bc 	.word	0x200004bc
 8007a7c:	080079ed 	.word	0x080079ed

08007a80 <__sfp_lock_acquire>:
 8007a80:	4801      	ldr	r0, [pc, #4]	@ (8007a88 <__sfp_lock_acquire+0x8>)
 8007a82:	f000 ba14 	b.w	8007eae <__retarget_lock_acquire_recursive>
 8007a86:	bf00      	nop
 8007a88:	200005fd 	.word	0x200005fd

08007a8c <__sfp_lock_release>:
 8007a8c:	4801      	ldr	r0, [pc, #4]	@ (8007a94 <__sfp_lock_release+0x8>)
 8007a8e:	f000 ba0f 	b.w	8007eb0 <__retarget_lock_release_recursive>
 8007a92:	bf00      	nop
 8007a94:	200005fd 	.word	0x200005fd

08007a98 <__sinit>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	f7ff fff0 	bl	8007a80 <__sfp_lock_acquire>
 8007aa0:	6a23      	ldr	r3, [r4, #32]
 8007aa2:	b11b      	cbz	r3, 8007aac <__sinit+0x14>
 8007aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa8:	f7ff bff0 	b.w	8007a8c <__sfp_lock_release>
 8007aac:	4b04      	ldr	r3, [pc, #16]	@ (8007ac0 <__sinit+0x28>)
 8007aae:	6223      	str	r3, [r4, #32]
 8007ab0:	4b04      	ldr	r3, [pc, #16]	@ (8007ac4 <__sinit+0x2c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1f5      	bne.n	8007aa4 <__sinit+0xc>
 8007ab8:	f7ff ffc4 	bl	8007a44 <global_stdio_init.part.0>
 8007abc:	e7f2      	b.n	8007aa4 <__sinit+0xc>
 8007abe:	bf00      	nop
 8007ac0:	08007a05 	.word	0x08007a05
 8007ac4:	200005f4 	.word	0x200005f4

08007ac8 <_fwalk_sglue>:
 8007ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	4607      	mov	r7, r0
 8007ace:	4688      	mov	r8, r1
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8007adc:	d505      	bpl.n	8007aea <_fwalk_sglue+0x22>
 8007ade:	6824      	ldr	r4, [r4, #0]
 8007ae0:	2c00      	cmp	r4, #0
 8007ae2:	d1f7      	bne.n	8007ad4 <_fwalk_sglue+0xc>
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aea:	89ab      	ldrh	r3, [r5, #12]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d907      	bls.n	8007b00 <_fwalk_sglue+0x38>
 8007af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007af4:	3301      	adds	r3, #1
 8007af6:	d003      	beq.n	8007b00 <_fwalk_sglue+0x38>
 8007af8:	4629      	mov	r1, r5
 8007afa:	4638      	mov	r0, r7
 8007afc:	47c0      	blx	r8
 8007afe:	4306      	orrs	r6, r0
 8007b00:	3568      	adds	r5, #104	@ 0x68
 8007b02:	e7e9      	b.n	8007ad8 <_fwalk_sglue+0x10>

08007b04 <iprintf>:
 8007b04:	b40f      	push	{r0, r1, r2, r3}
 8007b06:	b507      	push	{r0, r1, r2, lr}
 8007b08:	4906      	ldr	r1, [pc, #24]	@ (8007b24 <iprintf+0x20>)
 8007b0a:	ab04      	add	r3, sp, #16
 8007b0c:	6808      	ldr	r0, [r1, #0]
 8007b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b12:	6881      	ldr	r1, [r0, #8]
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	f001 fc65 	bl	80093e4 <_vfiprintf_r>
 8007b1a:	b003      	add	sp, #12
 8007b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b20:	b004      	add	sp, #16
 8007b22:	4770      	bx	lr
 8007b24:	2000019c 	.word	0x2000019c

08007b28 <_puts_r>:
 8007b28:	6a03      	ldr	r3, [r0, #32]
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	460e      	mov	r6, r1
 8007b30:	6884      	ldr	r4, [r0, #8]
 8007b32:	b90b      	cbnz	r3, 8007b38 <_puts_r+0x10>
 8007b34:	f7ff ffb0 	bl	8007a98 <__sinit>
 8007b38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b3a:	07db      	lsls	r3, r3, #31
 8007b3c:	d405      	bmi.n	8007b4a <_puts_r+0x22>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	0598      	lsls	r0, r3, #22
 8007b42:	d402      	bmi.n	8007b4a <_puts_r+0x22>
 8007b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b46:	f000 f9b2 	bl	8007eae <__retarget_lock_acquire_recursive>
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	0719      	lsls	r1, r3, #28
 8007b4e:	d502      	bpl.n	8007b56 <_puts_r+0x2e>
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d135      	bne.n	8007bc2 <_puts_r+0x9a>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f8c5 	bl	8007ce8 <__swsetup_r>
 8007b5e:	b380      	cbz	r0, 8007bc2 <_puts_r+0x9a>
 8007b60:	f04f 35ff 	mov.w	r5, #4294967295
 8007b64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b66:	07da      	lsls	r2, r3, #31
 8007b68:	d405      	bmi.n	8007b76 <_puts_r+0x4e>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	059b      	lsls	r3, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_puts_r+0x4e>
 8007b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b72:	f000 f99d 	bl	8007eb0 <__retarget_lock_release_recursive>
 8007b76:	4628      	mov	r0, r5
 8007b78:	bd70      	pop	{r4, r5, r6, pc}
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	da04      	bge.n	8007b88 <_puts_r+0x60>
 8007b7e:	69a2      	ldr	r2, [r4, #24]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	dc17      	bgt.n	8007bb4 <_puts_r+0x8c>
 8007b84:	290a      	cmp	r1, #10
 8007b86:	d015      	beq.n	8007bb4 <_puts_r+0x8c>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	7019      	strb	r1, [r3, #0]
 8007b90:	68a3      	ldr	r3, [r4, #8]
 8007b92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b96:	3b01      	subs	r3, #1
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	2900      	cmp	r1, #0
 8007b9c:	d1ed      	bne.n	8007b7a <_puts_r+0x52>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da11      	bge.n	8007bc6 <_puts_r+0x9e>
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	210a      	movs	r1, #10
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 f85f 	bl	8007c6a <__swbuf_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d0d7      	beq.n	8007b60 <_puts_r+0x38>
 8007bb0:	250a      	movs	r5, #10
 8007bb2:	e7d7      	b.n	8007b64 <_puts_r+0x3c>
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f857 	bl	8007c6a <__swbuf_r>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d1e7      	bne.n	8007b90 <_puts_r+0x68>
 8007bc0:	e7ce      	b.n	8007b60 <_puts_r+0x38>
 8007bc2:	3e01      	subs	r6, #1
 8007bc4:	e7e4      	b.n	8007b90 <_puts_r+0x68>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	6022      	str	r2, [r4, #0]
 8007bcc:	220a      	movs	r2, #10
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e7ee      	b.n	8007bb0 <_puts_r+0x88>
	...

08007bd4 <puts>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	@ (8007be0 <puts+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f7ff bfa5 	b.w	8007b28 <_puts_r>
 8007bde:	bf00      	nop
 8007be0:	2000019c 	.word	0x2000019c

08007be4 <__sread>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bec:	f000 f900 	bl	8007df0 <_read_r>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	bfab      	itete	ge
 8007bf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf8:	181b      	addge	r3, r3, r0
 8007bfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bfe:	bfac      	ite	ge
 8007c00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c02:	81a3      	strhlt	r3, [r4, #12]
 8007c04:	bd10      	pop	{r4, pc}

08007c06 <__swrite>:
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	461f      	mov	r7, r3
 8007c0c:	898b      	ldrh	r3, [r1, #12]
 8007c0e:	4605      	mov	r5, r0
 8007c10:	05db      	lsls	r3, r3, #23
 8007c12:	460c      	mov	r4, r1
 8007c14:	4616      	mov	r6, r2
 8007c16:	d505      	bpl.n	8007c24 <__swrite+0x1e>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c20:	f000 f8d4 	bl	8007dcc <_lseek_r>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	4632      	mov	r2, r6
 8007c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	4628      	mov	r0, r5
 8007c30:	463b      	mov	r3, r7
 8007c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	f000 b8fb 	b.w	8007e34 <_write_r>

08007c3e <__sseek>:
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	460c      	mov	r4, r1
 8007c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c46:	f000 f8c1 	bl	8007dcc <_lseek_r>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	bf15      	itete	ne
 8007c50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c5a:	81a3      	strheq	r3, [r4, #12]
 8007c5c:	bf18      	it	ne
 8007c5e:	81a3      	strhne	r3, [r4, #12]
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <__sclose>:
 8007c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c66:	f000 b8a1 	b.w	8007dac <_close_r>

08007c6a <__swbuf_r>:
 8007c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6c:	460e      	mov	r6, r1
 8007c6e:	4614      	mov	r4, r2
 8007c70:	4605      	mov	r5, r0
 8007c72:	b118      	cbz	r0, 8007c7c <__swbuf_r+0x12>
 8007c74:	6a03      	ldr	r3, [r0, #32]
 8007c76:	b90b      	cbnz	r3, 8007c7c <__swbuf_r+0x12>
 8007c78:	f7ff ff0e 	bl	8007a98 <__sinit>
 8007c7c:	69a3      	ldr	r3, [r4, #24]
 8007c7e:	60a3      	str	r3, [r4, #8]
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	071a      	lsls	r2, r3, #28
 8007c84:	d501      	bpl.n	8007c8a <__swbuf_r+0x20>
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	b943      	cbnz	r3, 8007c9c <__swbuf_r+0x32>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 f82b 	bl	8007ce8 <__swsetup_r>
 8007c92:	b118      	cbz	r0, 8007c9c <__swbuf_r+0x32>
 8007c94:	f04f 37ff 	mov.w	r7, #4294967295
 8007c98:	4638      	mov	r0, r7
 8007c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	6922      	ldr	r2, [r4, #16]
 8007ca0:	b2f6      	uxtb	r6, r6
 8007ca2:	1a98      	subs	r0, r3, r2
 8007ca4:	6963      	ldr	r3, [r4, #20]
 8007ca6:	4637      	mov	r7, r6
 8007ca8:	4283      	cmp	r3, r0
 8007caa:	dc05      	bgt.n	8007cb8 <__swbuf_r+0x4e>
 8007cac:	4621      	mov	r1, r4
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f001 fd30 	bl	8009714 <_fflush_r>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d1ed      	bne.n	8007c94 <__swbuf_r+0x2a>
 8007cb8:	68a3      	ldr	r3, [r4, #8]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	60a3      	str	r3, [r4, #8]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	6022      	str	r2, [r4, #0]
 8007cc4:	701e      	strb	r6, [r3, #0]
 8007cc6:	6962      	ldr	r2, [r4, #20]
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d004      	beq.n	8007cd8 <__swbuf_r+0x6e>
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	07db      	lsls	r3, r3, #31
 8007cd2:	d5e1      	bpl.n	8007c98 <__swbuf_r+0x2e>
 8007cd4:	2e0a      	cmp	r6, #10
 8007cd6:	d1df      	bne.n	8007c98 <__swbuf_r+0x2e>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f001 fd1a 	bl	8009714 <_fflush_r>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d0d9      	beq.n	8007c98 <__swbuf_r+0x2e>
 8007ce4:	e7d6      	b.n	8007c94 <__swbuf_r+0x2a>
	...

08007ce8 <__swsetup_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4b29      	ldr	r3, [pc, #164]	@ (8007d90 <__swsetup_r+0xa8>)
 8007cec:	4605      	mov	r5, r0
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	b118      	cbz	r0, 8007cfc <__swsetup_r+0x14>
 8007cf4:	6a03      	ldr	r3, [r0, #32]
 8007cf6:	b90b      	cbnz	r3, 8007cfc <__swsetup_r+0x14>
 8007cf8:	f7ff fece 	bl	8007a98 <__sinit>
 8007cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d00:	0719      	lsls	r1, r3, #28
 8007d02:	d422      	bmi.n	8007d4a <__swsetup_r+0x62>
 8007d04:	06da      	lsls	r2, r3, #27
 8007d06:	d407      	bmi.n	8007d18 <__swsetup_r+0x30>
 8007d08:	2209      	movs	r2, #9
 8007d0a:	602a      	str	r2, [r5, #0]
 8007d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	e033      	b.n	8007d80 <__swsetup_r+0x98>
 8007d18:	0758      	lsls	r0, r3, #29
 8007d1a:	d512      	bpl.n	8007d42 <__swsetup_r+0x5a>
 8007d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d1e:	b141      	cbz	r1, 8007d32 <__swsetup_r+0x4a>
 8007d20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d24:	4299      	cmp	r1, r3
 8007d26:	d002      	beq.n	8007d2e <__swsetup_r+0x46>
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 ff4d 	bl	8008bc8 <_free_r>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6063      	str	r3, [r4, #4]
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	f043 0308 	orr.w	r3, r3, #8
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	6923      	ldr	r3, [r4, #16]
 8007d4c:	b94b      	cbnz	r3, 8007d62 <__swsetup_r+0x7a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d58:	d003      	beq.n	8007d62 <__swsetup_r+0x7a>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f001 fd38 	bl	80097d2 <__smakebuf_r>
 8007d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d66:	f013 0201 	ands.w	r2, r3, #1
 8007d6a:	d00a      	beq.n	8007d82 <__swsetup_r+0x9a>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	60a2      	str	r2, [r4, #8]
 8007d70:	6962      	ldr	r2, [r4, #20]
 8007d72:	4252      	negs	r2, r2
 8007d74:	61a2      	str	r2, [r4, #24]
 8007d76:	6922      	ldr	r2, [r4, #16]
 8007d78:	b942      	cbnz	r2, 8007d8c <__swsetup_r+0xa4>
 8007d7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d7e:	d1c5      	bne.n	8007d0c <__swsetup_r+0x24>
 8007d80:	bd38      	pop	{r3, r4, r5, pc}
 8007d82:	0799      	lsls	r1, r3, #30
 8007d84:	bf58      	it	pl
 8007d86:	6962      	ldrpl	r2, [r4, #20]
 8007d88:	60a2      	str	r2, [r4, #8]
 8007d8a:	e7f4      	b.n	8007d76 <__swsetup_r+0x8e>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e7f7      	b.n	8007d80 <__swsetup_r+0x98>
 8007d90:	2000019c 	.word	0x2000019c

08007d94 <memset>:
 8007d94:	4603      	mov	r3, r0
 8007d96:	4402      	add	r2, r0
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <memset+0xa>
 8007d9c:	4770      	bx	lr
 8007d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007da2:	e7f9      	b.n	8007d98 <memset+0x4>

08007da4 <_localeconv_r>:
 8007da4:	4800      	ldr	r0, [pc, #0]	@ (8007da8 <_localeconv_r+0x4>)
 8007da6:	4770      	bx	lr
 8007da8:	20000120 	.word	0x20000120

08007dac <_close_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	2300      	movs	r3, #0
 8007db0:	4d05      	ldr	r5, [pc, #20]	@ (8007dc8 <_close_r+0x1c>)
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	602b      	str	r3, [r5, #0]
 8007db8:	f7fa ff2e 	bl	8002c18 <_close>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_close_r+0x1a>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_close_r+0x1a>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	200005f8 	.word	0x200005f8

08007dcc <_lseek_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4d05      	ldr	r5, [pc, #20]	@ (8007dec <_lseek_r+0x20>)
 8007dd8:	602a      	str	r2, [r5, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f7fa ff26 	bl	8002c2c <_lseek>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_lseek_r+0x1e>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_lseek_r+0x1e>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	200005f8 	.word	0x200005f8

08007df0 <_read_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4d05      	ldr	r5, [pc, #20]	@ (8007e10 <_read_r+0x20>)
 8007dfc:	602a      	str	r2, [r5, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f7fa fefa 	bl	8002bf8 <_read>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_read_r+0x1e>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_read_r+0x1e>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	200005f8 	.word	0x200005f8

08007e14 <_sbrk_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	2300      	movs	r3, #0
 8007e18:	4d05      	ldr	r5, [pc, #20]	@ (8007e30 <_sbrk_r+0x1c>)
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	602b      	str	r3, [r5, #0]
 8007e20:	f7fa ff06 	bl	8002c30 <_sbrk>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_sbrk_r+0x1a>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_sbrk_r+0x1a>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	200005f8 	.word	0x200005f8

08007e34 <_write_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4d05      	ldr	r5, [pc, #20]	@ (8007e54 <_write_r+0x20>)
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7fa fb04 	bl	8002450 <_write>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_write_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_write_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	200005f8 	.word	0x200005f8

08007e58 <__errno>:
 8007e58:	4b01      	ldr	r3, [pc, #4]	@ (8007e60 <__errno+0x8>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	2000019c 	.word	0x2000019c

08007e64 <__libc_init_array>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	2600      	movs	r6, #0
 8007e68:	4d0c      	ldr	r5, [pc, #48]	@ (8007e9c <__libc_init_array+0x38>)
 8007e6a:	4c0d      	ldr	r4, [pc, #52]	@ (8007ea0 <__libc_init_array+0x3c>)
 8007e6c:	1b64      	subs	r4, r4, r5
 8007e6e:	10a4      	asrs	r4, r4, #2
 8007e70:	42a6      	cmp	r6, r4
 8007e72:	d109      	bne.n	8007e88 <__libc_init_array+0x24>
 8007e74:	f001 fd6c 	bl	8009950 <_init>
 8007e78:	2600      	movs	r6, #0
 8007e7a:	4d0a      	ldr	r5, [pc, #40]	@ (8007ea4 <__libc_init_array+0x40>)
 8007e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8007ea8 <__libc_init_array+0x44>)
 8007e7e:	1b64      	subs	r4, r4, r5
 8007e80:	10a4      	asrs	r4, r4, #2
 8007e82:	42a6      	cmp	r6, r4
 8007e84:	d105      	bne.n	8007e92 <__libc_init_array+0x2e>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8c:	4798      	blx	r3
 8007e8e:	3601      	adds	r6, #1
 8007e90:	e7ee      	b.n	8007e70 <__libc_init_array+0xc>
 8007e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e96:	4798      	blx	r3
 8007e98:	3601      	adds	r6, #1
 8007e9a:	e7f2      	b.n	8007e82 <__libc_init_array+0x1e>
 8007e9c:	0800a414 	.word	0x0800a414
 8007ea0:	0800a414 	.word	0x0800a414
 8007ea4:	0800a414 	.word	0x0800a414
 8007ea8:	0800a418 	.word	0x0800a418

08007eac <__retarget_lock_init_recursive>:
 8007eac:	4770      	bx	lr

08007eae <__retarget_lock_acquire_recursive>:
 8007eae:	4770      	bx	lr

08007eb0 <__retarget_lock_release_recursive>:
 8007eb0:	4770      	bx	lr

08007eb2 <memchr>:
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	b2c9      	uxtb	r1, r1
 8007eb8:	4402      	add	r2, r0
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	d101      	bne.n	8007ec4 <memchr+0x12>
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	e003      	b.n	8007ecc <memchr+0x1a>
 8007ec4:	7804      	ldrb	r4, [r0, #0]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	428c      	cmp	r4, r1
 8007eca:	d1f6      	bne.n	8007eba <memchr+0x8>
 8007ecc:	bd10      	pop	{r4, pc}

08007ece <memcpy>:
 8007ece:	440a      	add	r2, r1
 8007ed0:	4291      	cmp	r1, r2
 8007ed2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ed6:	d100      	bne.n	8007eda <memcpy+0xc>
 8007ed8:	4770      	bx	lr
 8007eda:	b510      	push	{r4, lr}
 8007edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ee0:	4291      	cmp	r1, r2
 8007ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ee6:	d1f9      	bne.n	8007edc <memcpy+0xe>
 8007ee8:	bd10      	pop	{r4, pc}
	...

08007eec <__assert_func>:
 8007eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eee:	4614      	mov	r4, r2
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <__assert_func+0x2c>)
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68d8      	ldr	r0, [r3, #12]
 8007efa:	b954      	cbnz	r4, 8007f12 <__assert_func+0x26>
 8007efc:	4b07      	ldr	r3, [pc, #28]	@ (8007f1c <__assert_func+0x30>)
 8007efe:	461c      	mov	r4, r3
 8007f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f04:	9100      	str	r1, [sp, #0]
 8007f06:	462b      	mov	r3, r5
 8007f08:	4905      	ldr	r1, [pc, #20]	@ (8007f20 <__assert_func+0x34>)
 8007f0a:	f001 fc2b 	bl	8009764 <fiprintf>
 8007f0e:	f001 fcbf 	bl	8009890 <abort>
 8007f12:	4b04      	ldr	r3, [pc, #16]	@ (8007f24 <__assert_func+0x38>)
 8007f14:	e7f4      	b.n	8007f00 <__assert_func+0x14>
 8007f16:	bf00      	nop
 8007f18:	2000019c 	.word	0x2000019c
 8007f1c:	0800a113 	.word	0x0800a113
 8007f20:	0800a0e5 	.word	0x0800a0e5
 8007f24:	0800a0d8 	.word	0x0800a0d8

08007f28 <quorem>:
 8007f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	6903      	ldr	r3, [r0, #16]
 8007f2e:	690c      	ldr	r4, [r1, #16]
 8007f30:	4607      	mov	r7, r0
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	db7e      	blt.n	8008034 <quorem+0x10c>
 8007f36:	3c01      	subs	r4, #1
 8007f38:	00a3      	lsls	r3, r4, #2
 8007f3a:	f100 0514 	add.w	r5, r0, #20
 8007f3e:	f101 0814 	add.w	r8, r1, #20
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f52:	3301      	adds	r3, #1
 8007f54:	429a      	cmp	r2, r3
 8007f56:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f5e:	d32e      	bcc.n	8007fbe <quorem+0x96>
 8007f60:	f04f 0a00 	mov.w	sl, #0
 8007f64:	46c4      	mov	ip, r8
 8007f66:	46ae      	mov	lr, r5
 8007f68:	46d3      	mov	fp, sl
 8007f6a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f6e:	b298      	uxth	r0, r3
 8007f70:	fb06 a000 	mla	r0, r6, r0, sl
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	0c02      	lsrs	r2, r0, #16
 8007f78:	fb06 2303 	mla	r3, r6, r3, r2
 8007f7c:	f8de 2000 	ldr.w	r2, [lr]
 8007f80:	b280      	uxth	r0, r0
 8007f82:	b292      	uxth	r2, r2
 8007f84:	1a12      	subs	r2, r2, r0
 8007f86:	445a      	add	r2, fp
 8007f88:	f8de 0000 	ldr.w	r0, [lr]
 8007f8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f96:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f9a:	b292      	uxth	r2, r2
 8007f9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fa0:	45e1      	cmp	r9, ip
 8007fa2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fa6:	f84e 2b04 	str.w	r2, [lr], #4
 8007faa:	d2de      	bcs.n	8007f6a <quorem+0x42>
 8007fac:	9b00      	ldr	r3, [sp, #0]
 8007fae:	58eb      	ldr	r3, [r5, r3]
 8007fb0:	b92b      	cbnz	r3, 8007fbe <quorem+0x96>
 8007fb2:	9b01      	ldr	r3, [sp, #4]
 8007fb4:	3b04      	subs	r3, #4
 8007fb6:	429d      	cmp	r5, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	d32f      	bcc.n	800801c <quorem+0xf4>
 8007fbc:	613c      	str	r4, [r7, #16]
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f001 f8d4 	bl	800916c <__mcmp>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	db25      	blt.n	8008014 <quorem+0xec>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fd0:	f8d1 c000 	ldr.w	ip, [r1]
 8007fd4:	fa1f fe82 	uxth.w	lr, r2
 8007fd8:	fa1f f38c 	uxth.w	r3, ip
 8007fdc:	eba3 030e 	sub.w	r3, r3, lr
 8007fe0:	4403      	add	r3, r0
 8007fe2:	0c12      	lsrs	r2, r2, #16
 8007fe4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fe8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ff2:	45c1      	cmp	r9, r8
 8007ff4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ff8:	f841 3b04 	str.w	r3, [r1], #4
 8007ffc:	d2e6      	bcs.n	8007fcc <quorem+0xa4>
 8007ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008006:	b922      	cbnz	r2, 8008012 <quorem+0xea>
 8008008:	3b04      	subs	r3, #4
 800800a:	429d      	cmp	r5, r3
 800800c:	461a      	mov	r2, r3
 800800e:	d30b      	bcc.n	8008028 <quorem+0x100>
 8008010:	613c      	str	r4, [r7, #16]
 8008012:	3601      	adds	r6, #1
 8008014:	4630      	mov	r0, r6
 8008016:	b003      	add	sp, #12
 8008018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801c:	6812      	ldr	r2, [r2, #0]
 800801e:	3b04      	subs	r3, #4
 8008020:	2a00      	cmp	r2, #0
 8008022:	d1cb      	bne.n	8007fbc <quorem+0x94>
 8008024:	3c01      	subs	r4, #1
 8008026:	e7c6      	b.n	8007fb6 <quorem+0x8e>
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	3b04      	subs	r3, #4
 800802c:	2a00      	cmp	r2, #0
 800802e:	d1ef      	bne.n	8008010 <quorem+0xe8>
 8008030:	3c01      	subs	r4, #1
 8008032:	e7ea      	b.n	800800a <quorem+0xe2>
 8008034:	2000      	movs	r0, #0
 8008036:	e7ee      	b.n	8008016 <quorem+0xee>

08008038 <_dtoa_r>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	4614      	mov	r4, r2
 800803e:	461d      	mov	r5, r3
 8008040:	69c7      	ldr	r7, [r0, #28]
 8008042:	b097      	sub	sp, #92	@ 0x5c
 8008044:	4683      	mov	fp, r0
 8008046:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800804a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800804c:	b97f      	cbnz	r7, 800806e <_dtoa_r+0x36>
 800804e:	2010      	movs	r0, #16
 8008050:	f7fe ff84 	bl	8006f5c <malloc>
 8008054:	4602      	mov	r2, r0
 8008056:	f8cb 001c 	str.w	r0, [fp, #28]
 800805a:	b920      	cbnz	r0, 8008066 <_dtoa_r+0x2e>
 800805c:	21ef      	movs	r1, #239	@ 0xef
 800805e:	4ba8      	ldr	r3, [pc, #672]	@ (8008300 <_dtoa_r+0x2c8>)
 8008060:	48a8      	ldr	r0, [pc, #672]	@ (8008304 <_dtoa_r+0x2cc>)
 8008062:	f7ff ff43 	bl	8007eec <__assert_func>
 8008066:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800806a:	6007      	str	r7, [r0, #0]
 800806c:	60c7      	str	r7, [r0, #12]
 800806e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	b159      	cbz	r1, 800808e <_dtoa_r+0x56>
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	2301      	movs	r3, #1
 800807a:	4093      	lsls	r3, r2
 800807c:	604a      	str	r2, [r1, #4]
 800807e:	608b      	str	r3, [r1, #8]
 8008080:	4658      	mov	r0, fp
 8008082:	f000 fe3b 	bl	8008cfc <_Bfree>
 8008086:	2200      	movs	r2, #0
 8008088:	f8db 301c 	ldr.w	r3, [fp, #28]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	1e2b      	subs	r3, r5, #0
 8008090:	bfaf      	iteee	ge
 8008092:	2300      	movge	r3, #0
 8008094:	2201      	movlt	r2, #1
 8008096:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800809a:	9303      	strlt	r3, [sp, #12]
 800809c:	bfa8      	it	ge
 800809e:	6033      	strge	r3, [r6, #0]
 80080a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80080a4:	4b98      	ldr	r3, [pc, #608]	@ (8008308 <_dtoa_r+0x2d0>)
 80080a6:	bfb8      	it	lt
 80080a8:	6032      	strlt	r2, [r6, #0]
 80080aa:	ea33 0308 	bics.w	r3, r3, r8
 80080ae:	d112      	bne.n	80080d6 <_dtoa_r+0x9e>
 80080b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80080bc:	4323      	orrs	r3, r4
 80080be:	f000 8550 	beq.w	8008b62 <_dtoa_r+0xb2a>
 80080c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800830c <_dtoa_r+0x2d4>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8552 	beq.w	8008b72 <_dtoa_r+0xb3a>
 80080ce:	f10a 0303 	add.w	r3, sl, #3
 80080d2:	f000 bd4c 	b.w	8008b6e <_dtoa_r+0xb36>
 80080d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080e2:	2200      	movs	r2, #0
 80080e4:	2300      	movs	r3, #0
 80080e6:	f7f8 fc5f 	bl	80009a8 <__aeabi_dcmpeq>
 80080ea:	4607      	mov	r7, r0
 80080ec:	b158      	cbz	r0, 8008106 <_dtoa_r+0xce>
 80080ee:	2301      	movs	r3, #1
 80080f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080f6:	b113      	cbz	r3, 80080fe <_dtoa_r+0xc6>
 80080f8:	4b85      	ldr	r3, [pc, #532]	@ (8008310 <_dtoa_r+0x2d8>)
 80080fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008314 <_dtoa_r+0x2dc>
 8008102:	f000 bd36 	b.w	8008b72 <_dtoa_r+0xb3a>
 8008106:	ab14      	add	r3, sp, #80	@ 0x50
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	ab15      	add	r3, sp, #84	@ 0x54
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	4658      	mov	r0, fp
 8008110:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008114:	f001 f8da 	bl	80092cc <__d2b>
 8008118:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800811c:	4681      	mov	r9, r0
 800811e:	2e00      	cmp	r6, #0
 8008120:	d077      	beq.n	8008212 <_dtoa_r+0x1da>
 8008122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008128:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800812c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008130:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008134:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008138:	9712      	str	r7, [sp, #72]	@ 0x48
 800813a:	4619      	mov	r1, r3
 800813c:	2200      	movs	r2, #0
 800813e:	4b76      	ldr	r3, [pc, #472]	@ (8008318 <_dtoa_r+0x2e0>)
 8008140:	f7f8 f812 	bl	8000168 <__aeabi_dsub>
 8008144:	a368      	add	r3, pc, #416	@ (adr r3, 80082e8 <_dtoa_r+0x2b0>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f7f8 f9c5 	bl	80004d8 <__aeabi_dmul>
 800814e:	a368      	add	r3, pc, #416	@ (adr r3, 80082f0 <_dtoa_r+0x2b8>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f80a 	bl	800016c <__adddf3>
 8008158:	4604      	mov	r4, r0
 800815a:	4630      	mov	r0, r6
 800815c:	460d      	mov	r5, r1
 800815e:	f7f8 f951 	bl	8000404 <__aeabi_i2d>
 8008162:	a365      	add	r3, pc, #404	@ (adr r3, 80082f8 <_dtoa_r+0x2c0>)
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f7f8 f9b6 	bl	80004d8 <__aeabi_dmul>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4620      	mov	r0, r4
 8008172:	4629      	mov	r1, r5
 8008174:	f7f7 fffa 	bl	800016c <__adddf3>
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	f7f8 fc5c 	bl	8000a38 <__aeabi_d2iz>
 8008180:	2200      	movs	r2, #0
 8008182:	4607      	mov	r7, r0
 8008184:	2300      	movs	r3, #0
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 fc17 	bl	80009bc <__aeabi_dcmplt>
 800818e:	b140      	cbz	r0, 80081a2 <_dtoa_r+0x16a>
 8008190:	4638      	mov	r0, r7
 8008192:	f7f8 f937 	bl	8000404 <__aeabi_i2d>
 8008196:	4622      	mov	r2, r4
 8008198:	462b      	mov	r3, r5
 800819a:	f7f8 fc05 	bl	80009a8 <__aeabi_dcmpeq>
 800819e:	b900      	cbnz	r0, 80081a2 <_dtoa_r+0x16a>
 80081a0:	3f01      	subs	r7, #1
 80081a2:	2f16      	cmp	r7, #22
 80081a4:	d853      	bhi.n	800824e <_dtoa_r+0x216>
 80081a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081aa:	4b5c      	ldr	r3, [pc, #368]	@ (800831c <_dtoa_r+0x2e4>)
 80081ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 fc02 	bl	80009bc <__aeabi_dcmplt>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d04a      	beq.n	8008252 <_dtoa_r+0x21a>
 80081bc:	2300      	movs	r3, #0
 80081be:	3f01      	subs	r7, #1
 80081c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081c4:	1b9b      	subs	r3, r3, r6
 80081c6:	1e5a      	subs	r2, r3, #1
 80081c8:	bf46      	itte	mi
 80081ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80081ce:	2300      	movmi	r3, #0
 80081d0:	f04f 0800 	movpl.w	r8, #0
 80081d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80081d6:	bf48      	it	mi
 80081d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80081da:	2f00      	cmp	r7, #0
 80081dc:	db3b      	blt.n	8008256 <_dtoa_r+0x21e>
 80081de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80081e2:	443b      	add	r3, r7
 80081e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081e6:	2300      	movs	r3, #0
 80081e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081ec:	2b09      	cmp	r3, #9
 80081ee:	d866      	bhi.n	80082be <_dtoa_r+0x286>
 80081f0:	2b05      	cmp	r3, #5
 80081f2:	bfc4      	itt	gt
 80081f4:	3b04      	subgt	r3, #4
 80081f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80081f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081fa:	bfc8      	it	gt
 80081fc:	2400      	movgt	r4, #0
 80081fe:	f1a3 0302 	sub.w	r3, r3, #2
 8008202:	bfd8      	it	le
 8008204:	2401      	movle	r4, #1
 8008206:	2b03      	cmp	r3, #3
 8008208:	d864      	bhi.n	80082d4 <_dtoa_r+0x29c>
 800820a:	e8df f003 	tbb	[pc, r3]
 800820e:	382b      	.short	0x382b
 8008210:	5636      	.short	0x5636
 8008212:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008216:	441e      	add	r6, r3
 8008218:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800821c:	2b20      	cmp	r3, #32
 800821e:	bfc1      	itttt	gt
 8008220:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008224:	fa08 f803 	lslgt.w	r8, r8, r3
 8008228:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800822c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008230:	bfd6      	itet	le
 8008232:	f1c3 0320 	rsble	r3, r3, #32
 8008236:	ea48 0003 	orrgt.w	r0, r8, r3
 800823a:	fa04 f003 	lslle.w	r0, r4, r3
 800823e:	f7f8 f8d1 	bl	80003e4 <__aeabi_ui2d>
 8008242:	2201      	movs	r2, #1
 8008244:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008248:	3e01      	subs	r6, #1
 800824a:	9212      	str	r2, [sp, #72]	@ 0x48
 800824c:	e775      	b.n	800813a <_dtoa_r+0x102>
 800824e:	2301      	movs	r3, #1
 8008250:	e7b6      	b.n	80081c0 <_dtoa_r+0x188>
 8008252:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008254:	e7b5      	b.n	80081c2 <_dtoa_r+0x18a>
 8008256:	427b      	negs	r3, r7
 8008258:	930a      	str	r3, [sp, #40]	@ 0x28
 800825a:	2300      	movs	r3, #0
 800825c:	eba8 0807 	sub.w	r8, r8, r7
 8008260:	930e      	str	r3, [sp, #56]	@ 0x38
 8008262:	e7c2      	b.n	80081ea <_dtoa_r+0x1b2>
 8008264:	2300      	movs	r3, #0
 8008266:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008268:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800826a:	2b00      	cmp	r3, #0
 800826c:	dc35      	bgt.n	80082da <_dtoa_r+0x2a2>
 800826e:	2301      	movs	r3, #1
 8008270:	461a      	mov	r2, r3
 8008272:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008276:	9221      	str	r2, [sp, #132]	@ 0x84
 8008278:	e00b      	b.n	8008292 <_dtoa_r+0x25a>
 800827a:	2301      	movs	r3, #1
 800827c:	e7f3      	b.n	8008266 <_dtoa_r+0x22e>
 800827e:	2300      	movs	r3, #0
 8008280:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008282:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	9308      	str	r3, [sp, #32]
 8008288:	3301      	adds	r3, #1
 800828a:	2b01      	cmp	r3, #1
 800828c:	9307      	str	r3, [sp, #28]
 800828e:	bfb8      	it	lt
 8008290:	2301      	movlt	r3, #1
 8008292:	2100      	movs	r1, #0
 8008294:	2204      	movs	r2, #4
 8008296:	f8db 001c 	ldr.w	r0, [fp, #28]
 800829a:	f102 0514 	add.w	r5, r2, #20
 800829e:	429d      	cmp	r5, r3
 80082a0:	d91f      	bls.n	80082e2 <_dtoa_r+0x2aa>
 80082a2:	6041      	str	r1, [r0, #4]
 80082a4:	4658      	mov	r0, fp
 80082a6:	f000 fce9 	bl	8008c7c <_Balloc>
 80082aa:	4682      	mov	sl, r0
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d139      	bne.n	8008324 <_dtoa_r+0x2ec>
 80082b0:	4602      	mov	r2, r0
 80082b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80082b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008320 <_dtoa_r+0x2e8>)
 80082b8:	e6d2      	b.n	8008060 <_dtoa_r+0x28>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e7e0      	b.n	8008280 <_dtoa_r+0x248>
 80082be:	2401      	movs	r4, #1
 80082c0:	2300      	movs	r3, #0
 80082c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80082c6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ca:	2200      	movs	r2, #0
 80082cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082d0:	2312      	movs	r3, #18
 80082d2:	e7d0      	b.n	8008276 <_dtoa_r+0x23e>
 80082d4:	2301      	movs	r3, #1
 80082d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082d8:	e7f5      	b.n	80082c6 <_dtoa_r+0x28e>
 80082da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082e0:	e7d7      	b.n	8008292 <_dtoa_r+0x25a>
 80082e2:	3101      	adds	r1, #1
 80082e4:	0052      	lsls	r2, r2, #1
 80082e6:	e7d8      	b.n	800829a <_dtoa_r+0x262>
 80082e8:	636f4361 	.word	0x636f4361
 80082ec:	3fd287a7 	.word	0x3fd287a7
 80082f0:	8b60c8b3 	.word	0x8b60c8b3
 80082f4:	3fc68a28 	.word	0x3fc68a28
 80082f8:	509f79fb 	.word	0x509f79fb
 80082fc:	3fd34413 	.word	0x3fd34413
 8008300:	0800a121 	.word	0x0800a121
 8008304:	0800a138 	.word	0x0800a138
 8008308:	7ff00000 	.word	0x7ff00000
 800830c:	0800a11d 	.word	0x0800a11d
 8008310:	0800a0ab 	.word	0x0800a0ab
 8008314:	0800a0aa 	.word	0x0800a0aa
 8008318:	3ff80000 	.word	0x3ff80000
 800831c:	0800a230 	.word	0x0800a230
 8008320:	0800a190 	.word	0x0800a190
 8008324:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008328:	6018      	str	r0, [r3, #0]
 800832a:	9b07      	ldr	r3, [sp, #28]
 800832c:	2b0e      	cmp	r3, #14
 800832e:	f200 80a4 	bhi.w	800847a <_dtoa_r+0x442>
 8008332:	2c00      	cmp	r4, #0
 8008334:	f000 80a1 	beq.w	800847a <_dtoa_r+0x442>
 8008338:	2f00      	cmp	r7, #0
 800833a:	dd33      	ble.n	80083a4 <_dtoa_r+0x36c>
 800833c:	4b86      	ldr	r3, [pc, #536]	@ (8008558 <_dtoa_r+0x520>)
 800833e:	f007 020f 	and.w	r2, r7, #15
 8008342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008346:	05f8      	lsls	r0, r7, #23
 8008348:	e9d3 3400 	ldrd	r3, r4, [r3]
 800834c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008350:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008354:	d516      	bpl.n	8008384 <_dtoa_r+0x34c>
 8008356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800835a:	4b80      	ldr	r3, [pc, #512]	@ (800855c <_dtoa_r+0x524>)
 800835c:	2603      	movs	r6, #3
 800835e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008362:	f7f8 f9e3 	bl	800072c <__aeabi_ddiv>
 8008366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836a:	f004 040f 	and.w	r4, r4, #15
 800836e:	4d7b      	ldr	r5, [pc, #492]	@ (800855c <_dtoa_r+0x524>)
 8008370:	b954      	cbnz	r4, 8008388 <_dtoa_r+0x350>
 8008372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800837a:	f7f8 f9d7 	bl	800072c <__aeabi_ddiv>
 800837e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008382:	e028      	b.n	80083d6 <_dtoa_r+0x39e>
 8008384:	2602      	movs	r6, #2
 8008386:	e7f2      	b.n	800836e <_dtoa_r+0x336>
 8008388:	07e1      	lsls	r1, r4, #31
 800838a:	d508      	bpl.n	800839e <_dtoa_r+0x366>
 800838c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008390:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008394:	f7f8 f8a0 	bl	80004d8 <__aeabi_dmul>
 8008398:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800839c:	3601      	adds	r6, #1
 800839e:	1064      	asrs	r4, r4, #1
 80083a0:	3508      	adds	r5, #8
 80083a2:	e7e5      	b.n	8008370 <_dtoa_r+0x338>
 80083a4:	f000 80d2 	beq.w	800854c <_dtoa_r+0x514>
 80083a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083ac:	427c      	negs	r4, r7
 80083ae:	4b6a      	ldr	r3, [pc, #424]	@ (8008558 <_dtoa_r+0x520>)
 80083b0:	f004 020f 	and.w	r2, r4, #15
 80083b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f8 f88c 	bl	80004d8 <__aeabi_dmul>
 80083c0:	2602      	movs	r6, #2
 80083c2:	2300      	movs	r3, #0
 80083c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083c8:	4d64      	ldr	r5, [pc, #400]	@ (800855c <_dtoa_r+0x524>)
 80083ca:	1124      	asrs	r4, r4, #4
 80083cc:	2c00      	cmp	r4, #0
 80083ce:	f040 80b2 	bne.w	8008536 <_dtoa_r+0x4fe>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1d3      	bne.n	800837e <_dtoa_r+0x346>
 80083d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80b7 	beq.w	8008550 <_dtoa_r+0x518>
 80083e2:	2200      	movs	r2, #0
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	4b5d      	ldr	r3, [pc, #372]	@ (8008560 <_dtoa_r+0x528>)
 80083ea:	f7f8 fae7 	bl	80009bc <__aeabi_dcmplt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f000 80ae 	beq.w	8008550 <_dtoa_r+0x518>
 80083f4:	9b07      	ldr	r3, [sp, #28]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 80aa 	beq.w	8008550 <_dtoa_r+0x518>
 80083fc:	9b08      	ldr	r3, [sp, #32]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dd37      	ble.n	8008472 <_dtoa_r+0x43a>
 8008402:	1e7b      	subs	r3, r7, #1
 8008404:	4620      	mov	r0, r4
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	2200      	movs	r2, #0
 800840a:	4629      	mov	r1, r5
 800840c:	4b55      	ldr	r3, [pc, #340]	@ (8008564 <_dtoa_r+0x52c>)
 800840e:	f7f8 f863 	bl	80004d8 <__aeabi_dmul>
 8008412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008416:	9c08      	ldr	r4, [sp, #32]
 8008418:	3601      	adds	r6, #1
 800841a:	4630      	mov	r0, r6
 800841c:	f7f7 fff2 	bl	8000404 <__aeabi_i2d>
 8008420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008424:	f7f8 f858 	bl	80004d8 <__aeabi_dmul>
 8008428:	2200      	movs	r2, #0
 800842a:	4b4f      	ldr	r3, [pc, #316]	@ (8008568 <_dtoa_r+0x530>)
 800842c:	f7f7 fe9e 	bl	800016c <__adddf3>
 8008430:	4605      	mov	r5, r0
 8008432:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008436:	2c00      	cmp	r4, #0
 8008438:	f040 809a 	bne.w	8008570 <_dtoa_r+0x538>
 800843c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008440:	2200      	movs	r2, #0
 8008442:	4b4a      	ldr	r3, [pc, #296]	@ (800856c <_dtoa_r+0x534>)
 8008444:	f7f7 fe90 	bl	8000168 <__aeabi_dsub>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008450:	462a      	mov	r2, r5
 8008452:	4633      	mov	r3, r6
 8008454:	f7f8 fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8008458:	2800      	cmp	r0, #0
 800845a:	f040 828e 	bne.w	800897a <_dtoa_r+0x942>
 800845e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008462:	462a      	mov	r2, r5
 8008464:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008468:	f7f8 faa8 	bl	80009bc <__aeabi_dcmplt>
 800846c:	2800      	cmp	r0, #0
 800846e:	f040 8127 	bne.w	80086c0 <_dtoa_r+0x688>
 8008472:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008476:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800847a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800847c:	2b00      	cmp	r3, #0
 800847e:	f2c0 8163 	blt.w	8008748 <_dtoa_r+0x710>
 8008482:	2f0e      	cmp	r7, #14
 8008484:	f300 8160 	bgt.w	8008748 <_dtoa_r+0x710>
 8008488:	4b33      	ldr	r3, [pc, #204]	@ (8008558 <_dtoa_r+0x520>)
 800848a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800848e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008492:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008496:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008498:	2b00      	cmp	r3, #0
 800849a:	da03      	bge.n	80084a4 <_dtoa_r+0x46c>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f340 8100 	ble.w	80086a4 <_dtoa_r+0x66c>
 80084a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084a8:	4656      	mov	r6, sl
 80084aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f8 f93b 	bl	800072c <__aeabi_ddiv>
 80084b6:	f7f8 fabf 	bl	8000a38 <__aeabi_d2iz>
 80084ba:	4680      	mov	r8, r0
 80084bc:	f7f7 ffa2 	bl	8000404 <__aeabi_i2d>
 80084c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084c4:	f7f8 f808 	bl	80004d8 <__aeabi_dmul>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f7 fe4a 	bl	8000168 <__aeabi_dsub>
 80084d4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084d8:	9d07      	ldr	r5, [sp, #28]
 80084da:	f806 4b01 	strb.w	r4, [r6], #1
 80084de:	eba6 040a 	sub.w	r4, r6, sl
 80084e2:	42a5      	cmp	r5, r4
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	f040 8116 	bne.w	8008718 <_dtoa_r+0x6e0>
 80084ec:	f7f7 fe3e 	bl	800016c <__adddf3>
 80084f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084f4:	4604      	mov	r4, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	f7f8 fa7e 	bl	80009f8 <__aeabi_dcmpgt>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f040 80f8 	bne.w	80086f2 <_dtoa_r+0x6ba>
 8008502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008506:	4620      	mov	r0, r4
 8008508:	4629      	mov	r1, r5
 800850a:	f7f8 fa4d 	bl	80009a8 <__aeabi_dcmpeq>
 800850e:	b118      	cbz	r0, 8008518 <_dtoa_r+0x4e0>
 8008510:	f018 0f01 	tst.w	r8, #1
 8008514:	f040 80ed 	bne.w	80086f2 <_dtoa_r+0x6ba>
 8008518:	4649      	mov	r1, r9
 800851a:	4658      	mov	r0, fp
 800851c:	f000 fbee 	bl	8008cfc <_Bfree>
 8008520:	2300      	movs	r3, #0
 8008522:	7033      	strb	r3, [r6, #0]
 8008524:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008526:	3701      	adds	r7, #1
 8008528:	601f      	str	r7, [r3, #0]
 800852a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 8320 	beq.w	8008b72 <_dtoa_r+0xb3a>
 8008532:	601e      	str	r6, [r3, #0]
 8008534:	e31d      	b.n	8008b72 <_dtoa_r+0xb3a>
 8008536:	07e2      	lsls	r2, r4, #31
 8008538:	d505      	bpl.n	8008546 <_dtoa_r+0x50e>
 800853a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800853e:	f7f7 ffcb 	bl	80004d8 <__aeabi_dmul>
 8008542:	2301      	movs	r3, #1
 8008544:	3601      	adds	r6, #1
 8008546:	1064      	asrs	r4, r4, #1
 8008548:	3508      	adds	r5, #8
 800854a:	e73f      	b.n	80083cc <_dtoa_r+0x394>
 800854c:	2602      	movs	r6, #2
 800854e:	e742      	b.n	80083d6 <_dtoa_r+0x39e>
 8008550:	9c07      	ldr	r4, [sp, #28]
 8008552:	9704      	str	r7, [sp, #16]
 8008554:	e761      	b.n	800841a <_dtoa_r+0x3e2>
 8008556:	bf00      	nop
 8008558:	0800a230 	.word	0x0800a230
 800855c:	0800a208 	.word	0x0800a208
 8008560:	3ff00000 	.word	0x3ff00000
 8008564:	40240000 	.word	0x40240000
 8008568:	401c0000 	.word	0x401c0000
 800856c:	40140000 	.word	0x40140000
 8008570:	4b70      	ldr	r3, [pc, #448]	@ (8008734 <_dtoa_r+0x6fc>)
 8008572:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008574:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008578:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800857c:	4454      	add	r4, sl
 800857e:	2900      	cmp	r1, #0
 8008580:	d045      	beq.n	800860e <_dtoa_r+0x5d6>
 8008582:	2000      	movs	r0, #0
 8008584:	496c      	ldr	r1, [pc, #432]	@ (8008738 <_dtoa_r+0x700>)
 8008586:	f7f8 f8d1 	bl	800072c <__aeabi_ddiv>
 800858a:	4633      	mov	r3, r6
 800858c:	462a      	mov	r2, r5
 800858e:	f7f7 fdeb 	bl	8000168 <__aeabi_dsub>
 8008592:	4656      	mov	r6, sl
 8008594:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800859c:	f7f8 fa4c 	bl	8000a38 <__aeabi_d2iz>
 80085a0:	4605      	mov	r5, r0
 80085a2:	f7f7 ff2f 	bl	8000404 <__aeabi_i2d>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ae:	f7f7 fddb 	bl	8000168 <__aeabi_dsub>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	3530      	adds	r5, #48	@ 0x30
 80085b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085c0:	f806 5b01 	strb.w	r5, [r6], #1
 80085c4:	f7f8 f9fa 	bl	80009bc <__aeabi_dcmplt>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d163      	bne.n	8008694 <_dtoa_r+0x65c>
 80085cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d0:	2000      	movs	r0, #0
 80085d2:	495a      	ldr	r1, [pc, #360]	@ (800873c <_dtoa_r+0x704>)
 80085d4:	f7f7 fdc8 	bl	8000168 <__aeabi_dsub>
 80085d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085dc:	f7f8 f9ee 	bl	80009bc <__aeabi_dcmplt>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f040 8087 	bne.w	80086f4 <_dtoa_r+0x6bc>
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	f43f af43 	beq.w	8008472 <_dtoa_r+0x43a>
 80085ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085f0:	2200      	movs	r2, #0
 80085f2:	4b53      	ldr	r3, [pc, #332]	@ (8008740 <_dtoa_r+0x708>)
 80085f4:	f7f7 ff70 	bl	80004d8 <__aeabi_dmul>
 80085f8:	2200      	movs	r2, #0
 80085fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008602:	4b4f      	ldr	r3, [pc, #316]	@ (8008740 <_dtoa_r+0x708>)
 8008604:	f7f7 ff68 	bl	80004d8 <__aeabi_dmul>
 8008608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860c:	e7c4      	b.n	8008598 <_dtoa_r+0x560>
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	f7f7 ff61 	bl	80004d8 <__aeabi_dmul>
 8008616:	4656      	mov	r6, sl
 8008618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800861c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800861e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008622:	f7f8 fa09 	bl	8000a38 <__aeabi_d2iz>
 8008626:	4605      	mov	r5, r0
 8008628:	f7f7 feec 	bl	8000404 <__aeabi_i2d>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008634:	f7f7 fd98 	bl	8000168 <__aeabi_dsub>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	3530      	adds	r5, #48	@ 0x30
 800863e:	f806 5b01 	strb.w	r5, [r6], #1
 8008642:	42a6      	cmp	r6, r4
 8008644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	d124      	bne.n	8008698 <_dtoa_r+0x660>
 800864e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008652:	4b39      	ldr	r3, [pc, #228]	@ (8008738 <_dtoa_r+0x700>)
 8008654:	f7f7 fd8a 	bl	800016c <__adddf3>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008660:	f7f8 f9ca 	bl	80009f8 <__aeabi_dcmpgt>
 8008664:	2800      	cmp	r0, #0
 8008666:	d145      	bne.n	80086f4 <_dtoa_r+0x6bc>
 8008668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800866c:	2000      	movs	r0, #0
 800866e:	4932      	ldr	r1, [pc, #200]	@ (8008738 <_dtoa_r+0x700>)
 8008670:	f7f7 fd7a 	bl	8000168 <__aeabi_dsub>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800867c:	f7f8 f99e 	bl	80009bc <__aeabi_dcmplt>
 8008680:	2800      	cmp	r0, #0
 8008682:	f43f aef6 	beq.w	8008472 <_dtoa_r+0x43a>
 8008686:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008688:	1e73      	subs	r3, r6, #1
 800868a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800868c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008690:	2b30      	cmp	r3, #48	@ 0x30
 8008692:	d0f8      	beq.n	8008686 <_dtoa_r+0x64e>
 8008694:	9f04      	ldr	r7, [sp, #16]
 8008696:	e73f      	b.n	8008518 <_dtoa_r+0x4e0>
 8008698:	4b29      	ldr	r3, [pc, #164]	@ (8008740 <_dtoa_r+0x708>)
 800869a:	f7f7 ff1d 	bl	80004d8 <__aeabi_dmul>
 800869e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a2:	e7bc      	b.n	800861e <_dtoa_r+0x5e6>
 80086a4:	d10c      	bne.n	80086c0 <_dtoa_r+0x688>
 80086a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086aa:	2200      	movs	r2, #0
 80086ac:	4b25      	ldr	r3, [pc, #148]	@ (8008744 <_dtoa_r+0x70c>)
 80086ae:	f7f7 ff13 	bl	80004d8 <__aeabi_dmul>
 80086b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086b6:	f7f8 f995 	bl	80009e4 <__aeabi_dcmpge>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	f000 815b 	beq.w	8008976 <_dtoa_r+0x93e>
 80086c0:	2400      	movs	r4, #0
 80086c2:	4625      	mov	r5, r4
 80086c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086c6:	4656      	mov	r6, sl
 80086c8:	43db      	mvns	r3, r3
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	2700      	movs	r7, #0
 80086ce:	4621      	mov	r1, r4
 80086d0:	4658      	mov	r0, fp
 80086d2:	f000 fb13 	bl	8008cfc <_Bfree>
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	d0dc      	beq.n	8008694 <_dtoa_r+0x65c>
 80086da:	b12f      	cbz	r7, 80086e8 <_dtoa_r+0x6b0>
 80086dc:	42af      	cmp	r7, r5
 80086de:	d003      	beq.n	80086e8 <_dtoa_r+0x6b0>
 80086e0:	4639      	mov	r1, r7
 80086e2:	4658      	mov	r0, fp
 80086e4:	f000 fb0a 	bl	8008cfc <_Bfree>
 80086e8:	4629      	mov	r1, r5
 80086ea:	4658      	mov	r0, fp
 80086ec:	f000 fb06 	bl	8008cfc <_Bfree>
 80086f0:	e7d0      	b.n	8008694 <_dtoa_r+0x65c>
 80086f2:	9704      	str	r7, [sp, #16]
 80086f4:	4633      	mov	r3, r6
 80086f6:	461e      	mov	r6, r3
 80086f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086fc:	2a39      	cmp	r2, #57	@ 0x39
 80086fe:	d107      	bne.n	8008710 <_dtoa_r+0x6d8>
 8008700:	459a      	cmp	sl, r3
 8008702:	d1f8      	bne.n	80086f6 <_dtoa_r+0x6be>
 8008704:	9a04      	ldr	r2, [sp, #16]
 8008706:	3201      	adds	r2, #1
 8008708:	9204      	str	r2, [sp, #16]
 800870a:	2230      	movs	r2, #48	@ 0x30
 800870c:	f88a 2000 	strb.w	r2, [sl]
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	3201      	adds	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e7bd      	b.n	8008694 <_dtoa_r+0x65c>
 8008718:	2200      	movs	r2, #0
 800871a:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <_dtoa_r+0x708>)
 800871c:	f7f7 fedc 	bl	80004d8 <__aeabi_dmul>
 8008720:	2200      	movs	r2, #0
 8008722:	2300      	movs	r3, #0
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	f7f8 f93e 	bl	80009a8 <__aeabi_dcmpeq>
 800872c:	2800      	cmp	r0, #0
 800872e:	f43f aebc 	beq.w	80084aa <_dtoa_r+0x472>
 8008732:	e6f1      	b.n	8008518 <_dtoa_r+0x4e0>
 8008734:	0800a230 	.word	0x0800a230
 8008738:	3fe00000 	.word	0x3fe00000
 800873c:	3ff00000 	.word	0x3ff00000
 8008740:	40240000 	.word	0x40240000
 8008744:	40140000 	.word	0x40140000
 8008748:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800874a:	2a00      	cmp	r2, #0
 800874c:	f000 80db 	beq.w	8008906 <_dtoa_r+0x8ce>
 8008750:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008752:	2a01      	cmp	r2, #1
 8008754:	f300 80bf 	bgt.w	80088d6 <_dtoa_r+0x89e>
 8008758:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800875a:	2a00      	cmp	r2, #0
 800875c:	f000 80b7 	beq.w	80088ce <_dtoa_r+0x896>
 8008760:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008764:	4646      	mov	r6, r8
 8008766:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800876a:	2101      	movs	r1, #1
 800876c:	441a      	add	r2, r3
 800876e:	4658      	mov	r0, fp
 8008770:	4498      	add	r8, r3
 8008772:	9209      	str	r2, [sp, #36]	@ 0x24
 8008774:	f000 fb76 	bl	8008e64 <__i2b>
 8008778:	4605      	mov	r5, r0
 800877a:	b15e      	cbz	r6, 8008794 <_dtoa_r+0x75c>
 800877c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877e:	2b00      	cmp	r3, #0
 8008780:	dd08      	ble.n	8008794 <_dtoa_r+0x75c>
 8008782:	42b3      	cmp	r3, r6
 8008784:	bfa8      	it	ge
 8008786:	4633      	movge	r3, r6
 8008788:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800878a:	eba8 0803 	sub.w	r8, r8, r3
 800878e:	1af6      	subs	r6, r6, r3
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	9309      	str	r3, [sp, #36]	@ 0x24
 8008794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008796:	b1f3      	cbz	r3, 80087d6 <_dtoa_r+0x79e>
 8008798:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 80b7 	beq.w	800890e <_dtoa_r+0x8d6>
 80087a0:	b18c      	cbz	r4, 80087c6 <_dtoa_r+0x78e>
 80087a2:	4629      	mov	r1, r5
 80087a4:	4622      	mov	r2, r4
 80087a6:	4658      	mov	r0, fp
 80087a8:	f000 fc1a 	bl	8008fe0 <__pow5mult>
 80087ac:	464a      	mov	r2, r9
 80087ae:	4601      	mov	r1, r0
 80087b0:	4605      	mov	r5, r0
 80087b2:	4658      	mov	r0, fp
 80087b4:	f000 fb6c 	bl	8008e90 <__multiply>
 80087b8:	4649      	mov	r1, r9
 80087ba:	9004      	str	r0, [sp, #16]
 80087bc:	4658      	mov	r0, fp
 80087be:	f000 fa9d 	bl	8008cfc <_Bfree>
 80087c2:	9b04      	ldr	r3, [sp, #16]
 80087c4:	4699      	mov	r9, r3
 80087c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c8:	1b1a      	subs	r2, r3, r4
 80087ca:	d004      	beq.n	80087d6 <_dtoa_r+0x79e>
 80087cc:	4649      	mov	r1, r9
 80087ce:	4658      	mov	r0, fp
 80087d0:	f000 fc06 	bl	8008fe0 <__pow5mult>
 80087d4:	4681      	mov	r9, r0
 80087d6:	2101      	movs	r1, #1
 80087d8:	4658      	mov	r0, fp
 80087da:	f000 fb43 	bl	8008e64 <__i2b>
 80087de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e0:	4604      	mov	r4, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 81c9 	beq.w	8008b7a <_dtoa_r+0xb42>
 80087e8:	461a      	mov	r2, r3
 80087ea:	4601      	mov	r1, r0
 80087ec:	4658      	mov	r0, fp
 80087ee:	f000 fbf7 	bl	8008fe0 <__pow5mult>
 80087f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087f4:	4604      	mov	r4, r0
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	f300 808f 	bgt.w	800891a <_dtoa_r+0x8e2>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 8087 	bne.w	8008912 <_dtoa_r+0x8da>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 8083 	bne.w	8008916 <_dtoa_r+0x8de>
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008816:	0d1b      	lsrs	r3, r3, #20
 8008818:	051b      	lsls	r3, r3, #20
 800881a:	b12b      	cbz	r3, 8008828 <_dtoa_r+0x7f0>
 800881c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881e:	f108 0801 	add.w	r8, r8, #1
 8008822:	3301      	adds	r3, #1
 8008824:	9309      	str	r3, [sp, #36]	@ 0x24
 8008826:	2301      	movs	r3, #1
 8008828:	930a      	str	r3, [sp, #40]	@ 0x28
 800882a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 81aa 	beq.w	8008b86 <_dtoa_r+0xb4e>
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008838:	6918      	ldr	r0, [r3, #16]
 800883a:	f000 fac7 	bl	8008dcc <__hi0bits>
 800883e:	f1c0 0020 	rsb	r0, r0, #32
 8008842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008844:	4418      	add	r0, r3
 8008846:	f010 001f 	ands.w	r0, r0, #31
 800884a:	d071      	beq.n	8008930 <_dtoa_r+0x8f8>
 800884c:	f1c0 0320 	rsb	r3, r0, #32
 8008850:	2b04      	cmp	r3, #4
 8008852:	dd65      	ble.n	8008920 <_dtoa_r+0x8e8>
 8008854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008856:	f1c0 001c 	rsb	r0, r0, #28
 800885a:	4403      	add	r3, r0
 800885c:	4480      	add	r8, r0
 800885e:	4406      	add	r6, r0
 8008860:	9309      	str	r3, [sp, #36]	@ 0x24
 8008862:	f1b8 0f00 	cmp.w	r8, #0
 8008866:	dd05      	ble.n	8008874 <_dtoa_r+0x83c>
 8008868:	4649      	mov	r1, r9
 800886a:	4642      	mov	r2, r8
 800886c:	4658      	mov	r0, fp
 800886e:	f000 fc11 	bl	8009094 <__lshift>
 8008872:	4681      	mov	r9, r0
 8008874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008876:	2b00      	cmp	r3, #0
 8008878:	dd05      	ble.n	8008886 <_dtoa_r+0x84e>
 800887a:	4621      	mov	r1, r4
 800887c:	461a      	mov	r2, r3
 800887e:	4658      	mov	r0, fp
 8008880:	f000 fc08 	bl	8009094 <__lshift>
 8008884:	4604      	mov	r4, r0
 8008886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d053      	beq.n	8008934 <_dtoa_r+0x8fc>
 800888c:	4621      	mov	r1, r4
 800888e:	4648      	mov	r0, r9
 8008890:	f000 fc6c 	bl	800916c <__mcmp>
 8008894:	2800      	cmp	r0, #0
 8008896:	da4d      	bge.n	8008934 <_dtoa_r+0x8fc>
 8008898:	1e7b      	subs	r3, r7, #1
 800889a:	4649      	mov	r1, r9
 800889c:	9304      	str	r3, [sp, #16]
 800889e:	220a      	movs	r2, #10
 80088a0:	2300      	movs	r3, #0
 80088a2:	4658      	mov	r0, fp
 80088a4:	f000 fa4c 	bl	8008d40 <__multadd>
 80088a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088aa:	4681      	mov	r9, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 816c 	beq.w	8008b8a <_dtoa_r+0xb52>
 80088b2:	2300      	movs	r3, #0
 80088b4:	4629      	mov	r1, r5
 80088b6:	220a      	movs	r2, #10
 80088b8:	4658      	mov	r0, fp
 80088ba:	f000 fa41 	bl	8008d40 <__multadd>
 80088be:	9b08      	ldr	r3, [sp, #32]
 80088c0:	4605      	mov	r5, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dc61      	bgt.n	800898a <_dtoa_r+0x952>
 80088c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	dc3b      	bgt.n	8008944 <_dtoa_r+0x90c>
 80088cc:	e05d      	b.n	800898a <_dtoa_r+0x952>
 80088ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088d4:	e746      	b.n	8008764 <_dtoa_r+0x72c>
 80088d6:	9b07      	ldr	r3, [sp, #28]
 80088d8:	1e5c      	subs	r4, r3, #1
 80088da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088dc:	42a3      	cmp	r3, r4
 80088de:	bfbf      	itttt	lt
 80088e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80088e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80088e4:	1ae3      	sublt	r3, r4, r3
 80088e6:	18d2      	addlt	r2, r2, r3
 80088e8:	bfa8      	it	ge
 80088ea:	1b1c      	subge	r4, r3, r4
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	bfbe      	ittt	lt
 80088f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80088f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80088f4:	2400      	movlt	r4, #0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfb5      	itete	lt
 80088fa:	eba8 0603 	sublt.w	r6, r8, r3
 80088fe:	4646      	movge	r6, r8
 8008900:	2300      	movlt	r3, #0
 8008902:	9b07      	ldrge	r3, [sp, #28]
 8008904:	e730      	b.n	8008768 <_dtoa_r+0x730>
 8008906:	4646      	mov	r6, r8
 8008908:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800890a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800890c:	e735      	b.n	800877a <_dtoa_r+0x742>
 800890e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008910:	e75c      	b.n	80087cc <_dtoa_r+0x794>
 8008912:	2300      	movs	r3, #0
 8008914:	e788      	b.n	8008828 <_dtoa_r+0x7f0>
 8008916:	9b02      	ldr	r3, [sp, #8]
 8008918:	e786      	b.n	8008828 <_dtoa_r+0x7f0>
 800891a:	2300      	movs	r3, #0
 800891c:	930a      	str	r3, [sp, #40]	@ 0x28
 800891e:	e788      	b.n	8008832 <_dtoa_r+0x7fa>
 8008920:	d09f      	beq.n	8008862 <_dtoa_r+0x82a>
 8008922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008924:	331c      	adds	r3, #28
 8008926:	441a      	add	r2, r3
 8008928:	4498      	add	r8, r3
 800892a:	441e      	add	r6, r3
 800892c:	9209      	str	r2, [sp, #36]	@ 0x24
 800892e:	e798      	b.n	8008862 <_dtoa_r+0x82a>
 8008930:	4603      	mov	r3, r0
 8008932:	e7f6      	b.n	8008922 <_dtoa_r+0x8ea>
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	9704      	str	r7, [sp, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	dc20      	bgt.n	800897e <_dtoa_r+0x946>
 800893c:	9308      	str	r3, [sp, #32]
 800893e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008940:	2b02      	cmp	r3, #2
 8008942:	dd1e      	ble.n	8008982 <_dtoa_r+0x94a>
 8008944:	9b08      	ldr	r3, [sp, #32]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f47f aebc 	bne.w	80086c4 <_dtoa_r+0x68c>
 800894c:	4621      	mov	r1, r4
 800894e:	2205      	movs	r2, #5
 8008950:	4658      	mov	r0, fp
 8008952:	f000 f9f5 	bl	8008d40 <__multadd>
 8008956:	4601      	mov	r1, r0
 8008958:	4604      	mov	r4, r0
 800895a:	4648      	mov	r0, r9
 800895c:	f000 fc06 	bl	800916c <__mcmp>
 8008960:	2800      	cmp	r0, #0
 8008962:	f77f aeaf 	ble.w	80086c4 <_dtoa_r+0x68c>
 8008966:	2331      	movs	r3, #49	@ 0x31
 8008968:	4656      	mov	r6, sl
 800896a:	f806 3b01 	strb.w	r3, [r6], #1
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	3301      	adds	r3, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	e6aa      	b.n	80086cc <_dtoa_r+0x694>
 8008976:	9c07      	ldr	r4, [sp, #28]
 8008978:	9704      	str	r7, [sp, #16]
 800897a:	4625      	mov	r5, r4
 800897c:	e7f3      	b.n	8008966 <_dtoa_r+0x92e>
 800897e:	9b07      	ldr	r3, [sp, #28]
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8104 	beq.w	8008b92 <_dtoa_r+0xb5a>
 800898a:	2e00      	cmp	r6, #0
 800898c:	dd05      	ble.n	800899a <_dtoa_r+0x962>
 800898e:	4629      	mov	r1, r5
 8008990:	4632      	mov	r2, r6
 8008992:	4658      	mov	r0, fp
 8008994:	f000 fb7e 	bl	8009094 <__lshift>
 8008998:	4605      	mov	r5, r0
 800899a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800899c:	2b00      	cmp	r3, #0
 800899e:	d05a      	beq.n	8008a56 <_dtoa_r+0xa1e>
 80089a0:	4658      	mov	r0, fp
 80089a2:	6869      	ldr	r1, [r5, #4]
 80089a4:	f000 f96a 	bl	8008c7c <_Balloc>
 80089a8:	4606      	mov	r6, r0
 80089aa:	b928      	cbnz	r0, 80089b8 <_dtoa_r+0x980>
 80089ac:	4602      	mov	r2, r0
 80089ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089b2:	4b83      	ldr	r3, [pc, #524]	@ (8008bc0 <_dtoa_r+0xb88>)
 80089b4:	f7ff bb54 	b.w	8008060 <_dtoa_r+0x28>
 80089b8:	692a      	ldr	r2, [r5, #16]
 80089ba:	f105 010c 	add.w	r1, r5, #12
 80089be:	3202      	adds	r2, #2
 80089c0:	0092      	lsls	r2, r2, #2
 80089c2:	300c      	adds	r0, #12
 80089c4:	f7ff fa83 	bl	8007ece <memcpy>
 80089c8:	2201      	movs	r2, #1
 80089ca:	4631      	mov	r1, r6
 80089cc:	4658      	mov	r0, fp
 80089ce:	f000 fb61 	bl	8009094 <__lshift>
 80089d2:	462f      	mov	r7, r5
 80089d4:	4605      	mov	r5, r0
 80089d6:	f10a 0301 	add.w	r3, sl, #1
 80089da:	9307      	str	r3, [sp, #28]
 80089dc:	9b08      	ldr	r3, [sp, #32]
 80089de:	4453      	add	r3, sl
 80089e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089e2:	9b02      	ldr	r3, [sp, #8]
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ea:	9b07      	ldr	r3, [sp, #28]
 80089ec:	4621      	mov	r1, r4
 80089ee:	3b01      	subs	r3, #1
 80089f0:	4648      	mov	r0, r9
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	f7ff fa98 	bl	8007f28 <quorem>
 80089f8:	4639      	mov	r1, r7
 80089fa:	9008      	str	r0, [sp, #32]
 80089fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a00:	4648      	mov	r0, r9
 8008a02:	f000 fbb3 	bl	800916c <__mcmp>
 8008a06:	462a      	mov	r2, r5
 8008a08:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fbc9 	bl	80091a4 <__mdiff>
 8008a12:	68c2      	ldr	r2, [r0, #12]
 8008a14:	4606      	mov	r6, r0
 8008a16:	bb02      	cbnz	r2, 8008a5a <_dtoa_r+0xa22>
 8008a18:	4601      	mov	r1, r0
 8008a1a:	4648      	mov	r0, r9
 8008a1c:	f000 fba6 	bl	800916c <__mcmp>
 8008a20:	4602      	mov	r2, r0
 8008a22:	4631      	mov	r1, r6
 8008a24:	4658      	mov	r0, fp
 8008a26:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a28:	f000 f968 	bl	8008cfc <_Bfree>
 8008a2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a30:	9e07      	ldr	r6, [sp, #28]
 8008a32:	ea43 0102 	orr.w	r1, r3, r2
 8008a36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a38:	4319      	orrs	r1, r3
 8008a3a:	d110      	bne.n	8008a5e <_dtoa_r+0xa26>
 8008a3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a40:	d029      	beq.n	8008a96 <_dtoa_r+0xa5e>
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	dd02      	ble.n	8008a4e <_dtoa_r+0xa16>
 8008a48:	9b08      	ldr	r3, [sp, #32]
 8008a4a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a4e:	9b02      	ldr	r3, [sp, #8]
 8008a50:	f883 8000 	strb.w	r8, [r3]
 8008a54:	e63b      	b.n	80086ce <_dtoa_r+0x696>
 8008a56:	4628      	mov	r0, r5
 8008a58:	e7bb      	b.n	80089d2 <_dtoa_r+0x99a>
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	e7e1      	b.n	8008a22 <_dtoa_r+0x9ea>
 8008a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	db04      	blt.n	8008a6e <_dtoa_r+0xa36>
 8008a64:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008a66:	430b      	orrs	r3, r1
 8008a68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	d120      	bne.n	8008ab0 <_dtoa_r+0xa78>
 8008a6e:	2a00      	cmp	r2, #0
 8008a70:	dded      	ble.n	8008a4e <_dtoa_r+0xa16>
 8008a72:	4649      	mov	r1, r9
 8008a74:	2201      	movs	r2, #1
 8008a76:	4658      	mov	r0, fp
 8008a78:	f000 fb0c 	bl	8009094 <__lshift>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4681      	mov	r9, r0
 8008a80:	f000 fb74 	bl	800916c <__mcmp>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	dc03      	bgt.n	8008a90 <_dtoa_r+0xa58>
 8008a88:	d1e1      	bne.n	8008a4e <_dtoa_r+0xa16>
 8008a8a:	f018 0f01 	tst.w	r8, #1
 8008a8e:	d0de      	beq.n	8008a4e <_dtoa_r+0xa16>
 8008a90:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a94:	d1d8      	bne.n	8008a48 <_dtoa_r+0xa10>
 8008a96:	2339      	movs	r3, #57	@ 0x39
 8008a98:	9a02      	ldr	r2, [sp, #8]
 8008a9a:	7013      	strb	r3, [r2, #0]
 8008a9c:	4633      	mov	r3, r6
 8008a9e:	461e      	mov	r6, r3
 8008aa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	2a39      	cmp	r2, #57	@ 0x39
 8008aa8:	d052      	beq.n	8008b50 <_dtoa_r+0xb18>
 8008aaa:	3201      	adds	r2, #1
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e60e      	b.n	80086ce <_dtoa_r+0x696>
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	dd07      	ble.n	8008ac4 <_dtoa_r+0xa8c>
 8008ab4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ab8:	d0ed      	beq.n	8008a96 <_dtoa_r+0xa5e>
 8008aba:	9a02      	ldr	r2, [sp, #8]
 8008abc:	f108 0301 	add.w	r3, r8, #1
 8008ac0:	7013      	strb	r3, [r2, #0]
 8008ac2:	e604      	b.n	80086ce <_dtoa_r+0x696>
 8008ac4:	9b07      	ldr	r3, [sp, #28]
 8008ac6:	9a07      	ldr	r2, [sp, #28]
 8008ac8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008acc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d028      	beq.n	8008b24 <_dtoa_r+0xaec>
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	220a      	movs	r2, #10
 8008ad8:	4658      	mov	r0, fp
 8008ada:	f000 f931 	bl	8008d40 <__multadd>
 8008ade:	42af      	cmp	r7, r5
 8008ae0:	4681      	mov	r9, r0
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	f04f 020a 	mov.w	r2, #10
 8008aea:	4639      	mov	r1, r7
 8008aec:	4658      	mov	r0, fp
 8008aee:	d107      	bne.n	8008b00 <_dtoa_r+0xac8>
 8008af0:	f000 f926 	bl	8008d40 <__multadd>
 8008af4:	4607      	mov	r7, r0
 8008af6:	4605      	mov	r5, r0
 8008af8:	9b07      	ldr	r3, [sp, #28]
 8008afa:	3301      	adds	r3, #1
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	e774      	b.n	80089ea <_dtoa_r+0x9b2>
 8008b00:	f000 f91e 	bl	8008d40 <__multadd>
 8008b04:	4629      	mov	r1, r5
 8008b06:	4607      	mov	r7, r0
 8008b08:	2300      	movs	r3, #0
 8008b0a:	220a      	movs	r2, #10
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 f917 	bl	8008d40 <__multadd>
 8008b12:	4605      	mov	r5, r0
 8008b14:	e7f0      	b.n	8008af8 <_dtoa_r+0xac0>
 8008b16:	9b08      	ldr	r3, [sp, #32]
 8008b18:	2700      	movs	r7, #0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfcc      	ite	gt
 8008b1e:	461e      	movgt	r6, r3
 8008b20:	2601      	movle	r6, #1
 8008b22:	4456      	add	r6, sl
 8008b24:	4649      	mov	r1, r9
 8008b26:	2201      	movs	r2, #1
 8008b28:	4658      	mov	r0, fp
 8008b2a:	f000 fab3 	bl	8009094 <__lshift>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4681      	mov	r9, r0
 8008b32:	f000 fb1b 	bl	800916c <__mcmp>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	dcb0      	bgt.n	8008a9c <_dtoa_r+0xa64>
 8008b3a:	d102      	bne.n	8008b42 <_dtoa_r+0xb0a>
 8008b3c:	f018 0f01 	tst.w	r8, #1
 8008b40:	d1ac      	bne.n	8008a9c <_dtoa_r+0xa64>
 8008b42:	4633      	mov	r3, r6
 8008b44:	461e      	mov	r6, r3
 8008b46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b4a:	2a30      	cmp	r2, #48	@ 0x30
 8008b4c:	d0fa      	beq.n	8008b44 <_dtoa_r+0xb0c>
 8008b4e:	e5be      	b.n	80086ce <_dtoa_r+0x696>
 8008b50:	459a      	cmp	sl, r3
 8008b52:	d1a4      	bne.n	8008a9e <_dtoa_r+0xa66>
 8008b54:	9b04      	ldr	r3, [sp, #16]
 8008b56:	3301      	adds	r3, #1
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	2331      	movs	r3, #49	@ 0x31
 8008b5c:	f88a 3000 	strb.w	r3, [sl]
 8008b60:	e5b5      	b.n	80086ce <_dtoa_r+0x696>
 8008b62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b64:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bc4 <_dtoa_r+0xb8c>
 8008b68:	b11b      	cbz	r3, 8008b72 <_dtoa_r+0xb3a>
 8008b6a:	f10a 0308 	add.w	r3, sl, #8
 8008b6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	4650      	mov	r0, sl
 8008b74:	b017      	add	sp, #92	@ 0x5c
 8008b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	f77f ae3d 	ble.w	80087fc <_dtoa_r+0x7c4>
 8008b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b84:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b86:	2001      	movs	r0, #1
 8008b88:	e65b      	b.n	8008842 <_dtoa_r+0x80a>
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f77f aed6 	ble.w	800893e <_dtoa_r+0x906>
 8008b92:	4656      	mov	r6, sl
 8008b94:	4621      	mov	r1, r4
 8008b96:	4648      	mov	r0, r9
 8008b98:	f7ff f9c6 	bl	8007f28 <quorem>
 8008b9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ba0:	9b08      	ldr	r3, [sp, #32]
 8008ba2:	f806 8b01 	strb.w	r8, [r6], #1
 8008ba6:	eba6 020a 	sub.w	r2, r6, sl
 8008baa:	4293      	cmp	r3, r2
 8008bac:	ddb3      	ble.n	8008b16 <_dtoa_r+0xade>
 8008bae:	4649      	mov	r1, r9
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	4658      	mov	r0, fp
 8008bb6:	f000 f8c3 	bl	8008d40 <__multadd>
 8008bba:	4681      	mov	r9, r0
 8008bbc:	e7ea      	b.n	8008b94 <_dtoa_r+0xb5c>
 8008bbe:	bf00      	nop
 8008bc0:	0800a190 	.word	0x0800a190
 8008bc4:	0800a114 	.word	0x0800a114

08008bc8 <_free_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4605      	mov	r5, r0
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d040      	beq.n	8008c52 <_free_r+0x8a>
 8008bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd4:	1f0c      	subs	r4, r1, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfb8      	it	lt
 8008bda:	18e4      	addlt	r4, r4, r3
 8008bdc:	f7fe fa68 	bl	80070b0 <__malloc_lock>
 8008be0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c54 <_free_r+0x8c>)
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	b933      	cbnz	r3, 8008bf4 <_free_r+0x2c>
 8008be6:	6063      	str	r3, [r4, #4]
 8008be8:	6014      	str	r4, [r2, #0]
 8008bea:	4628      	mov	r0, r5
 8008bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf0:	f7fe ba64 	b.w	80070bc <__malloc_unlock>
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	d908      	bls.n	8008c0a <_free_r+0x42>
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	1821      	adds	r1, r4, r0
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf01      	itttt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	1809      	addeq	r1, r1, r0
 8008c06:	6021      	streq	r1, [r4, #0]
 8008c08:	e7ed      	b.n	8008be6 <_free_r+0x1e>
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	b10b      	cbz	r3, 8008c14 <_free_r+0x4c>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d9fa      	bls.n	8008c0a <_free_r+0x42>
 8008c14:	6811      	ldr	r1, [r2, #0]
 8008c16:	1850      	adds	r0, r2, r1
 8008c18:	42a0      	cmp	r0, r4
 8008c1a:	d10b      	bne.n	8008c34 <_free_r+0x6c>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	4401      	add	r1, r0
 8008c20:	1850      	adds	r0, r2, r1
 8008c22:	4283      	cmp	r3, r0
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	d1e0      	bne.n	8008bea <_free_r+0x22>
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4408      	add	r0, r1
 8008c2e:	6010      	str	r0, [r2, #0]
 8008c30:	6053      	str	r3, [r2, #4]
 8008c32:	e7da      	b.n	8008bea <_free_r+0x22>
 8008c34:	d902      	bls.n	8008c3c <_free_r+0x74>
 8008c36:	230c      	movs	r3, #12
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	e7d6      	b.n	8008bea <_free_r+0x22>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	1821      	adds	r1, r4, r0
 8008c40:	428b      	cmp	r3, r1
 8008c42:	bf01      	itttt	eq
 8008c44:	6819      	ldreq	r1, [r3, #0]
 8008c46:	685b      	ldreq	r3, [r3, #4]
 8008c48:	1809      	addeq	r1, r1, r0
 8008c4a:	6021      	streq	r1, [r4, #0]
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6054      	str	r4, [r2, #4]
 8008c50:	e7cb      	b.n	8008bea <_free_r+0x22>
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200004b8 	.word	0x200004b8

08008c58 <__ascii_mbtowc>:
 8008c58:	b082      	sub	sp, #8
 8008c5a:	b901      	cbnz	r1, 8008c5e <__ascii_mbtowc+0x6>
 8008c5c:	a901      	add	r1, sp, #4
 8008c5e:	b142      	cbz	r2, 8008c72 <__ascii_mbtowc+0x1a>
 8008c60:	b14b      	cbz	r3, 8008c76 <__ascii_mbtowc+0x1e>
 8008c62:	7813      	ldrb	r3, [r2, #0]
 8008c64:	600b      	str	r3, [r1, #0]
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	1e10      	subs	r0, r2, #0
 8008c6a:	bf18      	it	ne
 8008c6c:	2001      	movne	r0, #1
 8008c6e:	b002      	add	sp, #8
 8008c70:	4770      	bx	lr
 8008c72:	4610      	mov	r0, r2
 8008c74:	e7fb      	b.n	8008c6e <__ascii_mbtowc+0x16>
 8008c76:	f06f 0001 	mvn.w	r0, #1
 8008c7a:	e7f8      	b.n	8008c6e <__ascii_mbtowc+0x16>

08008c7c <_Balloc>:
 8008c7c:	b570      	push	{r4, r5, r6, lr}
 8008c7e:	69c6      	ldr	r6, [r0, #28]
 8008c80:	4604      	mov	r4, r0
 8008c82:	460d      	mov	r5, r1
 8008c84:	b976      	cbnz	r6, 8008ca4 <_Balloc+0x28>
 8008c86:	2010      	movs	r0, #16
 8008c88:	f7fe f968 	bl	8006f5c <malloc>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	61e0      	str	r0, [r4, #28]
 8008c90:	b920      	cbnz	r0, 8008c9c <_Balloc+0x20>
 8008c92:	216b      	movs	r1, #107	@ 0x6b
 8008c94:	4b17      	ldr	r3, [pc, #92]	@ (8008cf4 <_Balloc+0x78>)
 8008c96:	4818      	ldr	r0, [pc, #96]	@ (8008cf8 <_Balloc+0x7c>)
 8008c98:	f7ff f928 	bl	8007eec <__assert_func>
 8008c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ca0:	6006      	str	r6, [r0, #0]
 8008ca2:	60c6      	str	r6, [r0, #12]
 8008ca4:	69e6      	ldr	r6, [r4, #28]
 8008ca6:	68f3      	ldr	r3, [r6, #12]
 8008ca8:	b183      	cbz	r3, 8008ccc <_Balloc+0x50>
 8008caa:	69e3      	ldr	r3, [r4, #28]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cb2:	b9b8      	cbnz	r0, 8008ce4 <_Balloc+0x68>
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8008cba:	1d72      	adds	r2, r6, #5
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	0092      	lsls	r2, r2, #2
 8008cc0:	f000 fded 	bl	800989e <_calloc_r>
 8008cc4:	b160      	cbz	r0, 8008ce0 <_Balloc+0x64>
 8008cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cca:	e00e      	b.n	8008cea <_Balloc+0x6e>
 8008ccc:	2221      	movs	r2, #33	@ 0x21
 8008cce:	2104      	movs	r1, #4
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fde4 	bl	800989e <_calloc_r>
 8008cd6:	69e3      	ldr	r3, [r4, #28]
 8008cd8:	60f0      	str	r0, [r6, #12]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e4      	bne.n	8008caa <_Balloc+0x2e>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	6802      	ldr	r2, [r0, #0]
 8008ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cea:	2300      	movs	r3, #0
 8008cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cf0:	e7f7      	b.n	8008ce2 <_Balloc+0x66>
 8008cf2:	bf00      	nop
 8008cf4:	0800a121 	.word	0x0800a121
 8008cf8:	0800a1a1 	.word	0x0800a1a1

08008cfc <_Bfree>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	69c6      	ldr	r6, [r0, #28]
 8008d00:	4605      	mov	r5, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	b976      	cbnz	r6, 8008d24 <_Bfree+0x28>
 8008d06:	2010      	movs	r0, #16
 8008d08:	f7fe f928 	bl	8006f5c <malloc>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	61e8      	str	r0, [r5, #28]
 8008d10:	b920      	cbnz	r0, 8008d1c <_Bfree+0x20>
 8008d12:	218f      	movs	r1, #143	@ 0x8f
 8008d14:	4b08      	ldr	r3, [pc, #32]	@ (8008d38 <_Bfree+0x3c>)
 8008d16:	4809      	ldr	r0, [pc, #36]	@ (8008d3c <_Bfree+0x40>)
 8008d18:	f7ff f8e8 	bl	8007eec <__assert_func>
 8008d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d20:	6006      	str	r6, [r0, #0]
 8008d22:	60c6      	str	r6, [r0, #12]
 8008d24:	b13c      	cbz	r4, 8008d36 <_Bfree+0x3a>
 8008d26:	69eb      	ldr	r3, [r5, #28]
 8008d28:	6862      	ldr	r2, [r4, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d30:	6021      	str	r1, [r4, #0]
 8008d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	0800a121 	.word	0x0800a121
 8008d3c:	0800a1a1 	.word	0x0800a1a1

08008d40 <__multadd>:
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	4607      	mov	r7, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	461e      	mov	r6, r3
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	690d      	ldr	r5, [r1, #16]
 8008d4e:	f101 0c14 	add.w	ip, r1, #20
 8008d52:	f8dc 3000 	ldr.w	r3, [ip]
 8008d56:	3001      	adds	r0, #1
 8008d58:	b299      	uxth	r1, r3
 8008d5a:	fb02 6101 	mla	r1, r2, r1, r6
 8008d5e:	0c1e      	lsrs	r6, r3, #16
 8008d60:	0c0b      	lsrs	r3, r1, #16
 8008d62:	fb02 3306 	mla	r3, r2, r6, r3
 8008d66:	b289      	uxth	r1, r1
 8008d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d6c:	4285      	cmp	r5, r0
 8008d6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d72:	f84c 1b04 	str.w	r1, [ip], #4
 8008d76:	dcec      	bgt.n	8008d52 <__multadd+0x12>
 8008d78:	b30e      	cbz	r6, 8008dbe <__multadd+0x7e>
 8008d7a:	68a3      	ldr	r3, [r4, #8]
 8008d7c:	42ab      	cmp	r3, r5
 8008d7e:	dc19      	bgt.n	8008db4 <__multadd+0x74>
 8008d80:	6861      	ldr	r1, [r4, #4]
 8008d82:	4638      	mov	r0, r7
 8008d84:	3101      	adds	r1, #1
 8008d86:	f7ff ff79 	bl	8008c7c <_Balloc>
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	b928      	cbnz	r0, 8008d9a <__multadd+0x5a>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	21ba      	movs	r1, #186	@ 0xba
 8008d92:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc4 <__multadd+0x84>)
 8008d94:	480c      	ldr	r0, [pc, #48]	@ (8008dc8 <__multadd+0x88>)
 8008d96:	f7ff f8a9 	bl	8007eec <__assert_func>
 8008d9a:	6922      	ldr	r2, [r4, #16]
 8008d9c:	f104 010c 	add.w	r1, r4, #12
 8008da0:	3202      	adds	r2, #2
 8008da2:	0092      	lsls	r2, r2, #2
 8008da4:	300c      	adds	r0, #12
 8008da6:	f7ff f892 	bl	8007ece <memcpy>
 8008daa:	4621      	mov	r1, r4
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ffa5 	bl	8008cfc <_Bfree>
 8008db2:	4644      	mov	r4, r8
 8008db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008db8:	3501      	adds	r5, #1
 8008dba:	615e      	str	r6, [r3, #20]
 8008dbc:	6125      	str	r5, [r4, #16]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc4:	0800a190 	.word	0x0800a190
 8008dc8:	0800a1a1 	.word	0x0800a1a1

08008dcc <__hi0bits>:
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008dd2:	bf3a      	itte	cc
 8008dd4:	0403      	lslcc	r3, r0, #16
 8008dd6:	2010      	movcc	r0, #16
 8008dd8:	2000      	movcs	r0, #0
 8008dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dde:	bf3c      	itt	cc
 8008de0:	021b      	lslcc	r3, r3, #8
 8008de2:	3008      	addcc	r0, #8
 8008de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008de8:	bf3c      	itt	cc
 8008dea:	011b      	lslcc	r3, r3, #4
 8008dec:	3004      	addcc	r0, #4
 8008dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df2:	bf3c      	itt	cc
 8008df4:	009b      	lslcc	r3, r3, #2
 8008df6:	3002      	addcc	r0, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	db05      	blt.n	8008e08 <__hi0bits+0x3c>
 8008dfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e00:	f100 0001 	add.w	r0, r0, #1
 8008e04:	bf08      	it	eq
 8008e06:	2020      	moveq	r0, #32
 8008e08:	4770      	bx	lr

08008e0a <__lo0bits>:
 8008e0a:	6803      	ldr	r3, [r0, #0]
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	f013 0007 	ands.w	r0, r3, #7
 8008e12:	d00b      	beq.n	8008e2c <__lo0bits+0x22>
 8008e14:	07d9      	lsls	r1, r3, #31
 8008e16:	d421      	bmi.n	8008e5c <__lo0bits+0x52>
 8008e18:	0798      	lsls	r0, r3, #30
 8008e1a:	bf49      	itett	mi
 8008e1c:	085b      	lsrmi	r3, r3, #1
 8008e1e:	089b      	lsrpl	r3, r3, #2
 8008e20:	2001      	movmi	r0, #1
 8008e22:	6013      	strmi	r3, [r2, #0]
 8008e24:	bf5c      	itt	pl
 8008e26:	2002      	movpl	r0, #2
 8008e28:	6013      	strpl	r3, [r2, #0]
 8008e2a:	4770      	bx	lr
 8008e2c:	b299      	uxth	r1, r3
 8008e2e:	b909      	cbnz	r1, 8008e34 <__lo0bits+0x2a>
 8008e30:	2010      	movs	r0, #16
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	b2d9      	uxtb	r1, r3
 8008e36:	b909      	cbnz	r1, 8008e3c <__lo0bits+0x32>
 8008e38:	3008      	adds	r0, #8
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	0719      	lsls	r1, r3, #28
 8008e3e:	bf04      	itt	eq
 8008e40:	091b      	lsreq	r3, r3, #4
 8008e42:	3004      	addeq	r0, #4
 8008e44:	0799      	lsls	r1, r3, #30
 8008e46:	bf04      	itt	eq
 8008e48:	089b      	lsreq	r3, r3, #2
 8008e4a:	3002      	addeq	r0, #2
 8008e4c:	07d9      	lsls	r1, r3, #31
 8008e4e:	d403      	bmi.n	8008e58 <__lo0bits+0x4e>
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	f100 0001 	add.w	r0, r0, #1
 8008e56:	d003      	beq.n	8008e60 <__lo0bits+0x56>
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	4770      	bx	lr
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	4770      	bx	lr
 8008e60:	2020      	movs	r0, #32
 8008e62:	4770      	bx	lr

08008e64 <__i2b>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	460c      	mov	r4, r1
 8008e68:	2101      	movs	r1, #1
 8008e6a:	f7ff ff07 	bl	8008c7c <_Balloc>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	b928      	cbnz	r0, 8008e7e <__i2b+0x1a>
 8008e72:	f240 1145 	movw	r1, #325	@ 0x145
 8008e76:	4b04      	ldr	r3, [pc, #16]	@ (8008e88 <__i2b+0x24>)
 8008e78:	4804      	ldr	r0, [pc, #16]	@ (8008e8c <__i2b+0x28>)
 8008e7a:	f7ff f837 	bl	8007eec <__assert_func>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	6144      	str	r4, [r0, #20]
 8008e82:	6103      	str	r3, [r0, #16]
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	bf00      	nop
 8008e88:	0800a190 	.word	0x0800a190
 8008e8c:	0800a1a1 	.word	0x0800a1a1

08008e90 <__multiply>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	4614      	mov	r4, r2
 8008e96:	690a      	ldr	r2, [r1, #16]
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	bfa2      	ittt	ge
 8008ea0:	4623      	movge	r3, r4
 8008ea2:	460c      	movge	r4, r1
 8008ea4:	461f      	movge	r7, r3
 8008ea6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008eaa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	6861      	ldr	r1, [r4, #4]
 8008eb2:	eb0a 0609 	add.w	r6, sl, r9
 8008eb6:	42b3      	cmp	r3, r6
 8008eb8:	b085      	sub	sp, #20
 8008eba:	bfb8      	it	lt
 8008ebc:	3101      	addlt	r1, #1
 8008ebe:	f7ff fedd 	bl	8008c7c <_Balloc>
 8008ec2:	b930      	cbnz	r0, 8008ed2 <__multiply+0x42>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008eca:	4b43      	ldr	r3, [pc, #268]	@ (8008fd8 <__multiply+0x148>)
 8008ecc:	4843      	ldr	r0, [pc, #268]	@ (8008fdc <__multiply+0x14c>)
 8008ece:	f7ff f80d 	bl	8007eec <__assert_func>
 8008ed2:	f100 0514 	add.w	r5, r0, #20
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	2200      	movs	r2, #0
 8008eda:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ede:	4543      	cmp	r3, r8
 8008ee0:	d321      	bcc.n	8008f26 <__multiply+0x96>
 8008ee2:	f107 0114 	add.w	r1, r7, #20
 8008ee6:	f104 0214 	add.w	r2, r4, #20
 8008eea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008eee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ef2:	9302      	str	r3, [sp, #8]
 8008ef4:	1b13      	subs	r3, r2, r4
 8008ef6:	3b15      	subs	r3, #21
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	3304      	adds	r3, #4
 8008efe:	f104 0715 	add.w	r7, r4, #21
 8008f02:	42ba      	cmp	r2, r7
 8008f04:	bf38      	it	cc
 8008f06:	2304      	movcc	r3, #4
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	9103      	str	r1, [sp, #12]
 8008f0e:	428b      	cmp	r3, r1
 8008f10:	d80c      	bhi.n	8008f2c <__multiply+0x9c>
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	dd03      	ble.n	8008f1e <__multiply+0x8e>
 8008f16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d05a      	beq.n	8008fd4 <__multiply+0x144>
 8008f1e:	6106      	str	r6, [r0, #16]
 8008f20:	b005      	add	sp, #20
 8008f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f26:	f843 2b04 	str.w	r2, [r3], #4
 8008f2a:	e7d8      	b.n	8008ede <__multiply+0x4e>
 8008f2c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f30:	f1ba 0f00 	cmp.w	sl, #0
 8008f34:	d023      	beq.n	8008f7e <__multiply+0xee>
 8008f36:	46a9      	mov	r9, r5
 8008f38:	f04f 0c00 	mov.w	ip, #0
 8008f3c:	f104 0e14 	add.w	lr, r4, #20
 8008f40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f44:	f8d9 3000 	ldr.w	r3, [r9]
 8008f48:	fa1f fb87 	uxth.w	fp, r7
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f52:	4463      	add	r3, ip
 8008f54:	f8d9 c000 	ldr.w	ip, [r9]
 8008f58:	0c3f      	lsrs	r7, r7, #16
 8008f5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008f5e:	fb0a c707 	mla	r7, sl, r7, ip
 8008f62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f6c:	4572      	cmp	r2, lr
 8008f6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f72:	f849 3b04 	str.w	r3, [r9], #4
 8008f76:	d8e3      	bhi.n	8008f40 <__multiply+0xb0>
 8008f78:	9b01      	ldr	r3, [sp, #4]
 8008f7a:	f845 c003 	str.w	ip, [r5, r3]
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	3104      	adds	r1, #4
 8008f82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f86:	f1b9 0f00 	cmp.w	r9, #0
 8008f8a:	d021      	beq.n	8008fd0 <__multiply+0x140>
 8008f8c:	46ae      	mov	lr, r5
 8008f8e:	f04f 0a00 	mov.w	sl, #0
 8008f92:	682b      	ldr	r3, [r5, #0]
 8008f94:	f104 0c14 	add.w	ip, r4, #20
 8008f98:	f8bc b000 	ldrh.w	fp, [ip]
 8008f9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	fb09 770b 	mla	r7, r9, fp, r7
 8008fa6:	4457      	add	r7, sl
 8008fa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008fac:	f84e 3b04 	str.w	r3, [lr], #4
 8008fb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb8:	f8be 3000 	ldrh.w	r3, [lr]
 8008fbc:	4562      	cmp	r2, ip
 8008fbe:	fb09 330a 	mla	r3, r9, sl, r3
 8008fc2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008fc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fca:	d8e5      	bhi.n	8008f98 <__multiply+0x108>
 8008fcc:	9f01      	ldr	r7, [sp, #4]
 8008fce:	51eb      	str	r3, [r5, r7]
 8008fd0:	3504      	adds	r5, #4
 8008fd2:	e79a      	b.n	8008f0a <__multiply+0x7a>
 8008fd4:	3e01      	subs	r6, #1
 8008fd6:	e79c      	b.n	8008f12 <__multiply+0x82>
 8008fd8:	0800a190 	.word	0x0800a190
 8008fdc:	0800a1a1 	.word	0x0800a1a1

08008fe0 <__pow5mult>:
 8008fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	f012 0203 	ands.w	r2, r2, #3
 8008fea:	4607      	mov	r7, r0
 8008fec:	460e      	mov	r6, r1
 8008fee:	d007      	beq.n	8009000 <__pow5mult+0x20>
 8008ff0:	4c25      	ldr	r4, [pc, #148]	@ (8009088 <__pow5mult+0xa8>)
 8008ff2:	3a01      	subs	r2, #1
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ffa:	f7ff fea1 	bl	8008d40 <__multadd>
 8008ffe:	4606      	mov	r6, r0
 8009000:	10ad      	asrs	r5, r5, #2
 8009002:	d03d      	beq.n	8009080 <__pow5mult+0xa0>
 8009004:	69fc      	ldr	r4, [r7, #28]
 8009006:	b97c      	cbnz	r4, 8009028 <__pow5mult+0x48>
 8009008:	2010      	movs	r0, #16
 800900a:	f7fd ffa7 	bl	8006f5c <malloc>
 800900e:	4602      	mov	r2, r0
 8009010:	61f8      	str	r0, [r7, #28]
 8009012:	b928      	cbnz	r0, 8009020 <__pow5mult+0x40>
 8009014:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009018:	4b1c      	ldr	r3, [pc, #112]	@ (800908c <__pow5mult+0xac>)
 800901a:	481d      	ldr	r0, [pc, #116]	@ (8009090 <__pow5mult+0xb0>)
 800901c:	f7fe ff66 	bl	8007eec <__assert_func>
 8009020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009024:	6004      	str	r4, [r0, #0]
 8009026:	60c4      	str	r4, [r0, #12]
 8009028:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800902c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009030:	b94c      	cbnz	r4, 8009046 <__pow5mult+0x66>
 8009032:	f240 2171 	movw	r1, #625	@ 0x271
 8009036:	4638      	mov	r0, r7
 8009038:	f7ff ff14 	bl	8008e64 <__i2b>
 800903c:	2300      	movs	r3, #0
 800903e:	4604      	mov	r4, r0
 8009040:	f8c8 0008 	str.w	r0, [r8, #8]
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	f04f 0900 	mov.w	r9, #0
 800904a:	07eb      	lsls	r3, r5, #31
 800904c:	d50a      	bpl.n	8009064 <__pow5mult+0x84>
 800904e:	4631      	mov	r1, r6
 8009050:	4622      	mov	r2, r4
 8009052:	4638      	mov	r0, r7
 8009054:	f7ff ff1c 	bl	8008e90 <__multiply>
 8009058:	4680      	mov	r8, r0
 800905a:	4631      	mov	r1, r6
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff fe4d 	bl	8008cfc <_Bfree>
 8009062:	4646      	mov	r6, r8
 8009064:	106d      	asrs	r5, r5, #1
 8009066:	d00b      	beq.n	8009080 <__pow5mult+0xa0>
 8009068:	6820      	ldr	r0, [r4, #0]
 800906a:	b938      	cbnz	r0, 800907c <__pow5mult+0x9c>
 800906c:	4622      	mov	r2, r4
 800906e:	4621      	mov	r1, r4
 8009070:	4638      	mov	r0, r7
 8009072:	f7ff ff0d 	bl	8008e90 <__multiply>
 8009076:	6020      	str	r0, [r4, #0]
 8009078:	f8c0 9000 	str.w	r9, [r0]
 800907c:	4604      	mov	r4, r0
 800907e:	e7e4      	b.n	800904a <__pow5mult+0x6a>
 8009080:	4630      	mov	r0, r6
 8009082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009086:	bf00      	nop
 8009088:	0800a1fc 	.word	0x0800a1fc
 800908c:	0800a121 	.word	0x0800a121
 8009090:	0800a1a1 	.word	0x0800a1a1

08009094 <__lshift>:
 8009094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009098:	460c      	mov	r4, r1
 800909a:	4607      	mov	r7, r0
 800909c:	4691      	mov	r9, r2
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	6849      	ldr	r1, [r1, #4]
 80090a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090ac:	f108 0601 	add.w	r6, r8, #1
 80090b0:	42b3      	cmp	r3, r6
 80090b2:	db0b      	blt.n	80090cc <__lshift+0x38>
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7ff fde1 	bl	8008c7c <_Balloc>
 80090ba:	4605      	mov	r5, r0
 80090bc:	b948      	cbnz	r0, 80090d2 <__lshift+0x3e>
 80090be:	4602      	mov	r2, r0
 80090c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090c4:	4b27      	ldr	r3, [pc, #156]	@ (8009164 <__lshift+0xd0>)
 80090c6:	4828      	ldr	r0, [pc, #160]	@ (8009168 <__lshift+0xd4>)
 80090c8:	f7fe ff10 	bl	8007eec <__assert_func>
 80090cc:	3101      	adds	r1, #1
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	e7ee      	b.n	80090b0 <__lshift+0x1c>
 80090d2:	2300      	movs	r3, #0
 80090d4:	f100 0114 	add.w	r1, r0, #20
 80090d8:	f100 0210 	add.w	r2, r0, #16
 80090dc:	4618      	mov	r0, r3
 80090de:	4553      	cmp	r3, sl
 80090e0:	db33      	blt.n	800914a <__lshift+0xb6>
 80090e2:	6920      	ldr	r0, [r4, #16]
 80090e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090e8:	f104 0314 	add.w	r3, r4, #20
 80090ec:	f019 091f 	ands.w	r9, r9, #31
 80090f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090f8:	d02b      	beq.n	8009152 <__lshift+0xbe>
 80090fa:	468a      	mov	sl, r1
 80090fc:	2200      	movs	r2, #0
 80090fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	fa00 f009 	lsl.w	r0, r0, r9
 8009108:	4310      	orrs	r0, r2
 800910a:	f84a 0b04 	str.w	r0, [sl], #4
 800910e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009112:	459c      	cmp	ip, r3
 8009114:	fa22 f20e 	lsr.w	r2, r2, lr
 8009118:	d8f3      	bhi.n	8009102 <__lshift+0x6e>
 800911a:	ebac 0304 	sub.w	r3, ip, r4
 800911e:	3b15      	subs	r3, #21
 8009120:	f023 0303 	bic.w	r3, r3, #3
 8009124:	3304      	adds	r3, #4
 8009126:	f104 0015 	add.w	r0, r4, #21
 800912a:	4584      	cmp	ip, r0
 800912c:	bf38      	it	cc
 800912e:	2304      	movcc	r3, #4
 8009130:	50ca      	str	r2, [r1, r3]
 8009132:	b10a      	cbz	r2, 8009138 <__lshift+0xa4>
 8009134:	f108 0602 	add.w	r6, r8, #2
 8009138:	3e01      	subs	r6, #1
 800913a:	4638      	mov	r0, r7
 800913c:	4621      	mov	r1, r4
 800913e:	612e      	str	r6, [r5, #16]
 8009140:	f7ff fddc 	bl	8008cfc <_Bfree>
 8009144:	4628      	mov	r0, r5
 8009146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914a:	f842 0f04 	str.w	r0, [r2, #4]!
 800914e:	3301      	adds	r3, #1
 8009150:	e7c5      	b.n	80090de <__lshift+0x4a>
 8009152:	3904      	subs	r1, #4
 8009154:	f853 2b04 	ldr.w	r2, [r3], #4
 8009158:	459c      	cmp	ip, r3
 800915a:	f841 2f04 	str.w	r2, [r1, #4]!
 800915e:	d8f9      	bhi.n	8009154 <__lshift+0xc0>
 8009160:	e7ea      	b.n	8009138 <__lshift+0xa4>
 8009162:	bf00      	nop
 8009164:	0800a190 	.word	0x0800a190
 8009168:	0800a1a1 	.word	0x0800a1a1

0800916c <__mcmp>:
 800916c:	4603      	mov	r3, r0
 800916e:	690a      	ldr	r2, [r1, #16]
 8009170:	6900      	ldr	r0, [r0, #16]
 8009172:	b530      	push	{r4, r5, lr}
 8009174:	1a80      	subs	r0, r0, r2
 8009176:	d10e      	bne.n	8009196 <__mcmp+0x2a>
 8009178:	3314      	adds	r3, #20
 800917a:	3114      	adds	r1, #20
 800917c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009180:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009184:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009188:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800918c:	4295      	cmp	r5, r2
 800918e:	d003      	beq.n	8009198 <__mcmp+0x2c>
 8009190:	d205      	bcs.n	800919e <__mcmp+0x32>
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	bd30      	pop	{r4, r5, pc}
 8009198:	42a3      	cmp	r3, r4
 800919a:	d3f3      	bcc.n	8009184 <__mcmp+0x18>
 800919c:	e7fb      	b.n	8009196 <__mcmp+0x2a>
 800919e:	2001      	movs	r0, #1
 80091a0:	e7f9      	b.n	8009196 <__mcmp+0x2a>
	...

080091a4 <__mdiff>:
 80091a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	4689      	mov	r9, r1
 80091aa:	4606      	mov	r6, r0
 80091ac:	4611      	mov	r1, r2
 80091ae:	4648      	mov	r0, r9
 80091b0:	4614      	mov	r4, r2
 80091b2:	f7ff ffdb 	bl	800916c <__mcmp>
 80091b6:	1e05      	subs	r5, r0, #0
 80091b8:	d112      	bne.n	80091e0 <__mdiff+0x3c>
 80091ba:	4629      	mov	r1, r5
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff fd5d 	bl	8008c7c <_Balloc>
 80091c2:	4602      	mov	r2, r0
 80091c4:	b928      	cbnz	r0, 80091d2 <__mdiff+0x2e>
 80091c6:	f240 2137 	movw	r1, #567	@ 0x237
 80091ca:	4b3e      	ldr	r3, [pc, #248]	@ (80092c4 <__mdiff+0x120>)
 80091cc:	483e      	ldr	r0, [pc, #248]	@ (80092c8 <__mdiff+0x124>)
 80091ce:	f7fe fe8d 	bl	8007eec <__assert_func>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091d8:	4610      	mov	r0, r2
 80091da:	b003      	add	sp, #12
 80091dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e0:	bfbc      	itt	lt
 80091e2:	464b      	movlt	r3, r9
 80091e4:	46a1      	movlt	r9, r4
 80091e6:	4630      	mov	r0, r6
 80091e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091ec:	bfba      	itte	lt
 80091ee:	461c      	movlt	r4, r3
 80091f0:	2501      	movlt	r5, #1
 80091f2:	2500      	movge	r5, #0
 80091f4:	f7ff fd42 	bl	8008c7c <_Balloc>
 80091f8:	4602      	mov	r2, r0
 80091fa:	b918      	cbnz	r0, 8009204 <__mdiff+0x60>
 80091fc:	f240 2145 	movw	r1, #581	@ 0x245
 8009200:	4b30      	ldr	r3, [pc, #192]	@ (80092c4 <__mdiff+0x120>)
 8009202:	e7e3      	b.n	80091cc <__mdiff+0x28>
 8009204:	f100 0b14 	add.w	fp, r0, #20
 8009208:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800920c:	f109 0310 	add.w	r3, r9, #16
 8009210:	60c5      	str	r5, [r0, #12]
 8009212:	f04f 0c00 	mov.w	ip, #0
 8009216:	f109 0514 	add.w	r5, r9, #20
 800921a:	46d9      	mov	r9, fp
 800921c:	6926      	ldr	r6, [r4, #16]
 800921e:	f104 0e14 	add.w	lr, r4, #20
 8009222:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009226:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009232:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009236:	b281      	uxth	r1, r0
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	fa1f f38a 	uxth.w	r3, sl
 800923e:	1a5b      	subs	r3, r3, r1
 8009240:	0c00      	lsrs	r0, r0, #16
 8009242:	4463      	add	r3, ip
 8009244:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009248:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800924c:	b29b      	uxth	r3, r3
 800924e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009252:	4576      	cmp	r6, lr
 8009254:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009258:	f849 3b04 	str.w	r3, [r9], #4
 800925c:	d8e6      	bhi.n	800922c <__mdiff+0x88>
 800925e:	1b33      	subs	r3, r6, r4
 8009260:	3b15      	subs	r3, #21
 8009262:	f023 0303 	bic.w	r3, r3, #3
 8009266:	3415      	adds	r4, #21
 8009268:	3304      	adds	r3, #4
 800926a:	42a6      	cmp	r6, r4
 800926c:	bf38      	it	cc
 800926e:	2304      	movcc	r3, #4
 8009270:	441d      	add	r5, r3
 8009272:	445b      	add	r3, fp
 8009274:	461e      	mov	r6, r3
 8009276:	462c      	mov	r4, r5
 8009278:	4544      	cmp	r4, r8
 800927a:	d30e      	bcc.n	800929a <__mdiff+0xf6>
 800927c:	f108 0103 	add.w	r1, r8, #3
 8009280:	1b49      	subs	r1, r1, r5
 8009282:	f021 0103 	bic.w	r1, r1, #3
 8009286:	3d03      	subs	r5, #3
 8009288:	45a8      	cmp	r8, r5
 800928a:	bf38      	it	cc
 800928c:	2100      	movcc	r1, #0
 800928e:	440b      	add	r3, r1
 8009290:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009294:	b199      	cbz	r1, 80092be <__mdiff+0x11a>
 8009296:	6117      	str	r7, [r2, #16]
 8009298:	e79e      	b.n	80091d8 <__mdiff+0x34>
 800929a:	46e6      	mov	lr, ip
 800929c:	f854 1b04 	ldr.w	r1, [r4], #4
 80092a0:	fa1f fc81 	uxth.w	ip, r1
 80092a4:	44f4      	add	ip, lr
 80092a6:	0c08      	lsrs	r0, r1, #16
 80092a8:	4471      	add	r1, lr
 80092aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092ae:	b289      	uxth	r1, r1
 80092b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092b8:	f846 1b04 	str.w	r1, [r6], #4
 80092bc:	e7dc      	b.n	8009278 <__mdiff+0xd4>
 80092be:	3f01      	subs	r7, #1
 80092c0:	e7e6      	b.n	8009290 <__mdiff+0xec>
 80092c2:	bf00      	nop
 80092c4:	0800a190 	.word	0x0800a190
 80092c8:	0800a1a1 	.word	0x0800a1a1

080092cc <__d2b>:
 80092cc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80092d0:	2101      	movs	r1, #1
 80092d2:	4690      	mov	r8, r2
 80092d4:	4699      	mov	r9, r3
 80092d6:	9e08      	ldr	r6, [sp, #32]
 80092d8:	f7ff fcd0 	bl	8008c7c <_Balloc>
 80092dc:	4604      	mov	r4, r0
 80092de:	b930      	cbnz	r0, 80092ee <__d2b+0x22>
 80092e0:	4602      	mov	r2, r0
 80092e2:	f240 310f 	movw	r1, #783	@ 0x30f
 80092e6:	4b23      	ldr	r3, [pc, #140]	@ (8009374 <__d2b+0xa8>)
 80092e8:	4823      	ldr	r0, [pc, #140]	@ (8009378 <__d2b+0xac>)
 80092ea:	f7fe fdff 	bl	8007eec <__assert_func>
 80092ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092f6:	b10d      	cbz	r5, 80092fc <__d2b+0x30>
 80092f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	f1b8 0300 	subs.w	r3, r8, #0
 8009302:	d024      	beq.n	800934e <__d2b+0x82>
 8009304:	4668      	mov	r0, sp
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	f7ff fd7f 	bl	8008e0a <__lo0bits>
 800930c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009310:	b1d8      	cbz	r0, 800934a <__d2b+0x7e>
 8009312:	f1c0 0320 	rsb	r3, r0, #32
 8009316:	fa02 f303 	lsl.w	r3, r2, r3
 800931a:	430b      	orrs	r3, r1
 800931c:	40c2      	lsrs	r2, r0
 800931e:	6163      	str	r3, [r4, #20]
 8009320:	9201      	str	r2, [sp, #4]
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	bf0c      	ite	eq
 8009328:	2201      	moveq	r2, #1
 800932a:	2202      	movne	r2, #2
 800932c:	61a3      	str	r3, [r4, #24]
 800932e:	6122      	str	r2, [r4, #16]
 8009330:	b1ad      	cbz	r5, 800935e <__d2b+0x92>
 8009332:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009336:	4405      	add	r5, r0
 8009338:	6035      	str	r5, [r6, #0]
 800933a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800933e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009340:	6018      	str	r0, [r3, #0]
 8009342:	4620      	mov	r0, r4
 8009344:	b002      	add	sp, #8
 8009346:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800934a:	6161      	str	r1, [r4, #20]
 800934c:	e7e9      	b.n	8009322 <__d2b+0x56>
 800934e:	a801      	add	r0, sp, #4
 8009350:	f7ff fd5b 	bl	8008e0a <__lo0bits>
 8009354:	9b01      	ldr	r3, [sp, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	6163      	str	r3, [r4, #20]
 800935a:	3020      	adds	r0, #32
 800935c:	e7e7      	b.n	800932e <__d2b+0x62>
 800935e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009362:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009366:	6030      	str	r0, [r6, #0]
 8009368:	6918      	ldr	r0, [r3, #16]
 800936a:	f7ff fd2f 	bl	8008dcc <__hi0bits>
 800936e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009372:	e7e4      	b.n	800933e <__d2b+0x72>
 8009374:	0800a190 	.word	0x0800a190
 8009378:	0800a1a1 	.word	0x0800a1a1

0800937c <__ascii_wctomb>:
 800937c:	4603      	mov	r3, r0
 800937e:	4608      	mov	r0, r1
 8009380:	b141      	cbz	r1, 8009394 <__ascii_wctomb+0x18>
 8009382:	2aff      	cmp	r2, #255	@ 0xff
 8009384:	d904      	bls.n	8009390 <__ascii_wctomb+0x14>
 8009386:	228a      	movs	r2, #138	@ 0x8a
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	4770      	bx	lr
 8009390:	2001      	movs	r0, #1
 8009392:	700a      	strb	r2, [r1, #0]
 8009394:	4770      	bx	lr

08009396 <__sfputc_r>:
 8009396:	6893      	ldr	r3, [r2, #8]
 8009398:	b410      	push	{r4}
 800939a:	3b01      	subs	r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	6093      	str	r3, [r2, #8]
 80093a0:	da07      	bge.n	80093b2 <__sfputc_r+0x1c>
 80093a2:	6994      	ldr	r4, [r2, #24]
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	db01      	blt.n	80093ac <__sfputc_r+0x16>
 80093a8:	290a      	cmp	r1, #10
 80093aa:	d102      	bne.n	80093b2 <__sfputc_r+0x1c>
 80093ac:	bc10      	pop	{r4}
 80093ae:	f7fe bc5c 	b.w	8007c6a <__swbuf_r>
 80093b2:	6813      	ldr	r3, [r2, #0]
 80093b4:	1c58      	adds	r0, r3, #1
 80093b6:	6010      	str	r0, [r2, #0]
 80093b8:	7019      	strb	r1, [r3, #0]
 80093ba:	4608      	mov	r0, r1
 80093bc:	bc10      	pop	{r4}
 80093be:	4770      	bx	lr

080093c0 <__sfputs_r>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	4614      	mov	r4, r2
 80093c8:	18d5      	adds	r5, r2, r3
 80093ca:	42ac      	cmp	r4, r5
 80093cc:	d101      	bne.n	80093d2 <__sfputs_r+0x12>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e007      	b.n	80093e2 <__sfputs_r+0x22>
 80093d2:	463a      	mov	r2, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093da:	f7ff ffdc 	bl	8009396 <__sfputc_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d1f3      	bne.n	80093ca <__sfputs_r+0xa>
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093e4 <_vfiprintf_r>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	460d      	mov	r5, r1
 80093ea:	4614      	mov	r4, r2
 80093ec:	4698      	mov	r8, r3
 80093ee:	4606      	mov	r6, r0
 80093f0:	b09d      	sub	sp, #116	@ 0x74
 80093f2:	b118      	cbz	r0, 80093fc <_vfiprintf_r+0x18>
 80093f4:	6a03      	ldr	r3, [r0, #32]
 80093f6:	b90b      	cbnz	r3, 80093fc <_vfiprintf_r+0x18>
 80093f8:	f7fe fb4e 	bl	8007a98 <__sinit>
 80093fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d405      	bmi.n	800940e <_vfiprintf_r+0x2a>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	059a      	lsls	r2, r3, #22
 8009406:	d402      	bmi.n	800940e <_vfiprintf_r+0x2a>
 8009408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800940a:	f7fe fd50 	bl	8007eae <__retarget_lock_acquire_recursive>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	071b      	lsls	r3, r3, #28
 8009412:	d501      	bpl.n	8009418 <_vfiprintf_r+0x34>
 8009414:	692b      	ldr	r3, [r5, #16]
 8009416:	b99b      	cbnz	r3, 8009440 <_vfiprintf_r+0x5c>
 8009418:	4629      	mov	r1, r5
 800941a:	4630      	mov	r0, r6
 800941c:	f7fe fc64 	bl	8007ce8 <__swsetup_r>
 8009420:	b170      	cbz	r0, 8009440 <_vfiprintf_r+0x5c>
 8009422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009424:	07dc      	lsls	r4, r3, #31
 8009426:	d504      	bpl.n	8009432 <_vfiprintf_r+0x4e>
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	b01d      	add	sp, #116	@ 0x74
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	89ab      	ldrh	r3, [r5, #12]
 8009434:	0598      	lsls	r0, r3, #22
 8009436:	d4f7      	bmi.n	8009428 <_vfiprintf_r+0x44>
 8009438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800943a:	f7fe fd39 	bl	8007eb0 <__retarget_lock_release_recursive>
 800943e:	e7f3      	b.n	8009428 <_vfiprintf_r+0x44>
 8009440:	2300      	movs	r3, #0
 8009442:	9309      	str	r3, [sp, #36]	@ 0x24
 8009444:	2320      	movs	r3, #32
 8009446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800944a:	2330      	movs	r3, #48	@ 0x30
 800944c:	f04f 0901 	mov.w	r9, #1
 8009450:	f8cd 800c 	str.w	r8, [sp, #12]
 8009454:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009600 <_vfiprintf_r+0x21c>
 8009458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800945c:	4623      	mov	r3, r4
 800945e:	469a      	mov	sl, r3
 8009460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009464:	b10a      	cbz	r2, 800946a <_vfiprintf_r+0x86>
 8009466:	2a25      	cmp	r2, #37	@ 0x25
 8009468:	d1f9      	bne.n	800945e <_vfiprintf_r+0x7a>
 800946a:	ebba 0b04 	subs.w	fp, sl, r4
 800946e:	d00b      	beq.n	8009488 <_vfiprintf_r+0xa4>
 8009470:	465b      	mov	r3, fp
 8009472:	4622      	mov	r2, r4
 8009474:	4629      	mov	r1, r5
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff ffa2 	bl	80093c0 <__sfputs_r>
 800947c:	3001      	adds	r0, #1
 800947e:	f000 80a7 	beq.w	80095d0 <_vfiprintf_r+0x1ec>
 8009482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009484:	445a      	add	r2, fp
 8009486:	9209      	str	r2, [sp, #36]	@ 0x24
 8009488:	f89a 3000 	ldrb.w	r3, [sl]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 809f 	beq.w	80095d0 <_vfiprintf_r+0x1ec>
 8009492:	2300      	movs	r3, #0
 8009494:	f04f 32ff 	mov.w	r2, #4294967295
 8009498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800949c:	f10a 0a01 	add.w	sl, sl, #1
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	9307      	str	r3, [sp, #28]
 80094a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80094aa:	4654      	mov	r4, sl
 80094ac:	2205      	movs	r2, #5
 80094ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b2:	4853      	ldr	r0, [pc, #332]	@ (8009600 <_vfiprintf_r+0x21c>)
 80094b4:	f7fe fcfd 	bl	8007eb2 <memchr>
 80094b8:	9a04      	ldr	r2, [sp, #16]
 80094ba:	b9d8      	cbnz	r0, 80094f4 <_vfiprintf_r+0x110>
 80094bc:	06d1      	lsls	r1, r2, #27
 80094be:	bf44      	itt	mi
 80094c0:	2320      	movmi	r3, #32
 80094c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094c6:	0713      	lsls	r3, r2, #28
 80094c8:	bf44      	itt	mi
 80094ca:	232b      	movmi	r3, #43	@ 0x2b
 80094cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094d0:	f89a 3000 	ldrb.w	r3, [sl]
 80094d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80094d6:	d015      	beq.n	8009504 <_vfiprintf_r+0x120>
 80094d8:	4654      	mov	r4, sl
 80094da:	2000      	movs	r0, #0
 80094dc:	f04f 0c0a 	mov.w	ip, #10
 80094e0:	9a07      	ldr	r2, [sp, #28]
 80094e2:	4621      	mov	r1, r4
 80094e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094e8:	3b30      	subs	r3, #48	@ 0x30
 80094ea:	2b09      	cmp	r3, #9
 80094ec:	d94b      	bls.n	8009586 <_vfiprintf_r+0x1a2>
 80094ee:	b1b0      	cbz	r0, 800951e <_vfiprintf_r+0x13a>
 80094f0:	9207      	str	r2, [sp, #28]
 80094f2:	e014      	b.n	800951e <_vfiprintf_r+0x13a>
 80094f4:	eba0 0308 	sub.w	r3, r0, r8
 80094f8:	fa09 f303 	lsl.w	r3, r9, r3
 80094fc:	4313      	orrs	r3, r2
 80094fe:	46a2      	mov	sl, r4
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	e7d2      	b.n	80094aa <_vfiprintf_r+0xc6>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	1d19      	adds	r1, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	9103      	str	r1, [sp, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	bfbb      	ittet	lt
 8009510:	425b      	neglt	r3, r3
 8009512:	f042 0202 	orrlt.w	r2, r2, #2
 8009516:	9307      	strge	r3, [sp, #28]
 8009518:	9307      	strlt	r3, [sp, #28]
 800951a:	bfb8      	it	lt
 800951c:	9204      	strlt	r2, [sp, #16]
 800951e:	7823      	ldrb	r3, [r4, #0]
 8009520:	2b2e      	cmp	r3, #46	@ 0x2e
 8009522:	d10a      	bne.n	800953a <_vfiprintf_r+0x156>
 8009524:	7863      	ldrb	r3, [r4, #1]
 8009526:	2b2a      	cmp	r3, #42	@ 0x2a
 8009528:	d132      	bne.n	8009590 <_vfiprintf_r+0x1ac>
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	3402      	adds	r4, #2
 800952e:	1d1a      	adds	r2, r3, #4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	9203      	str	r2, [sp, #12]
 8009534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009604 <_vfiprintf_r+0x220>
 800953e:	2203      	movs	r2, #3
 8009540:	4650      	mov	r0, sl
 8009542:	7821      	ldrb	r1, [r4, #0]
 8009544:	f7fe fcb5 	bl	8007eb2 <memchr>
 8009548:	b138      	cbz	r0, 800955a <_vfiprintf_r+0x176>
 800954a:	2240      	movs	r2, #64	@ 0x40
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	eba0 000a 	sub.w	r0, r0, sl
 8009552:	4082      	lsls	r2, r0
 8009554:	4313      	orrs	r3, r2
 8009556:	3401      	adds	r4, #1
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955e:	2206      	movs	r2, #6
 8009560:	4829      	ldr	r0, [pc, #164]	@ (8009608 <_vfiprintf_r+0x224>)
 8009562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009566:	f7fe fca4 	bl	8007eb2 <memchr>
 800956a:	2800      	cmp	r0, #0
 800956c:	d03f      	beq.n	80095ee <_vfiprintf_r+0x20a>
 800956e:	4b27      	ldr	r3, [pc, #156]	@ (800960c <_vfiprintf_r+0x228>)
 8009570:	bb1b      	cbnz	r3, 80095ba <_vfiprintf_r+0x1d6>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	3307      	adds	r3, #7
 8009576:	f023 0307 	bic.w	r3, r3, #7
 800957a:	3308      	adds	r3, #8
 800957c:	9303      	str	r3, [sp, #12]
 800957e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009580:	443b      	add	r3, r7
 8009582:	9309      	str	r3, [sp, #36]	@ 0x24
 8009584:	e76a      	b.n	800945c <_vfiprintf_r+0x78>
 8009586:	460c      	mov	r4, r1
 8009588:	2001      	movs	r0, #1
 800958a:	fb0c 3202 	mla	r2, ip, r2, r3
 800958e:	e7a8      	b.n	80094e2 <_vfiprintf_r+0xfe>
 8009590:	2300      	movs	r3, #0
 8009592:	f04f 0c0a 	mov.w	ip, #10
 8009596:	4619      	mov	r1, r3
 8009598:	3401      	adds	r4, #1
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	4620      	mov	r0, r4
 800959e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095a2:	3a30      	subs	r2, #48	@ 0x30
 80095a4:	2a09      	cmp	r2, #9
 80095a6:	d903      	bls.n	80095b0 <_vfiprintf_r+0x1cc>
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0c6      	beq.n	800953a <_vfiprintf_r+0x156>
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	e7c4      	b.n	800953a <_vfiprintf_r+0x156>
 80095b0:	4604      	mov	r4, r0
 80095b2:	2301      	movs	r3, #1
 80095b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80095b8:	e7f0      	b.n	800959c <_vfiprintf_r+0x1b8>
 80095ba:	ab03      	add	r3, sp, #12
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	462a      	mov	r2, r5
 80095c0:	4630      	mov	r0, r6
 80095c2:	4b13      	ldr	r3, [pc, #76]	@ (8009610 <_vfiprintf_r+0x22c>)
 80095c4:	a904      	add	r1, sp, #16
 80095c6:	f7fd fe1d 	bl	8007204 <_printf_float>
 80095ca:	4607      	mov	r7, r0
 80095cc:	1c78      	adds	r0, r7, #1
 80095ce:	d1d6      	bne.n	800957e <_vfiprintf_r+0x19a>
 80095d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	d405      	bmi.n	80095e2 <_vfiprintf_r+0x1fe>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	059a      	lsls	r2, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_vfiprintf_r+0x1fe>
 80095dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095de:	f7fe fc67 	bl	8007eb0 <__retarget_lock_release_recursive>
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	065b      	lsls	r3, r3, #25
 80095e6:	f53f af1f 	bmi.w	8009428 <_vfiprintf_r+0x44>
 80095ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095ec:	e71e      	b.n	800942c <_vfiprintf_r+0x48>
 80095ee:	ab03      	add	r3, sp, #12
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	462a      	mov	r2, r5
 80095f4:	4630      	mov	r0, r6
 80095f6:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <_vfiprintf_r+0x22c>)
 80095f8:	a904      	add	r1, sp, #16
 80095fa:	f7fe f8a1 	bl	8007740 <_printf_i>
 80095fe:	e7e4      	b.n	80095ca <_vfiprintf_r+0x1e6>
 8009600:	0800a3f9 	.word	0x0800a3f9
 8009604:	0800a3ff 	.word	0x0800a3ff
 8009608:	0800a403 	.word	0x0800a403
 800960c:	08007205 	.word	0x08007205
 8009610:	080093c1 	.word	0x080093c1

08009614 <__sflush_r>:
 8009614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	0716      	lsls	r6, r2, #28
 800961c:	4605      	mov	r5, r0
 800961e:	460c      	mov	r4, r1
 8009620:	d454      	bmi.n	80096cc <__sflush_r+0xb8>
 8009622:	684b      	ldr	r3, [r1, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	dc02      	bgt.n	800962e <__sflush_r+0x1a>
 8009628:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800962a:	2b00      	cmp	r3, #0
 800962c:	dd48      	ble.n	80096c0 <__sflush_r+0xac>
 800962e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009630:	2e00      	cmp	r6, #0
 8009632:	d045      	beq.n	80096c0 <__sflush_r+0xac>
 8009634:	2300      	movs	r3, #0
 8009636:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800963a:	682f      	ldr	r7, [r5, #0]
 800963c:	6a21      	ldr	r1, [r4, #32]
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	d030      	beq.n	80096a4 <__sflush_r+0x90>
 8009642:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	0759      	lsls	r1, r3, #29
 8009648:	d505      	bpl.n	8009656 <__sflush_r+0x42>
 800964a:	6863      	ldr	r3, [r4, #4]
 800964c:	1ad2      	subs	r2, r2, r3
 800964e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009650:	b10b      	cbz	r3, 8009656 <__sflush_r+0x42>
 8009652:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009654:	1ad2      	subs	r2, r2, r3
 8009656:	2300      	movs	r3, #0
 8009658:	4628      	mov	r0, r5
 800965a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800965c:	6a21      	ldr	r1, [r4, #32]
 800965e:	47b0      	blx	r6
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	d106      	bne.n	8009674 <__sflush_r+0x60>
 8009666:	6829      	ldr	r1, [r5, #0]
 8009668:	291d      	cmp	r1, #29
 800966a:	d82b      	bhi.n	80096c4 <__sflush_r+0xb0>
 800966c:	4a28      	ldr	r2, [pc, #160]	@ (8009710 <__sflush_r+0xfc>)
 800966e:	410a      	asrs	r2, r1
 8009670:	07d6      	lsls	r6, r2, #31
 8009672:	d427      	bmi.n	80096c4 <__sflush_r+0xb0>
 8009674:	2200      	movs	r2, #0
 8009676:	6062      	str	r2, [r4, #4]
 8009678:	6922      	ldr	r2, [r4, #16]
 800967a:	04d9      	lsls	r1, r3, #19
 800967c:	6022      	str	r2, [r4, #0]
 800967e:	d504      	bpl.n	800968a <__sflush_r+0x76>
 8009680:	1c42      	adds	r2, r0, #1
 8009682:	d101      	bne.n	8009688 <__sflush_r+0x74>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b903      	cbnz	r3, 800968a <__sflush_r+0x76>
 8009688:	6560      	str	r0, [r4, #84]	@ 0x54
 800968a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800968c:	602f      	str	r7, [r5, #0]
 800968e:	b1b9      	cbz	r1, 80096c0 <__sflush_r+0xac>
 8009690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009694:	4299      	cmp	r1, r3
 8009696:	d002      	beq.n	800969e <__sflush_r+0x8a>
 8009698:	4628      	mov	r0, r5
 800969a:	f7ff fa95 	bl	8008bc8 <_free_r>
 800969e:	2300      	movs	r3, #0
 80096a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80096a2:	e00d      	b.n	80096c0 <__sflush_r+0xac>
 80096a4:	2301      	movs	r3, #1
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b0      	blx	r6
 80096aa:	4602      	mov	r2, r0
 80096ac:	1c50      	adds	r0, r2, #1
 80096ae:	d1c9      	bne.n	8009644 <__sflush_r+0x30>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0c6      	beq.n	8009644 <__sflush_r+0x30>
 80096b6:	2b1d      	cmp	r3, #29
 80096b8:	d001      	beq.n	80096be <__sflush_r+0xaa>
 80096ba:	2b16      	cmp	r3, #22
 80096bc:	d11d      	bne.n	80096fa <__sflush_r+0xe6>
 80096be:	602f      	str	r7, [r5, #0]
 80096c0:	2000      	movs	r0, #0
 80096c2:	e021      	b.n	8009708 <__sflush_r+0xf4>
 80096c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c8:	b21b      	sxth	r3, r3
 80096ca:	e01a      	b.n	8009702 <__sflush_r+0xee>
 80096cc:	690f      	ldr	r7, [r1, #16]
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	d0f6      	beq.n	80096c0 <__sflush_r+0xac>
 80096d2:	0793      	lsls	r3, r2, #30
 80096d4:	bf18      	it	ne
 80096d6:	2300      	movne	r3, #0
 80096d8:	680e      	ldr	r6, [r1, #0]
 80096da:	bf08      	it	eq
 80096dc:	694b      	ldreq	r3, [r1, #20]
 80096de:	1bf6      	subs	r6, r6, r7
 80096e0:	600f      	str	r7, [r1, #0]
 80096e2:	608b      	str	r3, [r1, #8]
 80096e4:	2e00      	cmp	r6, #0
 80096e6:	ddeb      	ble.n	80096c0 <__sflush_r+0xac>
 80096e8:	4633      	mov	r3, r6
 80096ea:	463a      	mov	r2, r7
 80096ec:	4628      	mov	r0, r5
 80096ee:	6a21      	ldr	r1, [r4, #32]
 80096f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80096f4:	47e0      	blx	ip
 80096f6:	2800      	cmp	r0, #0
 80096f8:	dc07      	bgt.n	800970a <__sflush_r+0xf6>
 80096fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009702:	f04f 30ff 	mov.w	r0, #4294967295
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970a:	4407      	add	r7, r0
 800970c:	1a36      	subs	r6, r6, r0
 800970e:	e7e9      	b.n	80096e4 <__sflush_r+0xd0>
 8009710:	dfbffffe 	.word	0xdfbffffe

08009714 <_fflush_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	690b      	ldr	r3, [r1, #16]
 8009718:	4605      	mov	r5, r0
 800971a:	460c      	mov	r4, r1
 800971c:	b913      	cbnz	r3, 8009724 <_fflush_r+0x10>
 800971e:	2500      	movs	r5, #0
 8009720:	4628      	mov	r0, r5
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	b118      	cbz	r0, 800972e <_fflush_r+0x1a>
 8009726:	6a03      	ldr	r3, [r0, #32]
 8009728:	b90b      	cbnz	r3, 800972e <_fflush_r+0x1a>
 800972a:	f7fe f9b5 	bl	8007a98 <__sinit>
 800972e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0f3      	beq.n	800971e <_fflush_r+0xa>
 8009736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009738:	07d0      	lsls	r0, r2, #31
 800973a:	d404      	bmi.n	8009746 <_fflush_r+0x32>
 800973c:	0599      	lsls	r1, r3, #22
 800973e:	d402      	bmi.n	8009746 <_fflush_r+0x32>
 8009740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009742:	f7fe fbb4 	bl	8007eae <__retarget_lock_acquire_recursive>
 8009746:	4628      	mov	r0, r5
 8009748:	4621      	mov	r1, r4
 800974a:	f7ff ff63 	bl	8009614 <__sflush_r>
 800974e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009750:	4605      	mov	r5, r0
 8009752:	07da      	lsls	r2, r3, #31
 8009754:	d4e4      	bmi.n	8009720 <_fflush_r+0xc>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	059b      	lsls	r3, r3, #22
 800975a:	d4e1      	bmi.n	8009720 <_fflush_r+0xc>
 800975c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800975e:	f7fe fba7 	bl	8007eb0 <__retarget_lock_release_recursive>
 8009762:	e7dd      	b.n	8009720 <_fflush_r+0xc>

08009764 <fiprintf>:
 8009764:	b40e      	push	{r1, r2, r3}
 8009766:	b503      	push	{r0, r1, lr}
 8009768:	4601      	mov	r1, r0
 800976a:	ab03      	add	r3, sp, #12
 800976c:	4805      	ldr	r0, [pc, #20]	@ (8009784 <fiprintf+0x20>)
 800976e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009772:	6800      	ldr	r0, [r0, #0]
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	f7ff fe35 	bl	80093e4 <_vfiprintf_r>
 800977a:	b002      	add	sp, #8
 800977c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009780:	b003      	add	sp, #12
 8009782:	4770      	bx	lr
 8009784:	2000019c 	.word	0x2000019c

08009788 <__swhatbuf_r>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	460c      	mov	r4, r1
 800978c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009790:	4615      	mov	r5, r2
 8009792:	2900      	cmp	r1, #0
 8009794:	461e      	mov	r6, r3
 8009796:	b096      	sub	sp, #88	@ 0x58
 8009798:	da0c      	bge.n	80097b4 <__swhatbuf_r+0x2c>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	2100      	movs	r1, #0
 800979e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097a2:	bf14      	ite	ne
 80097a4:	2340      	movne	r3, #64	@ 0x40
 80097a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097aa:	2000      	movs	r0, #0
 80097ac:	6031      	str	r1, [r6, #0]
 80097ae:	602b      	str	r3, [r5, #0]
 80097b0:	b016      	add	sp, #88	@ 0x58
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	466a      	mov	r2, sp
 80097b6:	f000 f849 	bl	800984c <_fstat_r>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	dbed      	blt.n	800979a <__swhatbuf_r+0x12>
 80097be:	9901      	ldr	r1, [sp, #4]
 80097c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097c8:	4259      	negs	r1, r3
 80097ca:	4159      	adcs	r1, r3
 80097cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097d0:	e7eb      	b.n	80097aa <__swhatbuf_r+0x22>

080097d2 <__smakebuf_r>:
 80097d2:	898b      	ldrh	r3, [r1, #12]
 80097d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097d6:	079d      	lsls	r5, r3, #30
 80097d8:	4606      	mov	r6, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	d507      	bpl.n	80097ee <__smakebuf_r+0x1c>
 80097de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097e2:	6023      	str	r3, [r4, #0]
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	2301      	movs	r3, #1
 80097e8:	6163      	str	r3, [r4, #20]
 80097ea:	b003      	add	sp, #12
 80097ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ee:	466a      	mov	r2, sp
 80097f0:	ab01      	add	r3, sp, #4
 80097f2:	f7ff ffc9 	bl	8009788 <__swhatbuf_r>
 80097f6:	9f00      	ldr	r7, [sp, #0]
 80097f8:	4605      	mov	r5, r0
 80097fa:	4639      	mov	r1, r7
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7fd fbd7 	bl	8006fb0 <_malloc_r>
 8009802:	b948      	cbnz	r0, 8009818 <__smakebuf_r+0x46>
 8009804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009808:	059a      	lsls	r2, r3, #22
 800980a:	d4ee      	bmi.n	80097ea <__smakebuf_r+0x18>
 800980c:	f023 0303 	bic.w	r3, r3, #3
 8009810:	f043 0302 	orr.w	r3, r3, #2
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	e7e2      	b.n	80097de <__smakebuf_r+0xc>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800981e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	6020      	str	r0, [r4, #0]
 8009828:	b15b      	cbz	r3, 8009842 <__smakebuf_r+0x70>
 800982a:	4630      	mov	r0, r6
 800982c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009830:	f000 f81e 	bl	8009870 <_isatty_r>
 8009834:	b128      	cbz	r0, 8009842 <__smakebuf_r+0x70>
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	f023 0303 	bic.w	r3, r3, #3
 800983c:	f043 0301 	orr.w	r3, r3, #1
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	431d      	orrs	r5, r3
 8009846:	81a5      	strh	r5, [r4, #12]
 8009848:	e7cf      	b.n	80097ea <__smakebuf_r+0x18>
	...

0800984c <_fstat_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	2300      	movs	r3, #0
 8009850:	4d06      	ldr	r5, [pc, #24]	@ (800986c <_fstat_r+0x20>)
 8009852:	4604      	mov	r4, r0
 8009854:	4608      	mov	r0, r1
 8009856:	4611      	mov	r1, r2
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	f7f9 f9e0 	bl	8002c1e <_fstat>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d102      	bne.n	8009868 <_fstat_r+0x1c>
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	b103      	cbz	r3, 8009868 <_fstat_r+0x1c>
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	bd38      	pop	{r3, r4, r5, pc}
 800986a:	bf00      	nop
 800986c:	200005f8 	.word	0x200005f8

08009870 <_isatty_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	2300      	movs	r3, #0
 8009874:	4d05      	ldr	r5, [pc, #20]	@ (800988c <_isatty_r+0x1c>)
 8009876:	4604      	mov	r4, r0
 8009878:	4608      	mov	r0, r1
 800987a:	602b      	str	r3, [r5, #0]
 800987c:	f7f9 f9d4 	bl	8002c28 <_isatty>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_isatty_r+0x1a>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_isatty_r+0x1a>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	200005f8 	.word	0x200005f8

08009890 <abort>:
 8009890:	2006      	movs	r0, #6
 8009892:	b508      	push	{r3, lr}
 8009894:	f000 f840 	bl	8009918 <raise>
 8009898:	2001      	movs	r0, #1
 800989a:	f7f9 f9a7 	bl	8002bec <_exit>

0800989e <_calloc_r>:
 800989e:	b570      	push	{r4, r5, r6, lr}
 80098a0:	fba1 5402 	umull	r5, r4, r1, r2
 80098a4:	b93c      	cbnz	r4, 80098b6 <_calloc_r+0x18>
 80098a6:	4629      	mov	r1, r5
 80098a8:	f7fd fb82 	bl	8006fb0 <_malloc_r>
 80098ac:	4606      	mov	r6, r0
 80098ae:	b928      	cbnz	r0, 80098bc <_calloc_r+0x1e>
 80098b0:	2600      	movs	r6, #0
 80098b2:	4630      	mov	r0, r6
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	220c      	movs	r2, #12
 80098b8:	6002      	str	r2, [r0, #0]
 80098ba:	e7f9      	b.n	80098b0 <_calloc_r+0x12>
 80098bc:	462a      	mov	r2, r5
 80098be:	4621      	mov	r1, r4
 80098c0:	f7fe fa68 	bl	8007d94 <memset>
 80098c4:	e7f5      	b.n	80098b2 <_calloc_r+0x14>

080098c6 <_raise_r>:
 80098c6:	291f      	cmp	r1, #31
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4605      	mov	r5, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	d904      	bls.n	80098da <_raise_r+0x14>
 80098d0:	2316      	movs	r3, #22
 80098d2:	6003      	str	r3, [r0, #0]
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	bd38      	pop	{r3, r4, r5, pc}
 80098da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098dc:	b112      	cbz	r2, 80098e4 <_raise_r+0x1e>
 80098de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e2:	b94b      	cbnz	r3, 80098f8 <_raise_r+0x32>
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 f831 	bl	800994c <_getpid_r>
 80098ea:	4622      	mov	r2, r4
 80098ec:	4601      	mov	r1, r0
 80098ee:	4628      	mov	r0, r5
 80098f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f4:	f000 b818 	b.w	8009928 <_kill_r>
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d00a      	beq.n	8009912 <_raise_r+0x4c>
 80098fc:	1c59      	adds	r1, r3, #1
 80098fe:	d103      	bne.n	8009908 <_raise_r+0x42>
 8009900:	2316      	movs	r3, #22
 8009902:	6003      	str	r3, [r0, #0]
 8009904:	2001      	movs	r0, #1
 8009906:	e7e7      	b.n	80098d8 <_raise_r+0x12>
 8009908:	2100      	movs	r1, #0
 800990a:	4620      	mov	r0, r4
 800990c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009910:	4798      	blx	r3
 8009912:	2000      	movs	r0, #0
 8009914:	e7e0      	b.n	80098d8 <_raise_r+0x12>
	...

08009918 <raise>:
 8009918:	4b02      	ldr	r3, [pc, #8]	@ (8009924 <raise+0xc>)
 800991a:	4601      	mov	r1, r0
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	f7ff bfd2 	b.w	80098c6 <_raise_r>
 8009922:	bf00      	nop
 8009924:	2000019c 	.word	0x2000019c

08009928 <_kill_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	2300      	movs	r3, #0
 800992c:	4d06      	ldr	r5, [pc, #24]	@ (8009948 <_kill_r+0x20>)
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	f7f9 f951 	bl	8002bdc <_kill>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d102      	bne.n	8009944 <_kill_r+0x1c>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	b103      	cbz	r3, 8009944 <_kill_r+0x1c>
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	bf00      	nop
 8009948:	200005f8 	.word	0x200005f8

0800994c <_getpid_r>:
 800994c:	f7f9 b944 	b.w	8002bd8 <_getpid>

08009950 <_init>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr

0800995c <_fini>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	bf00      	nop
 8009960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009962:	bc08      	pop	{r3}
 8009964:	469e      	mov	lr, r3
 8009966:	4770      	bx	lr
