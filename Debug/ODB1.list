
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005180  08005180  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005180  08005180  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005180  08005180  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000068  080051f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080051f0  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b30  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1a  00000000  00000000  00030c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00033620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  000346f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e19  00000000  00000000  000353fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139ab  00000000  00000000  0004f217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009365c  00000000  00000000  00062bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004db0  00000000  00000000  000f6220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fafd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080050c8 	.word	0x080050c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080050c8 	.word	0x080050c8

0800014c <BMP280_Init>:

#include "BMP280.h"

//Initialisation
uint8_t BMP280_Init(BMP280 *dev, SPI_HandleTypeDef *SPI_Handle, uint16_t CS_Pin, GPIO_TypeDef* GPIO_Port)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
	dev->SPI_Handle = 	SPI_Handle;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]

	dev->GPIO_Port = 	GPIO_Port;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	683a      	ldr	r2, [r7, #0]
 8000166:	609a      	str	r2, [r3, #8]
	dev->CS_Pin = 		CS_Pin;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	88fa      	ldrh	r2, [r7, #6]
 800016c:	809a      	strh	r2, [r3, #4]

	dev->temp_C = 		0.0f;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	f04f 0200 	mov.w	r2, #0
 8000174:	611a      	str	r2, [r3, #16]
	dev->pressure_Pa = 	0.0f;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	f04f 0200 	mov.w	r2, #0
 800017c:	60da      	str	r2, [r3, #12]

	uint8_t errorCount = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	uint8_t regData;
	uint8_t address = BMP280_REG_ID;
 8000182:	23d0      	movs	r3, #208	; 0xd0
 8000184:	753b      	strb	r3, [r7, #20]

	//check device ID = 0x58
	status = BMP280_ReadRegister(dev, &regData, &address);
 8000186:	f107 0214 	add.w	r2, r7, #20
 800018a:	f107 0315 	add.w	r3, r7, #21
 800018e:	4619      	mov	r1, r3
 8000190:	68f8      	ldr	r0, [r7, #12]
 8000192:	f000 f89d 	bl	80002d0 <BMP280_ReadRegister>
 8000196:	4603      	mov	r3, r0
 8000198:	75bb      	strb	r3, [r7, #22]
	errorCount += ( status != HAL_OK);
 800019a:	7dbb      	ldrb	r3, [r7, #22]
 800019c:	2b00      	cmp	r3, #0
 800019e:	bf14      	ite	ne
 80001a0:	2301      	movne	r3, #1
 80001a2:	2300      	moveq	r3, #0
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	7dfb      	ldrb	r3, [r7, #23]
 80001aa:	4413      	add	r3, r2
 80001ac:	75fb      	strb	r3, [r7, #23]

	if(regData != BMP280_DEVICE_ID)
 80001ae:	7d7b      	ldrb	r3, [r7, #21]
 80001b0:	2b58      	cmp	r3, #88	; 0x58
 80001b2:	d001      	beq.n	80001b8 <BMP280_Init+0x6c>
	{
		return 255;
 80001b4:	23ff      	movs	r3, #255	; 0xff
 80001b6:	e087      	b.n	80002c8 <BMP280_Init+0x17c>
	}

	//Reset the device
	regData = 0xB6;
 80001b8:	23b6      	movs	r3, #182	; 0xb6
 80001ba:	757b      	strb	r3, [r7, #21]
	address = BMP280_REG_RESET;
 80001bc:	23e0      	movs	r3, #224	; 0xe0
 80001be:	753b      	strb	r3, [r7, #20]

	status = BMP280_WriteRegister(dev, &regData, &address);
 80001c0:	f107 0214 	add.w	r2, r7, #20
 80001c4:	f107 0315 	add.w	r3, r7, #21
 80001c8:	4619      	mov	r1, r3
 80001ca:	68f8      	ldr	r0, [r7, #12]
 80001cc:	f000 f8b0 	bl	8000330 <BMP280_WriteRegister>
 80001d0:	4603      	mov	r3, r0
 80001d2:	75bb      	strb	r3, [r7, #22]
	errorCount += ( status != HAL_OK);
 80001d4:	7dbb      	ldrb	r3, [r7, #22]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	bf14      	ite	ne
 80001da:	2301      	movne	r3, #1
 80001dc:	2300      	moveq	r3, #0
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	7dfb      	ldrb	r3, [r7, #23]
 80001e4:	4413      	add	r3, r2
 80001e6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(2);
 80001e8:	2002      	movs	r0, #2
 80001ea:	f001 f939 	bl	8001460 <HAL_Delay>
	//Stanby time	0.5ms	000
	//IIR filter 	4x		010
	//Bit 1			N/A		0
	//Spi3w			4wire	0
	//00001000 = 0x08
	regData = BMP280_SETTING_CONFIG;
 80001ee:	2308      	movs	r3, #8
 80001f0:	757b      	strb	r3, [r7, #21]
	address = BMP280_REG_CONFIG;
 80001f2:	23f5      	movs	r3, #245	; 0xf5
 80001f4:	753b      	strb	r3, [r7, #20]

	status = BMP280_WriteRegister(dev, &regData, &address);
 80001f6:	f107 0214 	add.w	r2, r7, #20
 80001fa:	f107 0315 	add.w	r3, r7, #21
 80001fe:	4619      	mov	r1, r3
 8000200:	68f8      	ldr	r0, [r7, #12]
 8000202:	f000 f895 	bl	8000330 <BMP280_WriteRegister>
 8000206:	4603      	mov	r3, r0
 8000208:	75bb      	strb	r3, [r7, #22]
	errorCount += ( status != HAL_OK);
 800020a:	7dbb      	ldrb	r3, [r7, #22]
 800020c:	2b00      	cmp	r3, #0
 800020e:	bf14      	ite	ne
 8000210:	2301      	movne	r3, #1
 8000212:	2300      	moveq	r3, #0
 8000214:	b2db      	uxtb	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	7dfb      	ldrb	r3, [r7, #23]
 800021a:	4413      	add	r3, r2
 800021c:	75fb      	strb	r3, [r7, #23]

	status = BMP280_ReadRegister(dev, &regData, &address);
 800021e:	f107 0214 	add.w	r2, r7, #20
 8000222:	f107 0315 	add.w	r3, r7, #21
 8000226:	4619      	mov	r1, r3
 8000228:	68f8      	ldr	r0, [r7, #12]
 800022a:	f000 f851 	bl	80002d0 <BMP280_ReadRegister>
 800022e:	4603      	mov	r3, r0
 8000230:	75bb      	strb	r3, [r7, #22]
	errorCount += ( status != HAL_OK);
 8000232:	7dbb      	ldrb	r3, [r7, #22]
 8000234:	2b00      	cmp	r3, #0
 8000236:	bf14      	ite	ne
 8000238:	2301      	movne	r3, #1
 800023a:	2300      	moveq	r3, #0
 800023c:	b2db      	uxtb	r3, r3
 800023e:	461a      	mov	r2, r3
 8000240:	7dfb      	ldrb	r3, [r7, #23]
 8000242:	4413      	add	r3, r2
 8000244:	75fb      	strb	r3, [r7, #23]
	errorCount += ( regData != BMP280_SETTING_CONFIG);
 8000246:	7d7b      	ldrb	r3, [r7, #21]
 8000248:	2b08      	cmp	r3, #8
 800024a:	bf14      	ite	ne
 800024c:	2301      	movne	r3, #1
 800024e:	2300      	moveq	r3, #0
 8000250:	b2db      	uxtb	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	4413      	add	r3, r2
 8000258:	75fb      	strb	r3, [r7, #23]
	//Config the device ctrl meas
	//Temperature 	17bit resolution	010
	//Pressure 		20bit resolution	101
	//Power mode 	normal				11
	//01010111 = 0x57
	regData = BMP280_SETTING_CTRL_MEAS;
 800025a:	2357      	movs	r3, #87	; 0x57
 800025c:	757b      	strb	r3, [r7, #21]
	address = BMP280_REG_CTRL_MEAS;
 800025e:	23f4      	movs	r3, #244	; 0xf4
 8000260:	753b      	strb	r3, [r7, #20]

	status = BMP280_WriteRegister(dev, &regData, &address);
 8000262:	f107 0214 	add.w	r2, r7, #20
 8000266:	f107 0315 	add.w	r3, r7, #21
 800026a:	4619      	mov	r1, r3
 800026c:	68f8      	ldr	r0, [r7, #12]
 800026e:	f000 f85f 	bl	8000330 <BMP280_WriteRegister>
 8000272:	4603      	mov	r3, r0
 8000274:	75bb      	strb	r3, [r7, #22]
	errorCount += ( status != HAL_OK);
 8000276:	7dbb      	ldrb	r3, [r7, #22]
 8000278:	2b00      	cmp	r3, #0
 800027a:	bf14      	ite	ne
 800027c:	2301      	movne	r3, #1
 800027e:	2300      	moveq	r3, #0
 8000280:	b2db      	uxtb	r3, r3
 8000282:	461a      	mov	r2, r3
 8000284:	7dfb      	ldrb	r3, [r7, #23]
 8000286:	4413      	add	r3, r2
 8000288:	75fb      	strb	r3, [r7, #23]


	status = BMP280_ReadRegister(dev, &regData, &address);
 800028a:	f107 0214 	add.w	r2, r7, #20
 800028e:	f107 0315 	add.w	r3, r7, #21
 8000292:	4619      	mov	r1, r3
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f000 f81b 	bl	80002d0 <BMP280_ReadRegister>
 800029a:	4603      	mov	r3, r0
 800029c:	75bb      	strb	r3, [r7, #22]
	errorCount += ( status != HAL_OK);
 800029e:	7dbb      	ldrb	r3, [r7, #22]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	bf14      	ite	ne
 80002a4:	2301      	movne	r3, #1
 80002a6:	2300      	moveq	r3, #0
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	461a      	mov	r2, r3
 80002ac:	7dfb      	ldrb	r3, [r7, #23]
 80002ae:	4413      	add	r3, r2
 80002b0:	75fb      	strb	r3, [r7, #23]
	errorCount += ( regData != BMP280_SETTING_CTRL_MEAS);
 80002b2:	7d7b      	ldrb	r3, [r7, #21]
 80002b4:	2b57      	cmp	r3, #87	; 0x57
 80002b6:	bf14      	ite	ne
 80002b8:	2301      	movne	r3, #1
 80002ba:	2300      	moveq	r3, #0
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	7dfb      	ldrb	r3, [r7, #23]
 80002c2:	4413      	add	r3, r2
 80002c4:	75fb      	strb	r3, [r7, #23]


	return errorCount;
 80002c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <BMP280_ReadRegister>:
	return 1;
}

//Low level fonction
HAL_StatusTypeDef BMP280_ReadRegister(BMP280 *dev, uint8_t *data, uint8_t *reg)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef errorCode;

	HAL_GPIO_WritePin(dev->GPIO_Port, dev->CS_Pin, GPIO_PIN_RESET);
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	6898      	ldr	r0, [r3, #8]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	4619      	mov	r1, r3
 80002e8:	f001 fefe 	bl	80020e8 <HAL_GPIO_WritePin>
	errorCode = HAL_SPI_Transmit(dev->SPI_Handle, reg, 1, HAL_MAX_DELAY);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
 80002f4:	2201      	movs	r2, #1
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	f002 fc5a 	bl	8002bb0 <HAL_SPI_Transmit>
 80002fc:	4603      	mov	r3, r0
 80002fe:	75fb      	strb	r3, [r7, #23]
	errorCode = HAL_SPI_Receive(dev->SPI_Handle, data, 1, HAL_MAX_DELAY);
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	6818      	ldr	r0, [r3, #0]
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
 8000308:	2201      	movs	r2, #1
 800030a:	68b9      	ldr	r1, [r7, #8]
 800030c:	f002 fd93 	bl	8002e36 <HAL_SPI_Receive>
 8000310:	4603      	mov	r3, r0
 8000312:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dev->GPIO_Port, dev->CS_Pin, GPIO_PIN_SET);
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	6898      	ldr	r0, [r3, #8]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	889b      	ldrh	r3, [r3, #4]
 800031c:	2201      	movs	r2, #1
 800031e:	4619      	mov	r1, r3
 8000320:	f001 fee2 	bl	80020e8 <HAL_GPIO_WritePin>

	return errorCode;
 8000324:	7dfb      	ldrb	r3, [r7, #23]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3718      	adds	r7, #24
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <BMP280_WriteRegister>:

	return errorCode;
}

HAL_StatusTypeDef BMP280_WriteRegister(BMP280 *dev, uint8_t *data, uint8_t *reg)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef errorCode;
	*reg = *reg&0x7F; //flip the MSB to 1 to write
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000344:	b2da      	uxtb	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	4814      	ldr	r0, [pc, #80]	; (80003a4 <BMP280_WriteRegister+0x74>)
 8000352:	f001 fec9 	bl	80020e8 <HAL_GPIO_WritePin>
	errorCode = HAL_SPI_Transmit(dev->SPI_Handle, reg, 1, HAL_MAX_DELAY);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6818      	ldr	r0, [r3, #0]
 800035a:	f04f 33ff 	mov.w	r3, #4294967295
 800035e:	2201      	movs	r2, #1
 8000360:	6879      	ldr	r1, [r7, #4]
 8000362:	f002 fc25 	bl	8002bb0 <HAL_SPI_Transmit>
 8000366:	4603      	mov	r3, r0
 8000368:	75fb      	strb	r3, [r7, #23]
	errorCode = HAL_SPI_Transmit(dev->SPI_Handle, data, 1, HAL_MAX_DELAY);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6818      	ldr	r0, [r3, #0]
 800036e:	f04f 33ff 	mov.w	r3, #4294967295
 8000372:	2201      	movs	r2, #1
 8000374:	68b9      	ldr	r1, [r7, #8]
 8000376:	f002 fc1b 	bl	8002bb0 <HAL_SPI_Transmit>
 800037a:	4603      	mov	r3, r0
 800037c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	4807      	ldr	r0, [pc, #28]	; (80003a4 <BMP280_WriteRegister+0x74>)
 8000386:	f001 feaf 	bl	80020e8 <HAL_GPIO_WritePin>

	*reg = *reg|0x80; //Restore the MSB
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000392:	b2da      	uxtb	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	701a      	strb	r2, [r3, #0]

	return errorCode;
 8000398:	7dfb      	ldrb	r3, [r7, #23]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010800 	.word	0x40010800

080003a8 <ICM20602_Init>:
 */

#include "ICM20602.h"

uint8_t ICM20602_Init(ICM20602 *dev, SPI_HandleTypeDef *SPI_Handle, uint16_t CS_Pin, GPIO_TypeDef* GPIO_Port)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	4613      	mov	r3, r2
 80003b6:	80fb      	strh	r3, [r7, #6]
	dev->SPI_Handle = 	SPI_Handle;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	68ba      	ldr	r2, [r7, #8]
 80003bc:	601a      	str	r2, [r3, #0]

	dev->GPIO_Port = 	GPIO_Port;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	609a      	str	r2, [r3, #8]
	dev->CS_Pin = 		CS_Pin;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	809a      	strh	r2, [r3, #4]

	dev->girX = 		0.0f;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	f04f 0200 	mov.w	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
	dev->girY = 		0.0f;
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	f04f 0200 	mov.w	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
	dev->girZ = 		0.0f;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f04f 0200 	mov.w	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]

	dev->accX = 		0.0f;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f04f 0200 	mov.w	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
	dev->accY = 		0.0f;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	f04f 0200 	mov.w	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
	dev->accZ = 		0.0f;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]

	uint8_t errorCount = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


	uint8_t regData = 0x40;
 80003fe:	2340      	movs	r3, #64	; 0x40
 8000400:	757b      	strb	r3, [r7, #21]
	uint8_t address = ICM20602_REG_I2C_IF;
 8000402:	2370      	movs	r3, #112	; 0x70
 8000404:	753b      	strb	r3, [r7, #20]


	status = ICM20602_WriteRegister(dev, &regData, &address);
 8000406:	f107 0214 	add.w	r2, r7, #20
 800040a:	f107 0315 	add.w	r3, r7, #21
 800040e:	4619      	mov	r1, r3
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f000 f869 	bl	80004e8 <ICM20602_WriteRegister>
 8000416:	4603      	mov	r3, r0
 8000418:	75bb      	strb	r3, [r7, #22]
	errorCount += (status != HAL_OK);
 800041a:	7dbb      	ldrb	r3, [r7, #22]
 800041c:	2b00      	cmp	r3, #0
 800041e:	bf14      	ite	ne
 8000420:	2301      	movne	r3, #1
 8000422:	2300      	moveq	r3, #0
 8000424:	b2db      	uxtb	r3, r3
 8000426:	461a      	mov	r2, r3
 8000428:	7dfb      	ldrb	r3, [r7, #23]
 800042a:	4413      	add	r3, r2
 800042c:	75fb      	strb	r3, [r7, #23]

	//check device ID = 0x12
	address = ICM20602_REG_WHOAMI;
 800042e:	2375      	movs	r3, #117	; 0x75
 8000430:	753b      	strb	r3, [r7, #20]
	status = ICM20602_ReadRegister(dev, &regData, &address);
 8000432:	f107 0214 	add.w	r2, r7, #20
 8000436:	f107 0315 	add.w	r3, r7, #21
 800043a:	4619      	mov	r1, r3
 800043c:	68f8      	ldr	r0, [r7, #12]
 800043e:	f000 f816 	bl	800046e <ICM20602_ReadRegister>
 8000442:	4603      	mov	r3, r0
 8000444:	75bb      	strb	r3, [r7, #22]
	errorCount += (status != HAL_OK);
 8000446:	7dbb      	ldrb	r3, [r7, #22]
 8000448:	2b00      	cmp	r3, #0
 800044a:	bf14      	ite	ne
 800044c:	2301      	movne	r3, #1
 800044e:	2300      	moveq	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	7dfb      	ldrb	r3, [r7, #23]
 8000456:	4413      	add	r3, r2
 8000458:	75fb      	strb	r3, [r7, #23]

	if(regData != ICM20602_VAL_WHOAMI)
 800045a:	7d7b      	ldrb	r3, [r7, #21]
 800045c:	2b12      	cmp	r3, #18
 800045e:	d001      	beq.n	8000464 <ICM20602_Init+0xbc>
	{
		return 255;
 8000460:	23ff      	movs	r3, #255	; 0xff
 8000462:	e000      	b.n	8000466 <ICM20602_Init+0xbe>
	}

	return errorCount;
 8000464:	7dfb      	ldrb	r3, [r7, #23]
}
 8000466:	4618      	mov	r0, r3
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <ICM20602_ReadRegister>:

//Low level fonction
HAL_StatusTypeDef ICM20602_ReadRegister(ICM20602 *dev, uint8_t *data, uint8_t *reg)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b086      	sub	sp, #24
 8000472:	af00      	add	r7, sp, #0
 8000474:	60f8      	str	r0, [r7, #12]
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef errorCode;

	*reg = *reg|0x80; //flip the MSB to 1 to read
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000482:	b2da      	uxtb	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(dev->GPIO_Port, dev->CS_Pin, GPIO_PIN_RESET);
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	6898      	ldr	r0, [r3, #8]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	889b      	ldrh	r3, [r3, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	f001 fe28 	bl	80020e8 <HAL_GPIO_WritePin>
	errorCode = HAL_SPI_Transmit(dev->SPI_Handle, reg, 1, HAL_MAX_DELAY);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	6818      	ldr	r0, [r3, #0]
 800049c:	f04f 33ff 	mov.w	r3, #4294967295
 80004a0:	2201      	movs	r2, #1
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	f002 fb84 	bl	8002bb0 <HAL_SPI_Transmit>
 80004a8:	4603      	mov	r3, r0
 80004aa:	75fb      	strb	r3, [r7, #23]
	errorCode = HAL_SPI_Receive(dev->SPI_Handle, data, 1, HAL_MAX_DELAY);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	6818      	ldr	r0, [r3, #0]
 80004b0:	f04f 33ff 	mov.w	r3, #4294967295
 80004b4:	2201      	movs	r2, #1
 80004b6:	68b9      	ldr	r1, [r7, #8]
 80004b8:	f002 fcbd 	bl	8002e36 <HAL_SPI_Receive>
 80004bc:	4603      	mov	r3, r0
 80004be:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dev->GPIO_Port, dev->CS_Pin, GPIO_PIN_SET);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	6898      	ldr	r0, [r3, #8]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	889b      	ldrh	r3, [r3, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	f001 fe0c 	bl	80020e8 <HAL_GPIO_WritePin>
	*reg = *reg&0x7F; //Restore the MSB
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	701a      	strb	r2, [r3, #0]

	return errorCode;
 80004de:	7dfb      	ldrb	r3, [r7, #23]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3718      	adds	r7, #24
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <ICM20602_WriteRegister>:

	return errorCode;
}

HAL_StatusTypeDef ICM20602_WriteRegister(ICM20602 *dev, uint8_t *data, uint8_t *reg)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef errorCode;

	HAL_GPIO_WritePin(dev->GPIO_Port, dev->CS_Pin, GPIO_PIN_RESET);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	6898      	ldr	r0, [r3, #8]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	889b      	ldrh	r3, [r3, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	4619      	mov	r1, r3
 8000500:	f001 fdf2 	bl	80020e8 <HAL_GPIO_WritePin>
	errorCode = HAL_SPI_Transmit(dev->SPI_Handle, reg, 1, HAL_MAX_DELAY);
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	6818      	ldr	r0, [r3, #0]
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	2201      	movs	r2, #1
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	f002 fb4e 	bl	8002bb0 <HAL_SPI_Transmit>
 8000514:	4603      	mov	r3, r0
 8000516:	75fb      	strb	r3, [r7, #23]
	errorCode = HAL_SPI_Transmit(dev->SPI_Handle, data, 1, HAL_MAX_DELAY);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	2201      	movs	r2, #1
 8000522:	68b9      	ldr	r1, [r7, #8]
 8000524:	f002 fb44 	bl	8002bb0 <HAL_SPI_Transmit>
 8000528:	4603      	mov	r3, r0
 800052a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dev->GPIO_Port, dev->CS_Pin, GPIO_PIN_SET);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	6898      	ldr	r0, [r3, #8]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	889b      	ldrh	r3, [r3, #4]
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	f001 fdd6 	bl	80020e8 <HAL_GPIO_WritePin>

	return errorCode;
 800053c:	7dfb      	ldrb	r3, [r7, #23]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800054e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000552:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d013      	beq.n	8000586 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800055e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000562:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000566:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00b      	beq.n	8000586 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800056e:	e000      	b.n	8000572 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000570:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000572:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f9      	beq.n	8000570 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	b2d2      	uxtb	r2, r2
 8000584:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
	...

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 feff 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f85d 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fad3 	bl	8000b4c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 fab3 	bl	8000b10 <MX_DMA_Init>
  MX_SPI1_Init();
 80005aa:	f000 f905 	bl	80007b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005ae:	f000 f939 	bl	8000824 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 fa2f 	bl	8000a14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 fa57 	bl	8000a68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ba:	f000 fa7f 	bl	8000abc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80005be:	f000 f9b3 	bl	8000928 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005c2:	f000 f965 	bl	8000890 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005c6:	f000 f8a5 	bl	8000714 <MX_ADC1_Init>
  MX_CRC_Init();
 80005ca:	f000 f8e1 	bl	8000790 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  BMP280 bmp;
  ICM20602 icm;

  uint8_t status = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  printf(" Starting \n");
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <main+0xac>)
 80005d6:	f003 ff05 	bl	80043e4 <puts>

  status = ICM20602_Init(&icm, &hspi2, ICM_CS_Pin, ICM_CS_GPIO_Port);
 80005da:	1d38      	adds	r0, r7, #4
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <main+0xb0>)
 80005de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005e2:	4919      	ldr	r1, [pc, #100]	; (8000648 <main+0xb4>)
 80005e4:	f7ff fee0 	bl	80003a8 <ICM20602_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if(status == 0){printf("ICM20602 DETECT!\n");}
 80005ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d103      	bne.n	80005fe <main+0x6a>
 80005f6:	4815      	ldr	r0, [pc, #84]	; (800064c <main+0xb8>)
 80005f8:	f003 fef4 	bl	80043e4 <puts>
 80005fc:	e005      	b.n	800060a <main+0x76>
  else{printf("status = %d \n", status);}
 80005fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000602:	4619      	mov	r1, r3
 8000604:	4812      	ldr	r0, [pc, #72]	; (8000650 <main+0xbc>)
 8000606:	f003 fe87 	bl	8004318 <iprintf>

  status = BMP280_Init(&bmp, &hspi2, BMP_CS_Pin, BMP_CS_GPIO_Port);
 800060a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0xc0>)
 8000610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <main+0xb4>)
 8000616:	f7ff fd99 	bl	800014c <BMP280_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if(status == 0){printf("BMP280 DETECT!\n");}
 8000620:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000624:	2b00      	cmp	r3, #0
 8000626:	d103      	bne.n	8000630 <main+0x9c>
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <main+0xc4>)
 800062a:	f003 fedb 	bl	80043e4 <puts>
 800062e:	e005      	b.n	800063c <main+0xa8>
  else {printf("status = %d \n", status);}
 8000630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <main+0xbc>)
 8000638:	f003 fe6e 	bl	8004318 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0xa8>
 800063e:	bf00      	nop
 8000640:	080050e0 	.word	0x080050e0
 8000644:	40010c00 	.word	0x40010c00
 8000648:	20000114 	.word	0x20000114
 800064c:	080050ec 	.word	0x080050ec
 8000650:	08005100 	.word	0x08005100
 8000654:	40010800 	.word	0x40010800
 8000658:	08005110 	.word	0x08005110

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	2228      	movs	r2, #40	; 0x28
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 ff9a 	bl	80045a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fd2f 	bl	8002118 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80006c0:	f000 fb18 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 ff9b 	bl	800261c <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fb02 	bl	8000cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006f0:	2302      	movs	r3, #2
 80006f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f91d 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000708:	f000 faf4 	bl	8000cf4 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_ADC1_Init+0x74>)
 8000726:	4a19      	ldr	r2, [pc, #100]	; (800078c <MX_ADC1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_ADC1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_ADC1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_ADC1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_ADC1_Init+0x74>)
 800073e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000742:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_ADC1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ADC1_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_ADC1_Init+0x74>)
 8000752:	f000 fea9 	bl	80014a8 <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 faca 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000764:	2301      	movs	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_ADC1_Init+0x74>)
 8000772:	f000 ff71 	bl	8001658 <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800077c:	f000 faba 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000084 	.word	0x20000084
 800078c:	40012400 	.word	0x40012400

08000790 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_CRC_Init+0x20>)
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <MX_CRC_Init+0x24>)
 8000798:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_CRC_Init+0x20>)
 800079c:	f001 f9a3 	bl	8001ae6 <HAL_CRC_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007a6:	f000 faa5 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000b4 	.word	0x200000b4
 80007b4:	40023000 	.word	0x40023000

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI1_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_SPI1_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI1_Init+0x64>)
 80007ec:	2220      	movs	r2, #32
 80007ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI1_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI1_Init+0x64>)
 800080a:	f002 f94d 	bl	8002aa8 <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 fa6e 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000bc 	.word	0x200000bc
 8000820:	40013000 	.word	0x40013000

08000824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI2_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI2_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI2_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI2_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI2_Init+0x64>)
 8000858:	2218      	movs	r2, #24
 800085a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI2_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI2_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI2_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI2_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI2_Init+0x64>)
 8000876:	f002 f917 	bl	8002aa8 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 fa38 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000114 	.word	0x20000114
 800088c:	40003800 	.word	0x40003800

08000890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_TIM2_Init+0x94>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_TIM2_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_TIM2_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_TIM2_Init+0x94>)
 80008c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_TIM2_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_TIM2_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d4:	4813      	ldr	r0, [pc, #76]	; (8000924 <MX_TIM2_Init+0x94>)
 80008d6:	f002 fe6f 	bl	80035b8 <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008e0:	f000 fa08 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <MX_TIM2_Init+0x94>)
 80008f2:	f002 ffcb 	bl	800388c <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008fc:	f000 f9fa 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_TIM2_Init+0x94>)
 800090e:	f003 fb05 	bl	8003f1c <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f9ec 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000016c 	.word	0x2000016c

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000958:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <MX_TIM3_Init+0xe4>)
 800095a:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800095c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 127;
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <MX_TIM3_Init+0xe4>)
 8000960:	227f      	movs	r2, #127	; 0x7f
 8000962:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_TIM3_Init+0xe4>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20;
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_TIM3_Init+0xe4>)
 800096c:	2214      	movs	r2, #20
 800096e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_TIM3_Init+0xe4>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_TIM3_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800097c:	4823      	ldr	r0, [pc, #140]	; (8000a0c <MX_TIM3_Init+0xe4>)
 800097e:	f002 fe1b 	bl	80035b8 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000988:	f000 f9b4 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000996:	4619      	mov	r1, r3
 8000998:	481c      	ldr	r0, [pc, #112]	; (8000a0c <MX_TIM3_Init+0xe4>)
 800099a:	f002 ff77 	bl	800388c <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80009a4:	f000 f9a6 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009a8:	4818      	ldr	r0, [pc, #96]	; (8000a0c <MX_TIM3_Init+0xe4>)
 80009aa:	f002 fe54 	bl	8003656 <HAL_TIM_PWM_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80009b4:	f000 f99e 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	4619      	mov	r1, r3
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_TIM3_Init+0xe4>)
 80009c8:	f003 faa8 	bl	8003f1c <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80009d2:	f000 f98f 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d6:	2360      	movs	r3, #96	; 0x60
 80009d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	220c      	movs	r2, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4807      	ldr	r0, [pc, #28]	; (8000a0c <MX_TIM3_Init+0xe4>)
 80009ee:	f002 fe8b 	bl	8003708 <HAL_TIM_PWM_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80009f8:	f000 f97c 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <MX_TIM3_Init+0xe4>)
 80009fe:	f000 fac1 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000a02:	bf00      	nop
 8000a04:	3738      	adds	r7, #56	; 0x38
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200001b4 	.word	0x200001b4
 8000a10:	40000400 	.word	0x40000400

08000a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_USART1_UART_Init+0x50>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f003 fac4 	bl	8003fd8 <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a56:	f000 f94d 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001fc 	.word	0x200001fc
 8000a64:	40013800 	.word	0x40013800

08000a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART2_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f003 fa9a 	bl	8003fd8 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f923 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000244 	.word	0x20000244
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART3_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000af4:	f003 fa70 	bl	8003fd8 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f8f9 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000028c 	.word	0x2000028c
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_DMA_Init+0x38>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <MX_DMA_Init+0x38>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_DMA_Init+0x38>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2010      	movs	r0, #16
 8000b34:	f000 ffa1 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f000 ffba 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a51      	ldr	r2, [pc, #324]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b4f      	ldr	r3, [pc, #316]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b4c      	ldr	r3, [pc, #304]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a4b      	ldr	r2, [pc, #300]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b49      	ldr	r3, [pc, #292]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b46      	ldr	r3, [pc, #280]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a45      	ldr	r2, [pc, #276]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MX_GPIO_Init+0x160>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <MX_GPIO_Init+0x160>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a3f      	ldr	r2, [pc, #252]	; (8000cac <MX_GPIO_Init+0x160>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_GPIO_Init+0x160>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUL_S0_Pin|MUL_S1_Pin|MUL_S2_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000bc6:	483a      	ldr	r0, [pc, #232]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bc8:	f001 fa8e 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BATT3S2_ON_GPIO_Port, BATT3S2_ON_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4838      	ldr	r0, [pc, #224]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000bd2:	f001 fa89 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SDC_CS_Pin|BMP_CS_Pin|NPYRO_TEST_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f248 1110 	movw	r1, #33040	; 0x8110
 8000bdc:	4835      	ldr	r0, [pc, #212]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000bde:	f001 fa83 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM_ON_Pin|PYRO_ON0_Pin|PYRO_ON1_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2131      	movs	r1, #49	; 0x31
 8000be6:	4834      	ldr	r0, [pc, #208]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000be8:	f001 fa7e 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|ICM_CS_Pin|NMUL_E_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f241 1104 	movw	r1, #4356	; 0x1104
 8000bf2:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000bf4:	f001 fa78 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUL_S0_Pin MUL_S1_Pin MUL_S2_Pin */
  GPIO_InitStruct.Pin = MUL_S0_Pin|MUL_S1_Pin|MUL_S2_Pin;
 8000bf8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000c12:	f001 f8e5 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BATT3S2_ON_Pin SDC_CS_Pin BMP_CS_Pin NPYRO_TEST_Pin */
  GPIO_InitStruct.Pin = BATT3S2_ON_Pin|SDC_CS_Pin|BMP_CS_Pin|NPYRO_TEST_Pin;
 8000c16:	f248 1312 	movw	r3, #33042	; 0x8112
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4821      	ldr	r0, [pc, #132]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000c30:	f001 f8d6 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_ON_Pin LED_STATUS_Pin ICM_CS_Pin PYRO_ON0_Pin
                           PYRO_ON1_Pin */
  GPIO_InitStruct.Pin = CAM_ON_Pin|LED_STATUS_Pin|ICM_CS_Pin|PYRO_ON0_Pin
 8000c34:	f241 0335 	movw	r3, #4149	; 0x1035
 8000c38:	613b      	str	r3, [r7, #16]
                          |PYRO_ON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000c4e:	f001 f8c7 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_IN_Pin ICM_INT_Pin */
  GPIO_InitStruct.Pin = BUTTON_IN_Pin|ICM_INT_Pin;
 8000c52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000c68:	f001 f8ba 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NMUL_E_Pin */
  GPIO_InitStruct.Pin = NMUL_E_Pin;
 8000c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NMUL_E_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000c86:	f001 f8ab 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHECK12V_Pin */
  GPIO_InitStruct.Pin = CHECK12V_Pin;
 8000c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHECK12V_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000ca0:	f001 f89e 	bl	8001de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40010c00 	.word	0x40010c00

08000cbc <_write>:

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e009      	b.n	8000ce2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc35 	bl	8000546 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbf1      	blt.n	8000cce <_write+0x12>
	}
	return len;
 8000cea:	687b      	ldr	r3, [r7, #4]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x5c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_MspInit+0x60>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_MspInit+0x60>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_ADC_MspInit+0x6c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d121      	bne.n	8000dc8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_ADC_MspInit+0x70>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db8:	2303      	movs	r3, #3
 8000dba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_ADC_MspInit+0x74>)
 8000dc4:	f001 f80c 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40012400 	.word	0x40012400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010800 	.word	0x40010800

08000ddc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <HAL_CRC_MspInit+0x34>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10b      	bne.n	8000e06 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_CRC_MspInit+0x38>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_CRC_MspInit+0x38>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df8:	6153      	str	r3, [r2, #20]
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_CRC_MspInit+0x38>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40023000 	.word	0x40023000
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a37      	ldr	r2, [pc, #220]	; (8000f10 <HAL_SPI_MspInit+0xf8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d130      	bne.n	8000e9a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a35      	ldr	r2, [pc, #212]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e68:	23a0      	movs	r3, #160	; 0xa0
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4827      	ldr	r0, [pc, #156]	; (8000f18 <HAL_SPI_MspInit+0x100>)
 8000e7c:	f000 ffb0 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e80:	2340      	movs	r3, #64	; 0x40
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4821      	ldr	r0, [pc, #132]	; (8000f18 <HAL_SPI_MspInit+0x100>)
 8000e94:	f000 ffa4 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e98:	e036      	b.n	8000f08 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_SPI_MspInit+0x104>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d131      	bne.n	8000f08 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	4a1a      	ldr	r2, [pc, #104]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	61d3      	str	r3, [r2, #28]
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_SPI_MspInit+0xfc>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ed4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <HAL_SPI_MspInit+0x108>)
 8000eea:	f000 ff79 	bl	8001de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <HAL_SPI_MspInit+0x108>)
 8000f04:	f000 ff6c 	bl	8001de0 <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40013000 	.word	0x40013000
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	40003800 	.word	0x40003800
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f34:	d10c      	bne.n	8000f50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_TIM_Base_MspInit+0x58>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_TIM_Base_MspInit+0x58>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_TIM_Base_MspInit+0x58>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f4e:	e010      	b.n	8000f72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_TIM_Base_MspInit+0x5c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10b      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_TIM_Base_MspInit+0x58>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_TIM_Base_MspInit+0x58>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_TIM_Base_MspInit+0x58>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40000400 	.word	0x40000400

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_TIM_MspPostInit+0x58>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d117      	bne.n	8000fd4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_TIM_MspPostInit+0x5c>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_TIM_MspPostInit+0x5c>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_TIM_MspPostInit+0x5c>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BUZZER_ON_Pin;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_ON_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_TIM_MspPostInit+0x60>)
 8000fd0:	f000 ff06 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010c00 	.word	0x40010c00

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6c      	ldr	r2, [pc, #432]	; (80011b4 <HAL_UART_MspInit+0x1cc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d13e      	bne.n	8001086 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001008:	4b6b      	ldr	r3, [pc, #428]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a6a      	ldr	r2, [pc, #424]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RFD_TX_Pin;
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(RFD_TX_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	485c      	ldr	r0, [pc, #368]	; (80011bc <HAL_UART_MspInit+0x1d4>)
 800104c:	f000 fec8 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RFD_RX_Pin;
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RFD_RX_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4856      	ldr	r0, [pc, #344]	; (80011bc <HAL_UART_MspInit+0x1d4>)
 8001064:	f000 febc 	bl	8001de0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001068:	4b55      	ldr	r3, [pc, #340]	; (80011c0 <HAL_UART_MspInit+0x1d8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
 8001076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
 800107e:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_UART_MspInit+0x1d8>)
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001084:	e092      	b.n	80011ac <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a4e      	ldr	r2, [pc, #312]	; (80011c4 <HAL_UART_MspInit+0x1dc>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d156      	bne.n	800113e <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001090:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109a:	61d3      	str	r3, [r2, #28]
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a42      	ldr	r2, [pc, #264]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80010c0:	2304      	movs	r3, #4
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	483d      	ldr	r0, [pc, #244]	; (80011c8 <HAL_UART_MspInit+0x1e0>)
 80010d4:	f000 fe84 	bl	8001de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80010d8:	2308      	movs	r3, #8
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4837      	ldr	r0, [pc, #220]	; (80011c8 <HAL_UART_MspInit+0x1e0>)
 80010ec:	f000 fe78 	bl	8001de0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 80010f2:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <HAL_UART_MspInit+0x1e8>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fc:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001120:	482a      	ldr	r0, [pc, #168]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 8001122:	f000 fcfd 	bl	8001b20 <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0x148>
      Error_Handler();
 800112c:	f7ff fde2 	bl	8000cf4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a26      	ldr	r2, [pc, #152]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <HAL_UART_MspInit+0x1e4>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800113c:	e036      	b.n	80011ac <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART3)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_UART_MspInit+0x1ec>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d131      	bne.n	80011ac <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 800114e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001152:	61d3      	str	r3, [r2, #28]
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_UART_MspInit+0x1d0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_TX_Pin;
 8001178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <HAL_UART_MspInit+0x1d4>)
 800118e:	f000 fe27 	bl	8001de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_RX_Pin;
 8001192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_UART_MspInit+0x1d4>)
 80011a8:	f000 fe1a 	bl	8001de0 <HAL_GPIO_Init>
}
 80011ac:	bf00      	nop
 80011ae:	3738      	adds	r7, #56	; 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40004400 	.word	0x40004400
 80011c8:	40010800 	.word	0x40010800
 80011cc:	200002d4 	.word	0x200002d4
 80011d0:	4002006c 	.word	0x4002006c
 80011d4:	40004800 	.word	0x40004800

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121e:	f000 f903 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA1_Channel6_IRQHandler+0x10>)
 800122e:	f000 fcd1 	bl	8001bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002d4 	.word	0x200002d4

0800123c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
  }

  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129c:	605a      	str	r2, [r3, #4]
  return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <_isatty>:

int _isatty(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
	...

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f003 f99a 	bl	8004640 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20005000 	.word	0x20005000
 8001338:	00000400 	.word	0x00000400
 800133c:	20000318 	.word	0x20000318
 8001340:	20000470 	.word	0x20000470

08001344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001350:	f7ff fff8 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001356:	490c      	ldr	r1, [pc, #48]	; (8001388 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <LoopFillZerobss+0x16>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800136c:	4c09      	ldr	r4, [pc, #36]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f003 f967 	bl	800464c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7ff f909 	bl	8000594 <main>
  bx lr
 8001382:	4770      	bx	lr
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800138c:	08005188 	.word	0x08005188
  ldr r2, =_sbss
 8001390:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001394:	2000046c 	.word	0x2000046c

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x28>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 fb59 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fca2 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fb71 	bl	8001ace <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 fb39 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000008 	.word	0x20000008
 8001448:	2000031c 	.word	0x2000031c

0800144c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	2000031c 	.word	0x2000031c

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fff0 	bl	800144c <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffe0 	bl	800144c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0be      	b.n	8001648 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fc3c 	bl	8000d64 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f9ab 	bl	8001848 <ADC_ConversionStop_Disable>
 80014f2:	4603      	mov	r3, r0
 80014f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8099 	bne.w	8001636 <HAL_ADC_Init+0x18e>
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 8095 	bne.w	8001636 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001514:	f023 0302 	bic.w	r3, r3, #2
 8001518:	f043 0202 	orr.w	r2, r3, #2
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001528:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7b1b      	ldrb	r3, [r3, #12]
 800152e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001530:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4313      	orrs	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001540:	d003      	beq.n	800154a <HAL_ADC_Init+0xa2>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <HAL_ADC_Init+0xa8>
 800154a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154e:	e000      	b.n	8001552 <HAL_ADC_Init+0xaa>
 8001550:	2300      	movs	r3, #0
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7d1b      	ldrb	r3, [r3, #20]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d119      	bne.n	8001594 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b1b      	ldrb	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d109      	bne.n	800157c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	3b01      	subs	r3, #1
 800156e:	035a      	lsls	r2, r3, #13
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e00b      	b.n	8001594 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_ADC_Init+0x1a8>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_Init+0x126>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d104      	bne.n	80015d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	051b      	lsls	r3, r3, #20
 80015d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_ADC_Init+0x1ac>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10b      	bne.n	8001614 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f023 0303 	bic.w	r3, r3, #3
 800160a:	f043 0201 	orr.w	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001612:	e018      	b.n	8001646 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f023 0312 	bic.w	r3, r3, #18
 800161c:	f043 0210 	orr.w	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001634:	e007      	b.n	8001646 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f043 0210 	orr.w	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001646:	7dfb      	ldrb	r3, [r7, #23]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	ffe1f7fd 	.word	0xffe1f7fd
 8001654:	ff1f0efe 	.word	0xff1f0efe

08001658 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x20>
 8001674:	2302      	movs	r3, #2
 8001676:	e0dc      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1da>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b06      	cmp	r3, #6
 8001686:	d81c      	bhi.n	80016c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b05      	subs	r3, #5
 800169a:	221f      	movs	r2, #31
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	4019      	ands	r1, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	3b05      	subs	r3, #5
 80016b4:	fa00 f203 	lsl.w	r2, r0, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
 80016c0:	e03c      	b.n	800173c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d81c      	bhi.n	8001704 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b23      	subs	r3, #35	; 0x23
 80016dc:	221f      	movs	r2, #31
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	4019      	ands	r1, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b23      	subs	r3, #35	; 0x23
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
 8001702:	e01b      	b.n	800173c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b41      	subs	r3, #65	; 0x41
 8001716:	221f      	movs	r2, #31
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	4019      	ands	r1, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	3b41      	subs	r3, #65	; 0x41
 8001730:	fa00 f203 	lsl.w	r2, r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b09      	cmp	r3, #9
 8001742:	d91c      	bls.n	800177e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68d9      	ldr	r1, [r3, #12]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	3b1e      	subs	r3, #30
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	3b1e      	subs	r3, #30
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	e019      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6919      	ldr	r1, [r3, #16]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	2207      	movs	r2, #7
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6898      	ldr	r0, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d003      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017be:	2b11      	cmp	r3, #17
 80017c0:	d132      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_ADC_ConfigChannel+0x1e4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d125      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d126      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d11a      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_ADC_ConfigChannel+0x1e8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_ADC_ConfigChannel+0x1ec>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	0c9a      	lsrs	r2, r3, #18
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3b01      	subs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_ConfigChannel+0x1b2>
 8001816:	e007      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40012400 	.word	0x40012400
 8001840:	20000000 	.word	0x20000000
 8001844:	431bde83 	.word	0x431bde83

08001848 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d12e      	bne.n	80018c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001872:	f7ff fdeb 	bl	800144c <HAL_GetTick>
 8001876:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001878:	e01b      	b.n	80018b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800187a:	f7ff fde7 	bl	800144c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d914      	bls.n	80018b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10d      	bne.n	80018b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e007      	b.n	80018c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d0dc      	beq.n	800187a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <__NVIC_SetPriorityGrouping>:
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4906      	ldr	r1, [pc, #24]	; (8001964 <__NVIC_EnableIRQ+0x34>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Config>:
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff90 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff2d 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff42 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff90 	bl	80019bc <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5f 	bl	8001968 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff35 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e00e      	b.n	8001b16 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	795b      	ldrb	r3, [r3, #5]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff f967 	bl	8000ddc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e043      	b.n	8001bbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_DMA_Init+0xa8>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_DMA_Init+0xac>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	009a      	lsls	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_DMA_Init+0xb0>)
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	bffdfff8 	.word	0xbffdfff8
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d04f      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xc8>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d04a      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0204 	bic.w	r2, r2, #4
 8001c22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <HAL_DMA_IRQHandler+0x1f0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d029      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xae>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_DMA_IRQHandler+0x1f4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xaa>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <HAL_DMA_IRQHandler+0x1f8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01a      	beq.n	8001c78 <HAL_DMA_IRQHandler+0xa4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a62      	ldr	r2, [pc, #392]	; (8001dd0 <HAL_DMA_IRQHandler+0x1fc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d012      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x9e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <HAL_DMA_IRQHandler+0x200>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00a      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x98>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5f      	ldr	r2, [pc, #380]	; (8001dd8 <HAL_DMA_IRQHandler+0x204>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d102      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x92>
 8001c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c64:	e00e      	b.n	8001c84 <HAL_DMA_IRQHandler+0xb0>
 8001c66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c6a:	e00b      	b.n	8001c84 <HAL_DMA_IRQHandler+0xb0>
 8001c6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c70:	e008      	b.n	8001c84 <HAL_DMA_IRQHandler+0xb0>
 8001c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c76:	e005      	b.n	8001c84 <HAL_DMA_IRQHandler+0xb0>
 8001c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7c:	e002      	b.n	8001c84 <HAL_DMA_IRQHandler+0xb0>
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	e000      	b.n	8001c84 <HAL_DMA_IRQHandler+0xb0>
 8001c82:	2304      	movs	r3, #4
 8001c84:	4a55      	ldr	r2, [pc, #340]	; (8001ddc <HAL_DMA_IRQHandler+0x208>)
 8001c86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8094 	beq.w	8001dba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c9a:	e08e      	b.n	8001dba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d056      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x186>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d051      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10b      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 020a 	bic.w	r2, r2, #10
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <HAL_DMA_IRQHandler+0x1f0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d029      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x166>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a37      	ldr	r2, [pc, #220]	; (8001dc8 <HAL_DMA_IRQHandler+0x1f4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d022      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x162>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a35      	ldr	r2, [pc, #212]	; (8001dcc <HAL_DMA_IRQHandler+0x1f8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01a      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x15c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_DMA_IRQHandler+0x1fc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d012      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x156>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <HAL_DMA_IRQHandler+0x200>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x150>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <HAL_DMA_IRQHandler+0x204>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d102      	bne.n	8001d1e <HAL_DMA_IRQHandler+0x14a>
 8001d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d1c:	e00e      	b.n	8001d3c <HAL_DMA_IRQHandler+0x168>
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d22:	e00b      	b.n	8001d3c <HAL_DMA_IRQHandler+0x168>
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	e008      	b.n	8001d3c <HAL_DMA_IRQHandler+0x168>
 8001d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2e:	e005      	b.n	8001d3c <HAL_DMA_IRQHandler+0x168>
 8001d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d34:	e002      	b.n	8001d3c <HAL_DMA_IRQHandler+0x168>
 8001d36:	2320      	movs	r3, #32
 8001d38:	e000      	b.n	8001d3c <HAL_DMA_IRQHandler+0x168>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <HAL_DMA_IRQHandler+0x208>)
 8001d3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d034      	beq.n	8001dba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d58:	e02f      	b.n	8001dba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d028      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x1e8>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 020e 	bic.w	r2, r2, #14
 8001d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
    }
  }
  return;
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
}
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40020008 	.word	0x40020008
 8001dc8:	4002001c 	.word	0x4002001c
 8001dcc:	40020030 	.word	0x40020030
 8001dd0:	40020044 	.word	0x40020044
 8001dd4:	40020058 	.word	0x40020058
 8001dd8:	4002006c 	.word	0x4002006c
 8001ddc:	40020000 	.word	0x40020000

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b08b      	sub	sp, #44	; 0x2c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e169      	b.n	80020c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df4:	2201      	movs	r2, #1
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8158 	bne.w	80020c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a9a      	ldr	r2, [pc, #616]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d05e      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e1c:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d875      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e22:	4a98      	ldr	r2, [pc, #608]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d058      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e28:	4a96      	ldr	r2, [pc, #600]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d86f      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e2e:	4a96      	ldr	r2, [pc, #600]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d052      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e34:	4a94      	ldr	r2, [pc, #592]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d869      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e3a:	4a94      	ldr	r2, [pc, #592]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04c      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e40:	4a92      	ldr	r2, [pc, #584]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d863      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e46:	4a92      	ldr	r2, [pc, #584]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d046      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e4c:	4a90      	ldr	r2, [pc, #576]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d85d      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d82a      	bhi.n	8001eac <HAL_GPIO_Init+0xcc>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d859      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e5a:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <HAL_GPIO_Init+0x80>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	08001ec7 	.word	0x08001ec7
 8001e6c:	08001f09 	.word	0x08001f09
 8001e70:	08001f0f 	.word	0x08001f0f
 8001e74:	08001f0f 	.word	0x08001f0f
 8001e78:	08001f0f 	.word	0x08001f0f
 8001e7c:	08001f0f 	.word	0x08001f0f
 8001e80:	08001f0f 	.word	0x08001f0f
 8001e84:	08001f0f 	.word	0x08001f0f
 8001e88:	08001f0f 	.word	0x08001f0f
 8001e8c:	08001f0f 	.word	0x08001f0f
 8001e90:	08001f0f 	.word	0x08001f0f
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001f0f 	.word	0x08001f0f
 8001e9c:	08001f0f 	.word	0x08001f0f
 8001ea0:	08001f0f 	.word	0x08001f0f
 8001ea4:	08001ebd 	.word	0x08001ebd
 8001ea8:	08001ed1 	.word	0x08001ed1
 8001eac:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_GPIO_Init+0x2b4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb2:	e02c      	b.n	8001f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e029      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e024      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e01f      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e01a      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e013      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	611a      	str	r2, [r3, #16]
          break;
 8001efa:	e009      	b.n	8001f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001efc:	2308      	movs	r3, #8
 8001efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	615a      	str	r2, [r3, #20]
          break;
 8001f06:	e003      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          break;
 8001f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	; 0xff
 8001f14:	d801      	bhi.n	8001f1a <HAL_GPIO_Init+0x13a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	e001      	b.n	8001f1e <HAL_GPIO_Init+0x13e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d802      	bhi.n	8001f2c <HAL_GPIO_Init+0x14c>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x152>
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3b08      	subs	r3, #8
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	210f      	movs	r1, #15
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	401a      	ands	r2, r3
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80b1 	beq.w	80020c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f60:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_GPIO_Init+0x2c0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1ec>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_GPIO_Init+0x2c4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <HAL_GPIO_Init+0x2c8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <HAL_GPIO_Init+0x2cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1e0>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e006      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e004      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fde:	492f      	ldr	r1, [pc, #188]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	492c      	ldr	r1, [pc, #176]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	608b      	str	r3, [r1, #8]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4928      	ldr	r1, [pc, #160]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002010:	4013      	ands	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4922      	ldr	r1, [pc, #136]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	491e      	ldr	r1, [pc, #120]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4918      	ldr	r1, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	4914      	ldr	r1, [pc, #80]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d021      	beq.n	80020b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e021      	b.n	80020c2 <HAL_GPIO_Init+0x2e2>
 800207e:	bf00      	nop
 8002080:	10320000 	.word	0x10320000
 8002084:	10310000 	.word	0x10310000
 8002088:	10220000 	.word	0x10220000
 800208c:	10210000 	.word	0x10210000
 8002090:	10120000 	.word	0x10120000
 8002094:	10110000 	.word	0x10110000
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010800 	.word	0x40010800
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40011400 	.word	0x40011400
 80020b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	4909      	ldr	r1, [pc, #36]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020be:	4013      	ands	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f ae8e 	bne.w	8001df4 <HAL_GPIO_Init+0x14>
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	372c      	adds	r7, #44	; 0x2c
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f8:	787b      	ldrb	r3, [r7, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002104:	e003      	b.n	800210e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	041a      	lsls	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e272      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8087 	beq.w	8002246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b04      	cmp	r3, #4
 8002142:	d00c      	beq.n	800215e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002144:	4b8f      	ldr	r3, [pc, #572]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d112      	bne.n	8002176 <HAL_RCC_OscConfig+0x5e>
 8002150:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d10b      	bne.n	8002176 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06c      	beq.n	8002244 <HAL_RCC_OscConfig+0x12c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d168      	bne.n	8002244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e24c      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x76>
 8002180:	4b80      	ldr	r3, [pc, #512]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a7f      	ldr	r2, [pc, #508]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e02e      	b.n	80021ec <HAL_RCC_OscConfig+0xd4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x98>
 8002196:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7a      	ldr	r2, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b78      	ldr	r3, [pc, #480]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a77      	ldr	r2, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xd4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0xbc>
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a71      	ldr	r2, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6e      	ldr	r2, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xd4>
 80021d4:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6a      	ldr	r2, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a67      	ldr	r2, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff f92a 	bl	800144c <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff f926 	bl	800144c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e200      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xe4>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff f916 	bl	800144c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff f912 	bl	800144c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1ec      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x10c>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002252:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x18c>
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x176>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1c0      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4939      	ldr	r1, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e03a      	b.n	800231a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff f8cb 	bl	800144c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ba:	f7ff f8c7 	bl	800144c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1a1      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4927      	ldr	r1, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff f8aa 	bl	800144c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fc:	f7ff f8a6 	bl	800144c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e180      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03a      	beq.n	800239c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d019      	beq.n	8002362 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_RCC_OscConfig+0x274>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff f88a 	bl	800144c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff f886 	bl	800144c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e160      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_OscConfig+0x26c>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800235a:	2001      	movs	r0, #1
 800235c:	f000 fad0 	bl	8002900 <RCC_Delay>
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_OscConfig+0x274>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7ff f870 	bl	800144c <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	e00f      	b.n	8002390 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002370:	f7ff f86c 	bl	800144c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d908      	bls.n	8002390 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e146      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	42420000 	.word	0x42420000
 800238c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b92      	ldr	r3, [pc, #584]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e9      	bne.n	8002370 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a6 	beq.w	80024f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b8b      	ldr	r3, [pc, #556]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a87      	ldr	r2, [pc, #540]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]
 80023c6:	4b85      	ldr	r3, [pc, #532]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b82      	ldr	r3, [pc, #520]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4b7f      	ldr	r3, [pc, #508]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7e      	ldr	r2, [pc, #504]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7ff f82d 	bl	800144c <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7ff f829 	bl	800144c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e103      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b75      	ldr	r3, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x4c8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x312>
 800241c:	4b6f      	ldr	r3, [pc, #444]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a6e      	ldr	r2, [pc, #440]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	e02d      	b.n	8002486 <HAL_RCC_OscConfig+0x36e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x334>
 8002432:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a69      	ldr	r2, [pc, #420]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a66      	ldr	r2, [pc, #408]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	6213      	str	r3, [r2, #32]
 800244a:	e01c      	b.n	8002486 <HAL_RCC_OscConfig+0x36e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x356>
 8002454:	4b61      	ldr	r3, [pc, #388]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a60      	ldr	r2, [pc, #384]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	4b5e      	ldr	r3, [pc, #376]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a5d      	ldr	r2, [pc, #372]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x36e>
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a5a      	ldr	r2, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	4b58      	ldr	r3, [pc, #352]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a57      	ldr	r2, [pc, #348]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d015      	beq.n	80024ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7fe ffdd 	bl	800144c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe ffd9 	bl	800144c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0b1      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0ee      	beq.n	8002496 <HAL_RCC_OscConfig+0x37e>
 80024b8:	e014      	b.n	80024e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ba:	f7fe ffc7 	bl	800144c <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe ffc3 	bl	800144c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e09b      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ee      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002500:	4b36      	ldr	r3, [pc, #216]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d061      	beq.n	80025d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d146      	bne.n	80025a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_RCC_OscConfig+0x4cc>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe ff97 	bl	800144c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe ff93 	bl	800144c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e06d      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d108      	bne.n	800255c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4921      	ldr	r1, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a19      	ldr	r1, [r3, #32]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	430b      	orrs	r3, r1
 800256e:	491b      	ldr	r1, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe ff67 	bl	800144c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe ff63 	bl	800144c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e03d      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x46a>
 80025a0:	e035      	b.n	800260e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_OscConfig+0x4cc>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe ff50 	bl	800144c <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe ff4c 	bl	800144c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e026      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x498>
 80025ce:	e01e      	b.n	800260e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e019      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
 80025e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x500>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d0      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800269a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d040      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d115      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e073      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4936      	ldr	r1, [pc, #216]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fe9e 	bl	800144c <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe fe9a 	bl	800144c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e053      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d210      	bcs.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1cc>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fdfc 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08005120 	.word	0x08005120
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e027      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	613b      	str	r3, [r7, #16]
      break;
 8002824:	e027      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	fb03 f202 	mul.w	r2, r3, r2
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	613b      	str	r3, [r7, #16]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002872:	613b      	str	r3, [r7, #16]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	693b      	ldr	r3, [r7, #16]
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	00f42400 	.word	0x00f42400
 800288c:	08005138 	.word	0x08005138
 8002890:	08005148 	.word	0x08005148
 8002894:	003d0900 	.word	0x003d0900
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <HAL_RCC_GetHCLKFreq+0x10>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	20000000 	.word	0x20000000

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b4:	f7ff fff2 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08005130 	.word	0x08005130

080028d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028dc:	f7ff ffde 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	0adb      	lsrs	r3, r3, #11
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	08005130 	.word	0x08005130

08002900 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <RCC_Delay+0x34>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <RCC_Delay+0x38>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0a5b      	lsrs	r3, r3, #9
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800291c:	bf00      	nop
  }
  while (Delay --);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	60fa      	str	r2, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f9      	bne.n	800291c <RCC_Delay+0x1c>
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000000 	.word	0x20000000
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d07d      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295c:	4b4f      	ldr	r3, [pc, #316]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10d      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4a4b      	ldr	r2, [pc, #300]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	61d3      	str	r3, [r2, #28]
 8002974:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002980:	2301      	movs	r3, #1
 8002982:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d118      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a42      	ldr	r2, [pc, #264]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299c:	f7fe fd56 	bl	800144c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	e008      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fd52 	bl	800144c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e06d      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d02e      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d027      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029f6:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fd21 	bl	800144c <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fd1d 	bl	800144c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e036      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ee      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4917      	ldr	r1, [pc, #92]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	490b      	ldr	r1, [pc, #44]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	42420440 	.word	0x42420440

08002aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e076      	b.n	8002ba8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aca:	d009      	beq.n	8002ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
 8002ad2:	e005      	b.n	8002ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe f98c 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	ea42 0103 	orr.w	r1, r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	0c1a      	lsrs	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f002 0204 	and.w	r2, r2, #4
 8002b86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_SPI_Transmit+0x22>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e12d      	b.n	8002e2e <HAL_SPI_Transmit+0x27e>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bda:	f7fe fc37 	bl	800144c <HAL_GetTick>
 8002bde:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d002      	beq.n	8002bf6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bf4:	e116      	b.n	8002e24 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_SPI_Transmit+0x52>
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c06:	e10d      	b.n	8002e24 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4e:	d10f      	bne.n	8002c70 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d007      	beq.n	8002c8e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c96:	d14f      	bne.n	8002d38 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_Transmit+0xf6>
 8002ca0:	8afb      	ldrh	r3, [r7, #22]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d142      	bne.n	8002d2c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	1c9a      	adds	r2, r3, #2
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cca:	e02f      	b.n	8002d2c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d112      	bne.n	8002d00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cfe:	e015      	b.n	8002d2c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d00:	f7fe fba4 	bl	800144c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d803      	bhi.n	8002d18 <HAL_SPI_Transmit+0x168>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d102      	bne.n	8002d1e <HAL_SPI_Transmit+0x16e>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d2a:	e07b      	b.n	8002e24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1ca      	bne.n	8002ccc <HAL_SPI_Transmit+0x11c>
 8002d36:	e050      	b.n	8002dda <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_SPI_Transmit+0x196>
 8002d40:	8afb      	ldrh	r3, [r7, #22]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d144      	bne.n	8002dd0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	7812      	ldrb	r2, [r2, #0]
 8002d52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d6c:	e030      	b.n	8002dd0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d113      	bne.n	8002da4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	7812      	ldrb	r2, [r2, #0]
 8002d88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002da2:	e015      	b.n	8002dd0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da4:	f7fe fb52 	bl	800144c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d803      	bhi.n	8002dbc <HAL_SPI_Transmit+0x20c>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d102      	bne.n	8002dc2 <HAL_SPI_Transmit+0x212>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002dce:	e029      	b.n	8002e24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1c9      	bne.n	8002d6e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fbcc 	bl	800357c <SPI_EndRxTxTransaction>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e003      	b.n	8002e24 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b088      	sub	sp, #32
 8002e3a:	af02      	add	r7, sp, #8
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e5a:	e0fb      	b.n	8003054 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e64:	d112      	bne.n	8002e8c <HAL_SPI_Receive+0x56>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10e      	bne.n	8002e8c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2204      	movs	r2, #4
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8ef 	bl	8003066 <HAL_SPI_TransmitReceive>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	e0e8      	b.n	800305e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_SPI_Receive+0x64>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e0e1      	b.n	800305e <HAL_SPI_Receive+0x228>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea2:	f7fe fad3 	bl	800144c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_Receive+0x7e>
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eb8:	e0cc      	b.n	8003054 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	88fa      	ldrh	r2, [r7, #6]
 8002ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f00:	d10f      	bne.n	8002f22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d007      	beq.n	8002f40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d16a      	bne.n	800301e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f48:	e032      	b.n	8002fb0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d115      	bne.n	8002f84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f103 020c 	add.w	r2, r3, #12
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f82:	e015      	b.n	8002fb0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f84:	f7fe fa62 	bl	800144c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d803      	bhi.n	8002f9c <HAL_SPI_Receive+0x166>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d102      	bne.n	8002fa2 <HAL_SPI_Receive+0x16c>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002fae:	e051      	b.n	8003054 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1c7      	bne.n	8002f4a <HAL_SPI_Receive+0x114>
 8002fba:	e035      	b.n	8003028 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d113      	bne.n	8002ff2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	1c9a      	adds	r2, r3, #2
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ff0:	e015      	b.n	800301e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff2:	f7fe fa2b 	bl	800144c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d803      	bhi.n	800300a <HAL_SPI_Receive+0x1d4>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d102      	bne.n	8003010 <HAL_SPI_Receive+0x1da>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800301c:	e01a      	b.n	8003054 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1c9      	bne.n	8002fbc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fa53 	bl	80034d8 <SPI_EndRxTransaction>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
 800304a:	e003      	b.n	8003054 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800305c:	7dfb      	ldrb	r3, [r7, #23]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b08c      	sub	sp, #48	; 0x30
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003074:	2301      	movs	r3, #1
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_SPI_TransmitReceive+0x26>
 8003088:	2302      	movs	r3, #2
 800308a:	e198      	b.n	80033be <HAL_SPI_TransmitReceive+0x358>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003094:	f7fe f9da 	bl	800144c <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d00f      	beq.n	80030d6 <HAL_SPI_TransmitReceive+0x70>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030bc:	d107      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x68>
 80030c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d003      	beq.n	80030d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030d4:	e16d      	b.n	80033b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_SPI_TransmitReceive+0x82>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_SPI_TransmitReceive+0x82>
 80030e2:	887b      	ldrh	r3, [r7, #2]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ee:	e160      	b.n	80033b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d003      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2205      	movs	r2, #5
 8003100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	887a      	ldrh	r2, [r7, #2]
 800311a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	887a      	ldrh	r2, [r7, #2]
 8003126:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d007      	beq.n	8003158 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003160:	d17c      	bne.n	800325c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x10a>
 800316a:	8b7b      	ldrh	r3, [r7, #26]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d16a      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	1c9a      	adds	r2, r3, #2
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003194:	e057      	b.n	8003246 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d11b      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x176>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x176>
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d113      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	881a      	ldrh	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	1c9a      	adds	r2, r3, #2
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d119      	bne.n	800321e <HAL_SPI_TransmitReceive+0x1b8>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d014      	beq.n	800321e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	b292      	uxth	r2, r2
 8003200:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800321a:	2301      	movs	r3, #1
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800321e:	f7fe f915 	bl	800144c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800322a:	429a      	cmp	r2, r3
 800322c:	d80b      	bhi.n	8003246 <HAL_SPI_TransmitReceive+0x1e0>
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d007      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003244:	e0b5      	b.n	80033b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1a2      	bne.n	8003196 <HAL_SPI_TransmitReceive+0x130>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d19d      	bne.n	8003196 <HAL_SPI_TransmitReceive+0x130>
 800325a:	e080      	b.n	800335e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_SPI_TransmitReceive+0x204>
 8003264:	8b7b      	ldrh	r3, [r7, #26]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d16f      	bne.n	800334a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003290:	e05b      	b.n	800334a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b02      	cmp	r3, #2
 800329e:	d11c      	bne.n	80032da <HAL_SPI_TransmitReceive+0x274>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d017      	beq.n	80032da <HAL_SPI_TransmitReceive+0x274>
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d114      	bne.n	80032da <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d119      	bne.n	800331c <HAL_SPI_TransmitReceive+0x2b6>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d014      	beq.n	800331c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003318:	2301      	movs	r3, #1
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800331c:	f7fe f896 	bl	800144c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003328:	429a      	cmp	r2, r3
 800332a:	d803      	bhi.n	8003334 <HAL_SPI_TransmitReceive+0x2ce>
 800332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d102      	bne.n	800333a <HAL_SPI_TransmitReceive+0x2d4>
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003348:	e033      	b.n	80033b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d19e      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x22c>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d199      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f90a 	bl	800357c <SPI_EndRxTxTransaction>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800337a:	e01a      	b.n	80033b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a8:	e003      	b.n	80033b2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3730      	adds	r7, #48	; 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033d8:	f7fe f838 	bl	800144c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033e8:	f7fe f830 	bl	800144c <HAL_GetTick>
 80033ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	015b      	lsls	r3, r3, #5
 80033f4:	0d1b      	lsrs	r3, r3, #20
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033fe:	e054      	b.n	80034aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d050      	beq.n	80034aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003408:	f7fe f820 	bl	800144c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	429a      	cmp	r2, r3
 8003416:	d902      	bls.n	800341e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d13d      	bne.n	800349a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800342c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003436:	d111      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003440:	d004      	beq.n	800344c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d107      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d10f      	bne.n	8003486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e017      	b.n	80034ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	bf0c      	ite	eq
 80034ba:	2301      	moveq	r3, #1
 80034bc:	2300      	movne	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d19b      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ec:	d111      	bne.n	8003512 <SPI_EndRxTransaction+0x3a>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f6:	d004      	beq.n	8003502 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003500:	d107      	bne.n	8003512 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003510:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351a:	d117      	bne.n	800354c <SPI_EndRxTransaction+0x74>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003524:	d112      	bne.n	800354c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2200      	movs	r2, #0
 800352e:	2101      	movs	r1, #1
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff ff49 	bl	80033c8 <SPI_WaitFlagStateUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01a      	beq.n	8003572 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e013      	b.n	8003574 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff36 	bl	80033c8 <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e000      	b.n	8003574 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7ff ff18 	bl	80033c8 <SPI_WaitFlagStateUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	f043 0220 	orr.w	r2, r3, #32
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e000      	b.n	80035b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e041      	b.n	800364e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fca0 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 fa10 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e041      	b.n	80036ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f839 	bl	80036f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f000 f9c1 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003722:	2302      	movs	r3, #2
 8003724:	e0ae      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	f200 809f 	bhi.w	8003874 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003736:	a201      	add	r2, pc, #4	; (adr r2, 800373c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	08003771 	.word	0x08003771
 8003740:	08003875 	.word	0x08003875
 8003744:	08003875 	.word	0x08003875
 8003748:	08003875 	.word	0x08003875
 800374c:	080037b1 	.word	0x080037b1
 8003750:	08003875 	.word	0x08003875
 8003754:	08003875 	.word	0x08003875
 8003758:	08003875 	.word	0x08003875
 800375c:	080037f3 	.word	0x080037f3
 8003760:	08003875 	.word	0x08003875
 8003764:	08003875 	.word	0x08003875
 8003768:	08003875 	.word	0x08003875
 800376c:	08003833 	.word	0x08003833
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f9b2 	bl	8003ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6999      	ldr	r1, [r3, #24]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	619a      	str	r2, [r3, #24]
      break;
 80037ae:	e064      	b.n	800387a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f9f8 	bl	8003bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6999      	ldr	r1, [r3, #24]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	619a      	str	r2, [r3, #24]
      break;
 80037f0:	e043      	b.n	800387a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fa41 	bl	8003c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0208 	orr.w	r2, r2, #8
 800380c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0204 	bic.w	r2, r2, #4
 800381c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69d9      	ldr	r1, [r3, #28]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	61da      	str	r2, [r3, #28]
      break;
 8003830:	e023      	b.n	800387a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fa8b 	bl	8003d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69d9      	ldr	r1, [r3, #28]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	021a      	lsls	r2, r3, #8
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	61da      	str	r2, [r3, #28]
      break;
 8003872:	e002      	b.n	800387a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
      break;
 8003878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003882:	7dfb      	ldrb	r3, [r7, #23]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIM_ConfigClockSource+0x1c>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0b4      	b.n	8003a12 <HAL_TIM_ConfigClockSource+0x186>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e0:	d03e      	beq.n	8003960 <HAL_TIM_ConfigClockSource+0xd4>
 80038e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e6:	f200 8087 	bhi.w	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 80038ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ee:	f000 8086 	beq.w	80039fe <HAL_TIM_ConfigClockSource+0x172>
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	d87f      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b70      	cmp	r3, #112	; 0x70
 80038fa:	d01a      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa6>
 80038fc:	2b70      	cmp	r3, #112	; 0x70
 80038fe:	d87b      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b60      	cmp	r3, #96	; 0x60
 8003902:	d050      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003904:	2b60      	cmp	r3, #96	; 0x60
 8003906:	d877      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b50      	cmp	r3, #80	; 0x50
 800390a:	d03c      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xfa>
 800390c:	2b50      	cmp	r3, #80	; 0x50
 800390e:	d873      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d058      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d86f      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b30      	cmp	r3, #48	; 0x30
 800391a:	d064      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0x15a>
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d86b      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d060      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d867      	bhi.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05c      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0x15a>
 800392c:	2b10      	cmp	r3, #16
 800392e:	d05a      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	e062      	b.n	80039f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003942:	f000 facc 	bl	8003ede <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	609a      	str	r2, [r3, #8]
      break;
 800395e:	e04f      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003970:	f000 fab5 	bl	8003ede <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003982:	609a      	str	r2, [r3, #8]
      break;
 8003984:	e03c      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	461a      	mov	r2, r3
 8003994:	f000 fa2c 	bl	8003df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2150      	movs	r1, #80	; 0x50
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fa83 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 80039a4:	e02c      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 fa4a 	bl	8003e4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2160      	movs	r1, #96	; 0x60
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa73 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 80039c4:	e01c      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d2:	461a      	mov	r2, r3
 80039d4:	f000 fa0c 	bl	8003df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2140      	movs	r1, #64	; 0x40
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fa63 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 80039e4:	e00c      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f000 fa5a 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 80039f6:	e003      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      break;
 80039fc:	e000      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a29      	ldr	r2, [pc, #164]	; (8003ad4 <TIM_Base_SetConfig+0xb8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_Base_SetConfig+0x30>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d007      	beq.n	8003a4c <TIM_Base_SetConfig+0x30>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <TIM_Base_SetConfig+0xbc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0x30>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <TIM_Base_SetConfig+0xc0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d108      	bne.n	8003a5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <TIM_Base_SetConfig+0xb8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <TIM_Base_SetConfig+0x62>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d007      	beq.n	8003a7e <TIM_Base_SetConfig+0x62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <TIM_Base_SetConfig+0xbc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_Base_SetConfig+0x62>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <TIM_Base_SetConfig+0xc0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d108      	bne.n	8003a90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <TIM_Base_SetConfig+0xb8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d103      	bne.n	8003ac4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	615a      	str	r2, [r3, #20]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800

08003ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 0201 	bic.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 0302 	bic.w	r3, r3, #2
 8003b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <TIM_OC1_SetConfig+0xc8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10c      	bne.n	8003b56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0308 	bic.w	r3, r3, #8
 8003b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <TIM_OC1_SetConfig+0xc8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d111      	bne.n	8003b82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00

08003bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f023 0210 	bic.w	r2, r3, #16
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0320 	bic.w	r3, r3, #32
 8003bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <TIM_OC2_SetConfig+0xd0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d10d      	bne.n	8003c28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <TIM_OC2_SetConfig+0xd0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d113      	bne.n	8003c58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00

08003c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <TIM_OC3_SetConfig+0xd0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10d      	bne.n	8003cfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <TIM_OC3_SetConfig+0xd0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d113      	bne.n	8003d2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	621a      	str	r2, [r3, #32]
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40012c00 	.word	0x40012c00

08003d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	031b      	lsls	r3, r3, #12
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <TIM_OC4_SetConfig+0x98>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d109      	bne.n	8003dc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40012c00 	.word	0x40012c00

08003df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 030a 	bic.w	r3, r3, #10
 8003e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 0210 	bic.w	r2, r3, #16
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	031b      	lsls	r3, r3, #12
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	621a      	str	r2, [r3, #32]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f043 0307 	orr.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b087      	sub	sp, #28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	021a      	lsls	r2, r3, #8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e046      	b.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d009      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10c      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800

08003fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e042      	b.n	8004070 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fff2 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	; 0x24
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800401a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f82b 	bl	8004078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040b2:	f023 030c 	bic.w	r3, r3, #12
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	430b      	orrs	r3, r1
 80040be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2c      	ldr	r2, [pc, #176]	; (800418c <UART_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7fe fbfa 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	e002      	b.n	80040ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040e8:	f7fe fbe2 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 80040ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	4a22      	ldr	r2, [pc, #136]	; (8004190 <UART_SetConfig+0x118>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	0119      	lsls	r1, r3, #4
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009a      	lsls	r2, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	fbb2 f2f3 	udiv	r2, r2, r3
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <UART_SetConfig+0x118>)
 8004126:	fba3 0302 	umull	r0, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2064      	movs	r0, #100	; 0x64
 800412e:	fb00 f303 	mul.w	r3, r0, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	3332      	adds	r3, #50	; 0x32
 8004138:	4a15      	ldr	r2, [pc, #84]	; (8004190 <UART_SetConfig+0x118>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004144:	4419      	add	r1, r3
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009a      	lsls	r2, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	fbb2 f2f3 	udiv	r2, r2, r3
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <UART_SetConfig+0x118>)
 800415e:	fba3 0302 	umull	r0, r3, r3, r2
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2064      	movs	r0, #100	; 0x64
 8004166:	fb00 f303 	mul.w	r3, r0, r3
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	3332      	adds	r3, #50	; 0x32
 8004170:	4a07      	ldr	r2, [pc, #28]	; (8004190 <UART_SetConfig+0x118>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	440a      	add	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40013800 	.word	0x40013800
 8004190:	51eb851f 	.word	0x51eb851f

08004194 <std>:
 8004194:	2300      	movs	r3, #0
 8004196:	b510      	push	{r4, lr}
 8004198:	4604      	mov	r4, r0
 800419a:	e9c0 3300 	strd	r3, r3, [r0]
 800419e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041a2:	6083      	str	r3, [r0, #8]
 80041a4:	8181      	strh	r1, [r0, #12]
 80041a6:	6643      	str	r3, [r0, #100]	; 0x64
 80041a8:	81c2      	strh	r2, [r0, #14]
 80041aa:	6183      	str	r3, [r0, #24]
 80041ac:	4619      	mov	r1, r3
 80041ae:	2208      	movs	r2, #8
 80041b0:	305c      	adds	r0, #92	; 0x5c
 80041b2:	f000 f9f7 	bl	80045a4 <memset>
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <std+0x58>)
 80041b8:	6224      	str	r4, [r4, #32]
 80041ba:	6263      	str	r3, [r4, #36]	; 0x24
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <std+0x5c>)
 80041be:	62a3      	str	r3, [r4, #40]	; 0x28
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <std+0x60>)
 80041c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <std+0x64>)
 80041c6:	6323      	str	r3, [r4, #48]	; 0x30
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <std+0x68>)
 80041ca:	429c      	cmp	r4, r3
 80041cc:	d006      	beq.n	80041dc <std+0x48>
 80041ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80041d2:	4294      	cmp	r4, r2
 80041d4:	d002      	beq.n	80041dc <std+0x48>
 80041d6:	33d0      	adds	r3, #208	; 0xd0
 80041d8:	429c      	cmp	r4, r3
 80041da:	d105      	bne.n	80041e8 <std+0x54>
 80041dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e4:	f000 ba56 	b.w	8004694 <__retarget_lock_init_recursive>
 80041e8:	bd10      	pop	{r4, pc}
 80041ea:	bf00      	nop
 80041ec:	080043f5 	.word	0x080043f5
 80041f0:	08004417 	.word	0x08004417
 80041f4:	0800444f 	.word	0x0800444f
 80041f8:	08004473 	.word	0x08004473
 80041fc:	20000320 	.word	0x20000320

08004200 <stdio_exit_handler>:
 8004200:	4a02      	ldr	r2, [pc, #8]	; (800420c <stdio_exit_handler+0xc>)
 8004202:	4903      	ldr	r1, [pc, #12]	; (8004210 <stdio_exit_handler+0x10>)
 8004204:	4803      	ldr	r0, [pc, #12]	; (8004214 <stdio_exit_handler+0x14>)
 8004206:	f000 b869 	b.w	80042dc <_fwalk_sglue>
 800420a:	bf00      	nop
 800420c:	2000000c 	.word	0x2000000c
 8004210:	08004f35 	.word	0x08004f35
 8004214:	20000018 	.word	0x20000018

08004218 <cleanup_stdio>:
 8004218:	6841      	ldr	r1, [r0, #4]
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <cleanup_stdio+0x34>)
 800421c:	b510      	push	{r4, lr}
 800421e:	4299      	cmp	r1, r3
 8004220:	4604      	mov	r4, r0
 8004222:	d001      	beq.n	8004228 <cleanup_stdio+0x10>
 8004224:	f000 fe86 	bl	8004f34 <_fflush_r>
 8004228:	68a1      	ldr	r1, [r4, #8]
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <cleanup_stdio+0x38>)
 800422c:	4299      	cmp	r1, r3
 800422e:	d002      	beq.n	8004236 <cleanup_stdio+0x1e>
 8004230:	4620      	mov	r0, r4
 8004232:	f000 fe7f 	bl	8004f34 <_fflush_r>
 8004236:	68e1      	ldr	r1, [r4, #12]
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <cleanup_stdio+0x3c>)
 800423a:	4299      	cmp	r1, r3
 800423c:	d004      	beq.n	8004248 <cleanup_stdio+0x30>
 800423e:	4620      	mov	r0, r4
 8004240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004244:	f000 be76 	b.w	8004f34 <_fflush_r>
 8004248:	bd10      	pop	{r4, pc}
 800424a:	bf00      	nop
 800424c:	20000320 	.word	0x20000320
 8004250:	20000388 	.word	0x20000388
 8004254:	200003f0 	.word	0x200003f0

08004258 <global_stdio_init.part.0>:
 8004258:	b510      	push	{r4, lr}
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <global_stdio_init.part.0+0x30>)
 800425c:	4c0b      	ldr	r4, [pc, #44]	; (800428c <global_stdio_init.part.0+0x34>)
 800425e:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <global_stdio_init.part.0+0x38>)
 8004260:	4620      	mov	r0, r4
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	2104      	movs	r1, #4
 8004266:	2200      	movs	r2, #0
 8004268:	f7ff ff94 	bl	8004194 <std>
 800426c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004270:	2201      	movs	r2, #1
 8004272:	2109      	movs	r1, #9
 8004274:	f7ff ff8e 	bl	8004194 <std>
 8004278:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800427c:	2202      	movs	r2, #2
 800427e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004282:	2112      	movs	r1, #18
 8004284:	f7ff bf86 	b.w	8004194 <std>
 8004288:	20000458 	.word	0x20000458
 800428c:	20000320 	.word	0x20000320
 8004290:	08004201 	.word	0x08004201

08004294 <__sfp_lock_acquire>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__sfp_lock_acquire+0x8>)
 8004296:	f000 b9fe 	b.w	8004696 <__retarget_lock_acquire_recursive>
 800429a:	bf00      	nop
 800429c:	20000461 	.word	0x20000461

080042a0 <__sfp_lock_release>:
 80042a0:	4801      	ldr	r0, [pc, #4]	; (80042a8 <__sfp_lock_release+0x8>)
 80042a2:	f000 b9f9 	b.w	8004698 <__retarget_lock_release_recursive>
 80042a6:	bf00      	nop
 80042a8:	20000461 	.word	0x20000461

080042ac <__sinit>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	4604      	mov	r4, r0
 80042b0:	f7ff fff0 	bl	8004294 <__sfp_lock_acquire>
 80042b4:	6a23      	ldr	r3, [r4, #32]
 80042b6:	b11b      	cbz	r3, 80042c0 <__sinit+0x14>
 80042b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042bc:	f7ff bff0 	b.w	80042a0 <__sfp_lock_release>
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <__sinit+0x28>)
 80042c2:	6223      	str	r3, [r4, #32]
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <__sinit+0x2c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f5      	bne.n	80042b8 <__sinit+0xc>
 80042cc:	f7ff ffc4 	bl	8004258 <global_stdio_init.part.0>
 80042d0:	e7f2      	b.n	80042b8 <__sinit+0xc>
 80042d2:	bf00      	nop
 80042d4:	08004219 	.word	0x08004219
 80042d8:	20000458 	.word	0x20000458

080042dc <_fwalk_sglue>:
 80042dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e0:	4607      	mov	r7, r0
 80042e2:	4688      	mov	r8, r1
 80042e4:	4614      	mov	r4, r2
 80042e6:	2600      	movs	r6, #0
 80042e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042ec:	f1b9 0901 	subs.w	r9, r9, #1
 80042f0:	d505      	bpl.n	80042fe <_fwalk_sglue+0x22>
 80042f2:	6824      	ldr	r4, [r4, #0]
 80042f4:	2c00      	cmp	r4, #0
 80042f6:	d1f7      	bne.n	80042e8 <_fwalk_sglue+0xc>
 80042f8:	4630      	mov	r0, r6
 80042fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042fe:	89ab      	ldrh	r3, [r5, #12]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d907      	bls.n	8004314 <_fwalk_sglue+0x38>
 8004304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004308:	3301      	adds	r3, #1
 800430a:	d003      	beq.n	8004314 <_fwalk_sglue+0x38>
 800430c:	4629      	mov	r1, r5
 800430e:	4638      	mov	r0, r7
 8004310:	47c0      	blx	r8
 8004312:	4306      	orrs	r6, r0
 8004314:	3568      	adds	r5, #104	; 0x68
 8004316:	e7e9      	b.n	80042ec <_fwalk_sglue+0x10>

08004318 <iprintf>:
 8004318:	b40f      	push	{r0, r1, r2, r3}
 800431a:	b507      	push	{r0, r1, r2, lr}
 800431c:	4906      	ldr	r1, [pc, #24]	; (8004338 <iprintf+0x20>)
 800431e:	ab04      	add	r3, sp, #16
 8004320:	6808      	ldr	r0, [r1, #0]
 8004322:	f853 2b04 	ldr.w	r2, [r3], #4
 8004326:	6881      	ldr	r1, [r0, #8]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	f000 fad3 	bl	80048d4 <_vfiprintf_r>
 800432e:	b003      	add	sp, #12
 8004330:	f85d eb04 	ldr.w	lr, [sp], #4
 8004334:	b004      	add	sp, #16
 8004336:	4770      	bx	lr
 8004338:	20000064 	.word	0x20000064

0800433c <_puts_r>:
 800433c:	6a03      	ldr	r3, [r0, #32]
 800433e:	b570      	push	{r4, r5, r6, lr}
 8004340:	4605      	mov	r5, r0
 8004342:	460e      	mov	r6, r1
 8004344:	6884      	ldr	r4, [r0, #8]
 8004346:	b90b      	cbnz	r3, 800434c <_puts_r+0x10>
 8004348:	f7ff ffb0 	bl	80042ac <__sinit>
 800434c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800434e:	07db      	lsls	r3, r3, #31
 8004350:	d405      	bmi.n	800435e <_puts_r+0x22>
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	0598      	lsls	r0, r3, #22
 8004356:	d402      	bmi.n	800435e <_puts_r+0x22>
 8004358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800435a:	f000 f99c 	bl	8004696 <__retarget_lock_acquire_recursive>
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	0719      	lsls	r1, r3, #28
 8004362:	d513      	bpl.n	800438c <_puts_r+0x50>
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	b18b      	cbz	r3, 800438c <_puts_r+0x50>
 8004368:	3e01      	subs	r6, #1
 800436a:	68a3      	ldr	r3, [r4, #8]
 800436c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004370:	3b01      	subs	r3, #1
 8004372:	60a3      	str	r3, [r4, #8]
 8004374:	b9e9      	cbnz	r1, 80043b2 <_puts_r+0x76>
 8004376:	2b00      	cmp	r3, #0
 8004378:	da2e      	bge.n	80043d8 <_puts_r+0x9c>
 800437a:	4622      	mov	r2, r4
 800437c:	210a      	movs	r1, #10
 800437e:	4628      	mov	r0, r5
 8004380:	f000 f87b 	bl	800447a <__swbuf_r>
 8004384:	3001      	adds	r0, #1
 8004386:	d007      	beq.n	8004398 <_puts_r+0x5c>
 8004388:	250a      	movs	r5, #10
 800438a:	e007      	b.n	800439c <_puts_r+0x60>
 800438c:	4621      	mov	r1, r4
 800438e:	4628      	mov	r0, r5
 8004390:	f000 f8b0 	bl	80044f4 <__swsetup_r>
 8004394:	2800      	cmp	r0, #0
 8004396:	d0e7      	beq.n	8004368 <_puts_r+0x2c>
 8004398:	f04f 35ff 	mov.w	r5, #4294967295
 800439c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800439e:	07da      	lsls	r2, r3, #31
 80043a0:	d405      	bmi.n	80043ae <_puts_r+0x72>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	059b      	lsls	r3, r3, #22
 80043a6:	d402      	bmi.n	80043ae <_puts_r+0x72>
 80043a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043aa:	f000 f975 	bl	8004698 <__retarget_lock_release_recursive>
 80043ae:	4628      	mov	r0, r5
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	da04      	bge.n	80043c0 <_puts_r+0x84>
 80043b6:	69a2      	ldr	r2, [r4, #24]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	dc06      	bgt.n	80043ca <_puts_r+0x8e>
 80043bc:	290a      	cmp	r1, #10
 80043be:	d004      	beq.n	80043ca <_puts_r+0x8e>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	6022      	str	r2, [r4, #0]
 80043c6:	7019      	strb	r1, [r3, #0]
 80043c8:	e7cf      	b.n	800436a <_puts_r+0x2e>
 80043ca:	4622      	mov	r2, r4
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 f854 	bl	800447a <__swbuf_r>
 80043d2:	3001      	adds	r0, #1
 80043d4:	d1c9      	bne.n	800436a <_puts_r+0x2e>
 80043d6:	e7df      	b.n	8004398 <_puts_r+0x5c>
 80043d8:	250a      	movs	r5, #10
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	6022      	str	r2, [r4, #0]
 80043e0:	701d      	strb	r5, [r3, #0]
 80043e2:	e7db      	b.n	800439c <_puts_r+0x60>

080043e4 <puts>:
 80043e4:	4b02      	ldr	r3, [pc, #8]	; (80043f0 <puts+0xc>)
 80043e6:	4601      	mov	r1, r0
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f7ff bfa7 	b.w	800433c <_puts_r>
 80043ee:	bf00      	nop
 80043f0:	20000064 	.word	0x20000064

080043f4 <__sread>:
 80043f4:	b510      	push	{r4, lr}
 80043f6:	460c      	mov	r4, r1
 80043f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fc:	f000 f8fc 	bl	80045f8 <_read_r>
 8004400:	2800      	cmp	r0, #0
 8004402:	bfab      	itete	ge
 8004404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004406:	89a3      	ldrhlt	r3, [r4, #12]
 8004408:	181b      	addge	r3, r3, r0
 800440a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800440e:	bfac      	ite	ge
 8004410:	6563      	strge	r3, [r4, #84]	; 0x54
 8004412:	81a3      	strhlt	r3, [r4, #12]
 8004414:	bd10      	pop	{r4, pc}

08004416 <__swrite>:
 8004416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800441a:	461f      	mov	r7, r3
 800441c:	898b      	ldrh	r3, [r1, #12]
 800441e:	4605      	mov	r5, r0
 8004420:	05db      	lsls	r3, r3, #23
 8004422:	460c      	mov	r4, r1
 8004424:	4616      	mov	r6, r2
 8004426:	d505      	bpl.n	8004434 <__swrite+0x1e>
 8004428:	2302      	movs	r3, #2
 800442a:	2200      	movs	r2, #0
 800442c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004430:	f000 f8d0 	bl	80045d4 <_lseek_r>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	4632      	mov	r2, r6
 8004438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800443c:	81a3      	strh	r3, [r4, #12]
 800443e:	4628      	mov	r0, r5
 8004440:	463b      	mov	r3, r7
 8004442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800444a:	f000 b8e7 	b.w	800461c <_write_r>

0800444e <__sseek>:
 800444e:	b510      	push	{r4, lr}
 8004450:	460c      	mov	r4, r1
 8004452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004456:	f000 f8bd 	bl	80045d4 <_lseek_r>
 800445a:	1c43      	adds	r3, r0, #1
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	bf15      	itete	ne
 8004460:	6560      	strne	r0, [r4, #84]	; 0x54
 8004462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800446a:	81a3      	strheq	r3, [r4, #12]
 800446c:	bf18      	it	ne
 800446e:	81a3      	strhne	r3, [r4, #12]
 8004470:	bd10      	pop	{r4, pc}

08004472 <__sclose>:
 8004472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004476:	f000 b89d 	b.w	80045b4 <_close_r>

0800447a <__swbuf_r>:
 800447a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447c:	460e      	mov	r6, r1
 800447e:	4614      	mov	r4, r2
 8004480:	4605      	mov	r5, r0
 8004482:	b118      	cbz	r0, 800448c <__swbuf_r+0x12>
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b90b      	cbnz	r3, 800448c <__swbuf_r+0x12>
 8004488:	f7ff ff10 	bl	80042ac <__sinit>
 800448c:	69a3      	ldr	r3, [r4, #24]
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	89a3      	ldrh	r3, [r4, #12]
 8004492:	071a      	lsls	r2, r3, #28
 8004494:	d525      	bpl.n	80044e2 <__swbuf_r+0x68>
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	b31b      	cbz	r3, 80044e2 <__swbuf_r+0x68>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	6922      	ldr	r2, [r4, #16]
 800449e:	b2f6      	uxtb	r6, r6
 80044a0:	1a98      	subs	r0, r3, r2
 80044a2:	6963      	ldr	r3, [r4, #20]
 80044a4:	4637      	mov	r7, r6
 80044a6:	4283      	cmp	r3, r0
 80044a8:	dc04      	bgt.n	80044b4 <__swbuf_r+0x3a>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 fd41 	bl	8004f34 <_fflush_r>
 80044b2:	b9e0      	cbnz	r0, 80044ee <__swbuf_r+0x74>
 80044b4:	68a3      	ldr	r3, [r4, #8]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	60a3      	str	r3, [r4, #8]
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	6022      	str	r2, [r4, #0]
 80044c0:	701e      	strb	r6, [r3, #0]
 80044c2:	6962      	ldr	r2, [r4, #20]
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d004      	beq.n	80044d4 <__swbuf_r+0x5a>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	07db      	lsls	r3, r3, #31
 80044ce:	d506      	bpl.n	80044de <__swbuf_r+0x64>
 80044d0:	2e0a      	cmp	r6, #10
 80044d2:	d104      	bne.n	80044de <__swbuf_r+0x64>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 fd2c 	bl	8004f34 <_fflush_r>
 80044dc:	b938      	cbnz	r0, 80044ee <__swbuf_r+0x74>
 80044de:	4638      	mov	r0, r7
 80044e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f805 	bl	80044f4 <__swsetup_r>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0d5      	beq.n	800449a <__swbuf_r+0x20>
 80044ee:	f04f 37ff 	mov.w	r7, #4294967295
 80044f2:	e7f4      	b.n	80044de <__swbuf_r+0x64>

080044f4 <__swsetup_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4b2a      	ldr	r3, [pc, #168]	; (80045a0 <__swsetup_r+0xac>)
 80044f8:	4605      	mov	r5, r0
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	460c      	mov	r4, r1
 80044fe:	b118      	cbz	r0, 8004508 <__swsetup_r+0x14>
 8004500:	6a03      	ldr	r3, [r0, #32]
 8004502:	b90b      	cbnz	r3, 8004508 <__swsetup_r+0x14>
 8004504:	f7ff fed2 	bl	80042ac <__sinit>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800450e:	0718      	lsls	r0, r3, #28
 8004510:	d422      	bmi.n	8004558 <__swsetup_r+0x64>
 8004512:	06d9      	lsls	r1, r3, #27
 8004514:	d407      	bmi.n	8004526 <__swsetup_r+0x32>
 8004516:	2309      	movs	r3, #9
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800451e:	f04f 30ff 	mov.w	r0, #4294967295
 8004522:	81a3      	strh	r3, [r4, #12]
 8004524:	e034      	b.n	8004590 <__swsetup_r+0x9c>
 8004526:	0758      	lsls	r0, r3, #29
 8004528:	d512      	bpl.n	8004550 <__swsetup_r+0x5c>
 800452a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800452c:	b141      	cbz	r1, 8004540 <__swsetup_r+0x4c>
 800452e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004532:	4299      	cmp	r1, r3
 8004534:	d002      	beq.n	800453c <__swsetup_r+0x48>
 8004536:	4628      	mov	r0, r5
 8004538:	f000 f8b0 	bl	800469c <_free_r>
 800453c:	2300      	movs	r3, #0
 800453e:	6363      	str	r3, [r4, #52]	; 0x34
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	2300      	movs	r3, #0
 800454a:	6063      	str	r3, [r4, #4]
 800454c:	6923      	ldr	r3, [r4, #16]
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	f043 0308 	orr.w	r3, r3, #8
 8004556:	81a3      	strh	r3, [r4, #12]
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	b94b      	cbnz	r3, 8004570 <__swsetup_r+0x7c>
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004566:	d003      	beq.n	8004570 <__swsetup_r+0x7c>
 8004568:	4621      	mov	r1, r4
 800456a:	4628      	mov	r0, r5
 800456c:	f000 fd2f 	bl	8004fce <__smakebuf_r>
 8004570:	89a0      	ldrh	r0, [r4, #12]
 8004572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004576:	f010 0301 	ands.w	r3, r0, #1
 800457a:	d00a      	beq.n	8004592 <__swsetup_r+0x9e>
 800457c:	2300      	movs	r3, #0
 800457e:	60a3      	str	r3, [r4, #8]
 8004580:	6963      	ldr	r3, [r4, #20]
 8004582:	425b      	negs	r3, r3
 8004584:	61a3      	str	r3, [r4, #24]
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	b943      	cbnz	r3, 800459c <__swsetup_r+0xa8>
 800458a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800458e:	d1c4      	bne.n	800451a <__swsetup_r+0x26>
 8004590:	bd38      	pop	{r3, r4, r5, pc}
 8004592:	0781      	lsls	r1, r0, #30
 8004594:	bf58      	it	pl
 8004596:	6963      	ldrpl	r3, [r4, #20]
 8004598:	60a3      	str	r3, [r4, #8]
 800459a:	e7f4      	b.n	8004586 <__swsetup_r+0x92>
 800459c:	2000      	movs	r0, #0
 800459e:	e7f7      	b.n	8004590 <__swsetup_r+0x9c>
 80045a0:	20000064 	.word	0x20000064

080045a4 <memset>:
 80045a4:	4603      	mov	r3, r0
 80045a6:	4402      	add	r2, r0
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d100      	bne.n	80045ae <memset+0xa>
 80045ac:	4770      	bx	lr
 80045ae:	f803 1b01 	strb.w	r1, [r3], #1
 80045b2:	e7f9      	b.n	80045a8 <memset+0x4>

080045b4 <_close_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	2300      	movs	r3, #0
 80045b8:	4d05      	ldr	r5, [pc, #20]	; (80045d0 <_close_r+0x1c>)
 80045ba:	4604      	mov	r4, r0
 80045bc:	4608      	mov	r0, r1
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	f7fc fe59 	bl	8001276 <_close>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_close_r+0x1a>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_close_r+0x1a>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	2000045c 	.word	0x2000045c

080045d4 <_lseek_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	2200      	movs	r2, #0
 80045de:	4d05      	ldr	r5, [pc, #20]	; (80045f4 <_lseek_r+0x20>)
 80045e0:	602a      	str	r2, [r5, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f7fc fe6b 	bl	80012be <_lseek>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d102      	bne.n	80045f2 <_lseek_r+0x1e>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	b103      	cbz	r3, 80045f2 <_lseek_r+0x1e>
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	2000045c 	.word	0x2000045c

080045f8 <_read_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4604      	mov	r4, r0
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	2200      	movs	r2, #0
 8004602:	4d05      	ldr	r5, [pc, #20]	; (8004618 <_read_r+0x20>)
 8004604:	602a      	str	r2, [r5, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	f7fc fe18 	bl	800123c <_read>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_read_r+0x1e>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	b103      	cbz	r3, 8004616 <_read_r+0x1e>
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	2000045c 	.word	0x2000045c

0800461c <_write_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4604      	mov	r4, r0
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	2200      	movs	r2, #0
 8004626:	4d05      	ldr	r5, [pc, #20]	; (800463c <_write_r+0x20>)
 8004628:	602a      	str	r2, [r5, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	f7fc fb46 	bl	8000cbc <_write>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_write_r+0x1e>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_write_r+0x1e>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	2000045c 	.word	0x2000045c

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000064 	.word	0x20000064

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	2600      	movs	r6, #0
 8004650:	4d0c      	ldr	r5, [pc, #48]	; (8004684 <__libc_init_array+0x38>)
 8004652:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004654:	1b64      	subs	r4, r4, r5
 8004656:	10a4      	asrs	r4, r4, #2
 8004658:	42a6      	cmp	r6, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	f000 fd34 	bl	80050c8 <_init>
 8004660:	2600      	movs	r6, #0
 8004662:	4d0a      	ldr	r5, [pc, #40]	; (800468c <__libc_init_array+0x40>)
 8004664:	4c0a      	ldr	r4, [pc, #40]	; (8004690 <__libc_init_array+0x44>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	42a6      	cmp	r6, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f855 3b04 	ldr.w	r3, [r5], #4
 8004674:	4798      	blx	r3
 8004676:	3601      	adds	r6, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f855 3b04 	ldr.w	r3, [r5], #4
 800467e:	4798      	blx	r3
 8004680:	3601      	adds	r6, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	08005180 	.word	0x08005180
 8004688:	08005180 	.word	0x08005180
 800468c:	08005180 	.word	0x08005180
 8004690:	08005184 	.word	0x08005184

08004694 <__retarget_lock_init_recursive>:
 8004694:	4770      	bx	lr

08004696 <__retarget_lock_acquire_recursive>:
 8004696:	4770      	bx	lr

08004698 <__retarget_lock_release_recursive>:
 8004698:	4770      	bx	lr
	...

0800469c <_free_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4605      	mov	r5, r0
 80046a0:	2900      	cmp	r1, #0
 80046a2:	d040      	beq.n	8004726 <_free_r+0x8a>
 80046a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a8:	1f0c      	subs	r4, r1, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfb8      	it	lt
 80046ae:	18e4      	addlt	r4, r4, r3
 80046b0:	f000 f8dc 	bl	800486c <__malloc_lock>
 80046b4:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <_free_r+0x8c>)
 80046b6:	6813      	ldr	r3, [r2, #0]
 80046b8:	b933      	cbnz	r3, 80046c8 <_free_r+0x2c>
 80046ba:	6063      	str	r3, [r4, #4]
 80046bc:	6014      	str	r4, [r2, #0]
 80046be:	4628      	mov	r0, r5
 80046c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c4:	f000 b8d8 	b.w	8004878 <__malloc_unlock>
 80046c8:	42a3      	cmp	r3, r4
 80046ca:	d908      	bls.n	80046de <_free_r+0x42>
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	1821      	adds	r1, r4, r0
 80046d0:	428b      	cmp	r3, r1
 80046d2:	bf01      	itttt	eq
 80046d4:	6819      	ldreq	r1, [r3, #0]
 80046d6:	685b      	ldreq	r3, [r3, #4]
 80046d8:	1809      	addeq	r1, r1, r0
 80046da:	6021      	streq	r1, [r4, #0]
 80046dc:	e7ed      	b.n	80046ba <_free_r+0x1e>
 80046de:	461a      	mov	r2, r3
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	b10b      	cbz	r3, 80046e8 <_free_r+0x4c>
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	d9fa      	bls.n	80046de <_free_r+0x42>
 80046e8:	6811      	ldr	r1, [r2, #0]
 80046ea:	1850      	adds	r0, r2, r1
 80046ec:	42a0      	cmp	r0, r4
 80046ee:	d10b      	bne.n	8004708 <_free_r+0x6c>
 80046f0:	6820      	ldr	r0, [r4, #0]
 80046f2:	4401      	add	r1, r0
 80046f4:	1850      	adds	r0, r2, r1
 80046f6:	4283      	cmp	r3, r0
 80046f8:	6011      	str	r1, [r2, #0]
 80046fa:	d1e0      	bne.n	80046be <_free_r+0x22>
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4408      	add	r0, r1
 8004702:	6010      	str	r0, [r2, #0]
 8004704:	6053      	str	r3, [r2, #4]
 8004706:	e7da      	b.n	80046be <_free_r+0x22>
 8004708:	d902      	bls.n	8004710 <_free_r+0x74>
 800470a:	230c      	movs	r3, #12
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	e7d6      	b.n	80046be <_free_r+0x22>
 8004710:	6820      	ldr	r0, [r4, #0]
 8004712:	1821      	adds	r1, r4, r0
 8004714:	428b      	cmp	r3, r1
 8004716:	bf01      	itttt	eq
 8004718:	6819      	ldreq	r1, [r3, #0]
 800471a:	685b      	ldreq	r3, [r3, #4]
 800471c:	1809      	addeq	r1, r1, r0
 800471e:	6021      	streq	r1, [r4, #0]
 8004720:	6063      	str	r3, [r4, #4]
 8004722:	6054      	str	r4, [r2, #4]
 8004724:	e7cb      	b.n	80046be <_free_r+0x22>
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000464 	.word	0x20000464

0800472c <sbrk_aligned>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4e0e      	ldr	r6, [pc, #56]	; (8004768 <sbrk_aligned+0x3c>)
 8004730:	460c      	mov	r4, r1
 8004732:	6831      	ldr	r1, [r6, #0]
 8004734:	4605      	mov	r5, r0
 8004736:	b911      	cbnz	r1, 800473e <sbrk_aligned+0x12>
 8004738:	f000 fca8 	bl	800508c <_sbrk_r>
 800473c:	6030      	str	r0, [r6, #0]
 800473e:	4621      	mov	r1, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f000 fca3 	bl	800508c <_sbrk_r>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	d00a      	beq.n	8004760 <sbrk_aligned+0x34>
 800474a:	1cc4      	adds	r4, r0, #3
 800474c:	f024 0403 	bic.w	r4, r4, #3
 8004750:	42a0      	cmp	r0, r4
 8004752:	d007      	beq.n	8004764 <sbrk_aligned+0x38>
 8004754:	1a21      	subs	r1, r4, r0
 8004756:	4628      	mov	r0, r5
 8004758:	f000 fc98 	bl	800508c <_sbrk_r>
 800475c:	3001      	adds	r0, #1
 800475e:	d101      	bne.n	8004764 <sbrk_aligned+0x38>
 8004760:	f04f 34ff 	mov.w	r4, #4294967295
 8004764:	4620      	mov	r0, r4
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	20000468 	.word	0x20000468

0800476c <_malloc_r>:
 800476c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004770:	1ccd      	adds	r5, r1, #3
 8004772:	f025 0503 	bic.w	r5, r5, #3
 8004776:	3508      	adds	r5, #8
 8004778:	2d0c      	cmp	r5, #12
 800477a:	bf38      	it	cc
 800477c:	250c      	movcc	r5, #12
 800477e:	2d00      	cmp	r5, #0
 8004780:	4607      	mov	r7, r0
 8004782:	db01      	blt.n	8004788 <_malloc_r+0x1c>
 8004784:	42a9      	cmp	r1, r5
 8004786:	d905      	bls.n	8004794 <_malloc_r+0x28>
 8004788:	230c      	movs	r3, #12
 800478a:	2600      	movs	r6, #0
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4630      	mov	r0, r6
 8004790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004868 <_malloc_r+0xfc>
 8004798:	f000 f868 	bl	800486c <__malloc_lock>
 800479c:	f8d8 3000 	ldr.w	r3, [r8]
 80047a0:	461c      	mov	r4, r3
 80047a2:	bb5c      	cbnz	r4, 80047fc <_malloc_r+0x90>
 80047a4:	4629      	mov	r1, r5
 80047a6:	4638      	mov	r0, r7
 80047a8:	f7ff ffc0 	bl	800472c <sbrk_aligned>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	4604      	mov	r4, r0
 80047b0:	d155      	bne.n	800485e <_malloc_r+0xf2>
 80047b2:	f8d8 4000 	ldr.w	r4, [r8]
 80047b6:	4626      	mov	r6, r4
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	d145      	bne.n	8004848 <_malloc_r+0xdc>
 80047bc:	2c00      	cmp	r4, #0
 80047be:	d048      	beq.n	8004852 <_malloc_r+0xe6>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	4631      	mov	r1, r6
 80047c4:	4638      	mov	r0, r7
 80047c6:	eb04 0903 	add.w	r9, r4, r3
 80047ca:	f000 fc5f 	bl	800508c <_sbrk_r>
 80047ce:	4581      	cmp	r9, r0
 80047d0:	d13f      	bne.n	8004852 <_malloc_r+0xe6>
 80047d2:	6821      	ldr	r1, [r4, #0]
 80047d4:	4638      	mov	r0, r7
 80047d6:	1a6d      	subs	r5, r5, r1
 80047d8:	4629      	mov	r1, r5
 80047da:	f7ff ffa7 	bl	800472c <sbrk_aligned>
 80047de:	3001      	adds	r0, #1
 80047e0:	d037      	beq.n	8004852 <_malloc_r+0xe6>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	442b      	add	r3, r5
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	f8d8 3000 	ldr.w	r3, [r8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d038      	beq.n	8004862 <_malloc_r+0xf6>
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	42a2      	cmp	r2, r4
 80047f4:	d12b      	bne.n	800484e <_malloc_r+0xe2>
 80047f6:	2200      	movs	r2, #0
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	e00f      	b.n	800481c <_malloc_r+0xb0>
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	1b52      	subs	r2, r2, r5
 8004800:	d41f      	bmi.n	8004842 <_malloc_r+0xd6>
 8004802:	2a0b      	cmp	r2, #11
 8004804:	d917      	bls.n	8004836 <_malloc_r+0xca>
 8004806:	1961      	adds	r1, r4, r5
 8004808:	42a3      	cmp	r3, r4
 800480a:	6025      	str	r5, [r4, #0]
 800480c:	bf18      	it	ne
 800480e:	6059      	strne	r1, [r3, #4]
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	bf08      	it	eq
 8004814:	f8c8 1000 	streq.w	r1, [r8]
 8004818:	5162      	str	r2, [r4, r5]
 800481a:	604b      	str	r3, [r1, #4]
 800481c:	4638      	mov	r0, r7
 800481e:	f104 060b 	add.w	r6, r4, #11
 8004822:	f000 f829 	bl	8004878 <__malloc_unlock>
 8004826:	f026 0607 	bic.w	r6, r6, #7
 800482a:	1d23      	adds	r3, r4, #4
 800482c:	1af2      	subs	r2, r6, r3
 800482e:	d0ae      	beq.n	800478e <_malloc_r+0x22>
 8004830:	1b9b      	subs	r3, r3, r6
 8004832:	50a3      	str	r3, [r4, r2]
 8004834:	e7ab      	b.n	800478e <_malloc_r+0x22>
 8004836:	42a3      	cmp	r3, r4
 8004838:	6862      	ldr	r2, [r4, #4]
 800483a:	d1dd      	bne.n	80047f8 <_malloc_r+0x8c>
 800483c:	f8c8 2000 	str.w	r2, [r8]
 8004840:	e7ec      	b.n	800481c <_malloc_r+0xb0>
 8004842:	4623      	mov	r3, r4
 8004844:	6864      	ldr	r4, [r4, #4]
 8004846:	e7ac      	b.n	80047a2 <_malloc_r+0x36>
 8004848:	4634      	mov	r4, r6
 800484a:	6876      	ldr	r6, [r6, #4]
 800484c:	e7b4      	b.n	80047b8 <_malloc_r+0x4c>
 800484e:	4613      	mov	r3, r2
 8004850:	e7cc      	b.n	80047ec <_malloc_r+0x80>
 8004852:	230c      	movs	r3, #12
 8004854:	4638      	mov	r0, r7
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	f000 f80e 	bl	8004878 <__malloc_unlock>
 800485c:	e797      	b.n	800478e <_malloc_r+0x22>
 800485e:	6025      	str	r5, [r4, #0]
 8004860:	e7dc      	b.n	800481c <_malloc_r+0xb0>
 8004862:	605b      	str	r3, [r3, #4]
 8004864:	deff      	udf	#255	; 0xff
 8004866:	bf00      	nop
 8004868:	20000464 	.word	0x20000464

0800486c <__malloc_lock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_lock+0x8>)
 800486e:	f7ff bf12 	b.w	8004696 <__retarget_lock_acquire_recursive>
 8004872:	bf00      	nop
 8004874:	20000460 	.word	0x20000460

08004878 <__malloc_unlock>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__malloc_unlock+0x8>)
 800487a:	f7ff bf0d 	b.w	8004698 <__retarget_lock_release_recursive>
 800487e:	bf00      	nop
 8004880:	20000460 	.word	0x20000460

08004884 <__sfputc_r>:
 8004884:	6893      	ldr	r3, [r2, #8]
 8004886:	b410      	push	{r4}
 8004888:	3b01      	subs	r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	6093      	str	r3, [r2, #8]
 800488e:	da07      	bge.n	80048a0 <__sfputc_r+0x1c>
 8004890:	6994      	ldr	r4, [r2, #24]
 8004892:	42a3      	cmp	r3, r4
 8004894:	db01      	blt.n	800489a <__sfputc_r+0x16>
 8004896:	290a      	cmp	r1, #10
 8004898:	d102      	bne.n	80048a0 <__sfputc_r+0x1c>
 800489a:	bc10      	pop	{r4}
 800489c:	f7ff bded 	b.w	800447a <__swbuf_r>
 80048a0:	6813      	ldr	r3, [r2, #0]
 80048a2:	1c58      	adds	r0, r3, #1
 80048a4:	6010      	str	r0, [r2, #0]
 80048a6:	7019      	strb	r1, [r3, #0]
 80048a8:	4608      	mov	r0, r1
 80048aa:	bc10      	pop	{r4}
 80048ac:	4770      	bx	lr

080048ae <__sfputs_r>:
 80048ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b0:	4606      	mov	r6, r0
 80048b2:	460f      	mov	r7, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	18d5      	adds	r5, r2, r3
 80048b8:	42ac      	cmp	r4, r5
 80048ba:	d101      	bne.n	80048c0 <__sfputs_r+0x12>
 80048bc:	2000      	movs	r0, #0
 80048be:	e007      	b.n	80048d0 <__sfputs_r+0x22>
 80048c0:	463a      	mov	r2, r7
 80048c2:	4630      	mov	r0, r6
 80048c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c8:	f7ff ffdc 	bl	8004884 <__sfputc_r>
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	d1f3      	bne.n	80048b8 <__sfputs_r+0xa>
 80048d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048d4 <_vfiprintf_r>:
 80048d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d8:	460d      	mov	r5, r1
 80048da:	4614      	mov	r4, r2
 80048dc:	4698      	mov	r8, r3
 80048de:	4606      	mov	r6, r0
 80048e0:	b09d      	sub	sp, #116	; 0x74
 80048e2:	b118      	cbz	r0, 80048ec <_vfiprintf_r+0x18>
 80048e4:	6a03      	ldr	r3, [r0, #32]
 80048e6:	b90b      	cbnz	r3, 80048ec <_vfiprintf_r+0x18>
 80048e8:	f7ff fce0 	bl	80042ac <__sinit>
 80048ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048ee:	07d9      	lsls	r1, r3, #31
 80048f0:	d405      	bmi.n	80048fe <_vfiprintf_r+0x2a>
 80048f2:	89ab      	ldrh	r3, [r5, #12]
 80048f4:	059a      	lsls	r2, r3, #22
 80048f6:	d402      	bmi.n	80048fe <_vfiprintf_r+0x2a>
 80048f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048fa:	f7ff fecc 	bl	8004696 <__retarget_lock_acquire_recursive>
 80048fe:	89ab      	ldrh	r3, [r5, #12]
 8004900:	071b      	lsls	r3, r3, #28
 8004902:	d501      	bpl.n	8004908 <_vfiprintf_r+0x34>
 8004904:	692b      	ldr	r3, [r5, #16]
 8004906:	b99b      	cbnz	r3, 8004930 <_vfiprintf_r+0x5c>
 8004908:	4629      	mov	r1, r5
 800490a:	4630      	mov	r0, r6
 800490c:	f7ff fdf2 	bl	80044f4 <__swsetup_r>
 8004910:	b170      	cbz	r0, 8004930 <_vfiprintf_r+0x5c>
 8004912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004914:	07dc      	lsls	r4, r3, #31
 8004916:	d504      	bpl.n	8004922 <_vfiprintf_r+0x4e>
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	b01d      	add	sp, #116	; 0x74
 800491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	0598      	lsls	r0, r3, #22
 8004926:	d4f7      	bmi.n	8004918 <_vfiprintf_r+0x44>
 8004928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800492a:	f7ff feb5 	bl	8004698 <__retarget_lock_release_recursive>
 800492e:	e7f3      	b.n	8004918 <_vfiprintf_r+0x44>
 8004930:	2300      	movs	r3, #0
 8004932:	9309      	str	r3, [sp, #36]	; 0x24
 8004934:	2320      	movs	r3, #32
 8004936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800493a:	2330      	movs	r3, #48	; 0x30
 800493c:	f04f 0901 	mov.w	r9, #1
 8004940:	f8cd 800c 	str.w	r8, [sp, #12]
 8004944:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004af4 <_vfiprintf_r+0x220>
 8004948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800494c:	4623      	mov	r3, r4
 800494e:	469a      	mov	sl, r3
 8004950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004954:	b10a      	cbz	r2, 800495a <_vfiprintf_r+0x86>
 8004956:	2a25      	cmp	r2, #37	; 0x25
 8004958:	d1f9      	bne.n	800494e <_vfiprintf_r+0x7a>
 800495a:	ebba 0b04 	subs.w	fp, sl, r4
 800495e:	d00b      	beq.n	8004978 <_vfiprintf_r+0xa4>
 8004960:	465b      	mov	r3, fp
 8004962:	4622      	mov	r2, r4
 8004964:	4629      	mov	r1, r5
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff ffa1 	bl	80048ae <__sfputs_r>
 800496c:	3001      	adds	r0, #1
 800496e:	f000 80a9 	beq.w	8004ac4 <_vfiprintf_r+0x1f0>
 8004972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004974:	445a      	add	r2, fp
 8004976:	9209      	str	r2, [sp, #36]	; 0x24
 8004978:	f89a 3000 	ldrb.w	r3, [sl]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a1 	beq.w	8004ac4 <_vfiprintf_r+0x1f0>
 8004982:	2300      	movs	r3, #0
 8004984:	f04f 32ff 	mov.w	r2, #4294967295
 8004988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498c:	f10a 0a01 	add.w	sl, sl, #1
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	9307      	str	r3, [sp, #28]
 8004994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004998:	931a      	str	r3, [sp, #104]	; 0x68
 800499a:	4654      	mov	r4, sl
 800499c:	2205      	movs	r2, #5
 800499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a2:	4854      	ldr	r0, [pc, #336]	; (8004af4 <_vfiprintf_r+0x220>)
 80049a4:	f000 fb82 	bl	80050ac <memchr>
 80049a8:	9a04      	ldr	r2, [sp, #16]
 80049aa:	b9d8      	cbnz	r0, 80049e4 <_vfiprintf_r+0x110>
 80049ac:	06d1      	lsls	r1, r2, #27
 80049ae:	bf44      	itt	mi
 80049b0:	2320      	movmi	r3, #32
 80049b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b6:	0713      	lsls	r3, r2, #28
 80049b8:	bf44      	itt	mi
 80049ba:	232b      	movmi	r3, #43	; 0x2b
 80049bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c0:	f89a 3000 	ldrb.w	r3, [sl]
 80049c4:	2b2a      	cmp	r3, #42	; 0x2a
 80049c6:	d015      	beq.n	80049f4 <_vfiprintf_r+0x120>
 80049c8:	4654      	mov	r4, sl
 80049ca:	2000      	movs	r0, #0
 80049cc:	f04f 0c0a 	mov.w	ip, #10
 80049d0:	9a07      	ldr	r2, [sp, #28]
 80049d2:	4621      	mov	r1, r4
 80049d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d8:	3b30      	subs	r3, #48	; 0x30
 80049da:	2b09      	cmp	r3, #9
 80049dc:	d94d      	bls.n	8004a7a <_vfiprintf_r+0x1a6>
 80049de:	b1b0      	cbz	r0, 8004a0e <_vfiprintf_r+0x13a>
 80049e0:	9207      	str	r2, [sp, #28]
 80049e2:	e014      	b.n	8004a0e <_vfiprintf_r+0x13a>
 80049e4:	eba0 0308 	sub.w	r3, r0, r8
 80049e8:	fa09 f303 	lsl.w	r3, r9, r3
 80049ec:	4313      	orrs	r3, r2
 80049ee:	46a2      	mov	sl, r4
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	e7d2      	b.n	800499a <_vfiprintf_r+0xc6>
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	1d19      	adds	r1, r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	9103      	str	r1, [sp, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bfbb      	ittet	lt
 8004a00:	425b      	neglt	r3, r3
 8004a02:	f042 0202 	orrlt.w	r2, r2, #2
 8004a06:	9307      	strge	r3, [sp, #28]
 8004a08:	9307      	strlt	r3, [sp, #28]
 8004a0a:	bfb8      	it	lt
 8004a0c:	9204      	strlt	r2, [sp, #16]
 8004a0e:	7823      	ldrb	r3, [r4, #0]
 8004a10:	2b2e      	cmp	r3, #46	; 0x2e
 8004a12:	d10c      	bne.n	8004a2e <_vfiprintf_r+0x15a>
 8004a14:	7863      	ldrb	r3, [r4, #1]
 8004a16:	2b2a      	cmp	r3, #42	; 0x2a
 8004a18:	d134      	bne.n	8004a84 <_vfiprintf_r+0x1b0>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	3402      	adds	r4, #2
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	9203      	str	r2, [sp, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bfb8      	it	lt
 8004a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a2c:	9305      	str	r3, [sp, #20]
 8004a2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004af8 <_vfiprintf_r+0x224>
 8004a32:	2203      	movs	r2, #3
 8004a34:	4650      	mov	r0, sl
 8004a36:	7821      	ldrb	r1, [r4, #0]
 8004a38:	f000 fb38 	bl	80050ac <memchr>
 8004a3c:	b138      	cbz	r0, 8004a4e <_vfiprintf_r+0x17a>
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	9b04      	ldr	r3, [sp, #16]
 8004a42:	eba0 000a 	sub.w	r0, r0, sl
 8004a46:	4082      	lsls	r2, r0
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a52:	2206      	movs	r2, #6
 8004a54:	4829      	ldr	r0, [pc, #164]	; (8004afc <_vfiprintf_r+0x228>)
 8004a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a5a:	f000 fb27 	bl	80050ac <memchr>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d03f      	beq.n	8004ae2 <_vfiprintf_r+0x20e>
 8004a62:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <_vfiprintf_r+0x22c>)
 8004a64:	bb1b      	cbnz	r3, 8004aae <_vfiprintf_r+0x1da>
 8004a66:	9b03      	ldr	r3, [sp, #12]
 8004a68:	3307      	adds	r3, #7
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	3308      	adds	r3, #8
 8004a70:	9303      	str	r3, [sp, #12]
 8004a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a74:	443b      	add	r3, r7
 8004a76:	9309      	str	r3, [sp, #36]	; 0x24
 8004a78:	e768      	b.n	800494c <_vfiprintf_r+0x78>
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a82:	e7a6      	b.n	80049d2 <_vfiprintf_r+0xfe>
 8004a84:	2300      	movs	r3, #0
 8004a86:	f04f 0c0a 	mov.w	ip, #10
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	3401      	adds	r4, #1
 8004a8e:	9305      	str	r3, [sp, #20]
 8004a90:	4620      	mov	r0, r4
 8004a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a96:	3a30      	subs	r2, #48	; 0x30
 8004a98:	2a09      	cmp	r2, #9
 8004a9a:	d903      	bls.n	8004aa4 <_vfiprintf_r+0x1d0>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0c6      	beq.n	8004a2e <_vfiprintf_r+0x15a>
 8004aa0:	9105      	str	r1, [sp, #20]
 8004aa2:	e7c4      	b.n	8004a2e <_vfiprintf_r+0x15a>
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aac:	e7f0      	b.n	8004a90 <_vfiprintf_r+0x1bc>
 8004aae:	ab03      	add	r3, sp, #12
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <_vfiprintf_r+0x230>)
 8004ab8:	a904      	add	r1, sp, #16
 8004aba:	f3af 8000 	nop.w
 8004abe:	4607      	mov	r7, r0
 8004ac0:	1c78      	adds	r0, r7, #1
 8004ac2:	d1d6      	bne.n	8004a72 <_vfiprintf_r+0x19e>
 8004ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ac6:	07d9      	lsls	r1, r3, #31
 8004ac8:	d405      	bmi.n	8004ad6 <_vfiprintf_r+0x202>
 8004aca:	89ab      	ldrh	r3, [r5, #12]
 8004acc:	059a      	lsls	r2, r3, #22
 8004ace:	d402      	bmi.n	8004ad6 <_vfiprintf_r+0x202>
 8004ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ad2:	f7ff fde1 	bl	8004698 <__retarget_lock_release_recursive>
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	065b      	lsls	r3, r3, #25
 8004ada:	f53f af1d 	bmi.w	8004918 <_vfiprintf_r+0x44>
 8004ade:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ae0:	e71c      	b.n	800491c <_vfiprintf_r+0x48>
 8004ae2:	ab03      	add	r3, sp, #12
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	462a      	mov	r2, r5
 8004ae8:	4630      	mov	r0, r6
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <_vfiprintf_r+0x230>)
 8004aec:	a904      	add	r1, sp, #16
 8004aee:	f000 f87d 	bl	8004bec <_printf_i>
 8004af2:	e7e4      	b.n	8004abe <_vfiprintf_r+0x1ea>
 8004af4:	0800514a 	.word	0x0800514a
 8004af8:	08005150 	.word	0x08005150
 8004afc:	08005154 	.word	0x08005154
 8004b00:	00000000 	.word	0x00000000
 8004b04:	080048af 	.word	0x080048af

08004b08 <_printf_common>:
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	4699      	mov	r9, r3
 8004b10:	688a      	ldr	r2, [r1, #8]
 8004b12:	690b      	ldr	r3, [r1, #16]
 8004b14:	4607      	mov	r7, r0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfb8      	it	lt
 8004b1a:	4613      	movlt	r3, r2
 8004b1c:	6033      	str	r3, [r6, #0]
 8004b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b22:	460c      	mov	r4, r1
 8004b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b28:	b10a      	cbz	r2, 8004b2e <_printf_common+0x26>
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	0699      	lsls	r1, r3, #26
 8004b32:	bf42      	ittt	mi
 8004b34:	6833      	ldrmi	r3, [r6, #0]
 8004b36:	3302      	addmi	r3, #2
 8004b38:	6033      	strmi	r3, [r6, #0]
 8004b3a:	6825      	ldr	r5, [r4, #0]
 8004b3c:	f015 0506 	ands.w	r5, r5, #6
 8004b40:	d106      	bne.n	8004b50 <_printf_common+0x48>
 8004b42:	f104 0a19 	add.w	sl, r4, #25
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	6832      	ldr	r2, [r6, #0]
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dc2b      	bgt.n	8004ba8 <_printf_common+0xa0>
 8004b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b54:	1e13      	subs	r3, r2, #0
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	bf18      	it	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	0692      	lsls	r2, r2, #26
 8004b5e:	d430      	bmi.n	8004bc2 <_printf_common+0xba>
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d023      	beq.n	8004bb6 <_printf_common+0xae>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	6922      	ldr	r2, [r4, #16]
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	bf14      	ite	ne
 8004b7a:	2500      	movne	r5, #0
 8004b7c:	6833      	ldreq	r3, [r6, #0]
 8004b7e:	f04f 0600 	mov.w	r6, #0
 8004b82:	bf08      	it	eq
 8004b84:	68e5      	ldreq	r5, [r4, #12]
 8004b86:	f104 041a 	add.w	r4, r4, #26
 8004b8a:	bf08      	it	eq
 8004b8c:	1aed      	subeq	r5, r5, r3
 8004b8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b92:	bf08      	it	eq
 8004b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	bfc4      	itt	gt
 8004b9c:	1a9b      	subgt	r3, r3, r2
 8004b9e:	18ed      	addgt	r5, r5, r3
 8004ba0:	42b5      	cmp	r5, r6
 8004ba2:	d11a      	bne.n	8004bda <_printf_common+0xd2>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e008      	b.n	8004bba <_printf_common+0xb2>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4652      	mov	r2, sl
 8004bac:	4649      	mov	r1, r9
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c0      	blx	r8
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d103      	bne.n	8004bbe <_printf_common+0xb6>
 8004bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	e7c1      	b.n	8004b46 <_printf_common+0x3e>
 8004bc2:	2030      	movs	r0, #48	; 0x30
 8004bc4:	18e1      	adds	r1, r4, r3
 8004bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd0:	4422      	add	r2, r4
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd8:	e7c2      	b.n	8004b60 <_printf_common+0x58>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4622      	mov	r2, r4
 8004bde:	4649      	mov	r1, r9
 8004be0:	4638      	mov	r0, r7
 8004be2:	47c0      	blx	r8
 8004be4:	3001      	adds	r0, #1
 8004be6:	d0e6      	beq.n	8004bb6 <_printf_common+0xae>
 8004be8:	3601      	adds	r6, #1
 8004bea:	e7d9      	b.n	8004ba0 <_printf_common+0x98>

08004bec <_printf_i>:
 8004bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	7e0f      	ldrb	r7, [r1, #24]
 8004bf2:	4691      	mov	r9, r2
 8004bf4:	2f78      	cmp	r7, #120	; 0x78
 8004bf6:	4680      	mov	r8, r0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	469a      	mov	sl, r3
 8004bfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c02:	d807      	bhi.n	8004c14 <_printf_i+0x28>
 8004c04:	2f62      	cmp	r7, #98	; 0x62
 8004c06:	d80a      	bhi.n	8004c1e <_printf_i+0x32>
 8004c08:	2f00      	cmp	r7, #0
 8004c0a:	f000 80d5 	beq.w	8004db8 <_printf_i+0x1cc>
 8004c0e:	2f58      	cmp	r7, #88	; 0x58
 8004c10:	f000 80c1 	beq.w	8004d96 <_printf_i+0x1aa>
 8004c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c1c:	e03a      	b.n	8004c94 <_printf_i+0xa8>
 8004c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c22:	2b15      	cmp	r3, #21
 8004c24:	d8f6      	bhi.n	8004c14 <_printf_i+0x28>
 8004c26:	a101      	add	r1, pc, #4	; (adr r1, 8004c2c <_printf_i+0x40>)
 8004c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c2c:	08004c85 	.word	0x08004c85
 8004c30:	08004c99 	.word	0x08004c99
 8004c34:	08004c15 	.word	0x08004c15
 8004c38:	08004c15 	.word	0x08004c15
 8004c3c:	08004c15 	.word	0x08004c15
 8004c40:	08004c15 	.word	0x08004c15
 8004c44:	08004c99 	.word	0x08004c99
 8004c48:	08004c15 	.word	0x08004c15
 8004c4c:	08004c15 	.word	0x08004c15
 8004c50:	08004c15 	.word	0x08004c15
 8004c54:	08004c15 	.word	0x08004c15
 8004c58:	08004d9f 	.word	0x08004d9f
 8004c5c:	08004cc5 	.word	0x08004cc5
 8004c60:	08004d59 	.word	0x08004d59
 8004c64:	08004c15 	.word	0x08004c15
 8004c68:	08004c15 	.word	0x08004c15
 8004c6c:	08004dc1 	.word	0x08004dc1
 8004c70:	08004c15 	.word	0x08004c15
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004c15 	.word	0x08004c15
 8004c7c:	08004c15 	.word	0x08004c15
 8004c80:	08004d61 	.word	0x08004d61
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	1d1a      	adds	r2, r3, #4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	602a      	str	r2, [r5, #0]
 8004c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0a0      	b.n	8004dda <_printf_i+0x1ee>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	0607      	lsls	r7, r0, #24
 8004c9e:	f103 0104 	add.w	r1, r3, #4
 8004ca2:	6029      	str	r1, [r5, #0]
 8004ca4:	d501      	bpl.n	8004caa <_printf_i+0xbe>
 8004ca6:	681e      	ldr	r6, [r3, #0]
 8004ca8:	e003      	b.n	8004cb2 <_printf_i+0xc6>
 8004caa:	0646      	lsls	r6, r0, #25
 8004cac:	d5fb      	bpl.n	8004ca6 <_printf_i+0xba>
 8004cae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	da03      	bge.n	8004cbe <_printf_i+0xd2>
 8004cb6:	232d      	movs	r3, #45	; 0x2d
 8004cb8:	4276      	negs	r6, r6
 8004cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	4859      	ldr	r0, [pc, #356]	; (8004e28 <_printf_i+0x23c>)
 8004cc2:	e012      	b.n	8004cea <_printf_i+0xfe>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	1d19      	adds	r1, r3, #4
 8004cca:	6029      	str	r1, [r5, #0]
 8004ccc:	0605      	lsls	r5, r0, #24
 8004cce:	d501      	bpl.n	8004cd4 <_printf_i+0xe8>
 8004cd0:	681e      	ldr	r6, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <_printf_i+0xee>
 8004cd4:	0641      	lsls	r1, r0, #25
 8004cd6:	d5fb      	bpl.n	8004cd0 <_printf_i+0xe4>
 8004cd8:	881e      	ldrh	r6, [r3, #0]
 8004cda:	2f6f      	cmp	r7, #111	; 0x6f
 8004cdc:	bf0c      	ite	eq
 8004cde:	2308      	moveq	r3, #8
 8004ce0:	230a      	movne	r3, #10
 8004ce2:	4851      	ldr	r0, [pc, #324]	; (8004e28 <_printf_i+0x23c>)
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cea:	6865      	ldr	r5, [r4, #4]
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	bfa8      	it	ge
 8004cf0:	6821      	ldrge	r1, [r4, #0]
 8004cf2:	60a5      	str	r5, [r4, #8]
 8004cf4:	bfa4      	itt	ge
 8004cf6:	f021 0104 	bicge.w	r1, r1, #4
 8004cfa:	6021      	strge	r1, [r4, #0]
 8004cfc:	b90e      	cbnz	r6, 8004d02 <_printf_i+0x116>
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	d04b      	beq.n	8004d9a <_printf_i+0x1ae>
 8004d02:	4615      	mov	r5, r2
 8004d04:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d08:	fb03 6711 	mls	r7, r3, r1, r6
 8004d0c:	5dc7      	ldrb	r7, [r0, r7]
 8004d0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d12:	4637      	mov	r7, r6
 8004d14:	42bb      	cmp	r3, r7
 8004d16:	460e      	mov	r6, r1
 8004d18:	d9f4      	bls.n	8004d04 <_printf_i+0x118>
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d10b      	bne.n	8004d36 <_printf_i+0x14a>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	07de      	lsls	r6, r3, #31
 8004d22:	d508      	bpl.n	8004d36 <_printf_i+0x14a>
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	6861      	ldr	r1, [r4, #4]
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	bfde      	ittt	le
 8004d2c:	2330      	movle	r3, #48	; 0x30
 8004d2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d36:	1b52      	subs	r2, r2, r5
 8004d38:	6122      	str	r2, [r4, #16]
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f8cd a000 	str.w	sl, [sp]
 8004d44:	aa03      	add	r2, sp, #12
 8004d46:	f7ff fedf 	bl	8004b08 <_printf_common>
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d14a      	bne.n	8004de4 <_printf_i+0x1f8>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	b004      	add	sp, #16
 8004d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	f043 0320 	orr.w	r3, r3, #32
 8004d5e:	6023      	str	r3, [r4, #0]
 8004d60:	2778      	movs	r7, #120	; 0x78
 8004d62:	4832      	ldr	r0, [pc, #200]	; (8004e2c <_printf_i+0x240>)
 8004d64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	6829      	ldr	r1, [r5, #0]
 8004d6c:	061f      	lsls	r7, r3, #24
 8004d6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d72:	d402      	bmi.n	8004d7a <_printf_i+0x18e>
 8004d74:	065f      	lsls	r7, r3, #25
 8004d76:	bf48      	it	mi
 8004d78:	b2b6      	uxthmi	r6, r6
 8004d7a:	07df      	lsls	r7, r3, #31
 8004d7c:	bf48      	it	mi
 8004d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d82:	6029      	str	r1, [r5, #0]
 8004d84:	bf48      	it	mi
 8004d86:	6023      	strmi	r3, [r4, #0]
 8004d88:	b91e      	cbnz	r6, 8004d92 <_printf_i+0x1a6>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f023 0320 	bic.w	r3, r3, #32
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	2310      	movs	r3, #16
 8004d94:	e7a6      	b.n	8004ce4 <_printf_i+0xf8>
 8004d96:	4824      	ldr	r0, [pc, #144]	; (8004e28 <_printf_i+0x23c>)
 8004d98:	e7e4      	b.n	8004d64 <_printf_i+0x178>
 8004d9a:	4615      	mov	r5, r2
 8004d9c:	e7bd      	b.n	8004d1a <_printf_i+0x12e>
 8004d9e:	682b      	ldr	r3, [r5, #0]
 8004da0:	6826      	ldr	r6, [r4, #0]
 8004da2:	1d18      	adds	r0, r3, #4
 8004da4:	6961      	ldr	r1, [r4, #20]
 8004da6:	6028      	str	r0, [r5, #0]
 8004da8:	0635      	lsls	r5, r6, #24
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	d501      	bpl.n	8004db2 <_printf_i+0x1c6>
 8004dae:	6019      	str	r1, [r3, #0]
 8004db0:	e002      	b.n	8004db8 <_printf_i+0x1cc>
 8004db2:	0670      	lsls	r0, r6, #25
 8004db4:	d5fb      	bpl.n	8004dae <_printf_i+0x1c2>
 8004db6:	8019      	strh	r1, [r3, #0]
 8004db8:	2300      	movs	r3, #0
 8004dba:	4615      	mov	r5, r2
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	e7bc      	b.n	8004d3a <_printf_i+0x14e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	1d1a      	adds	r2, r3, #4
 8004dc6:	602a      	str	r2, [r5, #0]
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	6862      	ldr	r2, [r4, #4]
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f000 f96d 	bl	80050ac <memchr>
 8004dd2:	b108      	cbz	r0, 8004dd8 <_printf_i+0x1ec>
 8004dd4:	1b40      	subs	r0, r0, r5
 8004dd6:	6060      	str	r0, [r4, #4]
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de2:	e7aa      	b.n	8004d3a <_printf_i+0x14e>
 8004de4:	462a      	mov	r2, r5
 8004de6:	4649      	mov	r1, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	47d0      	blx	sl
 8004dee:	3001      	adds	r0, #1
 8004df0:	d0ad      	beq.n	8004d4e <_printf_i+0x162>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	079b      	lsls	r3, r3, #30
 8004df6:	d413      	bmi.n	8004e20 <_printf_i+0x234>
 8004df8:	68e0      	ldr	r0, [r4, #12]
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	4298      	cmp	r0, r3
 8004dfe:	bfb8      	it	lt
 8004e00:	4618      	movlt	r0, r3
 8004e02:	e7a6      	b.n	8004d52 <_printf_i+0x166>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4632      	mov	r2, r6
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	47d0      	blx	sl
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d09d      	beq.n	8004d4e <_printf_i+0x162>
 8004e12:	3501      	adds	r5, #1
 8004e14:	68e3      	ldr	r3, [r4, #12]
 8004e16:	9903      	ldr	r1, [sp, #12]
 8004e18:	1a5b      	subs	r3, r3, r1
 8004e1a:	42ab      	cmp	r3, r5
 8004e1c:	dcf2      	bgt.n	8004e04 <_printf_i+0x218>
 8004e1e:	e7eb      	b.n	8004df8 <_printf_i+0x20c>
 8004e20:	2500      	movs	r5, #0
 8004e22:	f104 0619 	add.w	r6, r4, #25
 8004e26:	e7f5      	b.n	8004e14 <_printf_i+0x228>
 8004e28:	0800515b 	.word	0x0800515b
 8004e2c:	0800516c 	.word	0x0800516c

08004e30 <__sflush_r>:
 8004e30:	898a      	ldrh	r2, [r1, #12]
 8004e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e34:	4605      	mov	r5, r0
 8004e36:	0710      	lsls	r0, r2, #28
 8004e38:	460c      	mov	r4, r1
 8004e3a:	d457      	bmi.n	8004eec <__sflush_r+0xbc>
 8004e3c:	684b      	ldr	r3, [r1, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dc04      	bgt.n	8004e4c <__sflush_r+0x1c>
 8004e42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dc01      	bgt.n	8004e4c <__sflush_r+0x1c>
 8004e48:	2000      	movs	r0, #0
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e4e:	2e00      	cmp	r6, #0
 8004e50:	d0fa      	beq.n	8004e48 <__sflush_r+0x18>
 8004e52:	2300      	movs	r3, #0
 8004e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e58:	682f      	ldr	r7, [r5, #0]
 8004e5a:	6a21      	ldr	r1, [r4, #32]
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	d032      	beq.n	8004ec6 <__sflush_r+0x96>
 8004e60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	075a      	lsls	r2, r3, #29
 8004e66:	d505      	bpl.n	8004e74 <__sflush_r+0x44>
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	1ac0      	subs	r0, r0, r3
 8004e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e6e:	b10b      	cbz	r3, 8004e74 <__sflush_r+0x44>
 8004e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e72:	1ac0      	subs	r0, r0, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	4602      	mov	r2, r0
 8004e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	6a21      	ldr	r1, [r4, #32]
 8004e7e:	47b0      	blx	r6
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	d106      	bne.n	8004e94 <__sflush_r+0x64>
 8004e86:	6829      	ldr	r1, [r5, #0]
 8004e88:	291d      	cmp	r1, #29
 8004e8a:	d82b      	bhi.n	8004ee4 <__sflush_r+0xb4>
 8004e8c:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <__sflush_r+0x100>)
 8004e8e:	410a      	asrs	r2, r1
 8004e90:	07d6      	lsls	r6, r2, #31
 8004e92:	d427      	bmi.n	8004ee4 <__sflush_r+0xb4>
 8004e94:	2200      	movs	r2, #0
 8004e96:	6062      	str	r2, [r4, #4]
 8004e98:	6922      	ldr	r2, [r4, #16]
 8004e9a:	04d9      	lsls	r1, r3, #19
 8004e9c:	6022      	str	r2, [r4, #0]
 8004e9e:	d504      	bpl.n	8004eaa <__sflush_r+0x7a>
 8004ea0:	1c42      	adds	r2, r0, #1
 8004ea2:	d101      	bne.n	8004ea8 <__sflush_r+0x78>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b903      	cbnz	r3, 8004eaa <__sflush_r+0x7a>
 8004ea8:	6560      	str	r0, [r4, #84]	; 0x54
 8004eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eac:	602f      	str	r7, [r5, #0]
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	d0ca      	beq.n	8004e48 <__sflush_r+0x18>
 8004eb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eb6:	4299      	cmp	r1, r3
 8004eb8:	d002      	beq.n	8004ec0 <__sflush_r+0x90>
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7ff fbee 	bl	800469c <_free_r>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	6360      	str	r0, [r4, #52]	; 0x34
 8004ec4:	e7c1      	b.n	8004e4a <__sflush_r+0x1a>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b0      	blx	r6
 8004ecc:	1c41      	adds	r1, r0, #1
 8004ece:	d1c8      	bne.n	8004e62 <__sflush_r+0x32>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0c5      	beq.n	8004e62 <__sflush_r+0x32>
 8004ed6:	2b1d      	cmp	r3, #29
 8004ed8:	d001      	beq.n	8004ede <__sflush_r+0xae>
 8004eda:	2b16      	cmp	r3, #22
 8004edc:	d101      	bne.n	8004ee2 <__sflush_r+0xb2>
 8004ede:	602f      	str	r7, [r5, #0]
 8004ee0:	e7b2      	b.n	8004e48 <__sflush_r+0x18>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee8:	81a3      	strh	r3, [r4, #12]
 8004eea:	e7ae      	b.n	8004e4a <__sflush_r+0x1a>
 8004eec:	690f      	ldr	r7, [r1, #16]
 8004eee:	2f00      	cmp	r7, #0
 8004ef0:	d0aa      	beq.n	8004e48 <__sflush_r+0x18>
 8004ef2:	0793      	lsls	r3, r2, #30
 8004ef4:	bf18      	it	ne
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	680e      	ldr	r6, [r1, #0]
 8004efa:	bf08      	it	eq
 8004efc:	694b      	ldreq	r3, [r1, #20]
 8004efe:	1bf6      	subs	r6, r6, r7
 8004f00:	600f      	str	r7, [r1, #0]
 8004f02:	608b      	str	r3, [r1, #8]
 8004f04:	2e00      	cmp	r6, #0
 8004f06:	dd9f      	ble.n	8004e48 <__sflush_r+0x18>
 8004f08:	4633      	mov	r3, r6
 8004f0a:	463a      	mov	r2, r7
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	6a21      	ldr	r1, [r4, #32]
 8004f10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004f14:	47e0      	blx	ip
 8004f16:	2800      	cmp	r0, #0
 8004f18:	dc06      	bgt.n	8004f28 <__sflush_r+0xf8>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	e790      	b.n	8004e4a <__sflush_r+0x1a>
 8004f28:	4407      	add	r7, r0
 8004f2a:	1a36      	subs	r6, r6, r0
 8004f2c:	e7ea      	b.n	8004f04 <__sflush_r+0xd4>
 8004f2e:	bf00      	nop
 8004f30:	dfbffffe 	.word	0xdfbffffe

08004f34 <_fflush_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	4605      	mov	r5, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	b913      	cbnz	r3, 8004f44 <_fflush_r+0x10>
 8004f3e:	2500      	movs	r5, #0
 8004f40:	4628      	mov	r0, r5
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	b118      	cbz	r0, 8004f4e <_fflush_r+0x1a>
 8004f46:	6a03      	ldr	r3, [r0, #32]
 8004f48:	b90b      	cbnz	r3, 8004f4e <_fflush_r+0x1a>
 8004f4a:	f7ff f9af 	bl	80042ac <__sinit>
 8004f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f3      	beq.n	8004f3e <_fflush_r+0xa>
 8004f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f58:	07d0      	lsls	r0, r2, #31
 8004f5a:	d404      	bmi.n	8004f66 <_fflush_r+0x32>
 8004f5c:	0599      	lsls	r1, r3, #22
 8004f5e:	d402      	bmi.n	8004f66 <_fflush_r+0x32>
 8004f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f62:	f7ff fb98 	bl	8004696 <__retarget_lock_acquire_recursive>
 8004f66:	4628      	mov	r0, r5
 8004f68:	4621      	mov	r1, r4
 8004f6a:	f7ff ff61 	bl	8004e30 <__sflush_r>
 8004f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f70:	4605      	mov	r5, r0
 8004f72:	07da      	lsls	r2, r3, #31
 8004f74:	d4e4      	bmi.n	8004f40 <_fflush_r+0xc>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	059b      	lsls	r3, r3, #22
 8004f7a:	d4e1      	bmi.n	8004f40 <_fflush_r+0xc>
 8004f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7e:	f7ff fb8b 	bl	8004698 <__retarget_lock_release_recursive>
 8004f82:	e7dd      	b.n	8004f40 <_fflush_r+0xc>

08004f84 <__swhatbuf_r>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	460c      	mov	r4, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	4615      	mov	r5, r2
 8004f8e:	2900      	cmp	r1, #0
 8004f90:	461e      	mov	r6, r3
 8004f92:	b096      	sub	sp, #88	; 0x58
 8004f94:	da0c      	bge.n	8004fb0 <__swhatbuf_r+0x2c>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f9e:	bf0c      	ite	eq
 8004fa0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004fa4:	2340      	movne	r3, #64	; 0x40
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	6031      	str	r1, [r6, #0]
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	b016      	add	sp, #88	; 0x58
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	466a      	mov	r2, sp
 8004fb2:	f000 f849 	bl	8005048 <_fstat_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dbed      	blt.n	8004f96 <__swhatbuf_r+0x12>
 8004fba:	9901      	ldr	r1, [sp, #4]
 8004fbc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004fc0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004fc4:	4259      	negs	r1, r3
 8004fc6:	4159      	adcs	r1, r3
 8004fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fcc:	e7eb      	b.n	8004fa6 <__swhatbuf_r+0x22>

08004fce <__smakebuf_r>:
 8004fce:	898b      	ldrh	r3, [r1, #12]
 8004fd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fd2:	079d      	lsls	r5, r3, #30
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	d507      	bpl.n	8004fea <__smakebuf_r+0x1c>
 8004fda:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	6163      	str	r3, [r4, #20]
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd70      	pop	{r4, r5, r6, pc}
 8004fea:	466a      	mov	r2, sp
 8004fec:	ab01      	add	r3, sp, #4
 8004fee:	f7ff ffc9 	bl	8004f84 <__swhatbuf_r>
 8004ff2:	9900      	ldr	r1, [sp, #0]
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f7ff fbb8 	bl	800476c <_malloc_r>
 8004ffc:	b948      	cbnz	r0, 8005012 <__smakebuf_r+0x44>
 8004ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005002:	059a      	lsls	r2, r3, #22
 8005004:	d4ef      	bmi.n	8004fe6 <__smakebuf_r+0x18>
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	e7e3      	b.n	8004fda <__smakebuf_r+0xc>
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	6020      	str	r0, [r4, #0]
 8005016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501a:	81a3      	strh	r3, [r4, #12]
 800501c:	9b00      	ldr	r3, [sp, #0]
 800501e:	6120      	str	r0, [r4, #16]
 8005020:	6163      	str	r3, [r4, #20]
 8005022:	9b01      	ldr	r3, [sp, #4]
 8005024:	b15b      	cbz	r3, 800503e <__smakebuf_r+0x70>
 8005026:	4630      	mov	r0, r6
 8005028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800502c:	f000 f81e 	bl	800506c <_isatty_r>
 8005030:	b128      	cbz	r0, 800503e <__smakebuf_r+0x70>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f023 0303 	bic.w	r3, r3, #3
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	431d      	orrs	r5, r3
 8005042:	81a5      	strh	r5, [r4, #12]
 8005044:	e7cf      	b.n	8004fe6 <__smakebuf_r+0x18>
	...

08005048 <_fstat_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	2300      	movs	r3, #0
 800504c:	4d06      	ldr	r5, [pc, #24]	; (8005068 <_fstat_r+0x20>)
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	f7fc f919 	bl	800128c <_fstat>
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	d102      	bne.n	8005064 <_fstat_r+0x1c>
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	b103      	cbz	r3, 8005064 <_fstat_r+0x1c>
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	bd38      	pop	{r3, r4, r5, pc}
 8005066:	bf00      	nop
 8005068:	2000045c 	.word	0x2000045c

0800506c <_isatty_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	2300      	movs	r3, #0
 8005070:	4d05      	ldr	r5, [pc, #20]	; (8005088 <_isatty_r+0x1c>)
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	f7fc f917 	bl	80012aa <_isatty>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d102      	bne.n	8005086 <_isatty_r+0x1a>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	b103      	cbz	r3, 8005086 <_isatty_r+0x1a>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	2000045c 	.word	0x2000045c

0800508c <_sbrk_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	2300      	movs	r3, #0
 8005090:	4d05      	ldr	r5, [pc, #20]	; (80050a8 <_sbrk_r+0x1c>)
 8005092:	4604      	mov	r4, r0
 8005094:	4608      	mov	r0, r1
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	f7fc f91e 	bl	80012d8 <_sbrk>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_sbrk_r+0x1a>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_sbrk_r+0x1a>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	2000045c 	.word	0x2000045c

080050ac <memchr>:
 80050ac:	4603      	mov	r3, r0
 80050ae:	b510      	push	{r4, lr}
 80050b0:	b2c9      	uxtb	r1, r1
 80050b2:	4402      	add	r2, r0
 80050b4:	4293      	cmp	r3, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	d101      	bne.n	80050be <memchr+0x12>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e003      	b.n	80050c6 <memchr+0x1a>
 80050be:	7804      	ldrb	r4, [r0, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	428c      	cmp	r4, r1
 80050c4:	d1f6      	bne.n	80050b4 <memchr+0x8>
 80050c6:	bd10      	pop	{r4, pc}

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
