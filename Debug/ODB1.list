
ODB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000100c  0800cf00  0800cf00  0000df00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df0c  0800df0c  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800df0c  0800df0c  0000ef0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df14  0800df14  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df14  0800df14  0000ef14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df18  0800df18  0000ef18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800df1c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c0  200001ec  0800e108  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200028ac  0800e108  0000f8ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d317  00000000  00000000  0000f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272a  00000000  00000000  0001c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000190f  00000000  00000000  0001ec56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00020565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a7  00000000  00000000  00020cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca0d  00000000  00000000  000212a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011646  00000000  00000000  0003dcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098395  00000000  00000000  0004f2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e768c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a0c  00000000  00000000  000e76d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cee8 	.word	0x0800cee8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800cee8 	.word	0x0800cee8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b99b 	b.w	800137c <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f835 	bl	80010c4 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f828 	bl	80010c4 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f817 	bl	80010c4 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f809 	bl	80010c4 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9d08      	ldr	r5, [sp, #32]
 80010ca:	460c      	mov	r4, r1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d14e      	bne.n	800116e <__udivmoddi4+0xaa>
 80010d0:	4694      	mov	ip, r2
 80010d2:	458c      	cmp	ip, r1
 80010d4:	4686      	mov	lr, r0
 80010d6:	fab2 f282 	clz	r2, r2
 80010da:	d962      	bls.n	80011a2 <__udivmoddi4+0xde>
 80010dc:	b14a      	cbz	r2, 80010f2 <__udivmoddi4+0x2e>
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	4091      	lsls	r1, r2
 80010e4:	fa20 f303 	lsr.w	r3, r0, r3
 80010e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010ec:	4319      	orrs	r1, r3
 80010ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80010fa:	fb07 1114 	mls	r1, r7, r4, r1
 80010fe:	fa1f f68c 	uxth.w	r6, ip
 8001102:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001106:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800110a:	fb04 f106 	mul.w	r1, r4, r6
 800110e:	4299      	cmp	r1, r3
 8001110:	d90a      	bls.n	8001128 <__udivmoddi4+0x64>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f104 30ff 	add.w	r0, r4, #4294967295
 800111a:	f080 8110 	bcs.w	800133e <__udivmoddi4+0x27a>
 800111e:	4299      	cmp	r1, r3
 8001120:	f240 810d 	bls.w	800133e <__udivmoddi4+0x27a>
 8001124:	3c02      	subs	r4, #2
 8001126:	4463      	add	r3, ip
 8001128:	1a59      	subs	r1, r3, r1
 800112a:	fbb1 f0f7 	udiv	r0, r1, r7
 800112e:	fb07 1110 	mls	r1, r7, r0, r1
 8001132:	fb00 f606 	mul.w	r6, r0, r6
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800113e:	429e      	cmp	r6, r3
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0303 	adds.w	r3, ip, r3
 8001146:	f100 31ff 	add.w	r1, r0, #4294967295
 800114a:	f080 80fa 	bcs.w	8001342 <__udivmoddi4+0x27e>
 800114e:	429e      	cmp	r6, r3
 8001150:	f240 80f7 	bls.w	8001342 <__udivmoddi4+0x27e>
 8001154:	4463      	add	r3, ip
 8001156:	3802      	subs	r0, #2
 8001158:	2100      	movs	r1, #0
 800115a:	1b9b      	subs	r3, r3, r6
 800115c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001160:	b11d      	cbz	r5, 800116a <__udivmoddi4+0xa6>
 8001162:	40d3      	lsrs	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e9c5 3200 	strd	r3, r2, [r5]
 800116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116e:	428b      	cmp	r3, r1
 8001170:	d905      	bls.n	800117e <__udivmoddi4+0xba>
 8001172:	b10d      	cbz	r5, 8001178 <__udivmoddi4+0xb4>
 8001174:	e9c5 0100 	strd	r0, r1, [r5]
 8001178:	2100      	movs	r1, #0
 800117a:	4608      	mov	r0, r1
 800117c:	e7f5      	b.n	800116a <__udivmoddi4+0xa6>
 800117e:	fab3 f183 	clz	r1, r3
 8001182:	2900      	cmp	r1, #0
 8001184:	d146      	bne.n	8001214 <__udivmoddi4+0x150>
 8001186:	42a3      	cmp	r3, r4
 8001188:	d302      	bcc.n	8001190 <__udivmoddi4+0xcc>
 800118a:	4290      	cmp	r0, r2
 800118c:	f0c0 80ee 	bcc.w	800136c <__udivmoddi4+0x2a8>
 8001190:	1a86      	subs	r6, r0, r2
 8001192:	eb64 0303 	sbc.w	r3, r4, r3
 8001196:	2001      	movs	r0, #1
 8001198:	2d00      	cmp	r5, #0
 800119a:	d0e6      	beq.n	800116a <__udivmoddi4+0xa6>
 800119c:	e9c5 6300 	strd	r6, r3, [r5]
 80011a0:	e7e3      	b.n	800116a <__udivmoddi4+0xa6>
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	f040 808f 	bne.w	80012c6 <__udivmoddi4+0x202>
 80011a8:	eba1 040c 	sub.w	r4, r1, ip
 80011ac:	2101      	movs	r1, #1
 80011ae:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011b2:	fa1f f78c 	uxth.w	r7, ip
 80011b6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011ba:	fb08 4416 	mls	r4, r8, r6, r4
 80011be:	fb07 f006 	mul.w	r0, r7, r6
 80011c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011ca:	4298      	cmp	r0, r3
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x11c>
 80011ce:	eb1c 0303 	adds.w	r3, ip, r3
 80011d2:	f106 34ff 	add.w	r4, r6, #4294967295
 80011d6:	d202      	bcs.n	80011de <__udivmoddi4+0x11a>
 80011d8:	4298      	cmp	r0, r3
 80011da:	f200 80cb 	bhi.w	8001374 <__udivmoddi4+0x2b0>
 80011de:	4626      	mov	r6, r4
 80011e0:	1a1c      	subs	r4, r3, r0
 80011e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011e6:	fb08 4410 	mls	r4, r8, r0, r4
 80011ea:	fb00 f707 	mul.w	r7, r0, r7
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011f6:	429f      	cmp	r7, r3
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x148>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 34ff 	add.w	r4, r0, #4294967295
 8001202:	d202      	bcs.n	800120a <__udivmoddi4+0x146>
 8001204:	429f      	cmp	r7, r3
 8001206:	f200 80ae 	bhi.w	8001366 <__udivmoddi4+0x2a2>
 800120a:	4620      	mov	r0, r4
 800120c:	1bdb      	subs	r3, r3, r7
 800120e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001212:	e7a5      	b.n	8001160 <__udivmoddi4+0x9c>
 8001214:	f1c1 0720 	rsb	r7, r1, #32
 8001218:	408b      	lsls	r3, r1
 800121a:	fa22 fc07 	lsr.w	ip, r2, r7
 800121e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001222:	fa24 f607 	lsr.w	r6, r4, r7
 8001226:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800122a:	fbb6 f8f9 	udiv	r8, r6, r9
 800122e:	fa1f fe8c 	uxth.w	lr, ip
 8001232:	fb09 6618 	mls	r6, r9, r8, r6
 8001236:	fa20 f307 	lsr.w	r3, r0, r7
 800123a:	408c      	lsls	r4, r1
 800123c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001240:	fb08 f00e 	mul.w	r0, r8, lr
 8001244:	431c      	orrs	r4, r3
 8001246:	0c23      	lsrs	r3, r4, #16
 8001248:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800124c:	4298      	cmp	r0, r3
 800124e:	fa02 f201 	lsl.w	r2, r2, r1
 8001252:	d90a      	bls.n	800126a <__udivmoddi4+0x1a6>
 8001254:	eb1c 0303 	adds.w	r3, ip, r3
 8001258:	f108 36ff 	add.w	r6, r8, #4294967295
 800125c:	f080 8081 	bcs.w	8001362 <__udivmoddi4+0x29e>
 8001260:	4298      	cmp	r0, r3
 8001262:	d97e      	bls.n	8001362 <__udivmoddi4+0x29e>
 8001264:	f1a8 0802 	sub.w	r8, r8, #2
 8001268:	4463      	add	r3, ip
 800126a:	1a1e      	subs	r6, r3, r0
 800126c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001270:	fb09 6613 	mls	r6, r9, r3, r6
 8001274:	fb03 fe0e 	mul.w	lr, r3, lr
 8001278:	b2a4      	uxth	r4, r4
 800127a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800127e:	45a6      	cmp	lr, r4
 8001280:	d908      	bls.n	8001294 <__udivmoddi4+0x1d0>
 8001282:	eb1c 0404 	adds.w	r4, ip, r4
 8001286:	f103 30ff 	add.w	r0, r3, #4294967295
 800128a:	d266      	bcs.n	800135a <__udivmoddi4+0x296>
 800128c:	45a6      	cmp	lr, r4
 800128e:	d964      	bls.n	800135a <__udivmoddi4+0x296>
 8001290:	3b02      	subs	r3, #2
 8001292:	4464      	add	r4, ip
 8001294:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001298:	fba0 8302 	umull	r8, r3, r0, r2
 800129c:	eba4 040e 	sub.w	r4, r4, lr
 80012a0:	429c      	cmp	r4, r3
 80012a2:	46c6      	mov	lr, r8
 80012a4:	461e      	mov	r6, r3
 80012a6:	d350      	bcc.n	800134a <__udivmoddi4+0x286>
 80012a8:	d04d      	beq.n	8001346 <__udivmoddi4+0x282>
 80012aa:	b155      	cbz	r5, 80012c2 <__udivmoddi4+0x1fe>
 80012ac:	ebba 030e 	subs.w	r3, sl, lr
 80012b0:	eb64 0406 	sbc.w	r4, r4, r6
 80012b4:	fa04 f707 	lsl.w	r7, r4, r7
 80012b8:	40cb      	lsrs	r3, r1
 80012ba:	431f      	orrs	r7, r3
 80012bc:	40cc      	lsrs	r4, r1
 80012be:	e9c5 7400 	strd	r7, r4, [r5]
 80012c2:	2100      	movs	r1, #0
 80012c4:	e751      	b.n	800116a <__udivmoddi4+0xa6>
 80012c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ca:	f1c2 0320 	rsb	r3, r2, #32
 80012ce:	40d9      	lsrs	r1, r3
 80012d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012d4:	fa20 f303 	lsr.w	r3, r0, r3
 80012d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1110 	mls	r1, r8, r0, r1
 80012e4:	4094      	lsls	r4, r2
 80012e6:	431c      	orrs	r4, r3
 80012e8:	fa1f f78c 	uxth.w	r7, ip
 80012ec:	0c23      	lsrs	r3, r4, #16
 80012ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012f2:	fb00 f107 	mul.w	r1, r0, r7
 80012f6:	4299      	cmp	r1, r3
 80012f8:	d908      	bls.n	800130c <__udivmoddi4+0x248>
 80012fa:	eb1c 0303 	adds.w	r3, ip, r3
 80012fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8001302:	d22c      	bcs.n	800135e <__udivmoddi4+0x29a>
 8001304:	4299      	cmp	r1, r3
 8001306:	d92a      	bls.n	800135e <__udivmoddi4+0x29a>
 8001308:	3802      	subs	r0, #2
 800130a:	4463      	add	r3, ip
 800130c:	1a5b      	subs	r3, r3, r1
 800130e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001312:	fb08 3311 	mls	r3, r8, r1, r3
 8001316:	b2a4      	uxth	r4, r4
 8001318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800131c:	fb01 f307 	mul.w	r3, r1, r7
 8001320:	42a3      	cmp	r3, r4
 8001322:	d908      	bls.n	8001336 <__udivmoddi4+0x272>
 8001324:	eb1c 0404 	adds.w	r4, ip, r4
 8001328:	f101 36ff 	add.w	r6, r1, #4294967295
 800132c:	d213      	bcs.n	8001356 <__udivmoddi4+0x292>
 800132e:	42a3      	cmp	r3, r4
 8001330:	d911      	bls.n	8001356 <__udivmoddi4+0x292>
 8001332:	3902      	subs	r1, #2
 8001334:	4464      	add	r4, ip
 8001336:	1ae4      	subs	r4, r4, r3
 8001338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800133c:	e73b      	b.n	80011b6 <__udivmoddi4+0xf2>
 800133e:	4604      	mov	r4, r0
 8001340:	e6f2      	b.n	8001128 <__udivmoddi4+0x64>
 8001342:	4608      	mov	r0, r1
 8001344:	e708      	b.n	8001158 <__udivmoddi4+0x94>
 8001346:	45c2      	cmp	sl, r8
 8001348:	d2af      	bcs.n	80012aa <__udivmoddi4+0x1e6>
 800134a:	ebb8 0e02 	subs.w	lr, r8, r2
 800134e:	eb63 060c 	sbc.w	r6, r3, ip
 8001352:	3801      	subs	r0, #1
 8001354:	e7a9      	b.n	80012aa <__udivmoddi4+0x1e6>
 8001356:	4631      	mov	r1, r6
 8001358:	e7ed      	b.n	8001336 <__udivmoddi4+0x272>
 800135a:	4603      	mov	r3, r0
 800135c:	e79a      	b.n	8001294 <__udivmoddi4+0x1d0>
 800135e:	4630      	mov	r0, r6
 8001360:	e7d4      	b.n	800130c <__udivmoddi4+0x248>
 8001362:	46b0      	mov	r8, r6
 8001364:	e781      	b.n	800126a <__udivmoddi4+0x1a6>
 8001366:	4463      	add	r3, ip
 8001368:	3802      	subs	r0, #2
 800136a:	e74f      	b.n	800120c <__udivmoddi4+0x148>
 800136c:	4606      	mov	r6, r0
 800136e:	4623      	mov	r3, r4
 8001370:	4608      	mov	r0, r1
 8001372:	e711      	b.n	8001198 <__udivmoddi4+0xd4>
 8001374:	3e02      	subs	r6, #2
 8001376:	4463      	add	r3, ip
 8001378:	e732      	b.n	80011e0 <__udivmoddi4+0x11c>
 800137a:	bf00      	nop

0800137c <__aeabi_idiv0>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <BMP280_ReadRegister>:

	float altitude = (T0 / alpha) * (1 - pow((pressure / P0), (1 / beta)));
    return altitude;
}

uint8_t BMP280_ReadRegister(uint8_t reg) {
 8001380:	b500      	push	{lr}
 8001382:	b085      	sub	sp, #20
 8001384:	f88d 0007 	strb.w	r0, [sp, #7]

    uint8_t received_data;
    Write_GPIO(PA, 8, LOW); // Disable CS
 8001388:	2200      	movs	r2, #0
 800138a:	2108      	movs	r1, #8
 800138c:	2001      	movs	r0, #1
 800138e:	f000 fe67 	bl	8002060 <Write_GPIO>
    SPI2_TX(&reg, 1);
 8001392:	2101      	movs	r1, #1
 8001394:	f10d 0007 	add.w	r0, sp, #7
 8001398:	f000 fefa 	bl	8002190 <SPI2_TX>
    SPI2_RX(&received_data, 1);
 800139c:	2101      	movs	r1, #1
 800139e:	f10d 000f 	add.w	r0, sp, #15
 80013a2:	f000 ff13 	bl	80021cc <SPI2_RX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 80013a6:	2201      	movs	r2, #1
 80013a8:	2108      	movs	r1, #8
 80013aa:	4610      	mov	r0, r2
 80013ac:	f000 fe58 	bl	8002060 <Write_GPIO>
    return received_data;
}
 80013b0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80013b4:	b005      	add	sp, #20
 80013b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080013bc <BMP280_ReadTemperature>:
uint8_t BMP280_ReadTemperature(BMP280 *devBMP) {
 80013bc:	b538      	push	{r3, r4, r5, lr}
 80013be:	4604      	mov	r4, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0 || (BMP280_ReadRegister(BMP280_REG_STATUS) & 0x01) != 0);
 80013c0:	20f3      	movs	r0, #243	@ 0xf3
 80013c2:	f7ff ffdd 	bl	8001380 <BMP280_ReadRegister>
 80013c6:	f010 0f04 	tst.w	r0, #4
 80013ca:	d1f9      	bne.n	80013c0 <BMP280_ReadTemperature+0x4>
 80013cc:	20f3      	movs	r0, #243	@ 0xf3
 80013ce:	f7ff ffd7 	bl	8001380 <BMP280_ReadRegister>
 80013d2:	f010 0f01 	tst.w	r0, #1
 80013d6:	d1f3      	bne.n	80013c0 <BMP280_ReadTemperature+0x4>
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013d8:	20fa      	movs	r0, #250	@ 0xfa
 80013da:	f7ff ffd1 	bl	8001380 <BMP280_ReadRegister>
 80013de:	0305      	lsls	r5, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_TEMP_LSB) << 4) |
 80013e0:	20fb      	movs	r0, #251	@ 0xfb
 80013e2:	f7ff ffcd 	bl	8001380 <BMP280_ReadRegister>
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013e6:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
					((BMP280_ReadRegister(BMP280_REG_TEMP_XLSB) >> 4) & 0x0F);
 80013ea:	20fc      	movs	r0, #252	@ 0xfc
 80013ec:	f7ff ffc8 	bl	8001380 <BMP280_ReadRegister>
 80013f0:	f3c0 1307 	ubfx	r3, r0, #4, #8
    int32_t adc_T = (BMP280_ReadRegister(BMP280_REG_TEMP_MSB) << 12) |
 80013f4:	ea45 0203 	orr.w	r2, r5, r3
    int32_t var1 = ((((adc_T >> 3) - ((int32_t)devBMP->calib_data.dig_T1 << 1))) * ((int32_t)devBMP->calib_data.dig_T2)) >> 11;
 80013f8:	8923      	ldrh	r3, [r4, #8]
 80013fa:	0059      	lsls	r1, r3, #1
 80013fc:	ebc1 01e2 	rsb	r1, r1, r2, asr #3
 8001400:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8001404:	fb00 f101 	mul.w	r1, r0, r1
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1)) * ((adc_T >> 4) - ((int32_t)devBMP->calib_data.dig_T1))) >> 12) * ((int32_t)devBMP->calib_data.dig_T3)) >> 14;
 8001408:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800140c:	fb03 f303 	mul.w	r3, r3, r3
 8001410:	131b      	asrs	r3, r3, #12
 8001412:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	139b      	asrs	r3, r3, #14
    devBMP->t_fine = var1 + var2;
 800141c:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 8001420:	6223      	str	r3, [r4, #32]
    int32_t T = (devBMP->t_fine * 5 + 128) >> 8;
 8001422:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001426:	3380      	adds	r3, #128	@ 0x80
    devBMP->temp_C = (float)(T / 100.0); // + devBMP->temperature_ref;
 8001428:	1218      	asrs	r0, r3, #8
 800142a:	f7fe ffeb 	bl	8000404 <__aeabi_i2d>
 800142e:	2200      	movs	r2, #0
 8001430:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <BMP280_ReadTemperature+0x84>)
 8001432:	f7ff f97b 	bl	800072c <__aeabi_ddiv>
 8001436:	f7ff fb27 	bl	8000a88 <__aeabi_d2f>
 800143a:	6060      	str	r0, [r4, #4]
}
 800143c:	2001      	movs	r0, #1
 800143e:	bd38      	pop	{r3, r4, r5, pc}
 8001440:	40590000 	.word	0x40590000

08001444 <BMP280_ReadPressure>:
uint8_t BMP280_ReadPressure(BMP280 *devBMP) {
 8001444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001448:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0 || (BMP280_ReadRegister(BMP280_REG_STATUS) & 0x01) != 0);
 800144a:	20f3      	movs	r0, #243	@ 0xf3
 800144c:	f7ff ff98 	bl	8001380 <BMP280_ReadRegister>
 8001450:	f010 0f04 	tst.w	r0, #4
 8001454:	d1f9      	bne.n	800144a <BMP280_ReadPressure+0x6>
 8001456:	20f3      	movs	r0, #243	@ 0xf3
 8001458:	f7ff ff92 	bl	8001380 <BMP280_ReadRegister>
 800145c:	f010 0401 	ands.w	r4, r0, #1
 8001460:	d1f3      	bne.n	800144a <BMP280_ReadPressure+0x6>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 8001462:	20f7      	movs	r0, #247	@ 0xf7
 8001464:	f7ff ff8c 	bl	8001380 <BMP280_ReadRegister>
 8001468:	0306      	lsls	r6, r0, #12
                    (BMP280_ReadRegister(BMP280_REG_PRESS_LSB) << 4) |
 800146a:	20f8      	movs	r0, #248	@ 0xf8
 800146c:	f7ff ff88 	bl	8001380 <BMP280_ReadRegister>
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 8001470:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
                    ((BMP280_ReadRegister(BMP280_REG_PRESS_XLSB) >> 4) & 0x0F);
 8001474:	20f9      	movs	r0, #249	@ 0xf9
 8001476:	f7ff ff83 	bl	8001380 <BMP280_ReadRegister>
 800147a:	f3c0 1307 	ubfx	r3, r0, #4, #8
    int32_t adc_P = (BMP280_ReadRegister(BMP280_REG_PRESS_MSB) << 12) |
 800147e:	ea46 0103 	orr.w	r1, r6, r3
    int64_t var1 = ((int64_t)devBMP->t_fine) - 128000;
 8001482:	6a28      	ldr	r0, [r5, #32]
 8001484:	17c3      	asrs	r3, r0, #31
 8001486:	f5b0 30fa 	subs.w	r0, r0, #128000	@ 0x1f400
 800148a:	f143 33ff 	adc.w	r3, r3, #4294967295
    int64_t var2 = var1 * var1 * (int64_t)devBMP->calib_data.dig_P6;
 800148e:	fb00 f203 	mul.w	r2, r0, r3
 8001492:	fba0 7800 	umull	r7, r8, r0, r0
 8001496:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 800149a:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
 800149e:	17d6      	asrs	r6, r2, #31
 80014a0:	fb07 f606 	mul.w	r6, r7, r6
 80014a4:	fb02 6608 	mla	r6, r2, r8, r6
 80014a8:	fba7 c202 	umull	ip, r2, r7, r2
 80014ac:	4416      	add	r6, r2
    var2 = var2 + ((var1 * (int64_t)devBMP->calib_data.dig_P5) << 17);
 80014ae:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 80014b2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80014b6:	fb02 fe03 	mul.w	lr, r2, r3
 80014ba:	fb00 ee09 	mla	lr, r0, r9, lr
 80014be:	fba2 2900 	umull	r2, r9, r2, r0
 80014c2:	44ce      	add	lr, r9
 80014c4:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 80014c8:	ea4e 3ed2 	orr.w	lr, lr, r2, lsr #15
 80014cc:	0452      	lsls	r2, r2, #17
 80014ce:	eb12 0c0c 	adds.w	ip, r2, ip
 80014d2:	eb46 060e 	adc.w	r6, r6, lr
    var2 = var2 + (((int64_t)devBMP->calib_data.dig_P4) << 35);
 80014d6:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 80014da:	eb06 0ec2 	add.w	lr, r6, r2, lsl #3
    var1 = ((var1 * var1 * (int64_t)devBMP->calib_data.dig_P3) >> 8) + ((var1 * (int64_t)devBMP->calib_data.dig_P2) << 12);
 80014de:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 80014e2:	17d6      	asrs	r6, r2, #31
 80014e4:	fb07 f606 	mul.w	r6, r7, r6
 80014e8:	fb02 6608 	mla	r6, r2, r8, r6
 80014ec:	fba7 2702 	umull	r2, r7, r7, r2
 80014f0:	443e      	add	r6, r7
 80014f2:	0a12      	lsrs	r2, r2, #8
 80014f4:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 80014f8:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
 80014fc:	ea4f 78e7 	mov.w	r8, r7, asr #31
 8001500:	fb07 f303 	mul.w	r3, r7, r3
 8001504:	fb00 3308 	mla	r3, r0, r8, r3
 8001508:	fba7 7000 	umull	r7, r0, r7, r0
 800150c:	4403      	add	r3, r0
 800150e:	031b      	lsls	r3, r3, #12
 8001510:	ea43 5317 	orr.w	r3, r3, r7, lsr #20
 8001514:	0338      	lsls	r0, r7, #12
 8001516:	1812      	adds	r2, r2, r0
 8001518:	eb43 2326 	adc.w	r3, r3, r6, asr #8
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)devBMP->calib_data.dig_P1) >> 33;
 800151c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001520:	89ee      	ldrh	r6, [r5, #14]
 8001522:	fba2 2006 	umull	r2, r0, r2, r6
 8001526:	fb06 0003 	mla	r0, r6, r3, r0
 800152a:	1042      	asrs	r2, r0, #1
 800152c:	17c3      	asrs	r3, r0, #31
    if (var1 == 0) {
 800152e:	ea53 0060 	orrs.w	r0, r3, r0, asr #1
 8001532:	d065      	beq.n	8001600 <BMP280_ReadPressure+0x1bc>
    int64_t p = 1048576 - adc_P;
 8001534:	f5c1 1480 	rsb	r4, r1, #1048576	@ 0x100000
    p = (((p << 31) - var2) * 3125) / var1;
 8001538:	1061      	asrs	r1, r4, #1
 800153a:	07e4      	lsls	r4, r4, #31
 800153c:	ebb4 040c 	subs.w	r4, r4, ip
 8001540:	eb61 010e 	sbc.w	r1, r1, lr
 8001544:	1920      	adds	r0, r4, r4
 8001546:	eb41 0c01 	adc.w	ip, r1, r1
 800154a:	1900      	adds	r0, r0, r4
 800154c:	eb41 0c0c 	adc.w	ip, r1, ip
 8001550:	ea4f 168c 	mov.w	r6, ip, lsl #6
 8001554:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8001558:	0187      	lsls	r7, r0, #6
 800155a:	19c0      	adds	r0, r0, r7
 800155c:	eb4c 0c06 	adc.w	ip, ip, r6
 8001560:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001564:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 8001568:	0080      	lsls	r0, r0, #2
 800156a:	1900      	adds	r0, r0, r4
 800156c:	eb41 0c0c 	adc.w	ip, r1, ip
 8001570:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001574:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 8001578:	0080      	lsls	r0, r0, #2
 800157a:	1900      	adds	r0, r0, r4
 800157c:	eb41 010c 	adc.w	r1, r1, ip
 8001580:	f7ff fd50 	bl	8001024 <__aeabi_ldivmod>
 8001584:	4603      	mov	r3, r0
    var1 = (((int64_t)devBMP->calib_data.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001586:	f9b5 401e 	ldrsh.w	r4, [r5, #30]
 800158a:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 800158e:	0b42      	lsrs	r2, r0, #13
 8001590:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001594:	134f      	asrs	r7, r1, #13
 8001596:	fb04 f607 	mul.w	r6, r4, r7
 800159a:	fb02 660c 	mla	r6, r2, ip, r6
 800159e:	fba4 4c02 	umull	r4, ip, r4, r2
 80015a2:	4466      	add	r6, ip
 80015a4:	fb02 f606 	mul.w	r6, r2, r6
 80015a8:	fb04 6607 	mla	r6, r4, r7, r6
 80015ac:	fba2 2404 	umull	r2, r4, r2, r4
 80015b0:	4434      	add	r4, r6
 80015b2:	0e52      	lsrs	r2, r2, #25
 80015b4:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
    var2 = (((int64_t)devBMP->calib_data.dig_P8) * p) >> 19;
 80015b8:	f9b5 601c 	ldrsh.w	r6, [r5, #28]
 80015bc:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80015c0:	fb06 f701 	mul.w	r7, r6, r1
 80015c4:	fb0c 7700 	mla	r7, ip, r0, r7
 80015c8:	fba6 6000 	umull	r6, r0, r6, r0
 80015cc:	4407      	add	r7, r0
 80015ce:	0cf0      	lsrs	r0, r6, #19
 80015d0:	ea40 3047 	orr.w	r0, r0, r7, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)devBMP->calib_data.dig_P7) << 4);
 80015d4:	189b      	adds	r3, r3, r2
 80015d6:	eb41 6264 	adc.w	r2, r1, r4, asr #25
 80015da:	181b      	adds	r3, r3, r0
 80015dc:	eb42 42e7 	adc.w	r2, r2, r7, asr #19
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015e6:	f9b5 001a 	ldrsh.w	r0, [r5, #26]
    devBMP->pressure_Pa = (float)p / (float)(1 << 8); // + devBMP->pressure_ref;
 80015ea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80015ee:	2100      	movs	r1, #0
 80015f0:	f7ff fb6a 	bl	8000cc8 <__aeabi_l2f>
 80015f4:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80015f8:	f7ff fba4 	bl	8000d44 <__aeabi_fmul>
 80015fc:	6028      	str	r0, [r5, #0]
    return 1; // OK
 80015fe:	2401      	movs	r4, #1
}
 8001600:	4620      	mov	r0, r4
 8001602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001606 <BMP280_MeasureReference>:
uint8_t BMP280_MeasureReference(BMP280 *devBMP, float temp_ref, float press_ref) {
 8001606:	b570      	push	{r4, r5, r6, lr}
 8001608:	4604      	mov	r4, r0
 800160a:	460e      	mov	r6, r1
 800160c:	4615      	mov	r5, r2
    devBMP->temperature_ref = BMP280_ReadTemperature(devBMP) - temp_ref;
 800160e:	f7ff fed5 	bl	80013bc <BMP280_ReadTemperature>
 8001612:	f7ff fb43 	bl	8000c9c <__aeabi_i2f>
 8001616:	4631      	mov	r1, r6
 8001618:	f7ff fa8a 	bl	8000b30 <__aeabi_fsub>
 800161c:	6260      	str	r0, [r4, #36]	@ 0x24
    devBMP->pressure_ref = BMP280_ReadPressure(devBMP) - press_ref;
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff ff10 	bl	8001444 <BMP280_ReadPressure>
 8001624:	f7ff fb3a 	bl	8000c9c <__aeabi_i2f>
 8001628:	4629      	mov	r1, r5
 800162a:	f7ff fa81 	bl	8000b30 <__aeabi_fsub>
 800162e:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 8001630:	2001      	movs	r0, #1
 8001632:	bd70      	pop	{r4, r5, r6, pc}

08001634 <BMP280_ReadCalibrationData>:
void BMP280_ReadCalibrationData(BMP280 *devBMP) {
 8001634:	b530      	push	{r4, r5, lr}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	4605      	mov	r5, r0
	while((BMP280_ReadRegister(BMP280_REG_STATUS) & 0x04) != 0);
 800163a:	20f3      	movs	r0, #243	@ 0xf3
 800163c:	f7ff fea0 	bl	8001380 <BMP280_ReadRegister>
 8001640:	f010 0f04 	tst.w	r0, #4
 8001644:	d1f9      	bne.n	800163a <BMP280_ReadCalibrationData+0x6>
    for (int i = 0; i < 26; i++) {
 8001646:	2400      	movs	r4, #0
 8001648:	e00a      	b.n	8001660 <BMP280_ReadCalibrationData+0x2c>
        calib[i] = BMP280_ReadRegister(BMP280_REG_CALIB_00 + i);
 800164a:	f1a4 0078 	sub.w	r0, r4, #120	@ 0x78
 800164e:	b2c0      	uxtb	r0, r0
 8001650:	f7ff fe96 	bl	8001380 <BMP280_ReadRegister>
 8001654:	f104 0320 	add.w	r3, r4, #32
 8001658:	446b      	add	r3, sp
 800165a:	f803 0c1c 	strb.w	r0, [r3, #-28]
    for (int i = 0; i < 26; i++) {
 800165e:	3401      	adds	r4, #1
 8001660:	2c19      	cmp	r4, #25
 8001662:	ddf2      	ble.n	800164a <BMP280_ReadCalibrationData+0x16>
    devBMP->calib_data.dig_T1 = (calib[1] << 8) | calib[0];
 8001664:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001668:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800166c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001670:	812b      	strh	r3, [r5, #8]
    devBMP->calib_data.dig_T2 = (calib[3] << 8) | calib[2];
 8001672:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001676:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800167a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800167e:	816b      	strh	r3, [r5, #10]
    devBMP->calib_data.dig_T3 = (calib[5] << 8) | calib[4];
 8001680:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001684:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800168c:	81ab      	strh	r3, [r5, #12]
    devBMP->calib_data.dig_P1 = (calib[7] << 8) | calib[6];
 800168e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001692:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001696:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800169a:	81eb      	strh	r3, [r5, #14]
    devBMP->calib_data.dig_P2 = (calib[9] << 8) | calib[8];
 800169c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80016a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80016a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016a8:	822b      	strh	r3, [r5, #16]
    devBMP->calib_data.dig_P3 = (calib[11] << 8) | calib[10];
 80016aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80016ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80016b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016b6:	826b      	strh	r3, [r5, #18]
    devBMP->calib_data.dig_P4 = (calib[13] << 8) | calib[12];
 80016b8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80016bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80016c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016c4:	82ab      	strh	r3, [r5, #20]
    devBMP->calib_data.dig_P5 = (calib[15] << 8) | calib[14];
 80016c6:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80016ca:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80016ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016d2:	82eb      	strh	r3, [r5, #22]
    devBMP->calib_data.dig_P6 = (calib[17] << 8) | calib[16];
 80016d4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80016d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80016dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e0:	832b      	strh	r3, [r5, #24]
    devBMP->calib_data.dig_P7 = (calib[19] << 8) | calib[18];
 80016e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80016e6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80016ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016ee:	836b      	strh	r3, [r5, #26]
    devBMP->calib_data.dig_P8 = (calib[21] << 8) | calib[20];
 80016f0:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80016f4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80016f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016fc:	83ab      	strh	r3, [r5, #28]
    devBMP->calib_data.dig_P9 = (calib[23] << 8) | calib[22];
 80016fe:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8001702:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001706:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800170a:	83eb      	strh	r3, [r5, #30]
}
 800170c:	b009      	add	sp, #36	@ 0x24
 800170e:	bd30      	pop	{r4, r5, pc}

08001710 <BMP280_WriteRegister>:

uint8_t BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8001710:	b500      	push	{lr}
 8001712:	b083      	sub	sp, #12

    uint8_t data[2] = {reg, value};
 8001714:	f88d 0004 	strb.w	r0, [sp, #4]
 8001718:	f88d 1005 	strb.w	r1, [sp, #5]
    Write_GPIO(PA, 8, LOW); // Disable CS
 800171c:	2200      	movs	r2, #0
 800171e:	2108      	movs	r1, #8
 8001720:	2001      	movs	r0, #1
 8001722:	f000 fc9d 	bl	8002060 <Write_GPIO>
    SPI2_TX(data, 2);
 8001726:	2102      	movs	r1, #2
 8001728:	a801      	add	r0, sp, #4
 800172a:	f000 fd31 	bl	8002190 <SPI2_TX>
    Write_GPIO(PA, 8, HIGH); // Enable CS
 800172e:	2201      	movs	r2, #1
 8001730:	2108      	movs	r1, #8
 8001732:	4610      	mov	r0, r2
 8001734:	f000 fc94 	bl	8002060 <Write_GPIO>
    return 1; // OK
}
 8001738:	2001      	movs	r0, #1
 800173a:	b003      	add	sp, #12
 800173c:	f85d fb04 	ldr.w	pc, [sp], #4

08001740 <BMP280_Init>:
uint8_t BMP280_Init(BMP280 *devBMP, unsigned short spi_port) {
 8001740:	b510      	push	{r4, lr}
 8001742:	4604      	mov	r4, r0
	SPI_Init(spi_port);
 8001744:	4608      	mov	r0, r1
 8001746:	f000 fcbf 	bl	80020c8 <SPI_Init>
    BMP280_WriteRegister(BMP280_REG_RESET, BMP280_RESET_WORD); // Reset
 800174a:	21b6      	movs	r1, #182	@ 0xb6
 800174c:	20e0      	movs	r0, #224	@ 0xe0
 800174e:	f7ff ffdf 	bl	8001710 <BMP280_WriteRegister>
    if (BMP280_ReadRegister(BMP280_REG_ID) != BMP280_DEVICE_ID) {
 8001752:	20d0      	movs	r0, #208	@ 0xd0
 8001754:	f7ff fe14 	bl	8001380 <BMP280_ReadRegister>
 8001758:	2858      	cmp	r0, #88	@ 0x58
 800175a:	d001      	beq.n	8001760 <BMP280_Init+0x20>
        return 0; // Error
 800175c:	2000      	movs	r0, #0
}
 800175e:	bd10      	pop	{r4, pc}
    BMP280_ReadCalibrationData(devBMP);
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff ff67 	bl	8001634 <BMP280_ReadCalibrationData>
    BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, BMP280_SETTING_CTRL_MEAS_NORMAL);
 8001766:	2157      	movs	r1, #87	@ 0x57
 8001768:	20f4      	movs	r0, #244	@ 0xf4
 800176a:	f7ff ffd1 	bl	8001710 <BMP280_WriteRegister>
    BMP280_WriteRegister(BMP280_REG_CONFIG, BMP280_SETTING_CONFIG);
 800176e:	2108      	movs	r1, #8
 8001770:	20f5      	movs	r0, #245	@ 0xf5
 8001772:	f7ff ffcd 	bl	8001710 <BMP280_WriteRegister>
    BMP280_MeasureReference(devBMP, T0, 101325.0);
 8001776:	4a03      	ldr	r2, [pc, #12]	@ (8001784 <BMP280_Init+0x44>)
 8001778:	4903      	ldr	r1, [pc, #12]	@ (8001788 <BMP280_Init+0x48>)
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff ff43 	bl	8001606 <BMP280_MeasureReference>
    return 1;
 8001780:	2001      	movs	r0, #1
 8001782:	e7ec      	b.n	800175e <BMP280_Init+0x1e>
 8001784:	47c5e680 	.word	0x47c5e680
 8001788:	43901333 	.word	0x43901333

0800178c <Buzz>:
    {1, 280, 230, 100, 1000},  // PENDING
    {3, 280, 230, 100, 1000},  // ARMED
    {1, 280, 279, 3000, 10}    // CRASH
};

void Buzz(TIM_HandleTypeDef *htim, uint32_t channel, buzzRoutines_t routine){
 800178c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001790:	4606      	mov	r6, r0
 8001792:	460f      	mov	r7, r1
 8001794:	4614      	mov	r4, r2

	HAL_TIM_PWM_Start(htim, channel);
 8001796:	f004 f8af 	bl	80058f8 <HAL_TIM_PWM_Start>

	const buzzParametres_t *params = &buzzParams[routine];

	uint8_t counter = params->nbBips;
 800179a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <Buzz+0xe8>)
 80017a0:	f813 5022 	ldrb.w	r5, [r3, r2, lsl #2]
	int freq;

	while (counter > 0) {
 80017a4:	2d00      	cmp	r5, #0
 80017a6:	d05f      	beq.n	8001868 <Buzz+0xdc>
		if(Delay_Wait(params->delayPause)) {
 80017a8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80017ac:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <Buzz+0xe8>)
 80017ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80017b2:	6918      	ldr	r0, [r3, #16]
 80017b4:	f000 fc74 	bl	80020a0 <Delay_Wait>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	d0f3      	beq.n	80017a4 <Buzz+0x18>
			for(freq = params->frequencyStart; freq > params->frequencyEnd; freq--)
 80017bc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80017c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <Buzz+0xe8>)
 80017c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80017c6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80017ca:	e00b      	b.n	80017e4 <Buzz+0x58>
			{
				if(Delay_Wait(params->delayModulation) == true) {
					__HAL_TIM_SET_AUTORELOAD(htim, freq);
					__HAL_TIM_SET_COMPARE(htim, channel, freq);
 80017cc:	2f04      	cmp	r7, #4
 80017ce:	d028      	beq.n	8001822 <Buzz+0x96>
 80017d0:	2f08      	cmp	r7, #8
 80017d2:	d02a      	beq.n	800182a <Buzz+0x9e>
 80017d4:	6833      	ldr	r3, [r6, #0]
 80017d6:	f8c3 8040 	str.w	r8, [r3, #64]	@ 0x40
					Delay_Wait(params->delayModulation);
 80017da:	4648      	mov	r0, r9
 80017dc:	f000 fc60 	bl	80020a0 <Delay_Wait>
			for(freq = params->frequencyStart; freq > params->frequencyEnd; freq--)
 80017e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80017e4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <Buzz+0xe8>)
 80017ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4543      	cmp	r3, r8
 80017f2:	da1e      	bge.n	8001832 <Buzz+0xa6>
				if(Delay_Wait(params->delayModulation) == true) {
 80017f4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <Buzz+0xe8>)
 80017fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80017fe:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8001802:	4648      	mov	r0, r9
 8001804:	f000 fc4c 	bl	80020a0 <Delay_Wait>
 8001808:	2800      	cmp	r0, #0
 800180a:	d0e9      	beq.n	80017e0 <Buzz+0x54>
					__HAL_TIM_SET_AUTORELOAD(htim, freq);
 800180c:	6833      	ldr	r3, [r6, #0]
 800180e:	f8c3 802c 	str.w	r8, [r3, #44]	@ 0x2c
 8001812:	f8c6 800c 	str.w	r8, [r6, #12]
					__HAL_TIM_SET_COMPARE(htim, channel, freq);
 8001816:	2f00      	cmp	r7, #0
 8001818:	d1d8      	bne.n	80017cc <Buzz+0x40>
 800181a:	6833      	ldr	r3, [r6, #0]
 800181c:	f8c3 8034 	str.w	r8, [r3, #52]	@ 0x34
 8001820:	e7db      	b.n	80017da <Buzz+0x4e>
 8001822:	6833      	ldr	r3, [r6, #0]
 8001824:	f8c3 8038 	str.w	r8, [r3, #56]	@ 0x38
 8001828:	e7d7      	b.n	80017da <Buzz+0x4e>
 800182a:	6833      	ldr	r3, [r6, #0]
 800182c:	f8c3 803c 	str.w	r8, [r3, #60]	@ 0x3c
 8001830:	e7d3      	b.n	80017da <Buzz+0x4e>
				}
			}
			__HAL_TIM_SET_AUTORELOAD(htim, 0);
 8001832:	6832      	ldr	r2, [r6, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001838:	60f3      	str	r3, [r6, #12]
			__HAL_TIM_SET_COMPARE(htim, channel, 0);
 800183a:	b92f      	cbnz	r7, 8001848 <Buzz+0xbc>
 800183c:	6833      	ldr	r3, [r6, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	635a      	str	r2, [r3, #52]	@ 0x34
			counter--;
 8001842:	3d01      	subs	r5, #1
 8001844:	b2ed      	uxtb	r5, r5
 8001846:	e7ad      	b.n	80017a4 <Buzz+0x18>
			__HAL_TIM_SET_COMPARE(htim, channel, 0);
 8001848:	2f04      	cmp	r7, #4
 800184a:	d005      	beq.n	8001858 <Buzz+0xcc>
 800184c:	2f08      	cmp	r7, #8
 800184e:	d007      	beq.n	8001860 <Buzz+0xd4>
 8001850:	6833      	ldr	r3, [r6, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	641a      	str	r2, [r3, #64]	@ 0x40
 8001856:	e7f4      	b.n	8001842 <Buzz+0xb6>
 8001858:	6833      	ldr	r3, [r6, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	639a      	str	r2, [r3, #56]	@ 0x38
 800185e:	e7f0      	b.n	8001842 <Buzz+0xb6>
 8001860:	6833      	ldr	r3, [r6, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001866:	e7ec      	b.n	8001842 <Buzz+0xb6>
		}
	}

	HAL_TIM_PWM_Stop(htim, channel);
 8001868:	4639      	mov	r1, r7
 800186a:	4630      	mov	r0, r6
 800186c:	f004 f8e6 	bl	8005a3c <HAL_TIM_PWM_Stop>
}
 8001870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001874:	0800cf48 	.word	0x0800cf48

08001878 <CD74HC4051_Init>:

uint32_t ADC_Sampling (ADC_HandleTypeDef *hadc);

uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {

	if (hadc == NULL) {
 8001878:	b370      	cbz	r0, 80018d8 <CD74HC4051_Init+0x60>
uint8_t CD74HC4051_Init (ADC_HandleTypeDef *hadc) {
 800187a:	b510      	push	{r4, lr}
 800187c:	4604      	mov	r4, r0
		return 0; // Error
	}
	// Read pin
	Init_GPIO(PA, 0, IN, I_AN); // MUL_AN
 800187e:	2300      	movs	r3, #0
 8001880:	461a      	mov	r2, r3
 8001882:	4619      	mov	r1, r3
 8001884:	2001      	movs	r0, #1
 8001886:	f000 fba1 	bl	8001fcc <Init_GPIO>
	// Batteries
	Init_GPIO(PC, 13, OUT2, O_GP_PP); // MUL_S0
 800188a:	2300      	movs	r3, #0
 800188c:	2202      	movs	r2, #2
 800188e:	210d      	movs	r1, #13
 8001890:	2003      	movs	r0, #3
 8001892:	f000 fb9b 	bl	8001fcc <Init_GPIO>
	Init_GPIO(PC, 14, OUT2, O_GP_PP); // MUL_S1
 8001896:	2300      	movs	r3, #0
 8001898:	2202      	movs	r2, #2
 800189a:	210e      	movs	r1, #14
 800189c:	2003      	movs	r0, #3
 800189e:	f000 fb95 	bl	8001fcc <Init_GPIO>
	Init_GPIO(PC, 15, OUT2, O_GP_PP); // MUL_S2
 80018a2:	2300      	movs	r3, #0
 80018a4:	2202      	movs	r2, #2
 80018a6:	210f      	movs	r1, #15
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 fb8f 	bl	8001fcc <Init_GPIO>
	Init_GPIO(PB, 8, OUT2, O_GP_PP); // MUL_E~
 80018ae:	2300      	movs	r3, #0
 80018b0:	2202      	movs	r2, #2
 80018b2:	2108      	movs	r1, #8
 80018b4:	4610      	mov	r0, r2
 80018b6:	f000 fb89 	bl	8001fcc <Init_GPIO>
	// Set MUL_E~ (inverse)
	Write_GPIO(PB, 8, HIGH);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2108      	movs	r1, #8
 80018be:	2002      	movs	r0, #2
 80018c0:	f000 fbce 	bl	8002060 <Write_GPIO>
	// Pyros
	Pyro_Init();
 80018c4:	f000 faca 	bl	8001e5c <Pyro_Init>

	//ADC calibration
	ADC_Stop(hadc);
 80018c8:	4620      	mov	r0, r4
 80018ca:	f000 fb5f 	bl	8001f8c <ADC_Stop>
	ADC_Calibration(hadc);
 80018ce:	4620      	mov	r0, r4
 80018d0:	f000 fb57 	bl	8001f82 <ADC_Calibration>

	return 1; // OK
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	bd10      	pop	{r4, pc}
		return 0; // Error
 80018d8:	2000      	movs	r0, #0
}
 80018da:	4770      	bx	lr

080018dc <CD74HC4051_AnRead>:

uint16_t CD74HC4051_AnRead(ADC_HandleTypeDef *hadc, uint8_t channel, uint8_t pyro_channel, float vref) {

	if (hadc == NULL) {
 80018dc:	2800      	cmp	r0, #0
 80018de:	d060      	beq.n	80019a2 <CD74HC4051_AnRead+0xc6>
uint16_t CD74HC4051_AnRead(ADC_HandleTypeDef *hadc, uint8_t channel, uint8_t pyro_channel, float vref) {
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	460c      	mov	r4, r1
 80018e4:	4615      	mov	r5, r2
 80018e6:	461e      	mov	r6, r3
 80018e8:	4607      	mov	r7, r0
		return 0;
	}
	if(channel == CHANNEL_1 || channel == CHANNEL_7) {
 80018ea:	2901      	cmp	r1, #1
 80018ec:	d05b      	beq.n	80019a6 <CD74HC4051_AnRead+0xca>
		return 0;
	}

	ADC_Start(hadc);
 80018ee:	f000 fb43 	bl	8001f78 <ADC_Start>

	Write_GPIO(PB, 8, HIGH); // MUL_E~ (inverse)
 80018f2:	2201      	movs	r2, #1
 80018f4:	2108      	movs	r1, #8
 80018f6:	2002      	movs	r0, #2
 80018f8:	f000 fbb2 	bl	8002060 <Write_GPIO>
	Write_GPIO(PA, 15, LOW); // Pyro_Test (inverse)
 80018fc:	2200      	movs	r2, #0
 80018fe:	210f      	movs	r1, #15
 8001900:	2001      	movs	r0, #1
 8001902:	f000 fbad 	bl	8002060 <Write_GPIO>
	if(channel == CHANNEL_0) {
 8001906:	b98c      	cbnz	r4, 800192c <CD74HC4051_AnRead+0x50>
		if(pyro_channel == PYRO_CHANNEL_0) {
 8001908:	2d01      	cmp	r5, #1
 800190a:	d003      	beq.n	8001914 <CD74HC4051_AnRead+0x38>
			Write_GPIO(PB, 4, HIGH); // Pyro_ON0
		} else if (pyro_channel == PYRO_CHANNEL_1) {
 800190c:	2d02      	cmp	r5, #2
 800190e:	d007      	beq.n	8001920 <CD74HC4051_AnRead+0x44>
			Write_GPIO(PB, 5, HIGH); // Pyro_ON1
		} else {
			return 0;
 8001910:	2000      	movs	r0, #0
 8001912:	e045      	b.n	80019a0 <CD74HC4051_AnRead+0xc4>
			Write_GPIO(PB, 4, HIGH); // Pyro_ON0
 8001914:	2201      	movs	r2, #1
 8001916:	2104      	movs	r1, #4
 8001918:	2002      	movs	r0, #2
 800191a:	f000 fba1 	bl	8002060 <Write_GPIO>
 800191e:	e017      	b.n	8001950 <CD74HC4051_AnRead+0x74>
			Write_GPIO(PB, 5, HIGH); // Pyro_ON1
 8001920:	2201      	movs	r2, #1
 8001922:	2105      	movs	r1, #5
 8001924:	2002      	movs	r0, #2
 8001926:	f000 fb9b 	bl	8002060 <Write_GPIO>
 800192a:	e011      	b.n	8001950 <CD74HC4051_AnRead+0x74>
		}
	} else {
		// Set channel
		Write_GPIO(PC, 13, (channel & 0x01) ? HIGH : LOW);
 800192c:	f004 0201 	and.w	r2, r4, #1
 8001930:	210d      	movs	r1, #13
 8001932:	2003      	movs	r0, #3
 8001934:	f000 fb94 	bl	8002060 <Write_GPIO>
		Write_GPIO(PC, 14, (channel & 0x02) ? HIGH : LOW);
 8001938:	f3c4 0240 	ubfx	r2, r4, #1, #1
 800193c:	210e      	movs	r1, #14
 800193e:	2003      	movs	r0, #3
 8001940:	f000 fb8e 	bl	8002060 <Write_GPIO>
		Write_GPIO(PC, 15, (channel & 0x04) ? HIGH : LOW);
 8001944:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8001948:	210f      	movs	r1, #15
 800194a:	2003      	movs	r0, #3
 800194c:	f000 fb88 	bl	8002060 <Write_GPIO>
	}
	// Reactiver multiplexer pour lecture
	Write_GPIO(PB, 8, LOW); // MUL_E~ (inverse)
 8001950:	2200      	movs	r2, #0
 8001952:	2108      	movs	r1, #8
 8001954:	2002      	movs	r0, #2
 8001956:	f000 fb83 	bl	8002060 <Write_GPIO>
	// Lecture
	uint32_t adc_value = ADC_Sampling(hadc);
 800195a:	4638      	mov	r0, r7
 800195c:	f000 fb1c 	bl	8001f98 <ADC_Sampling>
 8001960:	4604      	mov	r4, r0
	// Desactiver pyros (ordre important)
	Write_GPIO(PB, 4, LOW); // Pyro_ON0
 8001962:	2200      	movs	r2, #0
 8001964:	2104      	movs	r1, #4
 8001966:	2002      	movs	r0, #2
 8001968:	f000 fb7a 	bl	8002060 <Write_GPIO>
	Write_GPIO(PB, 5, LOW); // Pyro_ON1
 800196c:	2200      	movs	r2, #0
 800196e:	2105      	movs	r1, #5
 8001970:	2002      	movs	r0, #2
 8001972:	f000 fb75 	bl	8002060 <Write_GPIO>
	Write_GPIO(PA, 15, HIGH); // Pyro_Test~
 8001976:	2201      	movs	r2, #1
 8001978:	210f      	movs	r1, #15
 800197a:	4610      	mov	r0, r2
 800197c:	f000 fb70 	bl	8002060 <Write_GPIO>

	return (uint16_t)((adc_value * vref / 4096) * 1000);
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff f987 	bl	8000c94 <__aeabi_ui2f>
 8001986:	4631      	mov	r1, r6
 8001988:	f7ff f9dc 	bl	8000d44 <__aeabi_fmul>
 800198c:	f04f 5166 	mov.w	r1, #964689920	@ 0x39800000
 8001990:	f7ff f9d8 	bl	8000d44 <__aeabi_fmul>
 8001994:	4905      	ldr	r1, [pc, #20]	@ (80019ac <CD74HC4051_AnRead+0xd0>)
 8001996:	f7ff f9d5 	bl	8000d44 <__aeabi_fmul>
 800199a:	f7ff fb23 	bl	8000fe4 <__aeabi_f2uiz>
 800199e:	b280      	uxth	r0, r0
}
 80019a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 80019a2:	2000      	movs	r0, #0
}
 80019a4:	4770      	bx	lr
		return 0;
 80019a6:	2000      	movs	r0, #0
 80019a8:	e7fa      	b.n	80019a0 <CD74HC4051_AnRead+0xc4>
 80019aa:	bf00      	nop
 80019ac:	447a0000 	.word	0x447a0000

080019b0 <HM10BLE_Send>:

	USART_RX(usart_port, response, sizeof(response));
	return 1; // OK
}

uint8_t HM10BLE_Send(unsigned short usart_port, uint8_t *message, uint8_t size) {
 80019b0:	b508      	push	{r3, lr}

	USART_TX(usart_port, message, sizeof(message));
 80019b2:	2204      	movs	r2, #4
 80019b4:	f000 fc90 	bl	80022d8 <USART_TX>
	return 1; // OK
}
 80019b8:	2001      	movs	r0, #1
 80019ba:	bd08      	pop	{r3, pc}

080019bc <HM10BLE_Init>:
uint8_t HM10BLE_Init(HM10BLE *devHM10, unsigned short usart_port) {
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4604      	mov	r4, r0
 80019c0:	460d      	mov	r5, r1
	HM10BLE_Send(usart_port, (uint8_t *)"AT\n", strlen("AT\n"));							// Awake
 80019c2:	2203      	movs	r2, #3
 80019c4:	490b      	ldr	r1, [pc, #44]	@ (80019f4 <HM10BLE_Init+0x38>)
 80019c6:	4628      	mov	r0, r5
 80019c8:	f7ff fff2 	bl	80019b0 <HM10BLE_Send>
	HM10BLE_Send(usart_port, (uint8_t *)"AT+NAMEBulldogs\n", strlen("AT+NAMEMerope\n"));	// Name device
 80019cc:	220e      	movs	r2, #14
 80019ce:	490a      	ldr	r1, [pc, #40]	@ (80019f8 <HM10BLE_Init+0x3c>)
 80019d0:	4628      	mov	r0, r5
 80019d2:	f7ff ffed 	bl	80019b0 <HM10BLE_Send>
	HM10BLE_Send(usart_port, (uint8_t *)"AT+IMME1\n", strlen("AT+IMME1\n"));				// Start
 80019d6:	2209      	movs	r2, #9
 80019d8:	4908      	ldr	r1, [pc, #32]	@ (80019fc <HM10BLE_Init+0x40>)
 80019da:	4628      	mov	r0, r5
 80019dc:	f7ff ffe8 	bl	80019b0 <HM10BLE_Send>
	devHM10->hm10_status = false;
 80019e0:	2300      	movs	r3, #0
 80019e2:	7023      	strb	r3, [r4, #0]
	devHM10->rfd_status = false;
 80019e4:	7063      	strb	r3, [r4, #1]
	devHM10->icm_status = false;
 80019e6:	70a3      	strb	r3, [r4, #2]
	devHM10->l76lm33_status = false;
 80019e8:	70e3      	strb	r3, [r4, #3]
	devHM10->bmp_status = false;
 80019ea:	7123      	strb	r3, [r4, #4]
	devHM10->bat_status = 0x00;
 80019ec:	7163      	strb	r3, [r4, #5]
	devHM10->sd_status = false;
 80019ee:	71a3      	strb	r3, [r4, #6]
}
 80019f0:	2001      	movs	r0, #1
 80019f2:	bd38      	pop	{r3, r4, r5, pc}
 80019f4:	0800cfac 	.word	0x0800cfac
 80019f8:	0800cfb0 	.word	0x0800cfb0
 80019fc:	0800cfc4 	.word	0x0800cfc4

08001a00 <ICM20602_Read>:
{
	return Read_GPIO(PA, 10);
}

void ICM20602_Read(uint8_t address, uint8_t rxData[], uint8_t size)
{
 8001a00:	b530      	push	{r4, r5, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	460c      	mov	r4, r1
 8001a06:	4615      	mov	r5, r2
 8001a08:	f88d 0007 	strb.w	r0, [sp, #7]
	address |= 0x80;  // read operation
 8001a0c:	b2c3      	uxtb	r3, r0
 8001a0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a12:	f88d 3007 	strb.w	r3, [sp, #7]

	Write_GPIO(PB, 12, LOW);
 8001a16:	2200      	movs	r2, #0
 8001a18:	210c      	movs	r1, #12
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f000 fb20 	bl	8002060 <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8001a20:	2101      	movs	r1, #1
 8001a22:	f10d 0007 	add.w	r0, sp, #7
 8001a26:	f000 fbb3 	bl	8002190 <SPI2_TX>
	SPI2_RX(rxData, size);  // receive 6 bytes data
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f000 fbcd 	bl	80021cc <SPI2_RX>
	Write_GPIO(PB, 12, HIGH);
 8001a32:	2201      	movs	r2, #1
 8001a34:	210c      	movs	r1, #12
 8001a36:	2002      	movs	r0, #2
 8001a38:	f000 fb12 	bl	8002060 <Write_GPIO>
}
 8001a3c:	b003      	add	sp, #12
 8001a3e:	bd30      	pop	{r4, r5, pc}

08001a40 <ICM20602_Write>:

void ICM20602_Write(uint8_t address, uint8_t value)
{
 8001a40:	b500      	push	{lr}
 8001a42:	b083      	sub	sp, #12
 8001a44:	f88d 0007 	strb.w	r0, [sp, #7]
 8001a48:	f88d 1006 	strb.w	r1, [sp, #6]
	Write_GPIO(PB, 12, LOW);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	210c      	movs	r1, #12
 8001a50:	2002      	movs	r0, #2
 8001a52:	f000 fb05 	bl	8002060 <Write_GPIO>
	SPI2_TX(&address, 1);  // send address
 8001a56:	2101      	movs	r1, #1
 8001a58:	f10d 0007 	add.w	r0, sp, #7
 8001a5c:	f000 fb98 	bl	8002190 <SPI2_TX>
	SPI2_TX(&value, 1);  // send value
 8001a60:	2101      	movs	r1, #1
 8001a62:	f10d 0006 	add.w	r0, sp, #6
 8001a66:	f000 fb93 	bl	8002190 <SPI2_TX>
	Write_GPIO(PB, 12, HIGH);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	210c      	movs	r1, #12
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f000 faf6 	bl	8002060 <Write_GPIO>
	HAL_Delay(20);
 8001a74:	2014      	movs	r0, #20
 8001a76:	f001 fd29 	bl	80034cc <HAL_Delay>
}
 8001a7a:	b003      	add	sp, #12
 8001a7c:	f85d fb04 	ldr.w	pc, [sp], #4

08001a80 <ICM20602_Remove_DC_Offset>:
{
 8001a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	460d      	mov	r5, r1
	int16_t offset[3] = {0,0,0};
 8001a88:	2400      	movs	r4, #0
 8001a8a:	f8ad 4008 	strh.w	r4, [sp, #8]
 8001a8e:	f8ad 400a 	strh.w	r4, [sp, #10]
 8001a92:	f8ad 400c 	strh.w	r4, [sp, #12]
	for(i = 0; i < mean; i++)
 8001a96:	e027      	b.n	8001ae8 <ICM20602_Remove_DC_Offset+0x68>
		ICM20602_Read(ICM20602_REG_GYRO_XOUT_H, rxData, 6);
 8001a98:	2206      	movs	r2, #6
 8001a9a:	4669      	mov	r1, sp
 8001a9c:	2043      	movs	r0, #67	@ 0x43
 8001a9e:	f7ff ffaf 	bl	8001a00 <ICM20602_Read>
		offset[0] += (rxData[0] << 8) | rxData[1];
 8001aa2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8001aa6:	f89d 1000 	ldrb.w	r1, [sp]
 8001aaa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001aae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f8ad 3008 	strh.w	r3, [sp, #8]
		offset[1] += (rxData[2] << 8) | rxData[3];
 8001ab8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001abc:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001ac0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001ac4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ac8:	4413      	add	r3, r2
 8001aca:	f8ad 300a 	strh.w	r3, [sp, #10]
		offset[2] += (rxData[4] << 8) | rxData[5];
 8001ace:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001ad2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001ad6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001ada:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ade:	4413      	add	r3, r2
 8001ae0:	f8ad 300c 	strh.w	r3, [sp, #12]
	for(i = 0; i < mean; i++)
 8001ae4:	3401      	adds	r4, #1
 8001ae6:	b264      	sxtb	r4, r4
 8001ae8:	42ac      	cmp	r4, r5
 8001aea:	dbd5      	blt.n	8001a98 <ICM20602_Remove_DC_Offset+0x18>
	offset[0] /= mean;
 8001aec:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 8001af0:	fb97 f7f5 	sdiv	r7, r7, r5
 8001af4:	b239      	sxth	r1, r7
 8001af6:	f8ad 1008 	strh.w	r1, [sp, #8]
	offset[1] /= mean;
 8001afa:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8001afe:	fb96 f6f5 	sdiv	r6, r6, r5
 8001b02:	fa0f f886 	sxth.w	r8, r6
 8001b06:	f8ad 800a 	strh.w	r8, [sp, #10]
	offset[2] /= mean;
 8001b0a:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 8001b0e:	fb94 f4f5 	sdiv	r4, r4, r5
 8001b12:	b225      	sxth	r5, r4
 8001b14:	f8ad 500c 	strh.w	r5, [sp, #12]
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRH, (offset[0]*-2)>>8);
 8001b18:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
 8001b1c:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 8001b20:	2013      	movs	r0, #19
 8001b22:	f7ff ff8d 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_XG_OFFS_USRL, offset[0]*-2);
 8001b26:	ebc7 17c7 	rsb	r7, r7, r7, lsl #7
 8001b2a:	0079      	lsls	r1, r7, #1
 8001b2c:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001b30:	2014      	movs	r0, #20
 8001b32:	f7ff ff85 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRH, (offset[1]*-2)>>8);
 8001b36:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8001b3a:	f3c8 11c7 	ubfx	r1, r8, #7, #8
 8001b3e:	2015      	movs	r0, #21
 8001b40:	f7ff ff7e 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_YG_OFFS_USRL, offset[1]*-2);
 8001b44:	ebc6 16c6 	rsb	r6, r6, r6, lsl #7
 8001b48:	0071      	lsls	r1, r6, #1
 8001b4a:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001b4e:	2016      	movs	r0, #22
 8001b50:	f7ff ff76 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRH, (offset[2]*-2)>>8);
 8001b54:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8001b58:	f3c5 11c7 	ubfx	r1, r5, #7, #8
 8001b5c:	2017      	movs	r0, #23
 8001b5e:	f7ff ff6f 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ZG_OFFS_USRL, offset[2]*-2);
 8001b62:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
 8001b66:	0061      	lsls	r1, r4, #1
 8001b68:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 8001b6c:	2018      	movs	r0, #24
 8001b6e:	f7ff ff67 	bl	8001a40 <ICM20602_Write>
}
 8001b72:	b004      	add	sp, #16
 8001b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b78 <ICM20602_Init>:
{
 8001b78:	b530      	push	{r4, r5, lr}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	4604      	mov	r4, r0
	dev->gyroXRaw = 	0.0f;
 8001b7e:	2500      	movs	r5, #0
 8001b80:	8005      	strh	r5, [r0, #0]
	dev->gyroYRaw = 	0.0f;
 8001b82:	8045      	strh	r5, [r0, #2]
	dev->gyroZRaw = 	0.0f;
 8001b84:	8085      	strh	r5, [r0, #4]
	dev->accXRaw = 		0.0f;
 8001b86:	80c5      	strh	r5, [r0, #6]
	dev->accYRaw = 		0.0f;
 8001b88:	8105      	strh	r5, [r0, #8]
	dev->accZRaw = 		0.0f;
 8001b8a:	8145      	strh	r5, [r0, #10]
	dev->temperatureC = 0.0f;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	6243      	str	r3, [r0, #36]	@ 0x24
	Init_GPIO(PA,  10, IN, I_PP); // Init GPIO for the interrupt
 8001b90:	2302      	movs	r3, #2
 8001b92:	462a      	mov	r2, r5
 8001b94:	210a      	movs	r1, #10
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 fa18 	bl	8001fcc <Init_GPIO>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x80);
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	206b      	movs	r0, #107	@ 0x6b
 8001ba0:	f7ff ff4e 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_I2C_IF, 0x40);
 8001ba4:	2140      	movs	r1, #64	@ 0x40
 8001ba6:	2070      	movs	r0, #112	@ 0x70
 8001ba8:	f7ff ff4a 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_PWR_MGMT_1, 0x01);
 8001bac:	2101      	movs	r1, #1
 8001bae:	206b      	movs	r0, #107	@ 0x6b
 8001bb0:	f7ff ff46 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_SMPLRT_DIV, 0x00);
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	2019      	movs	r0, #25
 8001bb8:	f7ff ff42 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_CONFIG, 0x05);
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	201a      	movs	r0, #26
 8001bc0:	f7ff ff3e 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_GYRO_CONFIG, 0x018);
 8001bc4:	2118      	movs	r1, #24
 8001bc6:	201b      	movs	r0, #27
 8001bc8:	f7ff ff3a 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG, 0x18);
 8001bcc:	2118      	movs	r1, #24
 8001bce:	201c      	movs	r0, #28
 8001bd0:	f7ff ff36 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	201d      	movs	r0, #29
 8001bd8:	f7ff ff32 	bl	8001a40 <ICM20602_Write>
	ICM20602_Write(ICM20602_REG_INT_ENABLE, 0x01);
 8001bdc:	2101      	movs	r1, #1
 8001bde:	2038      	movs	r0, #56	@ 0x38
 8001be0:	f7ff ff2e 	bl	8001a40 <ICM20602_Write>
	ICM20602_Read(ICM20602_REG_WHO_AM_I, rxData, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	a901      	add	r1, sp, #4
 8001be8:	2075      	movs	r0, #117	@ 0x75
 8001bea:	f7ff ff09 	bl	8001a00 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_I2C_IF, rxData, 1);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	a901      	add	r1, sp, #4
 8001bf2:	2070      	movs	r0, #112	@ 0x70
 8001bf4:	f7ff ff04 	bl	8001a00 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_PWR_MGMT_1, rxData, 1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	a901      	add	r1, sp, #4
 8001bfc:	206b      	movs	r0, #107	@ 0x6b
 8001bfe:	f7ff feff 	bl	8001a00 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_SMPLRT_DIV, rxData, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	a901      	add	r1, sp, #4
 8001c06:	2019      	movs	r0, #25
 8001c08:	f7ff fefa 	bl	8001a00 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_CONFIG, rxData, 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	a901      	add	r1, sp, #4
 8001c10:	201a      	movs	r0, #26
 8001c12:	f7ff fef5 	bl	8001a00 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG, rxData, 1);
 8001c16:	2201      	movs	r2, #1
 8001c18:	a901      	add	r1, sp, #4
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f7ff fef0 	bl	8001a00 <ICM20602_Read>
	ICM20602_Read(ICM20602_REG_ACCEL_CONFIG2, rxData, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	a901      	add	r1, sp, #4
 8001c24:	201d      	movs	r0, #29
 8001c26:	f7ff feeb 	bl	8001a00 <ICM20602_Read>
	ICM20602_Remove_DC_Offset(dev,2);
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff ff27 	bl	8001a80 <ICM20602_Remove_DC_Offset>
}
 8001c32:	4628      	mov	r0, r5
 8001c34:	b003      	add	sp, #12
 8001c36:	bd30      	pop	{r4, r5, pc}

08001c38 <L76LM33_SendCommand>:
    return 1; // OK
}

uint8_t L76LM33_SendCommand(unsigned short usart_port, char *command) {

    if (command == NULL) {
 8001c38:	b161      	cbz	r1, 8001c54 <L76LM33_SendCommand+0x1c>
uint8_t L76LM33_SendCommand(unsigned short usart_port, char *command) {
 8001c3a:	b538      	push	{r3, r4, r5, lr}
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	460d      	mov	r5, r1
        return 0; // Error
    }
    USART_TX(usart_port, (uint8_t*)command, strlen(command));
 8001c40:	4608      	mov	r0, r1
 8001c42:	f7fe fa85 	bl	8000150 <strlen>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4629      	mov	r1, r5
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f000 fb44 	bl	80022d8 <USART_TX>
    return 1; // OK
 8001c50:	2001      	movs	r0, #1
}
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
        return 0; // Error
 8001c54:	2000      	movs	r0, #0
}
 8001c56:	4770      	bx	lr

08001c58 <L76LM33_Init>:
uint8_t L76LM33_Init(unsigned short usart_port) {
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	b09a      	sub	sp, #104	@ 0x68
 8001c5c:	4606      	mov	r6, r0
    char PROTOCOL_SETRMS[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*35\r\n";
 8001c5e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8001c62:	4c17      	ldr	r4, [pc, #92]	@ (8001cc0 <L76LM33_Init+0x68>)
 8001c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c76:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c7a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8001c7e:	f8ac 2000 	strh.w	r2, [ip]
    char PROTOCOL_GPSSEARCHONLY[] = "$PMTK353,1,0,0,0,0*2A\r\n";
 8001c82:	ac05      	add	r4, sp, #20
 8001c84:	4d0f      	ldr	r5, [pc, #60]	@ (8001cc4 <L76LM33_Init+0x6c>)
 8001c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c8e:	e884 0003 	stmia.w	r4, {r0, r1}
    char PROTOCOL_NAVMODE[] = "PMTK886,2*2A\r\n";
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <L76LM33_Init+0x70>)
 8001c94:	ac01      	add	r4, sp, #4
 8001c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c98:	c407      	stmia	r4!, {r0, r1, r2}
 8001c9a:	f824 3b02 	strh.w	r3, [r4], #2
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	7023      	strb	r3, [r4, #0]
    L76LM33_SendCommand(usart_port, PROTOCOL_SETRMS);
 8001ca2:	a90b      	add	r1, sp, #44	@ 0x2c
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	f7ff ffc7 	bl	8001c38 <L76LM33_SendCommand>
    L76LM33_SendCommand(usart_port, PROTOCOL_GPSSEARCHONLY);
 8001caa:	a905      	add	r1, sp, #20
 8001cac:	4630      	mov	r0, r6
 8001cae:	f7ff ffc3 	bl	8001c38 <L76LM33_SendCommand>
    L76LM33_SendCommand(usart_port, PROTOCOL_NAVMODE);
 8001cb2:	a901      	add	r1, sp, #4
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f7ff ffbf 	bl	8001c38 <L76LM33_SendCommand>
}
 8001cba:	2001      	movs	r0, #1
 8001cbc:	b01a      	add	sp, #104	@ 0x68
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}
 8001cc0:	0800cfd0 	.word	0x0800cfd0
 8001cc4:	0800d00c 	.word	0x0800d00c
 8001cc8:	0800d024 	.word	0x0800d024

08001ccc <FATFS_ErrorToString>:
void MEM2067_Unmount(void);

// Debugging
const char* FATFS_ErrorToString(FRESULT result) {

    switch (result) {
 8001ccc:	2813      	cmp	r0, #19
 8001cce:	d831      	bhi.n	8001d34 <FATFS_ErrorToString+0x68>
 8001cd0:	e8df f000 	tbb	[pc, r0]
 8001cd4:	0e0c320a 	.word	0x0e0c320a
 8001cd8:	16141210 	.word	0x16141210
 8001cdc:	1e1c1a18 	.word	0x1e1c1a18
 8001ce0:	26242220 	.word	0x26242220
 8001ce4:	2e2c2a28 	.word	0x2e2c2a28
 8001ce8:	4814      	ldr	r0, [pc, #80]	@ (8001d3c <FATFS_ErrorToString+0x70>)
 8001cea:	4770      	bx	lr
        case FR_OK: return "Succeeded\r\n";
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer\r\n";
        case FR_INT_ERR: return "Assertion failed\r\n";
 8001cec:	4814      	ldr	r0, [pc, #80]	@ (8001d40 <FATFS_ErrorToString+0x74>)
 8001cee:	4770      	bx	lr
        case FR_NOT_READY: return "The physical drive cannot work\r\n";
 8001cf0:	4814      	ldr	r0, [pc, #80]	@ (8001d44 <FATFS_ErrorToString+0x78>)
 8001cf2:	4770      	bx	lr
        case FR_NO_FILE: return "Could not find the file\r\n";
 8001cf4:	4814      	ldr	r0, [pc, #80]	@ (8001d48 <FATFS_ErrorToString+0x7c>)
 8001cf6:	4770      	bx	lr
        case FR_NO_PATH: return "Could not find the path\r\n";
 8001cf8:	4814      	ldr	r0, [pc, #80]	@ (8001d4c <FATFS_ErrorToString+0x80>)
 8001cfa:	4770      	bx	lr
        case FR_INVALID_NAME: return "The path name format is invalid\r\n";
 8001cfc:	4814      	ldr	r0, [pc, #80]	@ (8001d50 <FATFS_ErrorToString+0x84>)
 8001cfe:	4770      	bx	lr
        case FR_DENIED: return "Access denied due to prohibited access or directory full\r\n";
 8001d00:	4814      	ldr	r0, [pc, #80]	@ (8001d54 <FATFS_ErrorToString+0x88>)
 8001d02:	4770      	bx	lr
        case FR_EXIST: return "Access denied due to prohibited access\r\n";
 8001d04:	4814      	ldr	r0, [pc, #80]	@ (8001d58 <FATFS_ErrorToString+0x8c>)
 8001d06:	4770      	bx	lr
        case FR_INVALID_OBJECT: return "The file/directory object is invalid\r\n";
 8001d08:	4814      	ldr	r0, [pc, #80]	@ (8001d5c <FATFS_ErrorToString+0x90>)
 8001d0a:	4770      	bx	lr
        case FR_WRITE_PROTECTED: return "The physical drive is write protected\r\n";
 8001d0c:	4814      	ldr	r0, [pc, #80]	@ (8001d60 <FATFS_ErrorToString+0x94>)
 8001d0e:	4770      	bx	lr
        case FR_INVALID_DRIVE: return "The logical drive number is invalid\r\n";
 8001d10:	4814      	ldr	r0, [pc, #80]	@ (8001d64 <FATFS_ErrorToString+0x98>)
 8001d12:	4770      	bx	lr
        case FR_NOT_ENABLED: return "The volume has no work area\r\n";
 8001d14:	4814      	ldr	r0, [pc, #80]	@ (8001d68 <FATFS_ErrorToString+0x9c>)
 8001d16:	4770      	bx	lr
        case FR_NO_FILESYSTEM: return "There is no valid FAT volume\r\n";
 8001d18:	4814      	ldr	r0, [pc, #80]	@ (8001d6c <FATFS_ErrorToString+0xa0>)
 8001d1a:	4770      	bx	lr
        case FR_MKFS_ABORTED: return "The f_mkfs() aborted due to any parameter error\r\n";
 8001d1c:	4814      	ldr	r0, [pc, #80]	@ (8001d70 <FATFS_ErrorToString+0xa4>)
 8001d1e:	4770      	bx	lr
        case FR_TIMEOUT: return "Could not get a grant to access the volume within defined period\r\n";
 8001d20:	4814      	ldr	r0, [pc, #80]	@ (8001d74 <FATFS_ErrorToString+0xa8>)
 8001d22:	4770      	bx	lr
        case FR_LOCKED: return "The operation is rejected according to the file sharing policy\r\n";
 8001d24:	4814      	ldr	r0, [pc, #80]	@ (8001d78 <FATFS_ErrorToString+0xac>)
 8001d26:	4770      	bx	lr
        case FR_NOT_ENOUGH_CORE: return "LFN working buffer could not be allocated\r\n";
 8001d28:	4814      	ldr	r0, [pc, #80]	@ (8001d7c <FATFS_ErrorToString+0xb0>)
 8001d2a:	4770      	bx	lr
        case FR_TOO_MANY_OPEN_FILES: return "Number of open files > _FS_SHARE\r\n";
 8001d2c:	4814      	ldr	r0, [pc, #80]	@ (8001d80 <FATFS_ErrorToString+0xb4>)
 8001d2e:	4770      	bx	lr
        case FR_INVALID_PARAMETER: return "Given parameter is invalid\r\n";
 8001d30:	4814      	ldr	r0, [pc, #80]	@ (8001d84 <FATFS_ErrorToString+0xb8>)
 8001d32:	4770      	bx	lr
        default: return "Unknown error";
 8001d34:	4814      	ldr	r0, [pc, #80]	@ (8001d88 <FATFS_ErrorToString+0xbc>)
 8001d36:	4770      	bx	lr
        case FR_DISK_ERR: return "A hard error occurred in the low level disk I/O layer\r\n";
 8001d38:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <FATFS_ErrorToString+0xc0>)
    }
}
 8001d3a:	4770      	bx	lr
 8001d3c:	0800d034 	.word	0x0800d034
 8001d40:	0800d078 	.word	0x0800d078
 8001d44:	0800d08c 	.word	0x0800d08c
 8001d48:	0800d0b0 	.word	0x0800d0b0
 8001d4c:	0800d0cc 	.word	0x0800d0cc
 8001d50:	0800d0e8 	.word	0x0800d0e8
 8001d54:	0800d10c 	.word	0x0800d10c
 8001d58:	0800d148 	.word	0x0800d148
 8001d5c:	0800d174 	.word	0x0800d174
 8001d60:	0800d19c 	.word	0x0800d19c
 8001d64:	0800d1c4 	.word	0x0800d1c4
 8001d68:	0800d1ec 	.word	0x0800d1ec
 8001d6c:	0800d20c 	.word	0x0800d20c
 8001d70:	0800d22c 	.word	0x0800d22c
 8001d74:	0800d260 	.word	0x0800d260
 8001d78:	0800d2a4 	.word	0x0800d2a4
 8001d7c:	0800d2e8 	.word	0x0800d2e8
 8001d80:	0800d314 	.word	0x0800d314
 8001d84:	0800d338 	.word	0x0800d338
 8001d88:	0800d358 	.word	0x0800d358
 8001d8c:	0800d040 	.word	0x0800d040

08001d90 <MEM2067_Write>:
	f_close(&fil);

	return 1;
}

void MEM2067_Write(char *filename, char* data) {
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	460d      	mov	r5, r1

	fresult = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001d94:	2212      	movs	r2, #18
 8001d96:	4601      	mov	r1, r0
 8001d98:	480d      	ldr	r0, [pc, #52]	@ (8001dd0 <MEM2067_Write+0x40>)
 8001d9a:	f007 f939 	bl	8009010 <f_open>
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <MEM2067_Write+0x44>)
 8001da0:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK){
 8001da2:	b970      	cbnz	r0, 8001dc2 <MEM2067_Write+0x32>
		printf(" -> SD Card open: %s", FATFS_ErrorToString(fresult));
	}
	f_lseek(&fil, f_size(&fil));
 8001da4:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd0 <MEM2067_Write+0x40>)
 8001da6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8001daa:	68d9      	ldr	r1, [r3, #12]
 8001dac:	4620      	mov	r0, r4
 8001dae:	f007 ff75 	bl	8009c9c <f_lseek>
	f_puts(data, &fil);
 8001db2:	4621      	mov	r1, r4
 8001db4:	4628      	mov	r0, r5
 8001db6:	f008 fa9f 	bl	800a2f8 <f_puts>

	f_close(&fil);
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f007 ff43 	bl	8009c46 <f_close>
}
 8001dc0:	bd38      	pop	{r3, r4, r5, pc}
		printf(" -> SD Card open: %s", FATFS_ErrorToString(fresult));
 8001dc2:	f7ff ff83 	bl	8001ccc <FATFS_ErrorToString>
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <MEM2067_Write+0x48>)
 8001dca:	f009 f965 	bl	800b098 <iprintf>
 8001dce:	e7e9      	b.n	8001da4 <MEM2067_Write+0x14>
 8001dd0:	2000020c 	.word	0x2000020c
 8001dd4:	20000208 	.word	0x20000208
 8001dd8:	0800d368 	.word	0x0800d368

08001ddc <MEM2067_Mount>:
uint8_t MEM2067_Mount(char* filename) {
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4604      	mov	r4, r0
	fresult = f_mount(&fs, "/", 1);
 8001de0:	2201      	movs	r2, #1
 8001de2:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <MEM2067_Mount+0x38>)
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <MEM2067_Mount+0x3c>)
 8001de6:	f007 f8c9 	bl	8008f7c <f_mount>
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <MEM2067_Mount+0x40>)
 8001dec:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK){
 8001dee:	b940      	cbnz	r0, 8001e02 <MEM2067_Mount+0x26>
	MEM2067_Write(filename, "Date ...\n");
 8001df0:	490b      	ldr	r1, [pc, #44]	@ (8001e20 <MEM2067_Mount+0x44>)
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ffcc 	bl	8001d90 <MEM2067_Write>
	f_close(&fil);
 8001df8:	480a      	ldr	r0, [pc, #40]	@ (8001e24 <MEM2067_Mount+0x48>)
 8001dfa:	f007 ff24 	bl	8009c46 <f_close>
	return 1;
 8001dfe:	2001      	movs	r0, #1
}
 8001e00:	bd10      	pop	{r4, pc}
		printf(" -> SD Card Mount: %s", FATFS_ErrorToString(fresult));
 8001e02:	f7ff ff63 	bl	8001ccc <FATFS_ErrorToString>
 8001e06:	4601      	mov	r1, r0
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <MEM2067_Mount+0x4c>)
 8001e0a:	f009 f945 	bl	800b098 <iprintf>
		return 0;
 8001e0e:	2000      	movs	r0, #0
 8001e10:	e7f6      	b.n	8001e00 <MEM2067_Mount+0x24>
 8001e12:	bf00      	nop
 8001e14:	0800d380 	.word	0x0800d380
 8001e18:	20001238 	.word	0x20001238
 8001e1c:	20000208 	.word	0x20000208
 8001e20:	0800d39c 	.word	0x0800d39c
 8001e24:	2000020c 	.word	0x2000020c
 8001e28:	0800d384 	.word	0x0800d384

08001e2c <MEM2067_Unmount>:

void MEM2067_Unmount(void) {
 8001e2c:	b508      	push	{r3, lr}

	fresult = f_mount(NULL, "/", 1);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4907      	ldr	r1, [pc, #28]	@ (8001e50 <MEM2067_Unmount+0x24>)
 8001e32:	2000      	movs	r0, #0
 8001e34:	f007 f8a2 	bl	8008f7c <f_mount>
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MEM2067_Unmount+0x28>)
 8001e3a:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK){
 8001e3c:	b900      	cbnz	r0, 8001e40 <MEM2067_Unmount+0x14>
		printf(" -> SD Card Mount: %s", FATFS_ErrorToString(fresult));
	}
}
 8001e3e:	bd08      	pop	{r3, pc}
		printf(" -> SD Card Mount: %s", FATFS_ErrorToString(fresult));
 8001e40:	f7ff ff44 	bl	8001ccc <FATFS_ErrorToString>
 8001e44:	4601      	mov	r1, r0
 8001e46:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <MEM2067_Unmount+0x2c>)
 8001e48:	f009 f926 	bl	800b098 <iprintf>
}
 8001e4c:	e7f7      	b.n	8001e3e <MEM2067_Unmount+0x12>
 8001e4e:	bf00      	nop
 8001e50:	0800d380 	.word	0x0800d380
 8001e54:	20000208 	.word	0x20000208
 8001e58:	0800d384 	.word	0x0800d384

08001e5c <Pyro_Init>:
 *      Author: gagno
 */

#include "GAUL_Drivers/Pyros.h"

void Pyro_Init(void) {
 8001e5c:	b508      	push	{r3, lr}
	// Pyros
	Init_GPIO(PB, 4, OUT2, O_GP_PP); // PyroON0
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2202      	movs	r2, #2
 8001e62:	2104      	movs	r1, #4
 8001e64:	4610      	mov	r0, r2
 8001e66:	f000 f8b1 	bl	8001fcc <Init_GPIO>
	Init_GPIO(PB, 5, OUT2, O_GP_PP); // PyroON1
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	2105      	movs	r1, #5
 8001e70:	4610      	mov	r0, r2
 8001e72:	f000 f8ab 	bl	8001fcc <Init_GPIO>
	Init_GPIO(PA, 15, OUT2, O_GP_PP); // Pyro_Test~
 8001e76:	2300      	movs	r3, #0
 8001e78:	2202      	movs	r2, #2
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f000 f8a5 	bl	8001fcc <Init_GPIO>
	// Set Pyro_Test~ (inverse) et Pyros_ON LOW
	Write_GPIO(PA, 15, HIGH);
 8001e82:	2201      	movs	r2, #1
 8001e84:	210f      	movs	r1, #15
 8001e86:	4610      	mov	r0, r2
 8001e88:	f000 f8ea 	bl	8002060 <Write_GPIO>
	Write_GPIO(PB, 4, LOW);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2104      	movs	r1, #4
 8001e90:	2002      	movs	r0, #2
 8001e92:	f000 f8e5 	bl	8002060 <Write_GPIO>
	Write_GPIO(PB, 5, LOW);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2105      	movs	r1, #5
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f000 f8e0 	bl	8002060 <Write_GPIO>
}
 8001ea0:	bd08      	pop	{r3, pc}
	...

08001ea4 <ws2812_timer2_init>:
static uint16_t ws2812_gpio_set_bits = 0;
static uint16_t dma_buffer[DMA_BUFFER_SIZE];


static void ws2812_timer2_init(void)
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	b08e      	sub	sp, #56	@ 0x38
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea8:	2400      	movs	r4, #0
 8001eaa:	940a      	str	r4, [sp, #40]	@ 0x28
 8001eac:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001eae:	940c      	str	r4, [sp, #48]	@ 0x30
 8001eb0:	940d      	str	r4, [sp, #52]	@ 0x34
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	9408      	str	r4, [sp, #32]
 8001eb4:	9409      	str	r4, [sp, #36]	@ 0x24
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	9401      	str	r4, [sp, #4]
 8001eb8:	9402      	str	r4, [sp, #8]
 8001eba:	9403      	str	r4, [sp, #12]
 8001ebc:	9404      	str	r4, [sp, #16]
 8001ebe:	9405      	str	r4, [sp, #20]
 8001ec0:	9406      	str	r4, [sp, #24]
 8001ec2:	9407      	str	r4, [sp, #28]

    htimer2.Instance = TIM2;
 8001ec4:	4d1a      	ldr	r5, [pc, #104]	@ (8001f30 <ws2812_timer2_init+0x8c>)
 8001ec6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eca:	602b      	str	r3, [r5, #0]
    htimer2.Init.Prescaler = 0;
 8001ecc:	606c      	str	r4, [r5, #4]
    htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	60ac      	str	r4, [r5, #8]
    htimer2.Init.Period = WS2812_TIMER_PERIOD;
 8001ed0:	235a      	movs	r3, #90	@ 0x5a
 8001ed2:	60eb      	str	r3, [r5, #12]

    htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	612c      	str	r4, [r5, #16]
    htimer2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htimer2);
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f003 fc65 	bl	80057a8 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htimer2, &sClockSourceConfig);
 8001ee4:	a90a      	add	r1, sp, #40	@ 0x28
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	f003 fece 	bl	8005c88 <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htimer2);
 8001eec:	4628      	mov	r0, r5
 8001eee:	f003 fcaa 	bl	8005846 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	9408      	str	r4, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htimer2, &sMasterConfig);
 8001ef6:	a908      	add	r1, sp, #32
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f004 fa31 	bl	8006360 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efe:	2660      	movs	r6, #96	@ 0x60
 8001f00:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH1_TIME;
 8001f02:	231c      	movs	r3, #28
 8001f04:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f06:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_1);
 8001f0a:	4622      	mov	r2, r4
 8001f0c:	a901      	add	r1, sp, #4
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f003 fdf8 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f14:	9601      	str	r6, [sp, #4]

    sConfigOC.Pulse = WS2812_TIMER_PWM_CH2_TIME;
 8001f16:	2339      	movs	r3, #57	@ 0x39
 8001f18:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1a:	9403      	str	r4, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1c:	9405      	str	r4, [sp, #20]
    HAL_TIM_PWM_ConfigChannel(&htimer2, &sConfigOC, TIM_CHANNEL_2);
 8001f1e:	2204      	movs	r2, #4
 8001f20:	eb0d 0102 	add.w	r1, sp, r2
 8001f24:	4628      	mov	r0, r5
 8001f26:	f003 fded 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
}
 8001f2a:	b00e      	add	sp, #56	@ 0x38
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
 8001f2e:	bf00      	nop
 8001f30:	20002268 	.word	0x20002268

08001f34 <WS2812_Init>:
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch1);
	__HAL_DMA_DISABLE(&hdma_tim2_pwm_ch2);
}

void WS2812_Init()
{
 8001f34:	b500      	push	{lr}
 8001f36:	b083      	sub	sp, #12
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <WS2812_Init+0x40>)
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	615a      	str	r2, [r3, #20]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9b01      	ldr	r3, [sp, #4]

    /* DMA interrupt init, not that we're using it... */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4611      	mov	r1, r2
 8001f50:	200c      	movs	r0, #12
 8001f52:	f002 f8a0 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	4611      	mov	r1, r2
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f002 f89b 	bl	8004096 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	4611      	mov	r1, r2
 8001f64:	2011      	movs	r0, #17
 8001f66:	f002 f896 	bl	8004096 <HAL_NVIC_SetPriority>

    ws2812_timer2_init();
 8001f6a:	f7ff ff9b 	bl	8001ea4 <ws2812_timer2_init>
}
 8001f6e:	b003      	add	sp, #12
 8001f70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f74:	40021000 	.word	0x40021000

08001f78 <ADC_Start>:


#include "GAUL_Drivers/Low_Level_Drivers/ADC_driver.h"


uint8_t ADC_Start(ADC_HandleTypeDef *hadc) {
 8001f78:	b508      	push	{r3, lr}

	HAL_ADC_Start(hadc);
 8001f7a:	f001 fba3 	bl	80036c4 <HAL_ADC_Start>
	return 1; // OK
}
 8001f7e:	2001      	movs	r0, #1
 8001f80:	bd08      	pop	{r3, pc}

08001f82 <ADC_Calibration>:

uint8_t ADC_Calibration(ADC_HandleTypeDef *hadc) {
 8001f82:	b508      	push	{r3, lr}

	HAL_ADCEx_Calibration_Start(hadc);
 8001f84:	f001 ff1e 	bl	8003dc4 <HAL_ADCEx_Calibration_Start>
	return 1; // OK
}
 8001f88:	2001      	movs	r0, #1
 8001f8a:	bd08      	pop	{r3, pc}

08001f8c <ADC_Stop>:

uint8_t ADC_Stop(ADC_HandleTypeDef *hadc) {
 8001f8c:	b508      	push	{r3, lr}

	HAL_ADC_Stop(hadc);
 8001f8e:	f001 fc47 	bl	8003820 <HAL_ADC_Stop>
	return 1; // OK
}
 8001f92:	2001      	movs	r0, #1
 8001f94:	bd08      	pop	{r3, pc}
	...

08001f98 <ADC_Sampling>:

uint32_t ADC_Sampling (ADC_HandleTypeDef *hadc) {
 8001f98:	b538      	push	{r3, r4, r5, lr}

	if (!(ADC1->CR2 & ADC_CR2_ADON)) {
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <ADC_Sampling+0x30>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f013 0f01 	tst.w	r3, #1
 8001fa2:	d00d      	beq.n	8001fc0 <ADC_Sampling+0x28>
 8001fa4:	4604      	mov	r4, r0
		return 0xFFFF;
	}
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY); // Timeout peut etre ajuste
 8001fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8001faa:	f001 fc65 	bl	8003878 <HAL_ADC_PollForConversion>
	uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f001 fd68 	bl	8003a84 <HAL_ADC_GetValue>
 8001fb4:	4605      	mov	r5, r0
	HAL_ADC_Stop(hadc);
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f001 fc32 	bl	8003820 <HAL_ADC_Stop>

	return adc_value;
}
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFFFF;
 8001fc0:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8001fc4:	e7fa      	b.n	8001fbc <ADC_Sampling+0x24>
 8001fc6:	bf00      	nop
 8001fc8:	40012400 	.word	0x40012400

08001fcc <Init_GPIO>:
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"

void Init_GPIO(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8001fcc:	b510      	push	{r4, lr}
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 unsigned short offset = 0x00;

	if(pin > 7)
 8001fce:	2907      	cmp	r1, #7
 8001fd0:	d904      	bls.n	8001fdc <Init_GPIO+0x10>
		{
			tPIN -= 8;
 8001fd2:	3908      	subs	r1, #8
 8001fd4:	b289      	uxth	r1, r1
			offset = 0x01;
 8001fd6:	f04f 0e01 	mov.w	lr, #1
 8001fda:	e001      	b.n	8001fe0 <Init_GPIO+0x14>
 unsigned short offset = 0x00;
 8001fdc:	f04f 0e00 	mov.w	lr, #0
		}

	if(port == 1)
 8001fe0:	2801      	cmp	r0, #1
 8001fe2:	d00f      	beq.n	8002004 <Init_GPIO+0x38>
		{
			RCC_APB2ENR |= 4; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8001fe4:	2802      	cmp	r0, #2
 8001fe6:	d02d      	beq.n	8002044 <Init_GPIO+0x78>
		{
			RCC_APB2ENR |= 8; //// Enabling PORT A
			CR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8001fe8:	2803      	cmp	r0, #3
 8001fea:	d116      	bne.n	800201a <Init_GPIO+0x4e>
		{
			RCC_APB2ENR |= 0x10; //// Enabling PORT A
 8001fec:	4c1b      	ldr	r4, [pc, #108]	@ (800205c <Init_GPIO+0x90>)
 8001fee:	69a0      	ldr	r0, [r4, #24]
 8001ff0:	f040 0010 	orr.w	r0, r0, #16
 8001ff4:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 8001ff6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ffa:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8001ffe:	f50c 3c88 	add.w	ip, ip, #69632	@ 0x11000
 8002002:	e00a      	b.n	800201a <Init_GPIO+0x4e>
			RCC_APB2ENR |= 4; //// Enabling PORT A
 8002004:	4c15      	ldr	r4, [pc, #84]	@ (800205c <Init_GPIO+0x90>)
 8002006:	69a0      	ldr	r0, [r4, #24]
 8002008:	f040 0004 	orr.w	r0, r0, #4
 800200c:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 800200e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002012:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8002016:	f50c 3c84 	add.w	ip, ip, #67584	@ 0x10800
		}

		*CR &= ~(0xf<<(tPIN)*4); ///Reset the taget pin
 800201a:	f8dc 0000 	ldr.w	r0, [ip]
 800201e:	0089      	lsls	r1, r1, #2
 8002020:	f04f 0e0f 	mov.w	lr, #15
 8002024:	fa0e fe01 	lsl.w	lr, lr, r1
 8002028:	ea20 000e 	bic.w	r0, r0, lr
 800202c:	f8cc 0000 	str.w	r0, [ip]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8002030:	f8dc 0000 	ldr.w	r0, [ip]
 8002034:	408a      	lsls	r2, r1
 8002036:	3102      	adds	r1, #2
 8002038:	408b      	lsls	r3, r1
 800203a:	431a      	orrs	r2, r3
 800203c:	4302      	orrs	r2, r0
 800203e:	f8cc 2000 	str.w	r2, [ip]
}
 8002042:	bd10      	pop	{r4, pc}
			RCC_APB2ENR |= 8; //// Enabling PORT A
 8002044:	4c05      	ldr	r4, [pc, #20]	@ (800205c <Init_GPIO+0x90>)
 8002046:	69a0      	ldr	r0, [r4, #24]
 8002048:	f040 0008 	orr.w	r0, r0, #8
 800204c:	61a0      	str	r0, [r4, #24]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 800204e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002052:	f10e 4c80 	add.w	ip, lr, #1073741824	@ 0x40000000
 8002056:	f50c 3c86 	add.w	ip, ip, #68608	@ 0x10c00
 800205a:	e7de      	b.n	800201a <Init_GPIO+0x4e>
 800205c:	40021000 	.word	0x40021000

08002060 <Write_GPIO>:
{
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;


	if(port == 1)
 8002060:	2801      	cmp	r0, #1
 8002062:	d005      	beq.n	8002070 <Write_GPIO+0x10>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
		}
	else if(port == 2)
 8002064:	2802      	cmp	r0, #2
 8002066:	d00a      	beq.n	800207e <Write_GPIO+0x1e>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
		}
	else if(port == 3)
 8002068:	2803      	cmp	r0, #3
 800206a:	d102      	bne.n	8002072 <Write_GPIO+0x12>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <Write_GPIO+0x34>)
 800206e:	e000      	b.n	8002072 <Write_GPIO+0x12>
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <Write_GPIO+0x38>)
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8002072:	b132      	cbz	r2, 8002082 <Write_GPIO+0x22>
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	408a      	lsls	r2, r1
 8002078:	4302      	orrs	r2, r0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	4770      	bx	lr
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <Write_GPIO+0x3c>)
 8002080:	e7f7      	b.n	8002072 <Write_GPIO+0x12>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f101 	lsl.w	r1, r0, r1
 800208a:	ea22 0201 	bic.w	r2, r2, r1
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	4001100c 	.word	0x4001100c
 8002098:	4001080c 	.word	0x4001080c
 800209c:	40010c0c 	.word	0x40010c0c

080020a0 <Delay_Wait>:

#include "GAUL_Drivers/Low_Level_Drivers/NonBlockingDelay_driver.h"

uint32_t lastGetTick = 0;

bool Delay_Wait(uint32_t delay) {
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4604      	mov	r4, r0

	if((HAL_GetTick() - lastGetTick) >= delay) {
 80020a4:	f001 fa08 	bl	80034b8 <HAL_GetTick>
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <Delay_Wait+0x24>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1ac0      	subs	r0, r0, r3
 80020ae:	42a0      	cmp	r0, r4
 80020b0:	d201      	bcs.n	80020b6 <Delay_Wait+0x16>
		lastGetTick = HAL_GetTick();
		return true;
	} else {
		return false;
 80020b2:	2000      	movs	r0, #0
	}
}
 80020b4:	bd10      	pop	{r4, pc}
		lastGetTick = HAL_GetTick();
 80020b6:	f001 f9ff 	bl	80034b8 <HAL_GetTick>
 80020ba:	4b02      	ldr	r3, [pc, #8]	@ (80020c4 <Delay_Wait+0x24>)
 80020bc:	6018      	str	r0, [r3, #0]
		return true;
 80020be:	2001      	movs	r0, #1
 80020c0:	e7f8      	b.n	80020b4 <Delay_Wait+0x14>
 80020c2:	bf00      	nop
 80020c4:	200022b0 	.word	0x200022b0

080020c8 <SPI_Init>:

#include "main.h"
#include "GAUL_Drivers/Low_Level_Drivers/GPIO_driver.h"
#include "GAUL_Drivers/Low_Level_Drivers/SPI_driver.h"

void SPI_Init(unsigned short spi) {
 80020c8:	b508      	push	{r3, lr}
    if(spi == 1) {
 80020ca:	2801      	cmp	r0, #1
 80020cc:	d002      	beq.n	80020d4 <SPI_Init+0xc>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1

        Write_GPIO(PA, 4, HIGH);

        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    } else if(spi == 2) {
 80020ce:	2802      	cmp	r0, #2
 80020d0:	d026      	beq.n	8002120 <SPI_Init+0x58>
        Write_GPIO(PA, 8, HIGH);
        Write_GPIO(PB, 12, HIGH);

        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
    }
}
 80020d2:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80020d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002184 <SPI_Init+0xbc>)
 80020d6:	6993      	ldr	r3, [r2, #24]
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020dc:	6193      	str	r3, [r2, #24]
        Init_GPIO(PA, 4, OUT50, O_GP_PP); // CS
 80020de:	2300      	movs	r3, #0
 80020e0:	2203      	movs	r2, #3
 80020e2:	2104      	movs	r1, #4
 80020e4:	f7ff ff72 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PA, 5, OUT50, O_AF_PP); // CLK
 80020e8:	2302      	movs	r3, #2
 80020ea:	2203      	movs	r2, #3
 80020ec:	2105      	movs	r1, #5
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff ff6c 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PA, 6, IN, I_PP);    // MISO SPI1
 80020f4:	2302      	movs	r3, #2
 80020f6:	2200      	movs	r2, #0
 80020f8:	2106      	movs	r1, #6
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff ff66 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PA, 7, OUT50, O_AF_PP); // MOSI SPI1
 8002100:	2302      	movs	r3, #2
 8002102:	2203      	movs	r2, #3
 8002104:	2107      	movs	r1, #7
 8002106:	2001      	movs	r0, #1
 8002108:	f7ff ff60 	bl	8001fcc <Init_GPIO>
        Write_GPIO(PA, 4, HIGH);
 800210c:	2201      	movs	r2, #1
 800210e:	2104      	movs	r1, #4
 8002110:	4610      	mov	r0, r2
 8002112:	f7ff ffa5 	bl	8002060 <Write_GPIO>
        SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 8002116:	4b1c      	ldr	r3, [pc, #112]	@ (8002188 <SPI_Init+0xc0>)
 8002118:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e7d8      	b.n	80020d2 <SPI_Init+0xa>
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002120:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <SPI_Init+0xbc>)
 8002122:	69d3      	ldr	r3, [r2, #28]
 8002124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002128:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 8, OUT50, O_GP_PP); // CS (optionnel)
 800212a:	2300      	movs	r3, #0
 800212c:	2203      	movs	r2, #3
 800212e:	2108      	movs	r1, #8
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff ff4b 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PB, 12, OUT50, O_GP_PP); // CS
 8002136:	2300      	movs	r3, #0
 8002138:	2203      	movs	r2, #3
 800213a:	210c      	movs	r1, #12
 800213c:	2002      	movs	r0, #2
 800213e:	f7ff ff45 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PB, 13, OUT50, O_AF_PP); // CLK
 8002142:	2302      	movs	r3, #2
 8002144:	2203      	movs	r2, #3
 8002146:	210d      	movs	r1, #13
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff3f 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PB, 14, IN, I_PP);    // MISO SPI2
 800214e:	2302      	movs	r3, #2
 8002150:	2200      	movs	r2, #0
 8002152:	210e      	movs	r1, #14
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff39 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PB, 15, OUT50, O_AF_PP); // MOSI SPI2
 800215a:	2302      	movs	r3, #2
 800215c:	2203      	movs	r2, #3
 800215e:	210f      	movs	r1, #15
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff33 	bl	8001fcc <Init_GPIO>
        Write_GPIO(PA, 8, HIGH);
 8002166:	2201      	movs	r2, #1
 8002168:	2108      	movs	r1, #8
 800216a:	4610      	mov	r0, r2
 800216c:	f7ff ff78 	bl	8002060 <Write_GPIO>
        Write_GPIO(PB, 12, HIGH);
 8002170:	2201      	movs	r2, #1
 8002172:	210c      	movs	r1, #12
 8002174:	2002      	movs	r0, #2
 8002176:	f7ff ff73 	bl	8002060 <Write_GPIO>
        SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_BR_2 | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE;
 800217a:	4b04      	ldr	r3, [pc, #16]	@ (800218c <SPI_Init+0xc4>)
 800217c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	e7a6      	b.n	80020d2 <SPI_Init+0xa>
 8002184:	40021000 	.word	0x40021000
 8002188:	40013000 	.word	0x40013000
 800218c:	40003800 	.word	0x40003800

08002190 <SPI2_TX>:

    uint8_t temp = SPI1->DR;
    temp = SPI1->SR;
}

void SPI2_TX(uint8_t *data, int size) {
 8002190:	468c      	mov	ip, r1

    for (int i = 0; i < size; ++i) {
 8002192:	2200      	movs	r2, #0
 8002194:	e008      	b.n	80021a8 <SPI2_TX+0x18>
        while (!(SPI2->SR & SPI_SR_TXE)) {}
 8002196:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <SPI2_TX+0x38>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f013 0f02 	tst.w	r3, #2
 800219e:	d0fa      	beq.n	8002196 <SPI2_TX+0x6>
        SPI2->DR = data[i];
 80021a0:	5c81      	ldrb	r1, [r0, r2]
 80021a2:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <SPI2_TX+0x38>)
 80021a4:	60d9      	str	r1, [r3, #12]
    for (int i = 0; i < size; ++i) {
 80021a6:	3201      	adds	r2, #1
 80021a8:	4562      	cmp	r2, ip
 80021aa:	dbf4      	blt.n	8002196 <SPI2_TX+0x6>
    }

    while (!(SPI2->SR & SPI_SR_TXE)) {}
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <SPI2_TX+0x38>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f013 0f02 	tst.w	r3, #2
 80021b4:	d0fa      	beq.n	80021ac <SPI2_TX+0x1c>
    while (SPI2->SR & SPI_SR_BSY) {}
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <SPI2_TX+0x38>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021be:	d1fa      	bne.n	80021b6 <SPI2_TX+0x26>

    uint8_t temp = SPI2->DR;
 80021c0:	4b01      	ldr	r3, [pc, #4]	@ (80021c8 <SPI2_TX+0x38>)
 80021c2:	68da      	ldr	r2, [r3, #12]
    temp = SPI2->SR;
 80021c4:	689b      	ldr	r3, [r3, #8]
}
 80021c6:	4770      	bx	lr
 80021c8:	40003800 	.word	0x40003800

080021cc <SPI2_RX>:
    }
}

void SPI2_RX(uint8_t *data, int size) {

    while (size) {
 80021cc:	e011      	b.n	80021f2 <SPI2_RX+0x26>
        while (SPI2->SR & SPI_SR_BSY) {}
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <SPI2_RX+0x2c>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021d6:	d1fa      	bne.n	80021ce <SPI2_RX+0x2>
        SPI2->DR = 0;
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <SPI2_RX+0x2c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
        while (!(SPI2->SR & SPI_SR_RXNE)) {}
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <SPI2_RX+0x2c>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f013 0f01 	tst.w	r3, #1
 80021e6:	d0fa      	beq.n	80021de <SPI2_RX+0x12>
        *data++ = SPI2->DR;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <SPI2_RX+0x2c>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f800 3b01 	strb.w	r3, [r0], #1
        --size;
 80021f0:	3901      	subs	r1, #1
    while (size) {
 80021f2:	2900      	cmp	r1, #0
 80021f4:	d1eb      	bne.n	80021ce <SPI2_RX+0x2>
    }
}
 80021f6:	4770      	bx	lr
 80021f8:	40003800 	.word	0x40003800

080021fc <USART_Init>:
#include "GAUL_Drivers/Low_Level_Drivers/USART_driver.h"
#include "main.h"


void USART_Init(unsigned short usart)
{
 80021fc:	b508      	push	{r3, lr}
    if(usart == 1) {
 80021fe:	2801      	cmp	r0, #1
 8002200:	d004      	beq.n	800220c <USART_Init+0x10>

        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
    }
    else if(usart == 2) {
 8002202:	2802      	cmp	r0, #2
 8002204:	d021      	beq.n	800224a <USART_Init+0x4e>

        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
    }
    else if(usart == 3) {
 8002206:	2803      	cmp	r0, #3
 8002208:	d03e      	beq.n	8002288 <USART_Init+0x8c>

        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
    }
}
 800220a:	bd08      	pop	{r3, pc}
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800220c:	4a2e      	ldr	r2, [pc, #184]	@ (80022c8 <USART_Init+0xcc>)
 800220e:	6993      	ldr	r3, [r2, #24]
 8002210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002214:	6193      	str	r3, [r2, #24]
        Init_GPIO(PB, 6, OUT50, O_AF_PP); // TX
 8002216:	2302      	movs	r3, #2
 8002218:	2203      	movs	r2, #3
 800221a:	2106      	movs	r1, #6
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fed5 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PB, 7, IN, I_PP); // RX
 8002222:	2302      	movs	r3, #2
 8002224:	2200      	movs	r2, #0
 8002226:	2107      	movs	r1, #7
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fecf 	bl	8001fcc <Init_GPIO>
        USART1->CR1 |= USART_CR1_UE; // Activer USART (0x0C)
 800222e:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <USART_Init+0xd0>)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002236:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_TE; // Activer la transmission
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	f042 0208 	orr.w	r2, r2, #8
 800223e:	60da      	str	r2, [r3, #12]
        USART1->CR1 |= USART_CR1_RE; // Activer la réception
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	f042 0204 	orr.w	r2, r2, #4
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	e7df      	b.n	800220a <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800224a:	4a1f      	ldr	r2, [pc, #124]	@ (80022c8 <USART_Init+0xcc>)
 800224c:	69d3      	ldr	r3, [r2, #28]
 800224e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002252:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PA, 2, OUT50, O_AF_PP); // TX
 8002254:	2302      	movs	r3, #2
 8002256:	2203      	movs	r2, #3
 8002258:	4619      	mov	r1, r3
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff feb6 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PA, 3, IN, I_PP); // RX
 8002260:	2302      	movs	r3, #2
 8002262:	2200      	movs	r2, #0
 8002264:	2103      	movs	r1, #3
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff feb0 	bl	8001fcc <Init_GPIO>
        USART2->CR1 |= USART_CR1_UE; // Activer USART (0x10)
 800226c:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <USART_Init+0xd4>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002274:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_TE; // Activer la transmission
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	f042 0208 	orr.w	r2, r2, #8
 800227c:	60da      	str	r2, [r3, #12]
        USART2->CR1 |= USART_CR1_RE; // Activer la réception
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	f042 0204 	orr.w	r2, r2, #4
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	e7c0      	b.n	800220a <USART_Init+0xe>
        RCC->APB1ENR |= RCC_APB1ENR_USART3EN ;
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <USART_Init+0xcc>)
 800228a:	69d3      	ldr	r3, [r2, #28]
 800228c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002290:	61d3      	str	r3, [r2, #28]
        Init_GPIO(PB, 10, OUT50, O_AF_PP); // TX
 8002292:	2302      	movs	r3, #2
 8002294:	2203      	movs	r2, #3
 8002296:	210a      	movs	r1, #10
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fe97 	bl	8001fcc <Init_GPIO>
        Init_GPIO(PB, 11, IN, I_PP); // RX
 800229e:	2302      	movs	r3, #2
 80022a0:	2200      	movs	r2, #0
 80022a2:	210b      	movs	r1, #11
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fe91 	bl	8001fcc <Init_GPIO>
        USART3->CR1 |= USART_CR1_UE; // Activer USART (0x14)
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <USART_Init+0xd8>)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b2:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_TE; // Activer la transmission
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	f042 0208 	orr.w	r2, r2, #8
 80022ba:	60da      	str	r2, [r3, #12]
        USART3->CR1 |= USART_CR1_RE; // Activer la réception
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	60da      	str	r2, [r3, #12]
}
 80022c4:	e7a1      	b.n	800220a <USART_Init+0xe>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40004400 	.word	0x40004400
 80022d4:	40004800 	.word	0x40004800

080022d8 <USART_TX>:

void USART_TX(unsigned short usart, const uint8_t *data, int size) {
 80022d8:	b410      	push	{r4}

    if (usart == 1) {
 80022da:	2801      	cmp	r0, #1
 80022dc:	d027      	beq.n	800232e <USART_TX+0x56>
        for (int i = 0; i < size; i++) {
            while (!(USART1->SR & USART_SR_TXE));
            USART1->DR = data[i];
            while (!(USART1->SR & USART_SR_TC));
        }
    } else if (usart == 2) {
 80022de:	2802      	cmp	r0, #2
 80022e0:	d038      	beq.n	8002354 <USART_TX+0x7c>
        for (int i = 0; i < size; i++) {
            while (!(USART2->SR & USART_SR_TXE));
            USART2->DR = data[i];
            while (!(USART2->SR & USART_SR_TC));
        }
    } else if (usart == 3) {
 80022e2:	2803      	cmp	r0, #3
 80022e4:	d121      	bne.n	800232a <USART_TX+0x52>
        for (int i = 0; i < size; i++) {
 80022e6:	2000      	movs	r0, #0
 80022e8:	4290      	cmp	r0, r2
 80022ea:	da1e      	bge.n	800232a <USART_TX+0x52>
            while (!(USART3->SR & USART_SR_TXE));
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <USART_TX+0x80>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022f4:	d0fa      	beq.n	80022ec <USART_TX+0x14>
            USART3->DR = data[i];
 80022f6:	5c0c      	ldrb	r4, [r1, r0]
 80022f8:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <USART_TX+0x80>)
 80022fa:	605c      	str	r4, [r3, #4]
            while (!(USART3->SR & USART_SR_TC));
 80022fc:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <USART_TX+0x80>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002304:	d0fa      	beq.n	80022fc <USART_TX+0x24>
        for (int i = 0; i < size; i++) {
 8002306:	3001      	adds	r0, #1
 8002308:	e7ee      	b.n	80022e8 <USART_TX+0x10>
            while (!(USART1->SR & USART_SR_TXE));
 800230a:	4b14      	ldr	r3, [pc, #80]	@ (800235c <USART_TX+0x84>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002312:	d0fa      	beq.n	800230a <USART_TX+0x32>
            USART1->DR = data[i];
 8002314:	5c0c      	ldrb	r4, [r1, r0]
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <USART_TX+0x84>)
 8002318:	605c      	str	r4, [r3, #4]
            while (!(USART1->SR & USART_SR_TC));
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <USART_TX+0x84>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002322:	d0fa      	beq.n	800231a <USART_TX+0x42>
        for (int i = 0; i < size; i++) {
 8002324:	3001      	adds	r0, #1
 8002326:	4290      	cmp	r0, r2
 8002328:	dbef      	blt.n	800230a <USART_TX+0x32>
        }
    }
}
 800232a:	bc10      	pop	{r4}
 800232c:	4770      	bx	lr
        for (int i = 0; i < size; i++) {
 800232e:	2000      	movs	r0, #0
 8002330:	e7f9      	b.n	8002326 <USART_TX+0x4e>
            while (!(USART2->SR & USART_SR_TXE));
 8002332:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <USART_TX+0x88>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800233a:	d0fa      	beq.n	8002332 <USART_TX+0x5a>
            USART2->DR = data[i];
 800233c:	5c0c      	ldrb	r4, [r1, r0]
 800233e:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <USART_TX+0x88>)
 8002340:	605c      	str	r4, [r3, #4]
            while (!(USART2->SR & USART_SR_TC));
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <USART_TX+0x88>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800234a:	d0fa      	beq.n	8002342 <USART_TX+0x6a>
        for (int i = 0; i < size; i++) {
 800234c:	3001      	adds	r0, #1
 800234e:	4290      	cmp	r0, r2
 8002350:	dbef      	blt.n	8002332 <USART_TX+0x5a>
 8002352:	e7ea      	b.n	800232a <USART_TX+0x52>
 8002354:	2000      	movs	r0, #0
 8002356:	e7fa      	b.n	800234e <USART_TX+0x76>
 8002358:	40004800 	.word	0x40004800
 800235c:	40013800 	.word	0x40013800
 8002360:	40004400 	.word	0x40004400

08002364 <SD_PowerOff>:
}

/* 전원 끄기 */
static void SD_PowerOff(void)
{
  PowerFlag = 0;
 8002364:	4b01      	ldr	r3, [pc, #4]	@ (800236c <SD_PowerOff+0x8>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
}
 800236a:	4770      	bx	lr
 800236c:	200022b4 	.word	0x200022b4

08002370 <SD_CheckPower>:
/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
  /*  0=off, 1=on */
  return PowerFlag;
}
 8002370:	4b01      	ldr	r3, [pc, #4]	@ (8002378 <SD_CheckPower+0x8>)
 8002372:	7818      	ldrb	r0, [r3, #0]
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200022b4 	.word	0x200022b4

0800237c <SPI_TxByte>:
{
 800237c:	b500      	push	{lr}
 800237e:	b083      	sub	sp, #12
 8002380:	f88d 0007 	strb.w	r0, [sp, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002384:	4807      	ldr	r0, [pc, #28]	@ (80023a4 <SPI_TxByte+0x28>)
 8002386:	f003 f95c 	bl	8005642 <HAL_SPI_GetState>
 800238a:	2801      	cmp	r0, #1
 800238c:	d1fa      	bne.n	8002384 <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800238e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002392:	2201      	movs	r2, #1
 8002394:	f10d 0107 	add.w	r1, sp, #7
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <SPI_TxByte+0x28>)
 800239a:	f002 fe5f 	bl	800505c <HAL_SPI_Transmit>
}
 800239e:	b003      	add	sp, #12
 80023a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a4:	2000249c 	.word	0x2000249c

080023a8 <SELECT>:
{
 80023a8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2110      	movs	r1, #16
 80023ae:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <SELECT+0x10>)
 80023b0:	f002 f83a 	bl	8004428 <HAL_GPIO_WritePin>
}
 80023b4:	bd08      	pop	{r3, pc}
 80023b6:	bf00      	nop
 80023b8:	40010800 	.word	0x40010800

080023bc <DESELECT>:
{
 80023bc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80023be:	2201      	movs	r2, #1
 80023c0:	2110      	movs	r1, #16
 80023c2:	4802      	ldr	r0, [pc, #8]	@ (80023cc <DESELECT+0x10>)
 80023c4:	f002 f830 	bl	8004428 <HAL_GPIO_WritePin>
}
 80023c8:	bd08      	pop	{r3, pc}
 80023ca:	bf00      	nop
 80023cc:	40010800 	.word	0x40010800

080023d0 <SPI_RxByte>:
{
 80023d0:	b500      	push	{lr}
 80023d2:	b085      	sub	sp, #20
  dummy = 0xFF;
 80023d4:	23ff      	movs	r3, #255	@ 0xff
 80023d6:	f88d 300f 	strb.w	r3, [sp, #15]
  data = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f88d 300e 	strb.w	r3, [sp, #14]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80023e0:	480a      	ldr	r0, [pc, #40]	@ (800240c <SPI_RxByte+0x3c>)
 80023e2:	f003 f92e 	bl	8005642 <HAL_SPI_GetState>
 80023e6:	2801      	cmp	r0, #1
 80023e8:	d1fa      	bne.n	80023e0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80023ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	f10d 020e 	add.w	r2, sp, #14
 80023f6:	f10d 010f 	add.w	r1, sp, #15
 80023fa:	4804      	ldr	r0, [pc, #16]	@ (800240c <SPI_RxByte+0x3c>)
 80023fc:	f002 ff71 	bl	80052e2 <HAL_SPI_TransmitReceive>
}
 8002400:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002404:	b005      	add	sp, #20
 8002406:	f85d fb04 	ldr.w	pc, [sp], #4
 800240a:	bf00      	nop
 800240c:	2000249c 	.word	0x2000249c

08002410 <SD_PowerOn>:
{
 8002410:	b510      	push	{r4, lr}
 8002412:	b082      	sub	sp, #8
  DESELECT();
 8002414:	f7ff ffd2 	bl	80023bc <DESELECT>
  for(int i = 0; i < 10; i++)
 8002418:	2400      	movs	r4, #0
 800241a:	e003      	b.n	8002424 <SD_PowerOn+0x14>
    SPI_TxByte(0xFF);
 800241c:	20ff      	movs	r0, #255	@ 0xff
 800241e:	f7ff ffad 	bl	800237c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002422:	3401      	adds	r4, #1
 8002424:	2c09      	cmp	r4, #9
 8002426:	ddf9      	ble.n	800241c <SD_PowerOn+0xc>
  SELECT();
 8002428:	f7ff ffbe 	bl	80023a8 <SELECT>
  cmd_arg[0] = (CMD0 | 0x40);
 800242c:	2340      	movs	r3, #64	@ 0x40
 800242e:	f88d 3000 	strb.w	r3, [sp]
  cmd_arg[1] = 0;
 8002432:	2400      	movs	r4, #0
 8002434:	f88d 4001 	strb.w	r4, [sp, #1]
  cmd_arg[2] = 0;
 8002438:	f88d 4002 	strb.w	r4, [sp, #2]
  cmd_arg[3] = 0;
 800243c:	f88d 4003 	strb.w	r4, [sp, #3]
  cmd_arg[4] = 0;
 8002440:	f88d 4004 	strb.w	r4, [sp, #4]
  cmd_arg[5] = 0x95;
 8002444:	2395      	movs	r3, #149	@ 0x95
 8002446:	f88d 3005 	strb.w	r3, [sp, #5]
  for (int i = 0; i < 6; i++)
 800244a:	e007      	b.n	800245c <SD_PowerOn+0x4c>
    SPI_TxByte(cmd_arg[i]);
 800244c:	f104 0308 	add.w	r3, r4, #8
 8002450:	446b      	add	r3, sp
 8002452:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8002456:	f7ff ff91 	bl	800237c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800245a:	3401      	adds	r4, #1
 800245c:	2c05      	cmp	r4, #5
 800245e:	ddf5      	ble.n	800244c <SD_PowerOn+0x3c>
  uint32_t Count = 0x1FFF;
 8002460:	f641 74ff 	movw	r4, #8191	@ 0x1fff
  while ((SPI_RxByte() != 0x01) && Count)
 8002464:	f7ff ffb4 	bl	80023d0 <SPI_RxByte>
 8002468:	2801      	cmp	r0, #1
 800246a:	d002      	beq.n	8002472 <SD_PowerOn+0x62>
 800246c:	b10c      	cbz	r4, 8002472 <SD_PowerOn+0x62>
    Count--;
 800246e:	3c01      	subs	r4, #1
 8002470:	e7f8      	b.n	8002464 <SD_PowerOn+0x54>
  DESELECT();
 8002472:	f7ff ffa3 	bl	80023bc <DESELECT>
  SPI_TxByte(0XFF);
 8002476:	20ff      	movs	r0, #255	@ 0xff
 8002478:	f7ff ff80 	bl	800237c <SPI_TxByte>
  PowerFlag = 1;
 800247c:	4b02      	ldr	r3, [pc, #8]	@ (8002488 <SD_PowerOn+0x78>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
}
 8002482:	b002      	add	sp, #8
 8002484:	bd10      	pop	{r4, pc}
 8002486:	bf00      	nop
 8002488:	200022b4 	.word	0x200022b4

0800248c <SD_ReadyWait>:
{
 800248c:	b508      	push	{r3, lr}
  Timer2 = 50;
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <SD_ReadyWait+0x20>)
 8002490:	2232      	movs	r2, #50	@ 0x32
 8002492:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8002494:	f7ff ff9c 	bl	80023d0 <SPI_RxByte>
    res = SPI_RxByte();
 8002498:	f7ff ff9a 	bl	80023d0 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 800249c:	28ff      	cmp	r0, #255	@ 0xff
 800249e:	d003      	beq.n	80024a8 <SD_ReadyWait+0x1c>
 80024a0:	4b02      	ldr	r3, [pc, #8]	@ (80024ac <SD_ReadyWait+0x20>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f7      	bne.n	8002498 <SD_ReadyWait+0xc>
}
 80024a8:	bd08      	pop	{r3, pc}
 80024aa:	bf00      	nop
 80024ac:	2000252c 	.word	0x2000252c

080024b0 <SD_SendCmd>:
}
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4605      	mov	r5, r0
 80024b4:	460c      	mov	r4, r1
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80024b6:	f7ff ffe9 	bl	800248c <SD_ReadyWait>
 80024ba:	28ff      	cmp	r0, #255	@ 0xff
 80024bc:	d001      	beq.n	80024c2 <SD_SendCmd+0x12>
    return 0xFF;
 80024be:	20ff      	movs	r0, #255	@ 0xff
  {
    res = SPI_RxByte();
  } while ((res & 0x80) && --n);

  return res;
}
 80024c0:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(cmd); 			/* Command */
 80024c2:	4628      	mov	r0, r5
 80024c4:	f7ff ff5a 	bl	800237c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80024c8:	0e20      	lsrs	r0, r4, #24
 80024ca:	f7ff ff57 	bl	800237c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80024ce:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80024d2:	f7ff ff53 	bl	800237c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80024d6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80024da:	f7ff ff4f 	bl	800237c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80024de:	b2e0      	uxtb	r0, r4
 80024e0:	f7ff ff4c 	bl	800237c <SPI_TxByte>
  if (cmd == CMD0)
 80024e4:	2d40      	cmp	r5, #64	@ 0x40
 80024e6:	d011      	beq.n	800250c <SD_SendCmd+0x5c>
  if (cmd == CMD8)
 80024e8:	2d48      	cmp	r5, #72	@ 0x48
 80024ea:	d011      	beq.n	8002510 <SD_SendCmd+0x60>
  crc = 0;
 80024ec:	2000      	movs	r0, #0
  SPI_TxByte(crc);
 80024ee:	f7ff ff45 	bl	800237c <SPI_TxByte>
  if (cmd == CMD12)
 80024f2:	2d4c      	cmp	r5, #76	@ 0x4c
 80024f4:	d00e      	beq.n	8002514 <SD_SendCmd+0x64>
    crc = 0x95; /* CRC for CMD0(0) */
 80024f6:	240a      	movs	r4, #10
    res = SPI_RxByte();
 80024f8:	f7ff ff6a 	bl	80023d0 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 80024fc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002500:	d0de      	beq.n	80024c0 <SD_SendCmd+0x10>
 8002502:	1e63      	subs	r3, r4, #1
 8002504:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8002508:	d1f6      	bne.n	80024f8 <SD_SendCmd+0x48>
 800250a:	e7d9      	b.n	80024c0 <SD_SendCmd+0x10>
    crc = 0x95; /* CRC for CMD0(0) */
 800250c:	2095      	movs	r0, #149	@ 0x95
 800250e:	e7ee      	b.n	80024ee <SD_SendCmd+0x3e>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002510:	2087      	movs	r0, #135	@ 0x87
 8002512:	e7ec      	b.n	80024ee <SD_SendCmd+0x3e>
    SPI_RxByte();
 8002514:	f7ff ff5c 	bl	80023d0 <SPI_RxByte>
 8002518:	e7ed      	b.n	80024f6 <SD_SendCmd+0x46>

0800251a <SPI_RxBytePtr>:
{
 800251a:	b510      	push	{r4, lr}
 800251c:	4604      	mov	r4, r0
  *buff = SPI_RxByte();
 800251e:	f7ff ff57 	bl	80023d0 <SPI_RxByte>
 8002522:	7020      	strb	r0, [r4, #0]
}
 8002524:	bd10      	pop	{r4, pc}
	...

08002528 <SD_RxDataBlock>:
{
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	4604      	mov	r4, r0
 800252c:	460e      	mov	r6, r1
  Timer1 = 10;
 800252e:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <SD_RxDataBlock+0x44>)
 8002530:	220a      	movs	r2, #10
 8002532:	701a      	strb	r2, [r3, #0]
    token = SPI_RxByte();
 8002534:	f7ff ff4c 	bl	80023d0 <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 8002538:	28ff      	cmp	r0, #255	@ 0xff
 800253a:	d103      	bne.n	8002544 <SD_RxDataBlock+0x1c>
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <SD_RxDataBlock+0x44>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f7      	bne.n	8002534 <SD_RxDataBlock+0xc>
  if(token != 0xFE)
 8002544:	28fe      	cmp	r0, #254	@ 0xfe
 8002546:	d10f      	bne.n	8002568 <SD_RxDataBlock+0x40>
    SPI_RxBytePtr(buff++);
 8002548:	1c65      	adds	r5, r4, #1
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff ffe5 	bl	800251a <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002550:	4628      	mov	r0, r5
 8002552:	3402      	adds	r4, #2
 8002554:	f7ff ffe1 	bl	800251a <SPI_RxBytePtr>
  } while(btr -= 2);
 8002558:	3e02      	subs	r6, #2
 800255a:	d1f5      	bne.n	8002548 <SD_RxDataBlock+0x20>
  SPI_RxByte(); /* CRC 무시 */
 800255c:	f7ff ff38 	bl	80023d0 <SPI_RxByte>
  SPI_RxByte();
 8002560:	f7ff ff36 	bl	80023d0 <SPI_RxByte>
  return TRUE;
 8002564:	2001      	movs	r0, #1
}
 8002566:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 8002568:	2000      	movs	r0, #0
 800256a:	e7fc      	b.n	8002566 <SD_RxDataBlock+0x3e>
 800256c:	2000252d 	.word	0x2000252d

08002570 <SD_TxDataBlock>:
{
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	4605      	mov	r5, r0
 8002574:	460c      	mov	r4, r1
  if (SD_ReadyWait() != 0xFF)
 8002576:	f7ff ff89 	bl	800248c <SD_ReadyWait>
 800257a:	28ff      	cmp	r0, #255	@ 0xff
 800257c:	d001      	beq.n	8002582 <SD_TxDataBlock+0x12>
    return FALSE;
 800257e:	2000      	movs	r0, #0
}
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	2600      	movs	r6, #0
  SPI_TxByte(token);
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff fef9 	bl	800237c <SPI_TxByte>
  if (token != 0xFD)
 800258a:	2cfd      	cmp	r4, #253	@ 0xfd
 800258c:	d01f      	beq.n	80025ce <SD_TxDataBlock+0x5e>
    wc = 0;
 800258e:	4634      	mov	r4, r6
      SPI_TxByte(*buff++);
 8002590:	7828      	ldrb	r0, [r5, #0]
 8002592:	f7ff fef3 	bl	800237c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002596:	7868      	ldrb	r0, [r5, #1]
 8002598:	3502      	adds	r5, #2
 800259a:	f7ff feef 	bl	800237c <SPI_TxByte>
    } while (--wc);
 800259e:	1e63      	subs	r3, r4, #1
 80025a0:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 80025a4:	d1f4      	bne.n	8002590 <SD_TxDataBlock+0x20>
    SPI_RxByte();       /* CRC 무시 */
 80025a6:	f7ff ff13 	bl	80023d0 <SPI_RxByte>
    SPI_RxByte();
 80025aa:	f7ff ff11 	bl	80023d0 <SPI_RxByte>
    while (i <= 64)
 80025ae:	2c40      	cmp	r4, #64	@ 0x40
 80025b0:	d809      	bhi.n	80025c6 <SD_TxDataBlock+0x56>
      resp = SPI_RxByte();
 80025b2:	f7ff ff0d 	bl	80023d0 <SPI_RxByte>
 80025b6:	4606      	mov	r6, r0
      if ((resp & 0x1F) == 0x05)
 80025b8:	f000 031f 	and.w	r3, r0, #31
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d002      	beq.n	80025c6 <SD_TxDataBlock+0x56>
      i++;
 80025c0:	1c63      	adds	r3, r4, #1
 80025c2:	b2dc      	uxtb	r4, r3
 80025c4:	e7f3      	b.n	80025ae <SD_TxDataBlock+0x3e>
    while (SPI_RxByte() == 0);
 80025c6:	f7ff ff03 	bl	80023d0 <SPI_RxByte>
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d0fb      	beq.n	80025c6 <SD_TxDataBlock+0x56>
  if ((resp & 0x1F) == 0x05)
 80025ce:	f006 061f 	and.w	r6, r6, #31
 80025d2:	2e05      	cmp	r6, #5
 80025d4:	d001      	beq.n	80025da <SD_TxDataBlock+0x6a>
    return FALSE;
 80025d6:	2000      	movs	r0, #0
 80025d8:	e7d2      	b.n	8002580 <SD_TxDataBlock+0x10>
    return TRUE;
 80025da:	2001      	movs	r0, #1
 80025dc:	e7d0      	b.n	8002580 <SD_TxDataBlock+0x10>
	...

080025e0 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80025e0:	2800      	cmp	r0, #0
 80025e2:	f040 80b6 	bne.w	8002752 <SD_disk_initialize+0x172>
{
 80025e6:	b530      	push	{r4, r5, lr}
 80025e8:	b083      	sub	sp, #12
    return STA_NOINIT;

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80025ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002758 <SD_disk_initialize+0x178>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f013 0402 	ands.w	r4, r3, #2
 80025f2:	d004      	beq.n	80025fe <SD_disk_initialize+0x1e>
    return Stat;
 80025f4:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <SD_disk_initialize+0x178>)
 80025f6:	7818      	ldrb	r0, [r3, #0]
 80025f8:	b2c0      	uxtb	r0, r0
    /* Initialization failed */
    SD_PowerOff();
  }

  return Stat;
}
 80025fa:	b003      	add	sp, #12
 80025fc:	bd30      	pop	{r4, r5, pc}
  SD_PowerOn();
 80025fe:	f7ff ff07 	bl	8002410 <SD_PowerOn>
  SELECT();
 8002602:	f7ff fed1 	bl	80023a8 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1)
 8002606:	2100      	movs	r1, #0
 8002608:	2040      	movs	r0, #64	@ 0x40
 800260a:	f7ff ff51 	bl	80024b0 <SD_SendCmd>
 800260e:	4605      	mov	r5, r0
 8002610:	2801      	cmp	r0, #1
 8002612:	d011      	beq.n	8002638 <SD_disk_initialize+0x58>
  CardType = type;
 8002614:	4b51      	ldr	r3, [pc, #324]	@ (800275c <SD_disk_initialize+0x17c>)
 8002616:	701c      	strb	r4, [r3, #0]
  DESELECT();
 8002618:	f7ff fed0 	bl	80023bc <DESELECT>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800261c:	f7ff fed8 	bl	80023d0 <SPI_RxByte>
  if (type)
 8002620:	2c00      	cmp	r4, #0
 8002622:	f000 8093 	beq.w	800274c <SD_disk_initialize+0x16c>
    Stat &= ~STA_NOINIT;
 8002626:	4a4c      	ldr	r2, [pc, #304]	@ (8002758 <SD_disk_initialize+0x178>)
 8002628:	7813      	ldrb	r3, [r2, #0]
 800262a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800262e:	7013      	strb	r3, [r2, #0]
  return Stat;
 8002630:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <SD_disk_initialize+0x178>)
 8002632:	7818      	ldrb	r0, [r3, #0]
 8002634:	b2c0      	uxtb	r0, r0
 8002636:	e7e0      	b.n	80025fa <SD_disk_initialize+0x1a>
    Timer1 = 100;
 8002638:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <SD_disk_initialize+0x180>)
 800263a:	2264      	movs	r2, #100	@ 0x64
 800263c:	701a      	strb	r2, [r3, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800263e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002642:	2048      	movs	r0, #72	@ 0x48
 8002644:	f7ff ff34 	bl	80024b0 <SD_SendCmd>
 8002648:	2801      	cmp	r0, #1
 800264a:	d146      	bne.n	80026da <SD_disk_initialize+0xfa>
      for (n = 0; n < 4; n++)
 800264c:	4625      	mov	r5, r4
 800264e:	e008      	b.n	8002662 <SD_disk_initialize+0x82>
        ocr[n] = SPI_RxByte();
 8002650:	f7ff febe 	bl	80023d0 <SPI_RxByte>
 8002654:	f105 0308 	add.w	r3, r5, #8
 8002658:	446b      	add	r3, sp
 800265a:	f803 0c04 	strb.w	r0, [r3, #-4]
      for (n = 0; n < 4; n++)
 800265e:	3501      	adds	r5, #1
 8002660:	b2ed      	uxtb	r5, r5
 8002662:	2d03      	cmp	r5, #3
 8002664:	d9f4      	bls.n	8002650 <SD_disk_initialize+0x70>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002666:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d1d2      	bne.n	8002614 <SD_disk_initialize+0x34>
 800266e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002672:	2baa      	cmp	r3, #170	@ 0xaa
 8002674:	d1ce      	bne.n	8002614 <SD_disk_initialize+0x34>
 8002676:	e002      	b.n	800267e <SD_disk_initialize+0x9e>
        } while (Timer1);
 8002678:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <SD_disk_initialize+0x180>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b163      	cbz	r3, 8002698 <SD_disk_initialize+0xb8>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800267e:	2100      	movs	r1, #0
 8002680:	2077      	movs	r0, #119	@ 0x77
 8002682:	f7ff ff15 	bl	80024b0 <SD_SendCmd>
 8002686:	2801      	cmp	r0, #1
 8002688:	d8f6      	bhi.n	8002678 <SD_disk_initialize+0x98>
 800268a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800268e:	2069      	movs	r0, #105	@ 0x69
 8002690:	f7ff ff0e 	bl	80024b0 <SD_SendCmd>
 8002694:	2800      	cmp	r0, #0
 8002696:	d1ef      	bne.n	8002678 <SD_disk_initialize+0x98>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002698:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <SD_disk_initialize+0x180>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80026a0:	b90b      	cbnz	r3, 80026a6 <SD_disk_initialize+0xc6>
  type = 0;
 80026a2:	4614      	mov	r4, r2
 80026a4:	e7b6      	b.n	8002614 <SD_disk_initialize+0x34>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80026a6:	2100      	movs	r1, #0
 80026a8:	207a      	movs	r0, #122	@ 0x7a
 80026aa:	f7ff ff01 	bl	80024b0 <SD_SendCmd>
 80026ae:	4605      	mov	r5, r0
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d1af      	bne.n	8002614 <SD_disk_initialize+0x34>
          for (n = 0; n < 4; n++)
 80026b4:	2d03      	cmp	r5, #3
 80026b6:	d809      	bhi.n	80026cc <SD_disk_initialize+0xec>
            ocr[n] = SPI_RxByte();
 80026b8:	f7ff fe8a 	bl	80023d0 <SPI_RxByte>
 80026bc:	f105 0308 	add.w	r3, r5, #8
 80026c0:	446b      	add	r3, sp
 80026c2:	f803 0c04 	strb.w	r0, [r3, #-4]
          for (n = 0; n < 4; n++)
 80026c6:	3501      	adds	r5, #1
 80026c8:	b2ed      	uxtb	r5, r5
 80026ca:	e7f3      	b.n	80026b4 <SD_disk_initialize+0xd4>
          type = (ocr[0] & 0x40) ? 6 : 2;
 80026cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026d0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80026d4:	d038      	beq.n	8002748 <SD_disk_initialize+0x168>
 80026d6:	2406      	movs	r4, #6
 80026d8:	e79c      	b.n	8002614 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80026da:	2100      	movs	r1, #0
 80026dc:	2077      	movs	r0, #119	@ 0x77
 80026de:	f7ff fee7 	bl	80024b0 <SD_SendCmd>
 80026e2:	2801      	cmp	r0, #1
 80026e4:	d810      	bhi.n	8002708 <SD_disk_initialize+0x128>
 80026e6:	2100      	movs	r1, #0
 80026e8:	2069      	movs	r0, #105	@ 0x69
 80026ea:	f7ff fee1 	bl	80024b0 <SD_SendCmd>
 80026ee:	2801      	cmp	r0, #1
 80026f0:	d80a      	bhi.n	8002708 <SD_disk_initialize+0x128>
 80026f2:	2502      	movs	r5, #2
 80026f4:	e008      	b.n	8002708 <SD_disk_initialize+0x128>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80026f6:	2100      	movs	r1, #0
 80026f8:	2077      	movs	r0, #119	@ 0x77
 80026fa:	f7ff fed9 	bl	80024b0 <SD_SendCmd>
 80026fe:	2801      	cmp	r0, #1
 8002700:	d911      	bls.n	8002726 <SD_disk_initialize+0x146>
      } while (Timer1);
 8002702:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <SD_disk_initialize+0x180>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	b13b      	cbz	r3, 8002718 <SD_disk_initialize+0x138>
        if (type == 2)
 8002708:	2d02      	cmp	r5, #2
 800270a:	d0f4      	beq.n	80026f6 <SD_disk_initialize+0x116>
          if (SD_SendCmd(CMD1, 0) == 0)
 800270c:	2100      	movs	r1, #0
 800270e:	2041      	movs	r0, #65	@ 0x41
 8002710:	f7ff fece 	bl	80024b0 <SD_SendCmd>
 8002714:	2800      	cmp	r0, #0
 8002716:	d1f4      	bne.n	8002702 <SD_disk_initialize+0x122>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <SD_disk_initialize+0x180>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002720:	b943      	cbnz	r3, 8002734 <SD_disk_initialize+0x154>
        type = 0;
 8002722:	4614      	mov	r4, r2
 8002724:	e776      	b.n	8002614 <SD_disk_initialize+0x34>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002726:	2100      	movs	r1, #0
 8002728:	2069      	movs	r0, #105	@ 0x69
 800272a:	f7ff fec1 	bl	80024b0 <SD_SendCmd>
 800272e:	2800      	cmp	r0, #0
 8002730:	d1e7      	bne.n	8002702 <SD_disk_initialize+0x122>
 8002732:	e7f1      	b.n	8002718 <SD_disk_initialize+0x138>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002738:	2050      	movs	r0, #80	@ 0x50
 800273a:	f7ff feb9 	bl	80024b0 <SD_SendCmd>
 800273e:	2800      	cmp	r0, #0
 8002740:	f47f af68 	bne.w	8002614 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002744:	462c      	mov	r4, r5
 8002746:	e765      	b.n	8002614 <SD_disk_initialize+0x34>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002748:	2402      	movs	r4, #2
 800274a:	e763      	b.n	8002614 <SD_disk_initialize+0x34>
    SD_PowerOff();
 800274c:	f7ff fe0a 	bl	8002364 <SD_PowerOff>
 8002750:	e76e      	b.n	8002630 <SD_disk_initialize+0x50>
    return STA_NOINIT;
 8002752:	2001      	movs	r0, #1
}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000000 	.word	0x20000000
 800275c:	200022b5 	.word	0x200022b5
 8002760:	2000252d 	.word	0x2000252d

08002764 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
  if (drv)
 8002764:	b918      	cbnz	r0, 800276e <SD_disk_status+0xa>
    return STA_NOINIT;

  return Stat;
 8002766:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <SD_disk_status+0x10>)
 8002768:	7818      	ldrb	r0, [r3, #0]
 800276a:	b2c0      	uxtb	r0, r0
 800276c:	4770      	bx	lr
    return STA_NOINIT;
 800276e:	2001      	movs	r0, #1
}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000000 	.word	0x20000000

08002778 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 8002778:	2800      	cmp	r0, #0
 800277a:	d13e      	bne.n	80027fa <SD_disk_read+0x82>
{
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	460d      	mov	r5, r1
 8002780:	4616      	mov	r6, r2
 8002782:	461c      	mov	r4, r3
  if (pdrv || !count)
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03a      	beq.n	80027fe <SD_disk_read+0x86>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 8002788:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <SD_disk_read+0x90>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f013 0f01 	tst.w	r3, #1
 8002790:	d137      	bne.n	8002802 <SD_disk_read+0x8a>
    return RES_NOTRDY;

  if (!(CardType & 4))
 8002792:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <SD_disk_read+0x94>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	f013 0f04 	tst.w	r3, #4
 800279a:	d100      	bne.n	800279e <SD_disk_read+0x26>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800279c:	0256      	lsls	r6, r2, #9

  SELECT();
 800279e:	f7ff fe03 	bl	80023a8 <SELECT>

  if (count == 1)
 80027a2:	2c01      	cmp	r4, #1
 80027a4:	d01a      	beq.n	80027dc <SD_disk_read+0x64>
      count = 0;
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80027a6:	4631      	mov	r1, r6
 80027a8:	2052      	movs	r0, #82	@ 0x52
 80027aa:	f7ff fe81 	bl	80024b0 <SD_SendCmd>
 80027ae:	b968      	cbnz	r0, 80027cc <SD_disk_read+0x54>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80027b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7ff feb7 	bl	8002528 <SD_RxDataBlock>
 80027ba:	b118      	cbz	r0, 80027c4 <SD_disk_read+0x4c>
          break;

        buff += 512;
 80027bc:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      } while (--count);
 80027c0:	3c01      	subs	r4, #1
 80027c2:	d1f5      	bne.n	80027b0 <SD_disk_read+0x38>

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80027c4:	2100      	movs	r1, #0
 80027c6:	204c      	movs	r0, #76	@ 0x4c
 80027c8:	f7ff fe72 	bl	80024b0 <SD_SendCmd>
    }
  }

  DESELECT();
 80027cc:	f7ff fdf6 	bl	80023bc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80027d0:	f7ff fdfe 	bl	80023d0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80027d4:	1e20      	subs	r0, r4, #0
 80027d6:	bf18      	it	ne
 80027d8:	2001      	movne	r0, #1
}
 80027da:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80027dc:	4631      	mov	r1, r6
 80027de:	2051      	movs	r0, #81	@ 0x51
 80027e0:	f7ff fe66 	bl	80024b0 <SD_SendCmd>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d1f1      	bne.n	80027cc <SD_disk_read+0x54>
 80027e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027ec:	4628      	mov	r0, r5
 80027ee:	f7ff fe9b 	bl	8002528 <SD_RxDataBlock>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d0ea      	beq.n	80027cc <SD_disk_read+0x54>
      count = 0;
 80027f6:	2400      	movs	r4, #0
 80027f8:	e7e8      	b.n	80027cc <SD_disk_read+0x54>
    return RES_PARERR;
 80027fa:	2004      	movs	r0, #4
}
 80027fc:	4770      	bx	lr
    return RES_PARERR;
 80027fe:	2004      	movs	r0, #4
 8002800:	e7eb      	b.n	80027da <SD_disk_read+0x62>
    return RES_NOTRDY;
 8002802:	2003      	movs	r0, #3
 8002804:	e7e9      	b.n	80027da <SD_disk_read+0x62>
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000
 800280c:	200022b5 	.word	0x200022b5

08002810 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 8002810:	2800      	cmp	r0, #0
 8002812:	d152      	bne.n	80028ba <SD_disk_write+0xaa>
{
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	460d      	mov	r5, r1
 8002818:	4616      	mov	r6, r2
 800281a:	461c      	mov	r4, r3
  if (pdrv || !count)
 800281c:	2b00      	cmp	r3, #0
 800281e:	d04e      	beq.n	80028be <SD_disk_write+0xae>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 8002820:	4b2a      	ldr	r3, [pc, #168]	@ (80028cc <SD_disk_write+0xbc>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f013 0f01 	tst.w	r3, #1
 8002828:	d14b      	bne.n	80028c2 <SD_disk_write+0xb2>
    return RES_NOTRDY;

  if (Stat & STA_PROTECT)
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <SD_disk_write+0xbc>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f013 0f04 	tst.w	r3, #4
 8002832:	d148      	bne.n	80028c6 <SD_disk_write+0xb6>
    return RES_WRPRT;

  if (!(CardType & 4))
 8002834:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <SD_disk_write+0xc0>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f013 0f04 	tst.w	r3, #4
 800283c:	d100      	bne.n	8002840 <SD_disk_write+0x30>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800283e:	0256      	lsls	r6, r2, #9

  SELECT();
 8002840:	f7ff fdb2 	bl	80023a8 <SELECT>

  if (count == 1)
 8002844:	2c01      	cmp	r4, #1
 8002846:	d01f      	beq.n	8002888 <SD_disk_write+0x78>
      count = 0;
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8002848:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <SD_disk_write+0xc0>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f013 0f02 	tst.w	r3, #2
 8002850:	d128      	bne.n	80028a4 <SD_disk_write+0x94>
    {
      SD_SendCmd(CMD55, 0);
      SD_SendCmd(CMD23, count); /* ACMD23 */
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002852:	4631      	mov	r1, r6
 8002854:	2059      	movs	r0, #89	@ 0x59
 8002856:	f7ff fe2b 	bl	80024b0 <SD_SendCmd>
 800285a:	b968      	cbnz	r0, 8002878 <SD_disk_write+0x68>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800285c:	21fc      	movs	r1, #252	@ 0xfc
 800285e:	4628      	mov	r0, r5
 8002860:	f7ff fe86 	bl	8002570 <SD_TxDataBlock>
 8002864:	b118      	cbz	r0, 800286e <SD_disk_write+0x5e>
          break;

        buff += 512;
 8002866:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      } while (--count);
 800286a:	3c01      	subs	r4, #1
 800286c:	d1f6      	bne.n	800285c <SD_disk_write+0x4c>

      if(!SD_TxDataBlock(0, 0xFD))
 800286e:	21fd      	movs	r1, #253	@ 0xfd
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff fe7d 	bl	8002570 <SD_TxDataBlock>
 8002876:	b1f0      	cbz	r0, 80028b6 <SD_disk_write+0xa6>
        count = 1;
      }
    }
  }

  DESELECT();
 8002878:	f7ff fda0 	bl	80023bc <DESELECT>
  SPI_RxByte();
 800287c:	f7ff fda8 	bl	80023d0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002880:	1e20      	subs	r0, r4, #0
 8002882:	bf18      	it	ne
 8002884:	2001      	movne	r0, #1
}
 8002886:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002888:	4631      	mov	r1, r6
 800288a:	2058      	movs	r0, #88	@ 0x58
 800288c:	f7ff fe10 	bl	80024b0 <SD_SendCmd>
 8002890:	2800      	cmp	r0, #0
 8002892:	d1f1      	bne.n	8002878 <SD_disk_write+0x68>
 8002894:	21fe      	movs	r1, #254	@ 0xfe
 8002896:	4628      	mov	r0, r5
 8002898:	f7ff fe6a 	bl	8002570 <SD_TxDataBlock>
 800289c:	2800      	cmp	r0, #0
 800289e:	d0eb      	beq.n	8002878 <SD_disk_write+0x68>
      count = 0;
 80028a0:	2400      	movs	r4, #0
 80028a2:	e7e9      	b.n	8002878 <SD_disk_write+0x68>
      SD_SendCmd(CMD55, 0);
 80028a4:	2100      	movs	r1, #0
 80028a6:	2077      	movs	r0, #119	@ 0x77
 80028a8:	f7ff fe02 	bl	80024b0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80028ac:	4621      	mov	r1, r4
 80028ae:	2057      	movs	r0, #87	@ 0x57
 80028b0:	f7ff fdfe 	bl	80024b0 <SD_SendCmd>
 80028b4:	e7cd      	b.n	8002852 <SD_disk_write+0x42>
        count = 1;
 80028b6:	2401      	movs	r4, #1
 80028b8:	e7de      	b.n	8002878 <SD_disk_write+0x68>
    return RES_PARERR;
 80028ba:	2004      	movs	r0, #4
}
 80028bc:	4770      	bx	lr
    return RES_PARERR;
 80028be:	2004      	movs	r0, #4
 80028c0:	e7e1      	b.n	8002886 <SD_disk_write+0x76>
    return RES_NOTRDY;
 80028c2:	2003      	movs	r0, #3
 80028c4:	e7df      	b.n	8002886 <SD_disk_write+0x76>
    return RES_WRPRT;
 80028c6:	2002      	movs	r0, #2
 80028c8:	e7dd      	b.n	8002886 <SD_disk_write+0x76>
 80028ca:	bf00      	nop
 80028cc:	20000000 	.word	0x20000000
 80028d0:	200022b5 	.word	0x200022b5

080028d4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	b084      	sub	sp, #16
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;

  if (drv)
 80028d8:	2800      	cmp	r0, #0
 80028da:	f040 80b7 	bne.w	8002a4c <SD_disk_ioctl+0x178>
 80028de:	460d      	mov	r5, r1
 80028e0:	4616      	mov	r6, r2
 80028e2:	4604      	mov	r4, r0
    return RES_PARERR;

  res = RES_ERROR;

  if (ctrl == CTRL_POWER)
 80028e4:	2905      	cmp	r1, #5
 80028e6:	d013      	beq.n	8002910 <SD_disk_ioctl+0x3c>
      res = RES_PARERR;
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80028e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a54 <SD_disk_ioctl+0x180>)
 80028ea:	781c      	ldrb	r4, [r3, #0]
 80028ec:	f014 0401 	ands.w	r4, r4, #1
 80028f0:	f040 80ae 	bne.w	8002a50 <SD_disk_ioctl+0x17c>
      return RES_NOTRDY;

    SELECT();
 80028f4:	f7ff fd58 	bl	80023a8 <SELECT>

    switch (ctrl)
 80028f8:	2d0d      	cmp	r5, #13
 80028fa:	f200 809b 	bhi.w	8002a34 <SD_disk_ioctl+0x160>
 80028fe:	e8df f005 	tbb	[pc, r5]
 8002902:	2063      	.short	0x2063
 8002904:	9999995f 	.word	0x9999995f
 8002908:	99999999 	.word	0x99999999
 800290c:	87786999 	.word	0x87786999
    switch (*ptr)
 8002910:	7815      	ldrb	r5, [r2, #0]
 8002912:	2d01      	cmp	r5, #1
 8002914:	d00e      	beq.n	8002934 <SD_disk_ioctl+0x60>
 8002916:	2d02      	cmp	r5, #2
 8002918:	d00f      	beq.n	800293a <SD_disk_ioctl+0x66>
 800291a:	b10d      	cbz	r5, 8002920 <SD_disk_ioctl+0x4c>
 800291c:	2404      	movs	r4, #4
 800291e:	e08e      	b.n	8002a3e <SD_disk_ioctl+0x16a>
      if (SD_CheckPower())
 8002920:	f7ff fd26 	bl	8002370 <SD_CheckPower>
 8002924:	4604      	mov	r4, r0
 8002926:	2800      	cmp	r0, #0
 8002928:	f000 8089 	beq.w	8002a3e <SD_disk_ioctl+0x16a>
        SD_PowerOff();          /* Power Off */
 800292c:	f7ff fd1a 	bl	8002364 <SD_PowerOff>
      res = RES_OK;
 8002930:	462c      	mov	r4, r5
 8002932:	e084      	b.n	8002a3e <SD_disk_ioctl+0x16a>
      SD_PowerOn();             /* Power On */
 8002934:	f7ff fd6c 	bl	8002410 <SD_PowerOn>
      break;
 8002938:	e081      	b.n	8002a3e <SD_disk_ioctl+0x16a>
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800293a:	f7ff fd19 	bl	8002370 <SD_CheckPower>
 800293e:	7070      	strb	r0, [r6, #1]
      break;
 8002940:	e07d      	b.n	8002a3e <SD_disk_ioctl+0x16a>
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002942:	2100      	movs	r1, #0
 8002944:	2049      	movs	r0, #73	@ 0x49
 8002946:	f7ff fdb3 	bl	80024b0 <SD_SendCmd>
 800294a:	4604      	mov	r4, r0
 800294c:	b108      	cbz	r0, 8002952 <SD_disk_ioctl+0x7e>
  res = RES_ERROR;
 800294e:	462c      	mov	r4, r5
 8002950:	e071      	b.n	8002a36 <SD_disk_ioctl+0x162>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002952:	2110      	movs	r1, #16
 8002954:	4668      	mov	r0, sp
 8002956:	f7ff fde7 	bl	8002528 <SD_RxDataBlock>
 800295a:	2800      	cmp	r0, #0
 800295c:	d072      	beq.n	8002a44 <SD_disk_ioctl+0x170>
      {
        if ((csd[0] >> 6) == 1)
 800295e:	f89d 3000 	ldrb.w	r3, [sp]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2b01      	cmp	r3, #1
 8002966:	d01f      	beq.n	80029a8 <SD_disk_ioctl+0xd4>
          *(DWORD*) buff = (DWORD) csize << 10;
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002968:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800296c:	f002 020f 	and.w	r2, r2, #15
 8002970:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002974:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8002978:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	f003 0306 	and.w	r3, r3, #6
 8002982:	441a      	add	r2, r3
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002984:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002988:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002992:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8002996:	0289      	lsls	r1, r1, #10
 8002998:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 800299c:	440b      	add	r3, r1
 800299e:	3301      	adds	r3, #1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80029a0:	3a07      	subs	r2, #7
 80029a2:	4093      	lsls	r3, r2
 80029a4:	6033      	str	r3, [r6, #0]
 80029a6:	e046      	b.n	8002a36 <SD_disk_ioctl+0x162>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80029a8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80029ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80029b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	b29b      	uxth	r3, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	6033      	str	r3, [r6, #0]
 80029be:	e03a      	b.n	8002a36 <SD_disk_ioctl+0x162>
      }
      break;

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80029c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029c4:	8033      	strh	r3, [r6, #0]
      res = RES_OK;
      break;
 80029c6:	e036      	b.n	8002a36 <SD_disk_ioctl+0x162>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80029c8:	f7ff fd60 	bl	800248c <SD_ReadyWait>
 80029cc:	28ff      	cmp	r0, #255	@ 0xff
 80029ce:	d03b      	beq.n	8002a48 <SD_disk_ioctl+0x174>
  res = RES_ERROR;
 80029d0:	2401      	movs	r4, #1
 80029d2:	e030      	b.n	8002a36 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80029d4:	2100      	movs	r1, #0
 80029d6:	2049      	movs	r0, #73	@ 0x49
 80029d8:	f7ff fd6a 	bl	80024b0 <SD_SendCmd>
 80029dc:	4604      	mov	r4, r0
 80029de:	b108      	cbz	r0, 80029e4 <SD_disk_ioctl+0x110>
  res = RES_ERROR;
 80029e0:	2401      	movs	r4, #1
 80029e2:	e028      	b.n	8002a36 <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80029e4:	2110      	movs	r1, #16
 80029e6:	4630      	mov	r0, r6
 80029e8:	f7ff fd9e 	bl	8002528 <SD_RxDataBlock>
 80029ec:	bb18      	cbnz	r0, 8002a36 <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 80029ee:	2401      	movs	r4, #1
 80029f0:	e021      	b.n	8002a36 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80029f2:	2100      	movs	r1, #0
 80029f4:	204a      	movs	r0, #74	@ 0x4a
 80029f6:	f7ff fd5b 	bl	80024b0 <SD_SendCmd>
 80029fa:	4604      	mov	r4, r0
 80029fc:	b108      	cbz	r0, 8002a02 <SD_disk_ioctl+0x12e>
  res = RES_ERROR;
 80029fe:	2401      	movs	r4, #1
 8002a00:	e019      	b.n	8002a36 <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002a02:	2110      	movs	r1, #16
 8002a04:	4630      	mov	r0, r6
 8002a06:	f7ff fd8f 	bl	8002528 <SD_RxDataBlock>
 8002a0a:	b9a0      	cbnz	r0, 8002a36 <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 8002a0c:	2401      	movs	r4, #1
 8002a0e:	e012      	b.n	8002a36 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002a10:	2100      	movs	r1, #0
 8002a12:	207a      	movs	r0, #122	@ 0x7a
 8002a14:	f7ff fd4c 	bl	80024b0 <SD_SendCmd>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	b138      	cbz	r0, 8002a2c <SD_disk_ioctl+0x158>

        res = RES_OK;
      }

    default:
      res = RES_PARERR;
 8002a1c:	2404      	movs	r4, #4
 8002a1e:	e00a      	b.n	8002a36 <SD_disk_ioctl+0x162>
          *ptr++ = SPI_RxByte();
 8002a20:	f7ff fcd6 	bl	80023d0 <SPI_RxByte>
 8002a24:	f806 0b01 	strb.w	r0, [r6], #1
        for (n = 0; n < 4; n++)
 8002a28:	3401      	adds	r4, #1
 8002a2a:	b2e4      	uxtb	r4, r4
 8002a2c:	2c03      	cmp	r4, #3
 8002a2e:	d9f7      	bls.n	8002a20 <SD_disk_ioctl+0x14c>
      res = RES_PARERR;
 8002a30:	2404      	movs	r4, #4
 8002a32:	e000      	b.n	8002a36 <SD_disk_ioctl+0x162>
    switch (ctrl)
 8002a34:	2404      	movs	r4, #4
    }

    DESELECT();
 8002a36:	f7ff fcc1 	bl	80023bc <DESELECT>
    SPI_RxByte();
 8002a3a:	f7ff fcc9 	bl	80023d0 <SPI_RxByte>
  }

  return res;
}
 8002a3e:	4620      	mov	r0, r4
 8002a40:	b004      	add	sp, #16
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
  res = RES_ERROR;
 8002a44:	462c      	mov	r4, r5
 8002a46:	e7f6      	b.n	8002a36 <SD_disk_ioctl+0x162>
        res = RES_OK;
 8002a48:	462c      	mov	r4, r5
 8002a4a:	e7f4      	b.n	8002a36 <SD_disk_ioctl+0x162>
    return RES_PARERR;
 8002a4c:	2404      	movs	r4, #4
 8002a4e:	e7f6      	b.n	8002a3e <SD_disk_ioctl+0x16a>
      return RES_NOTRDY;
 8002a50:	2403      	movs	r4, #3
 8002a52:	e7f4      	b.n	8002a3e <SD_disk_ioctl+0x16a>
 8002a54:	20000000 	.word	0x20000000

08002a58 <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a58:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a5c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002a60:	f013 0f01 	tst.w	r3, #1
 8002a64:	d011      	beq.n	8002a8a <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002a66:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a6a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a6e:	f013 0f01 	tst.w	r3, #1
 8002a72:	d101      	bne.n	8002a78 <ITM_SendChar+0x20>
 8002a74:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002a76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002a78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f9      	beq.n	8002a76 <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002a82:	b2c3      	uxtb	r3, r0
 8002a84:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002a88:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8002a8a:	4770      	bx	lr

08002a8c <ROCKET_SetMode>:
	packet.data[index + 3] = (uint8_t)(data & 0xFF);
}

uint8_t ROCKET_SetMode(uint8_t mode) {

	if(mode != MODE_PREFLIGHT && mode != MODE_INFLIGHT && mode != MODE_POSTFLIGHT) {
 8002a8c:	2802      	cmp	r0, #2
 8002a8e:	d803      	bhi.n	8002a98 <ROCKET_SetMode+0xc>
		return 0;
	}
	packet.header_states.mode = mode;
 8002a90:	4b02      	ldr	r3, [pc, #8]	@ (8002a9c <ROCKET_SetMode+0x10>)
 8002a92:	7018      	strb	r0, [r3, #0]
	return 1; // OK
 8002a94:	2001      	movs	r0, #1
 8002a96:	4770      	bx	lr
		return 0;
 8002a98:	2000      	movs	r0, #0
}
 8002a9a:	4770      	bx	lr
 8002a9c:	200022b8 	.word	0x200022b8

08002aa0 <ROCKET_InitRoutine>:

void ROCKET_InitRoutine(void) {
 8002aa0:	b570      	push	{r4, r5, r6, lr}
	MX_ADC1_Init();
	MX_CRC_Init();
	MX_FATFS_Init();
	*/

	printf("|----------Starting----------|\r\n");
 8002aa2:	484f      	ldr	r0, [pc, #316]	@ (8002be0 <ROCKET_InitRoutine+0x140>)
 8002aa4:	f008 fb60 	bl	800b168 <puts>
	Buzz(&htim3, TIM_CHANNEL_4, START);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	210c      	movs	r1, #12
 8002aac:	484d      	ldr	r0, [pc, #308]	@ (8002be4 <ROCKET_InitRoutine+0x144>)
 8002aae:	f7fe fe6d 	bl	800178c <Buzz>
	SPI_Init(1);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7ff fb08 	bl	80020c8 <SPI_Init>
	printf("(+) SPI1 succeeded...\r\n");
 8002ab8:	484b      	ldr	r0, [pc, #300]	@ (8002be8 <ROCKET_InitRoutine+0x148>)
 8002aba:	f008 fb55 	bl	800b168 <puts>
	SPI_Init(2);
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f7ff fb02 	bl	80020c8 <SPI_Init>
	printf("(+) SPI2 succeeded...\r\n");
 8002ac4:	4849      	ldr	r0, [pc, #292]	@ (8002bec <ROCKET_InitRoutine+0x14c>)
 8002ac6:	f008 fb4f 	bl	800b168 <puts>
	USART_Init(1);
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7ff fb96 	bl	80021fc <USART_Init>
	printf("(+) USART1 succeeded...\r\n");
 8002ad0:	4847      	ldr	r0, [pc, #284]	@ (8002bf0 <ROCKET_InitRoutine+0x150>)
 8002ad2:	f008 fb49 	bl	800b168 <puts>
	USART_Init(2);
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f7ff fb90 	bl	80021fc <USART_Init>
	printf("(+) USART2 succeeded...\r\n");
 8002adc:	4845      	ldr	r0, [pc, #276]	@ (8002bf4 <ROCKET_InitRoutine+0x154>)
 8002ade:	f008 fb43 	bl	800b168 <puts>
	USART_Init(3);
 8002ae2:	2003      	movs	r0, #3
 8002ae4:	f7ff fb8a 	bl	80021fc <USART_Init>
	printf("(+) USART3 succeeded...\r\n");
 8002ae8:	4843      	ldr	r0, [pc, #268]	@ (8002bf8 <ROCKET_InitRoutine+0x158>)
 8002aea:	f008 fb3d 	bl	800b168 <puts>

	printf("|----------Components initialization----------|\r\n");
 8002aee:	4843      	ldr	r0, [pc, #268]	@ (8002bfc <ROCKET_InitRoutine+0x15c>)
 8002af0:	f008 fb3a 	bl	800b168 <puts>
	ROCKET_SetMode(MODE_PREFLIGHT);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7ff ffc9 	bl	8002a8c <ROCKET_SetMode>
	printf("(+) Mode flight: %i succeeded...\r\n", packet.header_states.mode);
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <ROCKET_InitRoutine+0x160>)
 8002afc:	7819      	ldrb	r1, [r3, #0]
 8002afe:	4841      	ldr	r0, [pc, #260]	@ (8002c04 <ROCKET_InitRoutine+0x164>)
 8002b00:	f008 faca 	bl	800b098 <iprintf>
	// LED RGB
	WS2812_Init();
 8002b04:	f7ff fa16 	bl	8001f34 <WS2812_Init>
	printf("(+) WS2812 succeeded...\r\n");
 8002b08:	483f      	ldr	r0, [pc, #252]	@ (8002c08 <ROCKET_InitRoutine+0x168>)
 8002b0a:	f008 fb2d 	bl	800b168 <puts>
	// Multiplexer
	if (CD74HC4051_Init(&hadc1) != 1) {
 8002b0e:	483f      	ldr	r0, [pc, #252]	@ (8002c0c <ROCKET_InitRoutine+0x16c>)
 8002b10:	f7fe feb2 	bl	8001878 <CD74HC4051_Init>
 8002b14:	2801      	cmp	r0, #1
 8002b16:	d03e      	beq.n	8002b96 <ROCKET_InitRoutine+0xf6>
	  printf("(-) CD74HC4051 failed...\r\n");
 8002b18:	483d      	ldr	r0, [pc, #244]	@ (8002c10 <ROCKET_InitRoutine+0x170>)
 8002b1a:	f008 fb25 	bl	800b168 <puts>
		printf(" -> Pyro0 state: %i\r\n", packet.header_states.pyro0);
		printf(" -> Pyro1 state: %i\r\n", packet.header_states.pyro1);
		printf("(+) CD74HC4051 succeeded...\r\n");
	}
	// Barometer
	packet.header_states.barometer = BMP280_Init(&bmp_data, BMP_SPI_PORT) == 1 ? 0x01 : 0x00;
 8002b1e:	2102      	movs	r1, #2
 8002b20:	483c      	ldr	r0, [pc, #240]	@ (8002c14 <ROCKET_InitRoutine+0x174>)
 8002b22:	f7fe fe0d 	bl	8001740 <BMP280_Init>
 8002b26:	2801      	cmp	r0, #1
 8002b28:	bf14      	ite	ne
 8002b2a:	2000      	movne	r0, #0
 8002b2c:	2001      	moveq	r0, #1
 8002b2e:	4b34      	ldr	r3, [pc, #208]	@ (8002c00 <ROCKET_InitRoutine+0x160>)
 8002b30:	7118      	strb	r0, [r3, #4]
	printf(packet.header_states.barometer ? "(+) BMP280 succeeded...\r\n" : "(-) BMP280 failed...\r\n");
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d04c      	beq.n	8002bd0 <ROCKET_InitRoutine+0x130>
 8002b36:	4838      	ldr	r0, [pc, #224]	@ (8002c18 <ROCKET_InitRoutine+0x178>)
 8002b38:	f008 faae 	bl	800b098 <iprintf>
	// Accelerometer
	packet.header_states.accelerometer = ICM20602_Init(&icm_data) == 0 ? 0x01 : 0x00;
 8002b3c:	4837      	ldr	r0, [pc, #220]	@ (8002c1c <ROCKET_InitRoutine+0x17c>)
 8002b3e:	f7ff f81b 	bl	8001b78 <ICM20602_Init>
 8002b42:	fab0 f080 	clz	r0, r0
 8002b46:	0940      	lsrs	r0, r0, #5
 8002b48:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <ROCKET_InitRoutine+0x160>)
 8002b4a:	70d8      	strb	r0, [r3, #3]
	printf(packet.header_states.accelerometer ? "(+) ICM20602 succeeded...\r\n" : "(-) ICM20602 failed...\r\n");
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d041      	beq.n	8002bd4 <ROCKET_InitRoutine+0x134>
 8002b50:	4833      	ldr	r0, [pc, #204]	@ (8002c20 <ROCKET_InitRoutine+0x180>)
 8002b52:	f008 faa1 	bl	800b098 <iprintf>
	// GPS
	packet.header_states.gps = L76LM33_Init(GPS_USART_PORT) == 1 ? 0x01 : 0x00;
 8002b56:	2002      	movs	r0, #2
 8002b58:	f7ff f87e 	bl	8001c58 <L76LM33_Init>
 8002b5c:	2801      	cmp	r0, #1
 8002b5e:	bf14      	ite	ne
 8002b60:	2000      	movne	r0, #0
 8002b62:	2001      	moveq	r0, #1
 8002b64:	4b26      	ldr	r3, [pc, #152]	@ (8002c00 <ROCKET_InitRoutine+0x160>)
 8002b66:	7158      	strb	r0, [r3, #5]
	printf(packet.header_states.gps ? "(+) L76LM33 succeeded...\r\n" : "(-) L76LM33 failed...\r\n");
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d035      	beq.n	8002bd8 <ROCKET_InitRoutine+0x138>
 8002b6c:	482d      	ldr	r0, [pc, #180]	@ (8002c24 <ROCKET_InitRoutine+0x184>)
 8002b6e:	f008 fa93 	bl	800b098 <iprintf>
	// SD Card
	packet.header_states.sd = MEM2067_Mount("log.txt") == 1 ? 0x01 : 0x00;
 8002b72:	482d      	ldr	r0, [pc, #180]	@ (8002c28 <ROCKET_InitRoutine+0x188>)
 8002b74:	f7ff f932 	bl	8001ddc <MEM2067_Mount>
 8002b78:	2801      	cmp	r0, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2000      	movne	r0, #0
 8002b7e:	2001      	moveq	r0, #1
 8002b80:	4b1f      	ldr	r3, [pc, #124]	@ (8002c00 <ROCKET_InitRoutine+0x160>)
 8002b82:	7198      	strb	r0, [r3, #6]
	printf(packet.header_states.sd ? "(+) SD card succeeded...\r\n" : "(-) SD card failed...\r\n");
 8002b84:	b350      	cbz	r0, 8002bdc <ROCKET_InitRoutine+0x13c>
 8002b86:	4829      	ldr	r0, [pc, #164]	@ (8002c2c <ROCKET_InitRoutine+0x18c>)
 8002b88:	f008 fa86 	bl	800b098 <iprintf>
	// Bluetooth
	HM10BLE_Init(&ble_data, BT_USART_PORT);
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	4828      	ldr	r0, [pc, #160]	@ (8002c30 <ROCKET_InitRoutine+0x190>)
 8002b90:	f7fe ff14 	bl	80019bc <HM10BLE_Init>
}
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
		packet.header_states.pyro0 = CD74HC4051_AnRead(&hadc1, CHANNEL_0, PYRO_CHANNEL_0, VREFPYRO);
 8002b96:	4e27      	ldr	r6, [pc, #156]	@ (8002c34 <ROCKET_InitRoutine+0x194>)
 8002b98:	4d1c      	ldr	r5, [pc, #112]	@ (8002c0c <ROCKET_InitRoutine+0x16c>)
 8002b9a:	4633      	mov	r3, r6
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f7fe fe9b 	bl	80018dc <CD74HC4051_AnRead>
 8002ba6:	4c16      	ldr	r4, [pc, #88]	@ (8002c00 <ROCKET_InitRoutine+0x160>)
 8002ba8:	7060      	strb	r0, [r4, #1]
		packet.header_states.pyro1 = CD74HC4051_AnRead(&hadc1, CHANNEL_0, PYRO_CHANNEL_1, VREFPYRO);
 8002baa:	4633      	mov	r3, r6
 8002bac:	2202      	movs	r2, #2
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f7fe fe93 	bl	80018dc <CD74HC4051_AnRead>
 8002bb6:	70a0      	strb	r0, [r4, #2]
		printf(" -> Pyro0 state: %i\r\n", packet.header_states.pyro0);
 8002bb8:	7861      	ldrb	r1, [r4, #1]
 8002bba:	481f      	ldr	r0, [pc, #124]	@ (8002c38 <ROCKET_InitRoutine+0x198>)
 8002bbc:	f008 fa6c 	bl	800b098 <iprintf>
		printf(" -> Pyro1 state: %i\r\n", packet.header_states.pyro1);
 8002bc0:	78a1      	ldrb	r1, [r4, #2]
 8002bc2:	481e      	ldr	r0, [pc, #120]	@ (8002c3c <ROCKET_InitRoutine+0x19c>)
 8002bc4:	f008 fa68 	bl	800b098 <iprintf>
		printf("(+) CD74HC4051 succeeded...\r\n");
 8002bc8:	481d      	ldr	r0, [pc, #116]	@ (8002c40 <ROCKET_InitRoutine+0x1a0>)
 8002bca:	f008 facd 	bl	800b168 <puts>
 8002bce:	e7a6      	b.n	8002b1e <ROCKET_InitRoutine+0x7e>
	printf(packet.header_states.barometer ? "(+) BMP280 succeeded...\r\n" : "(-) BMP280 failed...\r\n");
 8002bd0:	481c      	ldr	r0, [pc, #112]	@ (8002c44 <ROCKET_InitRoutine+0x1a4>)
 8002bd2:	e7b1      	b.n	8002b38 <ROCKET_InitRoutine+0x98>
	printf(packet.header_states.accelerometer ? "(+) ICM20602 succeeded...\r\n" : "(-) ICM20602 failed...\r\n");
 8002bd4:	481c      	ldr	r0, [pc, #112]	@ (8002c48 <ROCKET_InitRoutine+0x1a8>)
 8002bd6:	e7bc      	b.n	8002b52 <ROCKET_InitRoutine+0xb2>
	printf(packet.header_states.gps ? "(+) L76LM33 succeeded...\r\n" : "(-) L76LM33 failed...\r\n");
 8002bd8:	481c      	ldr	r0, [pc, #112]	@ (8002c4c <ROCKET_InitRoutine+0x1ac>)
 8002bda:	e7c8      	b.n	8002b6e <ROCKET_InitRoutine+0xce>
	printf(packet.header_states.sd ? "(+) SD card succeeded...\r\n" : "(-) SD card failed...\r\n");
 8002bdc:	481c      	ldr	r0, [pc, #112]	@ (8002c50 <ROCKET_InitRoutine+0x1b0>)
 8002bde:	e7d3      	b.n	8002b88 <ROCKET_InitRoutine+0xe8>
 8002be0:	0800d47c 	.word	0x0800d47c
 8002be4:	2000240c 	.word	0x2000240c
 8002be8:	0800d49c 	.word	0x0800d49c
 8002bec:	0800d4b4 	.word	0x0800d4b4
 8002bf0:	0800d4cc 	.word	0x0800d4cc
 8002bf4:	0800d4e8 	.word	0x0800d4e8
 8002bf8:	0800d504 	.word	0x0800d504
 8002bfc:	0800d520 	.word	0x0800d520
 8002c00:	200022b8 	.word	0x200022b8
 8002c04:	0800d554 	.word	0x0800d554
 8002c08:	0800d578 	.word	0x0800d578
 8002c0c:	200024fc 	.word	0x200024fc
 8002c10:	0800d594 	.word	0x0800d594
 8002c14:	20002308 	.word	0x20002308
 8002c18:	0800d3a8 	.word	0x0800d3a8
 8002c1c:	200022d0 	.word	0x200022d0
 8002c20:	0800d3dc 	.word	0x0800d3dc
 8002c24:	0800d414 	.word	0x0800d414
 8002c28:	0800d600 	.word	0x0800d600
 8002c2c:	0800d448 	.word	0x0800d448
 8002c30:	200022c8 	.word	0x200022c8
 8002c34:	40533333 	.word	0x40533333
 8002c38:	0800d5b0 	.word	0x0800d5b0
 8002c3c:	0800d5c8 	.word	0x0800d5c8
 8002c40:	0800d5e0 	.word	0x0800d5e0
 8002c44:	0800d3c4 	.word	0x0800d3c4
 8002c48:	0800d3f8 	.word	0x0800d3f8
 8002c4c:	0800d430 	.word	0x0800d430
 8002c50:	0800d464 	.word	0x0800d464

08002c54 <_write>:

}

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	460c      	mov	r4, r1
 8002c58:	4616      	mov	r6, r2
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5a:	2500      	movs	r5, #0
 8002c5c:	e004      	b.n	8002c68 <_write+0x14>
	{
		ITM_SendChar(*ptr++);
 8002c5e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002c62:	f7ff fef9 	bl	8002a58 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	3501      	adds	r5, #1
 8002c68:	42b5      	cmp	r5, r6
 8002c6a:	dbf8      	blt.n	8002c5e <_write+0xa>
	}
	return len;
}
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}

08002c70 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c70:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <Error_Handler+0x2>

08002c74 <MX_SPI1_Init>:
{
 8002c74:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8002c76:	480d      	ldr	r0, [pc, #52]	@ (8002cac <MX_SPI1_Init+0x38>)
 8002c78:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <MX_SPI1_Init+0x3c>)
 8002c7a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c7c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002c80:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c82:	2300      	movs	r3, #0
 8002c84:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c86:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c88:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c8a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c90:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c92:	2220      	movs	r2, #32
 8002c94:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c96:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c98:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c9a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c9c:	230a      	movs	r3, #10
 8002c9e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ca0:	f002 f958 	bl	8004f54 <HAL_SPI_Init>
 8002ca4:	b900      	cbnz	r0, 8002ca8 <MX_SPI1_Init+0x34>
}
 8002ca6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ca8:	f7ff ffe2 	bl	8002c70 <Error_Handler>
 8002cac:	2000249c 	.word	0x2000249c
 8002cb0:	40013000 	.word	0x40013000

08002cb4 <MX_USART1_UART_Init>:
{
 8002cb4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002cb6:	480a      	ldr	r0, [pc, #40]	@ (8002ce0 <MX_USART1_UART_Init+0x2c>)
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <MX_USART1_UART_Init+0x30>)
 8002cba:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002cbc:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002cc0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cc6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cc8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cca:	220c      	movs	r2, #12
 8002ccc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cd2:	f003 fba3 	bl	800641c <HAL_UART_Init>
 8002cd6:	b900      	cbnz	r0, 8002cda <MX_USART1_UART_Init+0x26>
}
 8002cd8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002cda:	f7ff ffc9 	bl	8002c70 <Error_Handler>
 8002cde:	bf00      	nop
 8002ce0:	200023c4 	.word	0x200023c4
 8002ce4:	40013800 	.word	0x40013800

08002ce8 <MX_USART2_UART_Init>:
{
 8002ce8:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002cea:	480a      	ldr	r0, [pc, #40]	@ (8002d14 <MX_USART2_UART_Init+0x2c>)
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <MX_USART2_UART_Init+0x30>)
 8002cee:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8002cf0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002cf4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cfa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cfc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cfe:	220c      	movs	r2, #12
 8002d00:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d02:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d06:	f003 fb89 	bl	800641c <HAL_UART_Init>
 8002d0a:	b900      	cbnz	r0, 8002d0e <MX_USART2_UART_Init+0x26>
}
 8002d0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002d0e:	f7ff ffaf 	bl	8002c70 <Error_Handler>
 8002d12:	bf00      	nop
 8002d14:	2000237c 	.word	0x2000237c
 8002d18:	40004400 	.word	0x40004400

08002d1c <MX_USART3_UART_Init>:
{
 8002d1c:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8002d1e:	480a      	ldr	r0, [pc, #40]	@ (8002d48 <MX_USART3_UART_Init+0x2c>)
 8002d20:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <MX_USART3_UART_Init+0x30>)
 8002d22:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8002d24:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002d28:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d2e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d30:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d32:	220c      	movs	r2, #12
 8002d34:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d3a:	f003 fb6f 	bl	800641c <HAL_UART_Init>
 8002d3e:	b900      	cbnz	r0, 8002d42 <MX_USART3_UART_Init+0x26>
}
 8002d40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002d42:	f7ff ff95 	bl	8002c70 <Error_Handler>
 8002d46:	bf00      	nop
 8002d48:	20002334 	.word	0x20002334
 8002d4c:	40004800 	.word	0x40004800

08002d50 <MX_TIM3_Init>:
{
 8002d50:	b500      	push	{lr}
 8002d52:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d54:	2300      	movs	r3, #0
 8002d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8002d5c:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5e:	9308      	str	r3, [sp, #32]
 8002d60:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	9303      	str	r3, [sp, #12]
 8002d68:	9304      	str	r3, [sp, #16]
 8002d6a:	9305      	str	r3, [sp, #20]
 8002d6c:	9306      	str	r3, [sp, #24]
 8002d6e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8002d70:	481e      	ldr	r0, [pc, #120]	@ (8002dec <MX_TIM3_Init+0x9c>)
 8002d72:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <MX_TIM3_Init+0xa0>)
 8002d74:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 127;
 8002d76:	227f      	movs	r2, #127	@ 0x7f
 8002d78:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 20;
 8002d7c:	2214      	movs	r2, #20
 8002d7e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d80:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d82:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d84:	f002 fd10 	bl	80057a8 <HAL_TIM_Base_Init>
 8002d88:	bb28      	cbnz	r0, 8002dd6 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d8e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d90:	a90a      	add	r1, sp, #40	@ 0x28
 8002d92:	4816      	ldr	r0, [pc, #88]	@ (8002dec <MX_TIM3_Init+0x9c>)
 8002d94:	f002 ff78 	bl	8005c88 <HAL_TIM_ConfigClockSource>
 8002d98:	b9f8      	cbnz	r0, 8002dda <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d9a:	4814      	ldr	r0, [pc, #80]	@ (8002dec <MX_TIM3_Init+0x9c>)
 8002d9c:	f002 fd53 	bl	8005846 <HAL_TIM_PWM_Init>
 8002da0:	b9e8      	cbnz	r0, 8002dde <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da8:	a908      	add	r1, sp, #32
 8002daa:	4810      	ldr	r0, [pc, #64]	@ (8002dec <MX_TIM3_Init+0x9c>)
 8002dac:	f003 fad8 	bl	8006360 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	b9b8      	cbnz	r0, 8002de2 <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db2:	2360      	movs	r3, #96	@ 0x60
 8002db4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dba:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dbc:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	a901      	add	r1, sp, #4
 8002dc2:	480a      	ldr	r0, [pc, #40]	@ (8002dec <MX_TIM3_Init+0x9c>)
 8002dc4:	f002 fe9e 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 8002dc8:	b968      	cbnz	r0, 8002de6 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8002dca:	4808      	ldr	r0, [pc, #32]	@ (8002dec <MX_TIM3_Init+0x9c>)
 8002dcc:	f000 f9a8 	bl	8003120 <HAL_TIM_MspPostInit>
}
 8002dd0:	b00f      	add	sp, #60	@ 0x3c
 8002dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002dd6:	f7ff ff4b 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002dda:	f7ff ff49 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002dde:	f7ff ff47 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002de2:	f7ff ff45 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002de6:	f7ff ff43 	bl	8002c70 <Error_Handler>
 8002dea:	bf00      	nop
 8002dec:	2000240c 	.word	0x2000240c
 8002df0:	40000400 	.word	0x40000400

08002df4 <MX_TIM2_Init>:
{
 8002df4:	b500      	push	{lr}
 8002df6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9302      	str	r3, [sp, #8]
 8002dfc:	9303      	str	r3, [sp, #12]
 8002dfe:	9304      	str	r3, [sp, #16]
 8002e00:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8002e06:	4814      	ldr	r0, [pc, #80]	@ (8002e58 <MX_TIM2_Init+0x64>)
 8002e08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e0c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 14400;
 8002e0e:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8002e12:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e14:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8002e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e1a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e1e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e20:	f002 fcc2 	bl	80057a8 <HAL_TIM_Base_Init>
 8002e24:	b990      	cbnz	r0, 8002e4c <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e2c:	a902      	add	r1, sp, #8
 8002e2e:	480a      	ldr	r0, [pc, #40]	@ (8002e58 <MX_TIM2_Init+0x64>)
 8002e30:	f002 ff2a 	bl	8005c88 <HAL_TIM_ConfigClockSource>
 8002e34:	b960      	cbnz	r0, 8002e50 <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e3a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e3c:	4669      	mov	r1, sp
 8002e3e:	4806      	ldr	r0, [pc, #24]	@ (8002e58 <MX_TIM2_Init+0x64>)
 8002e40:	f003 fa8e 	bl	8006360 <HAL_TIMEx_MasterConfigSynchronization>
 8002e44:	b930      	cbnz	r0, 8002e54 <MX_TIM2_Init+0x60>
}
 8002e46:	b007      	add	sp, #28
 8002e48:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002e4c:	f7ff ff10 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002e50:	f7ff ff0e 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002e54:	f7ff ff0c 	bl	8002c70 <Error_Handler>
 8002e58:	20002454 	.word	0x20002454

08002e5c <MX_ADC1_Init>:
{
 8002e5c:	b500      	push	{lr}
 8002e5e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e60:	2300      	movs	r3, #0
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	9302      	str	r3, [sp, #8]
 8002e66:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8002e68:	480f      	ldr	r0, [pc, #60]	@ (8002ea8 <MX_ADC1_Init+0x4c>)
 8002e6a:	4a10      	ldr	r2, [pc, #64]	@ (8002eac <MX_ADC1_Init+0x50>)
 8002e6c:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e6e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e70:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e72:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e74:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002e78:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e7a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e80:	f000 fb48 	bl	8003514 <HAL_ADC_Init>
 8002e84:	b960      	cbnz	r0, 8002ea0 <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e8e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e90:	a901      	add	r1, sp, #4
 8002e92:	4805      	ldr	r0, [pc, #20]	@ (8002ea8 <MX_ADC1_Init+0x4c>)
 8002e94:	f000 fe02 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8002e98:	b920      	cbnz	r0, 8002ea4 <MX_ADC1_Init+0x48>
}
 8002e9a:	b005      	add	sp, #20
 8002e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002ea0:	f7ff fee6 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002ea4:	f7ff fee4 	bl	8002c70 <Error_Handler>
 8002ea8:	200024fc 	.word	0x200024fc
 8002eac:	40012400 	.word	0x40012400

08002eb0 <MX_CRC_Init>:
{
 8002eb0:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8002eb2:	4804      	ldr	r0, [pc, #16]	@ (8002ec4 <MX_CRC_Init+0x14>)
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <MX_CRC_Init+0x18>)
 8002eb6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002eb8:	f001 f915 	bl	80040e6 <HAL_CRC_Init>
 8002ebc:	b900      	cbnz	r0, 8002ec0 <MX_CRC_Init+0x10>
}
 8002ebe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ec0:	f7ff fed6 	bl	8002c70 <Error_Handler>
 8002ec4:	200024f4 	.word	0x200024f4
 8002ec8:	40023000 	.word	0x40023000

08002ecc <SystemClock_Config>:
{
 8002ecc:	b500      	push	{lr}
 8002ece:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ed0:	2228      	movs	r2, #40	@ 0x28
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	eb0d 0002 	add.w	r0, sp, r2
 8002ed8:	f008 fa26 	bl	800b328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002edc:	2300      	movs	r3, #0
 8002ede:	9305      	str	r3, [sp, #20]
 8002ee0:	9306      	str	r3, [sp, #24]
 8002ee2:	9307      	str	r3, [sp, #28]
 8002ee4:	9308      	str	r3, [sp, #32]
 8002ee6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	9303      	str	r3, [sp, #12]
 8002eee:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ef4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ef8:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002efa:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002efe:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f00:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f02:	2202      	movs	r2, #2
 8002f04:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f06:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f08:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002f0c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f0e:	a80a      	add	r0, sp, #40	@ 0x28
 8002f10:	f001 faa2 	bl	8004458 <HAL_RCC_OscConfig>
 8002f14:	b9c8      	cbnz	r0, 8002f4a <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f16:	230f      	movs	r3, #15
 8002f18:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f26:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f28:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f2a:	a805      	add	r0, sp, #20
 8002f2c:	f001 fd16 	bl	800495c <HAL_RCC_ClockConfig>
 8002f30:	b968      	cbnz	r0, 8002f4e <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f32:	2302      	movs	r3, #2
 8002f34:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f3a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3c:	a801      	add	r0, sp, #4
 8002f3e:	f001 fe9d 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8002f42:	b930      	cbnz	r0, 8002f52 <SystemClock_Config+0x86>
}
 8002f44:	b015      	add	sp, #84	@ 0x54
 8002f46:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002f4a:	f7ff fe91 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002f4e:	f7ff fe8f 	bl	8002c70 <Error_Handler>
    Error_Handler();
 8002f52:	f7ff fe8d 	bl	8002c70 <Error_Handler>

08002f56 <main>:
{
 8002f56:	b508      	push	{r3, lr}
  HAL_Init();
 8002f58:	f000 fa56 	bl	8003408 <HAL_Init>
  SystemClock_Config();
 8002f5c:	f7ff ffb6 	bl	8002ecc <SystemClock_Config>
  MX_SPI1_Init();
 8002f60:	f7ff fe88 	bl	8002c74 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002f64:	f7ff fea6 	bl	8002cb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f68:	f7ff febe 	bl	8002ce8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002f6c:	f7ff fed6 	bl	8002d1c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002f70:	f7ff feee 	bl	8002d50 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002f74:	f7ff ff3e 	bl	8002df4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002f78:	f7ff ff70 	bl	8002e5c <MX_ADC1_Init>
  MX_CRC_Init();
 8002f7c:	f7ff ff98 	bl	8002eb0 <MX_CRC_Init>
  MX_FATFS_Init();
 8002f80:	f003 fb2a 	bl	80065d8 <MX_FATFS_Init>
  ROCKET_InitRoutine();
 8002f84:	f7ff fd8c 	bl	8002aa0 <ROCKET_InitRoutine>
  MEM2067_Unmount();
 8002f88:	f7fe ff50 	bl	8001e2c <MEM2067_Unmount>
	while (1)
 8002f8c:	e7fe      	b.n	8002f8c <main+0x36>
	...

08002f90 <HAL_MspInit>:
 8002f90:	b082      	sub	sp, #8
 8002f92:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <HAL_MspInit+0x3c>)
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	619a      	str	r2, [r3, #24]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	f002 0201 	and.w	r2, r2, #1
 8002fa2:	9200      	str	r2, [sp, #0]
 8002fa4:	9a00      	ldr	r2, [sp, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002fac:	61da      	str	r2, [r3, #28]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	9b01      	ldr	r3, [sp, #4]
 8002fb8:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <HAL_MspInit+0x40>)
 8002fba:	6853      	ldr	r3, [r2, #4]
 8002fbc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002fc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	6053      	str	r3, [r2, #4]
 8002fc6:	b002      	add	sp, #8
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40010000 	.word	0x40010000

08002fd4 <HAL_ADC_MspInit>:
 8002fd4:	b500      	push	{lr}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	9303      	str	r3, [sp, #12]
 8002fde:	9304      	str	r3, [sp, #16]
 8002fe0:	9305      	str	r3, [sp, #20]
 8002fe2:	6802      	ldr	r2, [r0, #0]
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_ADC_MspInit+0x58>)
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d002      	beq.n	8002ff0 <HAL_ADC_MspInit+0x1c>
 8002fea:	b007      	add	sp, #28
 8002fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ff0:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	619a      	str	r2, [r3, #24]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003002:	9200      	str	r2, [sp, #0]
 8003004:	9a00      	ldr	r2, [sp, #0]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	f042 0204 	orr.w	r2, r2, #4
 800300c:	619a      	str	r2, [r3, #24]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	9b01      	ldr	r3, [sp, #4]
 8003018:	2301      	movs	r3, #1
 800301a:	9302      	str	r3, [sp, #8]
 800301c:	2303      	movs	r3, #3
 800301e:	9303      	str	r3, [sp, #12]
 8003020:	a902      	add	r1, sp, #8
 8003022:	4803      	ldr	r0, [pc, #12]	@ (8003030 <HAL_ADC_MspInit+0x5c>)
 8003024:	f001 f87c 	bl	8004120 <HAL_GPIO_Init>
 8003028:	e7df      	b.n	8002fea <HAL_ADC_MspInit+0x16>
 800302a:	bf00      	nop
 800302c:	40012400 	.word	0x40012400
 8003030:	40010800 	.word	0x40010800

08003034 <HAL_CRC_MspInit>:
 8003034:	6802      	ldr	r2, [r0, #0]
 8003036:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_CRC_MspInit+0x28>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d000      	beq.n	800303e <HAL_CRC_MspInit+0xa>
 800303c:	4770      	bx	lr
 800303e:	b082      	sub	sp, #8
 8003040:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800304a:	615a      	str	r2, [r3, #20]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	9b01      	ldr	r3, [sp, #4]
 8003056:	b002      	add	sp, #8
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023000 	.word	0x40023000

08003060 <HAL_SPI_MspInit>:
 8003060:	b510      	push	{r4, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	2300      	movs	r3, #0
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	9303      	str	r3, [sp, #12]
 800306a:	9304      	str	r3, [sp, #16]
 800306c:	9305      	str	r3, [sp, #20]
 800306e:	6802      	ldr	r2, [r0, #0]
 8003070:	4b16      	ldr	r3, [pc, #88]	@ (80030cc <HAL_SPI_MspInit+0x6c>)
 8003072:	429a      	cmp	r2, r3
 8003074:	d001      	beq.n	800307a <HAL_SPI_MspInit+0x1a>
 8003076:	b006      	add	sp, #24
 8003078:	bd10      	pop	{r4, pc}
 800307a:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003084:	619a      	str	r2, [r3, #24]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800308c:	9200      	str	r2, [sp, #0]
 800308e:	9a00      	ldr	r2, [sp, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	f042 0204 	orr.w	r2, r2, #4
 8003096:	619a      	str	r2, [r3, #24]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	9b01      	ldr	r3, [sp, #4]
 80030a2:	23a0      	movs	r3, #160	@ 0xa0
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	2302      	movs	r3, #2
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	2303      	movs	r3, #3
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	4c08      	ldr	r4, [pc, #32]	@ (80030d0 <HAL_SPI_MspInit+0x70>)
 80030b0:	a902      	add	r1, sp, #8
 80030b2:	4620      	mov	r0, r4
 80030b4:	f001 f834 	bl	8004120 <HAL_GPIO_Init>
 80030b8:	2340      	movs	r3, #64	@ 0x40
 80030ba:	9302      	str	r3, [sp, #8]
 80030bc:	2300      	movs	r3, #0
 80030be:	9303      	str	r3, [sp, #12]
 80030c0:	9304      	str	r3, [sp, #16]
 80030c2:	a902      	add	r1, sp, #8
 80030c4:	4620      	mov	r0, r4
 80030c6:	f001 f82b 	bl	8004120 <HAL_GPIO_Init>
 80030ca:	e7d4      	b.n	8003076 <HAL_SPI_MspInit+0x16>
 80030cc:	40013000 	.word	0x40013000
 80030d0:	40010800 	.word	0x40010800

080030d4 <HAL_TIM_Base_MspInit>:
 80030d4:	b082      	sub	sp, #8
 80030d6:	6803      	ldr	r3, [r0, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030dc:	d004      	beq.n	80030e8 <HAL_TIM_Base_MspInit+0x14>
 80030de:	4a0e      	ldr	r2, [pc, #56]	@ (8003118 <HAL_TIM_Base_MspInit+0x44>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00d      	beq.n	8003100 <HAL_TIM_Base_MspInit+0x2c>
 80030e4:	b002      	add	sp, #8
 80030e6:	4770      	bx	lr
 80030e8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	61da      	str	r2, [r3, #28]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	9b00      	ldr	r3, [sp, #0]
 80030fe:	e7f1      	b.n	80030e4 <HAL_TIM_Base_MspInit+0x10>
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_TIM_Base_MspInit+0x48>)
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	f042 0202 	orr.w	r2, r2, #2
 8003108:	61da      	str	r2, [r3, #28]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	9b01      	ldr	r3, [sp, #4]
 8003114:	e7e6      	b.n	80030e4 <HAL_TIM_Base_MspInit+0x10>
 8003116:	bf00      	nop
 8003118:	40000400 	.word	0x40000400
 800311c:	40021000 	.word	0x40021000

08003120 <HAL_TIM_MspPostInit>:
 8003120:	b500      	push	{lr}
 8003122:	b087      	sub	sp, #28
 8003124:	2300      	movs	r3, #0
 8003126:	9302      	str	r3, [sp, #8]
 8003128:	9303      	str	r3, [sp, #12]
 800312a:	9304      	str	r3, [sp, #16]
 800312c:	9305      	str	r3, [sp, #20]
 800312e:	6802      	ldr	r2, [r0, #0]
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <HAL_TIM_MspPostInit+0x44>)
 8003132:	429a      	cmp	r2, r3
 8003134:	d002      	beq.n	800313c <HAL_TIM_MspPostInit+0x1c>
 8003136:	b007      	add	sp, #28
 8003138:	f85d fb04 	ldr.w	pc, [sp], #4
 800313c:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	f042 0208 	orr.w	r2, r2, #8
 8003146:	619a      	str	r2, [r3, #24]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	9b01      	ldr	r3, [sp, #4]
 8003152:	2302      	movs	r3, #2
 8003154:	9302      	str	r3, [sp, #8]
 8003156:	9303      	str	r3, [sp, #12]
 8003158:	9305      	str	r3, [sp, #20]
 800315a:	a902      	add	r1, sp, #8
 800315c:	4802      	ldr	r0, [pc, #8]	@ (8003168 <HAL_TIM_MspPostInit+0x48>)
 800315e:	f000 ffdf 	bl	8004120 <HAL_GPIO_Init>
 8003162:	e7e8      	b.n	8003136 <HAL_TIM_MspPostInit+0x16>
 8003164:	40000400 	.word	0x40000400
 8003168:	40010c00 	.word	0x40010c00

0800316c <HAL_UART_MspInit>:
 800316c:	b510      	push	{r4, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	2300      	movs	r3, #0
 8003172:	9306      	str	r3, [sp, #24]
 8003174:	9307      	str	r3, [sp, #28]
 8003176:	9308      	str	r3, [sp, #32]
 8003178:	9309      	str	r3, [sp, #36]	@ 0x24
 800317a:	6803      	ldr	r3, [r0, #0]
 800317c:	4a45      	ldr	r2, [pc, #276]	@ (8003294 <HAL_UART_MspInit+0x128>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <HAL_UART_MspInit+0x26>
 8003182:	4a45      	ldr	r2, [pc, #276]	@ (8003298 <HAL_UART_MspInit+0x12c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d033      	beq.n	80031f0 <HAL_UART_MspInit+0x84>
 8003188:	4a44      	ldr	r2, [pc, #272]	@ (800329c <HAL_UART_MspInit+0x130>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d058      	beq.n	8003240 <HAL_UART_MspInit+0xd4>
 800318e:	b00a      	add	sp, #40	@ 0x28
 8003190:	bd10      	pop	{r4, pc}
 8003192:	4b43      	ldr	r3, [pc, #268]	@ (80032a0 <HAL_UART_MspInit+0x134>)
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800319a:	619a      	str	r2, [r3, #24]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80031a2:	9200      	str	r2, [sp, #0]
 80031a4:	9a00      	ldr	r2, [sp, #0]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	f042 0208 	orr.w	r2, r2, #8
 80031ac:	619a      	str	r2, [r3, #24]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	9b01      	ldr	r3, [sp, #4]
 80031b8:	2340      	movs	r3, #64	@ 0x40
 80031ba:	9306      	str	r3, [sp, #24]
 80031bc:	2302      	movs	r3, #2
 80031be:	9307      	str	r3, [sp, #28]
 80031c0:	2303      	movs	r3, #3
 80031c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80031c4:	4c37      	ldr	r4, [pc, #220]	@ (80032a4 <HAL_UART_MspInit+0x138>)
 80031c6:	a906      	add	r1, sp, #24
 80031c8:	4620      	mov	r0, r4
 80031ca:	f000 ffa9 	bl	8004120 <HAL_GPIO_Init>
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	9306      	str	r3, [sp, #24]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9307      	str	r3, [sp, #28]
 80031d6:	9308      	str	r3, [sp, #32]
 80031d8:	a906      	add	r1, sp, #24
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 ffa0 	bl	8004120 <HAL_GPIO_Init>
 80031e0:	4a31      	ldr	r2, [pc, #196]	@ (80032a8 <HAL_UART_MspInit+0x13c>)
 80031e2:	6853      	ldr	r3, [r2, #4]
 80031e4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6053      	str	r3, [r2, #4]
 80031ee:	e7ce      	b.n	800318e <HAL_UART_MspInit+0x22>
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_UART_MspInit+0x134>)
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80031f8:	61da      	str	r2, [r3, #28]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003200:	9202      	str	r2, [sp, #8]
 8003202:	9a02      	ldr	r2, [sp, #8]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	f042 0204 	orr.w	r2, r2, #4
 800320a:	619a      	str	r2, [r3, #24]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	9303      	str	r3, [sp, #12]
 8003214:	9b03      	ldr	r3, [sp, #12]
 8003216:	2304      	movs	r3, #4
 8003218:	9306      	str	r3, [sp, #24]
 800321a:	2302      	movs	r3, #2
 800321c:	9307      	str	r3, [sp, #28]
 800321e:	2303      	movs	r3, #3
 8003220:	9309      	str	r3, [sp, #36]	@ 0x24
 8003222:	4c22      	ldr	r4, [pc, #136]	@ (80032ac <HAL_UART_MspInit+0x140>)
 8003224:	a906      	add	r1, sp, #24
 8003226:	4620      	mov	r0, r4
 8003228:	f000 ff7a 	bl	8004120 <HAL_GPIO_Init>
 800322c:	2308      	movs	r3, #8
 800322e:	9306      	str	r3, [sp, #24]
 8003230:	2300      	movs	r3, #0
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	9308      	str	r3, [sp, #32]
 8003236:	a906      	add	r1, sp, #24
 8003238:	4620      	mov	r0, r4
 800323a:	f000 ff71 	bl	8004120 <HAL_GPIO_Init>
 800323e:	e7a6      	b.n	800318e <HAL_UART_MspInit+0x22>
 8003240:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <HAL_UART_MspInit+0x134>)
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003248:	61da      	str	r2, [r3, #28]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8003250:	9204      	str	r2, [sp, #16]
 8003252:	9a04      	ldr	r2, [sp, #16]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	f042 0208 	orr.w	r2, r2, #8
 800325a:	619a      	str	r2, [r3, #24]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	9305      	str	r3, [sp, #20]
 8003264:	9b05      	ldr	r3, [sp, #20]
 8003266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800326a:	9306      	str	r3, [sp, #24]
 800326c:	2302      	movs	r3, #2
 800326e:	9307      	str	r3, [sp, #28]
 8003270:	2303      	movs	r3, #3
 8003272:	9309      	str	r3, [sp, #36]	@ 0x24
 8003274:	4c0b      	ldr	r4, [pc, #44]	@ (80032a4 <HAL_UART_MspInit+0x138>)
 8003276:	a906      	add	r1, sp, #24
 8003278:	4620      	mov	r0, r4
 800327a:	f000 ff51 	bl	8004120 <HAL_GPIO_Init>
 800327e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003282:	9306      	str	r3, [sp, #24]
 8003284:	2300      	movs	r3, #0
 8003286:	9307      	str	r3, [sp, #28]
 8003288:	9308      	str	r3, [sp, #32]
 800328a:	a906      	add	r1, sp, #24
 800328c:	4620      	mov	r0, r4
 800328e:	f000 ff47 	bl	8004120 <HAL_GPIO_Init>
 8003292:	e77c      	b.n	800318e <HAL_UART_MspInit+0x22>
 8003294:	40013800 	.word	0x40013800
 8003298:	40004400 	.word	0x40004400
 800329c:	40004800 	.word	0x40004800
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010c00 	.word	0x40010c00
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40010800 	.word	0x40010800

080032b0 <NMI_Handler>:
 80032b0:	e7fe      	b.n	80032b0 <NMI_Handler>

080032b2 <HardFault_Handler>:
 80032b2:	e7fe      	b.n	80032b2 <HardFault_Handler>

080032b4 <MemManage_Handler>:
 80032b4:	e7fe      	b.n	80032b4 <MemManage_Handler>

080032b6 <BusFault_Handler>:
 80032b6:	e7fe      	b.n	80032b6 <BusFault_Handler>

080032b8 <UsageFault_Handler>:
 80032b8:	e7fe      	b.n	80032b8 <UsageFault_Handler>

080032ba <SVC_Handler>:
 80032ba:	4770      	bx	lr

080032bc <DebugMon_Handler>:
 80032bc:	4770      	bx	lr

080032be <PendSV_Handler>:
 80032be:	4770      	bx	lr

080032c0 <SDTimer_Handler>:
 80032c0:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <SDTimer_Handler+0x24>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b123      	cbz	r3, 80032d0 <SDTimer_Handler+0x10>
 80032c6:	4a07      	ldr	r2, [pc, #28]	@ (80032e4 <SDTimer_Handler+0x24>)
 80032c8:	7813      	ldrb	r3, [r2, #0]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	7013      	strb	r3, [r2, #0]
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <SDTimer_Handler+0x28>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b123      	cbz	r3, 80032e0 <SDTimer_Handler+0x20>
 80032d6:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <SDTimer_Handler+0x28>)
 80032d8:	7813      	ldrb	r3, [r2, #0]
 80032da:	3b01      	subs	r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	7013      	strb	r3, [r2, #0]
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000252d 	.word	0x2000252d
 80032e8:	2000252c 	.word	0x2000252c

080032ec <SysTick_Handler>:
 80032ec:	b508      	push	{r3, lr}
 80032ee:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <SysTick_Handler+0x28>)
 80032f0:	7813      	ldrb	r3, [r2, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	7013      	strb	r3, [r2, #0]
 80032f8:	7813      	ldrb	r3, [r2, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d802      	bhi.n	8003306 <SysTick_Handler+0x1a>
 8003300:	f000 f8c8 	bl	8003494 <HAL_IncTick>
 8003304:	bd08      	pop	{r3, pc}
 8003306:	4613      	mov	r3, r2
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	f7ff ffd8 	bl	80032c0 <SDTimer_Handler>
 8003310:	e7f6      	b.n	8003300 <SysTick_Handler+0x14>
 8003312:	bf00      	nop
 8003314:	2000252e 	.word	0x2000252e

08003318 <_getpid>:
 8003318:	2001      	movs	r0, #1
 800331a:	4770      	bx	lr

0800331c <_kill>:
 800331c:	b508      	push	{r3, lr}
 800331e:	f008 f865 	bl	800b3ec <__errno>
 8003322:	2316      	movs	r3, #22
 8003324:	6003      	str	r3, [r0, #0]
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	bd08      	pop	{r3, pc}

0800332c <_exit>:
 800332c:	b508      	push	{r3, lr}
 800332e:	f04f 31ff 	mov.w	r1, #4294967295
 8003332:	f7ff fff3 	bl	800331c <_kill>
 8003336:	e7fe      	b.n	8003336 <_exit+0xa>

08003338 <_read>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	460c      	mov	r4, r1
 800333c:	4616      	mov	r6, r2
 800333e:	2500      	movs	r5, #0
 8003340:	e006      	b.n	8003350 <_read+0x18>
 8003342:	f3af 8000 	nop.w
 8003346:	4621      	mov	r1, r4
 8003348:	f801 0b01 	strb.w	r0, [r1], #1
 800334c:	3501      	adds	r5, #1
 800334e:	460c      	mov	r4, r1
 8003350:	42b5      	cmp	r5, r6
 8003352:	dbf6      	blt.n	8003342 <_read+0xa>
 8003354:	4630      	mov	r0, r6
 8003356:	bd70      	pop	{r4, r5, r6, pc}

08003358 <_close>:
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	4770      	bx	lr

0800335e <_fstat>:
 800335e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003362:	604b      	str	r3, [r1, #4]
 8003364:	2000      	movs	r0, #0
 8003366:	4770      	bx	lr

08003368 <_isatty>:
 8003368:	2001      	movs	r0, #1
 800336a:	4770      	bx	lr

0800336c <_lseek>:
 800336c:	2000      	movs	r0, #0
 800336e:	4770      	bx	lr

08003370 <_sbrk>:
 8003370:	b510      	push	{r4, lr}
 8003372:	4603      	mov	r3, r0
 8003374:	4a0c      	ldr	r2, [pc, #48]	@ (80033a8 <_sbrk+0x38>)
 8003376:	490d      	ldr	r1, [pc, #52]	@ (80033ac <_sbrk+0x3c>)
 8003378:	480d      	ldr	r0, [pc, #52]	@ (80033b0 <_sbrk+0x40>)
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	b140      	cbz	r0, 8003390 <_sbrk+0x20>
 800337e:	480c      	ldr	r0, [pc, #48]	@ (80033b0 <_sbrk+0x40>)
 8003380:	6800      	ldr	r0, [r0, #0]
 8003382:	4403      	add	r3, r0
 8003384:	1a52      	subs	r2, r2, r1
 8003386:	4293      	cmp	r3, r2
 8003388:	d806      	bhi.n	8003398 <_sbrk+0x28>
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <_sbrk+0x40>)
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	bd10      	pop	{r4, pc}
 8003390:	4807      	ldr	r0, [pc, #28]	@ (80033b0 <_sbrk+0x40>)
 8003392:	4c08      	ldr	r4, [pc, #32]	@ (80033b4 <_sbrk+0x44>)
 8003394:	6004      	str	r4, [r0, #0]
 8003396:	e7f2      	b.n	800337e <_sbrk+0xe>
 8003398:	f008 f828 	bl	800b3ec <__errno>
 800339c:	230c      	movs	r3, #12
 800339e:	6003      	str	r3, [r0, #0]
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	e7f3      	b.n	800338e <_sbrk+0x1e>
 80033a6:	bf00      	nop
 80033a8:	20005000 	.word	0x20005000
 80033ac:	00000800 	.word	0x00000800
 80033b0:	20002530 	.word	0x20002530
 80033b4:	200028b0 	.word	0x200028b0

080033b8 <SystemInit>:
 80033b8:	4770      	bx	lr
	...

080033bc <Reset_Handler>:
 80033bc:	f7ff fffc 	bl	80033b8 <SystemInit>
 80033c0:	480b      	ldr	r0, [pc, #44]	@ (80033f0 <LoopFillZerobss+0xe>)
 80033c2:	490c      	ldr	r1, [pc, #48]	@ (80033f4 <LoopFillZerobss+0x12>)
 80033c4:	4a0c      	ldr	r2, [pc, #48]	@ (80033f8 <LoopFillZerobss+0x16>)
 80033c6:	2300      	movs	r3, #0
 80033c8:	e002      	b.n	80033d0 <LoopCopyDataInit>

080033ca <CopyDataInit>:
 80033ca:	58d4      	ldr	r4, [r2, r3]
 80033cc:	50c4      	str	r4, [r0, r3]
 80033ce:	3304      	adds	r3, #4

080033d0 <LoopCopyDataInit>:
 80033d0:	18c4      	adds	r4, r0, r3
 80033d2:	428c      	cmp	r4, r1
 80033d4:	d3f9      	bcc.n	80033ca <CopyDataInit>
 80033d6:	4a09      	ldr	r2, [pc, #36]	@ (80033fc <LoopFillZerobss+0x1a>)
 80033d8:	4c09      	ldr	r4, [pc, #36]	@ (8003400 <LoopFillZerobss+0x1e>)
 80033da:	2300      	movs	r3, #0
 80033dc:	e001      	b.n	80033e2 <LoopFillZerobss>

080033de <FillZerobss>:
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	3204      	adds	r2, #4

080033e2 <LoopFillZerobss>:
 80033e2:	42a2      	cmp	r2, r4
 80033e4:	d3fb      	bcc.n	80033de <FillZerobss>
 80033e6:	f008 f807 	bl	800b3f8 <__libc_init_array>
 80033ea:	f7ff fdb4 	bl	8002f56 <main>
 80033ee:	4770      	bx	lr
 80033f0:	20000000 	.word	0x20000000
 80033f4:	200001ec 	.word	0x200001ec
 80033f8:	0800df1c 	.word	0x0800df1c
 80033fc:	200001ec 	.word	0x200001ec
 8003400:	200028ac 	.word	0x200028ac

08003404 <ADC1_2_IRQHandler>:
 8003404:	e7fe      	b.n	8003404 <ADC1_2_IRQHandler>
	...

08003408 <HAL_Init>:
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
 800340c:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <HAL_Init+0x28>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a07      	ldr	r2, [pc, #28]	@ (8003430 <HAL_Init+0x28>)
 8003412:	f043 0310 	orr.w	r3, r3, #16
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	2003      	movs	r0, #3
 800341a:	f000 fe31 	bl	8004080 <HAL_NVIC_SetPriorityGrouping>
 800341e:	200f      	movs	r0, #15
 8003420:	f000 f808 	bl	8003434 <HAL_InitTick>
 8003424:	f7ff fdb4 	bl	8002f90 <HAL_MspInit>
 8003428:	2300      	movs	r3, #0
 800342a:	4618      	mov	r0, r3
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40022000 	.word	0x40022000

08003434 <HAL_InitTick>:
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <HAL_InitTick+0x54>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_InitTick+0x58>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800344a:	fbb3 f3f1 	udiv	r3, r3, r1
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fe3b 	bl	80040ce <HAL_SYSTICK_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_InitTick+0x2e>
 800345e:	2301      	movs	r3, #1
 8003460:	e00e      	b.n	8003480 <HAL_InitTick+0x4c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b0f      	cmp	r3, #15
 8003466:	d80a      	bhi.n	800347e <HAL_InitTick+0x4a>
 8003468:	2200      	movs	r2, #0
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f000 fe11 	bl	8004096 <HAL_NVIC_SetPriority>
 8003474:	4a06      	ldr	r2, [pc, #24]	@ (8003490 <HAL_InitTick+0x5c>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	e000      	b.n	8003480 <HAL_InitTick+0x4c>
 800347e:	2301      	movs	r3, #1
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000004 	.word	0x20000004
 800348c:	2000000c 	.word	0x2000000c
 8003490:	20000008 	.word	0x20000008

08003494 <HAL_IncTick>:
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_IncTick+0x1c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_IncTick+0x20>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	4a03      	ldr	r2, [pc, #12]	@ (80034b4 <HAL_IncTick+0x20>)
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	2000000c 	.word	0x2000000c
 80034b4:	20002534 	.word	0x20002534

080034b8 <HAL_GetTick>:
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4b02      	ldr	r3, [pc, #8]	@ (80034c8 <HAL_GetTick+0x10>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	20002534 	.word	0x20002534

080034cc <HAL_Delay>:
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d005      	beq.n	80034f2 <HAL_Delay+0x26>
 80034e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <HAL_Delay+0x44>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	bf00      	nop
 80034f4:	f7ff ffe0 	bl	80034b8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f7      	bhi.n	80034f4 <HAL_Delay+0x28>
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	2000000c 	.word	0x2000000c

08003514 <HAL_ADC_Init>:
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	2300      	movs	r3, #0
 800351e:	75fb      	strb	r3, [r7, #23]
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_Init+0x22>
 8003532:	2301      	movs	r3, #1
 8003534:	e0be      	b.n	80036b4 <HAL_ADC_Init+0x1a0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_ADC_Init+0x44>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fd3e 	bl	8002fd4 <HAL_ADC_MspInit>
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fbf1 	bl	8003d40 <ADC_ConversionStop_Disable>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 8099 	bne.w	80036a2 <HAL_ADC_Init+0x18e>
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8095 	bne.w	80036a2 <HAL_ADC_Init+0x18e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003580:	f023 0302 	bic.w	r3, r3, #2
 8003584:	f043 0202 	orr.w	r2, r3, #2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	@ 0x28
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7b1b      	ldrb	r3, [r3, #12]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4313      	orrs	r3, r2
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ac:	d003      	beq.n	80035b6 <HAL_ADC_Init+0xa2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d102      	bne.n	80035bc <HAL_ADC_Init+0xa8>
 80035b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ba:	e000      	b.n	80035be <HAL_ADC_Init+0xaa>
 80035bc:	2300      	movs	r3, #0
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7d1b      	ldrb	r3, [r3, #20]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d119      	bne.n	8003600 <HAL_ADC_Init+0xec>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7b1b      	ldrb	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_ADC_Init+0xd4>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	3b01      	subs	r3, #1
 80035da:	035a      	lsls	r2, r3, #13
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	e00b      	b.n	8003600 <HAL_ADC_Init+0xec>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	4b28      	ldr	r3, [pc, #160]	@ (80036bc <HAL_ADC_Init+0x1a8>)
 800361c:	4013      	ands	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	430b      	orrs	r3, r1
 8003626:	6093      	str	r3, [r2, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003630:	d003      	beq.n	800363a <HAL_ADC_Init+0x126>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d104      	bne.n	8003644 <HAL_ADC_Init+0x130>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	3b01      	subs	r3, #1
 8003640:	051b      	lsls	r3, r3, #20
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	430a      	orrs	r2, r1
 8003656:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b18      	ldr	r3, [pc, #96]	@ (80036c0 <HAL_ADC_Init+0x1ac>)
 8003660:	4013      	ands	r3, r2
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d10b      	bne.n	8003680 <HAL_ADC_Init+0x16c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	629a      	str	r2, [r3, #40]	@ 0x28
 800367e:	e018      	b.n	80036b2 <HAL_ADC_Init+0x19e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	f023 0312 	bic.w	r3, r3, #18
 8003688:	f043 0210 	orr.w	r2, r3, #16
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
 80036a0:	e007      	b.n	80036b2 <HAL_ADC_Init+0x19e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	f043 0210 	orr.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	ffe1f7fd 	.word	0xffe1f7fd
 80036c0:	ff1f0efe 	.word	0xff1f0efe

080036c4 <HAL_ADC_Start>:
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_ADC_Start+0x1a>
 80036da:	2302      	movs	r3, #2
 80036dc:	e098      	b.n	8003810 <HAL_ADC_Start+0x14c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fad0 	bl	8003c8c <ADC_Enable>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 8087 	bne.w	8003806 <HAL_ADC_Start+0x142>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a41      	ldr	r2, [pc, #260]	@ (8003818 <HAL_ADC_Start+0x154>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d105      	bne.n	8003722 <HAL_ADC_Start+0x5e>
 8003716:	4b41      	ldr	r3, [pc, #260]	@ (800381c <HAL_ADC_Start+0x158>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d115      	bne.n	800374e <HAL_ADC_Start+0x8a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d026      	beq.n	800378a <HAL_ADC_Start+0xc6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003744:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	@ 0x28
 800374c:	e01d      	b.n	800378a <HAL_ADC_Start+0xc6>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	629a      	str	r2, [r3, #40]	@ 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2f      	ldr	r2, [pc, #188]	@ (800381c <HAL_ADC_Start+0x158>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_ADC_Start+0xaa>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2b      	ldr	r2, [pc, #172]	@ (8003818 <HAL_ADC_Start+0x154>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10d      	bne.n	800378a <HAL_ADC_Start+0xc6>
 800376e:	4b2b      	ldr	r3, [pc, #172]	@ (800381c <HAL_ADC_Start+0x158>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_ADC_Start+0xc6>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003782:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <HAL_ADC_Start+0xe0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f023 0206 	bic.w	r2, r3, #6
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037a2:	e002      	b.n	80037aa <HAL_ADC_Start+0xe6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0202 	mvn.w	r2, #2
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80037c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80037ca:	d113      	bne.n	80037f4 <HAL_ADC_Start+0x130>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a11      	ldr	r2, [pc, #68]	@ (8003818 <HAL_ADC_Start+0x154>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d105      	bne.n	80037e2 <HAL_ADC_Start+0x11e>
 80037d6:	4b11      	ldr	r3, [pc, #68]	@ (800381c <HAL_ADC_Start+0x158>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_ADC_Start+0x130>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	e00c      	b.n	800380e <HAL_ADC_Start+0x14a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	e003      	b.n	800380e <HAL_ADC_Start+0x14a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40012800 	.word	0x40012800
 800381c:	40012400 	.word	0x40012400

08003820 <HAL_ADC_Stop>:
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_ADC_Stop+0x1a>
 8003836:	2302      	movs	r3, #2
 8003838:	e01a      	b.n	8003870 <HAL_ADC_Stop+0x50>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa7c 	bl	8003d40 <ADC_ConversionStop_Disable>
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_ADC_Stop+0x46>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003856:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_ADC_PollForConversion>:
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	f7ff fe13 	bl	80034b8 <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_ADC_PollForConversion+0x42>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0d3      	b.n	8003a62 <HAL_ADC_PollForConversion+0x1ea>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d131      	bne.n	800392c <HAL_ADC_PollForConversion+0xb4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d12a      	bne.n	800392c <HAL_ADC_PollForConversion+0xb4>
 80038d6:	e021      	b.n	800391c <HAL_ADC_PollForConversion+0xa4>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d01d      	beq.n	800391c <HAL_ADC_PollForConversion+0xa4>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_ADC_PollForConversion+0x7e>
 80038e6:	f7ff fde7 	bl	80034b8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d212      	bcs.n	800391c <HAL_ADC_PollForConversion+0xa4>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <HAL_ADC_PollForConversion+0xa4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003918:	2303      	movs	r3, #3
 800391a:	e0a2      	b.n	8003a62 <HAL_ADC_PollForConversion+0x1ea>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0d6      	beq.n	80038d8 <HAL_ADC_PollForConversion+0x60>
 800392a:	e070      	b.n	8003a0e <HAL_ADC_PollForConversion+0x196>
 800392c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a6c <HAL_ADC_PollForConversion+0x1f4>)
 800392e:	681c      	ldr	r4, [r3, #0]
 8003930:	2002      	movs	r0, #2
 8003932:	f001 fa59 	bl	8004de8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003936:	4603      	mov	r3, r0
 8003938:	fbb4 f2f3 	udiv	r2, r4, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6919      	ldr	r1, [r3, #16]
 8003942:	4b4b      	ldr	r3, [pc, #300]	@ (8003a70 <HAL_ADC_PollForConversion+0x1f8>)
 8003944:	400b      	ands	r3, r1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_ADC_PollForConversion+0x104>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68d9      	ldr	r1, [r3, #12]
 8003950:	4b48      	ldr	r3, [pc, #288]	@ (8003a74 <HAL_ADC_PollForConversion+0x1fc>)
 8003952:	400b      	ands	r3, r1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d111      	bne.n	800397c <HAL_ADC_PollForConversion+0x104>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6919      	ldr	r1, [r3, #16]
 800395e:	4b46      	ldr	r3, [pc, #280]	@ (8003a78 <HAL_ADC_PollForConversion+0x200>)
 8003960:	400b      	ands	r3, r1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_ADC_PollForConversion+0x100>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_ADC_PollForConversion+0x204>)
 800396e:	400b      	ands	r3, r1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_ADC_PollForConversion+0x100>
 8003974:	2314      	movs	r3, #20
 8003976:	e020      	b.n	80039ba <HAL_ADC_PollForConversion+0x142>
 8003978:	2329      	movs	r3, #41	@ 0x29
 800397a:	e01e      	b.n	80039ba <HAL_ADC_PollForConversion+0x142>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6919      	ldr	r1, [r3, #16]
 8003982:	4b3d      	ldr	r3, [pc, #244]	@ (8003a78 <HAL_ADC_PollForConversion+0x200>)
 8003984:	400b      	ands	r3, r1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_ADC_PollForConversion+0x120>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68d9      	ldr	r1, [r3, #12]
 8003990:	4b3a      	ldr	r3, [pc, #232]	@ (8003a7c <HAL_ADC_PollForConversion+0x204>)
 8003992:	400b      	ands	r3, r1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <HAL_ADC_PollForConversion+0x13c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6919      	ldr	r1, [r3, #16]
 800399e:	4b38      	ldr	r3, [pc, #224]	@ (8003a80 <HAL_ADC_PollForConversion+0x208>)
 80039a0:	400b      	ands	r3, r1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <HAL_ADC_PollForConversion+0x140>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68d9      	ldr	r1, [r3, #12]
 80039ac:	4b34      	ldr	r3, [pc, #208]	@ (8003a80 <HAL_ADC_PollForConversion+0x208>)
 80039ae:	400b      	ands	r3, r1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_PollForConversion+0x140>
 80039b4:	2354      	movs	r3, #84	@ 0x54
 80039b6:	e000      	b.n	80039ba <HAL_ADC_PollForConversion+0x142>
 80039b8:	23fc      	movs	r3, #252	@ 0xfc
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e021      	b.n	8003a06 <HAL_ADC_PollForConversion+0x18e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d01a      	beq.n	8003a00 <HAL_ADC_PollForConversion+0x188>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_ADC_PollForConversion+0x168>
 80039d0:	f7ff fd72 	bl	80034b8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d20f      	bcs.n	8003a00 <HAL_ADC_PollForConversion+0x188>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d90b      	bls.n	8003a00 <HAL_ADC_PollForConversion+0x188>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80039fc:	2303      	movs	r3, #3
 80039fe:	e030      	b.n	8003a62 <HAL_ADC_PollForConversion+0x1ea>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d8d9      	bhi.n	80039c2 <HAL_ADC_PollForConversion+0x14a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0212 	mvn.w	r2, #18
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003a2e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003a32:	d115      	bne.n	8003a60 <HAL_ADC_PollForConversion+0x1e8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7b1b      	ldrb	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d111      	bne.n	8003a60 <HAL_ADC_PollForConversion+0x1e8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <HAL_ADC_PollForConversion+0x1e8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a60:	2300      	movs	r3, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000004 	.word	0x20000004
 8003a70:	24924924 	.word	0x24924924
 8003a74:	00924924 	.word	0x00924924
 8003a78:	12492492 	.word	0x12492492
 8003a7c:	00492492 	.word	0x00492492
 8003a80:	00249249 	.word	0x00249249

08003a84 <HAL_ADC_GetValue>:
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_ADC_ConfigChannel>:
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x20>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0dc      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x1da>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d81c      	bhi.n	8003b06 <HAL_ADC_ConfigChannel+0x6a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	3b05      	subs	r3, #5
 8003ade:	221f      	movs	r2, #31
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4019      	ands	r1, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	3b05      	subs	r3, #5
 8003af8:	fa00 f203 	lsl.w	r2, r0, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b04:	e03c      	b.n	8003b80 <HAL_ADC_ConfigChannel+0xe4>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d81c      	bhi.n	8003b48 <HAL_ADC_ConfigChannel+0xac>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3b23      	subs	r3, #35	@ 0x23
 8003b20:	221f      	movs	r2, #31
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	4019      	ands	r1, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	3b23      	subs	r3, #35	@ 0x23
 8003b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b46:	e01b      	b.n	8003b80 <HAL_ADC_ConfigChannel+0xe4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	3b41      	subs	r3, #65	@ 0x41
 8003b5a:	221f      	movs	r2, #31
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	4019      	ands	r1, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	3b41      	subs	r3, #65	@ 0x41
 8003b74:	fa00 f203 	lsl.w	r2, r0, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	d91c      	bls.n	8003bc2 <HAL_ADC_ConfigChannel+0x126>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68d9      	ldr	r1, [r3, #12]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	3b1e      	subs	r3, #30
 8003b9a:	2207      	movs	r2, #7
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	4019      	ands	r1, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6898      	ldr	r0, [r3, #8]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3b1e      	subs	r3, #30
 8003bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	e019      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x15a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6919      	ldr	r1, [r3, #16]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	4019      	ands	r1, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6898      	ldr	r0, [r3, #8]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	fa00 f203 	lsl.w	r2, r0, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d003      	beq.n	8003c06 <HAL_ADC_ConfigChannel+0x16a>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b11      	cmp	r3, #17
 8003c04:	d132      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_ADC_ConfigChannel+0x1e4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d125      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1c0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d126      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d11a      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
 8003c36:	4b13      	ldr	r3, [pc, #76]	@ (8003c84 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a13      	ldr	r2, [pc, #76]	@ (8003c88 <HAL_ADC_ConfigChannel+0x1ec>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	0c9a      	lsrs	r2, r3, #18
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	e002      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x1b8>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f9      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x1b2>
 8003c5a:	e007      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x1d0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40012400 	.word	0x40012400
 8003c84:	20000004 	.word	0x20000004
 8003c88:	431bde83 	.word	0x431bde83

08003c8c <ADC_Enable>:
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d040      	beq.n	8003d2c <ADC_Enable+0xa0>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <ADC_Enable+0xac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ADC_Enable+0xb0>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	0c9b      	lsrs	r3, r3, #18
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	e002      	b.n	8003cd0 <ADC_Enable+0x44>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f9      	bne.n	8003cca <ADC_Enable+0x3e>
 8003cd6:	f7ff fbef 	bl	80034b8 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	e01f      	b.n	8003d1e <ADC_Enable+0x92>
 8003cde:	f7ff fbeb 	bl	80034b8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d918      	bls.n	8003d1e <ADC_Enable+0x92>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d011      	beq.n	8003d1e <ADC_Enable+0x92>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e007      	b.n	8003d2e <ADC_Enable+0xa2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d1d8      	bne.n	8003cde <ADC_Enable+0x52>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <ADC_ConversionStop_Disable>:
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d12e      	bne.n	8003db8 <ADC_ConversionStop_Disable+0x78>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	f7ff fba5 	bl	80034b8 <HAL_GetTick>
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	e01b      	b.n	8003daa <ADC_ConversionStop_Disable+0x6a>
 8003d72:	f7ff fba1 	bl	80034b8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d914      	bls.n	8003daa <ADC_ConversionStop_Disable+0x6a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10d      	bne.n	8003daa <ADC_ConversionStop_Disable+0x6a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003da6:	2301      	movs	r3, #1
 8003da8:	e007      	b.n	8003dba <ADC_ConversionStop_Disable+0x7a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d0dc      	beq.n	8003d72 <ADC_ConversionStop_Disable+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_ADCEx_Calibration_Start>:
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADCEx_Calibration_Start+0x1e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e097      	b.n	8003f12 <HAL_ADCEx_Calibration_Start+0x14e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ffa8 	bl	8003d40 <ADC_ConversionStop_Disable>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff49 	bl	8003c8c <ADC_Enable>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 8081 	bne.w	8003f08 <HAL_ADCEx_Calibration_Start+0x144>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e0e:	f023 0302 	bic.w	r3, r3, #2
 8003e12:	f043 0202 	orr.w	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e1a:	4b40      	ldr	r3, [pc, #256]	@ (8003f1c <HAL_ADCEx_Calibration_Start+0x158>)
 8003e1c:	681c      	ldr	r4, [r3, #0]
 8003e1e:	2002      	movs	r0, #2
 8003e20:	f000 ffe2 	bl	8004de8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e24:	4603      	mov	r3, r0
 8003e26:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e002      	b.n	8003e36 <HAL_ADCEx_Calibration_Start+0x72>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f9      	bne.n	8003e30 <HAL_ADCEx_Calibration_Start+0x6c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	f7ff fb34 	bl	80034b8 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]
 8003e52:	e01b      	b.n	8003e8c <HAL_ADCEx_Calibration_Start+0xc8>
 8003e54:	f7ff fb30 	bl	80034b8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b0a      	cmp	r3, #10
 8003e60:	d914      	bls.n	8003e8c <HAL_ADCEx_Calibration_Start+0xc8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_ADCEx_Calibration_Start+0xc8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	f023 0312 	bic.w	r3, r3, #18
 8003e78:	f043 0210 	orr.w	r2, r3, #16
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e042      	b.n	8003f12 <HAL_ADCEx_Calibration_Start+0x14e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1dc      	bne.n	8003e54 <HAL_ADCEx_Calibration_Start+0x90>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0204 	orr.w	r2, r2, #4
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	f7ff fb05 	bl	80034b8 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]
 8003eb0:	e01b      	b.n	8003eea <HAL_ADCEx_Calibration_Start+0x126>
 8003eb2:	f7ff fb01 	bl	80034b8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b0a      	cmp	r3, #10
 8003ebe:	d914      	bls.n	8003eea <HAL_ADCEx_Calibration_Start+0x126>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <HAL_ADCEx_Calibration_Start+0x126>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	f023 0312 	bic.w	r3, r3, #18
 8003ed6:	f043 0210 	orr.w	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e013      	b.n	8003f12 <HAL_ADCEx_Calibration_Start+0x14e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1dc      	bne.n	8003eb2 <HAL_ADCEx_Calibration_Start+0xee>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	f023 0303 	bic.w	r3, r3, #3
 8003f00:	f043 0201 	orr.w	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	4618      	mov	r0, r3
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd90      	pop	{r4, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000004 	.word	0x20000004

08003f20 <__NVIC_SetPriorityGrouping>:
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60d3      	str	r3, [r2, #12]
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_GetPriorityGrouping>:
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <__NVIC_GetPriorityGrouping+0x18>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_SetPriority>:
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	6039      	str	r1, [r7, #0]
 8003f8e:	71fb      	strb	r3, [r7, #7]
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db0a      	blt.n	8003fae <__NVIC_SetPriority+0x2a>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	490c      	ldr	r1, [pc, #48]	@ (8003fd0 <__NVIC_SetPriority+0x4c>)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	0112      	lsls	r2, r2, #4
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003fac:	e00a      	b.n	8003fc4 <__NVIC_SetPriority+0x40>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4908      	ldr	r1, [pc, #32]	@ (8003fd4 <__NVIC_SetPriority+0x50>)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	0112      	lsls	r2, r2, #4
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	761a      	strb	r2, [r3, #24]
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <NVIC_EncodePriority>:
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	@ 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f1c3 0307 	rsb	r3, r3, #7
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	bf28      	it	cs
 8003ff6:	2304      	movcs	r3, #4
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2b06      	cmp	r3, #6
 8004000:	d902      	bls.n	8004008 <NVIC_EncodePriority+0x30>
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3b03      	subs	r3, #3
 8004006:	e000      	b.n	800400a <NVIC_EncodePriority+0x32>
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	f04f 32ff 	mov.w	r2, #4294967295
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43da      	mvns	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	401a      	ands	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	409a      	lsls	r2, r3
 8004020:	f04f 31ff 	mov.w	r1, #4294967295
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	43d9      	mvns	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	400b      	ands	r3, r1
 8004030:	4313      	orrs	r3, r2
 8004032:	4618      	mov	r0, r3
 8004034:	3724      	adds	r7, #36	@ 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <SysTick_Config>:
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b01      	subs	r3, #1
 8004048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800404c:	d301      	bcc.n	8004052 <SysTick_Config+0x16>
 800404e:	2301      	movs	r3, #1
 8004050:	e00f      	b.n	8004072 <SysTick_Config+0x36>
 8004052:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <SysTick_Config+0x40>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	6053      	str	r3, [r2, #4]
 800405a:	210f      	movs	r1, #15
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	f7ff ff90 	bl	8003f84 <__NVIC_SetPriority>
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <SysTick_Config+0x40>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
 800406a:	4b04      	ldr	r3, [pc, #16]	@ (800407c <SysTick_Config+0x40>)
 800406c:	2207      	movs	r2, #7
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	2300      	movs	r3, #0
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e000e010 	.word	0xe000e010

08004080 <HAL_NVIC_SetPriorityGrouping>:
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ff49 	bl	8003f20 <__NVIC_SetPriorityGrouping>
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_SetPriority>:
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	f7ff ff5e 	bl	8003f68 <__NVIC_GetPriorityGrouping>
 80040ac:	6178      	str	r0, [r7, #20]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	6978      	ldr	r0, [r7, #20]
 80040b4:	f7ff ff90 	bl	8003fd8 <NVIC_EncodePriority>
 80040b8:	4602      	mov	r2, r0
 80040ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff ff5f 	bl	8003f84 <__NVIC_SetPriority>
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SYSTICK_Config>:
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ffb0 	bl	800403c <SysTick_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_CRC_Init>:
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_CRC_Init+0x12>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e00e      	b.n	8004116 <HAL_CRC_Init+0x30>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	795b      	ldrb	r3, [r3, #5]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_CRC_Init+0x28>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	711a      	strb	r2, [r3, #4]
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7fe ff93 	bl	8003034 <HAL_CRC_MspInit>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	715a      	strb	r2, [r3, #5]
 8004114:	2300      	movs	r3, #0
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_GPIO_Init>:
 8004120:	b480      	push	{r7}
 8004122:	b08b      	sub	sp, #44	@ 0x2c
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
 800412e:	2300      	movs	r3, #0
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	e169      	b.n	8004408 <HAL_GPIO_Init+0x2e8>
 8004134:	2201      	movs	r2, #1
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	429a      	cmp	r2, r3
 800414e:	f040 8158 	bne.w	8004402 <HAL_GPIO_Init+0x2e2>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a9a      	ldr	r2, [pc, #616]	@ (80043c0 <HAL_GPIO_Init+0x2a0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d05e      	beq.n	800421a <HAL_GPIO_Init+0xfa>
 800415c:	4a98      	ldr	r2, [pc, #608]	@ (80043c0 <HAL_GPIO_Init+0x2a0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d875      	bhi.n	800424e <HAL_GPIO_Init+0x12e>
 8004162:	4a98      	ldr	r2, [pc, #608]	@ (80043c4 <HAL_GPIO_Init+0x2a4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d058      	beq.n	800421a <HAL_GPIO_Init+0xfa>
 8004168:	4a96      	ldr	r2, [pc, #600]	@ (80043c4 <HAL_GPIO_Init+0x2a4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d86f      	bhi.n	800424e <HAL_GPIO_Init+0x12e>
 800416e:	4a96      	ldr	r2, [pc, #600]	@ (80043c8 <HAL_GPIO_Init+0x2a8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d052      	beq.n	800421a <HAL_GPIO_Init+0xfa>
 8004174:	4a94      	ldr	r2, [pc, #592]	@ (80043c8 <HAL_GPIO_Init+0x2a8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d869      	bhi.n	800424e <HAL_GPIO_Init+0x12e>
 800417a:	4a94      	ldr	r2, [pc, #592]	@ (80043cc <HAL_GPIO_Init+0x2ac>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d04c      	beq.n	800421a <HAL_GPIO_Init+0xfa>
 8004180:	4a92      	ldr	r2, [pc, #584]	@ (80043cc <HAL_GPIO_Init+0x2ac>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d863      	bhi.n	800424e <HAL_GPIO_Init+0x12e>
 8004186:	4a92      	ldr	r2, [pc, #584]	@ (80043d0 <HAL_GPIO_Init+0x2b0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d046      	beq.n	800421a <HAL_GPIO_Init+0xfa>
 800418c:	4a90      	ldr	r2, [pc, #576]	@ (80043d0 <HAL_GPIO_Init+0x2b0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d85d      	bhi.n	800424e <HAL_GPIO_Init+0x12e>
 8004192:	2b12      	cmp	r3, #18
 8004194:	d82a      	bhi.n	80041ec <HAL_GPIO_Init+0xcc>
 8004196:	2b12      	cmp	r3, #18
 8004198:	d859      	bhi.n	800424e <HAL_GPIO_Init+0x12e>
 800419a:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <HAL_GPIO_Init+0x80>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	0800421b 	.word	0x0800421b
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	08004207 	.word	0x08004207
 80041ac:	08004249 	.word	0x08004249
 80041b0:	0800424f 	.word	0x0800424f
 80041b4:	0800424f 	.word	0x0800424f
 80041b8:	0800424f 	.word	0x0800424f
 80041bc:	0800424f 	.word	0x0800424f
 80041c0:	0800424f 	.word	0x0800424f
 80041c4:	0800424f 	.word	0x0800424f
 80041c8:	0800424f 	.word	0x0800424f
 80041cc:	0800424f 	.word	0x0800424f
 80041d0:	0800424f 	.word	0x0800424f
 80041d4:	0800424f 	.word	0x0800424f
 80041d8:	0800424f 	.word	0x0800424f
 80041dc:	0800424f 	.word	0x0800424f
 80041e0:	0800424f 	.word	0x0800424f
 80041e4:	080041fd 	.word	0x080041fd
 80041e8:	08004211 	.word	0x08004211
 80041ec:	4a79      	ldr	r2, [pc, #484]	@ (80043d4 <HAL_GPIO_Init+0x2b4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_GPIO_Init+0xfa>
 80041f2:	e02c      	b.n	800424e <HAL_GPIO_Init+0x12e>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	e029      	b.n	8004250 <HAL_GPIO_Init+0x130>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	3304      	adds	r3, #4
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	e024      	b.n	8004250 <HAL_GPIO_Init+0x130>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	3308      	adds	r3, #8
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	e01f      	b.n	8004250 <HAL_GPIO_Init+0x130>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	330c      	adds	r3, #12
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	e01a      	b.n	8004250 <HAL_GPIO_Init+0x130>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <HAL_GPIO_Init+0x108>
 8004222:	2304      	movs	r3, #4
 8004224:	623b      	str	r3, [r7, #32]
 8004226:	e013      	b.n	8004250 <HAL_GPIO_Init+0x130>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_GPIO_Init+0x11c>
 8004230:	2308      	movs	r3, #8
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	611a      	str	r2, [r3, #16]
 800423a:	e009      	b.n	8004250 <HAL_GPIO_Init+0x130>
 800423c:	2308      	movs	r3, #8
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	615a      	str	r2, [r3, #20]
 8004246:	e003      	b.n	8004250 <HAL_GPIO_Init+0x130>
 8004248:	2300      	movs	r3, #0
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	e000      	b.n	8004250 <HAL_GPIO_Init+0x130>
 800424e:	bf00      	nop
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2bff      	cmp	r3, #255	@ 0xff
 8004254:	d801      	bhi.n	800425a <HAL_GPIO_Init+0x13a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	e001      	b.n	800425e <HAL_GPIO_Init+0x13e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2bff      	cmp	r3, #255	@ 0xff
 8004264:	d802      	bhi.n	800426c <HAL_GPIO_Init+0x14c>
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	e002      	b.n	8004272 <HAL_GPIO_Init+0x152>
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	3b08      	subs	r3, #8
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	210f      	movs	r1, #15
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	6a39      	ldr	r1, [r7, #32]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	fa01 f303 	lsl.w	r3, r1, r3
 800428c:	431a      	orrs	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80b1 	beq.w	8004402 <HAL_GPIO_Init+0x2e2>
 80042a0:	4b4d      	ldr	r3, [pc, #308]	@ (80043d8 <HAL_GPIO_Init+0x2b8>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	4a4c      	ldr	r2, [pc, #304]	@ (80043d8 <HAL_GPIO_Init+0x2b8>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6193      	str	r3, [r2, #24]
 80042ac:	4b4a      	ldr	r3, [pc, #296]	@ (80043d8 <HAL_GPIO_Init+0x2b8>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a48      	ldr	r2, [pc, #288]	@ (80043dc <HAL_GPIO_Init+0x2bc>)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	220f      	movs	r2, #15
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4013      	ands	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a40      	ldr	r2, [pc, #256]	@ (80043e0 <HAL_GPIO_Init+0x2c0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <HAL_GPIO_Init+0x1ec>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3f      	ldr	r2, [pc, #252]	@ (80043e4 <HAL_GPIO_Init+0x2c4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00d      	beq.n	8004308 <HAL_GPIO_Init+0x1e8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a3e      	ldr	r2, [pc, #248]	@ (80043e8 <HAL_GPIO_Init+0x2c8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <HAL_GPIO_Init+0x1e4>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3d      	ldr	r2, [pc, #244]	@ (80043ec <HAL_GPIO_Init+0x2cc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d101      	bne.n	8004300 <HAL_GPIO_Init+0x1e0>
 80042fc:	2303      	movs	r3, #3
 80042fe:	e006      	b.n	800430e <HAL_GPIO_Init+0x1ee>
 8004300:	2304      	movs	r3, #4
 8004302:	e004      	b.n	800430e <HAL_GPIO_Init+0x1ee>
 8004304:	2302      	movs	r3, #2
 8004306:	e002      	b.n	800430e <HAL_GPIO_Init+0x1ee>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_GPIO_Init+0x1ee>
 800430c:	2300      	movs	r3, #0
 800430e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004310:	f002 0203 	and.w	r2, r2, #3
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	4093      	lsls	r3, r2
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	492f      	ldr	r1, [pc, #188]	@ (80043dc <HAL_GPIO_Init+0x2bc>)
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_GPIO_Init+0x226>
 8004338:	4b2d      	ldr	r3, [pc, #180]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	492c      	ldr	r1, [pc, #176]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]
 8004344:	e006      	b.n	8004354 <HAL_GPIO_Init+0x234>
 8004346:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	43db      	mvns	r3, r3
 800434e:	4928      	ldr	r1, [pc, #160]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 8004350:	4013      	ands	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <HAL_GPIO_Init+0x24e>
 8004360:	4b23      	ldr	r3, [pc, #140]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	4922      	ldr	r1, [pc, #136]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	60cb      	str	r3, [r1, #12]
 800436c:	e006      	b.n	800437c <HAL_GPIO_Init+0x25c>
 800436e:	4b20      	ldr	r3, [pc, #128]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	43db      	mvns	r3, r3
 8004376:	491e      	ldr	r1, [pc, #120]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 8004378:	4013      	ands	r3, r2
 800437a:	60cb      	str	r3, [r1, #12]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d006      	beq.n	8004396 <HAL_GPIO_Init+0x276>
 8004388:	4b19      	ldr	r3, [pc, #100]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	4918      	ldr	r1, [pc, #96]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]
 8004394:	e006      	b.n	80043a4 <HAL_GPIO_Init+0x284>
 8004396:	4b16      	ldr	r3, [pc, #88]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	43db      	mvns	r3, r3
 800439e:	4914      	ldr	r1, [pc, #80]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d021      	beq.n	80043f4 <HAL_GPIO_Init+0x2d4>
 80043b0:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	490e      	ldr	r1, [pc, #56]	@ (80043f0 <HAL_GPIO_Init+0x2d0>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	600b      	str	r3, [r1, #0]
 80043bc:	e021      	b.n	8004402 <HAL_GPIO_Init+0x2e2>
 80043be:	bf00      	nop
 80043c0:	10320000 	.word	0x10320000
 80043c4:	10310000 	.word	0x10310000
 80043c8:	10220000 	.word	0x10220000
 80043cc:	10210000 	.word	0x10210000
 80043d0:	10120000 	.word	0x10120000
 80043d4:	10110000 	.word	0x10110000
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40010800 	.word	0x40010800
 80043e4:	40010c00 	.word	0x40010c00
 80043e8:	40011000 	.word	0x40011000
 80043ec:	40011400 	.word	0x40011400
 80043f0:	40010400 	.word	0x40010400
 80043f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <HAL_GPIO_Init+0x304>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	4909      	ldr	r1, [pc, #36]	@ (8004424 <HAL_GPIO_Init+0x304>)
 80043fe:	4013      	ands	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	3301      	adds	r3, #1
 8004406:	627b      	str	r3, [r7, #36]	@ 0x24
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	f47f ae8e 	bne.w	8004134 <HAL_GPIO_Init+0x14>
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	372c      	adds	r7, #44	@ 0x2c
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40010400 	.word	0x40010400

08004428 <HAL_GPIO_WritePin>:
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
 8004434:	4613      	mov	r3, r2
 8004436:	707b      	strb	r3, [r7, #1]
 8004438:	787b      	ldrb	r3, [r7, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_WritePin+0x1e>
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	611a      	str	r2, [r3, #16]
 8004444:	e003      	b.n	800444e <HAL_GPIO_WritePin+0x26>
 8004446:	887b      	ldrh	r3, [r7, #2]
 8004448:	041a      	lsls	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	611a      	str	r2, [r3, #16]
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <HAL_RCC_OscConfig>:
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_OscConfig+0x12>
 8004466:	2301      	movs	r3, #1
 8004468:	e272      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8087 	beq.w	8004586 <HAL_RCC_OscConfig+0x12e>
 8004478:	4b92      	ldr	r3, [pc, #584]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b04      	cmp	r3, #4
 8004482:	d00c      	beq.n	800449e <HAL_RCC_OscConfig+0x46>
 8004484:	4b8f      	ldr	r3, [pc, #572]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d112      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5e>
 8004490:	4b8c      	ldr	r3, [pc, #560]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449c:	d10b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5e>
 800449e:	4b89      	ldr	r3, [pc, #548]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06c      	beq.n	8004584 <HAL_RCC_OscConfig+0x12c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d168      	bne.n	8004584 <HAL_RCC_OscConfig+0x12c>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e24c      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x76>
 80044c0:	4b80      	ldr	r3, [pc, #512]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a7f      	ldr	r2, [pc, #508]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e02e      	b.n	800452c <HAL_RCC_OscConfig+0xd4>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x98>
 80044d6:	4b7b      	ldr	r3, [pc, #492]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a7a      	ldr	r2, [pc, #488]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b78      	ldr	r3, [pc, #480]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a77      	ldr	r2, [pc, #476]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e01d      	b.n	800452c <HAL_RCC_OscConfig+0xd4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0xbc>
 80044fa:	4b72      	ldr	r3, [pc, #456]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a71      	ldr	r2, [pc, #452]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b6f      	ldr	r3, [pc, #444]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a6e      	ldr	r2, [pc, #440]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0xd4>
 8004514:	4b6b      	ldr	r3, [pc, #428]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a6a      	ldr	r2, [pc, #424]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b68      	ldr	r3, [pc, #416]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a67      	ldr	r2, [pc, #412]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_RCC_OscConfig+0x104>
 8004534:	f7fe ffc0 	bl	80034b8 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0xf6>
 800453c:	f7fe ffbc 	bl	80034b8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	@ 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0xf6>
 800454a:	2303      	movs	r3, #3
 800454c:	e200      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800454e:	4b5d      	ldr	r3, [pc, #372]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0xe4>
 800455a:	e014      	b.n	8004586 <HAL_RCC_OscConfig+0x12e>
 800455c:	f7fe ffac 	bl	80034b8 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x11e>
 8004564:	f7fe ffa8 	bl	80034b8 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	@ 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x11e>
 8004572:	2303      	movs	r3, #3
 8004574:	e1ec      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 8004576:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x10c>
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x12e>
 8004584:	bf00      	nop
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d063      	beq.n	800465a <HAL_RCC_OscConfig+0x202>
 8004592:	4b4c      	ldr	r3, [pc, #304]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_RCC_OscConfig+0x15e>
 800459e:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d11c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x18c>
 80045aa:	4b46      	ldr	r3, [pc, #280]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <HAL_RCC_OscConfig+0x18c>
 80045b6:	4b43      	ldr	r3, [pc, #268]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x176>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x176>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e1c0      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 80045ce:	4b3d      	ldr	r3, [pc, #244]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4939      	ldr	r1, [pc, #228]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
 80045e2:	e03a      	b.n	800465a <HAL_RCC_OscConfig+0x202>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_RCC_OscConfig+0x1d6>
 80045ec:	4b36      	ldr	r3, [pc, #216]	@ (80046c8 <HAL_RCC_OscConfig+0x270>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f7fe ff61 	bl	80034b8 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x1b4>
 80045fa:	f7fe ff5d 	bl	80034b8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x1b4>
 8004608:	2303      	movs	r3, #3
 800460a:	e1a1      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800460c:	4b2d      	ldr	r3, [pc, #180]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x1a2>
 8004618:	4b2a      	ldr	r3, [pc, #168]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4927      	ldr	r1, [pc, #156]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
 800462c:	e015      	b.n	800465a <HAL_RCC_OscConfig+0x202>
 800462e:	4b26      	ldr	r3, [pc, #152]	@ (80046c8 <HAL_RCC_OscConfig+0x270>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f7fe ff40 	bl	80034b8 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1f6>
 800463c:	f7fe ff3c 	bl	80034b8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1f6>
 800464a:	2303      	movs	r3, #3
 800464c:	e180      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800464e:	4b1d      	ldr	r3, [pc, #116]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1e4>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d03a      	beq.n	80046dc <HAL_RCC_OscConfig+0x284>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d019      	beq.n	80046a2 <HAL_RCC_OscConfig+0x24a>
 800466e:	4b17      	ldr	r3, [pc, #92]	@ (80046cc <HAL_RCC_OscConfig+0x274>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f7fe ff20 	bl	80034b8 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x236>
 800467c:	f7fe ff1c 	bl	80034b8 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x236>
 800468a:	2303      	movs	r3, #3
 800468c:	e160      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <HAL_RCC_OscConfig+0x26c>)
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x224>
 800469a:	2001      	movs	r0, #1
 800469c:	f000 fad0 	bl	8004c40 <RCC_Delay>
 80046a0:	e01c      	b.n	80046dc <HAL_RCC_OscConfig+0x284>
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_RCC_OscConfig+0x274>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f7fe ff06 	bl	80034b8 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]
 80046ae:	e00f      	b.n	80046d0 <HAL_RCC_OscConfig+0x278>
 80046b0:	f7fe ff02 	bl	80034b8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d908      	bls.n	80046d0 <HAL_RCC_OscConfig+0x278>
 80046be:	2303      	movs	r3, #3
 80046c0:	e146      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	42420000 	.word	0x42420000
 80046cc:	42420480 	.word	0x42420480
 80046d0:	4b92      	ldr	r3, [pc, #584]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e9      	bne.n	80046b0 <HAL_RCC_OscConfig+0x258>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a6 	beq.w	8004836 <HAL_RCC_OscConfig+0x3de>
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
 80046ee:	4b8b      	ldr	r3, [pc, #556]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <HAL_RCC_OscConfig+0x2be>
 80046fa:	4b88      	ldr	r3, [pc, #544]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4a87      	ldr	r2, [pc, #540]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004704:	61d3      	str	r3, [r2, #28]
 8004706:	4b85      	ldr	r3, [pc, #532]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
 8004716:	4b82      	ldr	r3, [pc, #520]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d118      	bne.n	8004754 <HAL_RCC_OscConfig+0x2fc>
 8004722:	4b7f      	ldr	r3, [pc, #508]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a7e      	ldr	r2, [pc, #504]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	f7fe fec3 	bl	80034b8 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x2f0>
 8004736:	f7fe febf 	bl	80034b8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b64      	cmp	r3, #100	@ 0x64
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x2f0>
 8004744:	2303      	movs	r3, #3
 8004746:	e103      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 8004748:	4b75      	ldr	r3, [pc, #468]	@ (8004920 <HAL_RCC_OscConfig+0x4c8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x2de>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x312>
 800475c:	4b6f      	ldr	r3, [pc, #444]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4a6e      	ldr	r2, [pc, #440]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6213      	str	r3, [r2, #32]
 8004768:	e02d      	b.n	80047c6 <HAL_RCC_OscConfig+0x36e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x334>
 8004772:	4b6a      	ldr	r3, [pc, #424]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a69      	ldr	r2, [pc, #420]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	6213      	str	r3, [r2, #32]
 800477e:	4b67      	ldr	r3, [pc, #412]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4a66      	ldr	r2, [pc, #408]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	6213      	str	r3, [r2, #32]
 800478a:	e01c      	b.n	80047c6 <HAL_RCC_OscConfig+0x36e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b05      	cmp	r3, #5
 8004792:	d10c      	bne.n	80047ae <HAL_RCC_OscConfig+0x356>
 8004794:	4b61      	ldr	r3, [pc, #388]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4a60      	ldr	r2, [pc, #384]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	6213      	str	r3, [r2, #32]
 80047a0:	4b5e      	ldr	r3, [pc, #376]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4a5d      	ldr	r2, [pc, #372]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6213      	str	r3, [r2, #32]
 80047ac:	e00b      	b.n	80047c6 <HAL_RCC_OscConfig+0x36e>
 80047ae:	4b5b      	ldr	r3, [pc, #364]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a5a      	ldr	r2, [pc, #360]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6213      	str	r3, [r2, #32]
 80047ba:	4b58      	ldr	r3, [pc, #352]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a57      	ldr	r2, [pc, #348]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	6213      	str	r3, [r2, #32]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d015      	beq.n	80047fa <HAL_RCC_OscConfig+0x3a2>
 80047ce:	f7fe fe73 	bl	80034b8 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]
 80047d4:	e00a      	b.n	80047ec <HAL_RCC_OscConfig+0x394>
 80047d6:	f7fe fe6f 	bl	80034b8 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x394>
 80047e8:	2303      	movs	r3, #3
 80047ea:	e0b1      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 80047ec:	4b4b      	ldr	r3, [pc, #300]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ee      	beq.n	80047d6 <HAL_RCC_OscConfig+0x37e>
 80047f8:	e014      	b.n	8004824 <HAL_RCC_OscConfig+0x3cc>
 80047fa:	f7fe fe5d 	bl	80034b8 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]
 8004800:	e00a      	b.n	8004818 <HAL_RCC_OscConfig+0x3c0>
 8004802:	f7fe fe59 	bl	80034b8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x3c0>
 8004814:	2303      	movs	r3, #3
 8004816:	e09b      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 8004818:	4b40      	ldr	r3, [pc, #256]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1ee      	bne.n	8004802 <HAL_RCC_OscConfig+0x3aa>
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <HAL_RCC_OscConfig+0x3de>
 800482a:	4b3c      	ldr	r3, [pc, #240]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4a3b      	ldr	r2, [pc, #236]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004834:	61d3      	str	r3, [r2, #28]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8087 	beq.w	800494e <HAL_RCC_OscConfig+0x4f6>
 8004840:	4b36      	ldr	r3, [pc, #216]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d061      	beq.n	8004910 <HAL_RCC_OscConfig+0x4b8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d146      	bne.n	80048e2 <HAL_RCC_OscConfig+0x48a>
 8004854:	4b33      	ldr	r3, [pc, #204]	@ (8004924 <HAL_RCC_OscConfig+0x4cc>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f7fe fe2d 	bl	80034b8 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x41c>
 8004862:	f7fe fe29 	bl	80034b8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x41c>
 8004870:	2303      	movs	r3, #3
 8004872:	e06d      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 8004874:	4b29      	ldr	r3, [pc, #164]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f0      	bne.n	8004862 <HAL_RCC_OscConfig+0x40a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d108      	bne.n	800489c <HAL_RCC_OscConfig+0x444>
 800488a:	4b24      	ldr	r3, [pc, #144]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	4921      	ldr	r1, [pc, #132]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	4b1f      	ldr	r3, [pc, #124]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a19      	ldr	r1, [r3, #32]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	430b      	orrs	r3, r1
 80048ae:	491b      	ldr	r1, [pc, #108]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
 80048b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004924 <HAL_RCC_OscConfig+0x4cc>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f7fe fdfd 	bl	80034b8 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x47c>
 80048c2:	f7fe fdf9 	bl	80034b8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x47c>
 80048d0:	2303      	movs	r3, #3
 80048d2:	e03d      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 80048d4:	4b11      	ldr	r3, [pc, #68]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x46a>
 80048e0:	e035      	b.n	800494e <HAL_RCC_OscConfig+0x4f6>
 80048e2:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <HAL_RCC_OscConfig+0x4cc>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f7fe fde6 	bl	80034b8 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x4aa>
 80048f0:	f7fe fde2 	bl	80034b8 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x4aa>
 80048fe:	2303      	movs	r3, #3
 8004900:	e026      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCC_OscConfig+0x4c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x498>
 800490e:	e01e      	b.n	800494e <HAL_RCC_OscConfig+0x4f6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d107      	bne.n	8004928 <HAL_RCC_OscConfig+0x4d0>
 8004918:	2301      	movs	r3, #1
 800491a:	e019      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
 8004924:	42420060 	.word	0x42420060
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_OscConfig+0x500>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	429a      	cmp	r2, r3
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x4f2>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x4f6>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_RCC_OscConfig+0x4f8>
 800494e:	2300      	movs	r3, #0
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021000 	.word	0x40021000

0800495c <HAL_RCC_ClockConfig>:
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
 800496c:	2301      	movs	r3, #1
 800496e:	e0d0      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
 8004970:	4b6a      	ldr	r3, [pc, #424]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d910      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x44>
 800497e:	4b67      	ldr	r3, [pc, #412]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 0207 	bic.w	r2, r3, #7
 8004986:	4965      	ldr	r1, [pc, #404]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]
 800498e:	4b63      	ldr	r3, [pc, #396]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x44>
 800499c:	2301      	movs	r3, #1
 800499e:	e0b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_ClockConfig+0x92>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x68>
 80049b8:	4b59      	ldr	r3, [pc, #356]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4a58      	ldr	r2, [pc, #352]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049c2:	6053      	str	r3, [r2, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x80>
 80049d0:	4b53      	ldr	r3, [pc, #332]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4a52      	ldr	r2, [pc, #328]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049da:	6053      	str	r3, [r2, #4]
 80049dc:	4b50      	ldr	r3, [pc, #320]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	494d      	ldr	r1, [pc, #308]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	604b      	str	r3, [r1, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d040      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x120>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xb6>
 8004a02:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d115      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xce>
 8004a1a:	4b41      	ldr	r3, [pc, #260]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e073      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06b      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
 8004a3a:	4b39      	ldr	r3, [pc, #228]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4936      	ldr	r1, [pc, #216]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
 8004a4c:	f7fe fd34 	bl	80034b8 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
 8004a54:	f7fe fd30 	bl	80034b8 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
 8004a66:	2303      	movs	r3, #3
 8004a68:	e053      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
 8004a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
 8004a7c:	4b27      	ldr	r3, [pc, #156]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d210      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x150>
 8004a8a:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 0207 	bic.w	r2, r3, #7
 8004a92:	4922      	ldr	r1, [pc, #136]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
 8004a9a:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x150>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e032      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1b6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCC_ClockConfig+0x16e>
 8004ab8:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4916      	ldr	r1, [pc, #88]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x18e>
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	490e      	ldr	r1, [pc, #56]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
 8004aea:	f000 f821 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	490a      	ldr	r1, [pc, #40]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c8>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <HAL_RCC_ClockConfig+0x1cc>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_ClockConfig+0x1d0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fc92 	bl	8003434 <HAL_InitTick>
 8004b10:	2300      	movs	r3, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40022000 	.word	0x40022000
 8004b20:	40021000 	.word	0x40021000
 8004b24:	0800d610 	.word	0x0800d610
 8004b28:	20000004 	.word	0x20000004
 8004b2c:	20000008 	.word	0x20000008

08004b30 <HAL_RCC_GetSysClockFreq>:
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	2300      	movs	r3, #0
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d002      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x30>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0x36>
 8004b5e:	e027      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x80>
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	e027      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x86>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0c9b      	lsrs	r3, r3, #18
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b70:	5cd3      	ldrb	r3, [r2, r3]
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d010      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x70>
 8004b7e:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	0c5b      	lsrs	r3, r3, #17
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	4a11      	ldr	r2, [pc, #68]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b8a:	5cd3      	ldrb	r3, [r2, r3]
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b92:	fb03 f202 	mul.w	r2, r3, r2
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e004      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x7a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	e002      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x86>
 8004bb0:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	bf00      	nop
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	0800d620 	.word	0x0800d620
 8004bd0:	0800d630 	.word	0x0800d630
 8004bd4:	003d0900 	.word	0x003d0900
 8004bd8:	007a1200 	.word	0x007a1200

08004bdc <HAL_RCC_GetHCLKFreq>:
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	4b02      	ldr	r3, [pc, #8]	@ (8004bec <HAL_RCC_GetHCLKFreq+0x10>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	20000004 	.word	0x20000004

08004bf0 <HAL_RCC_GetPCLK1Freq>:
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	f7ff fff2 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000
 8004c14:	0800d608 	.word	0x0800d608

08004c18 <HAL_RCC_GetPCLK2Freq>:
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	f7ff ffde 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	0adb      	lsrs	r3, r3, #11
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800d608 	.word	0x0800d608

08004c40 <RCC_Delay>:
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <RCC_Delay+0x34>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c78 <RCC_Delay+0x38>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	0a5b      	lsrs	r3, r3, #9
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	bf00      	nop
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	60fa      	str	r2, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f9      	bne.n	8004c5c <RCC_Delay+0x1c>
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	20000004 	.word	0x20000004
 8004c78:	10624dd3 	.word	0x10624dd3

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d07d      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75fb      	strb	r3, [r7, #23]
 8004c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a4b      	ldr	r2, [pc, #300]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb2:	61d3      	str	r3, [r2, #28]
 8004cb4:	4b49      	ldr	r3, [pc, #292]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
 8004cc4:	4b46      	ldr	r3, [pc, #280]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d118      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004cd0:	4b43      	ldr	r3, [pc, #268]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a42      	ldr	r2, [pc, #264]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	f7fe fbec 	bl	80034b8 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ce4:	f7fe fbe8 	bl	80034b8 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	@ 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e06d      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004d02:	4b36      	ldr	r3, [pc, #216]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02e      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d027      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d20:	4b2e      	ldr	r3, [pc, #184]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	4b2c      	ldr	r3, [pc, #176]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4a29      	ldr	r2, [pc, #164]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6213      	str	r3, [r2, #32]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d014      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d46:	f7fe fbb7 	bl	80034b8 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d4e:	f7fe fbb3 	bl	80034b8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d60:	2303      	movs	r3, #3
 8004d62:	e036      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004d64:	4b1d      	ldr	r3, [pc, #116]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ee      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004d70:	4b1a      	ldr	r3, [pc, #104]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4917      	ldr	r1, [pc, #92]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	620b      	str	r3, [r1, #32]
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004d88:	4b14      	ldr	r3, [pc, #80]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4a13      	ldr	r2, [pc, #76]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	61d3      	str	r3, [r2, #28]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004da0:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	490b      	ldr	r1, [pc, #44]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dbe:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	4904      	ldr	r1, [pc, #16]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
 8004de4:	42420440 	.word	0x42420440

08004de8 <HAL_RCCEx_GetPeriphCLKFreq>:
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	f200 8089 	bhi.w	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d045      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d074      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004e1e:	e081      	b.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004e20:	4b45      	ldr	r3, [pc, #276]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	4b44      	ldr	r3, [pc, #272]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d07a      	beq.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	0c9b      	lsrs	r3, r3, #18
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a40      	ldr	r2, [pc, #256]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e3c:	5cd3      	ldrb	r3, [r2, r3]
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d015      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0c5b      	lsrs	r3, r3, #17
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	4a3a      	ldr	r2, [pc, #232]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004e56:	5cd3      	ldrb	r3, [r2, r3]
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004e64:	4a37      	ldr	r2, [pc, #220]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e004      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4a33      	ldr	r2, [pc, #204]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	4b2d      	ldr	r3, [pc, #180]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8c:	d102      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e049      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e041      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8004ea4:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb4:	d108      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e01e      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004ed4:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004ee0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e00e      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef2:	d11b      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004ef4:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004f00:	4b13      	ldr	r3, [pc, #76]	@ (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e012      	b.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004f06:	e011      	b.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004f08:	f7ff fe86 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	0b9b      	lsrs	r3, r3, #14
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	e004      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f24:	bf00      	nop
 8004f26:	e002      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f2c:	bf00      	nop
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	0800d634 	.word	0x0800d634
 8004f40:	0800d644 	.word	0x0800d644
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	003d0900 	.word	0x003d0900
 8004f4c:	aaaaaaab 	.word	0xaaaaaaab
 8004f50:	0001e848 	.word	0x0001e848

08004f54 <HAL_SPI_Init>:
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_SPI_Init+0x12>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e076      	b.n	8005054 <HAL_SPI_Init+0x100>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d108      	bne.n	8004f80 <HAL_SPI_Init+0x2c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f76:	d009      	beq.n	8004f8c <HAL_SPI_Init+0x38>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	61da      	str	r2, [r3, #28]
 8004f7e:	e005      	b.n	8004f8c <HAL_SPI_Init+0x38>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	611a      	str	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	615a      	str	r2, [r3, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_SPI_Init+0x58>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fe f85a 	bl	8003060 <HAL_SPI_MspInit>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005010:	ea42 0103 	orr.w	r1, r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005018:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	0c1a      	lsrs	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f002 0204 	and.w	r2, r2, #4
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005042:	61da      	str	r2, [r3, #28]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	655a      	str	r2, [r3, #84]	@ 0x54
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005052:	2300      	movs	r3, #0
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_SPI_Transmit>:
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_SPI_Transmit+0x22>
 800507a:	2302      	movs	r3, #2
 800507c:	e12d      	b.n	80052da <HAL_SPI_Transmit+0x27e>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005086:	f7fe fa17 	bl	80034b8 <HAL_GetTick>
 800508a:	61b8      	str	r0, [r7, #24]
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	82fb      	strh	r3, [r7, #22]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d002      	beq.n	80050a2 <HAL_SPI_Transmit+0x46>
 800509c:	2302      	movs	r3, #2
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e116      	b.n	80052d0 <HAL_SPI_Transmit+0x274>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_SPI_Transmit+0x52>
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <HAL_SPI_Transmit+0x58>
 80050ae:	2301      	movs	r3, #1
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e10d      	b.n	80052d0 <HAL_SPI_Transmit+0x274>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2203      	movs	r2, #3
 80050b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	869a      	strh	r2, [r3, #52]	@ 0x34
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	88fa      	ldrh	r2, [r7, #6]
 80050d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fa:	d10f      	bne.n	800511c <HAL_SPI_Transmit+0xc0>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d007      	beq.n	800513a <HAL_SPI_Transmit+0xde>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005142:	d14f      	bne.n	80051e4 <HAL_SPI_Transmit+0x188>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_SPI_Transmit+0xf6>
 800514c:	8afb      	ldrh	r3, [r7, #22]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d142      	bne.n	80051d8 <HAL_SPI_Transmit+0x17c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005176:	e02f      	b.n	80051d8 <HAL_SPI_Transmit+0x17c>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d112      	bne.n	80051ac <HAL_SPI_Transmit+0x150>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051aa:	e015      	b.n	80051d8 <HAL_SPI_Transmit+0x17c>
 80051ac:	f7fe f984 	bl	80034b8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d803      	bhi.n	80051c4 <HAL_SPI_Transmit+0x168>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d102      	bne.n	80051ca <HAL_SPI_Transmit+0x16e>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_SPI_Transmit+0x17c>
 80051ca:	2303      	movs	r3, #3
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80051d6:	e07b      	b.n	80052d0 <HAL_SPI_Transmit+0x274>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ca      	bne.n	8005178 <HAL_SPI_Transmit+0x11c>
 80051e2:	e050      	b.n	8005286 <HAL_SPI_Transmit+0x22a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_SPI_Transmit+0x196>
 80051ec:	8afb      	ldrh	r3, [r7, #22]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d144      	bne.n	800527c <HAL_SPI_Transmit+0x220>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	7812      	ldrb	r2, [r2, #0]
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	631a      	str	r2, [r3, #48]	@ 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005218:	e030      	b.n	800527c <HAL_SPI_Transmit+0x220>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b02      	cmp	r3, #2
 8005226:	d113      	bne.n	8005250 <HAL_SPI_Transmit+0x1f4>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800524e:	e015      	b.n	800527c <HAL_SPI_Transmit+0x220>
 8005250:	f7fe f932 	bl	80034b8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d803      	bhi.n	8005268 <HAL_SPI_Transmit+0x20c>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d102      	bne.n	800526e <HAL_SPI_Transmit+0x212>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_SPI_Transmit+0x220>
 800526e:	2303      	movs	r3, #3
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800527a:	e029      	b.n	80052d0 <HAL_SPI_Transmit+0x274>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1c9      	bne.n	800521a <HAL_SPI_Transmit+0x1be>
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fa6e 	bl	800576c <SPI_EndRxTxTransaction>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_SPI_Transmit+0x240>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	655a      	str	r2, [r3, #84]	@ 0x54
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <HAL_SPI_Transmit+0x25e>
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_Transmit+0x26c>
 80052c2:	2301      	movs	r3, #1
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e003      	b.n	80052d0 <HAL_SPI_Transmit+0x274>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80052d8:	7ffb      	ldrb	r3, [r7, #31]
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SPI_TransmitReceive>:
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b08c      	sub	sp, #48	@ 0x30
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	807b      	strh	r3, [r7, #2]
 80052f0:	2301      	movs	r3, #1
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x26>
 8005304:	2302      	movs	r3, #2
 8005306:	e198      	b.n	800563a <HAL_SPI_TransmitReceive+0x358>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005310:	f7fe f8d2 	bl	80034b8 <HAL_GetTick>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800531c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	887b      	ldrh	r3, [r7, #2]
 8005328:	837b      	strh	r3, [r7, #26]
 800532a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800532e:	2b01      	cmp	r3, #1
 8005330:	d00f      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x70>
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005338:	d107      	bne.n	800534a <HAL_SPI_TransmitReceive+0x68>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_SPI_TransmitReceive+0x68>
 8005342:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005346:	2b04      	cmp	r3, #4
 8005348:	d003      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x70>
 800534a:	2302      	movs	r3, #2
 800534c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005350:	e16d      	b.n	800562e <HAL_SPI_TransmitReceive+0x34c>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x82>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x82>
 800535e:	887b      	ldrh	r3, [r7, #2]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <HAL_SPI_TransmitReceive+0x8a>
 8005364:	2301      	movs	r3, #1
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e160      	b.n	800562e <HAL_SPI_TransmitReceive+0x34c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b04      	cmp	r3, #4
 8005376:	d003      	beq.n	8005380 <HAL_SPI_TransmitReceive+0x9e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2205      	movs	r2, #5
 800537c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	655a      	str	r2, [r3, #84]	@ 0x54
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	887a      	ldrh	r2, [r7, #2]
 8005390:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	631a      	str	r2, [r3, #48]	@ 0x30
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	869a      	strh	r2, [r3, #52]	@ 0x34
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d007      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0xf2>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053dc:	d17c      	bne.n	80054d8 <HAL_SPI_TransmitReceive+0x1f6>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x10a>
 80053e6:	8b7b      	ldrh	r3, [r7, #26]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d16a      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x1e0>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	881a      	ldrh	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60da      	str	r2, [r3, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	1c9a      	adds	r2, r3, #2
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	631a      	str	r2, [r3, #48]	@ 0x30
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005410:	e057      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x1e0>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d11b      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x176>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x176>
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d113      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x176>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	631a      	str	r2, [r3, #48]	@ 0x30
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005454:	2300      	movs	r3, #0
 8005456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b01      	cmp	r3, #1
 8005464:	d119      	bne.n	800549a <HAL_SPI_TransmitReceive+0x1b8>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d014      	beq.n	800549a <HAL_SPI_TransmitReceive+0x1b8>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	b292      	uxth	r2, r2
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	1c9a      	adds	r2, r3, #2
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005496:	2301      	movs	r3, #1
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800549a:	f7fe f80d 	bl	80034b8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d80b      	bhi.n	80054c2 <HAL_SPI_TransmitReceive+0x1e0>
 80054aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d007      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x1e0>
 80054b2:	2303      	movs	r3, #3
 80054b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80054c0:	e0b5      	b.n	800562e <HAL_SPI_TransmitReceive+0x34c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1a2      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x130>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d19d      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x130>
 80054d6:	e080      	b.n	80055da <HAL_SPI_TransmitReceive+0x2f8>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_TransmitReceive+0x204>
 80054e0:	8b7b      	ldrh	r3, [r7, #26]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d16f      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x2e4>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800550c:	e05b      	b.n	80055c6 <HAL_SPI_TransmitReceive+0x2e4>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d11c      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x274>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x274>
 8005526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d114      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x274>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	330c      	adds	r3, #12
 8005536:	7812      	ldrb	r2, [r2, #0]
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005552:	2300      	movs	r3, #0
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d119      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x2b6>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d014      	beq.n	8005598 <HAL_SPI_TransmitReceive+0x2b6>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005594:	2301      	movs	r3, #1
 8005596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005598:	f7fd ff8e 	bl	80034b8 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d803      	bhi.n	80055b0 <HAL_SPI_TransmitReceive+0x2ce>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x2d4>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x2e4>
 80055b6:	2303      	movs	r3, #3
 80055b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80055c4:	e033      	b.n	800562e <HAL_SPI_TransmitReceive+0x34c>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d19e      	bne.n	800550e <HAL_SPI_TransmitReceive+0x22c>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d199      	bne.n	800550e <HAL_SPI_TransmitReceive+0x22c>
 80055da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f8c4 	bl	800576c <SPI_EndRxTxTransaction>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <HAL_SPI_TransmitReceive+0x316>
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80055f6:	e01a      	b.n	800562e <HAL_SPI_TransmitReceive+0x34c>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <HAL_SPI_TransmitReceive+0x334>
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_SPI_TransmitReceive+0x344>
 800561e:	2301      	movs	r3, #1
 8005620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005624:	e003      	b.n	800562e <HAL_SPI_TransmitReceive+0x34c>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005636:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800563a:	4618      	mov	r0, r3
 800563c:	3730      	adds	r7, #48	@ 0x30
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_SPI_GetState>:
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005650:	b2db      	uxtb	r3, r3
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <SPI_WaitFlagStateUntilTimeout>:
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	71fb      	strb	r3, [r7, #7]
 800566c:	f7fd ff24 	bl	80034b8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	4413      	add	r3, r2
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	f7fd ff1c 	bl	80034b8 <HAL_GetTick>
 8005680:	61b8      	str	r0, [r7, #24]
 8005682:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	015b      	lsls	r3, r3, #5
 8005688:	0d1b      	lsrs	r3, r3, #20
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	fb02 f303 	mul.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e054      	b.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d050      	beq.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800569c:	f7fd ff0c 	bl	80034b8 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d902      	bls.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d13d      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xd2>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ca:	d111      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d004      	beq.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0x84>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056de:	d107      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f8:	d10f      	bne.n	800571a <SPI_WaitFlagStateUntilTimeout+0xbe>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800572a:	2303      	movs	r3, #3
 800572c:	e017      	b.n	800575e <SPI_WaitFlagStateUntilTimeout+0x102>
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3b01      	subs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	429a      	cmp	r2, r3
 800575a:	d19b      	bne.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x38>
 800575c:	2300      	movs	r3, #0
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000004 	.word	0x20000004

0800576c <SPI_EndRxTxTransaction>:
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	2180      	movs	r1, #128	@ 0x80
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff6a 	bl	800565c <SPI_WaitFlagStateUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <SPI_EndRxTxTransaction+0x32>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	655a      	str	r2, [r3, #84]	@ 0x54
 800579a:	2303      	movs	r3, #3
 800579c:	e000      	b.n	80057a0 <SPI_EndRxTxTransaction+0x34>
 800579e:	2300      	movs	r3, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_Base_Init>:
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_TIM_Base_Init+0x12>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e041      	b.n	800583e <HAL_TIM_Base_Init+0x96>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_TIM_Base_Init+0x2c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fd fc80 	bl	80030d4 <HAL_TIM_Base_MspInit>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f000 fb16 	bl	8005e18 <TIM_Base_SetConfig>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800583c:	2300      	movs	r3, #0
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_TIM_PWM_Init>:
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_TIM_PWM_Init+0x12>
 8005854:	2301      	movs	r3, #1
 8005856:	e041      	b.n	80058dc <HAL_TIM_PWM_Init+0x96>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <HAL_TIM_PWM_Init+0x2c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f839 	bl	80058e4 <HAL_TIM_PWM_MspInit>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f000 fac7 	bl	8005e18 <TIM_Base_SetConfig>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80058da:	2300      	movs	r3, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_PWM_MspInit>:
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_TIM_PWM_Start>:
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <HAL_TIM_PWM_Start+0x24>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e022      	b.n	8005962 <HAL_TIM_PWM_Start+0x6a>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b04      	cmp	r3, #4
 8005920:	d109      	bne.n	8005936 <HAL_TIM_PWM_Start+0x3e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	bf14      	ite	ne
 800592e:	2301      	movne	r3, #1
 8005930:	2300      	moveq	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e015      	b.n	8005962 <HAL_TIM_PWM_Start+0x6a>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d109      	bne.n	8005950 <HAL_TIM_PWM_Start+0x58>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e008      	b.n	8005962 <HAL_TIM_PWM_Start+0x6a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	bf14      	ite	ne
 800595c:	2301      	movne	r3, #1
 800595e:	2300      	moveq	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_TIM_PWM_Start+0x72>
 8005966:	2301      	movs	r3, #1
 8005968:	e05e      	b.n	8005a28 <HAL_TIM_PWM_Start+0x130>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Start+0x82>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005978:	e013      	b.n	80059a2 <HAL_TIM_PWM_Start+0xaa>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Start+0x92>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005988:	e00b      	b.n	80059a2 <HAL_TIM_PWM_Start+0xaa>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Start+0xa2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005998:	e003      	b.n	80059a2 <HAL_TIM_PWM_Start+0xaa>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fcb4 	bl	8006318 <TIM_CCxChannelCmd>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a30 <HAL_TIM_PWM_Start+0x138>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d107      	bne.n	80059ca <HAL_TIM_PWM_Start+0xd2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a18      	ldr	r2, [pc, #96]	@ (8005a30 <HAL_TIM_PWM_Start+0x138>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_TIM_PWM_Start+0xfa>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059dc:	d009      	beq.n	80059f2 <HAL_TIM_PWM_Start+0xfa>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <HAL_TIM_PWM_Start+0x13c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIM_PWM_Start+0xfa>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <HAL_TIM_PWM_Start+0x140>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d111      	bne.n	8005a16 <HAL_TIM_PWM_Start+0x11e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d010      	beq.n	8005a26 <HAL_TIM_PWM_Start+0x12e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e007      	b.n	8005a26 <HAL_TIM_PWM_Start+0x12e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800

08005a3c <HAL_TIM_PWM_Stop>:
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fc62 	bl	8006318 <TIM_CCxChannelCmd>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a29      	ldr	r2, [pc, #164]	@ (8005b00 <HAL_TIM_PWM_Stop+0xc4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d117      	bne.n	8005a8e <HAL_TIM_PWM_Stop+0x52>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10f      	bne.n	8005a8e <HAL_TIM_PWM_Stop+0x52>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <HAL_TIM_PWM_Stop+0x52>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10f      	bne.n	8005abe <HAL_TIM_PWM_Stop+0x82>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <HAL_TIM_PWM_Stop+0x82>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Stop+0x92>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005acc:	e013      	b.n	8005af6 <HAL_TIM_PWM_Stop+0xba>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_PWM_Stop+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005adc:	e00b      	b.n	8005af6 <HAL_TIM_PWM_Stop+0xba>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d104      	bne.n	8005aee <HAL_TIM_PWM_Stop+0xb2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aec:	e003      	b.n	8005af6 <HAL_TIM_PWM_Stop+0xba>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005af6:	2300      	movs	r3, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40012c00 	.word	0x40012c00

08005b04 <HAL_TIM_PWM_ConfigChannel>:
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	2300      	movs	r3, #0
 8005b12:	75fb      	strb	r3, [r7, #23]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e0ae      	b.n	8005c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	f200 809f 	bhi.w	8005c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b32:	a201      	add	r2, pc, #4	@ (adr r2, 8005b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005c71 	.word	0x08005c71
 8005b40:	08005c71 	.word	0x08005c71
 8005b44:	08005c71 	.word	0x08005c71
 8005b48:	08005bad 	.word	0x08005bad
 8005b4c:	08005c71 	.word	0x08005c71
 8005b50:	08005c71 	.word	0x08005c71
 8005b54:	08005c71 	.word	0x08005c71
 8005b58:	08005bef 	.word	0x08005bef
 8005b5c:	08005c71 	.word	0x08005c71
 8005b60:	08005c71 	.word	0x08005c71
 8005b64:	08005c71 	.word	0x08005c71
 8005b68:	08005c2f 	.word	0x08005c2f
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f9b2 	bl	8005edc <TIM_OC1_SetConfig>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0208 	orr.w	r2, r2, #8
 8005b86:	619a      	str	r2, [r3, #24]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0204 	bic.w	r2, r2, #4
 8005b96:	619a      	str	r2, [r3, #24]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	619a      	str	r2, [r3, #24]
 8005baa:	e064      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f9f8 	bl	8005fa8 <TIM_OC2_SetConfig>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc6:	619a      	str	r2, [r3, #24]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd6:	619a      	str	r2, [r3, #24]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6999      	ldr	r1, [r3, #24]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	021a      	lsls	r2, r3, #8
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	619a      	str	r2, [r3, #24]
 8005bec:	e043      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fa41 	bl	800607c <TIM_OC3_SetConfig>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0208 	orr.w	r2, r2, #8
 8005c08:	61da      	str	r2, [r3, #28]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0204 	bic.w	r2, r2, #4
 8005c18:	61da      	str	r2, [r3, #28]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	61da      	str	r2, [r3, #28]
 8005c2c:	e023      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fa8b 	bl	8006150 <TIM_OC4_SetConfig>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c48:	61da      	str	r2, [r3, #28]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c58:	61da      	str	r2, [r3, #28]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69d9      	ldr	r1, [r3, #28]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	021a      	lsls	r2, r3, #8
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	61da      	str	r2, [r3, #28]
 8005c6e:	e002      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
 8005c74:	bf00      	nop
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_TIM_ConfigClockSource>:
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e0b4      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x186>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cc2:	60bb      	str	r3, [r7, #8]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cca:	60bb      	str	r3, [r7, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cdc:	d03e      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0xd4>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce2:	f200 8087 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cea:	f000 8086 	beq.w	8005dfa <HAL_TIM_ConfigClockSource+0x172>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf2:	d87f      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b70      	cmp	r3, #112	@ 0x70
 8005cf6:	d01a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0xa6>
 8005cf8:	2b70      	cmp	r3, #112	@ 0x70
 8005cfa:	d87b      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b60      	cmp	r3, #96	@ 0x60
 8005cfe:	d050      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d00:	2b60      	cmp	r3, #96	@ 0x60
 8005d02:	d877      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b50      	cmp	r3, #80	@ 0x50
 8005d06:	d03c      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0xfa>
 8005d08:	2b50      	cmp	r3, #80	@ 0x50
 8005d0a:	d873      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b40      	cmp	r3, #64	@ 0x40
 8005d0e:	d058      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d10:	2b40      	cmp	r3, #64	@ 0x40
 8005d12:	d86f      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b30      	cmp	r3, #48	@ 0x30
 8005d16:	d064      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b30      	cmp	r3, #48	@ 0x30
 8005d1a:	d86b      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d060      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d867      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d05c      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d05a      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d2c:	e062      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6899      	ldr	r1, [r3, #8]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f000 facc 	bl	80062da <TIM_ETR_SetConfig>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	609a      	str	r2, [r3, #8]
 8005d5a:	e04f      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f000 fab5 	bl	80062da <TIM_ETR_SetConfig>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	e03c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 fa2c 	bl	80061ec <TIM_TI1_ConfigInputStage>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2150      	movs	r1, #80	@ 0x50
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fa83 	bl	80062a6 <TIM_ITRx_SetConfig>
 8005da0:	e02c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fa4a 	bl	8006248 <TIM_TI2_ConfigInputStage>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2160      	movs	r1, #96	@ 0x60
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fa73 	bl	80062a6 <TIM_ITRx_SetConfig>
 8005dc0:	e01c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 fa0c 	bl	80061ec <TIM_TI1_ConfigInputStage>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2140      	movs	r1, #64	@ 0x40
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fa63 	bl	80062a6 <TIM_ITRx_SetConfig>
 8005de0:	e00c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f000 fa5a 	bl	80062a6 <TIM_ITRx_SetConfig>
 8005df2:	e003      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e000      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
 8005dfa:	bf00      	nop
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <TIM_Base_SetConfig>:
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a29      	ldr	r2, [pc, #164]	@ (8005ed0 <TIM_Base_SetConfig+0xb8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00b      	beq.n	8005e48 <TIM_Base_SetConfig+0x30>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e36:	d007      	beq.n	8005e48 <TIM_Base_SetConfig+0x30>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a26      	ldr	r2, [pc, #152]	@ (8005ed4 <TIM_Base_SetConfig+0xbc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_Base_SetConfig+0x30>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a25      	ldr	r2, [pc, #148]	@ (8005ed8 <TIM_Base_SetConfig+0xc0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d108      	bne.n	8005e5a <TIM_Base_SetConfig+0x42>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed0 <TIM_Base_SetConfig+0xb8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_Base_SetConfig+0x62>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e68:	d007      	beq.n	8005e7a <TIM_Base_SetConfig+0x62>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <TIM_Base_SetConfig+0xbc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_Base_SetConfig+0x62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <TIM_Base_SetConfig+0xc0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d108      	bne.n	8005e8c <TIM_Base_SetConfig+0x74>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	@ 0x28
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a07      	ldr	r2, [pc, #28]	@ (8005ed0 <TIM_Base_SetConfig+0xb8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d103      	bne.n	8005ec0 <TIM_Base_SetConfig+0xa8>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	615a      	str	r2, [r3, #20]
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr
 8005ed0:	40012c00 	.word	0x40012c00
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800

08005edc <TIM_OC1_SetConfig>:
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f023 0201 	bic.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f023 0302 	bic.w	r3, r3, #2
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa4 <TIM_OC1_SetConfig+0xc8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10c      	bne.n	8005f52 <TIM_OC1_SetConfig+0x76>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0308 	bic.w	r3, r3, #8
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 0304 	bic.w	r3, r3, #4
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a13      	ldr	r2, [pc, #76]	@ (8005fa4 <TIM_OC1_SetConfig+0xc8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d111      	bne.n	8005f7e <TIM_OC1_SetConfig+0xa2>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	619a      	str	r2, [r3, #24]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	621a      	str	r2, [r3, #32]
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40012c00 	.word	0x40012c00

08005fa8 <TIM_OC2_SetConfig>:
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f023 0210 	bic.w	r2, r3, #16
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0320 	bic.w	r3, r3, #32
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1d      	ldr	r2, [pc, #116]	@ (8006078 <TIM_OC2_SetConfig+0xd0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10d      	bne.n	8006024 <TIM_OC2_SetConfig+0x7c>
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a14      	ldr	r2, [pc, #80]	@ (8006078 <TIM_OC2_SetConfig+0xd0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d113      	bne.n	8006054 <TIM_OC2_SetConfig+0xac>
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	619a      	str	r2, [r3, #24]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	621a      	str	r2, [r3, #32]
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr
 8006078:	40012c00 	.word	0x40012c00

0800607c <TIM_OC3_SetConfig>:
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	621a      	str	r2, [r3, #32]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1d      	ldr	r2, [pc, #116]	@ (800614c <TIM_OC3_SetConfig+0xd0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10d      	bne.n	80060f6 <TIM_OC3_SetConfig+0x7a>
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a14      	ldr	r2, [pc, #80]	@ (800614c <TIM_OC3_SetConfig+0xd0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d113      	bne.n	8006126 <TIM_OC3_SetConfig+0xaa>
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	61da      	str	r2, [r3, #28]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	63da      	str	r2, [r3, #60]	@ 0x3c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	bf00      	nop
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40012c00 	.word	0x40012c00

08006150 <TIM_OC4_SetConfig>:
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	621a      	str	r2, [r3, #32]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	031b      	lsls	r3, r3, #12
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a0f      	ldr	r2, [pc, #60]	@ (80061e8 <TIM_OC4_SetConfig+0x98>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <TIM_OC4_SetConfig+0x74>
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	61da      	str	r2, [r3, #28]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr
 80061e8:	40012c00 	.word	0x40012c00

080061ec <TIM_TI1_ConfigInputStage>:
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 030a 	bic.w	r3, r3, #10
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	619a      	str	r2, [r3, #24]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <TIM_TI2_ConfigInputStage>:
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0210 	bic.w	r2, r3, #16
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	031b      	lsls	r3, r3, #12
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	619a      	str	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	621a      	str	r2, [r3, #32]
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr

080062a6 <TIM_ITRx_SetConfig>:
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f043 0307 	orr.w	r3, r3, #7
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	bf00      	nop
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr

080062da <TIM_ETR_SetConfig>:
 80062da:	b480      	push	{r7}
 80062dc:	b087      	sub	sp, #28
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	021a      	lsls	r2, r3, #8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4313      	orrs	r3, r2
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	609a      	str	r2, [r3, #8]
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <TIM_CCxChannelCmd>:
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2201      	movs	r2, #1
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	43db      	mvns	r3, r3
 800633a:	401a      	ands	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	621a      	str	r2, [r3, #32]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1a      	ldr	r2, [r3, #32]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	fa01 f303 	lsl.w	r3, r1, r3
 8006350:	431a      	orrs	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_MasterConfigSynchronization>:
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006374:	2302      	movs	r3, #2
 8006376:	e046      	b.n	8006406 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a16      	ldr	r2, [pc, #88]	@ (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c4:	d009      	beq.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a12      	ldr	r2, [pc, #72]	@ (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a10      	ldr	r2, [pc, #64]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d10c      	bne.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	609a      	str	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006404:	2300      	movs	r3, #0
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800

0800641c <HAL_UART_Init>:
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Init+0x12>
 800642a:	2301      	movs	r3, #1
 800642c:	e042      	b.n	80064b4 <HAL_UART_Init+0x98>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_UART_Init+0x2c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fc fe92 	bl	800316c <HAL_UART_MspInit>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	@ 0x24
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f82b 	bl	80064bc <UART_SetConfig>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006474:	611a      	str	r2, [r3, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006484:	615a      	str	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	645a      	str	r2, [r3, #68]	@ 0x44
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80064b2:	2300      	movs	r3, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <UART_SetConfig>:
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	611a      	str	r2, [r3, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80064f6:	f023 030c 	bic.w	r3, r3, #12
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	430b      	orrs	r3, r1
 8006502:	60d3      	str	r3, [r2, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	615a      	str	r2, [r3, #20]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2c      	ldr	r2, [pc, #176]	@ (80065d0 <UART_SetConfig+0x114>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d103      	bne.n	800652c <UART_SetConfig+0x70>
 8006524:	f7fe fb78 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	e002      	b.n	8006532 <UART_SetConfig+0x76>
 800652c:	f7fe fb60 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009a      	lsls	r2, r3, #2
 800653c:	441a      	add	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	4a22      	ldr	r2, [pc, #136]	@ (80065d4 <UART_SetConfig+0x118>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	0119      	lsls	r1, r3, #4
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009a      	lsls	r2, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	fbb2 f2f3 	udiv	r2, r2, r3
 8006568:	4b1a      	ldr	r3, [pc, #104]	@ (80065d4 <UART_SetConfig+0x118>)
 800656a:	fba3 0302 	umull	r0, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	2064      	movs	r0, #100	@ 0x64
 8006572:	fb00 f303 	mul.w	r3, r0, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	3332      	adds	r3, #50	@ 0x32
 800657c:	4a15      	ldr	r2, [pc, #84]	@ (80065d4 <UART_SetConfig+0x118>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006588:	4419      	add	r1, r3
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009a      	lsls	r2, r3, #2
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	fbb2 f2f3 	udiv	r2, r2, r3
 80065a0:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <UART_SetConfig+0x118>)
 80065a2:	fba3 0302 	umull	r0, r3, r3, r2
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	2064      	movs	r0, #100	@ 0x64
 80065aa:	fb00 f303 	mul.w	r3, r0, r3
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	3332      	adds	r3, #50	@ 0x32
 80065b4:	4a07      	ldr	r2, [pc, #28]	@ (80065d4 <UART_SetConfig+0x118>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	440a      	add	r2, r1
 80065c6:	609a      	str	r2, [r3, #8]
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40013800 	.word	0x40013800
 80065d4:	51eb851f 	.word	0x51eb851f

080065d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80065dc:	4904      	ldr	r1, [pc, #16]	@ (80065f0 <MX_FATFS_Init+0x18>)
 80065de:	4805      	ldr	r0, [pc, #20]	@ (80065f4 <MX_FATFS_Init+0x1c>)
 80065e0:	f003 ff0e 	bl	800a400 <FATFS_LinkDriver>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	4b03      	ldr	r3, [pc, #12]	@ (80065f8 <MX_FATFS_Init+0x20>)
 80065ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80065ec:	bf00      	nop
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	2000253c 	.word	0x2000253c
 80065f4:	20000010 	.word	0x20000010
 80065f8:	20002538 	.word	0x20002538

080065fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006600:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006602:	4618      	mov	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	4603      	mov	r3, r0
 8006612:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fb ffe2 	bl	80025e0 <SD_disk_initialize>
 800661c:	4603      	mov	r3, r0
 800661e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	4618      	mov	r0, r3
 8006636:	f7fc f895 	bl	8002764 <SD_disk_status>
 800663a:	4603      	mov	r3, r0
 800663c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006656:	7bf8      	ldrb	r0, [r7, #15]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	f7fc f88b 	bl	8002778 <SD_disk_read>
 8006662:	4603      	mov	r3, r0
 8006664:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800667e:	7bf8      	ldrb	r0, [r7, #15]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	f7fc f8c3 	bl	8002810 <SD_disk_write>
 800668a:	4603      	mov	r3, r0
 800668c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	4603      	mov	r3, r0
 800669e:	603a      	str	r2, [r7, #0]
 80066a0:	71fb      	strb	r3, [r7, #7]
 80066a2:	460b      	mov	r3, r1
 80066a4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	79b9      	ldrb	r1, [r7, #6]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fc f911 	bl	80028d4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80066b2:	bf00      	nop
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	4a08      	ldr	r2, [pc, #32]	@ (80066ec <disk_status+0x30>)
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	79fa      	ldrb	r2, [r7, #7]
 80066d4:	4905      	ldr	r1, [pc, #20]	@ (80066ec <disk_status+0x30>)
 80066d6:	440a      	add	r2, r1
 80066d8:	7a12      	ldrb	r2, [r2, #8]
 80066da:	4610      	mov	r0, r2
 80066dc:	4798      	blx	r3
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20002754 	.word	0x20002754

080066f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	4a0d      	ldr	r2, [pc, #52]	@ (8006738 <disk_initialize+0x48>)
 8006702:	5cd3      	ldrb	r3, [r2, r3]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d111      	bne.n	800672c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	4a0b      	ldr	r2, [pc, #44]	@ (8006738 <disk_initialize+0x48>)
 800670c:	2101      	movs	r1, #1
 800670e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	4a09      	ldr	r2, [pc, #36]	@ (8006738 <disk_initialize+0x48>)
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	79fa      	ldrb	r2, [r7, #7]
 800671e:	4906      	ldr	r1, [pc, #24]	@ (8006738 <disk_initialize+0x48>)
 8006720:	440a      	add	r2, r1
 8006722:	7a12      	ldrb	r2, [r2, #8]
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20002754 	.word	0x20002754

0800673c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4603      	mov	r3, r0
 800674a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	4a0a      	ldr	r2, [pc, #40]	@ (8006778 <disk_read+0x3c>)
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	689c      	ldr	r4, [r3, #8]
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	4a07      	ldr	r2, [pc, #28]	@ (8006778 <disk_read+0x3c>)
 800675c:	4413      	add	r3, r2
 800675e:	7a18      	ldrb	r0, [r3, #8]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	47a0      	blx	r4
 8006768:	4603      	mov	r3, r0
 800676a:	75fb      	strb	r3, [r7, #23]
  return res;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd90      	pop	{r4, r7, pc}
 8006776:	bf00      	nop
 8006778:	20002754 	.word	0x20002754

0800677c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	4a0a      	ldr	r2, [pc, #40]	@ (80067b8 <disk_write+0x3c>)
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68dc      	ldr	r4, [r3, #12]
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	4a07      	ldr	r2, [pc, #28]	@ (80067b8 <disk_write+0x3c>)
 800679c:	4413      	add	r3, r2
 800679e:	7a18      	ldrb	r0, [r3, #8]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	47a0      	blx	r4
 80067a8:	4603      	mov	r3, r0
 80067aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd90      	pop	{r4, r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20002754 	.word	0x20002754

080067bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	603a      	str	r2, [r7, #0]
 80067c6:	71fb      	strb	r3, [r7, #7]
 80067c8:	460b      	mov	r3, r1
 80067ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	4a09      	ldr	r2, [pc, #36]	@ (80067f4 <disk_ioctl+0x38>)
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	79fa      	ldrb	r2, [r7, #7]
 80067da:	4906      	ldr	r1, [pc, #24]	@ (80067f4 <disk_ioctl+0x38>)
 80067dc:	440a      	add	r2, r1
 80067de:	7a10      	ldrb	r0, [r2, #8]
 80067e0:	79b9      	ldrb	r1, [r7, #6]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	4798      	blx	r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20002754 	.word	0x20002754

080067f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800680c:	e007      	b.n	800681e <mem_cpy+0x26>
		*d++ = *s++;
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	1c53      	adds	r3, r2, #1
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	1c59      	adds	r1, r3, #1
 8006818:	6179      	str	r1, [r7, #20]
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	1e5a      	subs	r2, r3, #1
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f2      	bne.n	800680e <mem_cpy+0x16>
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006844:	e005      	b.n	8006852 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	617a      	str	r2, [r7, #20]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	1e5a      	subs	r2, r3, #1
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f4      	bne.n	8006846 <mem_set+0x12>
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	@ 0x24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006880:	bf00      	nop
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	1e5a      	subs	r2, r3, #1
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00d      	beq.n	80068a8 <mem_cmp+0x40>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	61fa      	str	r2, [r7, #28]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	4619      	mov	r1, r3
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	61ba      	str	r2, [r7, #24]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	1acb      	subs	r3, r1, r3
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0ec      	beq.n	8006882 <mem_cmp+0x1a>
	return r;
 80068a8:	697b      	ldr	r3, [r7, #20]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3724      	adds	r7, #36	@ 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80068be:	e002      	b.n	80068c6 <chk_chr+0x12>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3301      	adds	r3, #1
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d005      	beq.n	80068da <chk_chr+0x26>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d1f2      	bne.n	80068c0 <chk_chr+0xc>
	return *str;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	781b      	ldrb	r3, [r3, #0]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068f2:	2300      	movs	r3, #0
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e03b      	b.n	8006974 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80068fc:	4931      	ldr	r1, [pc, #196]	@ (80069c4 <chk_lock+0xdc>)
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4613      	mov	r3, r2
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d02c      	beq.n	800696a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006910:	492c      	ldr	r1, [pc, #176]	@ (80069c4 <chk_lock+0xdc>)
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d120      	bne.n	800696e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800692c:	4925      	ldr	r1, [pc, #148]	@ (80069c4 <chk_lock+0xdc>)
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	3304      	adds	r3, #4
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006944:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006946:	429a      	cmp	r2, r3
 8006948:	d111      	bne.n	800696e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800694a:	491e      	ldr	r1, [pc, #120]	@ (80069c4 <chk_lock+0xdc>)
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	3308      	adds	r3, #8
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006962:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006964:	429a      	cmp	r2, r3
 8006966:	d102      	bne.n	800696e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006968:	e007      	b.n	800697a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800696a:	2301      	movs	r3, #1
 800696c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0c0      	beq.n	80068fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d109      	bne.n	8006994 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <chk_lock+0xa4>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d101      	bne.n	8006990 <chk_lock+0xa8>
 800698c:	2300      	movs	r3, #0
 800698e:	e013      	b.n	80069b8 <chk_lock+0xd0>
 8006990:	2312      	movs	r3, #18
 8006992:	e011      	b.n	80069b8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <chk_lock+0xca>
 800699a:	490a      	ldr	r1, [pc, #40]	@ (80069c4 <chk_lock+0xdc>)
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4613      	mov	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	330a      	adds	r3, #10
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b0:	d101      	bne.n	80069b6 <chk_lock+0xce>
 80069b2:	2310      	movs	r3, #16
 80069b4:	e000      	b.n	80069b8 <chk_lock+0xd0>
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20002548 	.word	0x20002548

080069c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	e002      	b.n	80069da <enq_lock+0x12>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3301      	adds	r3, #1
 80069d8:	607b      	str	r3, [r7, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <enq_lock+0x2c>
 80069e0:	490a      	ldr	r1, [pc, #40]	@ (8006a0c <enq_lock+0x44>)
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ef      	bne.n	80069d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	bf14      	ite	ne
 80069fa:	2301      	movne	r3, #1
 80069fc:	2300      	moveq	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	20002548 	.word	0x20002548

08006a10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e02e      	b.n	8006a7e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8006a20:	4958      	ldr	r1, [pc, #352]	@ (8006b84 <inc_lock+0x174>)
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d11d      	bne.n	8006a78 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006a3c:	4951      	ldr	r1, [pc, #324]	@ (8006b84 <inc_lock+0x174>)
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4613      	mov	r3, r2
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10e      	bne.n	8006a78 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006a5a:	494a      	ldr	r1, [pc, #296]	@ (8006b84 <inc_lock+0x174>)
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3308      	adds	r3, #8
 8006a6a:	881a      	ldrh	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a72:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d006      	beq.n	8006a86 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0cd      	beq.n	8006a20 <inc_lock+0x10>
 8006a84:	e000      	b.n	8006a88 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8006a86:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d148      	bne.n	8006b20 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e002      	b.n	8006a9a <inc_lock+0x8a>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <inc_lock+0xa4>
 8006aa0:	4938      	ldr	r1, [pc, #224]	@ (8006b84 <inc_lock+0x174>)
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1ef      	bne.n	8006a94 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <inc_lock+0xae>
 8006aba:	2300      	movs	r3, #0
 8006abc:	e05d      	b.n	8006b7a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	482f      	ldr	r0, [pc, #188]	@ (8006b84 <inc_lock+0x174>)
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4613      	mov	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4403      	add	r3, r0
 8006ad4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	4829      	ldr	r0, [pc, #164]	@ (8006b84 <inc_lock+0x174>)
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4403      	add	r3, r0
 8006aec:	3304      	adds	r3, #4
 8006aee:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af6:	88d8      	ldrh	r0, [r3, #6]
 8006af8:	4922      	ldr	r1, [pc, #136]	@ (8006b84 <inc_lock+0x174>)
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4613      	mov	r3, r2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	3308      	adds	r3, #8
 8006b08:	4602      	mov	r2, r0
 8006b0a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b0c:	491d      	ldr	r1, [pc, #116]	@ (8006b84 <inc_lock+0x174>)
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4613      	mov	r3, r2
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	330a      	adds	r3, #10
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <inc_lock+0x130>
 8006b26:	4917      	ldr	r1, [pc, #92]	@ (8006b84 <inc_lock+0x174>)
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	330a      	adds	r3, #10
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <inc_lock+0x130>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e01c      	b.n	8006b7a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <inc_lock+0x14e>
 8006b46:	490f      	ldr	r1, [pc, #60]	@ (8006b84 <inc_lock+0x174>)
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	330a      	adds	r3, #10
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	b299      	uxth	r1, r3
 8006b5c:	e001      	b.n	8006b62 <inc_lock+0x152>
 8006b5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b62:	4808      	ldr	r0, [pc, #32]	@ (8006b84 <inc_lock+0x174>)
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4613      	mov	r3, r2
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4403      	add	r3, r0
 8006b70:	330a      	adds	r3, #10
 8006b72:	460a      	mov	r2, r1
 8006b74:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr
 8006b84:	20002548 	.word	0x20002548

08006b88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d12e      	bne.n	8006bfa <dec_lock+0x72>
		n = Files[i].ctr;
 8006b9c:	491b      	ldr	r1, [pc, #108]	@ (8006c0c <dec_lock+0x84>)
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	330a      	adds	r3, #10
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006bb0:	89fb      	ldrh	r3, [r7, #14]
 8006bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bb6:	d101      	bne.n	8006bbc <dec_lock+0x34>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006bbc:	89fb      	ldrh	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <dec_lock+0x40>
 8006bc2:	89fb      	ldrh	r3, [r7, #14]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006bc8:	4910      	ldr	r1, [pc, #64]	@ (8006c0c <dec_lock+0x84>)
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	330a      	adds	r3, #10
 8006bd8:	89fa      	ldrh	r2, [r7, #14]
 8006bda:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d108      	bne.n	8006bf4 <dec_lock+0x6c>
 8006be2:	490a      	ldr	r1, [pc, #40]	@ (8006c0c <dec_lock+0x84>)
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	737b      	strb	r3, [r7, #13]
 8006bf8:	e001      	b.n	8006bfe <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006bfe:	7b7b      	ldrb	r3, [r7, #13]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20002548 	.word	0x20002548

08006c10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e016      	b.n	8006c4c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c1e:	4910      	ldr	r1, [pc, #64]	@ (8006c60 <clear_lock+0x50>)
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d108      	bne.n	8006c46 <clear_lock+0x36>
 8006c34:	490a      	ldr	r1, [pc, #40]	@ (8006c60 <clear_lock+0x50>)
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0e5      	beq.n	8006c1e <clear_lock+0xe>
	}
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20002548 	.word	0x20002548

08006c64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c76:	791b      	ldrb	r3, [r3, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d040      	beq.n	8006cfe <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c8c:	7858      	ldrb	r0, [r3, #1]
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	2301      	movs	r3, #1
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	f7ff fd72 	bl	800677c <disk_write>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <sync_window+0x40>
			res = FR_DISK_ERR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	73fb      	strb	r3, [r7, #15]
 8006ca2:	e02c      	b.n	8006cfe <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006caa:	2200      	movs	r2, #0
 8006cac:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d21b      	bcs.n	8006cfe <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ccc:	78db      	ldrb	r3, [r3, #3]
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	e012      	b.n	8006cf8 <sync_window+0x94>
					wsect += fs->fsize;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4413      	add	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce6:	7858      	ldrb	r0, [r3, #1]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	2301      	movs	r3, #1
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	f7ff fd45 	bl	800677c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d8e9      	bhi.n	8006cd2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d01e      	beq.n	8006d62 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ff9d 	bl	8006c64 <sync_window>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d116      	bne.n	8006d62 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d3a:	7858      	ldrb	r0, [r3, #1]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	f7ff fcfb 	bl	800673c <disk_read>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff ff75 	bl	8006c64 <sync_window>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 80ad 	bne.w	8006ee0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	f040 8098 	bne.w	8006ec4 <sync_fs+0x158>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9a:	795b      	ldrb	r3, [r3, #5]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	f040 8091 	bne.w	8006ec4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006daa:	895b      	ldrh	r3, [r3, #10]
 8006dac:	461a      	mov	r2, r3
 8006dae:	2100      	movs	r1, #0
 8006db0:	f7ff fd40 	bl	8006834 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2255      	movs	r2, #85	@ 0x55
 8006db8:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	22aa      	movs	r2, #170	@ 0xaa
 8006dc0:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2252      	movs	r2, #82	@ 0x52
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2252      	movs	r2, #82	@ 0x52
 8006dce:	705a      	strb	r2, [r3, #1]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2261      	movs	r2, #97	@ 0x61
 8006dd4:	709a      	strb	r2, [r3, #2]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2241      	movs	r2, #65	@ 0x41
 8006dda:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2272      	movs	r2, #114	@ 0x72
 8006de0:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2272      	movs	r2, #114	@ 0x72
 8006de8:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2241      	movs	r2, #65	@ 0x41
 8006df0:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2261      	movs	r2, #97	@ 0x61
 8006df8:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	0c1b      	lsrs	r3, r3, #16
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	0e1b      	lsrs	r3, r3, #24
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	0e1b      	lsrs	r3, r3, #24
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea8:	7858      	ldrb	r0, [r3, #1]
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f7ff fc61 	bl	800677c <disk_write>
			fs->fsi_flag = 0;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fc73 	bl	80067bc <disk_ioctl>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	3b02      	subs	r3, #2
 8006ef8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	3b02      	subs	r3, #2
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d301      	bcc.n	8006f0e <clust2sect+0x24>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e00c      	b.n	8006f28 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f14:	789b      	ldrb	r3, [r3, #2]
 8006f16:	461a      	mov	r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	fb03 f202 	mul.w	r2, r3, r2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	4413      	add	r3, r2
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr

08006f32 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d906      	bls.n	8006f50 <get_fat+0x1e>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d302      	bcc.n	8006f56 <get_fat+0x24>
		val = 1;	/* Internal error */
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e0e3      	b.n	800711e <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	f000 8097 	beq.w	8007098 <get_fat+0x166>
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	f300 80cd 	bgt.w	800710a <get_fat+0x1d8>
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d002      	beq.n	8006f7a <get_fat+0x48>
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d05e      	beq.n	8007036 <get_fat+0x104>
 8006f78:	e0c7      	b.n	800710a <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f96:	895b      	ldrh	r3, [r3, #10]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff feaf 	bl	8006d08 <move_window>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f040 80af 	bne.w	8007110 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	60fa      	str	r2, [r7, #12]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fbe:	8952      	ldrh	r2, [r2, #10]
 8006fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fc4:	fb01 f202 	mul.w	r2, r1, r2
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	5cd3      	ldrb	r3, [r2, r3]
 8006fce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fde:	895b      	ldrh	r3, [r3, #10]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fe8:	4413      	add	r3, r2
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fe8b 	bl	8006d08 <move_window>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 808d 	bne.w	8007114 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007000:	895b      	ldrh	r3, [r3, #10]
 8007002:	461a      	mov	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	fbb3 f1f2 	udiv	r1, r3, r2
 800700a:	fb01 f202 	mul.w	r2, r1, r2
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	5cd3      	ldrb	r3, [r2, r3]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	4313      	orrs	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <get_fat+0xfa>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	091b      	lsrs	r3, r3, #4
 800702a:	e002      	b.n	8007032 <get_fat+0x100>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007032:	617b      	str	r3, [r7, #20]
			break;
 8007034:	e073      	b.n	800711e <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007044:	895b      	ldrh	r3, [r3, #10]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	4619      	mov	r1, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007052:	4413      	add	r3, r2
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff fe56 	bl	8006d08 <move_window>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d15a      	bne.n	8007118 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800706c:	8952      	ldrh	r2, [r2, #10]
 800706e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007072:	fb01 f202 	mul.w	r2, r1, r2
 8007076:	1a9b      	subs	r3, r3, r2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3301      	adds	r3, #1
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	b21a      	sxth	r2, r3
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	b21b      	sxth	r3, r3
 800708e:	4313      	orrs	r3, r2
 8007090:	b21b      	sxth	r3, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	617b      	str	r3, [r7, #20]
			break;
 8007096:	e042      	b.n	800711e <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800709e:	6a1a      	ldr	r2, [r3, #32]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a6:	895b      	ldrh	r3, [r3, #10]
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4619      	mov	r1, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80070b4:	4413      	add	r3, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fe25 	bl	8006d08 <move_window>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d12b      	bne.n	800711c <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070ce:	8952      	ldrh	r2, [r2, #10]
 80070d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d4:	fb01 f202 	mul.w	r2, r1, r2
 80070d8:	1a9b      	subs	r3, r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3303      	adds	r3, #3
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	061a      	lsls	r2, r3, #24
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3302      	adds	r3, #2
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	431a      	orrs	r2, r3
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3301      	adds	r3, #1
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	4313      	orrs	r3, r2
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	4313      	orrs	r3, r2
 8007102:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007106:	617b      	str	r3, [r7, #20]
			break;
 8007108:	e009      	b.n	800711e <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800710a:	2301      	movs	r3, #1
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e006      	b.n	800711e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007110:	bf00      	nop
 8007112:	e004      	b.n	800711e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007114:	bf00      	nop
 8007116:	e002      	b.n	800711e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007118:	bf00      	nop
 800711a:	e000      	b.n	800711e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800711c:	bf00      	nop
		}
	}

	return val;
 800711e:	697b      	ldr	r3, [r7, #20]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d906      	bls.n	8007148 <put_fat+0x20>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	429a      	cmp	r2, r3
 8007146:	d302      	bcc.n	800714e <put_fat+0x26>
		res = FR_INT_ERR;
 8007148:	2302      	movs	r3, #2
 800714a:	77fb      	strb	r3, [r7, #31]
 800714c:	e13a      	b.n	80073c4 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b03      	cmp	r3, #3
 8007158:	f000 80d0 	beq.w	80072fc <put_fat+0x1d4>
 800715c:	2b03      	cmp	r3, #3
 800715e:	f300 8127 	bgt.w	80073b0 <put_fat+0x288>
 8007162:	2b01      	cmp	r3, #1
 8007164:	d003      	beq.n	800716e <put_fat+0x46>
 8007166:	2b02      	cmp	r3, #2
 8007168:	f000 808f 	beq.w	800728a <put_fat+0x162>
 800716c:	e120      	b.n	80073b0 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007182:	6a1a      	ldr	r2, [r3, #32]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800718a:	895b      	ldrh	r3, [r3, #10]
 800718c:	4619      	mov	r1, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	fbb3 f3f1 	udiv	r3, r3, r1
 8007194:	4413      	add	r3, r2
 8007196:	4619      	mov	r1, r3
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff fdb5 	bl	8006d08 <move_window>
 800719e:	4603      	mov	r3, r0
 80071a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071a2:	7ffb      	ldrb	r3, [r7, #31]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f040 8106 	bne.w	80073b6 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	617a      	str	r2, [r7, #20]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071b6:	8952      	ldrh	r2, [r2, #10]
 80071b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80071bc:	fb01 f202 	mul.w	r2, r1, r2
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00d      	beq.n	80071ee <put_fat+0xc6>
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b25b      	sxtb	r3, r3
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	b25a      	sxtb	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b25b      	sxtb	r3, r3
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	e001      	b.n	80071f2 <put_fat+0xca>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071fc:	2201      	movs	r2, #1
 80071fe:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007206:	6a1a      	ldr	r2, [r3, #32]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800720e:	895b      	ldrh	r3, [r3, #10]
 8007210:	4619      	mov	r1, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	fbb3 f3f1 	udiv	r3, r3, r1
 8007218:	4413      	add	r3, r2
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fd73 	bl	8006d08 <move_window>
 8007222:	4603      	mov	r3, r0
 8007224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007226:	7ffb      	ldrb	r3, [r7, #31]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 80c6 	bne.w	80073ba <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007234:	895b      	ldrh	r3, [r3, #10]
 8007236:	461a      	mov	r2, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	fbb3 f1f2 	udiv	r1, r3, r2
 800723e:	fb01 f202 	mul.w	r2, r1, r2
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <put_fat+0x134>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	091b      	lsrs	r3, r3, #4
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e00e      	b.n	800727a <put_fat+0x152>
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b25b      	sxtb	r3, r3
 8007262:	f023 030f 	bic.w	r3, r3, #15
 8007266:	b25a      	sxtb	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b25b      	sxtb	r3, r3
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	b25b      	sxtb	r3, r3
 8007274:	4313      	orrs	r3, r2
 8007276:	b25b      	sxtb	r3, r3
 8007278:	b2db      	uxtb	r3, r3
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007284:	2201      	movs	r2, #1
 8007286:	711a      	strb	r2, [r3, #4]
			break;
 8007288:	e09c      	b.n	80073c4 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007298:	895b      	ldrh	r3, [r3, #10]
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	b29b      	uxth	r3, r3
 800729e:	4619      	mov	r1, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80072a6:	4413      	add	r3, r2
 80072a8:	4619      	mov	r1, r3
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff fd2c 	bl	8006d08 <move_window>
 80072b0:	4603      	mov	r3, r0
 80072b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072b4:	7ffb      	ldrb	r3, [r7, #31]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8081 	bne.w	80073be <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80072c6:	8952      	ldrh	r2, [r2, #10]
 80072c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80072cc:	fb01 f202 	mul.w	r2, r1, r2
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	0a1b      	lsrs	r3, r3, #8
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072f6:	2201      	movs	r2, #1
 80072f8:	711a      	strb	r2, [r3, #4]
			break;
 80072fa:	e063      	b.n	80073c4 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800730a:	895b      	ldrh	r3, [r3, #10]
 800730c:	089b      	lsrs	r3, r3, #2
 800730e:	b29b      	uxth	r3, r3
 8007310:	4619      	mov	r1, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	fbb3 f3f1 	udiv	r3, r3, r1
 8007318:	4413      	add	r3, r2
 800731a:	4619      	mov	r1, r3
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fcf3 	bl	8006d08 <move_window>
 8007322:	4603      	mov	r3, r0
 8007324:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007326:	7ffb      	ldrb	r3, [r7, #31]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d14a      	bne.n	80073c2 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007336:	8952      	ldrh	r2, [r2, #10]
 8007338:	fbb3 f1f2 	udiv	r1, r3, r2
 800733c:	fb01 f202 	mul.w	r2, r1, r2
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	3303      	adds	r3, #3
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	061a      	lsls	r2, r3, #24
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	3302      	adds	r3, #2
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	431a      	orrs	r2, r3
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	3301      	adds	r3, #1
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	4313      	orrs	r3, r2
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	4313      	orrs	r3, r2
 800736a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4313      	orrs	r3, r2
 8007372:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	b2da      	uxtb	r2, r3
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	b29b      	uxth	r3, r3
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	b29a      	uxth	r2, r3
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	3301      	adds	r3, #1
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	0c1a      	lsrs	r2, r3, #16
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	3302      	adds	r3, #2
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	0e1a      	lsrs	r2, r3, #24
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	3303      	adds	r3, #3
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073aa:	2201      	movs	r2, #1
 80073ac:	711a      	strb	r2, [r3, #4]
			break;
 80073ae:	e009      	b.n	80073c4 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80073b0:	2302      	movs	r3, #2
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e006      	b.n	80073c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073b6:	bf00      	nop
 80073b8:	e004      	b.n	80073c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073ba:	bf00      	nop
 80073bc:	e002      	b.n	80073c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073be:	bf00      	nop
 80073c0:	e000      	b.n	80073c4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073c2:	bf00      	nop
		}
	}

	return res;
 80073c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d906      	bls.n	80073ec <remove_chain+0x1e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d302      	bcc.n	80073f2 <remove_chain+0x24>
		res = FR_INT_ERR;
 80073ec:	2302      	movs	r3, #2
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	e049      	b.n	8007486 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80073f6:	e03b      	b.n	8007470 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff fd99 	bl	8006f32 <get_fat>
 8007400:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d03b      	beq.n	8007480 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d102      	bne.n	8007414 <remove_chain+0x46>
 800740e:	2302      	movs	r3, #2
 8007410:	73fb      	strb	r3, [r7, #15]
 8007412:	e038      	b.n	8007486 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d102      	bne.n	8007422 <remove_chain+0x54>
 800741c:	2301      	movs	r3, #1
 800741e:	73fb      	strb	r3, [r7, #15]
 8007420:	e031      	b.n	8007486 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007422:	2200      	movs	r2, #0
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fe7e 	bl	8007128 <put_fat>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d126      	bne.n	8007484 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d013      	beq.n	800746c <remove_chain+0x9e>
				fs->free_clust++;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	3301      	adds	r3, #1
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007454:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800745c:	795b      	ldrb	r3, [r3, #5]
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800746a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d3bc      	bcc.n	80073f8 <remove_chain+0x2a>
 800747e:	e002      	b.n	8007486 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8007480:	bf00      	nop
 8007482:	e000      	b.n	8007486 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8007484:	bf00      	nop
		}
	}

	return res;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d111      	bne.n	80074c4 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d006      	beq.n	80074be <create_chain+0x2e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d31d      	bcc.n	80074fa <create_chain+0x6a>
 80074be:	2301      	movs	r3, #1
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	e01a      	b.n	80074fa <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fd33 	bl	8006f32 <get_fat>
 80074cc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d801      	bhi.n	80074d8 <create_chain+0x48>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e07f      	b.n	80075d8 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d101      	bne.n	80074e4 <create_chain+0x54>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	e079      	b.n	80075d8 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d201      	bcs.n	80074f6 <create_chain+0x66>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	e070      	b.n	80075d8 <create_chain+0x148>
		scl = clst;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	3301      	adds	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	429a      	cmp	r2, r3
 8007510:	d307      	bcc.n	8007522 <create_chain+0x92>
			ncl = 2;
 8007512:	2302      	movs	r3, #2
 8007514:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d901      	bls.n	8007522 <create_chain+0x92>
 800751e:	2300      	movs	r3, #0
 8007520:	e05a      	b.n	80075d8 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007522:	6979      	ldr	r1, [r7, #20]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fd04 	bl	8006f32 <get_fat>
 800752a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00e      	beq.n	8007550 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d002      	beq.n	8007540 <create_chain+0xb0>
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <create_chain+0xb4>
			return cs;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	e049      	b.n	80075d8 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	429a      	cmp	r2, r3
 800754a:	d1d8      	bne.n	80074fe <create_chain+0x6e>
 800754c:	2300      	movs	r3, #0
 800754e:	e043      	b.n	80075d8 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8007550:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007552:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8007556:	6979      	ldr	r1, [r7, #20]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff fde5 	bl	8007128 <put_fat>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d109      	bne.n	800757c <create_chain+0xec>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fdd8 	bl	8007128 <put_fat>
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d121      	bne.n	80075c6 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007588:	461a      	mov	r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d01c      	beq.n	80075d6 <create_chain+0x146>
			fs->free_clust--;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075ac:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b4:	795b      	ldrb	r3, [r3, #5]
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075c2:	715a      	strb	r2, [r3, #5]
 80075c4:	e007      	b.n	80075d6 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d102      	bne.n	80075d2 <create_chain+0x142>
 80075cc:	f04f 33ff 	mov.w	r3, #4294967295
 80075d0:	e000      	b.n	80075d4 <create_chain+0x144>
 80075d2:	2301      	movs	r3, #1
 80075d4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80075d6:	697b      	ldr	r3, [r7, #20]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	3304      	adds	r3, #4
 80075f4:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007602:	895b      	ldrh	r3, [r3, #10]
 8007604:	461a      	mov	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	fbb3 f3f2 	udiv	r3, r3, r2
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007618:	7892      	ldrb	r2, [r2, #2]
 800761a:	fbb3 f3f2 	udiv	r3, r3, r2
 800761e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1d1a      	adds	r2, r3, #4
 8007624:	613a      	str	r2, [r7, #16]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <clmt_clust+0x54>
 8007630:	2300      	movs	r3, #0
 8007632:	e010      	b.n	8007656 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	429a      	cmp	r2, r3
 800763a:	d307      	bcc.n	800764c <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	3304      	adds	r3, #4
 8007648:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800764a:	e7e9      	b.n	8007620 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800764c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	4413      	add	r3, r2
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr

08007660 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007674:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d009      	beq.n	800769a <dir_sdi+0x3a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	429a      	cmp	r2, r3
 8007698:	d301      	bcc.n	800769e <dir_sdi+0x3e>
		return FR_INT_ERR;
 800769a:	2302      	movs	r3, #2
 800769c:	e0aa      	b.n	80077f4 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d110      	bne.n	80076c6 <dir_sdi+0x66>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d107      	bne.n	80076c6 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d115      	bne.n	80076f8 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076d8:	891b      	ldrh	r3, [r3, #8]
 80076da:	461a      	mov	r2, r3
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	4293      	cmp	r3, r2
 80076e0:	d301      	bcc.n	80076e6 <dir_sdi+0x86>
			return FR_INT_ERR;
 80076e2:	2302      	movs	r3, #2
 80076e4:	e086      	b.n	80077f4 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	e043      	b.n	8007780 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007704:	895b      	ldrh	r3, [r3, #10]
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	b29b      	uxth	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007718:	789b      	ldrb	r3, [r3, #2]
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007720:	e021      	b.n	8007766 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fc00 	bl	8006f32 <get_fat>
 8007732:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d101      	bne.n	8007740 <dir_sdi+0xe0>
 800773c:	2301      	movs	r3, #1
 800773e:	e059      	b.n	80077f4 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d909      	bls.n	800775a <dir_sdi+0xfa>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	429a      	cmp	r2, r3
 8007758:	d301      	bcc.n	800775e <dir_sdi+0xfe>
				return FR_INT_ERR;
 800775a:	2302      	movs	r3, #2
 800775c:	e04a      	b.n	80077f4 <dir_sdi+0x194>
			idx -= ic;
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	429a      	cmp	r2, r3
 800776c:	d2d9      	bcs.n	8007722 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6979      	ldr	r1, [r7, #20]
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fbb6 	bl	8006eea <clust2sect>
 800777e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007786:	461a      	mov	r2, r3
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <dir_sdi+0x136>
 8007792:	2302      	movs	r3, #2
 8007794:	e02e      	b.n	80077f4 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a2:	895b      	ldrh	r3, [r3, #10]
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4413      	add	r3, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80077ba:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077d2:	895b      	ldrh	r3, [r3, #10]
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80077e0:	fb01 f202 	mul.w	r2, r1, r2
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	015b      	lsls	r3, r3, #5
 80077e8:	4403      	add	r3, r0
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80077f0:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	3301      	adds	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <dir_next+0x2a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <dir_next+0x2e>
		return FR_NO_FILE;
 8007826:	2304      	movs	r3, #4
 8007828:	e12e      	b.n	8007a88 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007836:	895b      	ldrh	r3, [r3, #10]
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	b29b      	uxth	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	fbb3 f1f2 	udiv	r1, r3, r2
 8007844:	fb01 f202 	mul.w	r2, r1, r2
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 80fa 	bne.w	8007a44 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	3301      	adds	r3, #1
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007860:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10d      	bne.n	800788a <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800787a:	891b      	ldrh	r3, [r3, #8]
 800787c:	461a      	mov	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4293      	cmp	r3, r2
 8007882:	f0c0 80df 	bcc.w	8007a44 <dir_next+0x248>
				return FR_NO_FILE;
 8007886:	2304      	movs	r3, #4
 8007888:	e0fe      	b.n	8007a88 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007896:	895b      	ldrh	r3, [r3, #10]
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	b29b      	uxth	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078b0:	7892      	ldrb	r2, [r2, #2]
 80078b2:	3a01      	subs	r2, #1
 80078b4:	4013      	ands	r3, r2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 80c4 	bne.w	8007a44 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7ff fb2f 	bl	8006f32 <get_fat>
 80078d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d801      	bhi.n	80078e0 <dir_next+0xe4>
 80078dc:	2302      	movs	r3, #2
 80078de:	e0d3      	b.n	8007a88 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d101      	bne.n	80078ec <dir_next+0xf0>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e0cd      	b.n	8007a88 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	f0c0 808e 	bcc.w	8007a1e <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <dir_next+0x110>
 8007908:	2304      	movs	r3, #4
 800790a:	e0bd      	b.n	8007a88 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f7ff fdb6 	bl	8007490 <create_chain>
 8007924:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <dir_next+0x134>
 800792c:	2307      	movs	r3, #7
 800792e:	e0ab      	b.n	8007a88 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <dir_next+0x13e>
 8007936:	2302      	movs	r3, #2
 8007938:	e0a6      	b.n	8007a88 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d101      	bne.n	8007946 <dir_next+0x14a>
 8007942:	2301      	movs	r3, #1
 8007944:	e0a0      	b.n	8007a88 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff f988 	bl	8006c64 <sync_window>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <dir_next+0x162>
 800795a:	2301      	movs	r3, #1
 800795c:	e094      	b.n	8007a88 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007974:	895b      	ldrh	r3, [r3, #10]
 8007976:	461a      	mov	r2, r3
 8007978:	2100      	movs	r1, #0
 800797a:	f7fe ff5b 	bl	8006834 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798c:	681c      	ldr	r4, [r3, #0]
 800798e:	6979      	ldr	r1, [r7, #20]
 8007990:	4610      	mov	r0, r2
 8007992:	f7ff faaa 	bl	8006eea <clust2sect>
 8007996:	4603      	mov	r3, r0
 8007998:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800799c:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800799e:	2300      	movs	r3, #0
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	e021      	b.n	80079e8 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079b0:	2201      	movs	r2, #1
 80079b2:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff f951 	bl	8006c64 <sync_window>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <dir_next+0x1d0>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e05d      	b.n	8007a88 <dir_next+0x28c>
						dp->fs->winsect++;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80079d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80079da:	3201      	adds	r2, #1
 80079dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	3301      	adds	r3, #1
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079f4:	789b      	ldrb	r3, [r3, #2]
 80079f6:	461a      	mov	r2, r3
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d3d2      	bcc.n	80079a4 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1acb      	subs	r3, r1, r3
 8007a18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a24:	461a      	mov	r2, r3
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6979      	ldr	r1, [r7, #20]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fa58 	bl	8006eea <clust2sect>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a42:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a4e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a66:	895b      	ldrh	r3, [r3, #10]
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a74:	fb01 f202 	mul.w	r2, r1, r2
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	015b      	lsls	r3, r3, #5
 8007a7c:	4403      	add	r3, r0
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a84:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd90      	pop	{r4, r7, pc}

08007a90 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fddf 	bl	8007660 <dir_sdi>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d135      	bne.n	8007b18 <dir_alloc+0x88>
		n = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7ff f920 	bl	8006d08 <move_window>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d121      	bne.n	8007b16 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2be5      	cmp	r3, #229	@ 0xe5
 8007ade:	d006      	beq.n	8007aee <dir_alloc+0x5e>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d107      	bne.n	8007afe <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60bb      	str	r3, [r7, #8]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d102      	bne.n	8007b02 <dir_alloc+0x72>
 8007afc:	e00c      	b.n	8007b18 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007b02:	2101      	movs	r1, #1
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fe79 	bl	80077fc <dir_next>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0cd      	beq.n	8007ab0 <dir_alloc+0x20>
 8007b14:	e000      	b.n	8007b18 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8007b16:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d101      	bne.n	8007b22 <dir_alloc+0x92>
 8007b1e:	2307      	movs	r3, #7
 8007b20:	73fb      	strb	r3, [r7, #15]
	return res;
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	331b      	adds	r3, #27
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	b21a      	sxth	r2, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	331a      	adds	r3, #26
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b21b      	sxth	r3, r3
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	b21b      	sxth	r3, r3
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d10f      	bne.n	8007b7c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3315      	adds	r3, #21
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	b21a      	sxth	r2, r3
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	3314      	adds	r3, #20
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	b21b      	sxth	r3, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	b21b      	sxth	r3, r3
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]

	return cl;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr

08007b88 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	331a      	adds	r3, #26
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	0a1b      	lsrs	r3, r3, #8
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	331b      	adds	r3, #27
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	0c1a      	lsrs	r2, r3, #16
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3314      	adds	r3, #20
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	0c1b      	lsrs	r3, r3, #16
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3315      	adds	r3, #21
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007be6:	1e5a      	subs	r2, r3, #1
 8007be8:	4613      	mov	r3, r2
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8007bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8007cac <cmp_lfn+0xd8>)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	4413      	add	r3, r2
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4413      	add	r3, r2
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	b21a      	sxth	r2, r3
 8007c10:	4926      	ldr	r1, [pc, #152]	@ (8007cac <cmp_lfn+0xd8>)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	440b      	add	r3, r1
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	440b      	add	r3, r1
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b21b      	sxth	r3, r3
 8007c22:	4313      	orrs	r3, r2
 8007c24:	b21b      	sxth	r3, r3
 8007c26:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8007c28:	89fb      	ldrh	r3, [r7, #14]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d019      	beq.n	8007c62 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8007c2e:	89bb      	ldrh	r3, [r7, #12]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f002 fc2f 	bl	800a494 <ff_wtoupper>
 8007c36:	4603      	mov	r3, r0
 8007c38:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007c3e:	d80e      	bhi.n	8007c5e <cmp_lfn+0x8a>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	617a      	str	r2, [r7, #20]
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 fc20 	bl	800a494 <ff_wtoupper>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461a      	mov	r2, r3
 8007c58:	89fb      	ldrh	r3, [r7, #14]
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d008      	beq.n	8007c70 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e01f      	b.n	8007ca2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8007c62:	89bb      	ldrh	r3, [r7, #12]
 8007c64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d001      	beq.n	8007c70 <cmp_lfn+0x9c>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e018      	b.n	8007ca2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	3301      	adds	r3, #1
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b0c      	cmp	r3, #12
 8007c7a:	d9bf      	bls.n	8007bfc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <cmp_lfn+0xcc>
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <cmp_lfn+0xcc>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	4413      	add	r3, r2
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <cmp_lfn+0xcc>
		return 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e000      	b.n	8007ca2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8007ca0:	2301      	movs	r3, #1
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	0800d6c8 	.word	0x0800d6c8

08007cb0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b089      	sub	sp, #36	@ 0x24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	71fb      	strb	r3, [r7, #7]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	330d      	adds	r3, #13
 8007cca:	79ba      	ldrb	r2, [r7, #6]
 8007ccc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	330b      	adds	r3, #11
 8007cd2:	220f      	movs	r2, #15
 8007cd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	331a      	adds	r3, #26
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	331b      	adds	r3, #27
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	1e5a      	subs	r2, r3, #1
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	82fb      	strh	r3, [r7, #22]
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007d06:	8afb      	ldrh	r3, [r7, #22]
 8007d08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d007      	beq.n	8007d20 <fit_lfn+0x70>
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	61fa      	str	r2, [r7, #28]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007d20:	4a1c      	ldr	r2, [pc, #112]	@ (8007d94 <fit_lfn+0xe4>)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	4413      	add	r3, r2
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	8afa      	ldrh	r2, [r7, #22]
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	8afb      	ldrh	r3, [r7, #22]
 8007d36:	0a1b      	lsrs	r3, r3, #8
 8007d38:	b299      	uxth	r1, r3
 8007d3a:	4a16      	ldr	r2, [pc, #88]	@ (8007d94 <fit_lfn+0xe4>)
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	4413      	add	r3, r2
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	4413      	add	r3, r2
 8007d48:	b2ca      	uxtb	r2, r1
 8007d4a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007d4c:	8afb      	ldrh	r3, [r7, #22]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <fit_lfn+0xa8>
 8007d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d56:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b0c      	cmp	r3, #12
 8007d62:	d9d0      	bls.n	8007d06 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007d64:	8afb      	ldrh	r3, [r7, #22]
 8007d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d006      	beq.n	8007d7c <fit_lfn+0xcc>
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <fit_lfn+0xd4>
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d82:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	79fa      	ldrb	r2, [r7, #7]
 8007d88:	701a      	strb	r2, [r3, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	3724      	adds	r7, #36	@ 0x24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr
 8007d94:	0800d6c8 	.word	0x0800d6c8

08007d98 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08c      	sub	sp, #48	@ 0x30
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007da6:	220b      	movs	r2, #11
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7fe fd24 	bl	80067f8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d92b      	bls.n	8007e0e <gen_numname+0x76>
		sr = seq;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007dba:	e022      	b.n	8007e02 <gen_numname+0x6a>
			wc = *lfn++;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	1c9a      	adds	r2, r3, #2
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dca:	e017      	b.n	8007dfc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005a      	lsls	r2, r3, #1
 8007dd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	4413      	add	r3, r2
 8007dd8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007dda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ddc:	085b      	lsrs	r3, r3, #1
 8007dde:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <gen_numname+0x5e>
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007df0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007df4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df8:	3301      	adds	r3, #1
 8007dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	2b0f      	cmp	r3, #15
 8007e00:	d9e4      	bls.n	8007dcc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1d8      	bne.n	8007dbc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007e0e:	2307      	movs	r3, #7
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	3330      	adds	r3, #48	@ 0x30
 8007e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e26:	2b39      	cmp	r3, #57	@ 0x39
 8007e28:	d904      	bls.n	8007e34 <gen_numname+0x9c>
 8007e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e2e:	3307      	adds	r3, #7
 8007e30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e36:	1e5a      	subs	r2, r3, #1
 8007e38:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007e3a:	3330      	adds	r3, #48	@ 0x30
 8007e3c:	443b      	add	r3, r7
 8007e3e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007e42:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	091b      	lsrs	r3, r3, #4
 8007e4a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1df      	bne.n	8007e12 <gen_numname+0x7a>
	ns[i] = '~';
 8007e52:	f107 0214 	add.w	r2, r7, #20
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	4413      	add	r3, r2
 8007e5a:	227e      	movs	r2, #126	@ 0x7e
 8007e5c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e62:	e002      	b.n	8007e6a <gen_numname+0xd2>
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	3301      	adds	r3, #1
 8007e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d205      	bcs.n	8007e7e <gen_numname+0xe6>
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	4413      	add	r3, r2
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d1f2      	bne.n	8007e64 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	d807      	bhi.n	8007e94 <gen_numname+0xfc>
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007e8a:	3330      	adds	r3, #48	@ 0x30
 8007e8c:	443b      	add	r3, r7
 8007e8e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007e92:	e000      	b.n	8007e96 <gen_numname+0xfe>
 8007e94:	2120      	movs	r1, #32
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	460a      	mov	r2, r1
 8007ea2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	2b07      	cmp	r3, #7
 8007ea8:	d9e9      	bls.n	8007e7e <gen_numname+0xe6>
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	3730      	adds	r7, #48	@ 0x30
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007ec0:	230b      	movs	r3, #11
 8007ec2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	0852      	lsrs	r2, r2, #1
 8007eca:	01db      	lsls	r3, r3, #7
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	1c59      	adds	r1, r3, #1
 8007ed4:	6079      	str	r1, [r7, #4]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	4413      	add	r3, r2
 8007eda:	73fb      	strb	r3, [r7, #15]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1ed      	bne.n	8007ec4 <sum_sfn+0x10>
	return sum;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr

08007ef4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007efc:	2100      	movs	r1, #0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff fbae 	bl	8007660 <dir_sdi>
 8007f04:	4603      	mov	r3, r0
 8007f06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <dir_find+0x1e>
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	e0b8      	b.n	8008084 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007f12:	23ff      	movs	r3, #255	@ 0xff
 8007f14:	753b      	strb	r3, [r7, #20]
 8007f16:	7d3b      	ldrb	r3, [r7, #20]
 8007f18:	757b      	strb	r3, [r7, #21]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f24:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	4619      	mov	r1, r3
 8007f38:	4610      	mov	r0, r2
 8007f3a:	f7fe fee5 	bl	8006d08 <move_window>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 8097 	bne.w	8008078 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007f5a:	7dbb      	ldrb	r3, [r7, #22]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <dir_find+0x72>
 8007f60:	2304      	movs	r3, #4
 8007f62:	75fb      	strb	r3, [r7, #23]
 8007f64:	e08d      	b.n	8008082 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	330b      	adds	r3, #11
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f70:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007f72:	7dbb      	ldrb	r3, [r7, #22]
 8007f74:	2be5      	cmp	r3, #229	@ 0xe5
 8007f76:	d007      	beq.n	8007f88 <dir_find+0x94>
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <dir_find+0xa6>
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	2b0f      	cmp	r3, #15
 8007f86:	d008      	beq.n	8007f9a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007f88:	23ff      	movs	r3, #255	@ 0xff
 8007f8a:	757b      	strb	r3, [r7, #21]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f96:	849a      	strh	r2, [r3, #36]	@ 0x24
 8007f98:	e063      	b.n	8008062 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b0f      	cmp	r3, #15
 8007f9e:	d137      	bne.n	8008010 <dir_find+0x11c>
				if (dp->lfn) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d05a      	beq.n	8008062 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d010      	beq.n	8007fd8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	7b5b      	ldrb	r3, [r3, #13]
 8007fba:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007fbc:	7dbb      	ldrb	r3, [r7, #22]
 8007fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc2:	75bb      	strb	r3, [r7, #22]
 8007fc4:	7dbb      	ldrb	r3, [r7, #22]
 8007fc6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fce:	88da      	ldrh	r2, [r3, #6]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fd6:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007fd8:	7dba      	ldrb	r2, [r7, #22]
 8007fda:	7d7b      	ldrb	r3, [r7, #21]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d114      	bne.n	800800a <dir_find+0x116>
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	330d      	adds	r3, #13
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	7d3a      	ldrb	r2, [r7, #20]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d10e      	bne.n	800800a <dir_find+0x116>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	6939      	ldr	r1, [r7, #16]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fdec 	bl	8007bd4 <cmp_lfn>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <dir_find+0x116>
 8008002:	7d7b      	ldrb	r3, [r7, #21]
 8008004:	3b01      	subs	r3, #1
 8008006:	b2db      	uxtb	r3, r3
 8008008:	e000      	b.n	800800c <dir_find+0x118>
 800800a:	23ff      	movs	r3, #255	@ 0xff
 800800c:	757b      	strb	r3, [r7, #21]
 800800e:	e028      	b.n	8008062 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8008010:	7d7b      	ldrb	r3, [r7, #21]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d107      	bne.n	8008026 <dir_find+0x132>
 8008016:	6938      	ldr	r0, [r7, #16]
 8008018:	f7ff ff4c 	bl	8007eb4 <sum_sfn>
 800801c:	4603      	mov	r3, r0
 800801e:	461a      	mov	r2, r3
 8008020:	7d3b      	ldrb	r3, [r7, #20]
 8008022:	4293      	cmp	r3, r2
 8008024:	d02a      	beq.n	800807c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	330b      	adds	r3, #11
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <dir_find+0x15e>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	220b      	movs	r2, #11
 8008044:	4619      	mov	r1, r3
 8008046:	6938      	ldr	r0, [r7, #16]
 8008048:	f7fe fc0e 	bl	8006868 <mem_cmp>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d016      	beq.n	8008080 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008052:	23ff      	movs	r3, #255	@ 0xff
 8008054:	757b      	strb	r3, [r7, #21]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800805c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008060:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008062:	2100      	movs	r1, #0
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff fbc9 	bl	80077fc <dir_next>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f43f af58 	beq.w	8007f26 <dir_find+0x32>
 8008076:	e004      	b.n	8008082 <dir_find+0x18e>
		if (res != FR_OK) break;
 8008078:	bf00      	nop
 800807a:	e002      	b.n	8008082 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008080:	bf00      	nop

	return res;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08c      	sub	sp, #48	@ 0x30
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	623b      	str	r3, [r7, #32]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80080a8:	f107 030c 	add.w	r3, r7, #12
 80080ac:	220c      	movs	r2, #12
 80080ae:	6a39      	ldr	r1, [r7, #32]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fba1 	bl	80067f8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d03b      	beq.n	8008138 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	330b      	adds	r3, #11
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ce:	461a      	mov	r2, r3
 80080d0:	2300      	movs	r3, #0
 80080d2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80080d4:	2301      	movs	r3, #1
 80080d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080d8:	e013      	b.n	8008102 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80080da:	f107 010c 	add.w	r1, r7, #12
 80080de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	6a38      	ldr	r0, [r7, #32]
 80080e4:	f7ff fe58 	bl	8007d98 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff03 	bl	8007ef4 <dir_find>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80080f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	3301      	adds	r3, #1
 8008100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	2b63      	cmp	r3, #99	@ 0x63
 8008106:	d9e8      	bls.n	80080da <dir_register+0x4e>
 8008108:	e000      	b.n	800810c <dir_register+0x80>
			if (res != FR_OK) break;
 800810a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	2b64      	cmp	r3, #100	@ 0x64
 8008110:	d101      	bne.n	8008116 <dir_register+0x8a>
 8008112:	2307      	movs	r3, #7
 8008114:	e0d8      	b.n	80082c8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800811a:	2b04      	cmp	r3, #4
 800811c:	d002      	beq.n	8008124 <dir_register+0x98>
 800811e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008122:	e0d1      	b.n	80082c8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	330b      	adds	r3, #11
 8008128:	7dfa      	ldrb	r2, [r7, #23]
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008132:	461a      	mov	r2, r3
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d014      	beq.n	800816c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8008142:	2300      	movs	r3, #0
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008146:	e002      	b.n	800814e <dir_register+0xc2>
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	3301      	adds	r3, #1
 800814c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f5      	bne.n	8008148 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800815c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815e:	3319      	adds	r3, #25
 8008160:	4a5b      	ldr	r2, [pc, #364]	@ (80082d0 <dir_register+0x244>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	089b      	lsrs	r3, r3, #2
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
 800816a:	e001      	b.n	8008170 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800816c:	2301      	movs	r3, #1
 800816e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fc8c 	bl	8007a90 <dir_alloc>
 8008178:	4603      	mov	r3, r0
 800817a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800817e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008182:	2b00      	cmp	r3, #0
 8008184:	d15b      	bne.n	800823e <dir_register+0x1b2>
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	3b01      	subs	r3, #1
 800818a:	627b      	str	r3, [r7, #36]	@ 0x24
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d055      	beq.n	800823e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008198:	88db      	ldrh	r3, [r3, #6]
 800819a:	461a      	mov	r2, r3
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff fa5c 	bl	8007660 <dir_sdi>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80081ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d143      	bne.n	800823e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fe78 	bl	8007eb4 <sum_sfn>
 80081c4:	4603      	mov	r3, r0
 80081c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f7fe fd94 	bl	8006d08 <move_window>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80081e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d126      	bne.n	800823c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f4:	6a18      	ldr	r0, [r3, #32]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081fc:	6959      	ldr	r1, [r3, #20]
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	b2da      	uxtb	r2, r3
 8008202:	7efb      	ldrb	r3, [r7, #27]
 8008204:	f7ff fd54 	bl	8007cb0 <fit_lfn>
				dp->fs->wflag = 1;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008214:	2201      	movs	r2, #1
 8008216:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8008218:	2100      	movs	r1, #0
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff faee 	bl	80077fc <dir_next>
 8008220:	4603      	mov	r3, r0
 8008222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008226:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800822a:	2b00      	cmp	r3, #0
 800822c:	d107      	bne.n	800823e <dir_register+0x1b2>
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	3b01      	subs	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	@ 0x24
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1c6      	bne.n	80081c8 <dir_register+0x13c>
 800823a:	e000      	b.n	800823e <dir_register+0x1b2>
				if (res != FR_OK) break;
 800823c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800823e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008242:	2b00      	cmp	r3, #0
 8008244:	d13e      	bne.n	80082c4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f7fe fd55 	bl	8006d08 <move_window>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008264:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008268:	2b00      	cmp	r3, #0
 800826a:	d12b      	bne.n	80082c4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	2220      	movs	r2, #32
 8008276:	2100      	movs	r1, #0
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fadb 	bl	8006834 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008284:	6958      	ldr	r0, [r3, #20]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	220b      	movs	r2, #11
 8008290:	4619      	mov	r1, r3
 8008292:	f7fe fab1 	bl	80067f8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	330b      	adds	r3, #11
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	330c      	adds	r3, #12
 80082ac:	f002 0218 	and.w	r2, r2, #24
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082c0:	2201      	movs	r2, #1
 80082c2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80082c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3730      	adds	r7, #48	@ 0x30
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	4ec4ec4f 	.word	0x4ec4ec4f

080082d4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	@ 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	e002      	b.n	80082ec <create_name+0x18>
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	3301      	adds	r3, #1
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80082f2:	d0f8      	beq.n	80082e6 <create_name+0x12>
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80082fa:	d0f4      	beq.n	80082e6 <create_name+0x12>
	lfn = dp->lfn;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	61ba      	str	r2, [r7, #24]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4413      	add	r3, r2
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800831c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800831e:	2b1f      	cmp	r3, #31
 8008320:	d92f      	bls.n	8008382 <create_name+0xae>
 8008322:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008324:	2b2f      	cmp	r3, #47	@ 0x2f
 8008326:	d02c      	beq.n	8008382 <create_name+0xae>
 8008328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800832a:	2b5c      	cmp	r3, #92	@ 0x5c
 800832c:	d029      	beq.n	8008382 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2bfe      	cmp	r3, #254	@ 0xfe
 8008332:	d901      	bls.n	8008338 <create_name+0x64>
			return FR_INVALID_NAME;
 8008334:	2306      	movs	r3, #6
 8008336:	e186      	b.n	8008646 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008338:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800833a:	b2db      	uxtb	r3, r3
 800833c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800833e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008340:	2101      	movs	r1, #1
 8008342:	4618      	mov	r0, r3
 8008344:	f002 f86c 	bl	800a420 <ff_convert>
 8008348:	4603      	mov	r3, r0
 800834a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800834c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <create_name+0x82>
 8008352:	2306      	movs	r3, #6
 8008354:	e177      	b.n	8008646 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8008356:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008358:	2b7f      	cmp	r3, #127	@ 0x7f
 800835a:	d809      	bhi.n	8008370 <create_name+0x9c>
 800835c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800835e:	4619      	mov	r1, r3
 8008360:	488e      	ldr	r0, [pc, #568]	@ (800859c <create_name+0x2c8>)
 8008362:	f7fe faa7 	bl	80068b4 <chk_chr>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <create_name+0x9c>
			return FR_INVALID_NAME;
 800836c:	2306      	movs	r3, #6
 800836e:	e16a      	b.n	8008646 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	617a      	str	r2, [r7, #20]
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800837e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008380:	e7c5      	b.n	800830e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	441a      	add	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800838c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800838e:	2b1f      	cmp	r3, #31
 8008390:	d801      	bhi.n	8008396 <create_name+0xc2>
 8008392:	2304      	movs	r3, #4
 8008394:	e000      	b.n	8008398 <create_name+0xc4>
 8008396:	2300      	movs	r3, #0
 8008398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800839c:	e011      	b.n	80083c2 <create_name+0xee>
		w = lfn[di - 1];
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80083a4:	3b01      	subs	r3, #1
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80083b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d002      	beq.n	80083bc <create_name+0xe8>
 80083b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ba:	d106      	bne.n	80083ca <create_name+0xf6>
		di--;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	3b01      	subs	r3, #1
 80083c0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1ea      	bne.n	800839e <create_name+0xca>
 80083c8:	e000      	b.n	80083cc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80083ca:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <create_name+0x102>
 80083d2:	2306      	movs	r3, #6
 80083d4:	e137      	b.n	8008646 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	2200      	movs	r2, #0
 80083e0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	220b      	movs	r2, #11
 80083ec:	2120      	movs	r1, #32
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe fa20 	bl	8006834 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80083f4:	2300      	movs	r3, #0
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	e002      	b.n	8008400 <create_name+0x12c>
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	3301      	adds	r3, #1
 80083fe:	61bb      	str	r3, [r7, #24]
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	2b20      	cmp	r3, #32
 800840c:	d0f5      	beq.n	80083fa <create_name+0x126>
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	2b2e      	cmp	r3, #46	@ 0x2e
 800841a:	d0ee      	beq.n	80083fa <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <create_name+0x162>
 8008422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008426:	f043 0303 	orr.w	r3, r3, #3
 800842a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800842e:	e002      	b.n	8008436 <create_name+0x162>
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3b01      	subs	r3, #1
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <create_name+0x17c>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008442:	3b01      	subs	r3, #1
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	2b2e      	cmp	r3, #46	@ 0x2e
 800844e:	d1ef      	bne.n	8008430 <create_name+0x15c>

	b = i = 0; ni = 8;
 8008450:	2300      	movs	r3, #0
 8008452:	623b      	str	r3, [r7, #32]
 8008454:	2300      	movs	r3, #0
 8008456:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800845a:	2308      	movs	r3, #8
 800845c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	61ba      	str	r2, [r7, #24]
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800846e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 8091 	beq.w	8008598 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008476:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008478:	2b20      	cmp	r3, #32
 800847a:	d006      	beq.n	800848a <create_name+0x1b6>
 800847c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800847e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008480:	d10a      	bne.n	8008498 <create_name+0x1c4>
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	429a      	cmp	r2, r3
 8008488:	d006      	beq.n	8008498 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800848a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800848e:	f043 0303 	orr.w	r3, r3, #3
 8008492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008496:	e07e      	b.n	8008596 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008498:	6a3a      	ldr	r2, [r7, #32]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	429a      	cmp	r2, r3
 800849e:	d203      	bcs.n	80084a8 <create_name+0x1d4>
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d123      	bne.n	80084f0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	2b0b      	cmp	r3, #11
 80084ac:	d106      	bne.n	80084bc <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80084ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084b2:	f043 0303 	orr.w	r3, r3, #3
 80084b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084ba:	e076      	b.n	80085aa <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d005      	beq.n	80084d0 <create_name+0x1fc>
 80084c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084c8:	f043 0303 	orr.w	r3, r3, #3
 80084cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d867      	bhi.n	80085a8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	2308      	movs	r3, #8
 80084de:	623b      	str	r3, [r7, #32]
 80084e0:	230b      	movs	r3, #11
 80084e2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80084e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80084ee:	e052      	b.n	8008596 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80084f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80084f4:	d914      	bls.n	8008520 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80084f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 ff90 	bl	800a420 <ff_convert>
 8008500:	4603      	mov	r3, r0
 8008502:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <create_name+0x240>
 800850a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800850c:	3b80      	subs	r3, #128	@ 0x80
 800850e:	4a24      	ldr	r2, [pc, #144]	@ (80085a0 <create_name+0x2cc>)
 8008510:	5cd3      	ldrb	r3, [r2, r3]
 8008512:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008518:	f043 0302 	orr.w	r3, r3, #2
 800851c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008520:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <create_name+0x262>
 8008526:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008528:	4619      	mov	r1, r3
 800852a:	481e      	ldr	r0, [pc, #120]	@ (80085a4 <create_name+0x2d0>)
 800852c:	f7fe f9c2 	bl	80068b4 <chk_chr>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008536:	235f      	movs	r3, #95	@ 0x5f
 8008538:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800853a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800853e:	f043 0303 	orr.w	r3, r3, #3
 8008542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008546:	e01b      	b.n	8008580 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008548:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800854a:	2b40      	cmp	r3, #64	@ 0x40
 800854c:	d909      	bls.n	8008562 <create_name+0x28e>
 800854e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008550:	2b5a      	cmp	r3, #90	@ 0x5a
 8008552:	d806      	bhi.n	8008562 <create_name+0x28e>
					b |= 2;
 8008554:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008558:	f043 0302 	orr.w	r3, r3, #2
 800855c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008560:	e00e      	b.n	8008580 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008562:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008564:	2b60      	cmp	r3, #96	@ 0x60
 8008566:	d90b      	bls.n	8008580 <create_name+0x2ac>
 8008568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800856a:	2b7a      	cmp	r3, #122	@ 0x7a
 800856c:	d808      	bhi.n	8008580 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800856e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008572:	f043 0301 	orr.w	r3, r3, #1
 8008576:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800857a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800857c:	3b20      	subs	r3, #32
 800857e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	1c59      	adds	r1, r3, #1
 800858c:	6239      	str	r1, [r7, #32]
 800858e:	4413      	add	r3, r2
 8008590:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008596:	e762      	b.n	800845e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8008598:	bf00      	nop
 800859a:	e006      	b.n	80085aa <create_name+0x2d6>
 800859c:	0800cf00 	.word	0x0800cf00
 80085a0:	0800d648 	.word	0x0800d648
 80085a4:	0800cf0c 	.word	0x0800cf0c
			if (si > di) break;			/* No extension */
 80085a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2be5      	cmp	r3, #229	@ 0xe5
 80085b6:	d105      	bne.n	80085c4 <create_name+0x2f0>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2205      	movs	r2, #5
 80085c2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d104      	bne.n	80085d4 <create_name+0x300>
 80085ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80085d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085d8:	f003 030c 	and.w	r3, r3, #12
 80085dc:	2b0c      	cmp	r3, #12
 80085de:	d005      	beq.n	80085ec <create_name+0x318>
 80085e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d105      	bne.n	80085f8 <create_name+0x324>
		cf |= NS_LFN;
 80085ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80085f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d117      	bne.n	8008634 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008608:	f003 0303 	and.w	r3, r3, #3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d105      	bne.n	800861c <create_name+0x348>
 8008610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008614:	f043 0310 	orr.w	r3, r3, #16
 8008618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800861c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008620:	f003 030c 	and.w	r3, r3, #12
 8008624:	2b04      	cmp	r3, #4
 8008626:	d105      	bne.n	8008634 <create_name+0x360>
 8008628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800862c:	f043 0308 	orr.w	r3, r3, #8
 8008630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	330b      	adds	r3, #11
 800863e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008642:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008644:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008646:	4618      	mov	r0, r3
 8008648:	3728      	adds	r7, #40	@ 0x28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop

08008650 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008660:	d003      	beq.n	800866a <follow_path+0x1a>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b5c      	cmp	r3, #92	@ 0x5c
 8008668:	d102      	bne.n	8008670 <follow_path+0x20>
		path++;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	3301      	adds	r3, #1
 800866e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008676:	461a      	mov	r2, r3
 8008678:	2300      	movs	r3, #0
 800867a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b1f      	cmp	r3, #31
 8008682:	d80c      	bhi.n	800869e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8008684:	2100      	movs	r1, #0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe ffea 	bl	8007660 <dir_sdi>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008696:	461a      	mov	r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6153      	str	r3, [r2, #20]
 800869c:	e049      	b.n	8008732 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800869e:	463b      	mov	r3, r7
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fe16 	bl	80082d4 <create_name>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d13a      	bne.n	8008728 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff fc1e 	bl	8007ef4 <dir_find>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	7adb      	ldrb	r3, [r3, #11]
 80086c6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d12b      	bne.n	800872c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d126      	bne.n	800872c <follow_path+0xdc>
 80086de:	2305      	movs	r3, #5
 80086e0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80086e2:	e023      	b.n	800872c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d120      	bne.n	8008730 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	330b      	adds	r3, #11
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	f003 0310 	and.w	r3, r3, #16
 8008702:	2b00      	cmp	r3, #0
 8008704:	d102      	bne.n	800870c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8008706:	2305      	movs	r3, #5
 8008708:	73fb      	strb	r3, [r7, #15]
 800870a:	e012      	b.n	8008732 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fa08 	bl	8007b2c <ld_clust>
 800871c:	4602      	mov	r2, r0
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008724:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008726:	e7ba      	b.n	800869e <follow_path+0x4e>
			if (res != FR_OK) break;
 8008728:	bf00      	nop
 800872a:	e002      	b.n	8008732 <follow_path+0xe2>
				break;
 800872c:	bf00      	nop
 800872e:	e000      	b.n	8008732 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008730:	bf00      	nop
		}
	}

	return res;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008744:	f04f 33ff 	mov.w	r3, #4294967295
 8008748:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d031      	beq.n	80087b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	e002      	b.n	8008760 <get_ldnumber+0x24>
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	3301      	adds	r3, #1
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b1f      	cmp	r3, #31
 8008766:	d903      	bls.n	8008770 <get_ldnumber+0x34>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b3a      	cmp	r3, #58	@ 0x3a
 800876e:	d1f4      	bne.n	800875a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b3a      	cmp	r3, #58	@ 0x3a
 8008776:	d11c      	bne.n	80087b2 <get_ldnumber+0x76>
			tp = *path;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	60fa      	str	r2, [r7, #12]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	3b30      	subs	r3, #48	@ 0x30
 8008788:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b09      	cmp	r3, #9
 800878e:	d80e      	bhi.n	80087ae <get_ldnumber+0x72>
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	429a      	cmp	r2, r3
 8008796:	d10a      	bne.n	80087ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d107      	bne.n	80087ae <get_ldnumber+0x72>
					vol = (int)i;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	3301      	adds	r3, #1
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	e002      	b.n	80087b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80087b6:	693b      	ldr	r3, [r7, #16]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
	...

080087c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087d4:	2200      	movs	r2, #0
 80087d6:	711a      	strb	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087de:	461a      	mov	r2, r3
 80087e0:	f04f 33ff 	mov.w	r3, #4294967295
 80087e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fe fa8d 	bl	8006d08 <move_window>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <check_fs+0x34>
		return 3;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e04a      	b.n	800888e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80087fe:	3301      	adds	r3, #1
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	021b      	lsls	r3, r3, #8
 8008804:	b21a      	sxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800880c:	b21b      	sxth	r3, r3
 800880e:	4313      	orrs	r3, r2
 8008810:	b21b      	sxth	r3, r3
 8008812:	4a21      	ldr	r2, [pc, #132]	@ (8008898 <check_fs+0xd4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d001      	beq.n	800881c <check_fs+0x58>
		return 2;
 8008818:	2302      	movs	r3, #2
 800881a:	e038      	b.n	800888e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3336      	adds	r3, #54	@ 0x36
 8008820:	3303      	adds	r3, #3
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	061a      	lsls	r2, r3, #24
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3336      	adds	r3, #54	@ 0x36
 800882a:	3302      	adds	r3, #2
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3336      	adds	r3, #54	@ 0x36
 8008836:	3301      	adds	r3, #1
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	021b      	lsls	r3, r3, #8
 800883c:	4313      	orrs	r3, r2
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8008844:	4313      	orrs	r3, r2
 8008846:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800884a:	4a14      	ldr	r2, [pc, #80]	@ (800889c <check_fs+0xd8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d101      	bne.n	8008854 <check_fs+0x90>
		return 0;
 8008850:	2300      	movs	r3, #0
 8008852:	e01c      	b.n	800888e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3352      	adds	r3, #82	@ 0x52
 8008858:	3303      	adds	r3, #3
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	061a      	lsls	r2, r3, #24
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3352      	adds	r3, #82	@ 0x52
 8008862:	3302      	adds	r3, #2
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	041b      	lsls	r3, r3, #16
 8008868:	431a      	orrs	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3352      	adds	r3, #82	@ 0x52
 800886e:	3301      	adds	r3, #1
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	4313      	orrs	r3, r2
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800887c:	4313      	orrs	r3, r2
 800887e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008882:	4a06      	ldr	r2, [pc, #24]	@ (800889c <check_fs+0xd8>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d101      	bne.n	800888c <check_fs+0xc8>
		return 0;
 8008888:	2300      	movs	r3, #0
 800888a:	e000      	b.n	800888e <check_fs+0xca>

	return 1;
 800888c:	2301      	movs	r3, #1
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	ffffaa55 	.word	0xffffaa55
 800889c:	00544146 	.word	0x00544146

080088a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b096      	sub	sp, #88	@ 0x58
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088b4:	68b8      	ldr	r0, [r7, #8]
 80088b6:	f7ff ff41 	bl	800873c <get_ldnumber>
 80088ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	da01      	bge.n	80088c6 <find_volume+0x26>
 80088c2:	230b      	movs	r3, #11
 80088c4:	e311      	b.n	8008eea <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80088c6:	4a98      	ldr	r2, [pc, #608]	@ (8008b28 <find_volume+0x288>)
 80088c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80088d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <find_volume+0x3a>
 80088d6:	230c      	movs	r3, #12
 80088d8:	e307      	b.n	8008eea <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088de:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80088e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01c      	beq.n	8008926 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fd fee1 	bl	80066bc <disk_status>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008900:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10c      	bne.n	8008926 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <find_volume+0x82>
 8008912:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008916:	f003 0304 	and.w	r3, r3, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800891e:	230a      	movs	r3, #10
 8008920:	e2e3      	b.n	8008eea <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8008922:	2300      	movs	r3, #0
 8008924:	e2e1      	b.n	8008eea <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008932:	b2da      	uxtb	r2, r3
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800893a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	4618      	mov	r0, r3
 8008946:	f7fd fed3 	bl	80066f0 <disk_initialize>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800895c:	2303      	movs	r3, #3
 800895e:	e2c4      	b.n	8008eea <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d007      	beq.n	8008976 <find_volume+0xd6>
 8008966:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008972:	230a      	movs	r3, #10
 8008974:	e2b9      	b.n	8008eea <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800897c:	7858      	ldrb	r0, [r3, #1]
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008984:	330a      	adds	r3, #10
 8008986:	461a      	mov	r2, r3
 8008988:	2102      	movs	r1, #2
 800898a:	f7fd ff17 	bl	80067bc <disk_ioctl>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10d      	bne.n	80089b0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899a:	895b      	ldrh	r3, [r3, #10]
 800899c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a0:	d306      	bcc.n	80089b0 <find_volume+0x110>
 80089a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089a8:	895b      	ldrh	r3, [r3, #10]
 80089aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ae:	d901      	bls.n	80089b4 <find_volume+0x114>
 80089b0:	2301      	movs	r3, #1
 80089b2:	e29a      	b.n	8008eea <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80089b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089bc:	f7ff ff02 	bl	80087c4 <check_fs>
 80089c0:	4603      	mov	r3, r0
 80089c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80089c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d153      	bne.n	8008a76 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80089ce:	2300      	movs	r3, #0
 80089d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80089d2:	e028      	b.n	8008a26 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80089d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80089de:	4413      	add	r3, r2
 80089e0:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	3304      	adds	r3, #4
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d012      	beq.n	8008a12 <find_volume+0x172>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	330b      	adds	r3, #11
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	061a      	lsls	r2, r3, #24
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	330a      	adds	r3, #10
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	431a      	orrs	r2, r3
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	3309      	adds	r3, #9
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	4313      	orrs	r3, r2
 8008a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a0a:	3208      	adds	r2, #8
 8008a0c:	7812      	ldrb	r2, [r2, #0]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	e000      	b.n	8008a14 <find_volume+0x174>
 8008a12:	2200      	movs	r2, #0
 8008a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	3358      	adds	r3, #88	@ 0x58
 8008a1a:	443b      	add	r3, r7
 8008a1c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a22:	3301      	adds	r3, #1
 8008a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d9d3      	bls.n	80089d4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <find_volume+0x19c>
 8008a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	3358      	adds	r3, #88	@ 0x58
 8008a42:	443b      	add	r3, r7
 8008a44:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a48:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d005      	beq.n	8008a5c <find_volume+0x1bc>
 8008a50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a54:	f7ff feb6 	bl	80087c4 <check_fs>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	e000      	b.n	8008a5e <find_volume+0x1be>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008a62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d005      	beq.n	8008a76 <find_volume+0x1d6>
 8008a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d9e2      	bls.n	8008a3c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d101      	bne.n	8008a82 <find_volume+0x1e2>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e233      	b.n	8008eea <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008a82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <find_volume+0x1ee>
 8008a8a:	230d      	movs	r3, #13
 8008a8c:	e22d      	b.n	8008eea <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	7b1b      	ldrb	r3, [r3, #12]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	b21a      	sxth	r2, r3
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	7adb      	ldrb	r3, [r3, #11]
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b21a      	sxth	r2, r3
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aa6:	895b      	ldrh	r3, [r3, #10]
 8008aa8:	b21b      	sxth	r3, r3
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d001      	beq.n	8008ab2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8008aae:	230d      	movs	r3, #13
 8008ab0:	e21b      	b.n	8008eea <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	7ddb      	ldrb	r3, [r3, #23]
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	b21a      	sxth	r2, r3
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	7d9b      	ldrb	r3, [r3, #22]
 8008abe:	b21b      	sxth	r3, r3
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	b21b      	sxth	r3, r3
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d112      	bne.n	8008af4 <find_volume+0x254>
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8008ad4:	061a      	lsls	r2, r3, #24
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aec:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8008af0:	4313      	orrs	r3, r2
 8008af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8008af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008afa:	461a      	mov	r2, r3
 8008afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008afe:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	7c1a      	ldrb	r2, [r3, #16]
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b0a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b12:	78db      	ldrb	r3, [r3, #3]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d009      	beq.n	8008b2c <find_volume+0x28c>
 8008b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b1e:	78db      	ldrb	r3, [r3, #3]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d003      	beq.n	8008b2c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8008b24:	230d      	movs	r3, #13
 8008b26:	e1e0      	b.n	8008eea <find_volume+0x64a>
 8008b28:	20002540 	.word	0x20002540
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b32:	78db      	ldrb	r3, [r3, #3]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b38:	fb02 f303 	mul.w	r3, r2, r3
 8008b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	7b5a      	ldrb	r2, [r3, #13]
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b48:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b50:	789b      	ldrb	r3, [r3, #2]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00c      	beq.n	8008b70 <find_volume+0x2d0>
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b5c:	789b      	ldrb	r3, [r3, #2]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b66:	789b      	ldrb	r3, [r3, #2]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8008b70:	230d      	movs	r3, #13
 8008b72:	e1ba      	b.n	8008eea <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b76:	7c9b      	ldrb	r3, [r3, #18]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	b21a      	sxth	r2, r3
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7e:	7c5b      	ldrb	r3, [r3, #17]
 8008b80:	b21b      	sxth	r3, r3
 8008b82:	4313      	orrs	r3, r2
 8008b84:	b21b      	sxth	r3, r3
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b8e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b96:	891b      	ldrh	r3, [r3, #8]
 8008b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008b9e:	8952      	ldrh	r2, [r2, #10]
 8008ba0:	0952      	lsrs	r2, r2, #5
 8008ba2:	b292      	uxth	r2, r2
 8008ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ba8:	fb01 f202 	mul.w	r2, r1, r2
 8008bac:	1a9b      	subs	r3, r3, r2
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8008bb4:	230d      	movs	r3, #13
 8008bb6:	e198      	b.n	8008eea <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	7d1b      	ldrb	r3, [r3, #20]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	b21a      	sxth	r2, r3
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	7cdb      	ldrb	r3, [r3, #19]
 8008bc4:	b21b      	sxth	r3, r3
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b21b      	sxth	r3, r3
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d112      	bne.n	8008bfa <find_volume+0x35a>
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008bda:	061a      	lsls	r2, r3, #24
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bde:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008be2:	041b      	lsls	r3, r3, #16
 8008be4:	431a      	orrs	r2, r3
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bf2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	7bdb      	ldrb	r3, [r3, #15]
 8008bfe:	021b      	lsls	r3, r3, #8
 8008c00:	b21a      	sxth	r2, r3
 8008c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c04:	7b9b      	ldrb	r3, [r3, #14]
 8008c06:	b21b      	sxth	r3, r3
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	b21b      	sxth	r3, r3
 8008c0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008c0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <find_volume+0x378>
 8008c14:	230d      	movs	r3, #13
 8008c16:	e168      	b.n	8008eea <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008c18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c1c:	4413      	add	r3, r2
 8008c1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c24:	8911      	ldrh	r1, [r2, #8]
 8008c26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c2c:	8952      	ldrh	r2, [r2, #10]
 8008c2e:	0952      	lsrs	r2, r2, #5
 8008c30:	b292      	uxth	r2, r2
 8008c32:	fbb1 f2f2 	udiv	r2, r1, r2
 8008c36:	b292      	uxth	r2, r2
 8008c38:	4413      	add	r3, r2
 8008c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d201      	bcs.n	8008c48 <find_volume+0x3a8>
 8008c44:	230d      	movs	r3, #13
 8008c46:	e150      	b.n	8008eea <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c54:	7892      	ldrb	r2, [r2, #2]
 8008c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c5a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <find_volume+0x3c6>
 8008c62:	230d      	movs	r3, #13
 8008c64:	e141      	b.n	8008eea <find_volume+0x64a>
	fmt = FS_FAT12;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d902      	bls.n	8008c7c <find_volume+0x3dc>
 8008c76:	2302      	movs	r3, #2
 8008c78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d902      	bls.n	8008c8c <find_volume+0x3ec>
 8008c86:	2303      	movs	r3, #3
 8008c88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	3302      	adds	r3, #2
 8008c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c96:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008ca4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca8:	4413      	add	r3, r2
 8008caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008cb0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8008cb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb6:	4413      	add	r3, r2
 8008cb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008cbe:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8008cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d124      	bne.n	8008d12 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cce:	891b      	ldrh	r3, [r3, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <find_volume+0x438>
 8008cd4:	230d      	movs	r3, #13
 8008cd6:	e108      	b.n	8008eea <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008cde:	061a      	lsls	r2, r3, #24
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cf6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008d02:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d10:	e02b      	b.n	8008d6a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d18:	891b      	ldrh	r3, [r3, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <find_volume+0x482>
 8008d1e:	230d      	movs	r3, #13
 8008d20:	e0e3      	b.n	8008eea <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d28:	6a1a      	ldr	r2, [r3, #32]
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d2c:	4413      	add	r3, r2
 8008d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008d34:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d105      	bne.n	8008d4a <find_volume+0x4aa>
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	e00e      	b.n	8008d68 <find_volume+0x4c8>
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d50:	695a      	ldr	r2, [r3, #20]
 8008d52:	4613      	mov	r3, r2
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	4413      	add	r3, r2
 8008d58:	085a      	lsrs	r2, r3, #1
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008d68:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d70:	699a      	ldr	r2, [r3, #24]
 8008d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d78:	895b      	ldrh	r3, [r3, #10]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d7e:	440b      	add	r3, r1
 8008d80:	3b01      	subs	r3, #1
 8008d82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d84:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8008d88:	8949      	ldrh	r1, [r1, #10]
 8008d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d201      	bcs.n	8008d96 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8008d92:	230d      	movs	r3, #13
 8008d94:	e0a9      	b.n	8008eea <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008da2:	6113      	str	r3, [r2, #16]
 8008da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008db2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dba:	2280      	movs	r2, #128	@ 0x80
 8008dbc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008dbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d17a      	bne.n	8008ebc <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	b21a      	sxth	r2, r3
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008dd6:	b21b      	sxth	r3, r3
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	b21b      	sxth	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d16d      	bne.n	8008ebc <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008de2:	3301      	adds	r3, #1
 8008de4:	4619      	mov	r1, r3
 8008de6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008de8:	f7fd ff8e 	bl	8006d08 <move_window>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d164      	bne.n	8008ebc <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8008df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008df8:	2200      	movs	r2, #0
 8008dfa:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8008e02:	021b      	lsls	r3, r3, #8
 8008e04:	b21a      	sxth	r2, r3
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8008e0c:	b21b      	sxth	r3, r3
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	b21b      	sxth	r3, r3
 8008e12:	4a38      	ldr	r2, [pc, #224]	@ (8008ef4 <find_volume+0x654>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d151      	bne.n	8008ebc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1a:	78db      	ldrb	r3, [r3, #3]
 8008e1c:	061a      	lsls	r2, r3, #24
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	789b      	ldrb	r3, [r3, #2]
 8008e22:	041b      	lsls	r3, r3, #16
 8008e24:	431a      	orrs	r2, r3
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	785b      	ldrb	r3, [r3, #1]
 8008e2a:	021b      	lsls	r3, r3, #8
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e30:	7812      	ldrb	r2, [r2, #0]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	4a30      	ldr	r2, [pc, #192]	@ (8008ef8 <find_volume+0x658>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d140      	bne.n	8008ebc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8008e40:	061a      	lsls	r2, r3, #24
 8008e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e44:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8008e48:	041b      	lsls	r3, r3, #16
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8008e52:	021b      	lsls	r3, r3, #8
 8008e54:	4313      	orrs	r3, r2
 8008e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e58:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	4a27      	ldr	r2, [pc, #156]	@ (8008efc <find_volume+0x65c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d12b      	bne.n	8008ebc <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e66:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8008e6a:	061a      	lsls	r2, r3, #24
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8008e72:	041b      	lsls	r3, r3, #16
 8008e74:	431a      	orrs	r2, r3
 8008e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e78:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e82:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8008e86:	4313      	orrs	r3, r2
 8008e88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008e8e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e92:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8008e96:	061a      	lsls	r2, r3, #24
 8008e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9a:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea4:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eae:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008eba:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ec8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008eca:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <find_volume+0x660>)
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f00 <find_volume+0x660>)
 8008ed4:	801a      	strh	r2, [r3, #0]
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f00 <find_volume+0x660>)
 8008ed8:	881a      	ldrh	r2, [r3, #0]
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ee0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ee2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ee4:	f7fd fe94 	bl	8006c10 <clear_lock>
#endif

	return FR_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3758      	adds	r7, #88	@ 0x58
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	ffffaa55 	.word	0xffffaa55
 8008ef8:	41615252 	.word	0x41615252
 8008efc:	61417272 	.word	0x61417272
 8008f00:	20002544 	.word	0x20002544

08008f04 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d02a      	beq.n	8008f6c <validate+0x68>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d024      	beq.n	8008f6c <validate+0x68>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01b      	beq.n	8008f6c <validate+0x68>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f40:	88da      	ldrh	r2, [r3, #6]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f48:	889b      	ldrh	r3, [r3, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d10e      	bne.n	8008f6c <validate+0x68>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fd fbad 	bl	80066bc <disk_status>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008f6c:	2309      	movs	r3, #9
 8008f6e:	e000      	b.n	8008f72 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008f8e:	f107 0310 	add.w	r3, r7, #16
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff fbd2 	bl	800873c <get_ldnumber>
 8008f98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	da01      	bge.n	8008fa4 <f_mount+0x28>
 8008fa0:	230b      	movs	r3, #11
 8008fa2:	e02f      	b.n	8009004 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008fa4:	4a19      	ldr	r2, [pc, #100]	@ (800900c <f_mount+0x90>)
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d007      	beq.n	8008fc4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8008fb4:	69b8      	ldr	r0, [r7, #24]
 8008fb6:	f7fd fe2b 	bl	8006c10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d004      	beq.n	8008fd4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	490d      	ldr	r1, [pc, #52]	@ (800900c <f_mount+0x90>)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <f_mount+0x6e>
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d001      	beq.n	8008fee <f_mount+0x72>
 8008fea:	2300      	movs	r3, #0
 8008fec:	e00a      	b.n	8009004 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008fee:	f107 0108 	add.w	r1, r7, #8
 8008ff2:	f107 030c 	add.w	r3, r7, #12
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fc51 	bl	80088a0 <find_volume>
 8008ffe:	4603      	mov	r3, r0
 8009000:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009002:	7dfb      	ldrb	r3, [r7, #23]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20002540 	.word	0x20002540

08009010 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800901e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8009022:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009026:	f843 1c50 	str.w	r1, [r3, #-80]
 800902a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800902e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009032:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009036:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <f_open+0x32>
 800903e:	2309      	movs	r3, #9
 8009040:	e2f3      	b.n	800962a <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8009042:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009046:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800904a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800904e:	461a      	mov	r2, r3
 8009050:	2300      	movs	r3, #0
 8009052:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009054:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009058:	461a      	mov	r2, r3
 800905a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800905e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009062:	f003 031f 	and.w	r3, r3, #31
 8009066:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800906a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800906e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	f107 0118 	add.w	r1, r7, #24
 800907c:	3910      	subs	r1, #16
 800907e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009082:	3b18      	subs	r3, #24
 8009084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff fc09 	bl	80088a0 <find_volume>
 800908e:	4603      	mov	r3, r0
 8009090:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009094:	f102 0217 	add.w	r2, r2, #23
 8009098:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800909a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800909e:	f103 0317 	add.w	r3, r3, #23
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f040 82bb 	bne.w	8009620 <f_open+0x610>
		INIT_BUF(dj);
 80090aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80090ae:	461a      	mov	r2, r3
 80090b0:	f107 0318 	add.w	r3, r7, #24
 80090b4:	3b04      	subs	r3, #4
 80090b6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 80090ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80090be:	461a      	mov	r2, r3
 80090c0:	4bd3      	ldr	r3, [pc, #844]	@ (8009410 <f_open+0x400>)
 80090c2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80090c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80090ca:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80090ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80090d2:	3b18      	subs	r3, #24
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff faba 	bl	8008650 <follow_path>
 80090dc:	4603      	mov	r3, r0
 80090de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80090e2:	f102 0217 	add.w	r2, r2, #23
 80090e6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80090e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80090ec:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80090f0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80090f4:	f102 0210 	add.w	r2, r2, #16
 80090f8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80090fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80090fe:	f103 0317 	add.w	r3, r3, #23
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d124      	bne.n	8009152 <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8009108:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800910c:	f103 0310 	add.w	r3, r3, #16
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <f_open+0x114>
				res = FR_INVALID_NAME;
 8009116:	2306      	movs	r3, #6
 8009118:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800911c:	f102 0217 	add.w	r2, r2, #23
 8009120:	7013      	strb	r3, [r2, #0]
 8009122:	e016      	b.n	8009152 <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009124:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009128:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800912c:	2b01      	cmp	r3, #1
 800912e:	bf8c      	ite	hi
 8009130:	2301      	movhi	r3, #1
 8009132:	2300      	movls	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	461a      	mov	r2, r3
 8009138:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800913c:	3b18      	subs	r3, #24
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f7fd fbd1 	bl	80068e8 <chk_lock>
 8009146:	4603      	mov	r3, r0
 8009148:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800914c:	f102 0217 	add.w	r2, r2, #23
 8009150:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009152:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009156:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800915a:	f003 031c 	and.w	r3, r3, #28
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 813c 	beq.w	80093dc <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8009164:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009168:	f103 0317 	add.w	r3, r3, #23
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d02e      	beq.n	80091d0 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009172:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009176:	f103 0317 	add.w	r3, r3, #23
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b04      	cmp	r3, #4
 800917e:	d112      	bne.n	80091a6 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009180:	f7fd fc22 	bl	80069c8 <enq_lock>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <f_open+0x18a>
 800918a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800918e:	3b18      	subs	r3, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe ff7b 	bl	800808c <dir_register>
 8009196:	4603      	mov	r3, r0
 8009198:	e000      	b.n	800919c <f_open+0x18c>
 800919a:	2312      	movs	r3, #18
 800919c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80091a0:	f102 0217 	add.w	r2, r2, #23
 80091a4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80091aa:	461a      	mov	r2, r3
 80091ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80091b0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80091b4:	f043 0308 	orr.w	r3, r3, #8
 80091b8:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80091bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80091c0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80091c4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80091c8:	f102 0210 	add.w	r2, r2, #16
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e01f      	b.n	8009210 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80091d4:	f103 0310 	add.w	r3, r3, #16
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	330b      	adds	r3, #11
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 0311 	and.w	r3, r3, #17
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d006      	beq.n	80091f4 <f_open+0x1e4>
					res = FR_DENIED;
 80091e6:	2307      	movs	r3, #7
 80091e8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80091ec:	f102 0217 	add.w	r2, r2, #23
 80091f0:	7013      	strb	r3, [r2, #0]
 80091f2:	e00d      	b.n	8009210 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80091f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80091f8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <f_open+0x200>
						res = FR_EXIST;
 8009204:	2308      	movs	r3, #8
 8009206:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800920a:	f102 0217 	add.w	r2, r2, #23
 800920e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009210:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009214:	f103 0317 	add.w	r3, r3, #23
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	f040 8113 	bne.w	8009446 <f_open+0x436>
 8009220:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009224:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 810a 	beq.w	8009446 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8009232:	f7fd f9e3 	bl	80065fc <get_fattime>
 8009236:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800923a:	f103 030c 	add.w	r3, r3, #12
 800923e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009240:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009244:	f103 0310 	add.w	r3, r3, #16
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	330e      	adds	r3, #14
 800924c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009250:	f102 020c 	add.w	r2, r2, #12
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800925e:	f103 030c 	add.w	r3, r3, #12
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	0a1b      	lsrs	r3, r3, #8
 8009268:	b29a      	uxth	r2, r3
 800926a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800926e:	f103 0310 	add.w	r3, r3, #16
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	330f      	adds	r3, #15
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800927e:	f103 030c 	add.w	r3, r3, #12
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	0c1a      	lsrs	r2, r3, #16
 8009286:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800928a:	f103 0310 	add.w	r3, r3, #16
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3310      	adds	r3, #16
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800929a:	f103 030c 	add.w	r3, r3, #12
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	0e1a      	lsrs	r2, r3, #24
 80092a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092a6:	f103 0310 	add.w	r3, r3, #16
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3311      	adds	r3, #17
 80092ae:	b2d2      	uxtb	r2, r2
 80092b0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80092b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092b6:	f103 0310 	add.w	r3, r3, #16
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	330b      	adds	r3, #11
 80092be:	2200      	movs	r2, #0
 80092c0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80092c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092c6:	f103 0310 	add.w	r3, r3, #16
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	331c      	adds	r3, #28
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
 80092d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092d6:	f103 0310 	add.w	r3, r3, #16
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	331d      	adds	r3, #29
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092e6:	f103 0310 	add.w	r3, r3, #16
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	331e      	adds	r3, #30
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092f6:	f103 0310 	add.w	r3, r3, #16
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	331f      	adds	r3, #31
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009302:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009306:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800930a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800930e:	f102 0210 	add.w	r2, r2, #16
 8009312:	6811      	ldr	r1, [r2, #0]
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fc09 	bl	8007b2c <ld_clust>
 800931a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800931e:	f103 0308 	add.w	r3, r3, #8
 8009322:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8009324:	2100      	movs	r1, #0
 8009326:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800932a:	f103 0310 	add.w	r3, r3, #16
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	f7fe fc2a 	bl	8007b88 <st_clust>
				dj.fs->wflag = 1;
 8009334:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009338:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800933c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009340:	2201      	movs	r2, #1
 8009342:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8009344:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009348:	f103 0308 	add.w	r3, r3, #8
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d079      	beq.n	8009446 <f_open+0x436>
					dw = dj.fs->winsect;
 8009352:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009356:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800935a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800935e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009360:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009364:	f102 020c 	add.w	r2, r2, #12
 8009368:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800936a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800936e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009372:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009376:	f102 0208 	add.w	r2, r2, #8
 800937a:	6811      	ldr	r1, [r2, #0]
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe f826 	bl	80073ce <remove_chain>
 8009382:	4603      	mov	r3, r0
 8009384:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009388:	f102 0217 	add.w	r2, r2, #23
 800938c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800938e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009392:	f103 0317 	add.w	r3, r3, #23
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d154      	bne.n	8009446 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800939c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80093a0:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 80093a4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80093a8:	f103 0308 	add.w	r3, r3, #8
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80093b4:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80093b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80093ba:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80093be:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80093c2:	f102 020c 	add.w	r2, r2, #12
 80093c6:	6811      	ldr	r1, [r2, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fd fc9d 	bl	8006d08 <move_window>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80093d4:	f102 0217 	add.w	r2, r2, #23
 80093d8:	7013      	strb	r3, [r2, #0]
 80093da:	e034      	b.n	8009446 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80093dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80093e0:	f103 0317 	add.w	r3, r3, #23
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d12d      	bne.n	8009446 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80093ea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80093ee:	f103 0310 	add.w	r3, r3, #16
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	330b      	adds	r3, #11
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	f003 0310 	and.w	r3, r3, #16
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d009      	beq.n	8009414 <f_open+0x404>
					res = FR_NO_FILE;
 8009400:	2304      	movs	r3, #4
 8009402:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009406:	f102 0217 	add.w	r2, r2, #23
 800940a:	7013      	strb	r3, [r2, #0]
 800940c:	e01b      	b.n	8009446 <f_open+0x436>
 800940e:	bf00      	nop
 8009410:	20002554 	.word	0x20002554
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009414:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009418:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d010      	beq.n	8009446 <f_open+0x436>
 8009424:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009428:	f103 0310 	add.w	r3, r3, #16
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330b      	adds	r3, #11
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d005      	beq.n	8009446 <f_open+0x436>
						res = FR_DENIED;
 800943a:	2307      	movs	r3, #7
 800943c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009440:	f102 0217 	add.w	r2, r2, #23
 8009444:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8009446:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800944a:	f103 0317 	add.w	r3, r3, #23
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d155      	bne.n	8009500 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009454:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009458:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800945c:	f003 0308 	and.w	r3, r3, #8
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <f_open+0x46a>
				mode |= FA__WRITTEN;
 8009464:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009468:	461a      	mov	r2, r3
 800946a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800946e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009472:	f043 0320 	orr.w	r3, r3, #32
 8009476:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800947a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800947e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800948c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009494:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8009496:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800949a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800949e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094a2:	461a      	mov	r2, r3
 80094a4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80094a8:	f103 0310 	add.w	r3, r3, #16
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80094b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80094b4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	bf8c      	ite	hi
 80094bc:	2301      	movhi	r3, #1
 80094be:	2300      	movls	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	461a      	mov	r2, r3
 80094c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80094c8:	3b18      	subs	r3, #24
 80094ca:	4611      	mov	r1, r2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fd fa9f 	bl	8006a10 <inc_lock>
 80094d2:	4602      	mov	r2, r0
 80094d4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80094d8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80094dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094e0:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80094e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80094e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80094ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d105      	bne.n	8009500 <f_open+0x4f0>
 80094f4:	2302      	movs	r3, #2
 80094f6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80094fa:	f102 0217 	add.w	r2, r2, #23
 80094fe:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009500:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009504:	f103 0317 	add.w	r3, r3, #23
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f040 8088 	bne.w	8009620 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 8009510:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009514:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800951c:	461a      	mov	r2, r3
 800951e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009522:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009526:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8009528:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800952c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009534:	2200      	movs	r2, #0
 8009536:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009538:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800953c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009540:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009544:	f102 0210 	add.w	r2, r2, #16
 8009548:	6811      	ldr	r1, [r2, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe faee 	bl	8007b2c <ld_clust>
 8009550:	4602      	mov	r2, r0
 8009552:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009556:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800955a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800955e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009560:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009564:	f103 0310 	add.w	r3, r3, #16
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	331f      	adds	r3, #31
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	061a      	lsls	r2, r3, #24
 8009570:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009574:	f103 0310 	add.w	r3, r3, #16
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	331e      	adds	r3, #30
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	041b      	lsls	r3, r3, #16
 8009580:	431a      	orrs	r2, r3
 8009582:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009586:	f103 0310 	add.w	r3, r3, #16
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	331d      	adds	r3, #29
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	021b      	lsls	r3, r3, #8
 8009592:	4313      	orrs	r3, r2
 8009594:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009598:	f102 0210 	add.w	r2, r2, #16
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	321c      	adds	r2, #28
 80095a0:	7812      	ldrb	r2, [r2, #0]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80095a8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80095ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80095b0:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80095b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095b6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095be:	461a      	mov	r2, r3
 80095c0:	2300      	movs	r3, #0
 80095c2:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80095c4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095c8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095d0:	461a      	mov	r2, r3
 80095d2:	2300      	movs	r3, #0
 80095d4:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80095d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095da:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095e2:	461a      	mov	r2, r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80095e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095ec:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80095f0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80095f4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80095f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80095fc:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80095fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009602:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009610:	88da      	ldrh	r2, [r3, #6]
 8009612:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009616:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800961a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800961e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8009620:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009624:	f103 0317 	add.w	r3, r3, #23
 8009628:	781b      	ldrb	r3, [r3, #0]
}
 800962a:	4618      	mov	r0, r3
 800962c:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop

08009638 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	@ 0x28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff fc57 	bl	8008f04 <validate>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800965a:	7dfb      	ldrb	r3, [r7, #23]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <f_write+0x2c>
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	e21e      	b.n	8009aa2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800966a:	79db      	ldrb	r3, [r3, #7]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d004      	beq.n	800967a <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009676:	79db      	ldrb	r3, [r3, #7]
 8009678:	e213      	b.n	8009aa2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009680:	799b      	ldrb	r3, [r3, #6]
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800968a:	2307      	movs	r3, #7
 800968c:	e209      	b.n	8009aa2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	441a      	add	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	f080 81d9 	bcs.w	8009a5a <f_write+0x422>
 80096a8:	2300      	movs	r3, #0
 80096aa:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80096ac:	e1d5      	b.n	8009a5a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096bc:	6812      	ldr	r2, [r2, #0]
 80096be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096c2:	8952      	ldrh	r2, [r2, #10]
 80096c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80096c8:	fb01 f202 	mul.w	r2, r1, r2
 80096cc:	1a9b      	subs	r3, r3, r2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f040 8169 	bne.w	80099a6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096e8:	8952      	ldrh	r2, [r2, #10]
 80096ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096fc:	789b      	ldrb	r3, [r3, #2]
 80096fe:	3b01      	subs	r3, #1
 8009700:	b2db      	uxtb	r3, r3
 8009702:	4013      	ands	r3, r2
 8009704:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009706:	7dbb      	ldrb	r3, [r7, #22]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d15f      	bne.n	80097cc <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d111      	bne.n	800973c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	d126      	bne.n	8009776 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f7fd feac 	bl	8007490 <create_chain>
 8009738:	6278      	str	r0, [r7, #36]	@ 0x24
 800973a:	e01c      	b.n	8009776 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	4619      	mov	r1, r3
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7fd ff44 	bl	80075e0 <clmt_clust>
 8009758:	6278      	str	r0, [r7, #36]	@ 0x24
 800975a:	e00c      	b.n	8009776 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	4619      	mov	r1, r3
 800976e:	4610      	mov	r0, r2
 8009770:	f7fd fe8e 	bl	8007490 <create_chain>
 8009774:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 8173 	beq.w	8009a64 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	2b01      	cmp	r3, #1
 8009782:	d106      	bne.n	8009792 <f_write+0x15a>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800978a:	2202      	movs	r2, #2
 800978c:	71da      	strb	r2, [r3, #7]
 800978e:	2302      	movs	r3, #2
 8009790:	e187      	b.n	8009aa2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d106      	bne.n	80097a8 <f_write+0x170>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097a0:	2201      	movs	r2, #1
 80097a2:	71da      	strb	r2, [r3, #7]
 80097a4:	2301      	movs	r3, #1
 80097a6:	e17c      	b.n	8009aa2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097ae:	461a      	mov	r2, r3
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d105      	bne.n	80097cc <f_write+0x194>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097c6:	461a      	mov	r2, r3
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097d2:	799b      	ldrb	r3, [r3, #6]
 80097d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d023      	beq.n	8009824 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097e8:	7858      	ldrb	r0, [r3, #1]
 80097ea:	68f9      	ldr	r1, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097f2:	699a      	ldr	r2, [r3, #24]
 80097f4:	2301      	movs	r3, #1
 80097f6:	f7fc ffc1 	bl	800677c <disk_write>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d006      	beq.n	800980e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009806:	2201      	movs	r2, #1
 8009808:	71da      	strb	r2, [r3, #7]
 800980a:	2301      	movs	r3, #1
 800980c:	e149      	b.n	8009aa2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009814:	799b      	ldrb	r3, [r3, #6]
 8009816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800981a:	b2da      	uxtb	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009822:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f7fd fb57 	bl	8006eea <clust2sect>
 800983c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <f_write+0x21a>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800984a:	2202      	movs	r2, #2
 800984c:	71da      	strb	r2, [r3, #7]
 800984e:	2302      	movs	r3, #2
 8009850:	e127      	b.n	8009aa2 <f_write+0x46a>
			sect += csect;
 8009852:	7dbb      	ldrb	r3, [r7, #22]
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009866:	895b      	ldrh	r3, [r3, #10]
 8009868:	461a      	mov	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009870:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d069      	beq.n	800994c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009878:	7dba      	ldrb	r2, [r7, #22]
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	4413      	add	r3, r2
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009884:	6812      	ldr	r2, [r2, #0]
 8009886:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800988a:	7892      	ldrb	r2, [r2, #2]
 800988c:	4293      	cmp	r3, r2
 800988e:	d90a      	bls.n	80098a6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800989c:	789b      	ldrb	r3, [r3, #2]
 800989e:	461a      	mov	r2, r3
 80098a0:	7dbb      	ldrb	r3, [r7, #22]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098b2:	7858      	ldrb	r0, [r3, #1]
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	69b9      	ldr	r1, [r7, #24]
 80098ba:	f7fc ff5f 	bl	800677c <disk_write>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d006      	beq.n	80098d2 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098ca:	2201      	movs	r2, #1
 80098cc:	71da      	strb	r2, [r3, #7]
 80098ce:	2301      	movs	r3, #1
 80098d0:	e0e7      	b.n	8009aa2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098d8:	699a      	ldr	r2, [r3, #24]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	69fa      	ldr	r2, [r7, #28]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d926      	bls.n	8009932 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098ec:	699a      	ldr	r2, [r3, #24]
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80098fe:	8952      	ldrh	r2, [r2, #10]
 8009900:	fb02 f303 	mul.w	r3, r2, r3
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	18d1      	adds	r1, r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009914:	895b      	ldrh	r3, [r3, #10]
 8009916:	461a      	mov	r2, r3
 8009918:	f7fc ff6e 	bl	80067f8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009922:	799b      	ldrb	r3, [r3, #6]
 8009924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009928:	b2da      	uxtb	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009930:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800993e:	895b      	ldrh	r3, [r3, #10]
 8009940:	461a      	mov	r2, r3
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	fb02 f303 	mul.w	r3, r2, r3
 8009948:	623b      	str	r3, [r7, #32]
				continue;
 800994a:	e06e      	b.n	8009a2a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	429a      	cmp	r2, r3
 8009958:	d01f      	beq.n	800999a <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	429a      	cmp	r2, r3
 800996c:	d215      	bcs.n	800999a <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800997a:	7858      	ldrb	r0, [r3, #1]
 800997c:	68f9      	ldr	r1, [r7, #12]
 800997e:	2301      	movs	r3, #1
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	f7fc fedb 	bl	800673c <disk_read>
 8009986:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009988:	2b00      	cmp	r3, #0
 800998a:	d006      	beq.n	800999a <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009992:	2201      	movs	r2, #1
 8009994:	71da      	strb	r2, [r3, #7]
 8009996:	2301      	movs	r3, #1
 8009998:	e083      	b.n	8009aa2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099a0:	461a      	mov	r2, r3
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099b2:	895b      	ldrh	r3, [r3, #10]
 80099b4:	4618      	mov	r0, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099c4:	6812      	ldr	r2, [r2, #0]
 80099c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099ca:	8952      	ldrh	r2, [r2, #10]
 80099cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80099d0:	fb01 f202 	mul.w	r2, r1, r2
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	1ac3      	subs	r3, r0, r3
 80099d8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80099da:	6a3a      	ldr	r2, [r7, #32]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d901      	bls.n	80099e6 <f_write+0x3ae>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099f4:	6812      	ldr	r2, [r2, #0]
 80099f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099fa:	8952      	ldrh	r2, [r2, #10]
 80099fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a00:	fb01 f202 	mul.w	r2, r1, r2
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4413      	add	r3, r2
 8009a0a:	6a3a      	ldr	r2, [r7, #32]
 8009a0c:	69b9      	ldr	r1, [r7, #24]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fc fef2 	bl	80067f8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a1a:	799b      	ldrb	r3, [r3, #6]
 8009a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a28:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	4413      	add	r3, r2
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a44:	6093      	str	r3, [r2, #8]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	441a      	add	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f47f ae26 	bne.w	80096ae <f_write+0x76>
 8009a62:	e000      	b.n	8009a66 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a64:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a6c:	689a      	ldr	r2, [r3, #8]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d907      	bls.n	8009a8a <f_write+0x452>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a88:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a90:	799b      	ldrb	r3, [r3, #6]
 8009a92:	f043 0320 	orr.w	r3, r3, #32
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a9e:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3728      	adds	r7, #40	@ 0x28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b086      	sub	sp, #24
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff fa26 	bl	8008f04 <validate>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f040 80bc 	bne.w	8009c3c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aca:	799b      	ldrb	r3, [r3, #6]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 80b3 	beq.w	8009c3c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009adc:	799b      	ldrb	r3, [r3, #6]
 8009ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d01e      	beq.n	8009b24 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009af2:	7858      	ldrb	r0, [r3, #1]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009afc:	699a      	ldr	r2, [r3, #24]
 8009afe:	2301      	movs	r3, #1
 8009b00:	f7fc fe3c 	bl	800677c <disk_write>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e097      	b.n	8009c3e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b14:	799b      	ldrb	r3, [r3, #6]
 8009b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b22:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f7fd f8e6 	bl	8006d08 <move_window>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d17a      	bne.n	8009c3c <f_sync+0x192>
				dir = fp->dir_ptr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	330b      	adds	r3, #11
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	330b      	adds	r3, #11
 8009b5a:	f042 0220 	orr.w	r2, r2, #32
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	331c      	adds	r3, #28
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	331d      	adds	r3, #29
 8009b84:	b2d2      	uxtb	r2, r2
 8009b86:	701a      	strb	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	0c1a      	lsrs	r2, r3, #16
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	331e      	adds	r3, #30
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	701a      	strb	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	0e1a      	lsrs	r2, r3, #24
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	331f      	adds	r3, #31
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6938      	ldr	r0, [r7, #16]
 8009bb8:	f7fd ffe6 	bl	8007b88 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009bbc:	f7fc fd1e 	bl	80065fc <get_fattime>
 8009bc0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	3316      	adds	r3, #22
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	b2d2      	uxtb	r2, r2
 8009bca:	701a      	strb	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	0a1b      	lsrs	r3, r3, #8
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3317      	adds	r3, #23
 8009bd8:	b2d2      	uxtb	r2, r2
 8009bda:	701a      	strb	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	0c1a      	lsrs	r2, r3, #16
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	3318      	adds	r3, #24
 8009be4:	b2d2      	uxtb	r2, r2
 8009be6:	701a      	strb	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	0e1a      	lsrs	r2, r3, #24
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3319      	adds	r3, #25
 8009bf0:	b2d2      	uxtb	r2, r2
 8009bf2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	3312      	adds	r3, #18
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	3313      	adds	r3, #19
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c0a:	799b      	ldrb	r3, [r3, #6]
 8009c0c:	f023 0320 	bic.w	r3, r3, #32
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c18:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c26:	2201      	movs	r2, #1
 8009c28:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fd f89a 	bl	8006d6c <sync_fs>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff ff2b 	bl	8009aaa <f_sync>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d119      	bne.n	8009c92 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff f950 	bl	8008f04 <validate>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d111      	bne.n	8009c92 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fc ff86 	bl	8006b88 <dec_lock>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b090      	sub	sp, #64	@ 0x40
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff f92c 	bl	8008f04 <validate>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009cb2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <f_lseek+0x24>
 8009cba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cbe:	e2da      	b.n	800a276 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cc6:	79db      	ldrb	r3, [r3, #7]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d004      	beq.n	8009cd6 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cd2:	79db      	ldrb	r3, [r3, #7]
 8009cd4:	e2cf      	b.n	800a276 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 8124 	beq.w	8009f2c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cea:	d16c      	bne.n	8009dc6 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	1d1a      	adds	r2, r3, #4
 8009cfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	2302      	movs	r3, #2
 8009d02:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d046      	beq.n	8009da2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d16:	613b      	str	r3, [r7, #16]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1e:	3302      	adds	r3, #2
 8009d20:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d28:	3301      	adds	r3, #1
 8009d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fd f8fb 	bl	8006f32 <get_fat>
 8009d3c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d806      	bhi.n	8009d52 <f_lseek+0xb6>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	71da      	strb	r2, [r3, #7]
 8009d4e:	2302      	movs	r3, #2
 8009d50:	e291      	b.n	800a276 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d106      	bne.n	8009d68 <f_lseek+0xcc>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d60:	2201      	movs	r2, #1
 8009d62:	71da      	strb	r2, [r3, #7]
 8009d64:	2301      	movs	r3, #1
 8009d66:	e286      	b.n	800a276 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d0d7      	beq.n	8009d22 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009d72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d809      	bhi.n	8009d8e <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	1d1a      	adds	r2, r3, #4
 8009d7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	1d1a      	adds	r2, r3, #4
 8009d88:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d3b8      	bcc.n	8009d14 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d803      	bhi.n	8009dbe <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	2200      	movs	r2, #0
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	e259      	b.n	800a272 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009dbe:	2311      	movs	r3, #17
 8009dc0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009dc4:	e255      	b.n	800a272 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d904      	bls.n	8009dde <f_lseek+0x142>
				ofs = fp->fsize;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009de4:	461a      	mov	r2, r3
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8240 	beq.w	800a272 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7fd fbf1 	bl	80075e0 <clmt_clust>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e06:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	f7fd f865 	bl	8006eea <clust2sect>
 8009e20:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d106      	bne.n	8009e36 <f_lseek+0x19a>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e2e:	2202      	movs	r2, #2
 8009e30:	71da      	strb	r2, [r3, #7]
 8009e32:	2302      	movs	r3, #2
 8009e34:	e21f      	b.n	800a276 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e40:	6812      	ldr	r2, [r2, #0]
 8009e42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e46:	8952      	ldrh	r2, [r2, #10]
 8009e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e52:	6812      	ldr	r2, [r2, #0]
 8009e54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e58:	7892      	ldrb	r2, [r2, #2]
 8009e5a:	3a01      	subs	r2, #1
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	4413      	add	r3, r2
 8009e62:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e78:	8952      	ldrh	r2, [r2, #10]
 8009e7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e7e:	fb01 f202 	mul.w	r2, r1, r2
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 81f4 	beq.w	800a272 <f_lseek+0x5d6>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	f000 81ec 	beq.w	800a272 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ea0:	799b      	ldrb	r3, [r3, #6]
 8009ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d023      	beq.n	8009ef2 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eb6:	7858      	ldrb	r0, [r3, #1]
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	f7fc fc5a 	bl	800677c <disk_write>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d006      	beq.n	8009edc <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	71da      	strb	r2, [r3, #7]
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e1cc      	b.n	800a276 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ee2:	799b      	ldrb	r3, [r3, #6]
 8009ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ef0:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009efe:	7858      	ldrb	r0, [r3, #1]
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	2301      	movs	r3, #1
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	f7fc fc19 	bl	800673c <disk_read>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f16:	2201      	movs	r2, #1
 8009f18:	71da      	strb	r2, [r3, #7]
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e1ab      	b.n	800a276 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f24:	461a      	mov	r2, r3
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	6193      	str	r3, [r2, #24]
 8009f2a:	e1a2      	b.n	800a272 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d90c      	bls.n	8009f54 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f40:	799b      	ldrb	r3, [r3, #6]
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d104      	bne.n	8009f54 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6c:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 8100 	beq.w	800a176 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f82:	789b      	ldrb	r3, [r3, #2]
 8009f84:	461a      	mov	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f92:	895b      	ldrh	r3, [r3, #10]
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
 8009f98:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d021      	beq.n	8009fe4 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	1e5a      	subs	r2, r3, #1
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	1e59      	subs	r1, r3, #1
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d315      	bcc.n	8009fe4 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	1e5a      	subs	r2, r3, #1
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	425b      	negs	r3, r3
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009fc8:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009fe2:	e031      	b.n	800a048 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d123      	bne.n	800a03c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fd fa46 	bl	8007490 <create_chain>
 800a004:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d106      	bne.n	800a01a <f_lseek+0x37e>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a012:	2202      	movs	r2, #2
 800a014:	71da      	strb	r2, [r3, #7]
 800a016:	2302      	movs	r3, #2
 800a018:	e12d      	b.n	800a276 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a020:	d106      	bne.n	800a030 <f_lseek+0x394>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a028:	2201      	movs	r2, #1
 800a02a:	71da      	strb	r2, [r3, #7]
 800a02c:	2301      	movs	r3, #1
 800a02e:	e122      	b.n	800a276 <f_lseek+0x5da>
					fp->sclust = clst;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a036:	461a      	mov	r2, r3
 800a038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a042:	461a      	mov	r2, r3
 800a044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a046:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 8093 	beq.w	800a176 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800a050:	e052      	b.n	800a0f8 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a058:	799b      	ldrb	r3, [r3, #6]
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00e      	beq.n	800a080 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fd fa0f 	bl	8007490 <create_chain>
 800a072:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800a074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <f_lseek+0x3f6>
							ofs = bcs; break;
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	603b      	str	r3, [r7, #0]
 800a07e:	e03f      	b.n	800a100 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fc ff51 	bl	8006f32 <get_fat>
 800a090:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a098:	d106      	bne.n	800a0a8 <f_lseek+0x40c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	71da      	strb	r2, [r3, #7]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e0e6      	b.n	800a276 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d909      	bls.n	800a0c2 <f_lseek+0x426>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d306      	bcc.n	800a0d0 <f_lseek+0x434>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	71da      	strb	r2, [r3, #7]
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e0d2      	b.n	800a276 <f_lseek+0x5da>
					fp->clust = clst;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0da:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a0ee:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d8a8      	bhi.n	800a052 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	4413      	add	r3, r2
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a112:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a120:	895b      	ldrh	r3, [r3, #10]
 800a122:	461a      	mov	r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	fbb3 f1f2 	udiv	r1, r3, r2
 800a12a:	fb01 f202 	mul.w	r2, r1, r2
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d020      	beq.n	800a176 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fc fed3 	bl	8006eea <clust2sect>
 800a144:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d106      	bne.n	800a15a <f_lseek+0x4be>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a152:	2202      	movs	r2, #2
 800a154:	71da      	strb	r2, [r3, #7]
 800a156:	2302      	movs	r3, #2
 800a158:	e08d      	b.n	800a276 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a166:	895b      	ldrh	r3, [r3, #10]
 800a168:	461a      	mov	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a170:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a172:	4413      	add	r3, r2
 800a174:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a18a:	8952      	ldrh	r2, [r2, #10]
 800a18c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a190:	fb01 f202 	mul.w	r2, r1, r2
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	2b00      	cmp	r3, #0
 800a198:	d04e      	beq.n	800a238 <f_lseek+0x59c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d047      	beq.n	800a238 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ae:	799b      	ldrb	r3, [r3, #6]
 800a1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d023      	beq.n	800a200 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1c4:	7858      	ldrb	r0, [r3, #1]
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	f7fc fad3 	bl	800677c <disk_write>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d006      	beq.n	800a1ea <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	71da      	strb	r2, [r3, #7]
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e045      	b.n	800a276 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1f0:	799b      	ldrb	r3, [r3, #6]
 800a1f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1fe:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a20c:	7858      	ldrb	r0, [r3, #1]
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	2301      	movs	r3, #1
 800a212:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a214:	f7fc fa92 	bl	800673c <disk_read>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a224:	2201      	movs	r2, #1
 800a226:	71da      	strb	r2, [r3, #7]
 800a228:	2301      	movs	r3, #1
 800a22a:	e024      	b.n	800a276 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a232:	461a      	mov	r2, r3
 800a234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a236:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d912      	bls.n	800a272 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a25a:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a262:	799b      	ldrb	r3, [r3, #6]
 800a264:	f043 0320 	orr.w	r3, r3, #32
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a270:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800a272:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a276:	4618      	mov	r0, r3
 800a278:	3740      	adds	r7, #64	@ 0x40
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	2b0a      	cmp	r3, #10
 800a28e:	d103      	bne.n	800a298 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a290:	210d      	movs	r1, #13
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff fff3 	bl	800a27e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	db25      	blt.n	800a2f0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	60fa      	str	r2, [r7, #12]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	78fa      	ldrb	r2, [r7, #3]
 800a2b0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b3c      	cmp	r3, #60	@ 0x3c
 800a2b6:	dd12      	ble.n	800a2de <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f103 010c 	add.w	r1, r3, #12
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	f7ff f9b6 	bl	8009638 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d101      	bne.n	800a2d8 <putc_bfd+0x5a>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	e001      	b.n	800a2dc <putc_bfd+0x5e>
 800a2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2dc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	609a      	str	r2, [r3, #8]
 800a2ee:	e000      	b.n	800a2f2 <putc_bfd+0x74>
	if (i < 0) return;
 800a2f0:	bf00      	nop
}
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a2f8:	b590      	push	{r4, r7, lr}
 800a2fa:	b097      	sub	sp, #92	@ 0x5c
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	613b      	str	r3, [r7, #16]
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800a30e:	e009      	b.n	800a324 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	607a      	str	r2, [r7, #4]
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	f107 030c 	add.w	r3, r7, #12
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff ffad 	bl	800a27e <putc_bfd>
	while (*str)			/* Put the string */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1f1      	bne.n	800a310 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	db15      	blt.n	800a35e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	461c      	mov	r4, r3
 800a338:	f107 0208 	add.w	r2, r7, #8
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	f103 010c 	add.w	r1, r3, #12
 800a344:	4613      	mov	r3, r2
 800a346:	4622      	mov	r2, r4
 800a348:	f7ff f976 	bl	8009638 <f_write>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d105      	bne.n	800a35e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	4293      	cmp	r3, r2
 800a358:	d101      	bne.n	800a35e <f_puts+0x66>
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	e001      	b.n	800a362 <f_puts+0x6a>
	return EOF;
 800a35e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a362:	4618      	mov	r0, r3
 800a364:	375c      	adds	r7, #92	@ 0x5c
 800a366:	46bd      	mov	sp, r7
 800a368:	bd90      	pop	{r4, r7, pc}
	...

0800a36c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a37a:	2301      	movs	r3, #1
 800a37c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a382:	4b1e      	ldr	r3, [pc, #120]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a384:	7a5b      	ldrb	r3, [r3, #9]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d831      	bhi.n	800a3f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a38c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a38e:	7a5b      	ldrb	r3, [r3, #9]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	461a      	mov	r2, r3
 800a394:	4b19      	ldr	r3, [pc, #100]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a396:	2100      	movs	r1, #0
 800a398:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a39a:	4b18      	ldr	r3, [pc, #96]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a39c:	7a5b      	ldrb	r3, [r3, #9]
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	4a16      	ldr	r2, [pc, #88]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a3aa:	4b14      	ldr	r3, [pc, #80]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a3ac:	7a5b      	ldrb	r3, [r3, #9]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4b12      	ldr	r3, [pc, #72]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a3b4:	4413      	add	r3, r2
 800a3b6:	79fa      	ldrb	r2, [r7, #7]
 800a3b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3ba:	4b10      	ldr	r3, [pc, #64]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a3bc:	7a5b      	ldrb	r3, [r3, #9]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	b2d1      	uxtb	r1, r2
 800a3c4:	4a0d      	ldr	r2, [pc, #52]	@ (800a3fc <FATFS_LinkDriverEx+0x90>)
 800a3c6:	7251      	strb	r1, [r2, #9]
 800a3c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3ca:	7dbb      	ldrb	r3, [r7, #22]
 800a3cc:	3330      	adds	r3, #48	@ 0x30
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	223a      	movs	r2, #58	@ 0x3a
 800a3da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	3302      	adds	r3, #2
 800a3e0:	222f      	movs	r2, #47	@ 0x2f
 800a3e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	3303      	adds	r3, #3
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bc80      	pop	{r7}
 800a3fa:	4770      	bx	lr
 800a3fc:	20002754 	.word	0x20002754

0800a400 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a40a:	2200      	movs	r2, #0
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff ffac 	bl	800a36c <FATFS_LinkDriverEx>
 800a414:	4603      	mov	r3, r0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a430:	d802      	bhi.n	800a438 <ff_convert+0x18>
		c = chr;
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	81fb      	strh	r3, [r7, #14]
 800a436:	e025      	b.n	800a484 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	2bff      	cmp	r3, #255	@ 0xff
 800a442:	d805      	bhi.n	800a450 <ff_convert+0x30>
 800a444:	88fb      	ldrh	r3, [r7, #6]
 800a446:	3b80      	subs	r3, #128	@ 0x80
 800a448:	4a11      	ldr	r2, [pc, #68]	@ (800a490 <ff_convert+0x70>)
 800a44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a44e:	e000      	b.n	800a452 <ff_convert+0x32>
 800a450:	2300      	movs	r3, #0
 800a452:	81fb      	strh	r3, [r7, #14]
 800a454:	e016      	b.n	800a484 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a456:	2300      	movs	r3, #0
 800a458:	81fb      	strh	r3, [r7, #14]
 800a45a:	e009      	b.n	800a470 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a45c:	89fb      	ldrh	r3, [r7, #14]
 800a45e:	4a0c      	ldr	r2, [pc, #48]	@ (800a490 <ff_convert+0x70>)
 800a460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a464:	88fa      	ldrh	r2, [r7, #6]
 800a466:	429a      	cmp	r2, r3
 800a468:	d006      	beq.n	800a478 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a46a:	89fb      	ldrh	r3, [r7, #14]
 800a46c:	3301      	adds	r3, #1
 800a46e:	81fb      	strh	r3, [r7, #14]
 800a470:	89fb      	ldrh	r3, [r7, #14]
 800a472:	2b7f      	cmp	r3, #127	@ 0x7f
 800a474:	d9f2      	bls.n	800a45c <ff_convert+0x3c>
 800a476:	e000      	b.n	800a47a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a478:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a47a:	89fb      	ldrh	r3, [r7, #14]
 800a47c:	3380      	adds	r3, #128	@ 0x80
 800a47e:	b29b      	uxth	r3, r3
 800a480:	b2db      	uxtb	r3, r3
 800a482:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a484:	89fb      	ldrh	r3, [r7, #14]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr
 800a490:	0800d6d8 	.word	0x0800d6d8

0800a494 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e002      	b.n	800a4aa <ff_wtoupper+0x16>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e8 <ff_wtoupper+0x54>)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d006      	beq.n	800a4c4 <ff_wtoupper+0x30>
 800a4b6:	4a0c      	ldr	r2, [pc, #48]	@ (800a4e8 <ff_wtoupper+0x54>)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4be:	88fa      	ldrh	r2, [r7, #6]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d1ef      	bne.n	800a4a4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800a4c4:	4a08      	ldr	r2, [pc, #32]	@ (800a4e8 <ff_wtoupper+0x54>)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d004      	beq.n	800a4da <ff_wtoupper+0x46>
 800a4d0:	4a06      	ldr	r2, [pc, #24]	@ (800a4ec <ff_wtoupper+0x58>)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4d8:	e000      	b.n	800a4dc <ff_wtoupper+0x48>
 800a4da:	88fb      	ldrh	r3, [r7, #6]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bc80      	pop	{r7}
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	0800d7d8 	.word	0x0800d7d8
 800a4ec:	0800d9b8 	.word	0x0800d9b8

0800a4f0 <malloc>:
 800a4f0:	4b02      	ldr	r3, [pc, #8]	@ (800a4fc <malloc+0xc>)
 800a4f2:	4601      	mov	r1, r0
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	f000 b825 	b.w	800a544 <_malloc_r>
 800a4fa:	bf00      	nop
 800a4fc:	2000019c 	.word	0x2000019c

0800a500 <sbrk_aligned>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4e0f      	ldr	r6, [pc, #60]	@ (800a540 <sbrk_aligned+0x40>)
 800a504:	460c      	mov	r4, r1
 800a506:	6831      	ldr	r1, [r6, #0]
 800a508:	4605      	mov	r5, r0
 800a50a:	b911      	cbnz	r1, 800a512 <sbrk_aligned+0x12>
 800a50c:	f000 ff4c 	bl	800b3a8 <_sbrk_r>
 800a510:	6030      	str	r0, [r6, #0]
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f000 ff47 	bl	800b3a8 <_sbrk_r>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d103      	bne.n	800a526 <sbrk_aligned+0x26>
 800a51e:	f04f 34ff 	mov.w	r4, #4294967295
 800a522:	4620      	mov	r0, r4
 800a524:	bd70      	pop	{r4, r5, r6, pc}
 800a526:	1cc4      	adds	r4, r0, #3
 800a528:	f024 0403 	bic.w	r4, r4, #3
 800a52c:	42a0      	cmp	r0, r4
 800a52e:	d0f8      	beq.n	800a522 <sbrk_aligned+0x22>
 800a530:	1a21      	subs	r1, r4, r0
 800a532:	4628      	mov	r0, r5
 800a534:	f000 ff38 	bl	800b3a8 <_sbrk_r>
 800a538:	3001      	adds	r0, #1
 800a53a:	d1f2      	bne.n	800a522 <sbrk_aligned+0x22>
 800a53c:	e7ef      	b.n	800a51e <sbrk_aligned+0x1e>
 800a53e:	bf00      	nop
 800a540:	20002760 	.word	0x20002760

0800a544 <_malloc_r>:
 800a544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a548:	1ccd      	adds	r5, r1, #3
 800a54a:	f025 0503 	bic.w	r5, r5, #3
 800a54e:	3508      	adds	r5, #8
 800a550:	2d0c      	cmp	r5, #12
 800a552:	bf38      	it	cc
 800a554:	250c      	movcc	r5, #12
 800a556:	2d00      	cmp	r5, #0
 800a558:	4606      	mov	r6, r0
 800a55a:	db01      	blt.n	800a560 <_malloc_r+0x1c>
 800a55c:	42a9      	cmp	r1, r5
 800a55e:	d904      	bls.n	800a56a <_malloc_r+0x26>
 800a560:	230c      	movs	r3, #12
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a640 <_malloc_r+0xfc>
 800a56e:	f000 f869 	bl	800a644 <__malloc_lock>
 800a572:	f8d8 3000 	ldr.w	r3, [r8]
 800a576:	461c      	mov	r4, r3
 800a578:	bb44      	cbnz	r4, 800a5cc <_malloc_r+0x88>
 800a57a:	4629      	mov	r1, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7ff ffbf 	bl	800a500 <sbrk_aligned>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	4604      	mov	r4, r0
 800a586:	d158      	bne.n	800a63a <_malloc_r+0xf6>
 800a588:	f8d8 4000 	ldr.w	r4, [r8]
 800a58c:	4627      	mov	r7, r4
 800a58e:	2f00      	cmp	r7, #0
 800a590:	d143      	bne.n	800a61a <_malloc_r+0xd6>
 800a592:	2c00      	cmp	r4, #0
 800a594:	d04b      	beq.n	800a62e <_malloc_r+0xea>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	4639      	mov	r1, r7
 800a59a:	4630      	mov	r0, r6
 800a59c:	eb04 0903 	add.w	r9, r4, r3
 800a5a0:	f000 ff02 	bl	800b3a8 <_sbrk_r>
 800a5a4:	4581      	cmp	r9, r0
 800a5a6:	d142      	bne.n	800a62e <_malloc_r+0xea>
 800a5a8:	6821      	ldr	r1, [r4, #0]
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	1a6d      	subs	r5, r5, r1
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	f7ff ffa6 	bl	800a500 <sbrk_aligned>
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	d03a      	beq.n	800a62e <_malloc_r+0xea>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	442b      	add	r3, r5
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	bb62      	cbnz	r2, 800a620 <_malloc_r+0xdc>
 800a5c6:	f8c8 7000 	str.w	r7, [r8]
 800a5ca:	e00f      	b.n	800a5ec <_malloc_r+0xa8>
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	1b52      	subs	r2, r2, r5
 800a5d0:	d420      	bmi.n	800a614 <_malloc_r+0xd0>
 800a5d2:	2a0b      	cmp	r2, #11
 800a5d4:	d917      	bls.n	800a606 <_malloc_r+0xc2>
 800a5d6:	1961      	adds	r1, r4, r5
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	6025      	str	r5, [r4, #0]
 800a5dc:	bf18      	it	ne
 800a5de:	6059      	strne	r1, [r3, #4]
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	bf08      	it	eq
 800a5e4:	f8c8 1000 	streq.w	r1, [r8]
 800a5e8:	5162      	str	r2, [r4, r5]
 800a5ea:	604b      	str	r3, [r1, #4]
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f000 f82f 	bl	800a650 <__malloc_unlock>
 800a5f2:	f104 000b 	add.w	r0, r4, #11
 800a5f6:	1d23      	adds	r3, r4, #4
 800a5f8:	f020 0007 	bic.w	r0, r0, #7
 800a5fc:	1ac2      	subs	r2, r0, r3
 800a5fe:	bf1c      	itt	ne
 800a600:	1a1b      	subne	r3, r3, r0
 800a602:	50a3      	strne	r3, [r4, r2]
 800a604:	e7af      	b.n	800a566 <_malloc_r+0x22>
 800a606:	6862      	ldr	r2, [r4, #4]
 800a608:	42a3      	cmp	r3, r4
 800a60a:	bf0c      	ite	eq
 800a60c:	f8c8 2000 	streq.w	r2, [r8]
 800a610:	605a      	strne	r2, [r3, #4]
 800a612:	e7eb      	b.n	800a5ec <_malloc_r+0xa8>
 800a614:	4623      	mov	r3, r4
 800a616:	6864      	ldr	r4, [r4, #4]
 800a618:	e7ae      	b.n	800a578 <_malloc_r+0x34>
 800a61a:	463c      	mov	r4, r7
 800a61c:	687f      	ldr	r7, [r7, #4]
 800a61e:	e7b6      	b.n	800a58e <_malloc_r+0x4a>
 800a620:	461a      	mov	r2, r3
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	42a3      	cmp	r3, r4
 800a626:	d1fb      	bne.n	800a620 <_malloc_r+0xdc>
 800a628:	2300      	movs	r3, #0
 800a62a:	6053      	str	r3, [r2, #4]
 800a62c:	e7de      	b.n	800a5ec <_malloc_r+0xa8>
 800a62e:	230c      	movs	r3, #12
 800a630:	4630      	mov	r0, r6
 800a632:	6033      	str	r3, [r6, #0]
 800a634:	f000 f80c 	bl	800a650 <__malloc_unlock>
 800a638:	e794      	b.n	800a564 <_malloc_r+0x20>
 800a63a:	6005      	str	r5, [r0, #0]
 800a63c:	e7d6      	b.n	800a5ec <_malloc_r+0xa8>
 800a63e:	bf00      	nop
 800a640:	20002764 	.word	0x20002764

0800a644 <__malloc_lock>:
 800a644:	4801      	ldr	r0, [pc, #4]	@ (800a64c <__malloc_lock+0x8>)
 800a646:	f000 befc 	b.w	800b442 <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	200028a8 	.word	0x200028a8

0800a650 <__malloc_unlock>:
 800a650:	4801      	ldr	r0, [pc, #4]	@ (800a658 <__malloc_unlock+0x8>)
 800a652:	f000 bef7 	b.w	800b444 <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	200028a8 	.word	0x200028a8

0800a65c <__cvt>:
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a662:	461d      	mov	r5, r3
 800a664:	bfbb      	ittet	lt
 800a666:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a66a:	461d      	movlt	r5, r3
 800a66c:	2300      	movge	r3, #0
 800a66e:	232d      	movlt	r3, #45	@ 0x2d
 800a670:	b088      	sub	sp, #32
 800a672:	4614      	mov	r4, r2
 800a674:	bfb8      	it	lt
 800a676:	4614      	movlt	r4, r2
 800a678:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a67a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a67c:	7013      	strb	r3, [r2, #0]
 800a67e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a680:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a684:	f023 0820 	bic.w	r8, r3, #32
 800a688:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a68c:	d005      	beq.n	800a69a <__cvt+0x3e>
 800a68e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a692:	d100      	bne.n	800a696 <__cvt+0x3a>
 800a694:	3601      	adds	r6, #1
 800a696:	2302      	movs	r3, #2
 800a698:	e000      	b.n	800a69c <__cvt+0x40>
 800a69a:	2303      	movs	r3, #3
 800a69c:	aa07      	add	r2, sp, #28
 800a69e:	9204      	str	r2, [sp, #16]
 800a6a0:	aa06      	add	r2, sp, #24
 800a6a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a6a6:	e9cd 3600 	strd	r3, r6, [sp]
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	f000 ff8f 	bl	800b5d0 <_dtoa_r>
 800a6b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	d119      	bne.n	800a6ee <__cvt+0x92>
 800a6ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6bc:	07db      	lsls	r3, r3, #31
 800a6be:	d50e      	bpl.n	800a6de <__cvt+0x82>
 800a6c0:	eb00 0906 	add.w	r9, r0, r6
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	f7f6 f96c 	bl	80009a8 <__aeabi_dcmpeq>
 800a6d0:	b108      	cbz	r0, 800a6d6 <__cvt+0x7a>
 800a6d2:	f8cd 901c 	str.w	r9, [sp, #28]
 800a6d6:	2230      	movs	r2, #48	@ 0x30
 800a6d8:	9b07      	ldr	r3, [sp, #28]
 800a6da:	454b      	cmp	r3, r9
 800a6dc:	d31e      	bcc.n	800a71c <__cvt+0xc0>
 800a6de:	4638      	mov	r0, r7
 800a6e0:	9b07      	ldr	r3, [sp, #28]
 800a6e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a6e4:	1bdb      	subs	r3, r3, r7
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	b008      	add	sp, #32
 800a6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6f2:	eb00 0906 	add.w	r9, r0, r6
 800a6f6:	d1e5      	bne.n	800a6c4 <__cvt+0x68>
 800a6f8:	7803      	ldrb	r3, [r0, #0]
 800a6fa:	2b30      	cmp	r3, #48	@ 0x30
 800a6fc:	d10a      	bne.n	800a714 <__cvt+0xb8>
 800a6fe:	2200      	movs	r2, #0
 800a700:	2300      	movs	r3, #0
 800a702:	4620      	mov	r0, r4
 800a704:	4629      	mov	r1, r5
 800a706:	f7f6 f94f 	bl	80009a8 <__aeabi_dcmpeq>
 800a70a:	b918      	cbnz	r0, 800a714 <__cvt+0xb8>
 800a70c:	f1c6 0601 	rsb	r6, r6, #1
 800a710:	f8ca 6000 	str.w	r6, [sl]
 800a714:	f8da 3000 	ldr.w	r3, [sl]
 800a718:	4499      	add	r9, r3
 800a71a:	e7d3      	b.n	800a6c4 <__cvt+0x68>
 800a71c:	1c59      	adds	r1, r3, #1
 800a71e:	9107      	str	r1, [sp, #28]
 800a720:	701a      	strb	r2, [r3, #0]
 800a722:	e7d9      	b.n	800a6d8 <__cvt+0x7c>

0800a724 <__exponent>:
 800a724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a726:	2900      	cmp	r1, #0
 800a728:	bfb6      	itet	lt
 800a72a:	232d      	movlt	r3, #45	@ 0x2d
 800a72c:	232b      	movge	r3, #43	@ 0x2b
 800a72e:	4249      	neglt	r1, r1
 800a730:	2909      	cmp	r1, #9
 800a732:	7002      	strb	r2, [r0, #0]
 800a734:	7043      	strb	r3, [r0, #1]
 800a736:	dd29      	ble.n	800a78c <__exponent+0x68>
 800a738:	f10d 0307 	add.w	r3, sp, #7
 800a73c:	461d      	mov	r5, r3
 800a73e:	270a      	movs	r7, #10
 800a740:	fbb1 f6f7 	udiv	r6, r1, r7
 800a744:	461a      	mov	r2, r3
 800a746:	fb07 1416 	mls	r4, r7, r6, r1
 800a74a:	3430      	adds	r4, #48	@ 0x30
 800a74c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a750:	460c      	mov	r4, r1
 800a752:	2c63      	cmp	r4, #99	@ 0x63
 800a754:	4631      	mov	r1, r6
 800a756:	f103 33ff 	add.w	r3, r3, #4294967295
 800a75a:	dcf1      	bgt.n	800a740 <__exponent+0x1c>
 800a75c:	3130      	adds	r1, #48	@ 0x30
 800a75e:	1e94      	subs	r4, r2, #2
 800a760:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a764:	4623      	mov	r3, r4
 800a766:	1c41      	adds	r1, r0, #1
 800a768:	42ab      	cmp	r3, r5
 800a76a:	d30a      	bcc.n	800a782 <__exponent+0x5e>
 800a76c:	f10d 0309 	add.w	r3, sp, #9
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	42ac      	cmp	r4, r5
 800a774:	bf88      	it	hi
 800a776:	2300      	movhi	r3, #0
 800a778:	3302      	adds	r3, #2
 800a77a:	4403      	add	r3, r0
 800a77c:	1a18      	subs	r0, r3, r0
 800a77e:	b003      	add	sp, #12
 800a780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a782:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a786:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a78a:	e7ed      	b.n	800a768 <__exponent+0x44>
 800a78c:	2330      	movs	r3, #48	@ 0x30
 800a78e:	3130      	adds	r1, #48	@ 0x30
 800a790:	7083      	strb	r3, [r0, #2]
 800a792:	70c1      	strb	r1, [r0, #3]
 800a794:	1d03      	adds	r3, r0, #4
 800a796:	e7f1      	b.n	800a77c <__exponent+0x58>

0800a798 <_printf_float>:
 800a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	b091      	sub	sp, #68	@ 0x44
 800a79e:	460c      	mov	r4, r1
 800a7a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a7a4:	4616      	mov	r6, r2
 800a7a6:	461f      	mov	r7, r3
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	f000 fdc5 	bl	800b338 <_localeconv_r>
 800a7ae:	6803      	ldr	r3, [r0, #0]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	9308      	str	r3, [sp, #32]
 800a7b4:	f7f5 fccc 	bl	8000150 <strlen>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	930e      	str	r3, [sp, #56]	@ 0x38
 800a7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a7c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a7c2:	3307      	adds	r3, #7
 800a7c4:	f023 0307 	bic.w	r3, r3, #7
 800a7c8:	f103 0208 	add.w	r2, r3, #8
 800a7cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a7d0:	f8d4 b000 	ldr.w	fp, [r4]
 800a7d4:	f8c8 2000 	str.w	r2, [r8]
 800a7d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a7ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a7f2:	4b9c      	ldr	r3, [pc, #624]	@ (800aa64 <_printf_float+0x2cc>)
 800a7f4:	f7f6 f90a 	bl	8000a0c <__aeabi_dcmpun>
 800a7f8:	bb70      	cbnz	r0, 800a858 <_printf_float+0xc0>
 800a7fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	4b98      	ldr	r3, [pc, #608]	@ (800aa64 <_printf_float+0x2cc>)
 800a804:	f7f6 f8e4 	bl	80009d0 <__aeabi_dcmple>
 800a808:	bb30      	cbnz	r0, 800a858 <_printf_float+0xc0>
 800a80a:	2200      	movs	r2, #0
 800a80c:	2300      	movs	r3, #0
 800a80e:	4640      	mov	r0, r8
 800a810:	4649      	mov	r1, r9
 800a812:	f7f6 f8d3 	bl	80009bc <__aeabi_dcmplt>
 800a816:	b110      	cbz	r0, 800a81e <_printf_float+0x86>
 800a818:	232d      	movs	r3, #45	@ 0x2d
 800a81a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a81e:	4a92      	ldr	r2, [pc, #584]	@ (800aa68 <_printf_float+0x2d0>)
 800a820:	4b92      	ldr	r3, [pc, #584]	@ (800aa6c <_printf_float+0x2d4>)
 800a822:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a826:	bf94      	ite	ls
 800a828:	4690      	movls	r8, r2
 800a82a:	4698      	movhi	r8, r3
 800a82c:	2303      	movs	r3, #3
 800a82e:	f04f 0900 	mov.w	r9, #0
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	f02b 0304 	bic.w	r3, fp, #4
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	4633      	mov	r3, r6
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	9700      	str	r7, [sp, #0]
 800a842:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a844:	f000 f9d4 	bl	800abf0 <_printf_common>
 800a848:	3001      	adds	r0, #1
 800a84a:	f040 8090 	bne.w	800a96e <_printf_float+0x1d6>
 800a84e:	f04f 30ff 	mov.w	r0, #4294967295
 800a852:	b011      	add	sp, #68	@ 0x44
 800a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a858:	4642      	mov	r2, r8
 800a85a:	464b      	mov	r3, r9
 800a85c:	4640      	mov	r0, r8
 800a85e:	4649      	mov	r1, r9
 800a860:	f7f6 f8d4 	bl	8000a0c <__aeabi_dcmpun>
 800a864:	b148      	cbz	r0, 800a87a <_printf_float+0xe2>
 800a866:	464b      	mov	r3, r9
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfb8      	it	lt
 800a86c:	232d      	movlt	r3, #45	@ 0x2d
 800a86e:	4a80      	ldr	r2, [pc, #512]	@ (800aa70 <_printf_float+0x2d8>)
 800a870:	bfb8      	it	lt
 800a872:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a876:	4b7f      	ldr	r3, [pc, #508]	@ (800aa74 <_printf_float+0x2dc>)
 800a878:	e7d3      	b.n	800a822 <_printf_float+0x8a>
 800a87a:	6863      	ldr	r3, [r4, #4]
 800a87c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	d13f      	bne.n	800a904 <_printf_float+0x16c>
 800a884:	2306      	movs	r3, #6
 800a886:	6063      	str	r3, [r4, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	9206      	str	r2, [sp, #24]
 800a892:	aa0e      	add	r2, sp, #56	@ 0x38
 800a894:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a898:	aa0d      	add	r2, sp, #52	@ 0x34
 800a89a:	9203      	str	r2, [sp, #12]
 800a89c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a8a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a8a4:	6863      	ldr	r3, [r4, #4]
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	910a      	str	r1, [sp, #40]	@ 0x28
 800a8b0:	f7ff fed4 	bl	800a65c <__cvt>
 800a8b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8b6:	4680      	mov	r8, r0
 800a8b8:	2947      	cmp	r1, #71	@ 0x47
 800a8ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a8bc:	d128      	bne.n	800a910 <_printf_float+0x178>
 800a8be:	1cc8      	adds	r0, r1, #3
 800a8c0:	db02      	blt.n	800a8c8 <_printf_float+0x130>
 800a8c2:	6863      	ldr	r3, [r4, #4]
 800a8c4:	4299      	cmp	r1, r3
 800a8c6:	dd40      	ble.n	800a94a <_printf_float+0x1b2>
 800a8c8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a8cc:	fa5f fa8a 	uxtb.w	sl, sl
 800a8d0:	4652      	mov	r2, sl
 800a8d2:	3901      	subs	r1, #1
 800a8d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a8d8:	910d      	str	r1, [sp, #52]	@ 0x34
 800a8da:	f7ff ff23 	bl	800a724 <__exponent>
 800a8de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8e0:	4681      	mov	r9, r0
 800a8e2:	1813      	adds	r3, r2, r0
 800a8e4:	2a01      	cmp	r2, #1
 800a8e6:	6123      	str	r3, [r4, #16]
 800a8e8:	dc02      	bgt.n	800a8f0 <_printf_float+0x158>
 800a8ea:	6822      	ldr	r2, [r4, #0]
 800a8ec:	07d2      	lsls	r2, r2, #31
 800a8ee:	d501      	bpl.n	800a8f4 <_printf_float+0x15c>
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	6123      	str	r3, [r4, #16]
 800a8f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d09e      	beq.n	800a83a <_printf_float+0xa2>
 800a8fc:	232d      	movs	r3, #45	@ 0x2d
 800a8fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a902:	e79a      	b.n	800a83a <_printf_float+0xa2>
 800a904:	2947      	cmp	r1, #71	@ 0x47
 800a906:	d1bf      	bne.n	800a888 <_printf_float+0xf0>
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1bd      	bne.n	800a888 <_printf_float+0xf0>
 800a90c:	2301      	movs	r3, #1
 800a90e:	e7ba      	b.n	800a886 <_printf_float+0xee>
 800a910:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a914:	d9dc      	bls.n	800a8d0 <_printf_float+0x138>
 800a916:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a91a:	d118      	bne.n	800a94e <_printf_float+0x1b6>
 800a91c:	2900      	cmp	r1, #0
 800a91e:	6863      	ldr	r3, [r4, #4]
 800a920:	dd0b      	ble.n	800a93a <_printf_float+0x1a2>
 800a922:	6121      	str	r1, [r4, #16]
 800a924:	b913      	cbnz	r3, 800a92c <_printf_float+0x194>
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	07d0      	lsls	r0, r2, #31
 800a92a:	d502      	bpl.n	800a932 <_printf_float+0x19a>
 800a92c:	3301      	adds	r3, #1
 800a92e:	440b      	add	r3, r1
 800a930:	6123      	str	r3, [r4, #16]
 800a932:	f04f 0900 	mov.w	r9, #0
 800a936:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a938:	e7dc      	b.n	800a8f4 <_printf_float+0x15c>
 800a93a:	b913      	cbnz	r3, 800a942 <_printf_float+0x1aa>
 800a93c:	6822      	ldr	r2, [r4, #0]
 800a93e:	07d2      	lsls	r2, r2, #31
 800a940:	d501      	bpl.n	800a946 <_printf_float+0x1ae>
 800a942:	3302      	adds	r3, #2
 800a944:	e7f4      	b.n	800a930 <_printf_float+0x198>
 800a946:	2301      	movs	r3, #1
 800a948:	e7f2      	b.n	800a930 <_printf_float+0x198>
 800a94a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a94e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a950:	4299      	cmp	r1, r3
 800a952:	db05      	blt.n	800a960 <_printf_float+0x1c8>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	6121      	str	r1, [r4, #16]
 800a958:	07d8      	lsls	r0, r3, #31
 800a95a:	d5ea      	bpl.n	800a932 <_printf_float+0x19a>
 800a95c:	1c4b      	adds	r3, r1, #1
 800a95e:	e7e7      	b.n	800a930 <_printf_float+0x198>
 800a960:	2900      	cmp	r1, #0
 800a962:	bfcc      	ite	gt
 800a964:	2201      	movgt	r2, #1
 800a966:	f1c1 0202 	rsble	r2, r1, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	e7e0      	b.n	800a930 <_printf_float+0x198>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	055a      	lsls	r2, r3, #21
 800a972:	d407      	bmi.n	800a984 <_printf_float+0x1ec>
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	4642      	mov	r2, r8
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b8      	blx	r7
 800a97e:	3001      	adds	r0, #1
 800a980:	d12b      	bne.n	800a9da <_printf_float+0x242>
 800a982:	e764      	b.n	800a84e <_printf_float+0xb6>
 800a984:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a988:	f240 80dc 	bls.w	800ab44 <_printf_float+0x3ac>
 800a98c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a990:	2200      	movs	r2, #0
 800a992:	2300      	movs	r3, #0
 800a994:	f7f6 f808 	bl	80009a8 <__aeabi_dcmpeq>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d033      	beq.n	800aa04 <_printf_float+0x26c>
 800a99c:	2301      	movs	r3, #1
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	4a35      	ldr	r2, [pc, #212]	@ (800aa78 <_printf_float+0x2e0>)
 800a9a4:	47b8      	blx	r7
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f43f af51 	beq.w	800a84e <_printf_float+0xb6>
 800a9ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a9b0:	4543      	cmp	r3, r8
 800a9b2:	db02      	blt.n	800a9ba <_printf_float+0x222>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	07d8      	lsls	r0, r3, #31
 800a9b8:	d50f      	bpl.n	800a9da <_printf_float+0x242>
 800a9ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b8      	blx	r7
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	f43f af42 	beq.w	800a84e <_printf_float+0xb6>
 800a9ca:	f04f 0900 	mov.w	r9, #0
 800a9ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9d2:	f104 0a1a 	add.w	sl, r4, #26
 800a9d6:	45c8      	cmp	r8, r9
 800a9d8:	dc09      	bgt.n	800a9ee <_printf_float+0x256>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	079b      	lsls	r3, r3, #30
 800a9de:	f100 8102 	bmi.w	800abe6 <_printf_float+0x44e>
 800a9e2:	68e0      	ldr	r0, [r4, #12]
 800a9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e6:	4298      	cmp	r0, r3
 800a9e8:	bfb8      	it	lt
 800a9ea:	4618      	movlt	r0, r3
 800a9ec:	e731      	b.n	800a852 <_printf_float+0xba>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4652      	mov	r2, sl
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f43f af28 	beq.w	800a84e <_printf_float+0xb6>
 800a9fe:	f109 0901 	add.w	r9, r9, #1
 800aa02:	e7e8      	b.n	800a9d6 <_printf_float+0x23e>
 800aa04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dc38      	bgt.n	800aa7c <_printf_float+0x2e4>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4628      	mov	r0, r5
 800aa10:	4a19      	ldr	r2, [pc, #100]	@ (800aa78 <_printf_float+0x2e0>)
 800aa12:	47b8      	blx	r7
 800aa14:	3001      	adds	r0, #1
 800aa16:	f43f af1a 	beq.w	800a84e <_printf_float+0xb6>
 800aa1a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800aa1e:	ea59 0303 	orrs.w	r3, r9, r3
 800aa22:	d102      	bne.n	800aa2a <_printf_float+0x292>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	07d9      	lsls	r1, r3, #31
 800aa28:	d5d7      	bpl.n	800a9da <_printf_float+0x242>
 800aa2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa2e:	4631      	mov	r1, r6
 800aa30:	4628      	mov	r0, r5
 800aa32:	47b8      	blx	r7
 800aa34:	3001      	adds	r0, #1
 800aa36:	f43f af0a 	beq.w	800a84e <_printf_float+0xb6>
 800aa3a:	f04f 0a00 	mov.w	sl, #0
 800aa3e:	f104 0b1a 	add.w	fp, r4, #26
 800aa42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa44:	425b      	negs	r3, r3
 800aa46:	4553      	cmp	r3, sl
 800aa48:	dc01      	bgt.n	800aa4e <_printf_float+0x2b6>
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	e793      	b.n	800a976 <_printf_float+0x1de>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	465a      	mov	r2, fp
 800aa52:	4631      	mov	r1, r6
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b8      	blx	r7
 800aa58:	3001      	adds	r0, #1
 800aa5a:	f43f aef8 	beq.w	800a84e <_printf_float+0xb6>
 800aa5e:	f10a 0a01 	add.w	sl, sl, #1
 800aa62:	e7ee      	b.n	800aa42 <_printf_float+0x2aa>
 800aa64:	7fefffff 	.word	0x7fefffff
 800aa68:	0800db98 	.word	0x0800db98
 800aa6c:	0800db9c 	.word	0x0800db9c
 800aa70:	0800dba0 	.word	0x0800dba0
 800aa74:	0800dba4 	.word	0x0800dba4
 800aa78:	0800dba8 	.word	0x0800dba8
 800aa7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa7e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800aa82:	4553      	cmp	r3, sl
 800aa84:	bfa8      	it	ge
 800aa86:	4653      	movge	r3, sl
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	4699      	mov	r9, r3
 800aa8c:	dc36      	bgt.n	800aafc <_printf_float+0x364>
 800aa8e:	f04f 0b00 	mov.w	fp, #0
 800aa92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa96:	f104 021a 	add.w	r2, r4, #26
 800aa9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa9e:	eba3 0309 	sub.w	r3, r3, r9
 800aaa2:	455b      	cmp	r3, fp
 800aaa4:	dc31      	bgt.n	800ab0a <_printf_float+0x372>
 800aaa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaa8:	459a      	cmp	sl, r3
 800aaaa:	dc3a      	bgt.n	800ab22 <_printf_float+0x38a>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	07da      	lsls	r2, r3, #31
 800aab0:	d437      	bmi.n	800ab22 <_printf_float+0x38a>
 800aab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aab4:	ebaa 0903 	sub.w	r9, sl, r3
 800aab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaba:	ebaa 0303 	sub.w	r3, sl, r3
 800aabe:	4599      	cmp	r9, r3
 800aac0:	bfa8      	it	ge
 800aac2:	4699      	movge	r9, r3
 800aac4:	f1b9 0f00 	cmp.w	r9, #0
 800aac8:	dc33      	bgt.n	800ab32 <_printf_float+0x39a>
 800aaca:	f04f 0800 	mov.w	r8, #0
 800aace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aad2:	f104 0b1a 	add.w	fp, r4, #26
 800aad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aad8:	ebaa 0303 	sub.w	r3, sl, r3
 800aadc:	eba3 0309 	sub.w	r3, r3, r9
 800aae0:	4543      	cmp	r3, r8
 800aae2:	f77f af7a 	ble.w	800a9da <_printf_float+0x242>
 800aae6:	2301      	movs	r3, #1
 800aae8:	465a      	mov	r2, fp
 800aaea:	4631      	mov	r1, r6
 800aaec:	4628      	mov	r0, r5
 800aaee:	47b8      	blx	r7
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	f43f aeac 	beq.w	800a84e <_printf_float+0xb6>
 800aaf6:	f108 0801 	add.w	r8, r8, #1
 800aafa:	e7ec      	b.n	800aad6 <_printf_float+0x33e>
 800aafc:	4642      	mov	r2, r8
 800aafe:	4631      	mov	r1, r6
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b8      	blx	r7
 800ab04:	3001      	adds	r0, #1
 800ab06:	d1c2      	bne.n	800aa8e <_printf_float+0x2f6>
 800ab08:	e6a1      	b.n	800a84e <_printf_float+0xb6>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4628      	mov	r0, r5
 800ab10:	920a      	str	r2, [sp, #40]	@ 0x28
 800ab12:	47b8      	blx	r7
 800ab14:	3001      	adds	r0, #1
 800ab16:	f43f ae9a 	beq.w	800a84e <_printf_float+0xb6>
 800ab1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab1c:	f10b 0b01 	add.w	fp, fp, #1
 800ab20:	e7bb      	b.n	800aa9a <_printf_float+0x302>
 800ab22:	4631      	mov	r1, r6
 800ab24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d1c0      	bne.n	800aab2 <_printf_float+0x31a>
 800ab30:	e68d      	b.n	800a84e <_printf_float+0xb6>
 800ab32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab34:	464b      	mov	r3, r9
 800ab36:	4631      	mov	r1, r6
 800ab38:	4628      	mov	r0, r5
 800ab3a:	4442      	add	r2, r8
 800ab3c:	47b8      	blx	r7
 800ab3e:	3001      	adds	r0, #1
 800ab40:	d1c3      	bne.n	800aaca <_printf_float+0x332>
 800ab42:	e684      	b.n	800a84e <_printf_float+0xb6>
 800ab44:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ab48:	f1ba 0f01 	cmp.w	sl, #1
 800ab4c:	dc01      	bgt.n	800ab52 <_printf_float+0x3ba>
 800ab4e:	07db      	lsls	r3, r3, #31
 800ab50:	d536      	bpl.n	800abc0 <_printf_float+0x428>
 800ab52:	2301      	movs	r3, #1
 800ab54:	4642      	mov	r2, r8
 800ab56:	4631      	mov	r1, r6
 800ab58:	4628      	mov	r0, r5
 800ab5a:	47b8      	blx	r7
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f43f ae76 	beq.w	800a84e <_printf_float+0xb6>
 800ab62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab66:	4631      	mov	r1, r6
 800ab68:	4628      	mov	r0, r5
 800ab6a:	47b8      	blx	r7
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	f43f ae6e 	beq.w	800a84e <_printf_float+0xb6>
 800ab72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab76:	2200      	movs	r2, #0
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab7e:	f7f5 ff13 	bl	80009a8 <__aeabi_dcmpeq>
 800ab82:	b9c0      	cbnz	r0, 800abb6 <_printf_float+0x41e>
 800ab84:	4653      	mov	r3, sl
 800ab86:	f108 0201 	add.w	r2, r8, #1
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b8      	blx	r7
 800ab90:	3001      	adds	r0, #1
 800ab92:	d10c      	bne.n	800abae <_printf_float+0x416>
 800ab94:	e65b      	b.n	800a84e <_printf_float+0xb6>
 800ab96:	2301      	movs	r3, #1
 800ab98:	465a      	mov	r2, fp
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b8      	blx	r7
 800aba0:	3001      	adds	r0, #1
 800aba2:	f43f ae54 	beq.w	800a84e <_printf_float+0xb6>
 800aba6:	f108 0801 	add.w	r8, r8, #1
 800abaa:	45d0      	cmp	r8, sl
 800abac:	dbf3      	blt.n	800ab96 <_printf_float+0x3fe>
 800abae:	464b      	mov	r3, r9
 800abb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800abb4:	e6e0      	b.n	800a978 <_printf_float+0x1e0>
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	f104 0b1a 	add.w	fp, r4, #26
 800abbe:	e7f4      	b.n	800abaa <_printf_float+0x412>
 800abc0:	2301      	movs	r3, #1
 800abc2:	4642      	mov	r2, r8
 800abc4:	e7e1      	b.n	800ab8a <_printf_float+0x3f2>
 800abc6:	2301      	movs	r3, #1
 800abc8:	464a      	mov	r2, r9
 800abca:	4631      	mov	r1, r6
 800abcc:	4628      	mov	r0, r5
 800abce:	47b8      	blx	r7
 800abd0:	3001      	adds	r0, #1
 800abd2:	f43f ae3c 	beq.w	800a84e <_printf_float+0xb6>
 800abd6:	f108 0801 	add.w	r8, r8, #1
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800abde:	1a5b      	subs	r3, r3, r1
 800abe0:	4543      	cmp	r3, r8
 800abe2:	dcf0      	bgt.n	800abc6 <_printf_float+0x42e>
 800abe4:	e6fd      	b.n	800a9e2 <_printf_float+0x24a>
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	f104 0919 	add.w	r9, r4, #25
 800abee:	e7f4      	b.n	800abda <_printf_float+0x442>

0800abf0 <_printf_common>:
 800abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	4616      	mov	r6, r2
 800abf6:	4698      	mov	r8, r3
 800abf8:	688a      	ldr	r2, [r1, #8]
 800abfa:	690b      	ldr	r3, [r1, #16]
 800abfc:	4607      	mov	r7, r0
 800abfe:	4293      	cmp	r3, r2
 800ac00:	bfb8      	it	lt
 800ac02:	4613      	movlt	r3, r2
 800ac04:	6033      	str	r3, [r6, #0]
 800ac06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac10:	b10a      	cbz	r2, 800ac16 <_printf_common+0x26>
 800ac12:	3301      	adds	r3, #1
 800ac14:	6033      	str	r3, [r6, #0]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	0699      	lsls	r1, r3, #26
 800ac1a:	bf42      	ittt	mi
 800ac1c:	6833      	ldrmi	r3, [r6, #0]
 800ac1e:	3302      	addmi	r3, #2
 800ac20:	6033      	strmi	r3, [r6, #0]
 800ac22:	6825      	ldr	r5, [r4, #0]
 800ac24:	f015 0506 	ands.w	r5, r5, #6
 800ac28:	d106      	bne.n	800ac38 <_printf_common+0x48>
 800ac2a:	f104 0a19 	add.w	sl, r4, #25
 800ac2e:	68e3      	ldr	r3, [r4, #12]
 800ac30:	6832      	ldr	r2, [r6, #0]
 800ac32:	1a9b      	subs	r3, r3, r2
 800ac34:	42ab      	cmp	r3, r5
 800ac36:	dc2b      	bgt.n	800ac90 <_printf_common+0xa0>
 800ac38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac3c:	6822      	ldr	r2, [r4, #0]
 800ac3e:	3b00      	subs	r3, #0
 800ac40:	bf18      	it	ne
 800ac42:	2301      	movne	r3, #1
 800ac44:	0692      	lsls	r2, r2, #26
 800ac46:	d430      	bmi.n	800acaa <_printf_common+0xba>
 800ac48:	4641      	mov	r1, r8
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac50:	47c8      	blx	r9
 800ac52:	3001      	adds	r0, #1
 800ac54:	d023      	beq.n	800ac9e <_printf_common+0xae>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	6922      	ldr	r2, [r4, #16]
 800ac5a:	f003 0306 	and.w	r3, r3, #6
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	bf14      	ite	ne
 800ac62:	2500      	movne	r5, #0
 800ac64:	6833      	ldreq	r3, [r6, #0]
 800ac66:	f04f 0600 	mov.w	r6, #0
 800ac6a:	bf08      	it	eq
 800ac6c:	68e5      	ldreq	r5, [r4, #12]
 800ac6e:	f104 041a 	add.w	r4, r4, #26
 800ac72:	bf08      	it	eq
 800ac74:	1aed      	subeq	r5, r5, r3
 800ac76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ac7a:	bf08      	it	eq
 800ac7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac80:	4293      	cmp	r3, r2
 800ac82:	bfc4      	itt	gt
 800ac84:	1a9b      	subgt	r3, r3, r2
 800ac86:	18ed      	addgt	r5, r5, r3
 800ac88:	42b5      	cmp	r5, r6
 800ac8a:	d11a      	bne.n	800acc2 <_printf_common+0xd2>
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	e008      	b.n	800aca2 <_printf_common+0xb2>
 800ac90:	2301      	movs	r3, #1
 800ac92:	4652      	mov	r2, sl
 800ac94:	4641      	mov	r1, r8
 800ac96:	4638      	mov	r0, r7
 800ac98:	47c8      	blx	r9
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d103      	bne.n	800aca6 <_printf_common+0xb6>
 800ac9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca6:	3501      	adds	r5, #1
 800aca8:	e7c1      	b.n	800ac2e <_printf_common+0x3e>
 800acaa:	2030      	movs	r0, #48	@ 0x30
 800acac:	18e1      	adds	r1, r4, r3
 800acae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acb8:	4422      	add	r2, r4
 800acba:	3302      	adds	r3, #2
 800acbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800acc0:	e7c2      	b.n	800ac48 <_printf_common+0x58>
 800acc2:	2301      	movs	r3, #1
 800acc4:	4622      	mov	r2, r4
 800acc6:	4641      	mov	r1, r8
 800acc8:	4638      	mov	r0, r7
 800acca:	47c8      	blx	r9
 800accc:	3001      	adds	r0, #1
 800acce:	d0e6      	beq.n	800ac9e <_printf_common+0xae>
 800acd0:	3601      	adds	r6, #1
 800acd2:	e7d9      	b.n	800ac88 <_printf_common+0x98>

0800acd4 <_printf_i>:
 800acd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	7e0f      	ldrb	r7, [r1, #24]
 800acda:	4691      	mov	r9, r2
 800acdc:	2f78      	cmp	r7, #120	@ 0x78
 800acde:	4680      	mov	r8, r0
 800ace0:	460c      	mov	r4, r1
 800ace2:	469a      	mov	sl, r3
 800ace4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ace6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acea:	d807      	bhi.n	800acfc <_printf_i+0x28>
 800acec:	2f62      	cmp	r7, #98	@ 0x62
 800acee:	d80a      	bhi.n	800ad06 <_printf_i+0x32>
 800acf0:	2f00      	cmp	r7, #0
 800acf2:	f000 80d3 	beq.w	800ae9c <_printf_i+0x1c8>
 800acf6:	2f58      	cmp	r7, #88	@ 0x58
 800acf8:	f000 80ba 	beq.w	800ae70 <_printf_i+0x19c>
 800acfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad04:	e03a      	b.n	800ad7c <_printf_i+0xa8>
 800ad06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad0a:	2b15      	cmp	r3, #21
 800ad0c:	d8f6      	bhi.n	800acfc <_printf_i+0x28>
 800ad0e:	a101      	add	r1, pc, #4	@ (adr r1, 800ad14 <_printf_i+0x40>)
 800ad10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad14:	0800ad6d 	.word	0x0800ad6d
 800ad18:	0800ad81 	.word	0x0800ad81
 800ad1c:	0800acfd 	.word	0x0800acfd
 800ad20:	0800acfd 	.word	0x0800acfd
 800ad24:	0800acfd 	.word	0x0800acfd
 800ad28:	0800acfd 	.word	0x0800acfd
 800ad2c:	0800ad81 	.word	0x0800ad81
 800ad30:	0800acfd 	.word	0x0800acfd
 800ad34:	0800acfd 	.word	0x0800acfd
 800ad38:	0800acfd 	.word	0x0800acfd
 800ad3c:	0800acfd 	.word	0x0800acfd
 800ad40:	0800ae83 	.word	0x0800ae83
 800ad44:	0800adab 	.word	0x0800adab
 800ad48:	0800ae3d 	.word	0x0800ae3d
 800ad4c:	0800acfd 	.word	0x0800acfd
 800ad50:	0800acfd 	.word	0x0800acfd
 800ad54:	0800aea5 	.word	0x0800aea5
 800ad58:	0800acfd 	.word	0x0800acfd
 800ad5c:	0800adab 	.word	0x0800adab
 800ad60:	0800acfd 	.word	0x0800acfd
 800ad64:	0800acfd 	.word	0x0800acfd
 800ad68:	0800ae45 	.word	0x0800ae45
 800ad6c:	6833      	ldr	r3, [r6, #0]
 800ad6e:	1d1a      	adds	r2, r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6032      	str	r2, [r6, #0]
 800ad74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e09e      	b.n	800aebe <_printf_i+0x1ea>
 800ad80:	6833      	ldr	r3, [r6, #0]
 800ad82:	6820      	ldr	r0, [r4, #0]
 800ad84:	1d19      	adds	r1, r3, #4
 800ad86:	6031      	str	r1, [r6, #0]
 800ad88:	0606      	lsls	r6, r0, #24
 800ad8a:	d501      	bpl.n	800ad90 <_printf_i+0xbc>
 800ad8c:	681d      	ldr	r5, [r3, #0]
 800ad8e:	e003      	b.n	800ad98 <_printf_i+0xc4>
 800ad90:	0645      	lsls	r5, r0, #25
 800ad92:	d5fb      	bpl.n	800ad8c <_printf_i+0xb8>
 800ad94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad98:	2d00      	cmp	r5, #0
 800ad9a:	da03      	bge.n	800ada4 <_printf_i+0xd0>
 800ad9c:	232d      	movs	r3, #45	@ 0x2d
 800ad9e:	426d      	negs	r5, r5
 800ada0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ada4:	230a      	movs	r3, #10
 800ada6:	4859      	ldr	r0, [pc, #356]	@ (800af0c <_printf_i+0x238>)
 800ada8:	e011      	b.n	800adce <_printf_i+0xfa>
 800adaa:	6821      	ldr	r1, [r4, #0]
 800adac:	6833      	ldr	r3, [r6, #0]
 800adae:	0608      	lsls	r0, r1, #24
 800adb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800adb4:	d402      	bmi.n	800adbc <_printf_i+0xe8>
 800adb6:	0649      	lsls	r1, r1, #25
 800adb8:	bf48      	it	mi
 800adba:	b2ad      	uxthmi	r5, r5
 800adbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800adbe:	6033      	str	r3, [r6, #0]
 800adc0:	bf14      	ite	ne
 800adc2:	230a      	movne	r3, #10
 800adc4:	2308      	moveq	r3, #8
 800adc6:	4851      	ldr	r0, [pc, #324]	@ (800af0c <_printf_i+0x238>)
 800adc8:	2100      	movs	r1, #0
 800adca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800adce:	6866      	ldr	r6, [r4, #4]
 800add0:	2e00      	cmp	r6, #0
 800add2:	bfa8      	it	ge
 800add4:	6821      	ldrge	r1, [r4, #0]
 800add6:	60a6      	str	r6, [r4, #8]
 800add8:	bfa4      	itt	ge
 800adda:	f021 0104 	bicge.w	r1, r1, #4
 800adde:	6021      	strge	r1, [r4, #0]
 800ade0:	b90d      	cbnz	r5, 800ade6 <_printf_i+0x112>
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	d04b      	beq.n	800ae7e <_printf_i+0x1aa>
 800ade6:	4616      	mov	r6, r2
 800ade8:	fbb5 f1f3 	udiv	r1, r5, r3
 800adec:	fb03 5711 	mls	r7, r3, r1, r5
 800adf0:	5dc7      	ldrb	r7, [r0, r7]
 800adf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adf6:	462f      	mov	r7, r5
 800adf8:	42bb      	cmp	r3, r7
 800adfa:	460d      	mov	r5, r1
 800adfc:	d9f4      	bls.n	800ade8 <_printf_i+0x114>
 800adfe:	2b08      	cmp	r3, #8
 800ae00:	d10b      	bne.n	800ae1a <_printf_i+0x146>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	07df      	lsls	r7, r3, #31
 800ae06:	d508      	bpl.n	800ae1a <_printf_i+0x146>
 800ae08:	6923      	ldr	r3, [r4, #16]
 800ae0a:	6861      	ldr	r1, [r4, #4]
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	bfde      	ittt	le
 800ae10:	2330      	movle	r3, #48	@ 0x30
 800ae12:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae16:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae1a:	1b92      	subs	r2, r2, r6
 800ae1c:	6122      	str	r2, [r4, #16]
 800ae1e:	464b      	mov	r3, r9
 800ae20:	4621      	mov	r1, r4
 800ae22:	4640      	mov	r0, r8
 800ae24:	f8cd a000 	str.w	sl, [sp]
 800ae28:	aa03      	add	r2, sp, #12
 800ae2a:	f7ff fee1 	bl	800abf0 <_printf_common>
 800ae2e:	3001      	adds	r0, #1
 800ae30:	d14a      	bne.n	800aec8 <_printf_i+0x1f4>
 800ae32:	f04f 30ff 	mov.w	r0, #4294967295
 800ae36:	b004      	add	sp, #16
 800ae38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	f043 0320 	orr.w	r3, r3, #32
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	2778      	movs	r7, #120	@ 0x78
 800ae46:	4832      	ldr	r0, [pc, #200]	@ (800af10 <_printf_i+0x23c>)
 800ae48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	6831      	ldr	r1, [r6, #0]
 800ae50:	061f      	lsls	r7, r3, #24
 800ae52:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae56:	d402      	bmi.n	800ae5e <_printf_i+0x18a>
 800ae58:	065f      	lsls	r7, r3, #25
 800ae5a:	bf48      	it	mi
 800ae5c:	b2ad      	uxthmi	r5, r5
 800ae5e:	6031      	str	r1, [r6, #0]
 800ae60:	07d9      	lsls	r1, r3, #31
 800ae62:	bf44      	itt	mi
 800ae64:	f043 0320 	orrmi.w	r3, r3, #32
 800ae68:	6023      	strmi	r3, [r4, #0]
 800ae6a:	b11d      	cbz	r5, 800ae74 <_printf_i+0x1a0>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	e7ab      	b.n	800adc8 <_printf_i+0xf4>
 800ae70:	4826      	ldr	r0, [pc, #152]	@ (800af0c <_printf_i+0x238>)
 800ae72:	e7e9      	b.n	800ae48 <_printf_i+0x174>
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	f023 0320 	bic.w	r3, r3, #32
 800ae7a:	6023      	str	r3, [r4, #0]
 800ae7c:	e7f6      	b.n	800ae6c <_printf_i+0x198>
 800ae7e:	4616      	mov	r6, r2
 800ae80:	e7bd      	b.n	800adfe <_printf_i+0x12a>
 800ae82:	6833      	ldr	r3, [r6, #0]
 800ae84:	6825      	ldr	r5, [r4, #0]
 800ae86:	1d18      	adds	r0, r3, #4
 800ae88:	6961      	ldr	r1, [r4, #20]
 800ae8a:	6030      	str	r0, [r6, #0]
 800ae8c:	062e      	lsls	r6, r5, #24
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	d501      	bpl.n	800ae96 <_printf_i+0x1c2>
 800ae92:	6019      	str	r1, [r3, #0]
 800ae94:	e002      	b.n	800ae9c <_printf_i+0x1c8>
 800ae96:	0668      	lsls	r0, r5, #25
 800ae98:	d5fb      	bpl.n	800ae92 <_printf_i+0x1be>
 800ae9a:	8019      	strh	r1, [r3, #0]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4616      	mov	r6, r2
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	e7bc      	b.n	800ae1e <_printf_i+0x14a>
 800aea4:	6833      	ldr	r3, [r6, #0]
 800aea6:	2100      	movs	r1, #0
 800aea8:	1d1a      	adds	r2, r3, #4
 800aeaa:	6032      	str	r2, [r6, #0]
 800aeac:	681e      	ldr	r6, [r3, #0]
 800aeae:	6862      	ldr	r2, [r4, #4]
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f000 fac8 	bl	800b446 <memchr>
 800aeb6:	b108      	cbz	r0, 800aebc <_printf_i+0x1e8>
 800aeb8:	1b80      	subs	r0, r0, r6
 800aeba:	6060      	str	r0, [r4, #4]
 800aebc:	6863      	ldr	r3, [r4, #4]
 800aebe:	6123      	str	r3, [r4, #16]
 800aec0:	2300      	movs	r3, #0
 800aec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aec6:	e7aa      	b.n	800ae1e <_printf_i+0x14a>
 800aec8:	4632      	mov	r2, r6
 800aeca:	4649      	mov	r1, r9
 800aecc:	4640      	mov	r0, r8
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	47d0      	blx	sl
 800aed2:	3001      	adds	r0, #1
 800aed4:	d0ad      	beq.n	800ae32 <_printf_i+0x15e>
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	079b      	lsls	r3, r3, #30
 800aeda:	d413      	bmi.n	800af04 <_printf_i+0x230>
 800aedc:	68e0      	ldr	r0, [r4, #12]
 800aede:	9b03      	ldr	r3, [sp, #12]
 800aee0:	4298      	cmp	r0, r3
 800aee2:	bfb8      	it	lt
 800aee4:	4618      	movlt	r0, r3
 800aee6:	e7a6      	b.n	800ae36 <_printf_i+0x162>
 800aee8:	2301      	movs	r3, #1
 800aeea:	4632      	mov	r2, r6
 800aeec:	4649      	mov	r1, r9
 800aeee:	4640      	mov	r0, r8
 800aef0:	47d0      	blx	sl
 800aef2:	3001      	adds	r0, #1
 800aef4:	d09d      	beq.n	800ae32 <_printf_i+0x15e>
 800aef6:	3501      	adds	r5, #1
 800aef8:	68e3      	ldr	r3, [r4, #12]
 800aefa:	9903      	ldr	r1, [sp, #12]
 800aefc:	1a5b      	subs	r3, r3, r1
 800aefe:	42ab      	cmp	r3, r5
 800af00:	dcf2      	bgt.n	800aee8 <_printf_i+0x214>
 800af02:	e7eb      	b.n	800aedc <_printf_i+0x208>
 800af04:	2500      	movs	r5, #0
 800af06:	f104 0619 	add.w	r6, r4, #25
 800af0a:	e7f5      	b.n	800aef8 <_printf_i+0x224>
 800af0c:	0800dbaa 	.word	0x0800dbaa
 800af10:	0800dbbb 	.word	0x0800dbbb

0800af14 <std>:
 800af14:	2300      	movs	r3, #0
 800af16:	b510      	push	{r4, lr}
 800af18:	4604      	mov	r4, r0
 800af1a:	e9c0 3300 	strd	r3, r3, [r0]
 800af1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af22:	6083      	str	r3, [r0, #8]
 800af24:	8181      	strh	r1, [r0, #12]
 800af26:	6643      	str	r3, [r0, #100]	@ 0x64
 800af28:	81c2      	strh	r2, [r0, #14]
 800af2a:	6183      	str	r3, [r0, #24]
 800af2c:	4619      	mov	r1, r3
 800af2e:	2208      	movs	r2, #8
 800af30:	305c      	adds	r0, #92	@ 0x5c
 800af32:	f000 f9f9 	bl	800b328 <memset>
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <std+0x58>)
 800af38:	6224      	str	r4, [r4, #32]
 800af3a:	6263      	str	r3, [r4, #36]	@ 0x24
 800af3c:	4b0c      	ldr	r3, [pc, #48]	@ (800af70 <std+0x5c>)
 800af3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af40:	4b0c      	ldr	r3, [pc, #48]	@ (800af74 <std+0x60>)
 800af42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af44:	4b0c      	ldr	r3, [pc, #48]	@ (800af78 <std+0x64>)
 800af46:	6323      	str	r3, [r4, #48]	@ 0x30
 800af48:	4b0c      	ldr	r3, [pc, #48]	@ (800af7c <std+0x68>)
 800af4a:	429c      	cmp	r4, r3
 800af4c:	d006      	beq.n	800af5c <std+0x48>
 800af4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af52:	4294      	cmp	r4, r2
 800af54:	d002      	beq.n	800af5c <std+0x48>
 800af56:	33d0      	adds	r3, #208	@ 0xd0
 800af58:	429c      	cmp	r4, r3
 800af5a:	d105      	bne.n	800af68 <std+0x54>
 800af5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af64:	f000 ba6c 	b.w	800b440 <__retarget_lock_init_recursive>
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	bf00      	nop
 800af6c:	0800b179 	.word	0x0800b179
 800af70:	0800b19b 	.word	0x0800b19b
 800af74:	0800b1d3 	.word	0x0800b1d3
 800af78:	0800b1f7 	.word	0x0800b1f7
 800af7c:	20002768 	.word	0x20002768

0800af80 <stdio_exit_handler>:
 800af80:	4a02      	ldr	r2, [pc, #8]	@ (800af8c <stdio_exit_handler+0xc>)
 800af82:	4903      	ldr	r1, [pc, #12]	@ (800af90 <stdio_exit_handler+0x10>)
 800af84:	4803      	ldr	r0, [pc, #12]	@ (800af94 <stdio_exit_handler+0x14>)
 800af86:	f000 b869 	b.w	800b05c <_fwalk_sglue>
 800af8a:	bf00      	nop
 800af8c:	20000024 	.word	0x20000024
 800af90:	0800ccad 	.word	0x0800ccad
 800af94:	200001a0 	.word	0x200001a0

0800af98 <cleanup_stdio>:
 800af98:	6841      	ldr	r1, [r0, #4]
 800af9a:	4b0c      	ldr	r3, [pc, #48]	@ (800afcc <cleanup_stdio+0x34>)
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4299      	cmp	r1, r3
 800afa0:	4604      	mov	r4, r0
 800afa2:	d001      	beq.n	800afa8 <cleanup_stdio+0x10>
 800afa4:	f001 fe82 	bl	800ccac <_fflush_r>
 800afa8:	68a1      	ldr	r1, [r4, #8]
 800afaa:	4b09      	ldr	r3, [pc, #36]	@ (800afd0 <cleanup_stdio+0x38>)
 800afac:	4299      	cmp	r1, r3
 800afae:	d002      	beq.n	800afb6 <cleanup_stdio+0x1e>
 800afb0:	4620      	mov	r0, r4
 800afb2:	f001 fe7b 	bl	800ccac <_fflush_r>
 800afb6:	68e1      	ldr	r1, [r4, #12]
 800afb8:	4b06      	ldr	r3, [pc, #24]	@ (800afd4 <cleanup_stdio+0x3c>)
 800afba:	4299      	cmp	r1, r3
 800afbc:	d004      	beq.n	800afc8 <cleanup_stdio+0x30>
 800afbe:	4620      	mov	r0, r4
 800afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc4:	f001 be72 	b.w	800ccac <_fflush_r>
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	20002768 	.word	0x20002768
 800afd0:	200027d0 	.word	0x200027d0
 800afd4:	20002838 	.word	0x20002838

0800afd8 <global_stdio_init.part.0>:
 800afd8:	b510      	push	{r4, lr}
 800afda:	4b0b      	ldr	r3, [pc, #44]	@ (800b008 <global_stdio_init.part.0+0x30>)
 800afdc:	4c0b      	ldr	r4, [pc, #44]	@ (800b00c <global_stdio_init.part.0+0x34>)
 800afde:	4a0c      	ldr	r2, [pc, #48]	@ (800b010 <global_stdio_init.part.0+0x38>)
 800afe0:	4620      	mov	r0, r4
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	2104      	movs	r1, #4
 800afe6:	2200      	movs	r2, #0
 800afe8:	f7ff ff94 	bl	800af14 <std>
 800afec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aff0:	2201      	movs	r2, #1
 800aff2:	2109      	movs	r1, #9
 800aff4:	f7ff ff8e 	bl	800af14 <std>
 800aff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800affc:	2202      	movs	r2, #2
 800affe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b002:	2112      	movs	r1, #18
 800b004:	f7ff bf86 	b.w	800af14 <std>
 800b008:	200028a0 	.word	0x200028a0
 800b00c:	20002768 	.word	0x20002768
 800b010:	0800af81 	.word	0x0800af81

0800b014 <__sfp_lock_acquire>:
 800b014:	4801      	ldr	r0, [pc, #4]	@ (800b01c <__sfp_lock_acquire+0x8>)
 800b016:	f000 ba14 	b.w	800b442 <__retarget_lock_acquire_recursive>
 800b01a:	bf00      	nop
 800b01c:	200028a9 	.word	0x200028a9

0800b020 <__sfp_lock_release>:
 800b020:	4801      	ldr	r0, [pc, #4]	@ (800b028 <__sfp_lock_release+0x8>)
 800b022:	f000 ba0f 	b.w	800b444 <__retarget_lock_release_recursive>
 800b026:	bf00      	nop
 800b028:	200028a9 	.word	0x200028a9

0800b02c <__sinit>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	4604      	mov	r4, r0
 800b030:	f7ff fff0 	bl	800b014 <__sfp_lock_acquire>
 800b034:	6a23      	ldr	r3, [r4, #32]
 800b036:	b11b      	cbz	r3, 800b040 <__sinit+0x14>
 800b038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b03c:	f7ff bff0 	b.w	800b020 <__sfp_lock_release>
 800b040:	4b04      	ldr	r3, [pc, #16]	@ (800b054 <__sinit+0x28>)
 800b042:	6223      	str	r3, [r4, #32]
 800b044:	4b04      	ldr	r3, [pc, #16]	@ (800b058 <__sinit+0x2c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1f5      	bne.n	800b038 <__sinit+0xc>
 800b04c:	f7ff ffc4 	bl	800afd8 <global_stdio_init.part.0>
 800b050:	e7f2      	b.n	800b038 <__sinit+0xc>
 800b052:	bf00      	nop
 800b054:	0800af99 	.word	0x0800af99
 800b058:	200028a0 	.word	0x200028a0

0800b05c <_fwalk_sglue>:
 800b05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b060:	4607      	mov	r7, r0
 800b062:	4688      	mov	r8, r1
 800b064:	4614      	mov	r4, r2
 800b066:	2600      	movs	r6, #0
 800b068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b06c:	f1b9 0901 	subs.w	r9, r9, #1
 800b070:	d505      	bpl.n	800b07e <_fwalk_sglue+0x22>
 800b072:	6824      	ldr	r4, [r4, #0]
 800b074:	2c00      	cmp	r4, #0
 800b076:	d1f7      	bne.n	800b068 <_fwalk_sglue+0xc>
 800b078:	4630      	mov	r0, r6
 800b07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d907      	bls.n	800b094 <_fwalk_sglue+0x38>
 800b084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b088:	3301      	adds	r3, #1
 800b08a:	d003      	beq.n	800b094 <_fwalk_sglue+0x38>
 800b08c:	4629      	mov	r1, r5
 800b08e:	4638      	mov	r0, r7
 800b090:	47c0      	blx	r8
 800b092:	4306      	orrs	r6, r0
 800b094:	3568      	adds	r5, #104	@ 0x68
 800b096:	e7e9      	b.n	800b06c <_fwalk_sglue+0x10>

0800b098 <iprintf>:
 800b098:	b40f      	push	{r0, r1, r2, r3}
 800b09a:	b507      	push	{r0, r1, r2, lr}
 800b09c:	4906      	ldr	r1, [pc, #24]	@ (800b0b8 <iprintf+0x20>)
 800b09e:	ab04      	add	r3, sp, #16
 800b0a0:	6808      	ldr	r0, [r1, #0]
 800b0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a6:	6881      	ldr	r1, [r0, #8]
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	f001 fc67 	bl	800c97c <_vfiprintf_r>
 800b0ae:	b003      	add	sp, #12
 800b0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b4:	b004      	add	sp, #16
 800b0b6:	4770      	bx	lr
 800b0b8:	2000019c 	.word	0x2000019c

0800b0bc <_puts_r>:
 800b0bc:	6a03      	ldr	r3, [r0, #32]
 800b0be:	b570      	push	{r4, r5, r6, lr}
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	460e      	mov	r6, r1
 800b0c4:	6884      	ldr	r4, [r0, #8]
 800b0c6:	b90b      	cbnz	r3, 800b0cc <_puts_r+0x10>
 800b0c8:	f7ff ffb0 	bl	800b02c <__sinit>
 800b0cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ce:	07db      	lsls	r3, r3, #31
 800b0d0:	d405      	bmi.n	800b0de <_puts_r+0x22>
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	0598      	lsls	r0, r3, #22
 800b0d6:	d402      	bmi.n	800b0de <_puts_r+0x22>
 800b0d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0da:	f000 f9b2 	bl	800b442 <__retarget_lock_acquire_recursive>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	0719      	lsls	r1, r3, #28
 800b0e2:	d502      	bpl.n	800b0ea <_puts_r+0x2e>
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d135      	bne.n	800b156 <_puts_r+0x9a>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 f8c5 	bl	800b27c <__swsetup_r>
 800b0f2:	b380      	cbz	r0, 800b156 <_puts_r+0x9a>
 800b0f4:	f04f 35ff 	mov.w	r5, #4294967295
 800b0f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0fa:	07da      	lsls	r2, r3, #31
 800b0fc:	d405      	bmi.n	800b10a <_puts_r+0x4e>
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	059b      	lsls	r3, r3, #22
 800b102:	d402      	bmi.n	800b10a <_puts_r+0x4e>
 800b104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b106:	f000 f99d 	bl	800b444 <__retarget_lock_release_recursive>
 800b10a:	4628      	mov	r0, r5
 800b10c:	bd70      	pop	{r4, r5, r6, pc}
 800b10e:	2b00      	cmp	r3, #0
 800b110:	da04      	bge.n	800b11c <_puts_r+0x60>
 800b112:	69a2      	ldr	r2, [r4, #24]
 800b114:	429a      	cmp	r2, r3
 800b116:	dc17      	bgt.n	800b148 <_puts_r+0x8c>
 800b118:	290a      	cmp	r1, #10
 800b11a:	d015      	beq.n	800b148 <_puts_r+0x8c>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	6022      	str	r2, [r4, #0]
 800b122:	7019      	strb	r1, [r3, #0]
 800b124:	68a3      	ldr	r3, [r4, #8]
 800b126:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b12a:	3b01      	subs	r3, #1
 800b12c:	60a3      	str	r3, [r4, #8]
 800b12e:	2900      	cmp	r1, #0
 800b130:	d1ed      	bne.n	800b10e <_puts_r+0x52>
 800b132:	2b00      	cmp	r3, #0
 800b134:	da11      	bge.n	800b15a <_puts_r+0x9e>
 800b136:	4622      	mov	r2, r4
 800b138:	210a      	movs	r1, #10
 800b13a:	4628      	mov	r0, r5
 800b13c:	f000 f85f 	bl	800b1fe <__swbuf_r>
 800b140:	3001      	adds	r0, #1
 800b142:	d0d7      	beq.n	800b0f4 <_puts_r+0x38>
 800b144:	250a      	movs	r5, #10
 800b146:	e7d7      	b.n	800b0f8 <_puts_r+0x3c>
 800b148:	4622      	mov	r2, r4
 800b14a:	4628      	mov	r0, r5
 800b14c:	f000 f857 	bl	800b1fe <__swbuf_r>
 800b150:	3001      	adds	r0, #1
 800b152:	d1e7      	bne.n	800b124 <_puts_r+0x68>
 800b154:	e7ce      	b.n	800b0f4 <_puts_r+0x38>
 800b156:	3e01      	subs	r6, #1
 800b158:	e7e4      	b.n	800b124 <_puts_r+0x68>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	220a      	movs	r2, #10
 800b162:	701a      	strb	r2, [r3, #0]
 800b164:	e7ee      	b.n	800b144 <_puts_r+0x88>
	...

0800b168 <puts>:
 800b168:	4b02      	ldr	r3, [pc, #8]	@ (800b174 <puts+0xc>)
 800b16a:	4601      	mov	r1, r0
 800b16c:	6818      	ldr	r0, [r3, #0]
 800b16e:	f7ff bfa5 	b.w	800b0bc <_puts_r>
 800b172:	bf00      	nop
 800b174:	2000019c 	.word	0x2000019c

0800b178 <__sread>:
 800b178:	b510      	push	{r4, lr}
 800b17a:	460c      	mov	r4, r1
 800b17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b180:	f000 f900 	bl	800b384 <_read_r>
 800b184:	2800      	cmp	r0, #0
 800b186:	bfab      	itete	ge
 800b188:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b18a:	89a3      	ldrhlt	r3, [r4, #12]
 800b18c:	181b      	addge	r3, r3, r0
 800b18e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b192:	bfac      	ite	ge
 800b194:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b196:	81a3      	strhlt	r3, [r4, #12]
 800b198:	bd10      	pop	{r4, pc}

0800b19a <__swrite>:
 800b19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b19e:	461f      	mov	r7, r3
 800b1a0:	898b      	ldrh	r3, [r1, #12]
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	05db      	lsls	r3, r3, #23
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	4616      	mov	r6, r2
 800b1aa:	d505      	bpl.n	800b1b8 <__swrite+0x1e>
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b4:	f000 f8d4 	bl	800b360 <_lseek_r>
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	4632      	mov	r2, r6
 800b1bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1c0:	81a3      	strh	r3, [r4, #12]
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	463b      	mov	r3, r7
 800b1c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ce:	f000 b8fb 	b.w	800b3c8 <_write_r>

0800b1d2 <__sseek>:
 800b1d2:	b510      	push	{r4, lr}
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1da:	f000 f8c1 	bl	800b360 <_lseek_r>
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	bf15      	itete	ne
 800b1e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1ee:	81a3      	strheq	r3, [r4, #12]
 800b1f0:	bf18      	it	ne
 800b1f2:	81a3      	strhne	r3, [r4, #12]
 800b1f4:	bd10      	pop	{r4, pc}

0800b1f6 <__sclose>:
 800b1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1fa:	f000 b8a1 	b.w	800b340 <_close_r>

0800b1fe <__swbuf_r>:
 800b1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b200:	460e      	mov	r6, r1
 800b202:	4614      	mov	r4, r2
 800b204:	4605      	mov	r5, r0
 800b206:	b118      	cbz	r0, 800b210 <__swbuf_r+0x12>
 800b208:	6a03      	ldr	r3, [r0, #32]
 800b20a:	b90b      	cbnz	r3, 800b210 <__swbuf_r+0x12>
 800b20c:	f7ff ff0e 	bl	800b02c <__sinit>
 800b210:	69a3      	ldr	r3, [r4, #24]
 800b212:	60a3      	str	r3, [r4, #8]
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	071a      	lsls	r2, r3, #28
 800b218:	d501      	bpl.n	800b21e <__swbuf_r+0x20>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	b943      	cbnz	r3, 800b230 <__swbuf_r+0x32>
 800b21e:	4621      	mov	r1, r4
 800b220:	4628      	mov	r0, r5
 800b222:	f000 f82b 	bl	800b27c <__swsetup_r>
 800b226:	b118      	cbz	r0, 800b230 <__swbuf_r+0x32>
 800b228:	f04f 37ff 	mov.w	r7, #4294967295
 800b22c:	4638      	mov	r0, r7
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	6922      	ldr	r2, [r4, #16]
 800b234:	b2f6      	uxtb	r6, r6
 800b236:	1a98      	subs	r0, r3, r2
 800b238:	6963      	ldr	r3, [r4, #20]
 800b23a:	4637      	mov	r7, r6
 800b23c:	4283      	cmp	r3, r0
 800b23e:	dc05      	bgt.n	800b24c <__swbuf_r+0x4e>
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	f001 fd32 	bl	800ccac <_fflush_r>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d1ed      	bne.n	800b228 <__swbuf_r+0x2a>
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	3b01      	subs	r3, #1
 800b250:	60a3      	str	r3, [r4, #8]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	1c5a      	adds	r2, r3, #1
 800b256:	6022      	str	r2, [r4, #0]
 800b258:	701e      	strb	r6, [r3, #0]
 800b25a:	6962      	ldr	r2, [r4, #20]
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	429a      	cmp	r2, r3
 800b260:	d004      	beq.n	800b26c <__swbuf_r+0x6e>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	07db      	lsls	r3, r3, #31
 800b266:	d5e1      	bpl.n	800b22c <__swbuf_r+0x2e>
 800b268:	2e0a      	cmp	r6, #10
 800b26a:	d1df      	bne.n	800b22c <__swbuf_r+0x2e>
 800b26c:	4621      	mov	r1, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	f001 fd1c 	bl	800ccac <_fflush_r>
 800b274:	2800      	cmp	r0, #0
 800b276:	d0d9      	beq.n	800b22c <__swbuf_r+0x2e>
 800b278:	e7d6      	b.n	800b228 <__swbuf_r+0x2a>
	...

0800b27c <__swsetup_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4b29      	ldr	r3, [pc, #164]	@ (800b324 <__swsetup_r+0xa8>)
 800b280:	4605      	mov	r5, r0
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	460c      	mov	r4, r1
 800b286:	b118      	cbz	r0, 800b290 <__swsetup_r+0x14>
 800b288:	6a03      	ldr	r3, [r0, #32]
 800b28a:	b90b      	cbnz	r3, 800b290 <__swsetup_r+0x14>
 800b28c:	f7ff fece 	bl	800b02c <__sinit>
 800b290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b294:	0719      	lsls	r1, r3, #28
 800b296:	d422      	bmi.n	800b2de <__swsetup_r+0x62>
 800b298:	06da      	lsls	r2, r3, #27
 800b29a:	d407      	bmi.n	800b2ac <__swsetup_r+0x30>
 800b29c:	2209      	movs	r2, #9
 800b29e:	602a      	str	r2, [r5, #0]
 800b2a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	81a3      	strh	r3, [r4, #12]
 800b2aa:	e033      	b.n	800b314 <__swsetup_r+0x98>
 800b2ac:	0758      	lsls	r0, r3, #29
 800b2ae:	d512      	bpl.n	800b2d6 <__swsetup_r+0x5a>
 800b2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2b2:	b141      	cbz	r1, 800b2c6 <__swsetup_r+0x4a>
 800b2b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	d002      	beq.n	800b2c2 <__swsetup_r+0x46>
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 ff4f 	bl	800c160 <_free_r>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	f043 0308 	orr.w	r3, r3, #8
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	b94b      	cbnz	r3, 800b2f6 <__swsetup_r+0x7a>
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ec:	d003      	beq.n	800b2f6 <__swsetup_r+0x7a>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f001 fd3a 	bl	800cd6a <__smakebuf_r>
 800b2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2fa:	f013 0201 	ands.w	r2, r3, #1
 800b2fe:	d00a      	beq.n	800b316 <__swsetup_r+0x9a>
 800b300:	2200      	movs	r2, #0
 800b302:	60a2      	str	r2, [r4, #8]
 800b304:	6962      	ldr	r2, [r4, #20]
 800b306:	4252      	negs	r2, r2
 800b308:	61a2      	str	r2, [r4, #24]
 800b30a:	6922      	ldr	r2, [r4, #16]
 800b30c:	b942      	cbnz	r2, 800b320 <__swsetup_r+0xa4>
 800b30e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b312:	d1c5      	bne.n	800b2a0 <__swsetup_r+0x24>
 800b314:	bd38      	pop	{r3, r4, r5, pc}
 800b316:	0799      	lsls	r1, r3, #30
 800b318:	bf58      	it	pl
 800b31a:	6962      	ldrpl	r2, [r4, #20]
 800b31c:	60a2      	str	r2, [r4, #8]
 800b31e:	e7f4      	b.n	800b30a <__swsetup_r+0x8e>
 800b320:	2000      	movs	r0, #0
 800b322:	e7f7      	b.n	800b314 <__swsetup_r+0x98>
 800b324:	2000019c 	.word	0x2000019c

0800b328 <memset>:
 800b328:	4603      	mov	r3, r0
 800b32a:	4402      	add	r2, r0
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d100      	bne.n	800b332 <memset+0xa>
 800b330:	4770      	bx	lr
 800b332:	f803 1b01 	strb.w	r1, [r3], #1
 800b336:	e7f9      	b.n	800b32c <memset+0x4>

0800b338 <_localeconv_r>:
 800b338:	4800      	ldr	r0, [pc, #0]	@ (800b33c <_localeconv_r+0x4>)
 800b33a:	4770      	bx	lr
 800b33c:	20000120 	.word	0x20000120

0800b340 <_close_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	2300      	movs	r3, #0
 800b344:	4d05      	ldr	r5, [pc, #20]	@ (800b35c <_close_r+0x1c>)
 800b346:	4604      	mov	r4, r0
 800b348:	4608      	mov	r0, r1
 800b34a:	602b      	str	r3, [r5, #0]
 800b34c:	f7f8 f804 	bl	8003358 <_close>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_close_r+0x1a>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_close_r+0x1a>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	200028a4 	.word	0x200028a4

0800b360 <_lseek_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	2200      	movs	r2, #0
 800b36a:	4d05      	ldr	r5, [pc, #20]	@ (800b380 <_lseek_r+0x20>)
 800b36c:	602a      	str	r2, [r5, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	f7f7 fffc 	bl	800336c <_lseek>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d102      	bne.n	800b37e <_lseek_r+0x1e>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	b103      	cbz	r3, 800b37e <_lseek_r+0x1e>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	200028a4 	.word	0x200028a4

0800b384 <_read_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	2200      	movs	r2, #0
 800b38e:	4d05      	ldr	r5, [pc, #20]	@ (800b3a4 <_read_r+0x20>)
 800b390:	602a      	str	r2, [r5, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	f7f7 ffd0 	bl	8003338 <_read>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_read_r+0x1e>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_read_r+0x1e>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	200028a4 	.word	0x200028a4

0800b3a8 <_sbrk_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	4d05      	ldr	r5, [pc, #20]	@ (800b3c4 <_sbrk_r+0x1c>)
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	602b      	str	r3, [r5, #0]
 800b3b4:	f7f7 ffdc 	bl	8003370 <_sbrk>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d102      	bne.n	800b3c2 <_sbrk_r+0x1a>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	b103      	cbz	r3, 800b3c2 <_sbrk_r+0x1a>
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	200028a4 	.word	0x200028a4

0800b3c8 <_write_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	4d05      	ldr	r5, [pc, #20]	@ (800b3e8 <_write_r+0x20>)
 800b3d4:	602a      	str	r2, [r5, #0]
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f7f7 fc3c 	bl	8002c54 <_write>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	d102      	bne.n	800b3e6 <_write_r+0x1e>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	b103      	cbz	r3, 800b3e6 <_write_r+0x1e>
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	200028a4 	.word	0x200028a4

0800b3ec <__errno>:
 800b3ec:	4b01      	ldr	r3, [pc, #4]	@ (800b3f4 <__errno+0x8>)
 800b3ee:	6818      	ldr	r0, [r3, #0]
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	2000019c 	.word	0x2000019c

0800b3f8 <__libc_init_array>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	4d0c      	ldr	r5, [pc, #48]	@ (800b430 <__libc_init_array+0x38>)
 800b3fe:	4c0d      	ldr	r4, [pc, #52]	@ (800b434 <__libc_init_array+0x3c>)
 800b400:	1b64      	subs	r4, r4, r5
 800b402:	10a4      	asrs	r4, r4, #2
 800b404:	42a6      	cmp	r6, r4
 800b406:	d109      	bne.n	800b41c <__libc_init_array+0x24>
 800b408:	f001 fd6e 	bl	800cee8 <_init>
 800b40c:	2600      	movs	r6, #0
 800b40e:	4d0a      	ldr	r5, [pc, #40]	@ (800b438 <__libc_init_array+0x40>)
 800b410:	4c0a      	ldr	r4, [pc, #40]	@ (800b43c <__libc_init_array+0x44>)
 800b412:	1b64      	subs	r4, r4, r5
 800b414:	10a4      	asrs	r4, r4, #2
 800b416:	42a6      	cmp	r6, r4
 800b418:	d105      	bne.n	800b426 <__libc_init_array+0x2e>
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b420:	4798      	blx	r3
 800b422:	3601      	adds	r6, #1
 800b424:	e7ee      	b.n	800b404 <__libc_init_array+0xc>
 800b426:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42a:	4798      	blx	r3
 800b42c:	3601      	adds	r6, #1
 800b42e:	e7f2      	b.n	800b416 <__libc_init_array+0x1e>
 800b430:	0800df14 	.word	0x0800df14
 800b434:	0800df14 	.word	0x0800df14
 800b438:	0800df14 	.word	0x0800df14
 800b43c:	0800df18 	.word	0x0800df18

0800b440 <__retarget_lock_init_recursive>:
 800b440:	4770      	bx	lr

0800b442 <__retarget_lock_acquire_recursive>:
 800b442:	4770      	bx	lr

0800b444 <__retarget_lock_release_recursive>:
 800b444:	4770      	bx	lr

0800b446 <memchr>:
 800b446:	4603      	mov	r3, r0
 800b448:	b510      	push	{r4, lr}
 800b44a:	b2c9      	uxtb	r1, r1
 800b44c:	4402      	add	r2, r0
 800b44e:	4293      	cmp	r3, r2
 800b450:	4618      	mov	r0, r3
 800b452:	d101      	bne.n	800b458 <memchr+0x12>
 800b454:	2000      	movs	r0, #0
 800b456:	e003      	b.n	800b460 <memchr+0x1a>
 800b458:	7804      	ldrb	r4, [r0, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	428c      	cmp	r4, r1
 800b45e:	d1f6      	bne.n	800b44e <memchr+0x8>
 800b460:	bd10      	pop	{r4, pc}

0800b462 <memcpy>:
 800b462:	440a      	add	r2, r1
 800b464:	4291      	cmp	r1, r2
 800b466:	f100 33ff 	add.w	r3, r0, #4294967295
 800b46a:	d100      	bne.n	800b46e <memcpy+0xc>
 800b46c:	4770      	bx	lr
 800b46e:	b510      	push	{r4, lr}
 800b470:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b474:	4291      	cmp	r1, r2
 800b476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b47a:	d1f9      	bne.n	800b470 <memcpy+0xe>
 800b47c:	bd10      	pop	{r4, pc}
	...

0800b480 <__assert_func>:
 800b480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b482:	4614      	mov	r4, r2
 800b484:	461a      	mov	r2, r3
 800b486:	4b09      	ldr	r3, [pc, #36]	@ (800b4ac <__assert_func+0x2c>)
 800b488:	4605      	mov	r5, r0
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68d8      	ldr	r0, [r3, #12]
 800b48e:	b954      	cbnz	r4, 800b4a6 <__assert_func+0x26>
 800b490:	4b07      	ldr	r3, [pc, #28]	@ (800b4b0 <__assert_func+0x30>)
 800b492:	461c      	mov	r4, r3
 800b494:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b498:	9100      	str	r1, [sp, #0]
 800b49a:	462b      	mov	r3, r5
 800b49c:	4905      	ldr	r1, [pc, #20]	@ (800b4b4 <__assert_func+0x34>)
 800b49e:	f001 fc2d 	bl	800ccfc <fiprintf>
 800b4a2:	f001 fcc1 	bl	800ce28 <abort>
 800b4a6:	4b04      	ldr	r3, [pc, #16]	@ (800b4b8 <__assert_func+0x38>)
 800b4a8:	e7f4      	b.n	800b494 <__assert_func+0x14>
 800b4aa:	bf00      	nop
 800b4ac:	2000019c 	.word	0x2000019c
 800b4b0:	0800dc11 	.word	0x0800dc11
 800b4b4:	0800dbe3 	.word	0x0800dbe3
 800b4b8:	0800dbd6 	.word	0x0800dbd6

0800b4bc <quorem>:
 800b4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	6903      	ldr	r3, [r0, #16]
 800b4c2:	690c      	ldr	r4, [r1, #16]
 800b4c4:	4607      	mov	r7, r0
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	db7e      	blt.n	800b5c8 <quorem+0x10c>
 800b4ca:	3c01      	subs	r4, #1
 800b4cc:	00a3      	lsls	r3, r4, #2
 800b4ce:	f100 0514 	add.w	r5, r0, #20
 800b4d2:	f101 0814 	add.w	r8, r1, #20
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4f2:	d32e      	bcc.n	800b552 <quorem+0x96>
 800b4f4:	f04f 0a00 	mov.w	sl, #0
 800b4f8:	46c4      	mov	ip, r8
 800b4fa:	46ae      	mov	lr, r5
 800b4fc:	46d3      	mov	fp, sl
 800b4fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b502:	b298      	uxth	r0, r3
 800b504:	fb06 a000 	mla	r0, r6, r0, sl
 800b508:	0c1b      	lsrs	r3, r3, #16
 800b50a:	0c02      	lsrs	r2, r0, #16
 800b50c:	fb06 2303 	mla	r3, r6, r3, r2
 800b510:	f8de 2000 	ldr.w	r2, [lr]
 800b514:	b280      	uxth	r0, r0
 800b516:	b292      	uxth	r2, r2
 800b518:	1a12      	subs	r2, r2, r0
 800b51a:	445a      	add	r2, fp
 800b51c:	f8de 0000 	ldr.w	r0, [lr]
 800b520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b524:	b29b      	uxth	r3, r3
 800b526:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b52a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b52e:	b292      	uxth	r2, r2
 800b530:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b534:	45e1      	cmp	r9, ip
 800b536:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b53a:	f84e 2b04 	str.w	r2, [lr], #4
 800b53e:	d2de      	bcs.n	800b4fe <quorem+0x42>
 800b540:	9b00      	ldr	r3, [sp, #0]
 800b542:	58eb      	ldr	r3, [r5, r3]
 800b544:	b92b      	cbnz	r3, 800b552 <quorem+0x96>
 800b546:	9b01      	ldr	r3, [sp, #4]
 800b548:	3b04      	subs	r3, #4
 800b54a:	429d      	cmp	r5, r3
 800b54c:	461a      	mov	r2, r3
 800b54e:	d32f      	bcc.n	800b5b0 <quorem+0xf4>
 800b550:	613c      	str	r4, [r7, #16]
 800b552:	4638      	mov	r0, r7
 800b554:	f001 f8d6 	bl	800c704 <__mcmp>
 800b558:	2800      	cmp	r0, #0
 800b55a:	db25      	blt.n	800b5a8 <quorem+0xec>
 800b55c:	4629      	mov	r1, r5
 800b55e:	2000      	movs	r0, #0
 800b560:	f858 2b04 	ldr.w	r2, [r8], #4
 800b564:	f8d1 c000 	ldr.w	ip, [r1]
 800b568:	fa1f fe82 	uxth.w	lr, r2
 800b56c:	fa1f f38c 	uxth.w	r3, ip
 800b570:	eba3 030e 	sub.w	r3, r3, lr
 800b574:	4403      	add	r3, r0
 800b576:	0c12      	lsrs	r2, r2, #16
 800b578:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b57c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b580:	b29b      	uxth	r3, r3
 800b582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b586:	45c1      	cmp	r9, r8
 800b588:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b58c:	f841 3b04 	str.w	r3, [r1], #4
 800b590:	d2e6      	bcs.n	800b560 <quorem+0xa4>
 800b592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b59a:	b922      	cbnz	r2, 800b5a6 <quorem+0xea>
 800b59c:	3b04      	subs	r3, #4
 800b59e:	429d      	cmp	r5, r3
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	d30b      	bcc.n	800b5bc <quorem+0x100>
 800b5a4:	613c      	str	r4, [r7, #16]
 800b5a6:	3601      	adds	r6, #1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	b003      	add	sp, #12
 800b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b0:	6812      	ldr	r2, [r2, #0]
 800b5b2:	3b04      	subs	r3, #4
 800b5b4:	2a00      	cmp	r2, #0
 800b5b6:	d1cb      	bne.n	800b550 <quorem+0x94>
 800b5b8:	3c01      	subs	r4, #1
 800b5ba:	e7c6      	b.n	800b54a <quorem+0x8e>
 800b5bc:	6812      	ldr	r2, [r2, #0]
 800b5be:	3b04      	subs	r3, #4
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	d1ef      	bne.n	800b5a4 <quorem+0xe8>
 800b5c4:	3c01      	subs	r4, #1
 800b5c6:	e7ea      	b.n	800b59e <quorem+0xe2>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e7ee      	b.n	800b5aa <quorem+0xee>
 800b5cc:	0000      	movs	r0, r0
	...

0800b5d0 <_dtoa_r>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	461d      	mov	r5, r3
 800b5d8:	69c7      	ldr	r7, [r0, #28]
 800b5da:	b097      	sub	sp, #92	@ 0x5c
 800b5dc:	4683      	mov	fp, r0
 800b5de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b5e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b5e4:	b97f      	cbnz	r7, 800b606 <_dtoa_r+0x36>
 800b5e6:	2010      	movs	r0, #16
 800b5e8:	f7fe ff82 	bl	800a4f0 <malloc>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	f8cb 001c 	str.w	r0, [fp, #28]
 800b5f2:	b920      	cbnz	r0, 800b5fe <_dtoa_r+0x2e>
 800b5f4:	21ef      	movs	r1, #239	@ 0xef
 800b5f6:	4ba8      	ldr	r3, [pc, #672]	@ (800b898 <_dtoa_r+0x2c8>)
 800b5f8:	48a8      	ldr	r0, [pc, #672]	@ (800b89c <_dtoa_r+0x2cc>)
 800b5fa:	f7ff ff41 	bl	800b480 <__assert_func>
 800b5fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b602:	6007      	str	r7, [r0, #0]
 800b604:	60c7      	str	r7, [r0, #12]
 800b606:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b60a:	6819      	ldr	r1, [r3, #0]
 800b60c:	b159      	cbz	r1, 800b626 <_dtoa_r+0x56>
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	2301      	movs	r3, #1
 800b612:	4093      	lsls	r3, r2
 800b614:	604a      	str	r2, [r1, #4]
 800b616:	608b      	str	r3, [r1, #8]
 800b618:	4658      	mov	r0, fp
 800b61a:	f000 fe3b 	bl	800c294 <_Bfree>
 800b61e:	2200      	movs	r2, #0
 800b620:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	1e2b      	subs	r3, r5, #0
 800b628:	bfaf      	iteee	ge
 800b62a:	2300      	movge	r3, #0
 800b62c:	2201      	movlt	r2, #1
 800b62e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b632:	9303      	strlt	r3, [sp, #12]
 800b634:	bfa8      	it	ge
 800b636:	6033      	strge	r3, [r6, #0]
 800b638:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b63c:	4b98      	ldr	r3, [pc, #608]	@ (800b8a0 <_dtoa_r+0x2d0>)
 800b63e:	bfb8      	it	lt
 800b640:	6032      	strlt	r2, [r6, #0]
 800b642:	ea33 0308 	bics.w	r3, r3, r8
 800b646:	d112      	bne.n	800b66e <_dtoa_r+0x9e>
 800b648:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b64c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b654:	4323      	orrs	r3, r4
 800b656:	f000 8550 	beq.w	800c0fa <_dtoa_r+0xb2a>
 800b65a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b65c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b8a4 <_dtoa_r+0x2d4>
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 8552 	beq.w	800c10a <_dtoa_r+0xb3a>
 800b666:	f10a 0303 	add.w	r3, sl, #3
 800b66a:	f000 bd4c 	b.w	800c106 <_dtoa_r+0xb36>
 800b66e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b672:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b67a:	2200      	movs	r2, #0
 800b67c:	2300      	movs	r3, #0
 800b67e:	f7f5 f993 	bl	80009a8 <__aeabi_dcmpeq>
 800b682:	4607      	mov	r7, r0
 800b684:	b158      	cbz	r0, 800b69e <_dtoa_r+0xce>
 800b686:	2301      	movs	r3, #1
 800b688:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b68e:	b113      	cbz	r3, 800b696 <_dtoa_r+0xc6>
 800b690:	4b85      	ldr	r3, [pc, #532]	@ (800b8a8 <_dtoa_r+0x2d8>)
 800b692:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b8ac <_dtoa_r+0x2dc>
 800b69a:	f000 bd36 	b.w	800c10a <_dtoa_r+0xb3a>
 800b69e:	ab14      	add	r3, sp, #80	@ 0x50
 800b6a0:	9301      	str	r3, [sp, #4]
 800b6a2:	ab15      	add	r3, sp, #84	@ 0x54
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	4658      	mov	r0, fp
 800b6a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6ac:	f001 f8da 	bl	800c864 <__d2b>
 800b6b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b6b4:	4681      	mov	r9, r0
 800b6b6:	2e00      	cmp	r6, #0
 800b6b8:	d077      	beq.n	800b7aa <_dtoa_r+0x1da>
 800b6ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b6c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b6cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b6d0:	9712      	str	r7, [sp, #72]	@ 0x48
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4b76      	ldr	r3, [pc, #472]	@ (800b8b0 <_dtoa_r+0x2e0>)
 800b6d8:	f7f4 fd46 	bl	8000168 <__aeabi_dsub>
 800b6dc:	a368      	add	r3, pc, #416	@ (adr r3, 800b880 <_dtoa_r+0x2b0>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	f7f4 fef9 	bl	80004d8 <__aeabi_dmul>
 800b6e6:	a368      	add	r3, pc, #416	@ (adr r3, 800b888 <_dtoa_r+0x2b8>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 fd3e 	bl	800016c <__adddf3>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	460d      	mov	r5, r1
 800b6f6:	f7f4 fe85 	bl	8000404 <__aeabi_i2d>
 800b6fa:	a365      	add	r3, pc, #404	@ (adr r3, 800b890 <_dtoa_r+0x2c0>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f7f4 feea 	bl	80004d8 <__aeabi_dmul>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7f4 fd2e 	bl	800016c <__adddf3>
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	f7f5 f990 	bl	8000a38 <__aeabi_d2iz>
 800b718:	2200      	movs	r2, #0
 800b71a:	4607      	mov	r7, r0
 800b71c:	2300      	movs	r3, #0
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f5 f94b 	bl	80009bc <__aeabi_dcmplt>
 800b726:	b140      	cbz	r0, 800b73a <_dtoa_r+0x16a>
 800b728:	4638      	mov	r0, r7
 800b72a:	f7f4 fe6b 	bl	8000404 <__aeabi_i2d>
 800b72e:	4622      	mov	r2, r4
 800b730:	462b      	mov	r3, r5
 800b732:	f7f5 f939 	bl	80009a8 <__aeabi_dcmpeq>
 800b736:	b900      	cbnz	r0, 800b73a <_dtoa_r+0x16a>
 800b738:	3f01      	subs	r7, #1
 800b73a:	2f16      	cmp	r7, #22
 800b73c:	d853      	bhi.n	800b7e6 <_dtoa_r+0x216>
 800b73e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b742:	4b5c      	ldr	r3, [pc, #368]	@ (800b8b4 <_dtoa_r+0x2e4>)
 800b744:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f7f5 f936 	bl	80009bc <__aeabi_dcmplt>
 800b750:	2800      	cmp	r0, #0
 800b752:	d04a      	beq.n	800b7ea <_dtoa_r+0x21a>
 800b754:	2300      	movs	r3, #0
 800b756:	3f01      	subs	r7, #1
 800b758:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b75a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b75c:	1b9b      	subs	r3, r3, r6
 800b75e:	1e5a      	subs	r2, r3, #1
 800b760:	bf46      	itte	mi
 800b762:	f1c3 0801 	rsbmi	r8, r3, #1
 800b766:	2300      	movmi	r3, #0
 800b768:	f04f 0800 	movpl.w	r8, #0
 800b76c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b76e:	bf48      	it	mi
 800b770:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b772:	2f00      	cmp	r7, #0
 800b774:	db3b      	blt.n	800b7ee <_dtoa_r+0x21e>
 800b776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b778:	970e      	str	r7, [sp, #56]	@ 0x38
 800b77a:	443b      	add	r3, r7
 800b77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b77e:	2300      	movs	r3, #0
 800b780:	930a      	str	r3, [sp, #40]	@ 0x28
 800b782:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b784:	2b09      	cmp	r3, #9
 800b786:	d866      	bhi.n	800b856 <_dtoa_r+0x286>
 800b788:	2b05      	cmp	r3, #5
 800b78a:	bfc4      	itt	gt
 800b78c:	3b04      	subgt	r3, #4
 800b78e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b790:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b792:	bfc8      	it	gt
 800b794:	2400      	movgt	r4, #0
 800b796:	f1a3 0302 	sub.w	r3, r3, #2
 800b79a:	bfd8      	it	le
 800b79c:	2401      	movle	r4, #1
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d864      	bhi.n	800b86c <_dtoa_r+0x29c>
 800b7a2:	e8df f003 	tbb	[pc, r3]
 800b7a6:	382b      	.short	0x382b
 800b7a8:	5636      	.short	0x5636
 800b7aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b7ae:	441e      	add	r6, r3
 800b7b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b7b4:	2b20      	cmp	r3, #32
 800b7b6:	bfc1      	itttt	gt
 800b7b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b7bc:	fa08 f803 	lslgt.w	r8, r8, r3
 800b7c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b7c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b7c8:	bfd6      	itet	le
 800b7ca:	f1c3 0320 	rsble	r3, r3, #32
 800b7ce:	ea48 0003 	orrgt.w	r0, r8, r3
 800b7d2:	fa04 f003 	lslle.w	r0, r4, r3
 800b7d6:	f7f4 fe05 	bl	80003e4 <__aeabi_ui2d>
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b7e0:	3e01      	subs	r6, #1
 800b7e2:	9212      	str	r2, [sp, #72]	@ 0x48
 800b7e4:	e775      	b.n	800b6d2 <_dtoa_r+0x102>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e7b6      	b.n	800b758 <_dtoa_r+0x188>
 800b7ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b7ec:	e7b5      	b.n	800b75a <_dtoa_r+0x18a>
 800b7ee:	427b      	negs	r3, r7
 800b7f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	eba8 0807 	sub.w	r8, r8, r7
 800b7f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b7fa:	e7c2      	b.n	800b782 <_dtoa_r+0x1b2>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b800:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b802:	2b00      	cmp	r3, #0
 800b804:	dc35      	bgt.n	800b872 <_dtoa_r+0x2a2>
 800b806:	2301      	movs	r3, #1
 800b808:	461a      	mov	r2, r3
 800b80a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b80e:	9221      	str	r2, [sp, #132]	@ 0x84
 800b810:	e00b      	b.n	800b82a <_dtoa_r+0x25a>
 800b812:	2301      	movs	r3, #1
 800b814:	e7f3      	b.n	800b7fe <_dtoa_r+0x22e>
 800b816:	2300      	movs	r3, #0
 800b818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b81a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b81c:	18fb      	adds	r3, r7, r3
 800b81e:	9308      	str	r3, [sp, #32]
 800b820:	3301      	adds	r3, #1
 800b822:	2b01      	cmp	r3, #1
 800b824:	9307      	str	r3, [sp, #28]
 800b826:	bfb8      	it	lt
 800b828:	2301      	movlt	r3, #1
 800b82a:	2100      	movs	r1, #0
 800b82c:	2204      	movs	r2, #4
 800b82e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b832:	f102 0514 	add.w	r5, r2, #20
 800b836:	429d      	cmp	r5, r3
 800b838:	d91f      	bls.n	800b87a <_dtoa_r+0x2aa>
 800b83a:	6041      	str	r1, [r0, #4]
 800b83c:	4658      	mov	r0, fp
 800b83e:	f000 fce9 	bl	800c214 <_Balloc>
 800b842:	4682      	mov	sl, r0
 800b844:	2800      	cmp	r0, #0
 800b846:	d139      	bne.n	800b8bc <_dtoa_r+0x2ec>
 800b848:	4602      	mov	r2, r0
 800b84a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b84e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b8 <_dtoa_r+0x2e8>)
 800b850:	e6d2      	b.n	800b5f8 <_dtoa_r+0x28>
 800b852:	2301      	movs	r3, #1
 800b854:	e7e0      	b.n	800b818 <_dtoa_r+0x248>
 800b856:	2401      	movs	r4, #1
 800b858:	2300      	movs	r3, #0
 800b85a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b85c:	9320      	str	r3, [sp, #128]	@ 0x80
 800b85e:	f04f 33ff 	mov.w	r3, #4294967295
 800b862:	2200      	movs	r2, #0
 800b864:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b868:	2312      	movs	r3, #18
 800b86a:	e7d0      	b.n	800b80e <_dtoa_r+0x23e>
 800b86c:	2301      	movs	r3, #1
 800b86e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b870:	e7f5      	b.n	800b85e <_dtoa_r+0x28e>
 800b872:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b874:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b878:	e7d7      	b.n	800b82a <_dtoa_r+0x25a>
 800b87a:	3101      	adds	r1, #1
 800b87c:	0052      	lsls	r2, r2, #1
 800b87e:	e7d8      	b.n	800b832 <_dtoa_r+0x262>
 800b880:	636f4361 	.word	0x636f4361
 800b884:	3fd287a7 	.word	0x3fd287a7
 800b888:	8b60c8b3 	.word	0x8b60c8b3
 800b88c:	3fc68a28 	.word	0x3fc68a28
 800b890:	509f79fb 	.word	0x509f79fb
 800b894:	3fd34413 	.word	0x3fd34413
 800b898:	0800dc1f 	.word	0x0800dc1f
 800b89c:	0800dc36 	.word	0x0800dc36
 800b8a0:	7ff00000 	.word	0x7ff00000
 800b8a4:	0800dc1b 	.word	0x0800dc1b
 800b8a8:	0800dba9 	.word	0x0800dba9
 800b8ac:	0800dba8 	.word	0x0800dba8
 800b8b0:	3ff80000 	.word	0x3ff80000
 800b8b4:	0800dd30 	.word	0x0800dd30
 800b8b8:	0800dc8e 	.word	0x0800dc8e
 800b8bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8c0:	6018      	str	r0, [r3, #0]
 800b8c2:	9b07      	ldr	r3, [sp, #28]
 800b8c4:	2b0e      	cmp	r3, #14
 800b8c6:	f200 80a4 	bhi.w	800ba12 <_dtoa_r+0x442>
 800b8ca:	2c00      	cmp	r4, #0
 800b8cc:	f000 80a1 	beq.w	800ba12 <_dtoa_r+0x442>
 800b8d0:	2f00      	cmp	r7, #0
 800b8d2:	dd33      	ble.n	800b93c <_dtoa_r+0x36c>
 800b8d4:	4b86      	ldr	r3, [pc, #536]	@ (800baf0 <_dtoa_r+0x520>)
 800b8d6:	f007 020f 	and.w	r2, r7, #15
 800b8da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8de:	05f8      	lsls	r0, r7, #23
 800b8e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b8e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b8ec:	d516      	bpl.n	800b91c <_dtoa_r+0x34c>
 800b8ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8f2:	4b80      	ldr	r3, [pc, #512]	@ (800baf4 <_dtoa_r+0x524>)
 800b8f4:	2603      	movs	r6, #3
 800b8f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8fa:	f7f4 ff17 	bl	800072c <__aeabi_ddiv>
 800b8fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b902:	f004 040f 	and.w	r4, r4, #15
 800b906:	4d7b      	ldr	r5, [pc, #492]	@ (800baf4 <_dtoa_r+0x524>)
 800b908:	b954      	cbnz	r4, 800b920 <_dtoa_r+0x350>
 800b90a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b912:	f7f4 ff0b 	bl	800072c <__aeabi_ddiv>
 800b916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b91a:	e028      	b.n	800b96e <_dtoa_r+0x39e>
 800b91c:	2602      	movs	r6, #2
 800b91e:	e7f2      	b.n	800b906 <_dtoa_r+0x336>
 800b920:	07e1      	lsls	r1, r4, #31
 800b922:	d508      	bpl.n	800b936 <_dtoa_r+0x366>
 800b924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b928:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b92c:	f7f4 fdd4 	bl	80004d8 <__aeabi_dmul>
 800b930:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b934:	3601      	adds	r6, #1
 800b936:	1064      	asrs	r4, r4, #1
 800b938:	3508      	adds	r5, #8
 800b93a:	e7e5      	b.n	800b908 <_dtoa_r+0x338>
 800b93c:	f000 80d2 	beq.w	800bae4 <_dtoa_r+0x514>
 800b940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b944:	427c      	negs	r4, r7
 800b946:	4b6a      	ldr	r3, [pc, #424]	@ (800baf0 <_dtoa_r+0x520>)
 800b948:	f004 020f 	and.w	r2, r4, #15
 800b94c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fdc0 	bl	80004d8 <__aeabi_dmul>
 800b958:	2602      	movs	r6, #2
 800b95a:	2300      	movs	r3, #0
 800b95c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b960:	4d64      	ldr	r5, [pc, #400]	@ (800baf4 <_dtoa_r+0x524>)
 800b962:	1124      	asrs	r4, r4, #4
 800b964:	2c00      	cmp	r4, #0
 800b966:	f040 80b2 	bne.w	800bace <_dtoa_r+0x4fe>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1d3      	bne.n	800b916 <_dtoa_r+0x346>
 800b96e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 80b7 	beq.w	800bae8 <_dtoa_r+0x518>
 800b97a:	2200      	movs	r2, #0
 800b97c:	4620      	mov	r0, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	4b5d      	ldr	r3, [pc, #372]	@ (800baf8 <_dtoa_r+0x528>)
 800b982:	f7f5 f81b 	bl	80009bc <__aeabi_dcmplt>
 800b986:	2800      	cmp	r0, #0
 800b988:	f000 80ae 	beq.w	800bae8 <_dtoa_r+0x518>
 800b98c:	9b07      	ldr	r3, [sp, #28]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 80aa 	beq.w	800bae8 <_dtoa_r+0x518>
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dd37      	ble.n	800ba0a <_dtoa_r+0x43a>
 800b99a:	1e7b      	subs	r3, r7, #1
 800b99c:	4620      	mov	r0, r4
 800b99e:	9304      	str	r3, [sp, #16]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4b55      	ldr	r3, [pc, #340]	@ (800bafc <_dtoa_r+0x52c>)
 800b9a6:	f7f4 fd97 	bl	80004d8 <__aeabi_dmul>
 800b9aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9ae:	9c08      	ldr	r4, [sp, #32]
 800b9b0:	3601      	adds	r6, #1
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7f4 fd26 	bl	8000404 <__aeabi_i2d>
 800b9b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9bc:	f7f4 fd8c 	bl	80004d8 <__aeabi_dmul>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4b4f      	ldr	r3, [pc, #316]	@ (800bb00 <_dtoa_r+0x530>)
 800b9c4:	f7f4 fbd2 	bl	800016c <__adddf3>
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b9ce:	2c00      	cmp	r4, #0
 800b9d0:	f040 809a 	bne.w	800bb08 <_dtoa_r+0x538>
 800b9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	4b4a      	ldr	r3, [pc, #296]	@ (800bb04 <_dtoa_r+0x534>)
 800b9dc:	f7f4 fbc4 	bl	8000168 <__aeabi_dsub>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4633      	mov	r3, r6
 800b9ec:	f7f5 f804 	bl	80009f8 <__aeabi_dcmpgt>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	f040 828e 	bne.w	800bf12 <_dtoa_r+0x942>
 800b9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9fa:	462a      	mov	r2, r5
 800b9fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba00:	f7f4 ffdc 	bl	80009bc <__aeabi_dcmplt>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	f040 8127 	bne.w	800bc58 <_dtoa_r+0x688>
 800ba0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ba0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f2c0 8163 	blt.w	800bce0 <_dtoa_r+0x710>
 800ba1a:	2f0e      	cmp	r7, #14
 800ba1c:	f300 8160 	bgt.w	800bce0 <_dtoa_r+0x710>
 800ba20:	4b33      	ldr	r3, [pc, #204]	@ (800baf0 <_dtoa_r+0x520>)
 800ba22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba26:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	da03      	bge.n	800ba3c <_dtoa_r+0x46c>
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f340 8100 	ble.w	800bc3c <_dtoa_r+0x66c>
 800ba3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba40:	4656      	mov	r6, sl
 800ba42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba46:	4620      	mov	r0, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f4 fe6f 	bl	800072c <__aeabi_ddiv>
 800ba4e:	f7f4 fff3 	bl	8000a38 <__aeabi_d2iz>
 800ba52:	4680      	mov	r8, r0
 800ba54:	f7f4 fcd6 	bl	8000404 <__aeabi_i2d>
 800ba58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba5c:	f7f4 fd3c 	bl	80004d8 <__aeabi_dmul>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4620      	mov	r0, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7f4 fb7e 	bl	8000168 <__aeabi_dsub>
 800ba6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba70:	9d07      	ldr	r5, [sp, #28]
 800ba72:	f806 4b01 	strb.w	r4, [r6], #1
 800ba76:	eba6 040a 	sub.w	r4, r6, sl
 800ba7a:	42a5      	cmp	r5, r4
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	f040 8116 	bne.w	800bcb0 <_dtoa_r+0x6e0>
 800ba84:	f7f4 fb72 	bl	800016c <__adddf3>
 800ba88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	f7f4 ffb2 	bl	80009f8 <__aeabi_dcmpgt>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	f040 80f8 	bne.w	800bc8a <_dtoa_r+0x6ba>
 800ba9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	4629      	mov	r1, r5
 800baa2:	f7f4 ff81 	bl	80009a8 <__aeabi_dcmpeq>
 800baa6:	b118      	cbz	r0, 800bab0 <_dtoa_r+0x4e0>
 800baa8:	f018 0f01 	tst.w	r8, #1
 800baac:	f040 80ed 	bne.w	800bc8a <_dtoa_r+0x6ba>
 800bab0:	4649      	mov	r1, r9
 800bab2:	4658      	mov	r0, fp
 800bab4:	f000 fbee 	bl	800c294 <_Bfree>
 800bab8:	2300      	movs	r3, #0
 800baba:	7033      	strb	r3, [r6, #0]
 800babc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800babe:	3701      	adds	r7, #1
 800bac0:	601f      	str	r7, [r3, #0]
 800bac2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 8320 	beq.w	800c10a <_dtoa_r+0xb3a>
 800baca:	601e      	str	r6, [r3, #0]
 800bacc:	e31d      	b.n	800c10a <_dtoa_r+0xb3a>
 800bace:	07e2      	lsls	r2, r4, #31
 800bad0:	d505      	bpl.n	800bade <_dtoa_r+0x50e>
 800bad2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bad6:	f7f4 fcff 	bl	80004d8 <__aeabi_dmul>
 800bada:	2301      	movs	r3, #1
 800badc:	3601      	adds	r6, #1
 800bade:	1064      	asrs	r4, r4, #1
 800bae0:	3508      	adds	r5, #8
 800bae2:	e73f      	b.n	800b964 <_dtoa_r+0x394>
 800bae4:	2602      	movs	r6, #2
 800bae6:	e742      	b.n	800b96e <_dtoa_r+0x39e>
 800bae8:	9c07      	ldr	r4, [sp, #28]
 800baea:	9704      	str	r7, [sp, #16]
 800baec:	e761      	b.n	800b9b2 <_dtoa_r+0x3e2>
 800baee:	bf00      	nop
 800baf0:	0800dd30 	.word	0x0800dd30
 800baf4:	0800dd08 	.word	0x0800dd08
 800baf8:	3ff00000 	.word	0x3ff00000
 800bafc:	40240000 	.word	0x40240000
 800bb00:	401c0000 	.word	0x401c0000
 800bb04:	40140000 	.word	0x40140000
 800bb08:	4b70      	ldr	r3, [pc, #448]	@ (800bccc <_dtoa_r+0x6fc>)
 800bb0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb14:	4454      	add	r4, sl
 800bb16:	2900      	cmp	r1, #0
 800bb18:	d045      	beq.n	800bba6 <_dtoa_r+0x5d6>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	496c      	ldr	r1, [pc, #432]	@ (800bcd0 <_dtoa_r+0x700>)
 800bb1e:	f7f4 fe05 	bl	800072c <__aeabi_ddiv>
 800bb22:	4633      	mov	r3, r6
 800bb24:	462a      	mov	r2, r5
 800bb26:	f7f4 fb1f 	bl	8000168 <__aeabi_dsub>
 800bb2a:	4656      	mov	r6, sl
 800bb2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb34:	f7f4 ff80 	bl	8000a38 <__aeabi_d2iz>
 800bb38:	4605      	mov	r5, r0
 800bb3a:	f7f4 fc63 	bl	8000404 <__aeabi_i2d>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb46:	f7f4 fb0f 	bl	8000168 <__aeabi_dsub>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	3530      	adds	r5, #48	@ 0x30
 800bb50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb58:	f806 5b01 	strb.w	r5, [r6], #1
 800bb5c:	f7f4 ff2e 	bl	80009bc <__aeabi_dcmplt>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d163      	bne.n	800bc2c <_dtoa_r+0x65c>
 800bb64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb68:	2000      	movs	r0, #0
 800bb6a:	495a      	ldr	r1, [pc, #360]	@ (800bcd4 <_dtoa_r+0x704>)
 800bb6c:	f7f4 fafc 	bl	8000168 <__aeabi_dsub>
 800bb70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb74:	f7f4 ff22 	bl	80009bc <__aeabi_dcmplt>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	f040 8087 	bne.w	800bc8c <_dtoa_r+0x6bc>
 800bb7e:	42a6      	cmp	r6, r4
 800bb80:	f43f af43 	beq.w	800ba0a <_dtoa_r+0x43a>
 800bb84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4b53      	ldr	r3, [pc, #332]	@ (800bcd8 <_dtoa_r+0x708>)
 800bb8c:	f7f4 fca4 	bl	80004d8 <__aeabi_dmul>
 800bb90:	2200      	movs	r2, #0
 800bb92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9a:	4b4f      	ldr	r3, [pc, #316]	@ (800bcd8 <_dtoa_r+0x708>)
 800bb9c:	f7f4 fc9c 	bl	80004d8 <__aeabi_dmul>
 800bba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bba4:	e7c4      	b.n	800bb30 <_dtoa_r+0x560>
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f7f4 fc95 	bl	80004d8 <__aeabi_dmul>
 800bbae:	4656      	mov	r6, sl
 800bbb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbb4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbba:	f7f4 ff3d 	bl	8000a38 <__aeabi_d2iz>
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	f7f4 fc20 	bl	8000404 <__aeabi_i2d>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbcc:	f7f4 facc 	bl	8000168 <__aeabi_dsub>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	3530      	adds	r5, #48	@ 0x30
 800bbd6:	f806 5b01 	strb.w	r5, [r6], #1
 800bbda:	42a6      	cmp	r6, r4
 800bbdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	d124      	bne.n	800bc30 <_dtoa_r+0x660>
 800bbe6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbea:	4b39      	ldr	r3, [pc, #228]	@ (800bcd0 <_dtoa_r+0x700>)
 800bbec:	f7f4 fabe 	bl	800016c <__adddf3>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf8:	f7f4 fefe 	bl	80009f8 <__aeabi_dcmpgt>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d145      	bne.n	800bc8c <_dtoa_r+0x6bc>
 800bc00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc04:	2000      	movs	r0, #0
 800bc06:	4932      	ldr	r1, [pc, #200]	@ (800bcd0 <_dtoa_r+0x700>)
 800bc08:	f7f4 faae 	bl	8000168 <__aeabi_dsub>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc14:	f7f4 fed2 	bl	80009bc <__aeabi_dcmplt>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	f43f aef6 	beq.w	800ba0a <_dtoa_r+0x43a>
 800bc1e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bc20:	1e73      	subs	r3, r6, #1
 800bc22:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc28:	2b30      	cmp	r3, #48	@ 0x30
 800bc2a:	d0f8      	beq.n	800bc1e <_dtoa_r+0x64e>
 800bc2c:	9f04      	ldr	r7, [sp, #16]
 800bc2e:	e73f      	b.n	800bab0 <_dtoa_r+0x4e0>
 800bc30:	4b29      	ldr	r3, [pc, #164]	@ (800bcd8 <_dtoa_r+0x708>)
 800bc32:	f7f4 fc51 	bl	80004d8 <__aeabi_dmul>
 800bc36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc3a:	e7bc      	b.n	800bbb6 <_dtoa_r+0x5e6>
 800bc3c:	d10c      	bne.n	800bc58 <_dtoa_r+0x688>
 800bc3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc42:	2200      	movs	r2, #0
 800bc44:	4b25      	ldr	r3, [pc, #148]	@ (800bcdc <_dtoa_r+0x70c>)
 800bc46:	f7f4 fc47 	bl	80004d8 <__aeabi_dmul>
 800bc4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc4e:	f7f4 fec9 	bl	80009e4 <__aeabi_dcmpge>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f000 815b 	beq.w	800bf0e <_dtoa_r+0x93e>
 800bc58:	2400      	movs	r4, #0
 800bc5a:	4625      	mov	r5, r4
 800bc5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc5e:	4656      	mov	r6, sl
 800bc60:	43db      	mvns	r3, r3
 800bc62:	9304      	str	r3, [sp, #16]
 800bc64:	2700      	movs	r7, #0
 800bc66:	4621      	mov	r1, r4
 800bc68:	4658      	mov	r0, fp
 800bc6a:	f000 fb13 	bl	800c294 <_Bfree>
 800bc6e:	2d00      	cmp	r5, #0
 800bc70:	d0dc      	beq.n	800bc2c <_dtoa_r+0x65c>
 800bc72:	b12f      	cbz	r7, 800bc80 <_dtoa_r+0x6b0>
 800bc74:	42af      	cmp	r7, r5
 800bc76:	d003      	beq.n	800bc80 <_dtoa_r+0x6b0>
 800bc78:	4639      	mov	r1, r7
 800bc7a:	4658      	mov	r0, fp
 800bc7c:	f000 fb0a 	bl	800c294 <_Bfree>
 800bc80:	4629      	mov	r1, r5
 800bc82:	4658      	mov	r0, fp
 800bc84:	f000 fb06 	bl	800c294 <_Bfree>
 800bc88:	e7d0      	b.n	800bc2c <_dtoa_r+0x65c>
 800bc8a:	9704      	str	r7, [sp, #16]
 800bc8c:	4633      	mov	r3, r6
 800bc8e:	461e      	mov	r6, r3
 800bc90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc94:	2a39      	cmp	r2, #57	@ 0x39
 800bc96:	d107      	bne.n	800bca8 <_dtoa_r+0x6d8>
 800bc98:	459a      	cmp	sl, r3
 800bc9a:	d1f8      	bne.n	800bc8e <_dtoa_r+0x6be>
 800bc9c:	9a04      	ldr	r2, [sp, #16]
 800bc9e:	3201      	adds	r2, #1
 800bca0:	9204      	str	r2, [sp, #16]
 800bca2:	2230      	movs	r2, #48	@ 0x30
 800bca4:	f88a 2000 	strb.w	r2, [sl]
 800bca8:	781a      	ldrb	r2, [r3, #0]
 800bcaa:	3201      	adds	r2, #1
 800bcac:	701a      	strb	r2, [r3, #0]
 800bcae:	e7bd      	b.n	800bc2c <_dtoa_r+0x65c>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4b09      	ldr	r3, [pc, #36]	@ (800bcd8 <_dtoa_r+0x708>)
 800bcb4:	f7f4 fc10 	bl	80004d8 <__aeabi_dmul>
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2300      	movs	r3, #0
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	460d      	mov	r5, r1
 800bcc0:	f7f4 fe72 	bl	80009a8 <__aeabi_dcmpeq>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f43f aebc 	beq.w	800ba42 <_dtoa_r+0x472>
 800bcca:	e6f1      	b.n	800bab0 <_dtoa_r+0x4e0>
 800bccc:	0800dd30 	.word	0x0800dd30
 800bcd0:	3fe00000 	.word	0x3fe00000
 800bcd4:	3ff00000 	.word	0x3ff00000
 800bcd8:	40240000 	.word	0x40240000
 800bcdc:	40140000 	.word	0x40140000
 800bce0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bce2:	2a00      	cmp	r2, #0
 800bce4:	f000 80db 	beq.w	800be9e <_dtoa_r+0x8ce>
 800bce8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bcea:	2a01      	cmp	r2, #1
 800bcec:	f300 80bf 	bgt.w	800be6e <_dtoa_r+0x89e>
 800bcf0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bcf2:	2a00      	cmp	r2, #0
 800bcf4:	f000 80b7 	beq.w	800be66 <_dtoa_r+0x896>
 800bcf8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bcfc:	4646      	mov	r6, r8
 800bcfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd02:	2101      	movs	r1, #1
 800bd04:	441a      	add	r2, r3
 800bd06:	4658      	mov	r0, fp
 800bd08:	4498      	add	r8, r3
 800bd0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd0c:	f000 fb76 	bl	800c3fc <__i2b>
 800bd10:	4605      	mov	r5, r0
 800bd12:	b15e      	cbz	r6, 800bd2c <_dtoa_r+0x75c>
 800bd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	dd08      	ble.n	800bd2c <_dtoa_r+0x75c>
 800bd1a:	42b3      	cmp	r3, r6
 800bd1c:	bfa8      	it	ge
 800bd1e:	4633      	movge	r3, r6
 800bd20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd22:	eba8 0803 	sub.w	r8, r8, r3
 800bd26:	1af6      	subs	r6, r6, r3
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd2e:	b1f3      	cbz	r3, 800bd6e <_dtoa_r+0x79e>
 800bd30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 80b7 	beq.w	800bea6 <_dtoa_r+0x8d6>
 800bd38:	b18c      	cbz	r4, 800bd5e <_dtoa_r+0x78e>
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	4658      	mov	r0, fp
 800bd40:	f000 fc1a 	bl	800c578 <__pow5mult>
 800bd44:	464a      	mov	r2, r9
 800bd46:	4601      	mov	r1, r0
 800bd48:	4605      	mov	r5, r0
 800bd4a:	4658      	mov	r0, fp
 800bd4c:	f000 fb6c 	bl	800c428 <__multiply>
 800bd50:	4649      	mov	r1, r9
 800bd52:	9004      	str	r0, [sp, #16]
 800bd54:	4658      	mov	r0, fp
 800bd56:	f000 fa9d 	bl	800c294 <_Bfree>
 800bd5a:	9b04      	ldr	r3, [sp, #16]
 800bd5c:	4699      	mov	r9, r3
 800bd5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd60:	1b1a      	subs	r2, r3, r4
 800bd62:	d004      	beq.n	800bd6e <_dtoa_r+0x79e>
 800bd64:	4649      	mov	r1, r9
 800bd66:	4658      	mov	r0, fp
 800bd68:	f000 fc06 	bl	800c578 <__pow5mult>
 800bd6c:	4681      	mov	r9, r0
 800bd6e:	2101      	movs	r1, #1
 800bd70:	4658      	mov	r0, fp
 800bd72:	f000 fb43 	bl	800c3fc <__i2b>
 800bd76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd78:	4604      	mov	r4, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 81c9 	beq.w	800c112 <_dtoa_r+0xb42>
 800bd80:	461a      	mov	r2, r3
 800bd82:	4601      	mov	r1, r0
 800bd84:	4658      	mov	r0, fp
 800bd86:	f000 fbf7 	bl	800c578 <__pow5mult>
 800bd8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	f300 808f 	bgt.w	800beb2 <_dtoa_r+0x8e2>
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 8087 	bne.w	800beaa <_dtoa_r+0x8da>
 800bd9c:	9b03      	ldr	r3, [sp, #12]
 800bd9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f040 8083 	bne.w	800beae <_dtoa_r+0x8de>
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bdae:	0d1b      	lsrs	r3, r3, #20
 800bdb0:	051b      	lsls	r3, r3, #20
 800bdb2:	b12b      	cbz	r3, 800bdc0 <_dtoa_r+0x7f0>
 800bdb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb6:	f108 0801 	add.w	r8, r8, #1
 800bdba:	3301      	adds	r3, #1
 800bdbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 81aa 	beq.w	800c11e <_dtoa_r+0xb4e>
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdd0:	6918      	ldr	r0, [r3, #16]
 800bdd2:	f000 fac7 	bl	800c364 <__hi0bits>
 800bdd6:	f1c0 0020 	rsb	r0, r0, #32
 800bdda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bddc:	4418      	add	r0, r3
 800bdde:	f010 001f 	ands.w	r0, r0, #31
 800bde2:	d071      	beq.n	800bec8 <_dtoa_r+0x8f8>
 800bde4:	f1c0 0320 	rsb	r3, r0, #32
 800bde8:	2b04      	cmp	r3, #4
 800bdea:	dd65      	ble.n	800beb8 <_dtoa_r+0x8e8>
 800bdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdee:	f1c0 001c 	rsb	r0, r0, #28
 800bdf2:	4403      	add	r3, r0
 800bdf4:	4480      	add	r8, r0
 800bdf6:	4406      	add	r6, r0
 800bdf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdfa:	f1b8 0f00 	cmp.w	r8, #0
 800bdfe:	dd05      	ble.n	800be0c <_dtoa_r+0x83c>
 800be00:	4649      	mov	r1, r9
 800be02:	4642      	mov	r2, r8
 800be04:	4658      	mov	r0, fp
 800be06:	f000 fc11 	bl	800c62c <__lshift>
 800be0a:	4681      	mov	r9, r0
 800be0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dd05      	ble.n	800be1e <_dtoa_r+0x84e>
 800be12:	4621      	mov	r1, r4
 800be14:	461a      	mov	r2, r3
 800be16:	4658      	mov	r0, fp
 800be18:	f000 fc08 	bl	800c62c <__lshift>
 800be1c:	4604      	mov	r4, r0
 800be1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be20:	2b00      	cmp	r3, #0
 800be22:	d053      	beq.n	800becc <_dtoa_r+0x8fc>
 800be24:	4621      	mov	r1, r4
 800be26:	4648      	mov	r0, r9
 800be28:	f000 fc6c 	bl	800c704 <__mcmp>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	da4d      	bge.n	800becc <_dtoa_r+0x8fc>
 800be30:	1e7b      	subs	r3, r7, #1
 800be32:	4649      	mov	r1, r9
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	220a      	movs	r2, #10
 800be38:	2300      	movs	r3, #0
 800be3a:	4658      	mov	r0, fp
 800be3c:	f000 fa4c 	bl	800c2d8 <__multadd>
 800be40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be42:	4681      	mov	r9, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 816c 	beq.w	800c122 <_dtoa_r+0xb52>
 800be4a:	2300      	movs	r3, #0
 800be4c:	4629      	mov	r1, r5
 800be4e:	220a      	movs	r2, #10
 800be50:	4658      	mov	r0, fp
 800be52:	f000 fa41 	bl	800c2d8 <__multadd>
 800be56:	9b08      	ldr	r3, [sp, #32]
 800be58:	4605      	mov	r5, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	dc61      	bgt.n	800bf22 <_dtoa_r+0x952>
 800be5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be60:	2b02      	cmp	r3, #2
 800be62:	dc3b      	bgt.n	800bedc <_dtoa_r+0x90c>
 800be64:	e05d      	b.n	800bf22 <_dtoa_r+0x952>
 800be66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be68:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800be6c:	e746      	b.n	800bcfc <_dtoa_r+0x72c>
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	1e5c      	subs	r4, r3, #1
 800be72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be74:	42a3      	cmp	r3, r4
 800be76:	bfbf      	itttt	lt
 800be78:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800be7a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800be7c:	1ae3      	sublt	r3, r4, r3
 800be7e:	18d2      	addlt	r2, r2, r3
 800be80:	bfa8      	it	ge
 800be82:	1b1c      	subge	r4, r3, r4
 800be84:	9b07      	ldr	r3, [sp, #28]
 800be86:	bfbe      	ittt	lt
 800be88:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800be8a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800be8c:	2400      	movlt	r4, #0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	bfb5      	itete	lt
 800be92:	eba8 0603 	sublt.w	r6, r8, r3
 800be96:	4646      	movge	r6, r8
 800be98:	2300      	movlt	r3, #0
 800be9a:	9b07      	ldrge	r3, [sp, #28]
 800be9c:	e730      	b.n	800bd00 <_dtoa_r+0x730>
 800be9e:	4646      	mov	r6, r8
 800bea0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bea2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bea4:	e735      	b.n	800bd12 <_dtoa_r+0x742>
 800bea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bea8:	e75c      	b.n	800bd64 <_dtoa_r+0x794>
 800beaa:	2300      	movs	r3, #0
 800beac:	e788      	b.n	800bdc0 <_dtoa_r+0x7f0>
 800beae:	9b02      	ldr	r3, [sp, #8]
 800beb0:	e786      	b.n	800bdc0 <_dtoa_r+0x7f0>
 800beb2:	2300      	movs	r3, #0
 800beb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800beb6:	e788      	b.n	800bdca <_dtoa_r+0x7fa>
 800beb8:	d09f      	beq.n	800bdfa <_dtoa_r+0x82a>
 800beba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bebc:	331c      	adds	r3, #28
 800bebe:	441a      	add	r2, r3
 800bec0:	4498      	add	r8, r3
 800bec2:	441e      	add	r6, r3
 800bec4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bec6:	e798      	b.n	800bdfa <_dtoa_r+0x82a>
 800bec8:	4603      	mov	r3, r0
 800beca:	e7f6      	b.n	800beba <_dtoa_r+0x8ea>
 800becc:	9b07      	ldr	r3, [sp, #28]
 800bece:	9704      	str	r7, [sp, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dc20      	bgt.n	800bf16 <_dtoa_r+0x946>
 800bed4:	9308      	str	r3, [sp, #32]
 800bed6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bed8:	2b02      	cmp	r3, #2
 800beda:	dd1e      	ble.n	800bf1a <_dtoa_r+0x94a>
 800bedc:	9b08      	ldr	r3, [sp, #32]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f47f aebc 	bne.w	800bc5c <_dtoa_r+0x68c>
 800bee4:	4621      	mov	r1, r4
 800bee6:	2205      	movs	r2, #5
 800bee8:	4658      	mov	r0, fp
 800beea:	f000 f9f5 	bl	800c2d8 <__multadd>
 800beee:	4601      	mov	r1, r0
 800bef0:	4604      	mov	r4, r0
 800bef2:	4648      	mov	r0, r9
 800bef4:	f000 fc06 	bl	800c704 <__mcmp>
 800bef8:	2800      	cmp	r0, #0
 800befa:	f77f aeaf 	ble.w	800bc5c <_dtoa_r+0x68c>
 800befe:	2331      	movs	r3, #49	@ 0x31
 800bf00:	4656      	mov	r6, sl
 800bf02:	f806 3b01 	strb.w	r3, [r6], #1
 800bf06:	9b04      	ldr	r3, [sp, #16]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	e6aa      	b.n	800bc64 <_dtoa_r+0x694>
 800bf0e:	9c07      	ldr	r4, [sp, #28]
 800bf10:	9704      	str	r7, [sp, #16]
 800bf12:	4625      	mov	r5, r4
 800bf14:	e7f3      	b.n	800befe <_dtoa_r+0x92e>
 800bf16:	9b07      	ldr	r3, [sp, #28]
 800bf18:	9308      	str	r3, [sp, #32]
 800bf1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 8104 	beq.w	800c12a <_dtoa_r+0xb5a>
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	dd05      	ble.n	800bf32 <_dtoa_r+0x962>
 800bf26:	4629      	mov	r1, r5
 800bf28:	4632      	mov	r2, r6
 800bf2a:	4658      	mov	r0, fp
 800bf2c:	f000 fb7e 	bl	800c62c <__lshift>
 800bf30:	4605      	mov	r5, r0
 800bf32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d05a      	beq.n	800bfee <_dtoa_r+0xa1e>
 800bf38:	4658      	mov	r0, fp
 800bf3a:	6869      	ldr	r1, [r5, #4]
 800bf3c:	f000 f96a 	bl	800c214 <_Balloc>
 800bf40:	4606      	mov	r6, r0
 800bf42:	b928      	cbnz	r0, 800bf50 <_dtoa_r+0x980>
 800bf44:	4602      	mov	r2, r0
 800bf46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf4a:	4b83      	ldr	r3, [pc, #524]	@ (800c158 <_dtoa_r+0xb88>)
 800bf4c:	f7ff bb54 	b.w	800b5f8 <_dtoa_r+0x28>
 800bf50:	692a      	ldr	r2, [r5, #16]
 800bf52:	f105 010c 	add.w	r1, r5, #12
 800bf56:	3202      	adds	r2, #2
 800bf58:	0092      	lsls	r2, r2, #2
 800bf5a:	300c      	adds	r0, #12
 800bf5c:	f7ff fa81 	bl	800b462 <memcpy>
 800bf60:	2201      	movs	r2, #1
 800bf62:	4631      	mov	r1, r6
 800bf64:	4658      	mov	r0, fp
 800bf66:	f000 fb61 	bl	800c62c <__lshift>
 800bf6a:	462f      	mov	r7, r5
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	f10a 0301 	add.w	r3, sl, #1
 800bf72:	9307      	str	r3, [sp, #28]
 800bf74:	9b08      	ldr	r3, [sp, #32]
 800bf76:	4453      	add	r3, sl
 800bf78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf7a:	9b02      	ldr	r3, [sp, #8]
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf82:	9b07      	ldr	r3, [sp, #28]
 800bf84:	4621      	mov	r1, r4
 800bf86:	3b01      	subs	r3, #1
 800bf88:	4648      	mov	r0, r9
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	f7ff fa96 	bl	800b4bc <quorem>
 800bf90:	4639      	mov	r1, r7
 800bf92:	9008      	str	r0, [sp, #32]
 800bf94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf98:	4648      	mov	r0, r9
 800bf9a:	f000 fbb3 	bl	800c704 <__mcmp>
 800bf9e:	462a      	mov	r2, r5
 800bfa0:	9009      	str	r0, [sp, #36]	@ 0x24
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	f000 fbc9 	bl	800c73c <__mdiff>
 800bfaa:	68c2      	ldr	r2, [r0, #12]
 800bfac:	4606      	mov	r6, r0
 800bfae:	bb02      	cbnz	r2, 800bff2 <_dtoa_r+0xa22>
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	4648      	mov	r0, r9
 800bfb4:	f000 fba6 	bl	800c704 <__mcmp>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4658      	mov	r0, fp
 800bfbe:	920c      	str	r2, [sp, #48]	@ 0x30
 800bfc0:	f000 f968 	bl	800c294 <_Bfree>
 800bfc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bfc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfc8:	9e07      	ldr	r6, [sp, #28]
 800bfca:	ea43 0102 	orr.w	r1, r3, r2
 800bfce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfd0:	4319      	orrs	r1, r3
 800bfd2:	d110      	bne.n	800bff6 <_dtoa_r+0xa26>
 800bfd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfd8:	d029      	beq.n	800c02e <_dtoa_r+0xa5e>
 800bfda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dd02      	ble.n	800bfe6 <_dtoa_r+0xa16>
 800bfe0:	9b08      	ldr	r3, [sp, #32]
 800bfe2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bfe6:	9b02      	ldr	r3, [sp, #8]
 800bfe8:	f883 8000 	strb.w	r8, [r3]
 800bfec:	e63b      	b.n	800bc66 <_dtoa_r+0x696>
 800bfee:	4628      	mov	r0, r5
 800bff0:	e7bb      	b.n	800bf6a <_dtoa_r+0x99a>
 800bff2:	2201      	movs	r2, #1
 800bff4:	e7e1      	b.n	800bfba <_dtoa_r+0x9ea>
 800bff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	db04      	blt.n	800c006 <_dtoa_r+0xa36>
 800bffc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800bffe:	430b      	orrs	r3, r1
 800c000:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c002:	430b      	orrs	r3, r1
 800c004:	d120      	bne.n	800c048 <_dtoa_r+0xa78>
 800c006:	2a00      	cmp	r2, #0
 800c008:	dded      	ble.n	800bfe6 <_dtoa_r+0xa16>
 800c00a:	4649      	mov	r1, r9
 800c00c:	2201      	movs	r2, #1
 800c00e:	4658      	mov	r0, fp
 800c010:	f000 fb0c 	bl	800c62c <__lshift>
 800c014:	4621      	mov	r1, r4
 800c016:	4681      	mov	r9, r0
 800c018:	f000 fb74 	bl	800c704 <__mcmp>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	dc03      	bgt.n	800c028 <_dtoa_r+0xa58>
 800c020:	d1e1      	bne.n	800bfe6 <_dtoa_r+0xa16>
 800c022:	f018 0f01 	tst.w	r8, #1
 800c026:	d0de      	beq.n	800bfe6 <_dtoa_r+0xa16>
 800c028:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c02c:	d1d8      	bne.n	800bfe0 <_dtoa_r+0xa10>
 800c02e:	2339      	movs	r3, #57	@ 0x39
 800c030:	9a02      	ldr	r2, [sp, #8]
 800c032:	7013      	strb	r3, [r2, #0]
 800c034:	4633      	mov	r3, r6
 800c036:	461e      	mov	r6, r3
 800c038:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	2a39      	cmp	r2, #57	@ 0x39
 800c040:	d052      	beq.n	800c0e8 <_dtoa_r+0xb18>
 800c042:	3201      	adds	r2, #1
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	e60e      	b.n	800bc66 <_dtoa_r+0x696>
 800c048:	2a00      	cmp	r2, #0
 800c04a:	dd07      	ble.n	800c05c <_dtoa_r+0xa8c>
 800c04c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c050:	d0ed      	beq.n	800c02e <_dtoa_r+0xa5e>
 800c052:	9a02      	ldr	r2, [sp, #8]
 800c054:	f108 0301 	add.w	r3, r8, #1
 800c058:	7013      	strb	r3, [r2, #0]
 800c05a:	e604      	b.n	800bc66 <_dtoa_r+0x696>
 800c05c:	9b07      	ldr	r3, [sp, #28]
 800c05e:	9a07      	ldr	r2, [sp, #28]
 800c060:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c066:	4293      	cmp	r3, r2
 800c068:	d028      	beq.n	800c0bc <_dtoa_r+0xaec>
 800c06a:	4649      	mov	r1, r9
 800c06c:	2300      	movs	r3, #0
 800c06e:	220a      	movs	r2, #10
 800c070:	4658      	mov	r0, fp
 800c072:	f000 f931 	bl	800c2d8 <__multadd>
 800c076:	42af      	cmp	r7, r5
 800c078:	4681      	mov	r9, r0
 800c07a:	f04f 0300 	mov.w	r3, #0
 800c07e:	f04f 020a 	mov.w	r2, #10
 800c082:	4639      	mov	r1, r7
 800c084:	4658      	mov	r0, fp
 800c086:	d107      	bne.n	800c098 <_dtoa_r+0xac8>
 800c088:	f000 f926 	bl	800c2d8 <__multadd>
 800c08c:	4607      	mov	r7, r0
 800c08e:	4605      	mov	r5, r0
 800c090:	9b07      	ldr	r3, [sp, #28]
 800c092:	3301      	adds	r3, #1
 800c094:	9307      	str	r3, [sp, #28]
 800c096:	e774      	b.n	800bf82 <_dtoa_r+0x9b2>
 800c098:	f000 f91e 	bl	800c2d8 <__multadd>
 800c09c:	4629      	mov	r1, r5
 800c09e:	4607      	mov	r7, r0
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	220a      	movs	r2, #10
 800c0a4:	4658      	mov	r0, fp
 800c0a6:	f000 f917 	bl	800c2d8 <__multadd>
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	e7f0      	b.n	800c090 <_dtoa_r+0xac0>
 800c0ae:	9b08      	ldr	r3, [sp, #32]
 800c0b0:	2700      	movs	r7, #0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bfcc      	ite	gt
 800c0b6:	461e      	movgt	r6, r3
 800c0b8:	2601      	movle	r6, #1
 800c0ba:	4456      	add	r6, sl
 800c0bc:	4649      	mov	r1, r9
 800c0be:	2201      	movs	r2, #1
 800c0c0:	4658      	mov	r0, fp
 800c0c2:	f000 fab3 	bl	800c62c <__lshift>
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	4681      	mov	r9, r0
 800c0ca:	f000 fb1b 	bl	800c704 <__mcmp>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	dcb0      	bgt.n	800c034 <_dtoa_r+0xa64>
 800c0d2:	d102      	bne.n	800c0da <_dtoa_r+0xb0a>
 800c0d4:	f018 0f01 	tst.w	r8, #1
 800c0d8:	d1ac      	bne.n	800c034 <_dtoa_r+0xa64>
 800c0da:	4633      	mov	r3, r6
 800c0dc:	461e      	mov	r6, r3
 800c0de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0e2:	2a30      	cmp	r2, #48	@ 0x30
 800c0e4:	d0fa      	beq.n	800c0dc <_dtoa_r+0xb0c>
 800c0e6:	e5be      	b.n	800bc66 <_dtoa_r+0x696>
 800c0e8:	459a      	cmp	sl, r3
 800c0ea:	d1a4      	bne.n	800c036 <_dtoa_r+0xa66>
 800c0ec:	9b04      	ldr	r3, [sp, #16]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	9304      	str	r3, [sp, #16]
 800c0f2:	2331      	movs	r3, #49	@ 0x31
 800c0f4:	f88a 3000 	strb.w	r3, [sl]
 800c0f8:	e5b5      	b.n	800bc66 <_dtoa_r+0x696>
 800c0fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c0fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c15c <_dtoa_r+0xb8c>
 800c100:	b11b      	cbz	r3, 800c10a <_dtoa_r+0xb3a>
 800c102:	f10a 0308 	add.w	r3, sl, #8
 800c106:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	4650      	mov	r0, sl
 800c10c:	b017      	add	sp, #92	@ 0x5c
 800c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c112:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c114:	2b01      	cmp	r3, #1
 800c116:	f77f ae3d 	ble.w	800bd94 <_dtoa_r+0x7c4>
 800c11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c11c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c11e:	2001      	movs	r0, #1
 800c120:	e65b      	b.n	800bdda <_dtoa_r+0x80a>
 800c122:	9b08      	ldr	r3, [sp, #32]
 800c124:	2b00      	cmp	r3, #0
 800c126:	f77f aed6 	ble.w	800bed6 <_dtoa_r+0x906>
 800c12a:	4656      	mov	r6, sl
 800c12c:	4621      	mov	r1, r4
 800c12e:	4648      	mov	r0, r9
 800c130:	f7ff f9c4 	bl	800b4bc <quorem>
 800c134:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c138:	9b08      	ldr	r3, [sp, #32]
 800c13a:	f806 8b01 	strb.w	r8, [r6], #1
 800c13e:	eba6 020a 	sub.w	r2, r6, sl
 800c142:	4293      	cmp	r3, r2
 800c144:	ddb3      	ble.n	800c0ae <_dtoa_r+0xade>
 800c146:	4649      	mov	r1, r9
 800c148:	2300      	movs	r3, #0
 800c14a:	220a      	movs	r2, #10
 800c14c:	4658      	mov	r0, fp
 800c14e:	f000 f8c3 	bl	800c2d8 <__multadd>
 800c152:	4681      	mov	r9, r0
 800c154:	e7ea      	b.n	800c12c <_dtoa_r+0xb5c>
 800c156:	bf00      	nop
 800c158:	0800dc8e 	.word	0x0800dc8e
 800c15c:	0800dc12 	.word	0x0800dc12

0800c160 <_free_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4605      	mov	r5, r0
 800c164:	2900      	cmp	r1, #0
 800c166:	d040      	beq.n	800c1ea <_free_r+0x8a>
 800c168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c16c:	1f0c      	subs	r4, r1, #4
 800c16e:	2b00      	cmp	r3, #0
 800c170:	bfb8      	it	lt
 800c172:	18e4      	addlt	r4, r4, r3
 800c174:	f7fe fa66 	bl	800a644 <__malloc_lock>
 800c178:	4a1c      	ldr	r2, [pc, #112]	@ (800c1ec <_free_r+0x8c>)
 800c17a:	6813      	ldr	r3, [r2, #0]
 800c17c:	b933      	cbnz	r3, 800c18c <_free_r+0x2c>
 800c17e:	6063      	str	r3, [r4, #4]
 800c180:	6014      	str	r4, [r2, #0]
 800c182:	4628      	mov	r0, r5
 800c184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c188:	f7fe ba62 	b.w	800a650 <__malloc_unlock>
 800c18c:	42a3      	cmp	r3, r4
 800c18e:	d908      	bls.n	800c1a2 <_free_r+0x42>
 800c190:	6820      	ldr	r0, [r4, #0]
 800c192:	1821      	adds	r1, r4, r0
 800c194:	428b      	cmp	r3, r1
 800c196:	bf01      	itttt	eq
 800c198:	6819      	ldreq	r1, [r3, #0]
 800c19a:	685b      	ldreq	r3, [r3, #4]
 800c19c:	1809      	addeq	r1, r1, r0
 800c19e:	6021      	streq	r1, [r4, #0]
 800c1a0:	e7ed      	b.n	800c17e <_free_r+0x1e>
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	b10b      	cbz	r3, 800c1ac <_free_r+0x4c>
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	d9fa      	bls.n	800c1a2 <_free_r+0x42>
 800c1ac:	6811      	ldr	r1, [r2, #0]
 800c1ae:	1850      	adds	r0, r2, r1
 800c1b0:	42a0      	cmp	r0, r4
 800c1b2:	d10b      	bne.n	800c1cc <_free_r+0x6c>
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	4401      	add	r1, r0
 800c1b8:	1850      	adds	r0, r2, r1
 800c1ba:	4283      	cmp	r3, r0
 800c1bc:	6011      	str	r1, [r2, #0]
 800c1be:	d1e0      	bne.n	800c182 <_free_r+0x22>
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	4408      	add	r0, r1
 800c1c6:	6010      	str	r0, [r2, #0]
 800c1c8:	6053      	str	r3, [r2, #4]
 800c1ca:	e7da      	b.n	800c182 <_free_r+0x22>
 800c1cc:	d902      	bls.n	800c1d4 <_free_r+0x74>
 800c1ce:	230c      	movs	r3, #12
 800c1d0:	602b      	str	r3, [r5, #0]
 800c1d2:	e7d6      	b.n	800c182 <_free_r+0x22>
 800c1d4:	6820      	ldr	r0, [r4, #0]
 800c1d6:	1821      	adds	r1, r4, r0
 800c1d8:	428b      	cmp	r3, r1
 800c1da:	bf01      	itttt	eq
 800c1dc:	6819      	ldreq	r1, [r3, #0]
 800c1de:	685b      	ldreq	r3, [r3, #4]
 800c1e0:	1809      	addeq	r1, r1, r0
 800c1e2:	6021      	streq	r1, [r4, #0]
 800c1e4:	6063      	str	r3, [r4, #4]
 800c1e6:	6054      	str	r4, [r2, #4]
 800c1e8:	e7cb      	b.n	800c182 <_free_r+0x22>
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	20002764 	.word	0x20002764

0800c1f0 <__ascii_mbtowc>:
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	b901      	cbnz	r1, 800c1f6 <__ascii_mbtowc+0x6>
 800c1f4:	a901      	add	r1, sp, #4
 800c1f6:	b142      	cbz	r2, 800c20a <__ascii_mbtowc+0x1a>
 800c1f8:	b14b      	cbz	r3, 800c20e <__ascii_mbtowc+0x1e>
 800c1fa:	7813      	ldrb	r3, [r2, #0]
 800c1fc:	600b      	str	r3, [r1, #0]
 800c1fe:	7812      	ldrb	r2, [r2, #0]
 800c200:	1e10      	subs	r0, r2, #0
 800c202:	bf18      	it	ne
 800c204:	2001      	movne	r0, #1
 800c206:	b002      	add	sp, #8
 800c208:	4770      	bx	lr
 800c20a:	4610      	mov	r0, r2
 800c20c:	e7fb      	b.n	800c206 <__ascii_mbtowc+0x16>
 800c20e:	f06f 0001 	mvn.w	r0, #1
 800c212:	e7f8      	b.n	800c206 <__ascii_mbtowc+0x16>

0800c214 <_Balloc>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	69c6      	ldr	r6, [r0, #28]
 800c218:	4604      	mov	r4, r0
 800c21a:	460d      	mov	r5, r1
 800c21c:	b976      	cbnz	r6, 800c23c <_Balloc+0x28>
 800c21e:	2010      	movs	r0, #16
 800c220:	f7fe f966 	bl	800a4f0 <malloc>
 800c224:	4602      	mov	r2, r0
 800c226:	61e0      	str	r0, [r4, #28]
 800c228:	b920      	cbnz	r0, 800c234 <_Balloc+0x20>
 800c22a:	216b      	movs	r1, #107	@ 0x6b
 800c22c:	4b17      	ldr	r3, [pc, #92]	@ (800c28c <_Balloc+0x78>)
 800c22e:	4818      	ldr	r0, [pc, #96]	@ (800c290 <_Balloc+0x7c>)
 800c230:	f7ff f926 	bl	800b480 <__assert_func>
 800c234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c238:	6006      	str	r6, [r0, #0]
 800c23a:	60c6      	str	r6, [r0, #12]
 800c23c:	69e6      	ldr	r6, [r4, #28]
 800c23e:	68f3      	ldr	r3, [r6, #12]
 800c240:	b183      	cbz	r3, 800c264 <_Balloc+0x50>
 800c242:	69e3      	ldr	r3, [r4, #28]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c24a:	b9b8      	cbnz	r0, 800c27c <_Balloc+0x68>
 800c24c:	2101      	movs	r1, #1
 800c24e:	fa01 f605 	lsl.w	r6, r1, r5
 800c252:	1d72      	adds	r2, r6, #5
 800c254:	4620      	mov	r0, r4
 800c256:	0092      	lsls	r2, r2, #2
 800c258:	f000 fded 	bl	800ce36 <_calloc_r>
 800c25c:	b160      	cbz	r0, 800c278 <_Balloc+0x64>
 800c25e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c262:	e00e      	b.n	800c282 <_Balloc+0x6e>
 800c264:	2221      	movs	r2, #33	@ 0x21
 800c266:	2104      	movs	r1, #4
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 fde4 	bl	800ce36 <_calloc_r>
 800c26e:	69e3      	ldr	r3, [r4, #28]
 800c270:	60f0      	str	r0, [r6, #12]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e4      	bne.n	800c242 <_Balloc+0x2e>
 800c278:	2000      	movs	r0, #0
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	6802      	ldr	r2, [r0, #0]
 800c27e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c282:	2300      	movs	r3, #0
 800c284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c288:	e7f7      	b.n	800c27a <_Balloc+0x66>
 800c28a:	bf00      	nop
 800c28c:	0800dc1f 	.word	0x0800dc1f
 800c290:	0800dc9f 	.word	0x0800dc9f

0800c294 <_Bfree>:
 800c294:	b570      	push	{r4, r5, r6, lr}
 800c296:	69c6      	ldr	r6, [r0, #28]
 800c298:	4605      	mov	r5, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	b976      	cbnz	r6, 800c2bc <_Bfree+0x28>
 800c29e:	2010      	movs	r0, #16
 800c2a0:	f7fe f926 	bl	800a4f0 <malloc>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	61e8      	str	r0, [r5, #28]
 800c2a8:	b920      	cbnz	r0, 800c2b4 <_Bfree+0x20>
 800c2aa:	218f      	movs	r1, #143	@ 0x8f
 800c2ac:	4b08      	ldr	r3, [pc, #32]	@ (800c2d0 <_Bfree+0x3c>)
 800c2ae:	4809      	ldr	r0, [pc, #36]	@ (800c2d4 <_Bfree+0x40>)
 800c2b0:	f7ff f8e6 	bl	800b480 <__assert_func>
 800c2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2b8:	6006      	str	r6, [r0, #0]
 800c2ba:	60c6      	str	r6, [r0, #12]
 800c2bc:	b13c      	cbz	r4, 800c2ce <_Bfree+0x3a>
 800c2be:	69eb      	ldr	r3, [r5, #28]
 800c2c0:	6862      	ldr	r2, [r4, #4]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2c8:	6021      	str	r1, [r4, #0]
 800c2ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	0800dc1f 	.word	0x0800dc1f
 800c2d4:	0800dc9f 	.word	0x0800dc9f

0800c2d8 <__multadd>:
 800c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	4607      	mov	r7, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	461e      	mov	r6, r3
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	690d      	ldr	r5, [r1, #16]
 800c2e6:	f101 0c14 	add.w	ip, r1, #20
 800c2ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	b299      	uxth	r1, r3
 800c2f2:	fb02 6101 	mla	r1, r2, r1, r6
 800c2f6:	0c1e      	lsrs	r6, r3, #16
 800c2f8:	0c0b      	lsrs	r3, r1, #16
 800c2fa:	fb02 3306 	mla	r3, r2, r6, r3
 800c2fe:	b289      	uxth	r1, r1
 800c300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c304:	4285      	cmp	r5, r0
 800c306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c30a:	f84c 1b04 	str.w	r1, [ip], #4
 800c30e:	dcec      	bgt.n	800c2ea <__multadd+0x12>
 800c310:	b30e      	cbz	r6, 800c356 <__multadd+0x7e>
 800c312:	68a3      	ldr	r3, [r4, #8]
 800c314:	42ab      	cmp	r3, r5
 800c316:	dc19      	bgt.n	800c34c <__multadd+0x74>
 800c318:	6861      	ldr	r1, [r4, #4]
 800c31a:	4638      	mov	r0, r7
 800c31c:	3101      	adds	r1, #1
 800c31e:	f7ff ff79 	bl	800c214 <_Balloc>
 800c322:	4680      	mov	r8, r0
 800c324:	b928      	cbnz	r0, 800c332 <__multadd+0x5a>
 800c326:	4602      	mov	r2, r0
 800c328:	21ba      	movs	r1, #186	@ 0xba
 800c32a:	4b0c      	ldr	r3, [pc, #48]	@ (800c35c <__multadd+0x84>)
 800c32c:	480c      	ldr	r0, [pc, #48]	@ (800c360 <__multadd+0x88>)
 800c32e:	f7ff f8a7 	bl	800b480 <__assert_func>
 800c332:	6922      	ldr	r2, [r4, #16]
 800c334:	f104 010c 	add.w	r1, r4, #12
 800c338:	3202      	adds	r2, #2
 800c33a:	0092      	lsls	r2, r2, #2
 800c33c:	300c      	adds	r0, #12
 800c33e:	f7ff f890 	bl	800b462 <memcpy>
 800c342:	4621      	mov	r1, r4
 800c344:	4638      	mov	r0, r7
 800c346:	f7ff ffa5 	bl	800c294 <_Bfree>
 800c34a:	4644      	mov	r4, r8
 800c34c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c350:	3501      	adds	r5, #1
 800c352:	615e      	str	r6, [r3, #20]
 800c354:	6125      	str	r5, [r4, #16]
 800c356:	4620      	mov	r0, r4
 800c358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c35c:	0800dc8e 	.word	0x0800dc8e
 800c360:	0800dc9f 	.word	0x0800dc9f

0800c364 <__hi0bits>:
 800c364:	4603      	mov	r3, r0
 800c366:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c36a:	bf3a      	itte	cc
 800c36c:	0403      	lslcc	r3, r0, #16
 800c36e:	2010      	movcc	r0, #16
 800c370:	2000      	movcs	r0, #0
 800c372:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c376:	bf3c      	itt	cc
 800c378:	021b      	lslcc	r3, r3, #8
 800c37a:	3008      	addcc	r0, #8
 800c37c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c380:	bf3c      	itt	cc
 800c382:	011b      	lslcc	r3, r3, #4
 800c384:	3004      	addcc	r0, #4
 800c386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c38a:	bf3c      	itt	cc
 800c38c:	009b      	lslcc	r3, r3, #2
 800c38e:	3002      	addcc	r0, #2
 800c390:	2b00      	cmp	r3, #0
 800c392:	db05      	blt.n	800c3a0 <__hi0bits+0x3c>
 800c394:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c398:	f100 0001 	add.w	r0, r0, #1
 800c39c:	bf08      	it	eq
 800c39e:	2020      	moveq	r0, #32
 800c3a0:	4770      	bx	lr

0800c3a2 <__lo0bits>:
 800c3a2:	6803      	ldr	r3, [r0, #0]
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	f013 0007 	ands.w	r0, r3, #7
 800c3aa:	d00b      	beq.n	800c3c4 <__lo0bits+0x22>
 800c3ac:	07d9      	lsls	r1, r3, #31
 800c3ae:	d421      	bmi.n	800c3f4 <__lo0bits+0x52>
 800c3b0:	0798      	lsls	r0, r3, #30
 800c3b2:	bf49      	itett	mi
 800c3b4:	085b      	lsrmi	r3, r3, #1
 800c3b6:	089b      	lsrpl	r3, r3, #2
 800c3b8:	2001      	movmi	r0, #1
 800c3ba:	6013      	strmi	r3, [r2, #0]
 800c3bc:	bf5c      	itt	pl
 800c3be:	2002      	movpl	r0, #2
 800c3c0:	6013      	strpl	r3, [r2, #0]
 800c3c2:	4770      	bx	lr
 800c3c4:	b299      	uxth	r1, r3
 800c3c6:	b909      	cbnz	r1, 800c3cc <__lo0bits+0x2a>
 800c3c8:	2010      	movs	r0, #16
 800c3ca:	0c1b      	lsrs	r3, r3, #16
 800c3cc:	b2d9      	uxtb	r1, r3
 800c3ce:	b909      	cbnz	r1, 800c3d4 <__lo0bits+0x32>
 800c3d0:	3008      	adds	r0, #8
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	0719      	lsls	r1, r3, #28
 800c3d6:	bf04      	itt	eq
 800c3d8:	091b      	lsreq	r3, r3, #4
 800c3da:	3004      	addeq	r0, #4
 800c3dc:	0799      	lsls	r1, r3, #30
 800c3de:	bf04      	itt	eq
 800c3e0:	089b      	lsreq	r3, r3, #2
 800c3e2:	3002      	addeq	r0, #2
 800c3e4:	07d9      	lsls	r1, r3, #31
 800c3e6:	d403      	bmi.n	800c3f0 <__lo0bits+0x4e>
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	f100 0001 	add.w	r0, r0, #1
 800c3ee:	d003      	beq.n	800c3f8 <__lo0bits+0x56>
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	4770      	bx	lr
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	4770      	bx	lr
 800c3f8:	2020      	movs	r0, #32
 800c3fa:	4770      	bx	lr

0800c3fc <__i2b>:
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	460c      	mov	r4, r1
 800c400:	2101      	movs	r1, #1
 800c402:	f7ff ff07 	bl	800c214 <_Balloc>
 800c406:	4602      	mov	r2, r0
 800c408:	b928      	cbnz	r0, 800c416 <__i2b+0x1a>
 800c40a:	f240 1145 	movw	r1, #325	@ 0x145
 800c40e:	4b04      	ldr	r3, [pc, #16]	@ (800c420 <__i2b+0x24>)
 800c410:	4804      	ldr	r0, [pc, #16]	@ (800c424 <__i2b+0x28>)
 800c412:	f7ff f835 	bl	800b480 <__assert_func>
 800c416:	2301      	movs	r3, #1
 800c418:	6144      	str	r4, [r0, #20]
 800c41a:	6103      	str	r3, [r0, #16]
 800c41c:	bd10      	pop	{r4, pc}
 800c41e:	bf00      	nop
 800c420:	0800dc8e 	.word	0x0800dc8e
 800c424:	0800dc9f 	.word	0x0800dc9f

0800c428 <__multiply>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	4614      	mov	r4, r2
 800c42e:	690a      	ldr	r2, [r1, #16]
 800c430:	6923      	ldr	r3, [r4, #16]
 800c432:	460f      	mov	r7, r1
 800c434:	429a      	cmp	r2, r3
 800c436:	bfa2      	ittt	ge
 800c438:	4623      	movge	r3, r4
 800c43a:	460c      	movge	r4, r1
 800c43c:	461f      	movge	r7, r3
 800c43e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c442:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c446:	68a3      	ldr	r3, [r4, #8]
 800c448:	6861      	ldr	r1, [r4, #4]
 800c44a:	eb0a 0609 	add.w	r6, sl, r9
 800c44e:	42b3      	cmp	r3, r6
 800c450:	b085      	sub	sp, #20
 800c452:	bfb8      	it	lt
 800c454:	3101      	addlt	r1, #1
 800c456:	f7ff fedd 	bl	800c214 <_Balloc>
 800c45a:	b930      	cbnz	r0, 800c46a <__multiply+0x42>
 800c45c:	4602      	mov	r2, r0
 800c45e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c462:	4b43      	ldr	r3, [pc, #268]	@ (800c570 <__multiply+0x148>)
 800c464:	4843      	ldr	r0, [pc, #268]	@ (800c574 <__multiply+0x14c>)
 800c466:	f7ff f80b 	bl	800b480 <__assert_func>
 800c46a:	f100 0514 	add.w	r5, r0, #20
 800c46e:	462b      	mov	r3, r5
 800c470:	2200      	movs	r2, #0
 800c472:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c476:	4543      	cmp	r3, r8
 800c478:	d321      	bcc.n	800c4be <__multiply+0x96>
 800c47a:	f107 0114 	add.w	r1, r7, #20
 800c47e:	f104 0214 	add.w	r2, r4, #20
 800c482:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c486:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c48a:	9302      	str	r3, [sp, #8]
 800c48c:	1b13      	subs	r3, r2, r4
 800c48e:	3b15      	subs	r3, #21
 800c490:	f023 0303 	bic.w	r3, r3, #3
 800c494:	3304      	adds	r3, #4
 800c496:	f104 0715 	add.w	r7, r4, #21
 800c49a:	42ba      	cmp	r2, r7
 800c49c:	bf38      	it	cc
 800c49e:	2304      	movcc	r3, #4
 800c4a0:	9301      	str	r3, [sp, #4]
 800c4a2:	9b02      	ldr	r3, [sp, #8]
 800c4a4:	9103      	str	r1, [sp, #12]
 800c4a6:	428b      	cmp	r3, r1
 800c4a8:	d80c      	bhi.n	800c4c4 <__multiply+0x9c>
 800c4aa:	2e00      	cmp	r6, #0
 800c4ac:	dd03      	ble.n	800c4b6 <__multiply+0x8e>
 800c4ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d05a      	beq.n	800c56c <__multiply+0x144>
 800c4b6:	6106      	str	r6, [r0, #16]
 800c4b8:	b005      	add	sp, #20
 800c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4be:	f843 2b04 	str.w	r2, [r3], #4
 800c4c2:	e7d8      	b.n	800c476 <__multiply+0x4e>
 800c4c4:	f8b1 a000 	ldrh.w	sl, [r1]
 800c4c8:	f1ba 0f00 	cmp.w	sl, #0
 800c4cc:	d023      	beq.n	800c516 <__multiply+0xee>
 800c4ce:	46a9      	mov	r9, r5
 800c4d0:	f04f 0c00 	mov.w	ip, #0
 800c4d4:	f104 0e14 	add.w	lr, r4, #20
 800c4d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4dc:	f8d9 3000 	ldr.w	r3, [r9]
 800c4e0:	fa1f fb87 	uxth.w	fp, r7
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	fb0a 330b 	mla	r3, sl, fp, r3
 800c4ea:	4463      	add	r3, ip
 800c4ec:	f8d9 c000 	ldr.w	ip, [r9]
 800c4f0:	0c3f      	lsrs	r7, r7, #16
 800c4f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c4f6:	fb0a c707 	mla	r7, sl, r7, ip
 800c4fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c504:	4572      	cmp	r2, lr
 800c506:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c50a:	f849 3b04 	str.w	r3, [r9], #4
 800c50e:	d8e3      	bhi.n	800c4d8 <__multiply+0xb0>
 800c510:	9b01      	ldr	r3, [sp, #4]
 800c512:	f845 c003 	str.w	ip, [r5, r3]
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	3104      	adds	r1, #4
 800c51a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c51e:	f1b9 0f00 	cmp.w	r9, #0
 800c522:	d021      	beq.n	800c568 <__multiply+0x140>
 800c524:	46ae      	mov	lr, r5
 800c526:	f04f 0a00 	mov.w	sl, #0
 800c52a:	682b      	ldr	r3, [r5, #0]
 800c52c:	f104 0c14 	add.w	ip, r4, #20
 800c530:	f8bc b000 	ldrh.w	fp, [ip]
 800c534:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	fb09 770b 	mla	r7, r9, fp, r7
 800c53e:	4457      	add	r7, sl
 800c540:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c544:	f84e 3b04 	str.w	r3, [lr], #4
 800c548:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c54c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c550:	f8be 3000 	ldrh.w	r3, [lr]
 800c554:	4562      	cmp	r2, ip
 800c556:	fb09 330a 	mla	r3, r9, sl, r3
 800c55a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c55e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c562:	d8e5      	bhi.n	800c530 <__multiply+0x108>
 800c564:	9f01      	ldr	r7, [sp, #4]
 800c566:	51eb      	str	r3, [r5, r7]
 800c568:	3504      	adds	r5, #4
 800c56a:	e79a      	b.n	800c4a2 <__multiply+0x7a>
 800c56c:	3e01      	subs	r6, #1
 800c56e:	e79c      	b.n	800c4aa <__multiply+0x82>
 800c570:	0800dc8e 	.word	0x0800dc8e
 800c574:	0800dc9f 	.word	0x0800dc9f

0800c578 <__pow5mult>:
 800c578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c57c:	4615      	mov	r5, r2
 800c57e:	f012 0203 	ands.w	r2, r2, #3
 800c582:	4607      	mov	r7, r0
 800c584:	460e      	mov	r6, r1
 800c586:	d007      	beq.n	800c598 <__pow5mult+0x20>
 800c588:	4c25      	ldr	r4, [pc, #148]	@ (800c620 <__pow5mult+0xa8>)
 800c58a:	3a01      	subs	r2, #1
 800c58c:	2300      	movs	r3, #0
 800c58e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c592:	f7ff fea1 	bl	800c2d8 <__multadd>
 800c596:	4606      	mov	r6, r0
 800c598:	10ad      	asrs	r5, r5, #2
 800c59a:	d03d      	beq.n	800c618 <__pow5mult+0xa0>
 800c59c:	69fc      	ldr	r4, [r7, #28]
 800c59e:	b97c      	cbnz	r4, 800c5c0 <__pow5mult+0x48>
 800c5a0:	2010      	movs	r0, #16
 800c5a2:	f7fd ffa5 	bl	800a4f0 <malloc>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	61f8      	str	r0, [r7, #28]
 800c5aa:	b928      	cbnz	r0, 800c5b8 <__pow5mult+0x40>
 800c5ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c5b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c624 <__pow5mult+0xac>)
 800c5b2:	481d      	ldr	r0, [pc, #116]	@ (800c628 <__pow5mult+0xb0>)
 800c5b4:	f7fe ff64 	bl	800b480 <__assert_func>
 800c5b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5bc:	6004      	str	r4, [r0, #0]
 800c5be:	60c4      	str	r4, [r0, #12]
 800c5c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c5c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5c8:	b94c      	cbnz	r4, 800c5de <__pow5mult+0x66>
 800c5ca:	f240 2171 	movw	r1, #625	@ 0x271
 800c5ce:	4638      	mov	r0, r7
 800c5d0:	f7ff ff14 	bl	800c3fc <__i2b>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5dc:	6003      	str	r3, [r0, #0]
 800c5de:	f04f 0900 	mov.w	r9, #0
 800c5e2:	07eb      	lsls	r3, r5, #31
 800c5e4:	d50a      	bpl.n	800c5fc <__pow5mult+0x84>
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	4622      	mov	r2, r4
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	f7ff ff1c 	bl	800c428 <__multiply>
 800c5f0:	4680      	mov	r8, r0
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7ff fe4d 	bl	800c294 <_Bfree>
 800c5fa:	4646      	mov	r6, r8
 800c5fc:	106d      	asrs	r5, r5, #1
 800c5fe:	d00b      	beq.n	800c618 <__pow5mult+0xa0>
 800c600:	6820      	ldr	r0, [r4, #0]
 800c602:	b938      	cbnz	r0, 800c614 <__pow5mult+0x9c>
 800c604:	4622      	mov	r2, r4
 800c606:	4621      	mov	r1, r4
 800c608:	4638      	mov	r0, r7
 800c60a:	f7ff ff0d 	bl	800c428 <__multiply>
 800c60e:	6020      	str	r0, [r4, #0]
 800c610:	f8c0 9000 	str.w	r9, [r0]
 800c614:	4604      	mov	r4, r0
 800c616:	e7e4      	b.n	800c5e2 <__pow5mult+0x6a>
 800c618:	4630      	mov	r0, r6
 800c61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c61e:	bf00      	nop
 800c620:	0800dcf8 	.word	0x0800dcf8
 800c624:	0800dc1f 	.word	0x0800dc1f
 800c628:	0800dc9f 	.word	0x0800dc9f

0800c62c <__lshift>:
 800c62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c630:	460c      	mov	r4, r1
 800c632:	4607      	mov	r7, r0
 800c634:	4691      	mov	r9, r2
 800c636:	6923      	ldr	r3, [r4, #16]
 800c638:	6849      	ldr	r1, [r1, #4]
 800c63a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c63e:	68a3      	ldr	r3, [r4, #8]
 800c640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c644:	f108 0601 	add.w	r6, r8, #1
 800c648:	42b3      	cmp	r3, r6
 800c64a:	db0b      	blt.n	800c664 <__lshift+0x38>
 800c64c:	4638      	mov	r0, r7
 800c64e:	f7ff fde1 	bl	800c214 <_Balloc>
 800c652:	4605      	mov	r5, r0
 800c654:	b948      	cbnz	r0, 800c66a <__lshift+0x3e>
 800c656:	4602      	mov	r2, r0
 800c658:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c65c:	4b27      	ldr	r3, [pc, #156]	@ (800c6fc <__lshift+0xd0>)
 800c65e:	4828      	ldr	r0, [pc, #160]	@ (800c700 <__lshift+0xd4>)
 800c660:	f7fe ff0e 	bl	800b480 <__assert_func>
 800c664:	3101      	adds	r1, #1
 800c666:	005b      	lsls	r3, r3, #1
 800c668:	e7ee      	b.n	800c648 <__lshift+0x1c>
 800c66a:	2300      	movs	r3, #0
 800c66c:	f100 0114 	add.w	r1, r0, #20
 800c670:	f100 0210 	add.w	r2, r0, #16
 800c674:	4618      	mov	r0, r3
 800c676:	4553      	cmp	r3, sl
 800c678:	db33      	blt.n	800c6e2 <__lshift+0xb6>
 800c67a:	6920      	ldr	r0, [r4, #16]
 800c67c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c680:	f104 0314 	add.w	r3, r4, #20
 800c684:	f019 091f 	ands.w	r9, r9, #31
 800c688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c68c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c690:	d02b      	beq.n	800c6ea <__lshift+0xbe>
 800c692:	468a      	mov	sl, r1
 800c694:	2200      	movs	r2, #0
 800c696:	f1c9 0e20 	rsb	lr, r9, #32
 800c69a:	6818      	ldr	r0, [r3, #0]
 800c69c:	fa00 f009 	lsl.w	r0, r0, r9
 800c6a0:	4310      	orrs	r0, r2
 800c6a2:	f84a 0b04 	str.w	r0, [sl], #4
 800c6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6aa:	459c      	cmp	ip, r3
 800c6ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6b0:	d8f3      	bhi.n	800c69a <__lshift+0x6e>
 800c6b2:	ebac 0304 	sub.w	r3, ip, r4
 800c6b6:	3b15      	subs	r3, #21
 800c6b8:	f023 0303 	bic.w	r3, r3, #3
 800c6bc:	3304      	adds	r3, #4
 800c6be:	f104 0015 	add.w	r0, r4, #21
 800c6c2:	4584      	cmp	ip, r0
 800c6c4:	bf38      	it	cc
 800c6c6:	2304      	movcc	r3, #4
 800c6c8:	50ca      	str	r2, [r1, r3]
 800c6ca:	b10a      	cbz	r2, 800c6d0 <__lshift+0xa4>
 800c6cc:	f108 0602 	add.w	r6, r8, #2
 800c6d0:	3e01      	subs	r6, #1
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	612e      	str	r6, [r5, #16]
 800c6d8:	f7ff fddc 	bl	800c294 <_Bfree>
 800c6dc:	4628      	mov	r0, r5
 800c6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	e7c5      	b.n	800c676 <__lshift+0x4a>
 800c6ea:	3904      	subs	r1, #4
 800c6ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f0:	459c      	cmp	ip, r3
 800c6f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6f6:	d8f9      	bhi.n	800c6ec <__lshift+0xc0>
 800c6f8:	e7ea      	b.n	800c6d0 <__lshift+0xa4>
 800c6fa:	bf00      	nop
 800c6fc:	0800dc8e 	.word	0x0800dc8e
 800c700:	0800dc9f 	.word	0x0800dc9f

0800c704 <__mcmp>:
 800c704:	4603      	mov	r3, r0
 800c706:	690a      	ldr	r2, [r1, #16]
 800c708:	6900      	ldr	r0, [r0, #16]
 800c70a:	b530      	push	{r4, r5, lr}
 800c70c:	1a80      	subs	r0, r0, r2
 800c70e:	d10e      	bne.n	800c72e <__mcmp+0x2a>
 800c710:	3314      	adds	r3, #20
 800c712:	3114      	adds	r1, #20
 800c714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c71c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c724:	4295      	cmp	r5, r2
 800c726:	d003      	beq.n	800c730 <__mcmp+0x2c>
 800c728:	d205      	bcs.n	800c736 <__mcmp+0x32>
 800c72a:	f04f 30ff 	mov.w	r0, #4294967295
 800c72e:	bd30      	pop	{r4, r5, pc}
 800c730:	42a3      	cmp	r3, r4
 800c732:	d3f3      	bcc.n	800c71c <__mcmp+0x18>
 800c734:	e7fb      	b.n	800c72e <__mcmp+0x2a>
 800c736:	2001      	movs	r0, #1
 800c738:	e7f9      	b.n	800c72e <__mcmp+0x2a>
	...

0800c73c <__mdiff>:
 800c73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c740:	4689      	mov	r9, r1
 800c742:	4606      	mov	r6, r0
 800c744:	4611      	mov	r1, r2
 800c746:	4648      	mov	r0, r9
 800c748:	4614      	mov	r4, r2
 800c74a:	f7ff ffdb 	bl	800c704 <__mcmp>
 800c74e:	1e05      	subs	r5, r0, #0
 800c750:	d112      	bne.n	800c778 <__mdiff+0x3c>
 800c752:	4629      	mov	r1, r5
 800c754:	4630      	mov	r0, r6
 800c756:	f7ff fd5d 	bl	800c214 <_Balloc>
 800c75a:	4602      	mov	r2, r0
 800c75c:	b928      	cbnz	r0, 800c76a <__mdiff+0x2e>
 800c75e:	f240 2137 	movw	r1, #567	@ 0x237
 800c762:	4b3e      	ldr	r3, [pc, #248]	@ (800c85c <__mdiff+0x120>)
 800c764:	483e      	ldr	r0, [pc, #248]	@ (800c860 <__mdiff+0x124>)
 800c766:	f7fe fe8b 	bl	800b480 <__assert_func>
 800c76a:	2301      	movs	r3, #1
 800c76c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c770:	4610      	mov	r0, r2
 800c772:	b003      	add	sp, #12
 800c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c778:	bfbc      	itt	lt
 800c77a:	464b      	movlt	r3, r9
 800c77c:	46a1      	movlt	r9, r4
 800c77e:	4630      	mov	r0, r6
 800c780:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c784:	bfba      	itte	lt
 800c786:	461c      	movlt	r4, r3
 800c788:	2501      	movlt	r5, #1
 800c78a:	2500      	movge	r5, #0
 800c78c:	f7ff fd42 	bl	800c214 <_Balloc>
 800c790:	4602      	mov	r2, r0
 800c792:	b918      	cbnz	r0, 800c79c <__mdiff+0x60>
 800c794:	f240 2145 	movw	r1, #581	@ 0x245
 800c798:	4b30      	ldr	r3, [pc, #192]	@ (800c85c <__mdiff+0x120>)
 800c79a:	e7e3      	b.n	800c764 <__mdiff+0x28>
 800c79c:	f100 0b14 	add.w	fp, r0, #20
 800c7a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7a4:	f109 0310 	add.w	r3, r9, #16
 800c7a8:	60c5      	str	r5, [r0, #12]
 800c7aa:	f04f 0c00 	mov.w	ip, #0
 800c7ae:	f109 0514 	add.w	r5, r9, #20
 800c7b2:	46d9      	mov	r9, fp
 800c7b4:	6926      	ldr	r6, [r4, #16]
 800c7b6:	f104 0e14 	add.w	lr, r4, #20
 800c7ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c7be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c7c2:	9301      	str	r3, [sp, #4]
 800c7c4:	9b01      	ldr	r3, [sp, #4]
 800c7c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c7ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c7ce:	b281      	uxth	r1, r0
 800c7d0:	9301      	str	r3, [sp, #4]
 800c7d2:	fa1f f38a 	uxth.w	r3, sl
 800c7d6:	1a5b      	subs	r3, r3, r1
 800c7d8:	0c00      	lsrs	r0, r0, #16
 800c7da:	4463      	add	r3, ip
 800c7dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c7e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c7ea:	4576      	cmp	r6, lr
 800c7ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7f0:	f849 3b04 	str.w	r3, [r9], #4
 800c7f4:	d8e6      	bhi.n	800c7c4 <__mdiff+0x88>
 800c7f6:	1b33      	subs	r3, r6, r4
 800c7f8:	3b15      	subs	r3, #21
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	3415      	adds	r4, #21
 800c800:	3304      	adds	r3, #4
 800c802:	42a6      	cmp	r6, r4
 800c804:	bf38      	it	cc
 800c806:	2304      	movcc	r3, #4
 800c808:	441d      	add	r5, r3
 800c80a:	445b      	add	r3, fp
 800c80c:	461e      	mov	r6, r3
 800c80e:	462c      	mov	r4, r5
 800c810:	4544      	cmp	r4, r8
 800c812:	d30e      	bcc.n	800c832 <__mdiff+0xf6>
 800c814:	f108 0103 	add.w	r1, r8, #3
 800c818:	1b49      	subs	r1, r1, r5
 800c81a:	f021 0103 	bic.w	r1, r1, #3
 800c81e:	3d03      	subs	r5, #3
 800c820:	45a8      	cmp	r8, r5
 800c822:	bf38      	it	cc
 800c824:	2100      	movcc	r1, #0
 800c826:	440b      	add	r3, r1
 800c828:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c82c:	b199      	cbz	r1, 800c856 <__mdiff+0x11a>
 800c82e:	6117      	str	r7, [r2, #16]
 800c830:	e79e      	b.n	800c770 <__mdiff+0x34>
 800c832:	46e6      	mov	lr, ip
 800c834:	f854 1b04 	ldr.w	r1, [r4], #4
 800c838:	fa1f fc81 	uxth.w	ip, r1
 800c83c:	44f4      	add	ip, lr
 800c83e:	0c08      	lsrs	r0, r1, #16
 800c840:	4471      	add	r1, lr
 800c842:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c846:	b289      	uxth	r1, r1
 800c848:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c84c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c850:	f846 1b04 	str.w	r1, [r6], #4
 800c854:	e7dc      	b.n	800c810 <__mdiff+0xd4>
 800c856:	3f01      	subs	r7, #1
 800c858:	e7e6      	b.n	800c828 <__mdiff+0xec>
 800c85a:	bf00      	nop
 800c85c:	0800dc8e 	.word	0x0800dc8e
 800c860:	0800dc9f 	.word	0x0800dc9f

0800c864 <__d2b>:
 800c864:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c868:	2101      	movs	r1, #1
 800c86a:	4690      	mov	r8, r2
 800c86c:	4699      	mov	r9, r3
 800c86e:	9e08      	ldr	r6, [sp, #32]
 800c870:	f7ff fcd0 	bl	800c214 <_Balloc>
 800c874:	4604      	mov	r4, r0
 800c876:	b930      	cbnz	r0, 800c886 <__d2b+0x22>
 800c878:	4602      	mov	r2, r0
 800c87a:	f240 310f 	movw	r1, #783	@ 0x30f
 800c87e:	4b23      	ldr	r3, [pc, #140]	@ (800c90c <__d2b+0xa8>)
 800c880:	4823      	ldr	r0, [pc, #140]	@ (800c910 <__d2b+0xac>)
 800c882:	f7fe fdfd 	bl	800b480 <__assert_func>
 800c886:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c88a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c88e:	b10d      	cbz	r5, 800c894 <__d2b+0x30>
 800c890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	f1b8 0300 	subs.w	r3, r8, #0
 800c89a:	d024      	beq.n	800c8e6 <__d2b+0x82>
 800c89c:	4668      	mov	r0, sp
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	f7ff fd7f 	bl	800c3a2 <__lo0bits>
 800c8a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8a8:	b1d8      	cbz	r0, 800c8e2 <__d2b+0x7e>
 800c8aa:	f1c0 0320 	rsb	r3, r0, #32
 800c8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b2:	430b      	orrs	r3, r1
 800c8b4:	40c2      	lsrs	r2, r0
 800c8b6:	6163      	str	r3, [r4, #20]
 800c8b8:	9201      	str	r2, [sp, #4]
 800c8ba:	9b01      	ldr	r3, [sp, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bf0c      	ite	eq
 800c8c0:	2201      	moveq	r2, #1
 800c8c2:	2202      	movne	r2, #2
 800c8c4:	61a3      	str	r3, [r4, #24]
 800c8c6:	6122      	str	r2, [r4, #16]
 800c8c8:	b1ad      	cbz	r5, 800c8f6 <__d2b+0x92>
 800c8ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8ce:	4405      	add	r5, r0
 800c8d0:	6035      	str	r5, [r6, #0]
 800c8d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d8:	6018      	str	r0, [r3, #0]
 800c8da:	4620      	mov	r0, r4
 800c8dc:	b002      	add	sp, #8
 800c8de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c8e2:	6161      	str	r1, [r4, #20]
 800c8e4:	e7e9      	b.n	800c8ba <__d2b+0x56>
 800c8e6:	a801      	add	r0, sp, #4
 800c8e8:	f7ff fd5b 	bl	800c3a2 <__lo0bits>
 800c8ec:	9b01      	ldr	r3, [sp, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	6163      	str	r3, [r4, #20]
 800c8f2:	3020      	adds	r0, #32
 800c8f4:	e7e7      	b.n	800c8c6 <__d2b+0x62>
 800c8f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8fe:	6030      	str	r0, [r6, #0]
 800c900:	6918      	ldr	r0, [r3, #16]
 800c902:	f7ff fd2f 	bl	800c364 <__hi0bits>
 800c906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c90a:	e7e4      	b.n	800c8d6 <__d2b+0x72>
 800c90c:	0800dc8e 	.word	0x0800dc8e
 800c910:	0800dc9f 	.word	0x0800dc9f

0800c914 <__ascii_wctomb>:
 800c914:	4603      	mov	r3, r0
 800c916:	4608      	mov	r0, r1
 800c918:	b141      	cbz	r1, 800c92c <__ascii_wctomb+0x18>
 800c91a:	2aff      	cmp	r2, #255	@ 0xff
 800c91c:	d904      	bls.n	800c928 <__ascii_wctomb+0x14>
 800c91e:	228a      	movs	r2, #138	@ 0x8a
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	601a      	str	r2, [r3, #0]
 800c926:	4770      	bx	lr
 800c928:	2001      	movs	r0, #1
 800c92a:	700a      	strb	r2, [r1, #0]
 800c92c:	4770      	bx	lr

0800c92e <__sfputc_r>:
 800c92e:	6893      	ldr	r3, [r2, #8]
 800c930:	b410      	push	{r4}
 800c932:	3b01      	subs	r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	6093      	str	r3, [r2, #8]
 800c938:	da07      	bge.n	800c94a <__sfputc_r+0x1c>
 800c93a:	6994      	ldr	r4, [r2, #24]
 800c93c:	42a3      	cmp	r3, r4
 800c93e:	db01      	blt.n	800c944 <__sfputc_r+0x16>
 800c940:	290a      	cmp	r1, #10
 800c942:	d102      	bne.n	800c94a <__sfputc_r+0x1c>
 800c944:	bc10      	pop	{r4}
 800c946:	f7fe bc5a 	b.w	800b1fe <__swbuf_r>
 800c94a:	6813      	ldr	r3, [r2, #0]
 800c94c:	1c58      	adds	r0, r3, #1
 800c94e:	6010      	str	r0, [r2, #0]
 800c950:	7019      	strb	r1, [r3, #0]
 800c952:	4608      	mov	r0, r1
 800c954:	bc10      	pop	{r4}
 800c956:	4770      	bx	lr

0800c958 <__sfputs_r>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	4606      	mov	r6, r0
 800c95c:	460f      	mov	r7, r1
 800c95e:	4614      	mov	r4, r2
 800c960:	18d5      	adds	r5, r2, r3
 800c962:	42ac      	cmp	r4, r5
 800c964:	d101      	bne.n	800c96a <__sfputs_r+0x12>
 800c966:	2000      	movs	r0, #0
 800c968:	e007      	b.n	800c97a <__sfputs_r+0x22>
 800c96a:	463a      	mov	r2, r7
 800c96c:	4630      	mov	r0, r6
 800c96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c972:	f7ff ffdc 	bl	800c92e <__sfputc_r>
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	d1f3      	bne.n	800c962 <__sfputs_r+0xa>
 800c97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c97c <_vfiprintf_r>:
 800c97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	460d      	mov	r5, r1
 800c982:	4614      	mov	r4, r2
 800c984:	4698      	mov	r8, r3
 800c986:	4606      	mov	r6, r0
 800c988:	b09d      	sub	sp, #116	@ 0x74
 800c98a:	b118      	cbz	r0, 800c994 <_vfiprintf_r+0x18>
 800c98c:	6a03      	ldr	r3, [r0, #32]
 800c98e:	b90b      	cbnz	r3, 800c994 <_vfiprintf_r+0x18>
 800c990:	f7fe fb4c 	bl	800b02c <__sinit>
 800c994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c996:	07d9      	lsls	r1, r3, #31
 800c998:	d405      	bmi.n	800c9a6 <_vfiprintf_r+0x2a>
 800c99a:	89ab      	ldrh	r3, [r5, #12]
 800c99c:	059a      	lsls	r2, r3, #22
 800c99e:	d402      	bmi.n	800c9a6 <_vfiprintf_r+0x2a>
 800c9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9a2:	f7fe fd4e 	bl	800b442 <__retarget_lock_acquire_recursive>
 800c9a6:	89ab      	ldrh	r3, [r5, #12]
 800c9a8:	071b      	lsls	r3, r3, #28
 800c9aa:	d501      	bpl.n	800c9b0 <_vfiprintf_r+0x34>
 800c9ac:	692b      	ldr	r3, [r5, #16]
 800c9ae:	b99b      	cbnz	r3, 800c9d8 <_vfiprintf_r+0x5c>
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7fe fc62 	bl	800b27c <__swsetup_r>
 800c9b8:	b170      	cbz	r0, 800c9d8 <_vfiprintf_r+0x5c>
 800c9ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9bc:	07dc      	lsls	r4, r3, #31
 800c9be:	d504      	bpl.n	800c9ca <_vfiprintf_r+0x4e>
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	b01d      	add	sp, #116	@ 0x74
 800c9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ca:	89ab      	ldrh	r3, [r5, #12]
 800c9cc:	0598      	lsls	r0, r3, #22
 800c9ce:	d4f7      	bmi.n	800c9c0 <_vfiprintf_r+0x44>
 800c9d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9d2:	f7fe fd37 	bl	800b444 <__retarget_lock_release_recursive>
 800c9d6:	e7f3      	b.n	800c9c0 <_vfiprintf_r+0x44>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9dc:	2320      	movs	r3, #32
 800c9de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9e2:	2330      	movs	r3, #48	@ 0x30
 800c9e4:	f04f 0901 	mov.w	r9, #1
 800c9e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cb98 <_vfiprintf_r+0x21c>
 800c9f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9f4:	4623      	mov	r3, r4
 800c9f6:	469a      	mov	sl, r3
 800c9f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9fc:	b10a      	cbz	r2, 800ca02 <_vfiprintf_r+0x86>
 800c9fe:	2a25      	cmp	r2, #37	@ 0x25
 800ca00:	d1f9      	bne.n	800c9f6 <_vfiprintf_r+0x7a>
 800ca02:	ebba 0b04 	subs.w	fp, sl, r4
 800ca06:	d00b      	beq.n	800ca20 <_vfiprintf_r+0xa4>
 800ca08:	465b      	mov	r3, fp
 800ca0a:	4622      	mov	r2, r4
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7ff ffa2 	bl	800c958 <__sfputs_r>
 800ca14:	3001      	adds	r0, #1
 800ca16:	f000 80a7 	beq.w	800cb68 <_vfiprintf_r+0x1ec>
 800ca1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca1c:	445a      	add	r2, fp
 800ca1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca20:	f89a 3000 	ldrb.w	r3, [sl]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 809f 	beq.w	800cb68 <_vfiprintf_r+0x1ec>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca34:	f10a 0a01 	add.w	sl, sl, #1
 800ca38:	9304      	str	r3, [sp, #16]
 800ca3a:	9307      	str	r3, [sp, #28]
 800ca3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca42:	4654      	mov	r4, sl
 800ca44:	2205      	movs	r2, #5
 800ca46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4a:	4853      	ldr	r0, [pc, #332]	@ (800cb98 <_vfiprintf_r+0x21c>)
 800ca4c:	f7fe fcfb 	bl	800b446 <memchr>
 800ca50:	9a04      	ldr	r2, [sp, #16]
 800ca52:	b9d8      	cbnz	r0, 800ca8c <_vfiprintf_r+0x110>
 800ca54:	06d1      	lsls	r1, r2, #27
 800ca56:	bf44      	itt	mi
 800ca58:	2320      	movmi	r3, #32
 800ca5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca5e:	0713      	lsls	r3, r2, #28
 800ca60:	bf44      	itt	mi
 800ca62:	232b      	movmi	r3, #43	@ 0x2b
 800ca64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca68:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca6e:	d015      	beq.n	800ca9c <_vfiprintf_r+0x120>
 800ca70:	4654      	mov	r4, sl
 800ca72:	2000      	movs	r0, #0
 800ca74:	f04f 0c0a 	mov.w	ip, #10
 800ca78:	9a07      	ldr	r2, [sp, #28]
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca80:	3b30      	subs	r3, #48	@ 0x30
 800ca82:	2b09      	cmp	r3, #9
 800ca84:	d94b      	bls.n	800cb1e <_vfiprintf_r+0x1a2>
 800ca86:	b1b0      	cbz	r0, 800cab6 <_vfiprintf_r+0x13a>
 800ca88:	9207      	str	r2, [sp, #28]
 800ca8a:	e014      	b.n	800cab6 <_vfiprintf_r+0x13a>
 800ca8c:	eba0 0308 	sub.w	r3, r0, r8
 800ca90:	fa09 f303 	lsl.w	r3, r9, r3
 800ca94:	4313      	orrs	r3, r2
 800ca96:	46a2      	mov	sl, r4
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	e7d2      	b.n	800ca42 <_vfiprintf_r+0xc6>
 800ca9c:	9b03      	ldr	r3, [sp, #12]
 800ca9e:	1d19      	adds	r1, r3, #4
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	9103      	str	r1, [sp, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfbb      	ittet	lt
 800caa8:	425b      	neglt	r3, r3
 800caaa:	f042 0202 	orrlt.w	r2, r2, #2
 800caae:	9307      	strge	r3, [sp, #28]
 800cab0:	9307      	strlt	r3, [sp, #28]
 800cab2:	bfb8      	it	lt
 800cab4:	9204      	strlt	r2, [sp, #16]
 800cab6:	7823      	ldrb	r3, [r4, #0]
 800cab8:	2b2e      	cmp	r3, #46	@ 0x2e
 800caba:	d10a      	bne.n	800cad2 <_vfiprintf_r+0x156>
 800cabc:	7863      	ldrb	r3, [r4, #1]
 800cabe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cac0:	d132      	bne.n	800cb28 <_vfiprintf_r+0x1ac>
 800cac2:	9b03      	ldr	r3, [sp, #12]
 800cac4:	3402      	adds	r4, #2
 800cac6:	1d1a      	adds	r2, r3, #4
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	9203      	str	r2, [sp, #12]
 800cacc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cad0:	9305      	str	r3, [sp, #20]
 800cad2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cb9c <_vfiprintf_r+0x220>
 800cad6:	2203      	movs	r2, #3
 800cad8:	4650      	mov	r0, sl
 800cada:	7821      	ldrb	r1, [r4, #0]
 800cadc:	f7fe fcb3 	bl	800b446 <memchr>
 800cae0:	b138      	cbz	r0, 800caf2 <_vfiprintf_r+0x176>
 800cae2:	2240      	movs	r2, #64	@ 0x40
 800cae4:	9b04      	ldr	r3, [sp, #16]
 800cae6:	eba0 000a 	sub.w	r0, r0, sl
 800caea:	4082      	lsls	r2, r0
 800caec:	4313      	orrs	r3, r2
 800caee:	3401      	adds	r4, #1
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf6:	2206      	movs	r2, #6
 800caf8:	4829      	ldr	r0, [pc, #164]	@ (800cba0 <_vfiprintf_r+0x224>)
 800cafa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cafe:	f7fe fca2 	bl	800b446 <memchr>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d03f      	beq.n	800cb86 <_vfiprintf_r+0x20a>
 800cb06:	4b27      	ldr	r3, [pc, #156]	@ (800cba4 <_vfiprintf_r+0x228>)
 800cb08:	bb1b      	cbnz	r3, 800cb52 <_vfiprintf_r+0x1d6>
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	3307      	adds	r3, #7
 800cb0e:	f023 0307 	bic.w	r3, r3, #7
 800cb12:	3308      	adds	r3, #8
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb18:	443b      	add	r3, r7
 800cb1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb1c:	e76a      	b.n	800c9f4 <_vfiprintf_r+0x78>
 800cb1e:	460c      	mov	r4, r1
 800cb20:	2001      	movs	r0, #1
 800cb22:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb26:	e7a8      	b.n	800ca7a <_vfiprintf_r+0xfe>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	f04f 0c0a 	mov.w	ip, #10
 800cb2e:	4619      	mov	r1, r3
 800cb30:	3401      	adds	r4, #1
 800cb32:	9305      	str	r3, [sp, #20]
 800cb34:	4620      	mov	r0, r4
 800cb36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3a:	3a30      	subs	r2, #48	@ 0x30
 800cb3c:	2a09      	cmp	r2, #9
 800cb3e:	d903      	bls.n	800cb48 <_vfiprintf_r+0x1cc>
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d0c6      	beq.n	800cad2 <_vfiprintf_r+0x156>
 800cb44:	9105      	str	r1, [sp, #20]
 800cb46:	e7c4      	b.n	800cad2 <_vfiprintf_r+0x156>
 800cb48:	4604      	mov	r4, r0
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb50:	e7f0      	b.n	800cb34 <_vfiprintf_r+0x1b8>
 800cb52:	ab03      	add	r3, sp, #12
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	462a      	mov	r2, r5
 800cb58:	4630      	mov	r0, r6
 800cb5a:	4b13      	ldr	r3, [pc, #76]	@ (800cba8 <_vfiprintf_r+0x22c>)
 800cb5c:	a904      	add	r1, sp, #16
 800cb5e:	f7fd fe1b 	bl	800a798 <_printf_float>
 800cb62:	4607      	mov	r7, r0
 800cb64:	1c78      	adds	r0, r7, #1
 800cb66:	d1d6      	bne.n	800cb16 <_vfiprintf_r+0x19a>
 800cb68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb6a:	07d9      	lsls	r1, r3, #31
 800cb6c:	d405      	bmi.n	800cb7a <_vfiprintf_r+0x1fe>
 800cb6e:	89ab      	ldrh	r3, [r5, #12]
 800cb70:	059a      	lsls	r2, r3, #22
 800cb72:	d402      	bmi.n	800cb7a <_vfiprintf_r+0x1fe>
 800cb74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb76:	f7fe fc65 	bl	800b444 <__retarget_lock_release_recursive>
 800cb7a:	89ab      	ldrh	r3, [r5, #12]
 800cb7c:	065b      	lsls	r3, r3, #25
 800cb7e:	f53f af1f 	bmi.w	800c9c0 <_vfiprintf_r+0x44>
 800cb82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb84:	e71e      	b.n	800c9c4 <_vfiprintf_r+0x48>
 800cb86:	ab03      	add	r3, sp, #12
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	462a      	mov	r2, r5
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4b06      	ldr	r3, [pc, #24]	@ (800cba8 <_vfiprintf_r+0x22c>)
 800cb90:	a904      	add	r1, sp, #16
 800cb92:	f7fe f89f 	bl	800acd4 <_printf_i>
 800cb96:	e7e4      	b.n	800cb62 <_vfiprintf_r+0x1e6>
 800cb98:	0800def9 	.word	0x0800def9
 800cb9c:	0800deff 	.word	0x0800deff
 800cba0:	0800df03 	.word	0x0800df03
 800cba4:	0800a799 	.word	0x0800a799
 800cba8:	0800c959 	.word	0x0800c959

0800cbac <__sflush_r>:
 800cbac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	0716      	lsls	r6, r2, #28
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	d454      	bmi.n	800cc64 <__sflush_r+0xb8>
 800cbba:	684b      	ldr	r3, [r1, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	dc02      	bgt.n	800cbc6 <__sflush_r+0x1a>
 800cbc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	dd48      	ble.n	800cc58 <__sflush_r+0xac>
 800cbc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbc8:	2e00      	cmp	r6, #0
 800cbca:	d045      	beq.n	800cc58 <__sflush_r+0xac>
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbd2:	682f      	ldr	r7, [r5, #0]
 800cbd4:	6a21      	ldr	r1, [r4, #32]
 800cbd6:	602b      	str	r3, [r5, #0]
 800cbd8:	d030      	beq.n	800cc3c <__sflush_r+0x90>
 800cbda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbdc:	89a3      	ldrh	r3, [r4, #12]
 800cbde:	0759      	lsls	r1, r3, #29
 800cbe0:	d505      	bpl.n	800cbee <__sflush_r+0x42>
 800cbe2:	6863      	ldr	r3, [r4, #4]
 800cbe4:	1ad2      	subs	r2, r2, r3
 800cbe6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbe8:	b10b      	cbz	r3, 800cbee <__sflush_r+0x42>
 800cbea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbec:	1ad2      	subs	r2, r2, r3
 800cbee:	2300      	movs	r3, #0
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbf4:	6a21      	ldr	r1, [r4, #32]
 800cbf6:	47b0      	blx	r6
 800cbf8:	1c43      	adds	r3, r0, #1
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	d106      	bne.n	800cc0c <__sflush_r+0x60>
 800cbfe:	6829      	ldr	r1, [r5, #0]
 800cc00:	291d      	cmp	r1, #29
 800cc02:	d82b      	bhi.n	800cc5c <__sflush_r+0xb0>
 800cc04:	4a28      	ldr	r2, [pc, #160]	@ (800cca8 <__sflush_r+0xfc>)
 800cc06:	410a      	asrs	r2, r1
 800cc08:	07d6      	lsls	r6, r2, #31
 800cc0a:	d427      	bmi.n	800cc5c <__sflush_r+0xb0>
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	6062      	str	r2, [r4, #4]
 800cc10:	6922      	ldr	r2, [r4, #16]
 800cc12:	04d9      	lsls	r1, r3, #19
 800cc14:	6022      	str	r2, [r4, #0]
 800cc16:	d504      	bpl.n	800cc22 <__sflush_r+0x76>
 800cc18:	1c42      	adds	r2, r0, #1
 800cc1a:	d101      	bne.n	800cc20 <__sflush_r+0x74>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	b903      	cbnz	r3, 800cc22 <__sflush_r+0x76>
 800cc20:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc24:	602f      	str	r7, [r5, #0]
 800cc26:	b1b9      	cbz	r1, 800cc58 <__sflush_r+0xac>
 800cc28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc2c:	4299      	cmp	r1, r3
 800cc2e:	d002      	beq.n	800cc36 <__sflush_r+0x8a>
 800cc30:	4628      	mov	r0, r5
 800cc32:	f7ff fa95 	bl	800c160 <_free_r>
 800cc36:	2300      	movs	r3, #0
 800cc38:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc3a:	e00d      	b.n	800cc58 <__sflush_r+0xac>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b0      	blx	r6
 800cc42:	4602      	mov	r2, r0
 800cc44:	1c50      	adds	r0, r2, #1
 800cc46:	d1c9      	bne.n	800cbdc <__sflush_r+0x30>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0c6      	beq.n	800cbdc <__sflush_r+0x30>
 800cc4e:	2b1d      	cmp	r3, #29
 800cc50:	d001      	beq.n	800cc56 <__sflush_r+0xaa>
 800cc52:	2b16      	cmp	r3, #22
 800cc54:	d11d      	bne.n	800cc92 <__sflush_r+0xe6>
 800cc56:	602f      	str	r7, [r5, #0]
 800cc58:	2000      	movs	r0, #0
 800cc5a:	e021      	b.n	800cca0 <__sflush_r+0xf4>
 800cc5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc60:	b21b      	sxth	r3, r3
 800cc62:	e01a      	b.n	800cc9a <__sflush_r+0xee>
 800cc64:	690f      	ldr	r7, [r1, #16]
 800cc66:	2f00      	cmp	r7, #0
 800cc68:	d0f6      	beq.n	800cc58 <__sflush_r+0xac>
 800cc6a:	0793      	lsls	r3, r2, #30
 800cc6c:	bf18      	it	ne
 800cc6e:	2300      	movne	r3, #0
 800cc70:	680e      	ldr	r6, [r1, #0]
 800cc72:	bf08      	it	eq
 800cc74:	694b      	ldreq	r3, [r1, #20]
 800cc76:	1bf6      	subs	r6, r6, r7
 800cc78:	600f      	str	r7, [r1, #0]
 800cc7a:	608b      	str	r3, [r1, #8]
 800cc7c:	2e00      	cmp	r6, #0
 800cc7e:	ddeb      	ble.n	800cc58 <__sflush_r+0xac>
 800cc80:	4633      	mov	r3, r6
 800cc82:	463a      	mov	r2, r7
 800cc84:	4628      	mov	r0, r5
 800cc86:	6a21      	ldr	r1, [r4, #32]
 800cc88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cc8c:	47e0      	blx	ip
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	dc07      	bgt.n	800cca2 <__sflush_r+0xf6>
 800cc92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca2:	4407      	add	r7, r0
 800cca4:	1a36      	subs	r6, r6, r0
 800cca6:	e7e9      	b.n	800cc7c <__sflush_r+0xd0>
 800cca8:	dfbffffe 	.word	0xdfbffffe

0800ccac <_fflush_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	690b      	ldr	r3, [r1, #16]
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	b913      	cbnz	r3, 800ccbc <_fflush_r+0x10>
 800ccb6:	2500      	movs	r5, #0
 800ccb8:	4628      	mov	r0, r5
 800ccba:	bd38      	pop	{r3, r4, r5, pc}
 800ccbc:	b118      	cbz	r0, 800ccc6 <_fflush_r+0x1a>
 800ccbe:	6a03      	ldr	r3, [r0, #32]
 800ccc0:	b90b      	cbnz	r3, 800ccc6 <_fflush_r+0x1a>
 800ccc2:	f7fe f9b3 	bl	800b02c <__sinit>
 800ccc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0f3      	beq.n	800ccb6 <_fflush_r+0xa>
 800ccce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ccd0:	07d0      	lsls	r0, r2, #31
 800ccd2:	d404      	bmi.n	800ccde <_fflush_r+0x32>
 800ccd4:	0599      	lsls	r1, r3, #22
 800ccd6:	d402      	bmi.n	800ccde <_fflush_r+0x32>
 800ccd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccda:	f7fe fbb2 	bl	800b442 <__retarget_lock_acquire_recursive>
 800ccde:	4628      	mov	r0, r5
 800cce0:	4621      	mov	r1, r4
 800cce2:	f7ff ff63 	bl	800cbac <__sflush_r>
 800cce6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cce8:	4605      	mov	r5, r0
 800ccea:	07da      	lsls	r2, r3, #31
 800ccec:	d4e4      	bmi.n	800ccb8 <_fflush_r+0xc>
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	059b      	lsls	r3, r3, #22
 800ccf2:	d4e1      	bmi.n	800ccb8 <_fflush_r+0xc>
 800ccf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccf6:	f7fe fba5 	bl	800b444 <__retarget_lock_release_recursive>
 800ccfa:	e7dd      	b.n	800ccb8 <_fflush_r+0xc>

0800ccfc <fiprintf>:
 800ccfc:	b40e      	push	{r1, r2, r3}
 800ccfe:	b503      	push	{r0, r1, lr}
 800cd00:	4601      	mov	r1, r0
 800cd02:	ab03      	add	r3, sp, #12
 800cd04:	4805      	ldr	r0, [pc, #20]	@ (800cd1c <fiprintf+0x20>)
 800cd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd0a:	6800      	ldr	r0, [r0, #0]
 800cd0c:	9301      	str	r3, [sp, #4]
 800cd0e:	f7ff fe35 	bl	800c97c <_vfiprintf_r>
 800cd12:	b002      	add	sp, #8
 800cd14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd18:	b003      	add	sp, #12
 800cd1a:	4770      	bx	lr
 800cd1c:	2000019c 	.word	0x2000019c

0800cd20 <__swhatbuf_r>:
 800cd20:	b570      	push	{r4, r5, r6, lr}
 800cd22:	460c      	mov	r4, r1
 800cd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd28:	4615      	mov	r5, r2
 800cd2a:	2900      	cmp	r1, #0
 800cd2c:	461e      	mov	r6, r3
 800cd2e:	b096      	sub	sp, #88	@ 0x58
 800cd30:	da0c      	bge.n	800cd4c <__swhatbuf_r+0x2c>
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	2100      	movs	r1, #0
 800cd36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd3a:	bf14      	ite	ne
 800cd3c:	2340      	movne	r3, #64	@ 0x40
 800cd3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd42:	2000      	movs	r0, #0
 800cd44:	6031      	str	r1, [r6, #0]
 800cd46:	602b      	str	r3, [r5, #0]
 800cd48:	b016      	add	sp, #88	@ 0x58
 800cd4a:	bd70      	pop	{r4, r5, r6, pc}
 800cd4c:	466a      	mov	r2, sp
 800cd4e:	f000 f849 	bl	800cde4 <_fstat_r>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	dbed      	blt.n	800cd32 <__swhatbuf_r+0x12>
 800cd56:	9901      	ldr	r1, [sp, #4]
 800cd58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd60:	4259      	negs	r1, r3
 800cd62:	4159      	adcs	r1, r3
 800cd64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd68:	e7eb      	b.n	800cd42 <__swhatbuf_r+0x22>

0800cd6a <__smakebuf_r>:
 800cd6a:	898b      	ldrh	r3, [r1, #12]
 800cd6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd6e:	079d      	lsls	r5, r3, #30
 800cd70:	4606      	mov	r6, r0
 800cd72:	460c      	mov	r4, r1
 800cd74:	d507      	bpl.n	800cd86 <__smakebuf_r+0x1c>
 800cd76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd7a:	6023      	str	r3, [r4, #0]
 800cd7c:	6123      	str	r3, [r4, #16]
 800cd7e:	2301      	movs	r3, #1
 800cd80:	6163      	str	r3, [r4, #20]
 800cd82:	b003      	add	sp, #12
 800cd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd86:	466a      	mov	r2, sp
 800cd88:	ab01      	add	r3, sp, #4
 800cd8a:	f7ff ffc9 	bl	800cd20 <__swhatbuf_r>
 800cd8e:	9f00      	ldr	r7, [sp, #0]
 800cd90:	4605      	mov	r5, r0
 800cd92:	4639      	mov	r1, r7
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7fd fbd5 	bl	800a544 <_malloc_r>
 800cd9a:	b948      	cbnz	r0, 800cdb0 <__smakebuf_r+0x46>
 800cd9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda0:	059a      	lsls	r2, r3, #22
 800cda2:	d4ee      	bmi.n	800cd82 <__smakebuf_r+0x18>
 800cda4:	f023 0303 	bic.w	r3, r3, #3
 800cda8:	f043 0302 	orr.w	r3, r3, #2
 800cdac:	81a3      	strh	r3, [r4, #12]
 800cdae:	e7e2      	b.n	800cd76 <__smakebuf_r+0xc>
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdba:	81a3      	strh	r3, [r4, #12]
 800cdbc:	9b01      	ldr	r3, [sp, #4]
 800cdbe:	6020      	str	r0, [r4, #0]
 800cdc0:	b15b      	cbz	r3, 800cdda <__smakebuf_r+0x70>
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdc8:	f000 f81e 	bl	800ce08 <_isatty_r>
 800cdcc:	b128      	cbz	r0, 800cdda <__smakebuf_r+0x70>
 800cdce:	89a3      	ldrh	r3, [r4, #12]
 800cdd0:	f023 0303 	bic.w	r3, r3, #3
 800cdd4:	f043 0301 	orr.w	r3, r3, #1
 800cdd8:	81a3      	strh	r3, [r4, #12]
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	431d      	orrs	r5, r3
 800cdde:	81a5      	strh	r5, [r4, #12]
 800cde0:	e7cf      	b.n	800cd82 <__smakebuf_r+0x18>
	...

0800cde4 <_fstat_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	2300      	movs	r3, #0
 800cde8:	4d06      	ldr	r5, [pc, #24]	@ (800ce04 <_fstat_r+0x20>)
 800cdea:	4604      	mov	r4, r0
 800cdec:	4608      	mov	r0, r1
 800cdee:	4611      	mov	r1, r2
 800cdf0:	602b      	str	r3, [r5, #0]
 800cdf2:	f7f6 fab4 	bl	800335e <_fstat>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	d102      	bne.n	800ce00 <_fstat_r+0x1c>
 800cdfa:	682b      	ldr	r3, [r5, #0]
 800cdfc:	b103      	cbz	r3, 800ce00 <_fstat_r+0x1c>
 800cdfe:	6023      	str	r3, [r4, #0]
 800ce00:	bd38      	pop	{r3, r4, r5, pc}
 800ce02:	bf00      	nop
 800ce04:	200028a4 	.word	0x200028a4

0800ce08 <_isatty_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	4d05      	ldr	r5, [pc, #20]	@ (800ce24 <_isatty_r+0x1c>)
 800ce0e:	4604      	mov	r4, r0
 800ce10:	4608      	mov	r0, r1
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	f7f6 faa8 	bl	8003368 <_isatty>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_isatty_r+0x1a>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_isatty_r+0x1a>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	200028a4 	.word	0x200028a4

0800ce28 <abort>:
 800ce28:	2006      	movs	r0, #6
 800ce2a:	b508      	push	{r3, lr}
 800ce2c:	f000 f840 	bl	800ceb0 <raise>
 800ce30:	2001      	movs	r0, #1
 800ce32:	f7f6 fa7b 	bl	800332c <_exit>

0800ce36 <_calloc_r>:
 800ce36:	b570      	push	{r4, r5, r6, lr}
 800ce38:	fba1 5402 	umull	r5, r4, r1, r2
 800ce3c:	b93c      	cbnz	r4, 800ce4e <_calloc_r+0x18>
 800ce3e:	4629      	mov	r1, r5
 800ce40:	f7fd fb80 	bl	800a544 <_malloc_r>
 800ce44:	4606      	mov	r6, r0
 800ce46:	b928      	cbnz	r0, 800ce54 <_calloc_r+0x1e>
 800ce48:	2600      	movs	r6, #0
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	220c      	movs	r2, #12
 800ce50:	6002      	str	r2, [r0, #0]
 800ce52:	e7f9      	b.n	800ce48 <_calloc_r+0x12>
 800ce54:	462a      	mov	r2, r5
 800ce56:	4621      	mov	r1, r4
 800ce58:	f7fe fa66 	bl	800b328 <memset>
 800ce5c:	e7f5      	b.n	800ce4a <_calloc_r+0x14>

0800ce5e <_raise_r>:
 800ce5e:	291f      	cmp	r1, #31
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4605      	mov	r5, r0
 800ce64:	460c      	mov	r4, r1
 800ce66:	d904      	bls.n	800ce72 <_raise_r+0x14>
 800ce68:	2316      	movs	r3, #22
 800ce6a:	6003      	str	r3, [r0, #0]
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce70:	bd38      	pop	{r3, r4, r5, pc}
 800ce72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce74:	b112      	cbz	r2, 800ce7c <_raise_r+0x1e>
 800ce76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce7a:	b94b      	cbnz	r3, 800ce90 <_raise_r+0x32>
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	f000 f831 	bl	800cee4 <_getpid_r>
 800ce82:	4622      	mov	r2, r4
 800ce84:	4601      	mov	r1, r0
 800ce86:	4628      	mov	r0, r5
 800ce88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce8c:	f000 b818 	b.w	800cec0 <_kill_r>
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d00a      	beq.n	800ceaa <_raise_r+0x4c>
 800ce94:	1c59      	adds	r1, r3, #1
 800ce96:	d103      	bne.n	800cea0 <_raise_r+0x42>
 800ce98:	2316      	movs	r3, #22
 800ce9a:	6003      	str	r3, [r0, #0]
 800ce9c:	2001      	movs	r0, #1
 800ce9e:	e7e7      	b.n	800ce70 <_raise_r+0x12>
 800cea0:	2100      	movs	r1, #0
 800cea2:	4620      	mov	r0, r4
 800cea4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cea8:	4798      	blx	r3
 800ceaa:	2000      	movs	r0, #0
 800ceac:	e7e0      	b.n	800ce70 <_raise_r+0x12>
	...

0800ceb0 <raise>:
 800ceb0:	4b02      	ldr	r3, [pc, #8]	@ (800cebc <raise+0xc>)
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	6818      	ldr	r0, [r3, #0]
 800ceb6:	f7ff bfd2 	b.w	800ce5e <_raise_r>
 800ceba:	bf00      	nop
 800cebc:	2000019c 	.word	0x2000019c

0800cec0 <_kill_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	2300      	movs	r3, #0
 800cec4:	4d06      	ldr	r5, [pc, #24]	@ (800cee0 <_kill_r+0x20>)
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	4611      	mov	r1, r2
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	f7f6 fa25 	bl	800331c <_kill>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	d102      	bne.n	800cedc <_kill_r+0x1c>
 800ced6:	682b      	ldr	r3, [r5, #0]
 800ced8:	b103      	cbz	r3, 800cedc <_kill_r+0x1c>
 800ceda:	6023      	str	r3, [r4, #0]
 800cedc:	bd38      	pop	{r3, r4, r5, pc}
 800cede:	bf00      	nop
 800cee0:	200028a4 	.word	0x200028a4

0800cee4 <_getpid_r>:
 800cee4:	f7f6 ba18 	b.w	8003318 <_getpid>

0800cee8 <_init>:
 800cee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceea:	bf00      	nop
 800ceec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceee:	bc08      	pop	{r3}
 800cef0:	469e      	mov	lr, r3
 800cef2:	4770      	bx	lr

0800cef4 <_fini>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	bf00      	nop
 800cef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefa:	bc08      	pop	{r3}
 800cefc:	469e      	mov	lr, r3
 800cefe:	4770      	bx	lr
